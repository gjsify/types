
/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/gjsify/ts-for-gir
 */

import './node-gxml-0.14-import.d.ts';
    
/**
 * GXml-0.14
 */

import type libxml2 from '@girs/node-libxml2-2.0';
import type Gio from '@girs/node-gio-2.0';
import type GObject from '@girs/node-gobject-2.0';
import type GLib from '@girs/node-glib-2.0';
import type Gee from '@girs/node-gee-0.8';

export namespace GXml {

enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
enum DocumentError {
    INVALID_DOCUMENT_ERROR,
    INVALID_FILE,
}
enum SerializableError {
    UNSUPPORTED_TYPE_ERROR,
    STR_TO_VALUE_ERROR,
}
enum SerializableEnumError {
    INVALID_VALUE_ERROR,
    PARSE_ERROR,
}
enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
enum TDocumentReadType {
    NEXT,
    CONTINUE,
    STOP,
}
enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
module Attribute {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Attribute

        namespace?: Namespace | null
    }

}

interface Attribute extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Attribute

    namespace: Namespace
    readonly prefix: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Attribute

    // Has conflict: getNamespace(): Namespace | null
    // Has conflict: setNamespace(value?: Namespace | null): void
    // Has conflict: getPrefix(): string | null

    // Own virtual methods of GXml-0.14.GXml.Attribute

    getNamespace(): Namespace | null
    setNamespace(value?: Namespace | null): void

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getPrefix(): string | null

    // Class property signals of GXml-0.14.GXml.Attribute

    connect(sigName: "notify::namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Attribute {

    // Own properties of GXml-0.14.GXml.Attribute

    static name: string

    // Constructors of GXml-0.14.GXml.Attribute

    constructor(config?: Attribute.ConstructorProperties) 
    _init(config?: Attribute.ConstructorProperties): void
}

module Comment {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Comment

        str?: string | null
    }

}

interface Comment extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Comment

    str: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Comment

    // Has conflict: getStr(): string | null
    // Has conflict: setStr(value: string): void

    // Own virtual methods of GXml-0.14.GXml.Comment

    getStr(): string | null
    setStr(value: string): void

    // Class property signals of GXml-0.14.GXml.Comment

    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Comment {

    // Own properties of GXml-0.14.GXml.Comment

    static name: string

    // Constructors of GXml-0.14.GXml.Comment

    constructor(config?: Comment.ConstructorProperties) 
    _init(config?: Comment.ConstructorProperties): void
}

module CDATA {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface CDATA extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.CDATA

    readonly str: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.CDATA

    // Has conflict: getStr(): string | null

    // Own virtual methods of GXml-0.14.GXml.CDATA

    getStr(): string | null

    // Class property signals of GXml-0.14.GXml.CDATA

    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class CDATA {

    // Own properties of GXml-0.14.GXml.CDATA

    static name: string

    // Constructors of GXml-0.14.GXml.CDATA

    constructor(config?: CDATA.ConstructorProperties) 
    _init(config?: CDATA.ConstructorProperties): void
}

module Character {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Character

        str?: string | null
    }

}

interface Character extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Character

    str: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Character

    // Has conflict: getStr(): string | null
    // Has conflict: setStr(value: string): void

    // Own virtual methods of GXml-0.14.GXml.Character

    getStr(): string | null
    setStr(value: string): void

    // Class property signals of GXml-0.14.GXml.Character

    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Character {

    // Own properties of GXml-0.14.GXml.Character

    static name: string

    // Constructors of GXml-0.14.GXml.Character

    constructor(config?: Character.ConstructorProperties) 
    _init(config?: Character.ConstructorProperties): void
}

module Document {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Document

        indent?: boolean | null
        ns_top?: boolean | null
        prefix_default_ns?: boolean | null
        backup?: boolean | null
        file?: Gio.File | null
    }

}

interface Document extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Document

    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    readonly root: Node
    file: Gio.File
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Document

    // Has conflict: createElement(name: string): Node
    // Has conflict: createText(text: string): Node
    // Has conflict: createComment(text: string): Node
    // Has conflict: createCdata(text: string): Node
    // Has conflict: createPi(target: string, data: string): Node
    // Has conflict: save(cancellable?: Gio.Cancellable | null): boolean
    // Has conflict: saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    // Has conflict: getIndent(): boolean
    // Has conflict: setIndent(value: boolean): void
    // Has conflict: getNsTop(): boolean
    // Has conflict: setNsTop(value: boolean): void
    // Has conflict: getPrefixDefaultNs(): boolean
    // Has conflict: setPrefixDefaultNs(value: boolean): void
    // Has conflict: getBackup(): boolean
    // Has conflict: setBackup(value: boolean): void
    // Has conflict: getRoot(): Node
    // Has conflict: getFile(): Gio.File
    // Has conflict: setFile(value: Gio.File): void

    // Own virtual methods of GXml-0.14.GXml.Document

    createElement(name: string): Node
    createText(text: string): Node
    createComment(text: string): Node
    createCdata(text: string): Node
    createPi(target: string, data: string): Node
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getRoot(): Node
    getFile(): Gio.File
    setFile(value: Gio.File): void

    // Class property signals of GXml-0.14.GXml.Document

    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::ns-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ns-top", ...args: any[]): void
    connect(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix-default-ns", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Document {

    // Own properties of GXml-0.14.GXml.Document

    static name: string

    // Constructors of GXml-0.14.GXml.Document

    constructor(config?: Document.ConstructorProperties) 
    _init(config?: Document.ConstructorProperties): void
    static newDefault(): Document
    static newDefaultForPath(path: string): Document
    static newDefaultForFile(f: Gio.File): Document
}

module DocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface DocumentType extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.DocumentType

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.DocumentType

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DocumentType {

    // Own properties of GXml-0.14.GXml.DocumentType

    static name: string

    // Constructors of GXml-0.14.GXml.DocumentType

    constructor(config?: DocumentType.ConstructorProperties) 
    _init(config?: DocumentType.ConstructorProperties): void
}

module Element {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Element

        content?: string | null
    }

}

interface Element extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Element

    readonly tagName: string | null
    content: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Element

    // Has conflict: normalize(): void
    // Has conflict: setAttr(name: string, value: string): void
    // Has conflict: getAttr(name: string): Node | null
    // Has conflict: removeAttr(name: string): void
    // Has conflict: removeNsAttr(name: string, uri: string): void
    // Has conflict: setNsAttr(ns: string, name: string, value: string): void
    // Has conflict: getNsAttr(name: string, uri: string): Node | null
    // Has conflict: getTagName(): string | null
    // Has conflict: getContent(): string | null
    // Has conflict: setContent(value: string): void

    // Own virtual methods of GXml-0.14.GXml.Element

    normalize(): void
    setAttr(name: string, value: string): void
    getAttr(name: string): Node | null
    removeAttr(name: string): void
    removeNsAttr(name: string, uri: string): void
    setNsAttr(ns: string, name: string, value: string): void
    getNsAttr(name: string, uri: string): Node | null
    getTagName(): string | null
    getContent(): string | null
    setContent(value: string): void

    // Class property signals of GXml-0.14.GXml.Element

    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::content", callback: (...args: any[]) => void): number
    on(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Element {

    // Own properties of GXml-0.14.GXml.Element

    static name: string

    // Constructors of GXml-0.14.GXml.Element

    constructor(config?: Element.ConstructorProperties) 
    _init(config?: Element.ConstructorProperties): void
}

module Namespace {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Namespace extends GObject.Object {

    // Own properties of GXml-0.14.GXml.Namespace

    readonly uri: string | null
    readonly prefix: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Namespace

    // Has conflict: getUri(): string | null
    // Has conflict: getPrefix(): string | null

    // Own virtual methods of GXml-0.14.GXml.Namespace

    getUri(): string | null
    getPrefix(): string | null

    // Class property signals of GXml-0.14.GXml.Namespace

    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Namespace {

    // Own properties of GXml-0.14.GXml.Namespace

    static name: string

    // Constructors of GXml-0.14.GXml.Namespace

    constructor(config?: Namespace.ConstructorProperties) 
    _init(config?: Namespace.ConstructorProperties): void
}

module Node {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Node

        value?: string | null
    }

}

interface Node extends GObject.Object {

    // Own properties of GXml-0.14.GXml.Node

    readonly namespaces: Gee.List
    readonly childrenNodes: Gee.BidirList
    readonly attrs: Gee.Map
    readonly name: string | null
    value: string | null
    readonly typeNode: NodeType
    readonly document: Document
    readonly parent: Node
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Node

    // Has conflict: get(key: string): Node | null
    // Has conflict: getElementsByPropertyValue(property: string, value: string): ElementList
    // Has conflict: getElementsByName(name: string): ElementList
    // Has conflict: getElementsByNameNs(name: string, ns?: string | null): ElementList
    // Has conflict: toString(): string | null
    // Has conflict: setNamespace(uri: string, prefix?: string | null): boolean
    // Has conflict: nsPrefix(): string | null
    // Has conflict: nsUri(): string | null
    // Has conflict: getNamespaces(): Gee.List
    // Has conflict: getChildrenNodes(): Gee.BidirList
    // Has conflict: getAttrs(): Gee.Map
    // Has conflict: getName(): string | null
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string): void
    // Has conflict: getTypeNode(): NodeType
    // Has conflict: getDocument(): Document
    // Has conflict: getParent(): Node

    // Own virtual methods of GXml-0.14.GXml.Node

    get(key: string): Node | null
    getElementsByPropertyValue(property: string, value: string): ElementList
    getElementsByName(name: string): ElementList
    getElementsByNameNs(name: string, ns?: string | null): ElementList
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    nsPrefix(): string | null
    nsUri(): string | null
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getName(): string | null
    getValue(): string | null
    setValue(value: string): void
    getTypeNode(): NodeType
    getDocument(): Document
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.Node

    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Node {

    // Own properties of GXml-0.14.GXml.Node

    static name: string

    // Constructors of GXml-0.14.GXml.Node

    constructor(config?: Node.ConstructorProperties) 
    _init(config?: Node.ConstructorProperties): void
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module Notation {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface Notation extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Notation

    readonly publicId: string | null
    readonly externalId: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Notation

    // Has conflict: getPublicId(): string | null
    // Has conflict: getExternalId(): string | null

    // Own virtual methods of GXml-0.14.GXml.Notation

    getPublicId(): string | null
    getExternalId(): string | null

    // Class property signals of GXml-0.14.GXml.Notation

    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::external-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::external-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::external-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::external-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::external-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Notation {

    // Own properties of GXml-0.14.GXml.Notation

    static name: string

    // Constructors of GXml-0.14.GXml.Notation

    constructor(config?: Notation.ConstructorProperties) 
    _init(config?: Notation.ConstructorProperties): void
}

module Entity {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface Entity extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Entity

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.Entity

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Entity {

    // Own properties of GXml-0.14.GXml.Entity

    static name: string

    // Constructors of GXml-0.14.GXml.Entity

    constructor(config?: Entity.ConstructorProperties) 
    _init(config?: Entity.ConstructorProperties): void
}

module ProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.ProcessingInstruction

        data?: string | null
    }

}

interface ProcessingInstruction extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.ProcessingInstruction

    readonly target: string | null
    data: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.ProcessingInstruction

    // Has conflict: getTarget(): string | null
    // Has conflict: getData(): string | null
    // Has conflict: setData(value: string): void

    // Own virtual methods of GXml-0.14.GXml.ProcessingInstruction

    getTarget(): string | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.ProcessingInstruction

    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProcessingInstruction {

    // Own properties of GXml-0.14.GXml.ProcessingInstruction

    static name: string

    // Constructors of GXml-0.14.GXml.ProcessingInstruction

    constructor(config?: ProcessingInstruction.ConstructorProperties) 
    _init(config?: ProcessingInstruction.ConstructorProperties): void
}

module Text {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Text

        str?: string | null
    }

}

interface Text extends GObject.Object, Node {

    // Own properties of GXml-0.14.GXml.Text

    str: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Text

    // Has conflict: getStr(): string | null
    // Has conflict: setStr(value: string): void

    // Own virtual methods of GXml-0.14.GXml.Text

    getStr(): string | null
    setStr(value: string): void

    // Class property signals of GXml-0.14.GXml.Text

    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Text {

    // Own properties of GXml-0.14.GXml.Text

    static name: string

    // Constructors of GXml-0.14.GXml.Text

    constructor(config?: Text.ConstructorProperties) 
    _init(config?: Text.ConstructorProperties): void
}

module Serializable {

    // Signal callback interfaces

    /**
     * Signal callback interface for `serialize-unknown-property`
     */
    interface SerializeUnknownPropertySignalCallback {
        (element: Node, prop: GObject.ParamSpec): void
    }

    /**
     * Signal callback interface for `serialize-unknown-property-type`
     */
    interface SerializeUnknownPropertyTypeSignalCallback {
        (element: Node, prop: GObject.ParamSpec): void
    }

    /**
     * Signal callback interface for `deserialize-unknown-property`
     */
    interface DeserializeUnknownPropertySignalCallback {
        (node: Node, prop: GObject.ParamSpec): void
    }

    /**
     * Signal callback interface for `deserialize-unknown-property-type`
     */
    interface DeserializeUnknownPropertyTypeSignalCallback {
        (node: Node, prop: GObject.ParamSpec): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Serializable

        serialized_xml_node_value?: string | null
    }

}

interface Serializable extends GObject.Object {

    // Own properties of GXml-0.14.GXml.Serializable

    readonly unknownSerializableProperties: Gee.Map
    readonly unknownSerializableNodes: Gee.Collection
    serializedXmlNodeValue: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Serializable

    // Has conflict: getEnableUnknownSerializableProperty(): boolean
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: nodeName(): string | null
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: serialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: defaultListSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: getUnknownSerializableProperties(): Gee.Map
    // Has conflict: getUnknownSerializableNodes(): Gee.Collection
    // Has conflict: getSerializedXmlNodeValue(): string | null
    // Has conflict: setSerializedXmlNodeValue(value?: string | null): void

    // Own virtual methods of GXml-0.14.GXml.Serializable

    getEnableUnknownSerializableProperty(): boolean
    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean
    nodeName(): string | null
    propertyUseNick(): boolean
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    defaultFindPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]
    defaultListSerializableProperties(): GObject.ParamSpec[]
    getUnknownSerializableProperties(): Gee.Map
    getUnknownSerializableNodes(): Gee.Collection
    getSerializedXmlNodeValue(): string | null
    setSerializedXmlNodeValue(value?: string | null): void

    // Own signals of GXml-0.14.GXml.Serializable

    connect(sigName: "serialize-unknown-property", callback: Serializable.SerializeUnknownPropertySignalCallback): number
    on(sigName: "serialize-unknown-property", callback: Serializable.SerializeUnknownPropertySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property", callback: Serializable.SerializeUnknownPropertySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property", callback: Serializable.SerializeUnknownPropertySignalCallback): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property", prop: GObject.ParamSpec, ...args: any[]): void
    connect(sigName: "serialize-unknown-property-type", callback: Serializable.SerializeUnknownPropertyTypeSignalCallback): number
    on(sigName: "serialize-unknown-property-type", callback: Serializable.SerializeUnknownPropertyTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serialize-unknown-property-type", callback: Serializable.SerializeUnknownPropertyTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serialize-unknown-property-type", callback: Serializable.SerializeUnknownPropertyTypeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "serialize-unknown-property-type", prop: GObject.ParamSpec, ...args: any[]): void
    connect(sigName: "deserialize-unknown-property", callback: Serializable.DeserializeUnknownPropertySignalCallback): number
    on(sigName: "deserialize-unknown-property", callback: Serializable.DeserializeUnknownPropertySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property", callback: Serializable.DeserializeUnknownPropertySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property", callback: Serializable.DeserializeUnknownPropertySignalCallback): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property", prop: GObject.ParamSpec, ...args: any[]): void
    connect(sigName: "deserialize-unknown-property-type", callback: Serializable.DeserializeUnknownPropertyTypeSignalCallback): number
    on(sigName: "deserialize-unknown-property-type", callback: Serializable.DeserializeUnknownPropertyTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deserialize-unknown-property-type", callback: Serializable.DeserializeUnknownPropertyTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deserialize-unknown-property-type", callback: Serializable.DeserializeUnknownPropertyTypeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "deserialize-unknown-property-type", prop: GObject.ParamSpec, ...args: any[]): void

    // Class property signals of GXml-0.14.GXml.Serializable

    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Serializable {

    // Own properties of GXml-0.14.GXml.Serializable

    static name: string

    // Constructors of GXml-0.14.GXml.Serializable

    constructor(config?: Serializable.ConstructorProperties) 
    _init(config?: Serializable.ConstructorProperties): void
    static stringToGvalue(str: string, dest: any): [ /* returnType */ boolean, /* dest */ any ]
    static gvalueToString(val: any): string | null
}

module SerializableProperty {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SerializableProperty extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableProperty

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.SerializableProperty

    // Has conflict: getSerializablePropertyValue(): string | null
    // Has conflict: setSerializablePropertyValue(val?: string | null): void
    // Has conflict: deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    // Has conflict: serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertySerializeProperty(element: Node, prop: GObject.ParamSpec, nick: boolean): Node | null
    defaultSerializablePropertyDeserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean

    // Own virtual methods of GXml-0.14.GXml.SerializableProperty

    getSerializablePropertyValue(): string | null
    setSerializablePropertyValue(val?: string | null): void
    deserializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): boolean
    serializeProperty(propertyNode: Node, prop: GObject.ParamSpec, nick: boolean): Node | null

    // Class property signals of GXml-0.14.GXml.SerializableProperty

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableProperty {

    // Own properties of GXml-0.14.GXml.SerializableProperty

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableProperty

    constructor(config?: SerializableProperty.ConstructorProperties) 
    _init(config?: SerializableProperty.ConstructorProperties): void
}

module SerializableMapKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SerializableMapKey extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableMapKey

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.SerializableMapKey

    // Has conflict: getMapKey(): any | null

    // Own virtual methods of GXml-0.14.GXml.SerializableMapKey

    getMapKey(): any | null

    // Class property signals of GXml-0.14.GXml.SerializableMapKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableMapKey {

    // Own properties of GXml-0.14.GXml.SerializableMapKey

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableMapKey

    constructor(config?: SerializableMapKey.ConstructorProperties) 
    _init(config?: SerializableMapKey.ConstructorProperties): void
}

module SerializableMapDualKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SerializableMapDualKey extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableMapDualKey

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.SerializableMapDualKey

    // Has conflict: getMapPrimaryKey(): any | null
    // Has conflict: getMapSecondaryKey(): any | null

    // Own virtual methods of GXml-0.14.GXml.SerializableMapDualKey

    getMapPrimaryKey(): any | null
    getMapSecondaryKey(): any | null

    // Class property signals of GXml-0.14.GXml.SerializableMapDualKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableMapDualKey {

    // Own properties of GXml-0.14.GXml.SerializableMapDualKey

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableMapDualKey

    constructor(config?: SerializableMapDualKey.ConstructorProperties) 
    _init(config?: SerializableMapDualKey.ConstructorProperties): void
}

module SerializableCollection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.Traversable.ConstructorProperties, Serializable.ConstructorProperties {
    }

}

interface SerializableCollection extends GObject.Object, Gee.Traversable, Serializable {

    // Own properties of GXml-0.14.GXml.SerializableCollection

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.SerializableCollection

    // Has conflict: deserializeProceed(): boolean
    // Has conflict: deserialized(): boolean
    // Has conflict: deserializeNode(node: Node): boolean
    // Has conflict: deserializeChildren(): boolean
    // Has conflict: isCollection(): boolean

    // Own virtual methods of GXml-0.14.GXml.SerializableCollection

    deserializeProceed(): boolean
    deserialized(): boolean
    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean
    isCollection(): boolean

    // Class property signals of GXml-0.14.GXml.SerializableCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableCollection {

    // Own properties of GXml-0.14.GXml.SerializableCollection

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableCollection

    constructor(config?: SerializableCollection.ConstructorProperties) 
    _init(config?: SerializableCollection.ConstructorProperties): void
}

module DomAttr {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomAttr

        value?: string | null
    }

}

interface DomAttr extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomAttr

    readonly namespaceUri: string | null
    readonly prefix: string | null
    readonly localName: string | null
    readonly name: string | null
    value: string | null
    readonly specified: boolean
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomAttr

    // Has conflict: getNamespaceUri(): string | null
    // Has conflict: getPrefix(): string | null
    // Has conflict: getLocalName(): string | null
    // Has conflict: getName(): string | null
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string): void
    // Has conflict: getSpecified(): boolean

    // Own virtual methods of GXml-0.14.GXml.DomAttr

    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string | null
    getName(): string | null
    getValue(): string | null
    setValue(value: string): void
    getSpecified(): boolean

    // Class property signals of GXml-0.14.GXml.DomAttr

    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::specified", callback: (...args: any[]) => void): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::specified", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomAttr {

    // Own properties of GXml-0.14.GXml.DomAttr

    static name: string

    // Constructors of GXml-0.14.GXml.DomAttr

    constructor(config?: DomAttr.ConstructorProperties) 
    _init(config?: DomAttr.ConstructorProperties): void
}

module DomCharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomChildNode.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomCharacterData

        data?: string | null
    }

}

interface DomCharacterData extends GObject.Object, DomNode, DomNonDocumentTypeChildNode, DomChildNode {

    // Own properties of GXml-0.14.GXml.DomCharacterData

    data: string | null
    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomCharacterData

    // Has conflict: substringData(offset: number, count: number): string | null
    // Has conflict: appendData(data: string): void
    // Has conflict: insertData(offset: number, data: string): void
    // Has conflict: deleteData(offset: number, count: number): void
    // Has conflict: replaceData(offset: number, count: number, data: string): void
    // Has conflict: getData(): string | null
    // Has conflict: setData(value: string): void
    // Has conflict: getLength(): number

    // Own virtual methods of GXml-0.14.GXml.DomCharacterData

    substringData(offset: number, count: number): string | null
    appendData(data: string): void
    insertData(offset: number, data: string): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string): void
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    getLength(): number

    // Class property signals of GXml-0.14.GXml.DomCharacterData

    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomCharacterData {

    // Own properties of GXml-0.14.GXml.DomCharacterData

    static name: string

    // Constructors of GXml-0.14.GXml.DomCharacterData

    constructor(config?: DomCharacterData.ConstructorProperties) 
    _init(config?: DomCharacterData.ConstructorProperties): void
}

module DomText {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomText extends DomCharacterData {

    // Own properties of GXml-0.14.GXml.DomText

    readonly wholeText: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomText

    // Has conflict: splitText(offset: number): DomText
    // Has conflict: getWholeText(): string | null

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Own virtual methods of GXml-0.14.GXml.DomText

    splitText(offset: number): DomText
    getWholeText(): string | null

    // Class property signals of GXml-0.14.GXml.DomText

    connect(sigName: "notify::whole-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::whole-text", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomText extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomText

    static name: string

    // Constructors of GXml-0.14.GXml.DomText

    constructor(config?: DomText.ConstructorProperties) 
    _init(config?: DomText.ConstructorProperties): void
}

module DomProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomProcessingInstruction extends DomCharacterData {

    // Own properties of GXml-0.14.GXml.DomProcessingInstruction

    readonly target: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomProcessingInstruction

    // Has conflict: getTarget(): string | null

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Own virtual methods of GXml-0.14.GXml.DomProcessingInstruction

    getTarget(): string | null

    // Class property signals of GXml-0.14.GXml.DomProcessingInstruction

    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomProcessingInstruction extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomProcessingInstruction

    static name: string

    // Constructors of GXml-0.14.GXml.DomProcessingInstruction

    constructor(config?: DomProcessingInstruction.ConstructorProperties) 
    _init(config?: DomProcessingInstruction.ConstructorProperties): void
}

module DomComment {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomComment extends DomCharacterData {

    // Own properties of GXml-0.14.GXml.DomComment

    __gtype__: number

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.DomComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomComment extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomComment

    static name: string

    // Constructors of GXml-0.14.GXml.DomComment

    constructor(config?: DomComment.ConstructorProperties) 
    _init(config?: DomComment.ConstructorProperties): void
}

module DomNonElementParentNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNonElementParentNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomNonElementParentNode

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomNonElementParentNode

    // Has conflict: getElementById(elementId: string): DomElement | null

    // Own virtual methods of GXml-0.14.GXml.DomNonElementParentNode

    getElementById(elementId: string): DomElement | null

    // Class property signals of GXml-0.14.GXml.DomNonElementParentNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNonElementParentNode {

    // Own properties of GXml-0.14.GXml.DomNonElementParentNode

    static name: string

    // Constructors of GXml-0.14.GXml.DomNonElementParentNode

    constructor(config?: DomNonElementParentNode.ConstructorProperties) 
    _init(config?: DomNonElementParentNode.ConstructorProperties): void
}

module DomParentNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomParentNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomParentNode

    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomParentNode

    // Has conflict: querySelector(selectors: string): DomElement | null
    // Has conflict: querySelectorAll(selectors: string): DomNodeList
    // Has conflict: getElementsByPropertyValue(property: string, value: string): DomElementList
    // Has conflict: getChildren(): DomHTMLCollection
    // Has conflict: getFirstElementChild(): DomElement | null
    // Has conflict: getLastElementChild(): DomElement | null
    // Has conflict: getChildElementCount(): number

    // Own virtual methods of GXml-0.14.GXml.DomParentNode

    querySelector(selectors: string): DomElement | null
    querySelectorAll(selectors: string): DomNodeList
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number

    // Class property signals of GXml-0.14.GXml.DomParentNode

    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomParentNode {

    // Own properties of GXml-0.14.GXml.DomParentNode

    static name: string

    // Constructors of GXml-0.14.GXml.DomParentNode

    constructor(config?: DomParentNode.ConstructorProperties) 
    _init(config?: DomParentNode.ConstructorProperties): void
}

module DomNonDocumentTypeChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNonDocumentTypeChildNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    // Has conflict: getPreviousElementSibling(): DomElement | null
    // Has conflict: getNextElementSibling(): DomElement | null

    // Own virtual methods of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null

    // Class property signals of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNonDocumentTypeChildNode {

    // Own properties of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    static name: string

    // Constructors of GXml-0.14.GXml.DomNonDocumentTypeChildNode

    constructor(config?: DomNonDocumentTypeChildNode.ConstructorProperties) 
    _init(config?: DomNonDocumentTypeChildNode.ConstructorProperties): void
}

module DomChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomChildNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomChildNode

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomChildNode

    // Has conflict: remove(): void

    // Own virtual methods of GXml-0.14.GXml.DomChildNode

    remove(): void

    // Class property signals of GXml-0.14.GXml.DomChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomChildNode {

    // Own properties of GXml-0.14.GXml.DomChildNode

    static name: string

    // Constructors of GXml-0.14.GXml.DomChildNode

    constructor(config?: DomChildNode.ConstructorProperties) 
    _init(config?: DomChildNode.ConstructorProperties): void
}

module DomNodeList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomNodeList extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.14.GXml.DomNodeList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.14.GXml.DomNodeList

    // Has conflict: item(index: number): DomNode | null
    // Has conflict: getLength(): number

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.14.GXml.DomNodeList

    item(index: number): DomNode | null
    getLength(): number

    // Class property signals of GXml-0.14.GXml.DomNodeList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNodeList {

    // Own properties of GXml-0.14.GXml.DomNodeList

    static name: string

    // Constructors of GXml-0.14.GXml.DomNodeList

    constructor(config?: DomNodeList.ConstructorProperties) 
    _init(config?: DomNodeList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomHTMLCollection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomHTMLCollection extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.14.GXml.DomHTMLCollection

    readonly length: number
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.14.GXml.DomHTMLCollection

    // Has conflict: getElement(index: number): DomElement | null
    // Has conflict: toArray(): DomElement[]
    // Has conflict: item(index: number): DomElement | null
    // Has conflict: namedItem(name: string): DomElement | null
    // Has conflict: getLength(): number

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.14.GXml.DomHTMLCollection

    getElement(index: number): DomElement | null
    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    item(index: number): DomElement | null
    namedItem(name: string): DomElement | null
    getLength(): number

    // Class property signals of GXml-0.14.GXml.DomHTMLCollection

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomHTMLCollection {

    // Own properties of GXml-0.14.GXml.DomHTMLCollection

    static name: string

    // Constructors of GXml-0.14.GXml.DomHTMLCollection

    constructor(config?: DomHTMLCollection.ConstructorProperties) 
    _init(config?: DomHTMLCollection.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomNodeIterator {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNodeIterator {

    // Own properties of GXml-0.14.GXml.DomNodeIterator

    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomNodeIterator

    // Has conflict: nextNode(): DomNode | null
    // Has conflict: previousNode(): DomNode | null
    // Has conflict: detach(): void
    // Has conflict: getRoot(): DomNode
    // Has conflict: getReferenceNode(): DomNode
    // Has conflict: getPointerBeforeReferenceNode(): boolean
    // Has conflict: getWhatToShow(): number
    // Has conflict: getFilter(): DomNodeFilter | null

    // Own virtual methods of GXml-0.14.GXml.DomNodeIterator

    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void
    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null

    // Class property signals of GXml-0.14.GXml.DomNodeIterator

    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reference-node", ...args: any[]): void
    connect(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-before-reference-node", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNodeIterator extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomNodeIterator

    static name: string

    // Constructors of GXml-0.14.GXml.DomNodeIterator

    constructor(config?: DomNodeIterator.ConstructorProperties) 
    _init(config?: DomNodeIterator.ConstructorProperties): void
}

module DomTreeWalker {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomTreeWalker extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomTreeWalker

    readonly root: DomNode
    readonly whatToShow: number
    readonly filter: DomNodeFilter
    readonly currentNode: DomNode
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomTreeWalker

    // Has conflict: parentNode(): DomNode | null
    // Has conflict: firstChild(): DomNode | null
    // Has conflict: lastChild(): DomNode | null
    // Has conflict: previousSibling(): DomNode | null
    // Has conflict: nextSibling(): DomNode | null
    // Has conflict: previousNode(): DomNode | null
    // Has conflict: nextNode(): DomNode | null
    // Has conflict: getRoot(): DomNode
    // Has conflict: getWhatToShow(): number
    // Has conflict: getFilter(): DomNodeFilter | null
    // Has conflict: getCurrentNode(): DomNode

    // Own virtual methods of GXml-0.14.GXml.DomTreeWalker

    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null
    getRoot(): DomNode
    getWhatToShow(): number
    getFilter(): DomNodeFilter | null
    getCurrentNode(): DomNode

    // Class property signals of GXml-0.14.GXml.DomTreeWalker

    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::current-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-node", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomTreeWalker {

    // Own properties of GXml-0.14.GXml.DomTreeWalker

    static name: string

    // Constructors of GXml-0.14.GXml.DomTreeWalker

    constructor(config?: DomTreeWalker.ConstructorProperties) 
    _init(config?: DomTreeWalker.ConstructorProperties): void
}

module DomNamedNodeMap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.Map.ConstructorProperties {
    }

}

interface DomNamedNodeMap extends GObject.Object, Gee.Map {

    // Own properties of GXml-0.14.GXml.DomNamedNodeMap

    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomNamedNodeMap

    // Has conflict: item(index: number): DomNode | null
    // Has conflict: getNamedItem(name: string): DomNode | null
    // Has conflict: setNamedItem(node: DomNode): DomNode | null
    // Has conflict: removeNamedItem(name: string): DomNode | null
    // Has conflict: removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    // Has conflict: getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    // Has conflict: setNamedItemNs(node: DomNode): DomNode | null
    // Has conflict: getLength(): number

    // Own virtual methods of GXml-0.14.GXml.DomNamedNodeMap

    item(index: number): DomNode | null
    getNamedItem(name: string): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string): DomNode | null
    removeNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    getNamedItemNs(namespaceUri: string, localName: string): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null
    getLength(): number

    // Class property signals of GXml-0.14.GXml.DomNamedNodeMap

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNamedNodeMap {

    // Own properties of GXml-0.14.GXml.DomNamedNodeMap

    static name: string

    // Constructors of GXml-0.14.GXml.DomNamedNodeMap

    constructor(config?: DomNamedNodeMap.ConstructorProperties) 
    _init(config?: DomNamedNodeMap.ConstructorProperties): void
}

module DomTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomTokenList extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.14.GXml.DomTokenList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.14.GXml.DomTokenList

    // Has conflict: item(index: number): string | null
    // Has conflict: contains(token: string): boolean
    // Has conflict: add(tokens: string[]): void
    // Has conflict: remove(tokens: string[]): void
    // Has conflict: toggle(token: string, force: boolean, auto: boolean): boolean
    // Has conflict: toString(): string | null
    // Has conflict: getLength(): number

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.14.GXml.DomTokenList

    item(index: number): string | null
    contains(token: string): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any): boolean
    toggle(token: string, force: boolean, auto: boolean): boolean
    toString(): string | null
    getLength(): number

    // Class property signals of GXml-0.14.GXml.DomTokenList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomTokenList {

    // Own properties of GXml-0.14.GXml.DomTokenList

    static name: string

    // Constructors of GXml-0.14.GXml.DomTokenList

    constructor(config?: DomTokenList.ConstructorProperties) 
    _init(config?: DomTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomSettableTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends DomTokenList.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomSettableTokenList

        value?: string | null
    }

}

interface DomSettableTokenList extends DomTokenList {

    // Own properties of GXml-0.14.GXml.DomSettableTokenList

    value: string | null
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.14.GXml.DomSettableTokenList

    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string): void

    // Conflicting methods

    contains(token: string): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.14.GXml.DomSettableTokenList

    getValue(): string | null
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.DomSettableTokenList

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomSettableTokenList extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomSettableTokenList

    static name: string

    // Constructors of GXml-0.14.GXml.DomSettableTokenList

    constructor(config?: DomSettableTokenList.ConstructorProperties) 
    _init(config?: DomSettableTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties {
    }

}

interface DomDocument extends GObject.Object, DomNode, DomParentNode, DomNonElementParentNode {

    // Own properties of GXml-0.14.GXml.DomDocument

    readonly implementation: DomImplementation
    readonly url: string | null
    readonly documentUri: string | null
    readonly origin: string | null
    readonly compatMode: string | null
    readonly characterSet: string | null
    readonly contentType: string | null
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomDocument

    // Has conflict: getElementsByTagName(localName: string): DomHTMLCollection
    // Has conflict: getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    // Has conflict: getElementsByClassName(classNames: string): DomHTMLCollection
    // Has conflict: createElement(localName: string): DomElement
    // Has conflict: createElementNs(namespace: string | null, qualifiedName: string): DomElement
    // Has conflict: createDocumentFragment(): DomDocumentFragment
    // Has conflict: createTextNode(data: string): DomText
    // Has conflict: createComment(data: string): DomComment
    // Has conflict: createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    // Has conflict: importNode(node: DomNode, deep: boolean): DomNode
    // Has conflict: adoptNode(node: DomNode): DomNode
    // Has conflict: createEvent(interface: string): DomEvent
    // Has conflict: createRange(): DomRange
    // Has conflict: createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    // Has conflict: createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    // Has conflict: getImplementation(): DomImplementation
    // Has conflict: getUrl(): string
    // Has conflict: getDocumentUri(): string
    // Has conflict: getOrigin(): string
    // Has conflict: getCompatMode(): string
    // Has conflict: getCharacterSet(): string
    // Has conflict: getContentType(): string
    // Has conflict: getDoctype(): DomDocumentType | null
    // Has conflict: getDocumentElement(): DomElement | null

    // Own virtual methods of GXml-0.14.GXml.DomDocument

    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    createElement(localName: string): DomElement
    createElementNs(namespace: string | null, qualifiedName: string): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string): DomText
    createComment(data: string): DomComment
    createProcessingInstruction(target: string, data: string): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number, filter?: DomNodeFilter | null): DomTreeWalker
    getImplementation(): DomImplementation
    getUrl(): string
    getDocumentUri(): string
    getOrigin(): string
    getCompatMode(): string
    getCharacterSet(): string
    getContentType(): string
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null

    // Class property signals of GXml-0.14.GXml.DomDocument

    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomDocument {

    // Own properties of GXml-0.14.GXml.DomDocument

    static name: string

    // Constructors of GXml-0.14.GXml.DomDocument

    constructor(config?: DomDocument.ConstructorProperties) 
    _init(config?: DomDocument.ConstructorProperties): void
}

module DomXMLDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomDocument.ConstructorProperties {
    }

}

interface DomXMLDocument extends GObject.Object, DomDocument {

    // Own properties of GXml-0.14.GXml.DomXMLDocument

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.DomXMLDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomXMLDocument {

    // Own properties of GXml-0.14.GXml.DomXMLDocument

    static name: string

    // Constructors of GXml-0.14.GXml.DomXMLDocument

    constructor(config?: DomXMLDocument.ConstructorProperties) 
    _init(config?: DomXMLDocument.ConstructorProperties): void
}

module DomImplementation {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomImplementation extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomImplementation

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomImplementation

    // Has conflict: createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    // Has conflict: createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    // Has conflict: createHtmlDocument(title: string): Document
    // Has conflict: hasFeature(): boolean

    // Own virtual methods of GXml-0.14.GXml.DomImplementation

    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DomDocumentType
    createDocument(nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string): Document
    hasFeature(): boolean

    // Class property signals of GXml-0.14.GXml.DomImplementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomImplementation {

    // Own properties of GXml-0.14.GXml.DomImplementation

    static name: string

    // Constructors of GXml-0.14.GXml.DomImplementation

    constructor(config?: DomImplementation.ConstructorProperties) 
    _init(config?: DomImplementation.ConstructorProperties): void
}

module DomDocumentFragment {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties {
    }

}

interface DomDocumentFragment extends GObject.Object, DomNode, DomParentNode, DomNonElementParentNode {

    // Own properties of GXml-0.14.GXml.DomDocumentFragment

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.DomDocumentFragment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomDocumentFragment {

    // Own properties of GXml-0.14.GXml.DomDocumentFragment

    static name: string

    // Constructors of GXml-0.14.GXml.DomDocumentFragment

    constructor(config?: DomDocumentFragment.ConstructorProperties) 
    _init(config?: DomDocumentFragment.ConstructorProperties): void
}

module DomDocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomChildNode.ConstructorProperties {
    }

}

interface DomDocumentType extends GObject.Object, DomNode, DomChildNode {

    // Own properties of GXml-0.14.GXml.DomDocumentType

    readonly name: string | null
    readonly publicId: string | null
    readonly systemId: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomDocumentType

    // Has conflict: getName(): string
    // Has conflict: getPublicId(): string
    // Has conflict: getSystemId(): string

    // Own virtual methods of GXml-0.14.GXml.DomDocumentType

    getName(): string
    getPublicId(): string
    getSystemId(): string

    // Class property signals of GXml-0.14.GXml.DomDocumentType

    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomDocumentType {

    // Own properties of GXml-0.14.GXml.DomDocumentType

    static name: string

    // Constructors of GXml-0.14.GXml.DomDocumentType

    constructor(config?: DomDocumentType.ConstructorProperties) 
    _init(config?: DomDocumentType.ConstructorProperties): void
}

module DomElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomParentNode.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomElement

        id?: string | null
        class_name?: string | null
    }

}

interface DomElement extends GObject.Object, DomNode, DomChildNode, DomNonDocumentTypeChildNode, DomParentNode {

    // Own properties of GXml-0.14.GXml.DomElement

    readonly namespaceUri: string | null
    readonly prefix: string | null
    readonly localName: string | null
    readonly tagName: string | null
    id: string | null
    className: string | null
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomElement

    // Has conflict: getAttribute(name: string): string | null
    // Has conflict: getAttributeNs(namespace: string | null, localName: string): string | null
    // Has conflict: setAttribute(name: string, value: string): void
    // Has conflict: setAttributeNs(namespace: string | null, name: string, value: string): void
    // Has conflict: removeAttribute(name: string): void
    // Has conflict: removeAttributeNs(namespace: string | null, localName: string): void
    // Has conflict: hasAttribute(name: string): boolean
    // Has conflict: hasAttributeNs(namespace: string | null, localName: string): boolean
    // Has conflict: getElementsByTagName(localName: string): DomHTMLCollection
    // Has conflict: getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    // Has conflict: getElementsByClassName(classNames: string): DomHTMLCollection
    // Has conflict: getNamespaceUri(): string | null
    // Has conflict: getPrefix(): string | null
    // Has conflict: getLocalName(): string | null
    // Has conflict: getTagName(): string | null
    // Has conflict: getId(): string | null
    // Has conflict: setId(value?: string | null): void
    // Has conflict: getClassName(): string | null
    // Has conflict: setClassName(value?: string | null): void
    // Has conflict: getClassList(): DomTokenList
    // Has conflict: getAttributes(): DomNamedNodeMap

    // Own virtual methods of GXml-0.14.GXml.DomElement

    getAttribute(name: string): string | null
    getAttributeNs(namespace: string | null, localName: string): string | null
    setAttribute(name: string, value: string): void
    setAttributeNs(namespace: string | null, name: string, value: string): void
    removeAttribute(name: string): void
    removeAttributeNs(namespace: string | null, localName: string): void
    hasAttribute(name: string): boolean
    hasAttributeNs(namespace: string | null, localName: string): boolean
    getElementsByTagName(localName: string): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string): DomHTMLCollection
    getElementsByClassName(classNames: string): DomHTMLCollection
    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string | null
    getTagName(): string | null
    getId(): string | null
    setId(value?: string | null): void
    getClassName(): string | null
    setClassName(value?: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap

    // Class property signals of GXml-0.14.GXml.DomElement

    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomElement {

    // Own properties of GXml-0.14.GXml.DomElement

    static name: string

    // Constructors of GXml-0.14.GXml.DomElement

    constructor(config?: DomElement.ConstructorProperties) 
    _init(config?: DomElement.ConstructorProperties): void
}

module DomEventTarget {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEventTarget extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomEventTarget

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomEventTarget

    // Has conflict: addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    // Has conflict: removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    // Has conflict: dispatchEvent(event: DomEvent): boolean

    // Own virtual methods of GXml-0.14.GXml.DomEventTarget

    addEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean

    // Class property signals of GXml-0.14.GXml.DomEventTarget

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomEventTarget {

    // Own properties of GXml-0.14.GXml.DomEventTarget

    static name: string

    // Constructors of GXml-0.14.GXml.DomEventTarget

    constructor(config?: DomEventTarget.ConstructorProperties) 
    _init(config?: DomEventTarget.ConstructorProperties): void
}

module DomEventListener {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEventListener extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomEventListener

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomEventListener

    // Has conflict: handleEvent(event: DomEvent): void

    // Own virtual methods of GXml-0.14.GXml.DomEventListener

    handleEvent(event: DomEvent): void

    // Class property signals of GXml-0.14.GXml.DomEventListener

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomEventListener {

    // Own properties of GXml-0.14.GXml.DomEventListener

    static name: string

    // Constructors of GXml-0.14.GXml.DomEventListener

    constructor(config?: DomEventListener.ConstructorProperties) 
    _init(config?: DomEventListener.ConstructorProperties): void
}

module DomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEvent extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomEvent

    readonly etype: string | null
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomEvent

    // Has conflict: stopPropagation(): void
    // Has conflict: stopImmediatePropagation(): void
    // Has conflict: preventDefault(): void
    // Has conflict: initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    // Has conflict: getEtype(): string
    // Has conflict: getEventTarget(): DomEventTarget | null
    // Has conflict: getCurrentTarget(): DomEventTarget | null
    // Has conflict: getBubbles(): boolean
    // Has conflict: getCancelable(): boolean
    // Has conflict: getIsTrusted(): boolean
    // Has conflict: getTimeStamp(): DomTimeStamp
    // Has conflict: getDefaultPrevented(): boolean
    // Has conflict: getEventPhase(): DomEventPhase

    // Own virtual methods of GXml-0.14.GXml.DomEvent

    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string, bubbles: boolean, cancelable: boolean): void
    getEtype(): string
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase

    // Class property signals of GXml-0.14.GXml.DomEvent

    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomEvent {

    // Own properties of GXml-0.14.GXml.DomEvent

    static name: string

    // Constructors of GXml-0.14.GXml.DomEvent

    constructor(config?: DomEvent.ConstructorProperties) 
    _init(config?: DomEvent.ConstructorProperties): void
}

module DomCustomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomEvent.ConstructorProperties {
    }

}

interface DomCustomEvent extends GObject.Object, DomEvent {

    // Own properties of GXml-0.14.GXml.DomCustomEvent

    readonly detail: any
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomCustomEvent

    // Has conflict: initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any | null): void
    // Has conflict: getDetail(): any | null

    // Own virtual methods of GXml-0.14.GXml.DomCustomEvent

    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any | null): void
    getDetail(): any | null

    // Class property signals of GXml-0.14.GXml.DomCustomEvent

    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomCustomEvent {

    // Own properties of GXml-0.14.GXml.DomCustomEvent

    static name: string

    // Constructors of GXml-0.14.GXml.DomCustomEvent

    constructor(config?: DomCustomEvent.ConstructorProperties) 
    _init(config?: DomCustomEvent.ConstructorProperties): void
}

module DomMutationObserver {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomMutationObserver extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomMutationObserver

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomMutationObserver

    // Has conflict: observe(target: Node, options: DomMutationObserverInit): void
    // Has conflict: disconnect(): void
    // Has conflict: takeRecords(): Gee.List

    // Own virtual methods of GXml-0.14.GXml.DomMutationObserver

    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    takeRecords(): Gee.List

    // Class property signals of GXml-0.14.GXml.DomMutationObserver

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomMutationObserver {

    // Own properties of GXml-0.14.GXml.DomMutationObserver

    static name: string

    // Constructors of GXml-0.14.GXml.DomMutationObserver

    constructor(config?: DomMutationObserver.ConstructorProperties) 
    _init(config?: DomMutationObserver.ConstructorProperties): void
}

module DomMutationRecord {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomMutationRecord

        added_nodes?: DomNodeList | null
        removed_nodes?: DomNodeList | null
    }

}

interface DomMutationRecord extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomMutationRecord

    readonly mtype: string | null
    readonly target: DomNode
    addedNodes: DomNodeList
    removedNodes: DomNodeList
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    readonly attributeName: string | null
    readonly attributeNamespace: string | null
    readonly oldValue: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomMutationRecord

    // Has conflict: getMtype(): string
    // Has conflict: getTarget(): DomNode
    // Has conflict: getAddedNodes(): DomNodeList
    // Has conflict: setAddedNodes(value: DomNodeList): void
    // Has conflict: getRemovedNodes(): DomNodeList
    // Has conflict: setRemovedNodes(value: DomNodeList): void
    // Has conflict: getPreviousSibling(): DomNode | null
    // Has conflict: getNextSibling(): DomNode | null
    // Has conflict: getAttributeName(): string | null
    // Has conflict: getAttributeNamespace(): string | null
    // Has conflict: getOldValue(): string | null

    // Own virtual methods of GXml-0.14.GXml.DomMutationRecord

    getMtype(): string
    getTarget(): DomNode
    getAddedNodes(): DomNodeList
    setAddedNodes(value: DomNodeList): void
    getRemovedNodes(): DomNodeList
    setRemovedNodes(value: DomNodeList): void
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getAttributeName(): string | null
    getAttributeNamespace(): string | null
    getOldValue(): string | null

    // Class property signals of GXml-0.14.GXml.DomMutationRecord

    connect(sigName: "notify::mtype", callback: (...args: any[]) => void): number
    on(sigName: "notify::mtype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mtype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mtype", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::added-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::added-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::added-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::added-nodes", ...args: any[]): void
    connect(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::removed-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::removed-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::removed-nodes", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::attribute-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-name", ...args: any[]): void
    connect(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-namespace", ...args: any[]): void
    connect(sigName: "notify::old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::old-value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomMutationRecord {

    // Own properties of GXml-0.14.GXml.DomMutationRecord

    static name: string

    // Constructors of GXml-0.14.GXml.DomMutationRecord

    constructor(config?: DomMutationRecord.ConstructorProperties) 
    _init(config?: DomMutationRecord.ConstructorProperties): void
}

module DomNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomEventTarget.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomNode

        owner_document?: DomDocument | null
        node_value?: string | null
        text_content?: string | null
    }

}

interface DomNode extends GObject.Object, DomEventTarget {

    // Own properties of GXml-0.14.GXml.DomNode

    readonly nodeType: DomNodeNodeType
    readonly nodeName: string | null
    readonly baseUri: string | null
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string | null
    textContent: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomNode

    // Has conflict: hasChildNodes(): boolean
    // Has conflict: normalize(): void
    // Has conflict: isEqualNode(node?: DomNode | null): boolean
    // Has conflict: compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    // Has conflict: contains(other?: DomNode | null): boolean
    // Has conflict: lookupPrefix(nspace?: string | null): string | null
    // Has conflict: lookupNamespaceUri(prefix?: string | null): string | null
    // Has conflict: isDefaultNamespace(nspace?: string | null): boolean
    // Has conflict: insertBefore(node: DomNode, child?: DomNode | null): DomNode
    // Has conflict: appendChild(node: DomNode): DomNode
    // Has conflict: replaceChild(node: DomNode, child: DomNode): DomNode
    // Has conflict: removeChild(child: DomNode): DomNode
    // Has conflict: cloneNode(deep: boolean): DomNode
    // Has conflict: getNodeType(): DomNodeNodeType
    // Has conflict: getNodeName(): string | null
    // Has conflict: getBaseUri(): string | null
    // Has conflict: getOwnerDocument(): DomDocument | null
    // Has conflict: setOwnerDocument(value?: DomDocument | null): void
    // Has conflict: getParentNode(): DomNode | null
    // Has conflict: getParentElement(): DomElement | null
    // Has conflict: getChildNodes(): DomNodeList
    // Has conflict: getFirstChild(): DomNode | null
    // Has conflict: getLastChild(): DomNode | null
    // Has conflict: getPreviousSibling(): DomNode | null
    // Has conflict: getNextSibling(): DomNode | null
    // Has conflict: getNodeValue(): string | null
    // Has conflict: setNodeValue(value?: string | null): void
    // Has conflict: getTextContent(): string | null
    // Has conflict: setTextContent(value?: string | null): void

    // Own virtual methods of GXml-0.14.GXml.DomNode

    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node?: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other?: DomNode | null): boolean
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    isDefaultNamespace(nspace?: string | null): boolean
    insertBefore(node: DomNode, child?: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode
    cloneNode(deep: boolean): DomNode
    getNodeType(): DomNodeNodeType
    getNodeName(): string | null
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value?: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value?: string | null): void
    getTextContent(): string | null
    setTextContent(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.DomNode

    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNode {

    // Own properties of GXml-0.14.GXml.DomNode

    static name: string

    // Constructors of GXml-0.14.GXml.DomNode

    constructor(config?: DomNode.ConstructorProperties) 
    _init(config?: DomNode.ConstructorProperties): void
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module DomRange {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomRange extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomRange

    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.DomRange

    // Has conflict: setStart(node: DomNode, offset: number): void
    // Has conflict: setEnd(node: DomNode, offset: number): void
    // Has conflict: setStartBefore(node: DomNode): void
    // Has conflict: setStartAfter(node: DomNode): void
    // Has conflict: setEndBefore(node: DomNode): void
    // Has conflict: setEndAfter(node: DomNode): void
    // Has conflict: collapse(toStart: boolean): void
    // Has conflict: selectNode(node: DomNode): void
    // Has conflict: selectNodeContents(node: DomNode): void
    // Has conflict: compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    // Has conflict: deleteContents(): void
    // Has conflict: extractContents(): DomDocumentFragment | null
    // Has conflict: cloneContents(): DomDocumentFragment | null
    // Has conflict: insertNode(node: DomNode): void
    // Has conflict: surroundContents(newParent: DomNode): void
    // Has conflict: cloneRange(): DomRange
    // Has conflict: detach(): void
    // Has conflict: isPointInRange(node: DomNode, offset: number): boolean
    // Has conflict: comparePoint(node: DomNode, offset: number): number
    // Has conflict: intersectsNode(node: DomNode): boolean
    // Has conflict: toString(): string | null
    // Has conflict: getStartContainer(): DomNode
    // Has conflict: getStartOffset(): number
    // Has conflict: getEndContainer(): DomNode
    // Has conflict: getEndOffset(): number
    // Has conflict: getCollapsed(): boolean
    // Has conflict: getCommonAncestorContainer(): DomNode

    // Own virtual methods of GXml-0.14.GXml.DomRange

    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string | null
    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode

    // Class property signals of GXml-0.14.GXml.DomRange

    connect(sigName: "notify::start-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-container", ...args: any[]): void
    connect(sigName: "notify::start-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-offset", ...args: any[]): void
    connect(sigName: "notify::end-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-container", ...args: any[]): void
    connect(sigName: "notify::end-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-offset", ...args: any[]): void
    connect(sigName: "notify::collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::common-ancestor-container", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomRange {

    // Own properties of GXml-0.14.GXml.DomRange

    static name: string

    // Constructors of GXml-0.14.GXml.DomRange

    constructor(config?: DomRange.ConstructorProperties) 
    _init(config?: DomRange.ConstructorProperties): void
}

module XPathContext {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface XPathContext extends GObject.Object {

    // Own properties of GXml-0.14.GXml.XPathContext

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.XPathContext

    // Has conflict: evaluate(expression: string, resolver?: Gee.List | null): XPathObject

    // Own virtual methods of GXml-0.14.GXml.XPathContext

    evaluate(expression: string, resolver?: Gee.List | null): XPathObject

    // Class property signals of GXml-0.14.GXml.XPathContext

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class XPathContext {

    // Own properties of GXml-0.14.GXml.XPathContext

    static name: string

    // Constructors of GXml-0.14.GXml.XPathContext

    constructor(config?: XPathContext.ConstructorProperties) 
    _init(config?: XPathContext.ConstructorProperties): void
}

module XPathObject {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface XPathObject extends GObject.Object {

    // Own properties of GXml-0.14.GXml.XPathObject

    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string | null
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.XPathObject

    // Has conflict: getObjectType(): XPathObjectType
    // Has conflict: getBooleanValue(): boolean
    // Has conflict: getStringValue(): string
    // Has conflict: getNumberValue(): number
    // Has conflict: getNodeset(): DomHTMLCollection

    // Own virtual methods of GXml-0.14.GXml.XPathObject

    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string
    getNumberValue(): number
    getNodeset(): DomHTMLCollection

    // Class property signals of GXml-0.14.GXml.XPathObject

    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::boolean-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::boolean-value", ...args: any[]): void
    connect(sigName: "notify::string-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::string-value", ...args: any[]): void
    connect(sigName: "notify::number-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::number-value", ...args: any[]): void
    connect(sigName: "notify::nodeset", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodeset", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class XPathObject {

    // Own properties of GXml-0.14.GXml.XPathObject

    static name: string

    // Constructors of GXml-0.14.GXml.XPathObject

    constructor(config?: XPathObject.ConstructorProperties) 
    _init(config?: XPathObject.ConstructorProperties): void
}

module GomObject {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface GomObject extends GObject.Object, DomNode, DomElement {

    // Own properties of GXml-0.14.GXml.GomObject

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.GomObject

    // Has conflict: getPropertiesList(): GObject.ParamSpec[]
    // Has conflict: findPropertyName(pname: string): GObject.ParamSpec | null
    // Has conflict: findObjectPropertyName(pname: string): GObject.ParamSpec | null
    // Has conflict: getPropertyElementList(): GObject.ParamSpec[]
    // Has conflict: getPropertyString(prop: GObject.ParamSpec): string | null
    // Has conflict: getAttribute(name: string): string | null
    // Has conflict: setAttribute(name: string, val: string): boolean
    // Has conflict: getChild(name: string): DomElement | null
    // Has conflict: findElements(name: string): DomElementList
    // Has conflict: removeAttribute(name: string): boolean
    // Has conflict: setInstanceProperty(name: string): boolean
    // Has conflict: cleanPropertyElements(name: string): void

    // Own virtual methods of GXml-0.14.GXml.GomObject

    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(pname: string): GObject.ParamSpec | null
    findObjectPropertyName(pname: string): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    getChild(name: string): DomElement | null
    findElements(name: string): DomElementList
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void
    setInstanceProperty(name: string): boolean
    cleanPropertyElements(name: string): void

    // Class property signals of GXml-0.14.GXml.GomObject

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomObject {

    // Own properties of GXml-0.14.GXml.GomObject

    static name: string

    // Constructors of GXml-0.14.GXml.GomObject

    constructor(config?: GomObject.ConstructorProperties) 
    _init(config?: GomObject.ConstructorProperties): void
}

module GomCollection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomCollection

        element?: GomElement | null
        items_type?: GObject.GType | null
    }

}

interface GomCollection extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GomCollection

    readonly nodesIndex: GLib.Queue
    element: GomElement
    readonly itemsName: string | null
    itemsType: GObject.GType
    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.GomCollection

    // Has conflict: search(): void
    // Has conflict: getItem(index: number): DomElement | null
    // Has conflict: append(node: DomElement): void
    // Has conflict: initialize(t: GObject.GType): void
    // Has conflict: createItem(): GomElement | null
    // Has conflict: validateAppend(index: number, element: DomElement): boolean
    // Has conflict: getNodesIndex(): GLib.Queue
    // Has conflict: getElement(): GomElement
    // Has conflict: setElement(value: GomElement): void
    // Has conflict: getItemsName(): string
    // Has conflict: getItemsType(): GObject.GType
    // Has conflict: setItemsType(value: GObject.GType): void
    // Has conflict: getLength(): number

    // Own virtual methods of GXml-0.14.GXml.GomCollection

    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    initialize(t: GObject.GType): void
    createItem(): GomElement | null
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    getLength(): number

    // Class property signals of GXml-0.14.GXml.GomCollection

    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomCollection {

    // Own properties of GXml-0.14.GXml.GomCollection

    static name: string

    // Constructors of GXml-0.14.GXml.GomCollection

    constructor(config?: GomCollection.ConstructorProperties) 
    _init(config?: GomCollection.ConstructorProperties): void
}

module MappeableElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElement extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.MappeableElement

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.MappeableElement

    // Has conflict: getMapKey(): string | null

    // Own virtual methods of GXml-0.14.GXml.MappeableElement

    getMapKey(): string | null

    // Class property signals of GXml-0.14.GXml.MappeableElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class MappeableElement {

    // Own properties of GXml-0.14.GXml.MappeableElement

    static name: string

    // Constructors of GXml-0.14.GXml.MappeableElement

    constructor(config?: MappeableElement.ConstructorProperties) 
    _init(config?: MappeableElement.ConstructorProperties): void
}

module MappeableElementPairKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElementPairKey extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.MappeableElementPairKey

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.MappeableElementPairKey

    // Has conflict: getMapPrimaryKey(): string | null
    // Has conflict: getMapSecondaryKey(): string | null

    // Own virtual methods of GXml-0.14.GXml.MappeableElementPairKey

    getMapPrimaryKey(): string | null
    getMapSecondaryKey(): string | null

    // Class property signals of GXml-0.14.GXml.MappeableElementPairKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class MappeableElementPairKey {

    // Own properties of GXml-0.14.GXml.MappeableElementPairKey

    static name: string

    // Constructors of GXml-0.14.GXml.MappeableElementPairKey

    constructor(config?: MappeableElementPairKey.ConstructorProperties) 
    _init(config?: MappeableElementPairKey.ConstructorProperties): void
}

module MappeableElementThreeKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElementThreeKey extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.MappeableElementThreeKey

    __gtype__: number

    // Owm methods of GXml-0.14.GXml.MappeableElementThreeKey

    // Has conflict: getMapPkey(): string | null
    // Has conflict: getMapSkey(): string | null
    // Has conflict: getMapTkey(): string | null

    // Own virtual methods of GXml-0.14.GXml.MappeableElementThreeKey

    getMapPkey(): string | null
    getMapSkey(): string | null
    getMapTkey(): string | null

    // Class property signals of GXml-0.14.GXml.MappeableElementThreeKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class MappeableElementThreeKey {

    // Own properties of GXml-0.14.GXml.MappeableElementThreeKey

    static name: string

    // Constructors of GXml-0.14.GXml.MappeableElementThreeKey

    constructor(config?: MappeableElementThreeKey.ConstructorProperties) 
    _init(config?: MappeableElementThreeKey.ConstructorProperties): void
}

module GomProperty {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomProperty

        value?: string | null
    }

}

interface GomProperty extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GomProperty

    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.GomProperty

    // Has conflict: validateValue(val: string): boolean
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value?: string | null): void

    // Own virtual methods of GXml-0.14.GXml.GomProperty

    validateValue(val: string): boolean
    getValue(): string | null
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomProperty

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomProperty {

    // Own properties of GXml-0.14.GXml.GomProperty

    static name: string

    // Constructors of GXml-0.14.GXml.GomProperty

    constructor(config?: GomProperty.ConstructorProperties) 
    _init(config?: GomProperty.ConstructorProperties): void
}

module Parser {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.Parser

        backup?: boolean | null
        indent?: boolean | null
    }

}

interface Parser extends GObject.Object {

    // Own properties of GXml-0.14.GXml.Parser

    backup: boolean
    indent: boolean
    readonly node: DomNode
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.Parser

    // Has conflict: writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    // Has conflict: writeString(): string | null
    // Has conflict: writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    // Has conflict: readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    // Has conflict: readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    // Has conflict: readString(str: string, cancellable?: Gio.Cancellable | null): void
    // Has conflict: getBackup(): boolean
    // Has conflict: setBackup(value: boolean): void
    // Has conflict: getIndent(): boolean
    // Has conflict: setIndent(value: boolean): void
    // Has conflict: getNode(): DomNode

    // Own virtual methods of GXml-0.14.GXml.Parser

    writeFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    writeString(): string | null
    writeStream(stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): void
    readFile(file: Gio.File, cancellable?: Gio.Cancellable | null): void
    readStream(stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readString(str: string, cancellable?: Gio.Cancellable | null): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getNode(): DomNode

    // Class property signals of GXml-0.14.GXml.Parser

    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::node", callback: (...args: any[]) => void): number
    on(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Parser {

    // Own properties of GXml-0.14.GXml.Parser

    static name: string

    // Constructors of GXml-0.14.GXml.Parser

    constructor(config?: Parser.ConstructorProperties) 
    _init(config?: Parser.ConstructorProperties): void
}

module IXsdSchema {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdSchema

        element_definitions?: IXsdListElements | null
        simple_type_definitions?: IXsdListSimpleTypes | null
        complex_type_definitions?: IXsdListComplexTypes | null
    }

}

interface IXsdSchema extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.IXsdSchema

    elementDefinitions: IXsdListElements
    simpleTypeDefinitions: IXsdListSimpleTypes
    complexTypeDefinitions: IXsdListComplexTypes
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdSchema

    // Has conflict: getElementDefinitions(): IXsdListElements
    // Has conflict: setElementDefinitions(value: IXsdListElements): void
    // Has conflict: getSimpleTypeDefinitions(): IXsdListSimpleTypes
    // Has conflict: setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    // Has conflict: getComplexTypeDefinitions(): IXsdListComplexTypes
    // Has conflict: setComplexTypeDefinitions(value: IXsdListComplexTypes): void

    // Own virtual methods of GXml-0.14.GXml.IXsdSchema

    getElementDefinitions(): IXsdListElements
    setElementDefinitions(value: IXsdListElements): void
    getSimpleTypeDefinitions(): IXsdListSimpleTypes
    setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    getComplexTypeDefinitions(): IXsdListComplexTypes
    setComplexTypeDefinitions(value: IXsdListComplexTypes): void

    // Class property signals of GXml-0.14.GXml.IXsdSchema

    connect(sigName: "notify::element-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element-definitions", ...args: any[]): void
    connect(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type-definitions", ...args: any[]): void
    connect(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type-definitions", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdSchema {

    // Own properties of GXml-0.14.GXml.IXsdSchema

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdSchema

    constructor(config?: IXsdSchema.ConstructorProperties) 
    _init(config?: IXsdSchema.ConstructorProperties): void
}

module IXsdBaseType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdBaseType

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseType extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdBaseType

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdBaseType

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.14.GXml.IXsdBaseType

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.14.GXml.IXsdBaseType

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdBaseType {

    // Own properties of GXml-0.14.GXml.IXsdBaseType

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdBaseType

    constructor(config?: IXsdBaseType.ConstructorProperties) 
    _init(config?: IXsdBaseType.ConstructorProperties): void
}

module IXsdSimpleType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties, IXsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdSimpleType

        final?: string | null
        id?: string | null
        name?: string | null
        annotation?: IXsdAnnotation | null
        list?: IXsdTypeList | null
        union?: IXsdTypeUnion | null
        restriction?: IXsdTypeRestriction | null
    }

}

interface IXsdSimpleType extends GObject.Object, DomElement, IXsdBaseType {

    // Own properties of GXml-0.14.GXml.IXsdSimpleType

    final: string | null
    id: string | null
    name: string | null
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdSimpleType

    // Has conflict: getFinal(): string
    // Has conflict: setFinal(value: string): void
    // Has conflict: getId(): string
    // Has conflict: setId(value: string): void
    // Has conflict: getName(): string
    // Has conflict: setName(value: string): void
    // Has conflict: getAnnotation(): IXsdAnnotation
    // Has conflict: setAnnotation(value: IXsdAnnotation): void
    // Has conflict: getList(): IXsdTypeList
    // Has conflict: setList(value: IXsdTypeList): void
    // Has conflict: getUnion(): IXsdTypeUnion
    // Has conflict: setUnion(value: IXsdTypeUnion): void
    // Has conflict: getRestriction(): IXsdTypeRestriction
    // Has conflict: setRestriction(value: IXsdTypeRestriction): void

    // Own virtual methods of GXml-0.14.GXml.IXsdSimpleType

    getFinal(): string
    setFinal(value: string): void
    getId(): string

    // Overloads of getId

    getId(): string | null
    setId(value: string): void

    // Overloads of setId

    setId(value?: string | null): void
    getName(): string
    setName(value: string): void
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    getList(): IXsdTypeList
    setList(value: IXsdTypeList): void
    getUnion(): IXsdTypeUnion
    setUnion(value: IXsdTypeUnion): void
    getRestriction(): IXsdTypeRestriction
    setRestriction(value: IXsdTypeRestriction): void

    // Class property signals of GXml-0.14.GXml.IXsdSimpleType

    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::list", callback: (...args: any[]) => void): number
    on(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::list", ...args: any[]): void
    connect(sigName: "notify::union", callback: (...args: any[]) => void): number
    on(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::union", ...args: any[]): void
    connect(sigName: "notify::restriction", callback: (...args: any[]) => void): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::restriction", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdSimpleType {

    // Own properties of GXml-0.14.GXml.IXsdSimpleType

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdSimpleType

    constructor(config?: IXsdSimpleType.ConstructorProperties) 
    _init(config?: IXsdSimpleType.ConstructorProperties): void
}

module IXsdTypeDef {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdTypeDef extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdTypeDef

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeDef

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeDef

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeDef

    constructor(config?: IXsdTypeDef.ConstructorProperties) 
    _init(config?: IXsdTypeDef.ConstructorProperties): void
}

module IXsdTypeRestriction {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdTypeRestriction

        base?: string | null
        id?: string | null
        simple_type?: IXsdSimpleType | null
        enumerations?: IXsdListTypeRestrictionEnumerations | null
        white_spaces?: IXsdListTypeRestrictionWhiteSpaces | null
    }

}

interface IXsdTypeRestriction extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestriction

    base: string | null
    id: string | null
    simpleType: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    whiteSpaces: IXsdListTypeRestrictionWhiteSpaces
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdTypeRestriction

    // Has conflict: getBase(): string
    // Has conflict: setBase(value: string): void
    // Has conflict: getId(): string
    // Has conflict: setId(value: string): void
    // Has conflict: getSimpleType(): IXsdSimpleType
    // Has conflict: setSimpleType(value: IXsdSimpleType): void
    // Has conflict: getEnumerations(): IXsdListTypeRestrictionEnumerations
    // Has conflict: setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    // Has conflict: getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    // Has conflict: setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void

    // Own virtual methods of GXml-0.14.GXml.IXsdTypeRestriction

    getBase(): string
    setBase(value: string): void
    getId(): string
    setId(value: string): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getEnumerations(): IXsdListTypeRestrictionEnumerations
    setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestriction

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::enumerations", callback: (...args: any[]) => void): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enumerations", ...args: any[]): void
    connect(sigName: "notify::white-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::white-spaces", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestriction {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestriction

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestriction

    constructor(config?: IXsdTypeRestriction.ConstructorProperties) 
    _init(config?: IXsdTypeRestriction.ConstructorProperties): void
}

module IXsdTypeList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {
    }

}

interface IXsdTypeList extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeList

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeList {

    // Own properties of GXml-0.14.GXml.IXsdTypeList

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeList

    constructor(config?: IXsdTypeList.ConstructorProperties) 
    _init(config?: IXsdTypeList.ConstructorProperties): void
}

module IXsdTypeUnion {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {
    }

}

interface IXsdTypeUnion extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeUnion

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeUnion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeUnion {

    // Own properties of GXml-0.14.GXml.IXsdTypeUnion

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeUnion

    constructor(config?: IXsdTypeUnion.ConstructorProperties) 
    _init(config?: IXsdTypeUnion.ConstructorProperties): void
}

module IXsdTypeRestrictionDef {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdTypeRestrictionDef

        annotation?: IXsdAnnotation | null
    }

}

interface IXsdTypeRestrictionDef extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionDef

    annotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdTypeRestrictionDef

    // Has conflict: getAnnotation(): IXsdAnnotation
    // Has conflict: setAnnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.14.GXml.IXsdTypeRestrictionDef

    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionDef

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionDef

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionDef

    constructor(config?: IXsdTypeRestrictionDef.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionDef.ConstructorProperties): void
}

module IXsdTypeRestrictionMinExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinExclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusive

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMinExclusive {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusive

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusive

    constructor(config?: IXsdTypeRestrictionMinExclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinExclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMinInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinInclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusive

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMinInclusive {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusive

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusive

    constructor(config?: IXsdTypeRestrictionMinInclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinInclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxExclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusive

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMaxExclusive {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusive

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusive

    constructor(config?: IXsdTypeRestrictionMaxExclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxExclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxInclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusive

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMaxInclusive {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusive

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusive

    constructor(config?: IXsdTypeRestrictionMaxInclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxInclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionTotalDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionTotalDigits extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigits

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionTotalDigits {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigits

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigits

    constructor(config?: IXsdTypeRestrictionTotalDigits.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionTotalDigits.ConstructorProperties): void
}

module IXsdTypeRestrictionFractionDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionFractionDigits extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigits

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionFractionDigits {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigits

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigits

    constructor(config?: IXsdTypeRestrictionFractionDigits.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionFractionDigits.ConstructorProperties): void
}

module IXsdTypeRestrictionLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionLength

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionLength {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionLength

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionLength

    constructor(config?: IXsdTypeRestrictionLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionLength.ConstructorProperties): void
}

module IXsdTypeRestrictionMinLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinLength

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMinLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMinLength {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinLength

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMinLength

    constructor(config?: IXsdTypeRestrictionMinLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinLength.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxLength

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionMaxLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionMaxLength {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxLength

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionMaxLength

    constructor(config?: IXsdTypeRestrictionMaxLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxLength.ConstructorProperties): void
}

module IXsdTypeRestrictionEnumeration {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

        id?: string | null
        value?: string | null
    }

}

interface IXsdTypeRestrictionEnumeration extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    id: string | null
    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    // Has conflict: getId(): string
    // Has conflict: setId(value: string): void
    // Has conflict: getValue(): string
    // Has conflict: setValue(value: string): void

    // Own virtual methods of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionEnumeration {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionEnumeration

    constructor(config?: IXsdTypeRestrictionEnumeration.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionEnumeration.ConstructorProperties): void
}

module IXsdTypeRestrictionWhiteSpace {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

        fixed?: boolean | null
        id?: string | null
        value?: string | null
    }

}

interface IXsdTypeRestrictionWhiteSpace extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    fixed: boolean
    id: string | null
    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    // Has conflict: getFixed(): boolean
    // Has conflict: setFixed(value: boolean): void
    // Has conflict: getId(): string
    // Has conflict: setId(value: string): void
    // Has conflict: getValue(): string
    // Has conflict: setValue(value: string): void

    // Own virtual methods of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    getFixed(): boolean
    setFixed(value: boolean): void
    getId(): string
    setId(value: string): void
    getValue(): string
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionWhiteSpace {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpace

    constructor(config?: IXsdTypeRestrictionWhiteSpace.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionWhiteSpace.ConstructorProperties): void
}

module IXsdTypeRestrictionPattern {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionPattern extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionPattern

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionPattern

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionPattern {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionPattern

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionPattern

    constructor(config?: IXsdTypeRestrictionPattern.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionPattern.ConstructorProperties): void
}

module IXsdTypeRestrictionAssertion {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionAssertion extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionAssertion

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionAssertion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionAssertion {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionAssertion

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionAssertion

    constructor(config?: IXsdTypeRestrictionAssertion.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionAssertion.ConstructorProperties): void
}

module IXsdTypeRestrictionExplicitTimezone {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionExplicitTimezone extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezone

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezone

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdTypeRestrictionExplicitTimezone {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezone

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezone

    constructor(config?: IXsdTypeRestrictionExplicitTimezone.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionExplicitTimezone.ConstructorProperties): void
}

module IXsdComplexType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties, IXsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdComplexType

        abstract?: boolean | null
        block?: string | null
        final?: string | null
        mixed?: boolean | null
        name?: string | null
        default_attributes_apply?: boolean | null
        content_type?: IXsdBaseContent | null
    }

}

interface IXsdComplexType extends GObject.Object, DomElement, IXsdBaseType {

    // Own properties of GXml-0.14.GXml.IXsdComplexType

    abstract: boolean
    block: string | null
    final: string | null
    mixed: boolean
    name: string | null
    defaultAttributesApply: boolean
    contentType: IXsdBaseContent
    readonly typeAttributes: IXsdListAttributes
    readonly groupAttributes: IXsdListAttributesGroup
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdComplexType

    // Has conflict: getAbstract(): boolean
    // Has conflict: setAbstract(value: boolean): void
    // Has conflict: getBlock(): string
    // Has conflict: setBlock(value: string): void
    // Has conflict: getFinal(): string
    // Has conflict: setFinal(value: string): void
    // Has conflict: getMixed(): boolean
    // Has conflict: setMixed(value: boolean): void
    // Has conflict: getName(): string
    // Has conflict: setName(value: string): void
    // Has conflict: getDefaultAttributesApply(): boolean
    // Has conflict: setDefaultAttributesApply(value: boolean): void
    // Has conflict: getContentType(): IXsdBaseContent
    // Has conflict: setContentType(value: IXsdBaseContent): void
    // Has conflict: getTypeAttributes(): IXsdListAttributes
    // Has conflict: getGroupAttributes(): IXsdListAttributesGroup

    // Own virtual methods of GXml-0.14.GXml.IXsdComplexType

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): IXsdBaseContent
    setContentType(value: IXsdBaseContent): void
    getTypeAttributes(): IXsdListAttributes
    getGroupAttributes(): IXsdListAttributesGroup

    // Class property signals of GXml-0.14.GXml.IXsdComplexType

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::mixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mixed", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-attributes-apply", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::type-attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-attributes", ...args: any[]): void
    connect(sigName: "notify::group-attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::group-attributes", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdComplexType {

    // Own properties of GXml-0.14.GXml.IXsdComplexType

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdComplexType

    constructor(config?: IXsdComplexType.ConstructorProperties) 
    _init(config?: IXsdComplexType.ConstructorProperties): void
}

module IXsdExtension {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdExtension

        base?: string | null
    }

}

interface IXsdExtension extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.IXsdExtension

    base: string | null
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdExtension

    // Has conflict: getBase(): string
    // Has conflict: setBase(value: string): void

    // Own virtual methods of GXml-0.14.GXml.IXsdExtension

    getBase(): string
    setBase(value: string): void

    // Class property signals of GXml-0.14.GXml.IXsdExtension

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdExtension {

    // Own properties of GXml-0.14.GXml.IXsdExtension

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdExtension

    constructor(config?: IXsdExtension.ConstructorProperties) 
    _init(config?: IXsdExtension.ConstructorProperties): void
}

module IXsdElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdElement

        abstract?: boolean | null
        block?: string | null
        "default"?: string | null
        final?: string | null
        fixed?: string | null
        form?: string | null
        id?: string | null
        maxOccurs?: string | null
        minOccurs?: string | null
        name?: string | null
        nillable?: boolean | null
        ref?: string | null
        substitution_group?: DomTokenList | null
        target_namespace?: string | null
        object_type?: string | null
        anotation?: IXsdAnnotation | null
        simple_type?: IXsdSimpleType | null
        complex_type?: IXsdComplexType | null
    }

}

interface IXsdElement extends GObject.Object, DomElement {

    // Own properties of GXml-0.14.GXml.IXsdElement

    abstract: boolean
    block: string | null
    "default": string | null
    final: string | null
    fixed: string | null
    form: string | null
    id: string | null
    maxOccurs: string | null
    minOccurs: string | null
    name: string | null
    nillable: boolean
    // Has conflict: ref: string | null
    substitutionGroup: DomTokenList
    targetNamespace: string | null
    objectType: string | null
    anotation: IXsdAnnotation
    simpleType: IXsdSimpleType
    complexType: IXsdComplexType
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdElement

    // Has conflict: getAbstract(): boolean
    // Has conflict: setAbstract(value: boolean): void
    // Has conflict: getBlock(): string
    // Has conflict: setBlock(value: string): void
    // Has conflict: getDefault(): string
    // Has conflict: setDefault(value: string): void
    // Has conflict: getFinal(): string
    // Has conflict: setFinal(value: string): void
    // Has conflict: getFixed(): string
    // Has conflict: setFixed(value: string): void
    // Has conflict: getForm(): string
    // Has conflict: setForm(value: string): void
    // Has conflict: getId(): string | null
    // Has conflict: setId(value?: string | null): void
    // Has conflict: getMaxOccurs(): string
    // Has conflict: setMaxOccurs(value: string): void
    // Has conflict: getMinOccurs(): string
    // Has conflict: setMinOccurs(value: string): void
    // Has conflict: getName(): string
    // Has conflict: setName(value: string): void
    // Has conflict: getNillable(): boolean
    // Has conflict: setNillable(value: boolean): void
    // Has conflict: getRef(): string
    // Has conflict: setRef(value: string): void
    // Has conflict: getSubstitutionGroup(): DomTokenList
    // Has conflict: setSubstitutionGroup(value: DomTokenList): void
    // Has conflict: getTargetNamespace(): string
    // Has conflict: setTargetNamespace(value: string): void
    // Has conflict: getObjectType(): string
    // Has conflict: setObjectType(value: string): void
    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void
    // Has conflict: getSimpleType(): IXsdSimpleType
    // Has conflict: setSimpleType(value: IXsdSimpleType): void
    // Has conflict: getComplexType(): IXsdComplexType
    // Has conflict: setComplexType(value: IXsdComplexType): void

    // Own virtual methods of GXml-0.14.GXml.IXsdElement

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getId(): string | null

    // Overloads of getId

    getId(): string | null
    setId(value?: string | null): void

    // Overloads of setId

    setId(value?: string | null): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getComplexType(): IXsdComplexType
    setComplexType(value: IXsdComplexType): void

    // Class property signals of GXml-0.14.GXml.IXsdElement

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::default", callback: (...args: any[]) => void): number
    on(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::maxOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::maxOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::maxOccurs", ...args: any[]): void
    connect(sigName: "notify::minOccurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::minOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::minOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::minOccurs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::nillable", callback: (...args: any[]) => void): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nillable", ...args: any[]): void
    connect(sigName: "notify::ref", callback: (...args: any[]) => void): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ref", ...args: any[]): void
    connect(sigName: "notify::substitution-group", callback: (...args: any[]) => void): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::substitution-group", ...args: any[]): void
    connect(sigName: "notify::target-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target-namespace", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::complex-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdElement {

    // Own properties of GXml-0.14.GXml.IXsdElement

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdElement

    constructor(config?: IXsdElement.ConstructorProperties) 
    _init(config?: IXsdElement.ConstructorProperties): void
}

module IXsdAnnotation {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAnnotation extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdAnnotation

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdAnnotation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdAnnotation {

    // Own properties of GXml-0.14.GXml.IXsdAnnotation

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdAnnotation

    constructor(config?: IXsdAnnotation.ConstructorProperties) 
    _init(config?: IXsdAnnotation.ConstructorProperties): void
}

module IXsdBaseContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdBaseContent

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseContent extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdBaseContent

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdBaseContent

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.14.GXml.IXsdBaseContent

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.14.GXml.IXsdBaseContent

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdBaseContent {

    // Own properties of GXml-0.14.GXml.IXsdBaseContent

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdBaseContent

    constructor(config?: IXsdBaseContent.ConstructorProperties) 
    _init(config?: IXsdBaseContent.ConstructorProperties): void
}

module IXsdSimpleContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdSimpleContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.14.GXml.IXsdSimpleContent

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdSimpleContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdSimpleContent {

    // Own properties of GXml-0.14.GXml.IXsdSimpleContent

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdSimpleContent

    constructor(config?: IXsdSimpleContent.ConstructorProperties) 
    _init(config?: IXsdSimpleContent.ConstructorProperties): void
}

module IXsdComplexContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdComplexContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.14.GXml.IXsdComplexContent

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdComplexContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdComplexContent {

    // Own properties of GXml-0.14.GXml.IXsdComplexContent

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdComplexContent

    constructor(config?: IXsdComplexContent.ConstructorProperties) 
    _init(config?: IXsdComplexContent.ConstructorProperties): void
}

module IXsdOpenContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdOpenContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.14.GXml.IXsdOpenContent

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdOpenContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdOpenContent {

    // Own properties of GXml-0.14.GXml.IXsdOpenContent

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdOpenContent

    constructor(config?: IXsdOpenContent.ConstructorProperties) 
    _init(config?: IXsdOpenContent.ConstructorProperties): void
}

module IXsdBaseAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdBaseAttribute

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseAttribute extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdBaseAttribute

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdBaseAttribute

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.14.GXml.IXsdBaseAttribute

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.14.GXml.IXsdBaseAttribute

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdBaseAttribute {

    // Own properties of GXml-0.14.GXml.IXsdBaseAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdBaseAttribute

    constructor(config?: IXsdBaseAttribute.ConstructorProperties) 
    _init(config?: IXsdBaseAttribute.ConstructorProperties): void
}

module IXsdAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAttribute extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdAttribute

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdAttribute {

    // Own properties of GXml-0.14.GXml.IXsdAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdAttribute

    constructor(config?: IXsdAttribute.ConstructorProperties) 
    _init(config?: IXsdAttribute.ConstructorProperties): void
}

module IXsdAttributeGroup {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAttributeGroup extends GObject.Object {

    // Own properties of GXml-0.14.GXml.IXsdAttributeGroup

    __gtype__: number

    // Class property signals of GXml-0.14.GXml.IXsdAttributeGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdAttributeGroup {

    // Own properties of GXml-0.14.GXml.IXsdAttributeGroup

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdAttributeGroup

    constructor(config?: IXsdAttributeGroup.ConstructorProperties) 
    _init(config?: IXsdAttributeGroup.ConstructorProperties): void
}

module IXsdList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, GomCollection.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.IXsdList

        element: any
        items_type?: GObject.GType | null
        items_name?: GObject.GType | null
    }

}

interface IXsdList extends GObject.Object, GomCollection {

    // Own properties of GXml-0.14.GXml.IXsdList

    element: any
    itemsType: GObject.GType
    itemsName: any
    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.14.GXml.IXsdList

    // Has conflict: getItem(index: number): DomElement | null
    // Has conflict: append(element: DomElement): void
    // Has conflict: remove(index: number): void
    // Has conflict: indexOf(element: DomElement): number
    // Has conflict: getElement(): DomElement
    // Has conflict: setElement(value: DomElement): void
    // Has conflict: getItemsType(): GObject.GType
    // Has conflict: setItemsType(value: GObject.GType): void
    // Has conflict: getItemsName(): GObject.GType
    // Has conflict: setItemsName(value: GObject.GType): void
    // Has conflict: getLength(): number

    // Own virtual methods of GXml-0.14.GXml.IXsdList

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    setItemsName(value: GObject.GType): void
    getLength(): number

    // Overloads of getLength

    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdList

    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdList

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdList

    constructor(config?: IXsdList.ConstructorProperties) 
    _init(config?: IXsdList.ConstructorProperties): void
}

module IXsdListElements {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListElements extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListElements

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListElements

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListElements {

    // Own properties of GXml-0.14.GXml.IXsdListElements

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListElements

    constructor(config?: IXsdListElements.ConstructorProperties) 
    _init(config?: IXsdListElements.ConstructorProperties): void
}

module IXsdListSimpleTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListSimpleTypes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListSimpleTypes

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListSimpleTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListSimpleTypes {

    // Own properties of GXml-0.14.GXml.IXsdListSimpleTypes

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListSimpleTypes

    constructor(config?: IXsdListSimpleTypes.ConstructorProperties) 
    _init(config?: IXsdListSimpleTypes.ConstructorProperties): void
}

module IXsdListComplexTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListComplexTypes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListComplexTypes

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListComplexTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListComplexTypes {

    // Own properties of GXml-0.14.GXml.IXsdListComplexTypes

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListComplexTypes

    constructor(config?: IXsdListComplexTypes.ConstructorProperties) 
    _init(config?: IXsdListComplexTypes.ConstructorProperties): void
}

module IXsdListAttributes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListAttributes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListAttributes

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListAttributes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListAttributes {

    // Own properties of GXml-0.14.GXml.IXsdListAttributes

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListAttributes

    constructor(config?: IXsdListAttributes.ConstructorProperties) 
    _init(config?: IXsdListAttributes.ConstructorProperties): void
}

module IXsdListAttributesGroup {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListAttributesGroup extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListAttributesGroup

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListAttributesGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListAttributesGroup {

    // Own properties of GXml-0.14.GXml.IXsdListAttributesGroup

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListAttributesGroup

    constructor(config?: IXsdListAttributesGroup.ConstructorProperties) 
    _init(config?: IXsdListAttributesGroup.ConstructorProperties): void
}

module IXsdListTypeRestrictionEnumerations {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListTypeRestrictionEnumerations extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerations

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerations

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListTypeRestrictionEnumerations {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerations

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerations

    constructor(config?: IXsdListTypeRestrictionEnumerations.ConstructorProperties) 
    _init(config?: IXsdListTypeRestrictionEnumerations.ConstructorProperties): void
}

module IXsdListTypeRestrictionWhiteSpaces {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListTypeRestrictionWhiteSpaces extends GObject.Object, IXsdList {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpaces

    __gtype__: number

    // Conflicting properties

    element: any
    itemsName: any

    // Conflicting methods

    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void
    getElement(): DomElement

    // Overloads of getElement

    getElement(): GomElement
    getElement(): GomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string
    getItemsName(): string
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number

    // Class property signals of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpaces

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class IXsdListTypeRestrictionWhiteSpaces {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpaces

    static name: string

    // Constructors of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpaces

    constructor(config?: IXsdListTypeRestrictionWhiteSpaces.ConstructorProperties) 
    _init(config?: IXsdListTypeRestrictionWhiteSpaces.ConstructorProperties): void
}

module ElementList {

    // Constructor properties interface

    interface ConstructorProperties extends DomHTMLCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface ElementList extends DomHTMLCollection {

    // Own properties of GXml-0.14.GXml.ElementList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.ElementList

    parentInstance: Gee.ArrayList
    priv: ElementListPrivate

    // Conflicting methods

    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.ElementList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ElementList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.ElementList

    static name: string

    // Constructors of GXml-0.14.GXml.ElementList

    constructor(config?: ElementList.ConstructorProperties) 
    constructor() 
    static new(): ElementList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: ElementList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module NodeList {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.ArrayList.ConstructorProperties {
    }

}

interface NodeList {

    // Own properties of GXml-0.14.GXml.NodeList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.NodeList

    parentInstance: Gee.ArrayList
    priv: NodeListPrivate

    // Owm methods of GXml-0.14.GXml.NodeList

    get(index: number): Node

    // Overloads of get

    get(index: number): any
    toArray(): Node[]

    // Overloads of toArray

    toArray(): any[]

    // Conflicting methods

    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    set(index: number, item: any): void
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    indexOf(item: any): number
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    insert(index: number, item: any): void
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Class property signals of GXml-0.14.GXml.NodeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class NodeList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.NodeList

    static name: string

    // Constructors of GXml-0.14.GXml.NodeList

    constructor(config?: NodeList.ConstructorProperties) 
    constructor() 
    static new(): NodeList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: NodeList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module SerializableBool {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableProperty.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SerializableBool extends SerializableProperty {

    // Own properties of GXml-0.14.GXml.SerializableBool

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableBool

    parentInstance: GObject.Object
    priv: SerializableBoolPrivate

    // Owm methods of GXml-0.14.GXml.SerializableBool

    getValue(): boolean
    setValue(val: boolean): void
    toString(): string | null

    // Class property signals of GXml-0.14.GXml.SerializableBool

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableBool extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableBool

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableBool

    constructor(config?: SerializableBool.ConstructorProperties) 
    constructor() 
    static new(): SerializableBool
    _init(config?: SerializableBool.ConstructorProperties): void
}

module SerializableDouble {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableProperty.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SerializableDouble extends SerializableProperty {

    // Own properties of GXml-0.14.GXml.SerializableDouble

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableDouble

    parentInstance: GObject.Object
    priv: SerializableDoublePrivate
    val: string | null
    fraction: number

    // Owm methods of GXml-0.14.GXml.SerializableDouble

    getFraction(): number
    setFraction(fraction: number): void
    getValue(): number
    setValue(val: number): void
    toString(): string | null
    format(f: string): string | null

    // Class property signals of GXml-0.14.GXml.SerializableDouble

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableDouble extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableDouble

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableDouble

    constructor(config?: SerializableDouble.ConstructorProperties) 
    constructor() 
    static new(): SerializableDouble
    _init(config?: SerializableDouble.ConstructorProperties): void
}

module SerializableFloat {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableDouble.ConstructorProperties {
    }

}

interface SerializableFloat {

    // Own properties of GXml-0.14.GXml.SerializableFloat

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableFloat

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.SerializableFloat

    getValue(): number
    setValue(val: number): void

    // Class property signals of GXml-0.14.GXml.SerializableFloat

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableFloat extends SerializableDouble {

    // Own properties of GXml-0.14.GXml.SerializableFloat

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableFloat

    constructor(config?: SerializableFloat.ConstructorProperties) 
    constructor() 
    static new(): SerializableFloat

    // Overloads of new

    static new(): SerializableDouble
    _init(config?: SerializableFloat.ConstructorProperties): void
}

module SerializableEnum {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableProperty.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SerializableEnum extends SerializableProperty {

    // Own properties of GXml-0.14.GXml.SerializableEnum

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableEnum

    parentInstance: GObject.Object
    priv: SerializableEnumPrivate
    val: string | null
    enumtype: GObject.GType

    // Owm methods of GXml-0.14.GXml.SerializableEnum

    setEnumType(type: GObject.GType): void
    getEnumType(): GObject.GType
    parse(str: string): void
    parseInteger(v: number): void
    toInteger(): number
    toString(): string | null

    // Class property signals of GXml-0.14.GXml.SerializableEnum

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableEnum extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableEnum

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableEnum

    constructor(config?: SerializableEnum.ConstructorProperties) 
    static withEnum(type: GObject.GType): SerializableEnum
    constructor() 
    static new(): SerializableEnum
    _init(config?: SerializableEnum.ConstructorProperties): void
}

module SerializableInt {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableDouble.ConstructorProperties {
    }

}

interface SerializableInt {

    // Own properties of GXml-0.14.GXml.SerializableInt

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableInt

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.SerializableInt

    getValue(): number
    setValue(val: number): void

    // Class property signals of GXml-0.14.GXml.SerializableInt

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableInt extends SerializableDouble {

    // Own properties of GXml-0.14.GXml.SerializableInt

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableInt

    constructor(config?: SerializableInt.ConstructorProperties) 
    constructor() 
    static new(): SerializableInt

    // Overloads of new

    static new(): SerializableDouble
    _init(config?: SerializableInt.ConstructorProperties): void
}

module SerializableValueList {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableProperty.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SerializableValueList extends SerializableProperty {

    // Own properties of GXml-0.14.GXml.SerializableValueList

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableValueList

    parentInstance: GObject.Object
    priv: SerializableValueListPrivate
    vals: string[]
    extra: Gee.ArrayList

    // Owm methods of GXml-0.14.GXml.SerializableValueList

    // Has conflict: getValues(): Gee.List
    // Has conflict: addValues(vals: string[]): void
    // Has conflict: getValueAt(index: number): string | null
    // Has conflict: selectValueAt(index: number): void
    // Has conflict: getValuesArray(): string[]
    // Has conflict: isValue(): boolean
    toString(): string | null

    // Own virtual methods of GXml-0.14.GXml.SerializableValueList

    getValues(): Gee.List
    addValues(vals: string[]): void
    getValueAt(index: number): string | null
    selectValueAt(index: number): void
    getValuesArray(): string[]
    isValue(): boolean

    // Class property signals of GXml-0.14.GXml.SerializableValueList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableValueList extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableValueList

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableValueList

    constructor(config?: SerializableValueList.ConstructorProperties) 
    constructor() 
    static new(): SerializableValueList
    _init(config?: SerializableValueList.ConstructorProperties): void
}

module SerializableObjectModel {

    // Constructor properties interface

    interface ConstructorProperties extends Serializable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.SerializableObjectModel

        properties?: GObject.ParamSpec[] | null
        ignored_serializable_properties?: GLib.HashTable | null
    }

}

interface SerializableObjectModel extends Serializable {

    // Own properties of GXml-0.14.GXml.SerializableObjectModel

    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableObjectModel

    parentInstance: GObject.Object
    priv: SerializableObjectModelPrivate
    node: Node

    // Owm methods of GXml-0.14.GXml.SerializableObjectModel

    // Has conflict: getEnableUnknownSerializableProperty(): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: nodeName(): string | null
    defaultNodeName(): string | null
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Element, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    // Has conflict: toString(): string | null
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void

    // Own virtual methods of GXml-0.14.GXml.SerializableObjectModel

    getEnableUnknownSerializableProperty(): boolean

    // Overloads of getEnableUnknownSerializableProperty

    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean
    toString(): string | null

    // Class property signals of GXml-0.14.GXml.SerializableObjectModel

    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableObjectModel extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableObjectModel

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableObjectModel

    constructor(config?: SerializableObjectModel.ConstructorProperties) 
    _init(config?: SerializableObjectModel.ConstructorProperties): void
}

module SerializableTreeMap {

    // Constructor properties interface

    interface ConstructorProperties extends Serializable.ConstructorProperties, SerializableCollection.ConstructorProperties, Gee.TreeMap.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.SerializableTreeMap

        properties?: GObject.ParamSpec[] | null
        ignored_serializable_properties?: GLib.HashTable | null
    }

}

interface SerializableTreeMap extends Serializable, SerializableCollection {

    // Own properties of GXml-0.14.GXml.SerializableTreeMap

    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Own fields of GXml-0.14.GXml.SerializableTreeMap

    parentInstance: Gee.TreeMap
    priv: SerializableTreeMapPrivate
    node: Node
    // Has conflict: deserialized: boolean

    // Owm methods of GXml-0.14.GXml.SerializableTreeMap

    // Has conflict: deserializeProceed(): boolean
    // Has conflict: deserializeNode(node: Node): boolean
    // Has conflict: deserializeChildren(): boolean
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: nodeName(): string | null
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void

    // Conflicting methods

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    bidirMapIterator(): Gee.BidirMapIterator

    // Overloads of bidirMapIterator

    bidirMapIterator(): Gee.BidirMapIterator
    bidirMapIterator(): Gee.BidirMapIterator
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirSortedMap

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirSortedMap
    getReadOnlyView(): Gee.SortedMap
    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.BidirSortedMap

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.SortedMap
    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.SortedMap

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map
    headMap(before: any): Gee.SortedMap

    // Overloads of headMap

    headMap(before: any): Gee.SortedMap
    headMap(before: any): Gee.SortedMap
    tailMap(after: any): Gee.SortedMap

    // Overloads of tailMap

    tailMap(after: any): Gee.SortedMap
    tailMap(after: any): Gee.SortedMap
    subMap(before: any, after: any): Gee.SortedMap

    // Overloads of subMap

    subMap(before: any, after: any): Gee.SortedMap
    subMap(before: any, after: any): Gee.SortedMap
    getAscendingKeys(): Gee.SortedSet

    // Overloads of getAscendingKeys

    getAscendingKeys(): Gee.SortedSet
    getAscendingKeys(): Gee.SortedSet
    getAscendingEntries(): Gee.SortedSet

    // Overloads of getAscendingEntries

    getAscendingEntries(): Gee.SortedSet
    getAscendingEntries(): Gee.SortedSet
    hasKey(key: any): boolean

    // Overloads of hasKey

    hasKey(key: any): boolean
    hasKey(key: any): boolean
    has(key: any, value: any): boolean

    // Overloads of has

    has(key: any, value: any): boolean
    has(key: any, value: any): boolean
    get(key: any): any | null

    // Overloads of get

    get(key: any): any | null
    get(key: any): any | null
    set(key: any, value: any): void

    // Overloads of set

    set(key: any, value: any): void
    set(key: any, value: any): void
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getKeys(): Gee.Set
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getValues(): Gee.Collection
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getEntries(): Gee.Set

    // Own virtual methods of GXml-0.14.GXml.SerializableTreeMap

    deserializeProceed(): boolean

    // Overloads of deserializeProceed

    deserializeProceed(): boolean
    deserialized(): boolean

    // Overloads of deserialized

    deserialized(): boolean
    deserializeNode(node: Node): boolean

    // Overloads of deserializeNode

    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean

    // Overloads of deserializeChildren

    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean

    // Class property signals of GXml-0.14.GXml.SerializableTreeMap

    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::ascending-keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ascending-keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ascending-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ascending-keys", ...args: any[]): void
    connect(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::ascending-entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ascending-entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ascending-entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ascending-entries", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableTreeMap extends Gee.TreeMap {

    // Own properties of GXml-0.14.GXml.SerializableTreeMap

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableTreeMap

    constructor(config?: SerializableTreeMap.ConstructorProperties) 
    constructor() 
    static new(): SerializableTreeMap

    // Overloads of new

    static new(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyCompareFunc: GLib.CompareDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): Gee.TreeMap
    _init(config?: SerializableTreeMap.ConstructorProperties): void

    // Conflicting static methods

    static empty(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.BidirSortedMap

    // Overloads of empty

    static empty(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
    static empty(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
    static empty(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify): Gee.Map
}

module SerializableHashMap {

    // Constructor properties interface

    interface ConstructorProperties extends Serializable.ConstructorProperties, SerializableCollection.ConstructorProperties, Gee.HashMap.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.SerializableHashMap

        properties?: GObject.ParamSpec[] | null
        ignored_serializable_properties?: GLib.HashTable | null
    }

}

interface SerializableHashMap extends Serializable, SerializableCollection {

    // Own properties of GXml-0.14.GXml.SerializableHashMap

    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableHashMap

    parentInstance: Gee.HashMap
    priv: SerializableHashMapPrivate
    node: Node
    // Has conflict: deserialized: boolean

    // Owm methods of GXml-0.14.GXml.SerializableHashMap

    // Has conflict: deserializeProceed(): boolean
    // Has conflict: deserializeNode(node: Node): boolean
    // Has conflict: deserializeChildren(): boolean
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: getEnableUnknownSerializableProperty(): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: nodeName(): string | null
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void

    // Conflicting methods

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    hasKey(key: any): boolean

    // Overloads of hasKey

    hasKey(key: any): boolean
    hasKey(key: any): boolean
    has(key: any, value: any): boolean

    // Overloads of has

    has(key: any, value: any): boolean
    has(key: any, value: any): boolean
    get(key: any): any | null

    // Overloads of get

    get(key: any): any | null
    get(key: any): any | null
    set(key: any, value: any): void

    // Overloads of set

    set(key: any, value: any): void
    set(key: any, value: any): void
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getKeys(): Gee.Set
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getValues(): Gee.Collection
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map

    // Own virtual methods of GXml-0.14.GXml.SerializableHashMap

    deserializeProceed(): boolean

    // Overloads of deserializeProceed

    deserializeProceed(): boolean
    deserialized(): boolean

    // Overloads of deserialized

    deserialized(): boolean
    deserializeNode(node: Node): boolean

    // Overloads of deserializeNode

    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean

    // Overloads of deserializeChildren

    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean

    // Overloads of getEnableUnknownSerializableProperty

    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean

    // Class property signals of GXml-0.14.GXml.SerializableHashMap

    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableHashMap extends Gee.HashMap {

    // Own properties of GXml-0.14.GXml.SerializableHashMap

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableHashMap

    constructor(config?: SerializableHashMap.ConstructorProperties) 
    constructor() 
    static new(): SerializableHashMap

    // Overloads of new

    static new(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): Gee.HashMap
    _init(config?: SerializableHashMap.ConstructorProperties): void
}

module SerializableDualKeyMap {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.Traversable.ConstructorProperties, Serializable.ConstructorProperties, SerializableCollection.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.SerializableDualKeyMap

        properties?: GObject.ParamSpec[] | null
        ignored_serializable_properties?: GLib.HashTable | null
    }

}

interface SerializableDualKeyMap extends Gee.Traversable, Serializable, SerializableCollection {

    // Own properties of GXml-0.14.GXml.SerializableDualKeyMap

    readonly valueType: GObject.GType
    readonly primaryKeyType: GObject.GType
    readonly secondaryKeyType: GObject.GType
    readonly primaryKeys: Gee.Collection
    readonly size: number
    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableDualKeyMap

    parentInstance: GObject.Object
    priv: SerializableDualKeyMapPrivate
    storage: Gee.HashMultiMap
    node: Node
    // Has conflict: deserialized: boolean

    // Owm methods of GXml-0.14.GXml.SerializableDualKeyMap

    // Has conflict: deserializeProceed(): boolean
    // Has conflict: deserializeNode(node: Node): boolean
    // Has conflict: deserializeChildren(): boolean
    secondaryKeys(key?: any | null): Gee.Collection
    valuesForKey(primaryKey?: any | null): Gee.Collection
    values(): Gee.Collection
    set(primaryKey?: any | null, secundaryKey?: any | null, val?: any | null): void
    get(primaryKey?: any | null, secondaryKey?: any | null): any | null
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: getEnableUnknownSerializableProperty(): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: nodeName(): string | null
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getValueType(): GObject.GType
    getPrimaryKeyType(): GObject.GType
    getSecondaryKeyType(): GObject.GType
    getPrimaryKeys(): Gee.Collection
    getSize(): number
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void

    // Own virtual methods of GXml-0.14.GXml.SerializableDualKeyMap

    deserializeProceed(): boolean

    // Overloads of deserializeProceed

    deserializeProceed(): boolean
    deserialized(): boolean

    // Overloads of deserialized

    deserialized(): boolean
    deserializeNode(node: Node): boolean

    // Overloads of deserializeNode

    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean

    // Overloads of deserializeChildren

    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    getEnableUnknownSerializableProperty(): boolean

    // Overloads of getEnableUnknownSerializableProperty

    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean

    // Class property signals of GXml-0.14.GXml.SerializableDualKeyMap

    connect(sigName: "notify::value-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value-type", ...args: any[]): void
    connect(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-key-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-key-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-key-type", ...args: any[]): void
    connect(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::secondary-key-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::secondary-key-type", ...args: any[]): void
    connect(sigName: "notify::primary-keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-keys", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableDualKeyMap extends GObject.Object {

    // Own properties of GXml-0.14.GXml.SerializableDualKeyMap

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableDualKeyMap

    constructor(config?: SerializableDualKeyMap.ConstructorProperties) 
    constructor() 
    static new(): SerializableDualKeyMap
    _init(config?: SerializableDualKeyMap.ConstructorProperties): void
}

module SerializableArrayList {

    // Constructor properties interface

    interface ConstructorProperties extends Serializable.ConstructorProperties, SerializableCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.SerializableArrayList

        properties?: GObject.ParamSpec[] | null
        ignored_serializable_properties?: GLib.HashTable | null
    }

}

interface SerializableArrayList extends Serializable, SerializableCollection {

    // Own properties of GXml-0.14.GXml.SerializableArrayList

    properties: GObject.ParamSpec[]
    ignoredSerializableProperties: GLib.HashTable
    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.SerializableArrayList

    parentInstance: Gee.ArrayList
    priv: SerializableArrayListPrivate
    node: Node
    // Has conflict: deserialized: boolean

    // Owm methods of GXml-0.14.GXml.SerializableArrayList

    // Has conflict: deserializeProceed(): boolean
    // Has conflict: deserializeNode(node: Node): boolean
    // Has conflict: deserializeChildren(): boolean
    // Has conflict: setDefaultNamespace(node: Node): boolean
    // Has conflict: serializeUseXmlNodeValue(): boolean
    // Has conflict: propertyUseNick(): boolean
    // Has conflict: nodeName(): string | null
    // Has conflict: findPropertySpec(propertyName: string): GObject.ParamSpec | null
    // Has conflict: listSerializableProperties(): GObject.ParamSpec[]
    // Has conflict: serialize(node: Node): Node | null
    defaultSerialize(node: Node): Node | null
    // Has conflict: serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    defaultSerializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    // Has conflict: deserialize(node: Node): boolean
    defaultDeserialize(node: Node): boolean
    // Has conflict: deserializeProperty(propertyNode: Node): boolean
    defaultDeserializeProperty(propertyNode: Node): boolean
    getProperties(): GObject.ParamSpec[]
    setProperties(value: GObject.ParamSpec[]): void
    getIgnoredSerializableProperties(): GLib.HashTable
    setIgnoredSerializableProperties(value: GLib.HashTable): void

    // Conflicting methods

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    get(index: number): any

    // Overloads of get

    get(index: number): any
    get(index: number): any
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    set(index: number, item: any): void
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    indexOf(item: any): number
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    insert(index: number, item: any): void
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator

    // Own virtual methods of GXml-0.14.GXml.SerializableArrayList

    deserializeProceed(): boolean

    // Overloads of deserializeProceed

    deserializeProceed(): boolean
    deserialized(): boolean

    // Overloads of deserialized

    deserialized(): boolean
    deserializeNode(node: Node): boolean

    // Overloads of deserializeNode

    deserializeNode(node: Node): boolean
    deserializeChildren(): boolean

    // Overloads of deserializeChildren

    deserializeChildren(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean

    // Class property signals of GXml-0.14.GXml.SerializableArrayList

    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-properties", ...args: any[]): void
    connect(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unknown-serializable-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unknown-serializable-nodes", ...args: any[]): void
    connect(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::serialized-xml-node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::serialized-xml-node-value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableArrayList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.SerializableArrayList

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableArrayList

    constructor(config?: SerializableArrayList.ConstructorProperties) 
    constructor() 
    static new(): SerializableArrayList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: SerializableArrayList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module SerializableContainer {

    // Constructor properties interface

    interface ConstructorProperties extends SerializableObjectModel.ConstructorProperties {
    }

}

interface SerializableContainer {

    // Own properties of GXml-0.14.GXml.SerializableContainer

    __gtype__: number

    // Own fields of GXml-0.14.GXml.SerializableContainer

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.SerializableContainer

    // Has conflict: initContainers(): void

    // Conflicting methods

    getEnableUnknownSerializableProperty(): boolean

    // Overloads of getEnableUnknownSerializableProperty

    getEnableUnknownSerializableProperty(): boolean
    getEnableUnknownSerializableProperty(): boolean
    serializeUseXmlNodeValue(): boolean

    // Overloads of serializeUseXmlNodeValue

    serializeUseXmlNodeValue(): boolean
    serializeUseXmlNodeValue(): boolean
    propertyUseNick(): boolean

    // Overloads of propertyUseNick

    propertyUseNick(): boolean
    propertyUseNick(): boolean
    setDefaultNamespace(node: Node): boolean

    // Overloads of setDefaultNamespace

    setDefaultNamespace(node: Node): boolean
    setDefaultNamespace(node: Node): boolean
    nodeName(): string | null

    // Overloads of nodeName

    nodeName(): string | null
    nodeName(): string | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null

    // Overloads of findPropertySpec

    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    findPropertySpec(propertyName: string): GObject.ParamSpec | null
    listSerializableProperties(): GObject.ParamSpec[]

    // Overloads of listSerializableProperties

    listSerializableProperties(): GObject.ParamSpec[]
    listSerializableProperties(): GObject.ParamSpec[]
    serialize(node: Node): Node | null

    // Overloads of serialize

    serialize(node: Node): Node | null
    serialize(node: Node): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null

    // Overloads of serializeProperty

    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    serializeProperty(element: Node, prop: GObject.ParamSpec): Node | null
    deserialize(node: Node): boolean

    // Overloads of deserialize

    deserialize(node: Node): boolean
    deserialize(node: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Overloads of deserializeProperty

    deserializeProperty(propertyNode: Node): boolean
    deserializeProperty(propertyNode: Node): boolean

    // Own virtual methods of GXml-0.14.GXml.SerializableContainer

    initContainers(): void

    // Class property signals of GXml-0.14.GXml.SerializableContainer

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::properties", ...args: any[]): void
    connect(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): number
    on(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ignored-serializable-properties", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ignored-serializable-properties", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SerializableContainer extends SerializableObjectModel {

    // Own properties of GXml-0.14.GXml.SerializableContainer

    static name: string

    // Constructors of GXml-0.14.GXml.SerializableContainer

    constructor(config?: SerializableContainer.ConstructorProperties) 
    _init(config?: SerializableContainer.ConstructorProperties): void
}

module TAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends Attribute.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TAttribute extends Attribute {

    // Own properties of GXml-0.14.GXml.TAttribute

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TAttribute

    parentInstance: any
    priv: any
    namespaces: any

    // Conflicting methods

    setNamespace(value?: Namespace | null): void

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TAttribute extends TNode {

    // Own properties of GXml-0.14.GXml.TAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.TAttribute

    constructor(config?: TAttribute.ConstructorProperties) 
    constructor(d: Document, name: string, value: string) 
    static new(d: Document, name: string, value: string): TAttribute
    _init(config?: TAttribute.ConstructorProperties): void
}

module TComment {

    // Constructor properties interface

    interface ConstructorProperties extends Comment.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TComment extends Comment {

    // Own properties of GXml-0.14.GXml.TComment

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TComment

    parentInstance: any
    priv: any

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TComment extends TNode {

    // Own properties of GXml-0.14.GXml.TComment

    static name: string

    // Constructors of GXml-0.14.GXml.TComment

    constructor(config?: TComment.ConstructorProperties) 
    constructor(doc: Document, text: string) 
    static new(doc: Document, text: string): TComment
    _init(config?: TComment.ConstructorProperties): void
}

module TCDATA {

    // Constructor properties interface

    interface ConstructorProperties extends CDATA.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TCDATA extends CDATA {

    // Own properties of GXml-0.14.GXml.TCDATA

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TCDATA

    parentInstance: any
    priv: any

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TCDATA

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TCDATA extends TNode {

    // Own properties of GXml-0.14.GXml.TCDATA

    static name: string

    // Constructors of GXml-0.14.GXml.TCDATA

    constructor(config?: TCDATA.ConstructorProperties) 
    constructor(d: Document, text: string) 
    static new(d: Document, text: string): TCDATA
    _init(config?: TCDATA.ConstructorProperties): void
}

module TDocument {

    // Constructor properties interface

    interface ConstructorProperties extends Document.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TDocument extends Document {

    // Own properties of GXml-0.14.GXml.TDocument

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TDocument

    parentInstance: any
    priv: any
    namespaces: any
    children: Gee.ArrayList

    // Owm methods of GXml-0.14.GXml.TDocument

    saveTo(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::ns-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ns-top", ...args: any[]): void
    connect(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix-default-ns", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TDocument extends TNode {

    // Own properties of GXml-0.14.GXml.TDocument

    static name: string

    // Constructors of GXml-0.14.GXml.TDocument

    constructor(config?: TDocument.ConstructorProperties) 
    constructor() 
    static new(): TDocument
    static fromPath(path: string): TDocument
    static fromUri(uri: string): TDocument
    static fromFile(file: Gio.File): TDocument
    static fromStream(stream: Gio.InputStream): TDocument
    static fromString(str: string): TDocument
    static fromPathWithReadtypeFunc(path: string, func: any): TDocument
    static fromUriWithReadtypeFunc(uri: string, func: any): TDocument
    static fromFileWithReadtypeFunc(file: Gio.File, func: any): TDocument
    static fromStreamWithReadtypeFunc(stream: Gio.InputStream, func: any): TDocument
    static fromStringWithReadtypeFunc(str: string, func: any): TDocument
    _init(config?: TDocument.ConstructorProperties): void
    static twSaveAs(doc: Document, f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    static writeDocument(doc: Document, tw: libxml2.TextWriter): void
    static startNode(doc: Document, tw: libxml2.TextWriter, node: Node, root: boolean, declaredNs: Gee.ArrayList): /* declaredNs */ Gee.ArrayList
    static readDoc(doc: Document, file: Gio.File, rtfunc?: any | null): void
    static readDocStream(doc: Document, istream: Gio.InputStream, rtfunc?: any | null): void
    static readNode(node: Node, tr: libxml2.TextReader, rntfunc?: any | null): TDocumentReadType
}

module TElement {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TElement extends Element {

    // Own properties of GXml-0.14.GXml.TElement

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TElement

    parentInstance: any
    priv: any
    attrs: any
    children: TNodeTChildrenList
    namespaces: any

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::content", callback: (...args: any[]) => void): number
    on(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TElement extends TNode {

    // Own properties of GXml-0.14.GXml.TElement

    static name: string

    // Constructors of GXml-0.14.GXml.TElement

    constructor(config?: TElement.ConstructorProperties) 
    constructor(d: Document, name: string) 
    static new(d: Document, name: string): TElement
    _init(config?: TElement.ConstructorProperties): void
}

module TNamespace {

    // Constructor properties interface

    interface ConstructorProperties extends Namespace.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TNamespace extends Namespace {

    // Own properties of GXml-0.14.GXml.TNamespace

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TNamespace

    parentInstance: any
    priv: any

    // Conflicting methods

    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TNamespace

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TNamespace extends TNode {

    // Own properties of GXml-0.14.GXml.TNamespace

    static name: string

    // Constructors of GXml-0.14.GXml.TNamespace

    constructor(config?: TNamespace.ConstructorProperties) 
    constructor(d: Document, uri: string, prefix?: string | null) 
    static new(d: Document, uri: string, prefix?: string | null): TNamespace
    _init(config?: TNamespace.ConstructorProperties): void
}

module TNode {

    // Constructor properties interface

    interface ConstructorProperties extends Node.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.TNode

        value?: string | null
    }

}

interface TNode extends Node {

    // Own properties of GXml-0.14.GXml.TNode

    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: Document
    readonly namespaces: Gee.List
    readonly typeNode: NodeType
    __gtype__: number

    // Own fields of GXml-0.14.GXml.TNode

    parentInstance: GObject.Object
    priv: TNodePrivate
    name: any
    value: string | null
    doc: Document
    readonly parent: Node & Node
    nodeType: NodeType

    // Owm methods of GXml-0.14.GXml.TNode

    // Has conflict: setNamespace(uri: string, prefix?: string | null): boolean
    // Has conflict: toString(): string | null
    // Has conflict: setParent(node: Node): void
    // Has conflict: getAttrs(): Gee.Map
    // Has conflict: getChildrenNodes(): Gee.BidirList
    // Has conflict: getDocument(): Document
    // Has conflict: getName(): string | null
    // Has conflict: getNamespaces(): Gee.List
    // Has conflict: getTypeNode(): NodeType
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string): void
    // Has conflict: getParent(): Node

    // Own virtual methods of GXml-0.14.GXml.TNode

    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setParent(node: Node): void
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TNode

    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.TNode

    static name: string

    // Constructors of GXml-0.14.GXml.TNode

    constructor(config?: TNode.ConstructorProperties) 
    _init(config?: TNode.ConstructorProperties): void
}

module TNodeTChildrenList {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.AbstractBidirList.ConstructorProperties {
    }

}

interface TNodeTChildrenList {

    // Own properties of GXml-0.14.GXml.TNodeTChildrenList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Own fields of GXml-0.14.GXml.TNodeTChildrenList

    parentInstance: Gee.AbstractBidirList
    priv: TNodeTChildrenListPrivate

    // Conflicting methods

    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    get(index: number): any

    // Overloads of get

    get(index: number): any
    get(index: number): any
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    set(index: number, item: any): void
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    indexOf(item: any): number
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    insert(index: number, item: any): void
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Class property signals of GXml-0.14.GXml.TNodeTChildrenList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TNodeTChildrenList extends Gee.AbstractBidirList {

    // Own properties of GXml-0.14.GXml.TNodeTChildrenList

    static name: string

    // Constructors of GXml-0.14.GXml.TNodeTChildrenList

    constructor(config?: TNodeTChildrenList.ConstructorProperties) 
    constructor(e: Node) 
    static new(e: Node): TNodeTChildrenList
    _init(config?: TNodeTChildrenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module TProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends ProcessingInstruction.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TProcessingInstruction extends ProcessingInstruction {

    // Own properties of GXml-0.14.GXml.TProcessingInstruction

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TProcessingInstruction

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TProcessingInstruction

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TProcessingInstruction extends TNode {

    // Own properties of GXml-0.14.GXml.TProcessingInstruction

    static name: string

    // Constructors of GXml-0.14.GXml.TProcessingInstruction

    constructor(config?: TProcessingInstruction.ConstructorProperties) 
    constructor(doc: Document, target: string, data: string) 
    static new(doc: Document, target: string, data: string): TProcessingInstruction
    _init(config?: TProcessingInstruction.ConstructorProperties): void
}

module TText {

    // Constructor properties interface

    interface ConstructorProperties extends Text.ConstructorProperties, TNode.ConstructorProperties {
    }

}

interface TText extends Text {

    // Own properties of GXml-0.14.GXml.TText

    __gtype__: number

    // Conflicting properties

    name: any
    readonly parent: Node & Node

    // Own fields of GXml-0.14.GXml.TText

    parentInstance: any
    priv: any

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.TText

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TText extends TNode {

    // Own properties of GXml-0.14.GXml.TText

    static name: string

    // Constructors of GXml-0.14.GXml.TText

    constructor(config?: TText.ConstructorProperties) 
    constructor(d: Document, text: string) 
    static new(d: Document, text: string): TText
    _init(config?: TText.ConstructorProperties): void
}

module HtmlDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GDocument.ConstructorProperties {
    }

}

interface HtmlDocument {

    // Own properties of GXml-0.14.GXml.HtmlDocument

    readonly defaultOptions: number
    __gtype__: number

    // Conflicting properties

    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    baseUri: any
    doc: any

    // Own fields of GXml-0.14.GXml.HtmlDocument

    parentInstance: any
    priv: any

    // Conflicting methods

    save(cancellable?: Gio.Cancellable | null): boolean

    // Overloads of save

    save(cancellable?: Gio.Cancellable | null): boolean
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Overloads of saveAs

    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    createElement(name: string): Node
    createElement(localName: string): DomElement
    createComment(text: string): Node
    createComment(data: string): DomComment
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getElementsByPropertyValue(property: string, value: string): ElementList
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.HtmlDocument

    connect(sigName: "notify::default-options", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-options", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-options", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-options", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-options", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class HtmlDocument extends GDocument {

    // Own properties of GXml-0.14.GXml.HtmlDocument

    static name: string

    // Constructors of GXml-0.14.GXml.HtmlDocument

    constructor(config?: HtmlDocument.ConstructorProperties) 
    static fromPath(path: string, options: number): HtmlDocument

    // Overloads of fromPath

    static fromPath(path: string, options: number): GDocument
    static fromUri(uri: string, options: number): HtmlDocument

    // Overloads of fromUri

    static fromUri(uri: string, options: number): GDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): HtmlDocument

    // Overloads of fromFile

    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GDocument
    static fromString(html: string, options: number): HtmlDocument

    // Overloads of fromString

    static fromString(str: string, options: number): GDocument
    constructor() 
    static new(): HtmlDocument

    // Overloads of new

    static new(): GDocument
    _init(config?: HtmlDocument.ConstructorProperties): void
    static getDefaultOptions(): number

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends Attribute.ConstructorProperties, DomAttr.ConstructorProperties, GNode.ConstructorProperties {
    }

}

interface GAttribute extends Attribute, DomAttr {

    // Own properties of GXml-0.14.GXml.GAttribute

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GAttribute

    parentInstance: any
    priv: any

    // Conflicting methods

    setNamespace(value?: Namespace | null): void

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getPrefix(): string | null
    getPrefix(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::specified", callback: (...args: any[]) => void): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::specified", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GAttribute extends GNode {

    // Own properties of GXml-0.14.GXml.GAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.GAttribute

    constructor(config?: GAttribute.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GAttribute
    _init(config?: GAttribute.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GComment {

    // Constructor properties interface

    interface ConstructorProperties extends Comment.ConstructorProperties, DomComment.ConstructorProperties, GCharacterData.ConstructorProperties {
    }

}

interface GComment extends Comment, DomComment {

    // Own properties of GXml-0.14.GXml.GComment

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GComment

    parentInstance: any
    priv: any

    // Conflicting methods

    getStr(): string | null
    getStr(): string | null
    setStr(value: string): void
    setStr(value: string): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    toString(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getTypeNode(): NodeType
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getDocument(): Document
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GComment extends GCharacterData {

    // Own properties of GXml-0.14.GXml.GComment

    static name: string

    // Constructors of GXml-0.14.GXml.GComment

    constructor(config?: GComment.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GComment

    // Overloads of new

    static new(): GCharacterData
    static new(): GNonDocumentChildNode
    static new(): GChildNode
    _init(config?: GComment.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GCharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends Character.ConstructorProperties, DomCharacterData.ConstructorProperties, GNonDocumentChildNode.ConstructorProperties {
    }

}

interface GCharacterData extends Character, DomCharacterData {

    // Own properties of GXml-0.14.GXml.GCharacterData

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GCharacterData

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    toString(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getTypeNode(): NodeType
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getDocument(): Document
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GCharacterData

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GCharacterData extends GNonDocumentChildNode {

    // Own properties of GXml-0.14.GXml.GCharacterData

    static name: string

    // Constructors of GXml-0.14.GXml.GCharacterData

    constructor(config?: GCharacterData.ConstructorProperties) 
    constructor() 
    static new(): GCharacterData

    // Overloads of new

    static new(): GNonDocumentChildNode
    static new(): GChildNode
    _init(config?: GCharacterData.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomChildNode.ConstructorProperties, GNode.ConstructorProperties {
    }

}

interface GChildNode extends DomChildNode {

    // Own properties of GXml-0.14.GXml.GChildNode

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GChildNode

    parentInstance: any
    priv: any

    // Conflicting methods

    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.GChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GChildNode extends GNode {

    // Own properties of GXml-0.14.GXml.GChildNode

    static name: string

    // Constructors of GXml-0.14.GXml.GChildNode

    constructor(config?: GChildNode.ConstructorProperties) 
    constructor() 
    static new(): GChildNode
    _init(config?: GChildNode.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GNonDocumentChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomNonDocumentTypeChildNode.ConstructorProperties, GChildNode.ConstructorProperties {
    }

}

interface GNonDocumentChildNode extends DomNonDocumentTypeChildNode {

    // Own properties of GXml-0.14.GXml.GNonDocumentChildNode

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GNonDocumentChildNode

    parentInstance: any
    priv: any

    // Conflicting methods

    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.GNonDocumentChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GNonDocumentChildNode extends GChildNode {

    // Own properties of GXml-0.14.GXml.GNonDocumentChildNode

    static name: string

    // Constructors of GXml-0.14.GXml.GNonDocumentChildNode

    constructor(config?: GNonDocumentChildNode.ConstructorProperties) 
    constructor() 
    static new(): GNonDocumentChildNode

    // Overloads of new

    static new(): GChildNode
    _init(config?: GNonDocumentChildNode.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GCDATA {

    // Constructor properties interface

    interface ConstructorProperties extends CDATA.ConstructorProperties, GNode.ConstructorProperties {
    }

}

interface GCDATA extends CDATA {

    // Own properties of GXml-0.14.GXml.GCDATA

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GCDATA

    parentInstance: any
    priv: any

    // Conflicting methods

    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GCDATA

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GCDATA extends GNode {

    // Own properties of GXml-0.14.GXml.GCDATA

    static name: string

    // Constructors of GXml-0.14.GXml.GCDATA

    constructor(config?: GCDATA.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GCDATA
    _init(config?: GCDATA.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GDocument {

    // Constructor properties interface

    interface ConstructorProperties extends Document.ConstructorProperties, DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocument.ConstructorProperties, DomXMLDocument.ConstructorProperties, XPathContext.ConstructorProperties, GNode.ConstructorProperties {
    }

}

interface GDocument extends Document, DomParentNode, DomNonElementParentNode, DomDocument, DomXMLDocument, XPathContext {

    // Own properties of GXml-0.14.GXml.GDocument

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GDocument

    parentInstance: any
    priv: any
    doc: any
    buffer: any
    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    constructor_: DomEvent

    // Owm methods of GXml-0.14.GXml.GDocument

    libxmlToString(): string | null
    // Has conflict: save(cancellable?: Gio.Cancellable | null): boolean
    // Has conflict: saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Conflicting methods

    createElement(name: string): Node
    createElement(localName: string): DomElement
    createComment(text: string): Node
    createComment(data: string): DomComment
    getElementsByPropertyValue(property: string, value: string): DomElementList
    getElementsByPropertyValue(property: string, value: string): ElementList
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Own virtual methods of GXml-0.14.GXml.GDocument

    save(cancellable?: Gio.Cancellable | null): boolean

    // Overloads of save

    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Overloads of saveAs

    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Class property signals of GXml-0.14.GXml.GDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::ns-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ns-top", ...args: any[]): void
    connect(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix-default-ns", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDocument extends GNode {

    // Own properties of GXml-0.14.GXml.GDocument

    static name: string

    // Constructors of GXml-0.14.GXml.GDocument

    constructor(config?: GDocument.ConstructorProperties) 
    constructor() 
    static new(): GDocument
    static fromPath(path: string, options: number): GDocument
    static fromUri(uri: string, options: number): GDocument
    static fromFile(file: Gio.File, options: number, cancel?: Gio.Cancellable | null): GDocument
    static fromString(str: string, options: number): GDocument
    static fromStream(istream: Gio.InputStream): GDocument
    static fromDoc(doc: libxml2.Doc): GDocument
    _init(config?: GDocument.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GImplementation {

    // Constructor properties interface

    interface ConstructorProperties extends DomImplementation.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GImplementation extends DomImplementation {

    // Own properties of GXml-0.14.GXml.GImplementation

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GImplementation

    parentInstance: GObject.Object
    priv: GImplementationPrivate

    // Class property signals of GXml-0.14.GXml.GImplementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GImplementation extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GImplementation

    static name: string

    // Constructors of GXml-0.14.GXml.GImplementation

    constructor(config?: GImplementation.ConstructorProperties) 
    constructor() 
    static new(): GImplementation
    _init(config?: GImplementation.ConstructorProperties): void
}

module GDocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends DomNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomDocumentType.ConstructorProperties, GChildNode.ConstructorProperties {
    }

}

interface GDocumentType extends DomNode, DomChildNode, DomDocumentType {

    // Own properties of GXml-0.14.GXml.GDocumentType

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GDocumentType

    parentInstance: any
    priv: any
    name: any
    publicId: any
    systemId: any

    // Conflicting methods

    getName(): string
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.GDocumentType

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDocumentType extends GChildNode {

    // Own properties of GXml-0.14.GXml.GDocumentType

    static name: string

    // Constructors of GXml-0.14.GXml.GDocumentType

    constructor(config?: GDocumentType.ConstructorProperties) 
    static withName(name: string): GDocumentType
    static withIds(name: string, publicId: string, systemId: string): GDocumentType
    constructor() 
    static new(): GDocumentType

    // Overloads of new

    static new(): GChildNode
    _init(config?: GDocumentType.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GDocumentFragment {

    // Constructor properties interface

    interface ConstructorProperties extends DomDocumentFragment.ConstructorProperties, GDocument.ConstructorProperties {
    }

}

interface GDocumentFragment extends DomDocumentFragment {

    // Own properties of GXml-0.14.GXml.GDocumentFragment

    __gtype__: number

    // Conflicting properties

    baseUri: any
    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    doc: any

    // Own fields of GXml-0.14.GXml.GDocumentFragment

    parentInstance: any
    priv: any

    // Conflicting methods

    getElementsByPropertyValue(property: string, value: string): DomElementList
    getElementsByPropertyValue(property: string, value: string): ElementList
    save(cancellable?: Gio.Cancellable | null): boolean

    // Overloads of save

    save(cancellable?: Gio.Cancellable | null): boolean
    save(cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean

    // Overloads of saveAs

    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable?: Gio.Cancellable | null): boolean
    createElement(name: string): Node
    createElement(localName: string): DomElement
    createComment(text: string): Node
    createComment(data: string): DomComment
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getAttrs(): Gee.Map
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    setValue(value: string): void
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getTypeNode(): NodeType
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GDocumentFragment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDocumentFragment extends GDocument {

    // Own properties of GXml-0.14.GXml.GDocumentFragment

    static name: string

    // Constructors of GXml-0.14.GXml.GDocumentFragment

    constructor(config?: GDocumentFragment.ConstructorProperties) 
    constructor(d: GDocument) 
    static new(d: GDocument): GDocumentFragment

    // Overloads of new

    static new(): GDocument
    _init(config?: GDocumentFragment.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GDomNodeIterator {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GDomNodeIterator extends DomNodeIterator {

    // Own properties of GXml-0.14.GXml.GDomNodeIterator

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GDomNodeIterator

    parentInstance: GObject.Object
    priv: GDomNodeIteratorPrivate
    root: any
    referenceNode: any
    pointerBeforeReferenceNode: any
    whatToShow: any
    filter: any

    // Class property signals of GXml-0.14.GXml.GDomNodeIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reference-node", ...args: any[]): void
    connect(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-before-reference-node", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomNodeIterator extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GDomNodeIterator

    static name: string

    // Constructors of GXml-0.14.GXml.GDomNodeIterator

    constructor(config?: GDomNodeIterator.ConstructorProperties) 
    constructor(n: DomNode, whatToShow: number, filter: DomNodeFilter) 
    static new(n: DomNode, whatToShow: number, filter: DomNodeFilter): GDomNodeIterator
    _init(config?: GDomNodeIterator.ConstructorProperties): void
}

module GDomTreeWalker {

    // Constructor properties interface

    interface ConstructorProperties extends DomTreeWalker.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GDomTreeWalker extends DomTreeWalker {

    // Own properties of GXml-0.14.GXml.GDomTreeWalker

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GDomTreeWalker

    parentInstance: GObject.Object
    priv: GDomTreeWalkerPrivate
    root: any
    whatToShow: any
    filter: any
    currentNode: any

    // Class property signals of GXml-0.14.GXml.GDomTreeWalker

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::filter", ...args: any[]): void
    connect(sigName: "notify::current-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-node", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomTreeWalker extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GDomTreeWalker

    static name: string

    // Constructors of GXml-0.14.GXml.GDomTreeWalker

    constructor(config?: GDomTreeWalker.ConstructorProperties) 
    constructor(r: DomNode, w: number, f: DomNodeFilter) 
    static new(r: DomNode, w: number, f: DomNodeFilter): GDomTreeWalker
    _init(config?: GDomTreeWalker.ConstructorProperties): void
}

module GDomTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends DomTokenList.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface GDomTokenList extends DomTokenList {

    // Own properties of GXml-0.14.GXml.GDomTokenList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.GDomTokenList

    parentInstance: Gee.ArrayList
    priv: GDomTokenListPrivate
    element: DomElement
    attr: string | null

    // Owm methods of GXml-0.14.GXml.GDomTokenList

    update(): void

    // Conflicting methods

    contains(token: string): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.GDomTokenList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomTokenList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.GDomTokenList

    static name: string

    // Constructors of GXml-0.14.GXml.GDomTokenList

    constructor(config?: GDomTokenList.ConstructorProperties) 
    constructor(e: DomElement, attr?: string | null) 
    static new(e: DomElement, attr?: string | null): GDomTokenList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: GDomTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GDomSettableTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends DomSettableTokenList.ConstructorProperties, GDomTokenList.ConstructorProperties {
    }

}

interface GDomSettableTokenList extends DomSettableTokenList {

    // Own properties of GXml-0.14.GXml.GDomSettableTokenList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.GDomSettableTokenList

    parentInstance: any
    priv: any

    // Conflicting methods

    contains(token: string): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.GDomSettableTokenList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomSettableTokenList extends GDomTokenList {

    // Own properties of GXml-0.14.GXml.GDomSettableTokenList

    static name: string

    // Constructors of GXml-0.14.GXml.GDomSettableTokenList

    constructor(config?: GDomSettableTokenList.ConstructorProperties) 
    constructor(e: DomElement, attr?: string | null) 
    static new(e: DomElement, attr?: string | null): GDomSettableTokenList

    // Overloads of new

    static new(e: DomElement, attr?: string | null): GDomTokenList
    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: GDomSettableTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GDomHTMLCollection {

    // Constructor properties interface

    interface ConstructorProperties extends DomHTMLCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface GDomHTMLCollection extends DomHTMLCollection {

    // Own properties of GXml-0.14.GXml.GDomHTMLCollection

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.GDomHTMLCollection

    parentInstance: Gee.ArrayList
    priv: GDomHTMLCollectionPrivate

    // Conflicting methods

    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.GDomHTMLCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomHTMLCollection extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.GDomHTMLCollection

    static name: string

    // Constructors of GXml-0.14.GXml.GDomHTMLCollection

    constructor(config?: GDomHTMLCollection.ConstructorProperties) 
    constructor() 
    static new(): GDomHTMLCollection

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: GDomHTMLCollection.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GDomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends DomEvent.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GDomEvent extends DomEvent {

    // Own properties of GXml-0.14.GXml.GDomEvent

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GDomEvent

    parentInstance: GObject.Object
    priv: GDomEventPrivate
    etype: any
    eventTarget: any
    currentTarget: any
    bubbles: any
    cancelable: any
    isTrusted: any
    timeStamp: any
    defaultPrevented: any
    eventPhase: any
    flags: DomEventFlags

    // Class property signals of GXml-0.14.GXml.GDomEvent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomEvent extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GDomEvent

    static name: string

    // Constructors of GXml-0.14.GXml.GDomEvent

    constructor(config?: GDomEvent.ConstructorProperties) 
    constructor() 
    static new(): GDomEvent
    _init(config?: GDomEvent.ConstructorProperties): void
}

module GDomCustomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends GDomEvent.ConstructorProperties {
    }

}

interface GDomCustomEvent {

    // Own properties of GXml-0.14.GXml.GDomCustomEvent

    __gtype__: number

    // Conflicting properties

    etype: any
    eventTarget: any
    currentTarget: any
    bubbles: any
    cancelable: any
    isTrusted: any
    timeStamp: any
    defaultPrevented: any
    eventPhase: any

    // Own fields of GXml-0.14.GXml.GDomCustomEvent

    parentInstance: any
    priv: any
    detail?: any | null

    // Owm methods of GXml-0.14.GXml.GDomCustomEvent

    initCustomEvent(type: string, bubbles: boolean, cancelable: boolean, detail?: any | null): void
    getDetail(): any | null

    // Class property signals of GXml-0.14.GXml.GDomCustomEvent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomCustomEvent extends GDomEvent {

    // Own properties of GXml-0.14.GXml.GDomCustomEvent

    static name: string

    // Constructors of GXml-0.14.GXml.GDomCustomEvent

    constructor(config?: GDomCustomEvent.ConstructorProperties) 
    constructor() 
    static new(): GDomCustomEvent

    // Overloads of new

    static new(): GDomEvent
    _init(config?: GDomCustomEvent.ConstructorProperties): void
}

module GDomRange {

    // Constructor properties interface

    interface ConstructorProperties extends DomRange.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GDomRange extends DomRange {

    // Own properties of GXml-0.14.GXml.GDomRange

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GDomRange

    parentInstance: GObject.Object
    priv: GDomRangePrivate
    document: DomDocument
    startContainer: any
    startOffset: any
    endContainer: any
    endOffset: any
    // Has conflict: collapse: boolean
    commonAncestorContainer: any

    // Class property signals of GXml-0.14.GXml.GDomRange

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::start-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-container", ...args: any[]): void
    connect(sigName: "notify::start-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-offset", ...args: any[]): void
    connect(sigName: "notify::end-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-container", ...args: any[]): void
    connect(sigName: "notify::end-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-offset", ...args: any[]): void
    connect(sigName: "notify::collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::common-ancestor-container", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GDomRange extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GDomRange

    static name: string

    // Constructors of GXml-0.14.GXml.GDomRange

    constructor(config?: GDomRange.ConstructorProperties) 
    constructor(doc: DomDocument) 
    static new(doc: DomDocument): GDomRange
    _init(config?: GDomRange.ConstructorProperties): void
}

module GElement {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomElement.ConstructorProperties, Element.ConstructorProperties, XPathContext.ConstructorProperties, GNonDocumentChildNode.ConstructorProperties {
    }

}

interface GElement extends DomParentNode, DomElement, Element, XPathContext {

    // Own properties of GXml-0.14.GXml.GElement

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GElement

    parentInstance: any
    priv: any

    // Conflicting methods

    getElementsByPropertyValue(property: string, value: string): DomElementList
    getElementsByPropertyValue(property: string, value: string): ElementList
    getTagName(): string | null
    getTagName(): string | null
    normalize(): void
    normalize(): void
    toString(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getTypeNode(): NodeType
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getDocument(): Document
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::content", callback: (...args: any[]) => void): number
    on(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GElement extends GNonDocumentChildNode {

    // Own properties of GXml-0.14.GXml.GElement

    static name: string

    // Constructors of GXml-0.14.GXml.GElement

    constructor(config?: GElement.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GElement

    // Overloads of new

    static new(): GNonDocumentChildNode
    static new(): GChildNode
    _init(config?: GElement.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GNamespace {

    // Constructor properties interface

    interface ConstructorProperties extends Namespace.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GNamespace extends Namespace {

    // Own properties of GXml-0.14.GXml.GNamespace

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GNamespace

    parentInstance: GObject.Object
    priv: GNamespacePrivate

    // Owm methods of GXml-0.14.GXml.GNamespace

    getInternalNs(): any | null

    // Class property signals of GXml-0.14.GXml.GNamespace

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GNamespace extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GNamespace

    static name: string

    // Constructors of GXml-0.14.GXml.GNamespace

    constructor(config?: GNamespace.ConstructorProperties) 
    constructor(ns?: any | null) 
    static new(ns?: any | null): GNamespace
    _init(config?: GNamespace.ConstructorProperties): void
}

module GNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventTarget.ConstructorProperties, DomNode.ConstructorProperties, Node.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GNode

        value?: string | null
    }

}

interface GNode extends DomEventTarget, DomNode, Node {

    // Own properties of GXml-0.14.GXml.GNode

    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly namespaces: Gee.List
    readonly document: Document
    readonly parent: Node
    readonly typeNode: NodeType
    readonly name: string | null
    value: string | null
    __gtype__: number

    // Own fields of GXml-0.14.GXml.GNode

    parentInstance: GObject.Object
    priv: GNodePrivate
    doc: GDocument
    node?: any | null
    baseUri: any

    // Owm methods of GXml-0.14.GXml.GNode

    // Has conflict: setNamespace(uri: string, prefix?: string | null): boolean
    // Has conflict: toString(): string | null
    getInternalNode(): any | null
    // Has conflict: getAttrs(): Gee.Map
    // Has conflict: getChildrenNodes(): Gee.BidirList
    // Has conflict: getNamespaces(): Gee.List
    // Has conflict: getDocument(): Document
    // Has conflict: getParent(): Node
    // Has conflict: getTypeNode(): NodeType
    // Has conflict: getName(): string | null
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string): void

    // Own virtual methods of GXml-0.14.GXml.GNode

    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node

    // Overloads of getParent

    getParent(): Node
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void

    // Class property signals of GXml-0.14.GXml.GNode

    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GNode

    static name: string

    // Constructors of GXml-0.14.GXml.GNode

    constructor(config?: GNode.ConstructorProperties) 
    _init(config?: GNode.ConstructorProperties): void
    static toGnode(doc: GDocument, node?: any | null): Node

    // Conflicting static methods

    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
}

module GProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends ProcessingInstruction.ConstructorProperties, DomProcessingInstruction.ConstructorProperties, GCharacterData.ConstructorProperties {
    }

}

interface GProcessingInstruction extends ProcessingInstruction, DomProcessingInstruction {

    // Own properties of GXml-0.14.GXml.GProcessingInstruction

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GProcessingInstruction

    parentInstance: any
    priv: any

    // Conflicting methods

    getTarget(): string | null
    getTarget(): string | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    toString(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getTypeNode(): NodeType
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getDocument(): Document
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GProcessingInstruction

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GProcessingInstruction extends GCharacterData {

    // Own properties of GXml-0.14.GXml.GProcessingInstruction

    static name: string

    // Constructors of GXml-0.14.GXml.GProcessingInstruction

    constructor(config?: GProcessingInstruction.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GProcessingInstruction

    // Overloads of new

    static new(): GCharacterData
    static new(): GNonDocumentChildNode
    static new(): GChildNode
    _init(config?: GProcessingInstruction.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GText {

    // Constructor properties interface

    interface ConstructorProperties extends Text.ConstructorProperties, DomText.ConstructorProperties, GCharacterData.ConstructorProperties {
    }

}

interface GText extends Text, DomText {

    // Own properties of GXml-0.14.GXml.GText

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.14.GXml.GText

    parentInstance: any
    priv: any

    // Conflicting methods

    getStr(): string | null
    getStr(): string | null
    setStr(value: string): void
    setStr(value: string): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    toString(): string | null
    toString(): string | null

    // Overloads of toString

    toString(): string | null
    setNamespace(uri: string, prefix?: string | null): boolean
    setNamespace(uri: string, prefix?: string | null): boolean

    // Overloads of setNamespace

    setNamespace(uri: string, prefix?: string | null): boolean
    getNamespaces(): Gee.List
    getNamespaces(): Gee.List

    // Overloads of getNamespaces

    getNamespaces(): Gee.List
    getChildrenNodes(): Gee.BidirList
    getChildrenNodes(): Gee.BidirList

    // Overloads of getChildrenNodes

    getChildrenNodes(): Gee.BidirList
    getAttrs(): Gee.Map
    getAttrs(): Gee.Map

    // Overloads of getAttrs

    getAttrs(): Gee.Map
    getName(): string | null
    getName(): string | null

    // Overloads of getName

    getName(): string | null
    getValue(): string | null
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string): void
    setValue(value: string): void

    // Overloads of setValue

    setValue(value: string): void
    getTypeNode(): NodeType
    getTypeNode(): NodeType

    // Overloads of getTypeNode

    getTypeNode(): NodeType
    getDocument(): Document
    getDocument(): Document

    // Overloads of getDocument

    getDocument(): Document
    getParent(): Node
    getParent(): Node

    // Overloads of getParent

    getParent(): Node

    // Class property signals of GXml-0.14.GXml.GText

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::namespaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespaces", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::whole-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::whole-text", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GText extends GCharacterData {

    // Own properties of GXml-0.14.GXml.GText

    static name: string

    // Constructors of GXml-0.14.GXml.GText

    constructor(config?: GText.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GText

    // Overloads of new

    static new(): GCharacterData
    static new(): GNonDocumentChildNode
    static new(): GChildNode
    _init(config?: GText.ConstructorProperties): void

    // Conflicting static methods

    static copy(doc: Document, node: Node, source: Node, deep: boolean): boolean
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module GHashMapAttr {

    // Constructor properties interface

    interface ConstructorProperties extends DomNamedNodeMap.ConstructorProperties, Gee.AbstractMap.ConstructorProperties {
    }

}

interface GHashMapAttr extends DomNamedNodeMap {

    // Own properties of GXml-0.14.GXml.GHashMapAttr

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GHashMapAttr

    parentInstance: Gee.AbstractMap
    priv: GHashMapAttrPrivate

    // Conflicting methods

    hasKey(key: any): boolean

    // Overloads of hasKey

    hasKey(key: any): boolean
    hasKey(key: any): boolean
    has(key: any, value: any): boolean

    // Overloads of has

    has(key: any, value: any): boolean
    has(key: any, value: any): boolean
    get(key: any): any | null

    // Overloads of get

    get(key: any): any | null
    get(key: any): any | null
    set(key: any, value: any): void

    // Overloads of set

    set(key: any, value: any): void
    set(key: any, value: any): void
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getKeys(): Gee.Set
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getValues(): Gee.Collection
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Class property signals of GXml-0.14.GXml.GHashMapAttr

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GHashMapAttr extends Gee.AbstractMap {

    // Own properties of GXml-0.14.GXml.GHashMapAttr

    static name: string

    // Constructors of GXml-0.14.GXml.GHashMapAttr

    constructor(config?: GHashMapAttr.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GHashMapAttr
    _init(config?: GHashMapAttr.ConstructorProperties): void
}

module GHashMapAttrEntry {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.MapEntry.ConstructorProperties {
    }

}

interface GHashMapAttrEntry {

    // Own properties of GXml-0.14.GXml.GHashMapAttrEntry

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GHashMapAttrEntry

    parentInstance: Gee.MapEntry
    priv: GHashMapAttrEntryPrivate

    // Class property signals of GXml-0.14.GXml.GHashMapAttrEntry

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::key", callback: (...args: any[]) => void): number
    on(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GHashMapAttrEntry extends Gee.MapEntry {

    // Own properties of GXml-0.14.GXml.GHashMapAttrEntry

    static name: string

    // Constructors of GXml-0.14.GXml.GHashMapAttrEntry

    constructor(config?: GHashMapAttrEntry.ConstructorProperties) 
    constructor(doc: GDocument, attr?: any | null) 
    static new(doc: GDocument, attr?: any | null): GHashMapAttrEntry
    _init(config?: GHashMapAttrEntry.ConstructorProperties): void
}

module GHashMapAttrIterator {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.MapIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GHashMapAttrIterator extends Gee.MapIterator {

    // Own properties of GXml-0.14.GXml.GHashMapAttrIterator

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GHashMapAttrIterator

    parentInstance: GObject.Object
    priv: GHashMapAttrIteratorPrivate

    // Class property signals of GXml-0.14.GXml.GHashMapAttrIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valid", ...args: any[]): void
    connect(sigName: "notify::mutable", callback: (...args: any[]) => void): number
    on(sigName: "notify::mutable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mutable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mutable", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GHashMapAttrIterator extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GHashMapAttrIterator

    static name: string

    // Constructors of GXml-0.14.GXml.GHashMapAttrIterator

    constructor(config?: GHashMapAttrIterator.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GHashMapAttrIterator
    _init(config?: GHashMapAttrIterator.ConstructorProperties): void
}

module GListChildren {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeList.ConstructorProperties, DomHTMLCollection.ConstructorProperties, Gee.AbstractBidirList.ConstructorProperties {
    }

}

interface GListChildren extends DomNodeList, DomHTMLCollection {

    // Own properties of GXml-0.14.GXml.GListChildren

    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Own fields of GXml-0.14.GXml.GListChildren

    parentInstance: Gee.AbstractBidirList
    priv: GListChildrenPrivate

    // Conflicting methods

    item(index: number): DomNode | null
    item(index: number): DomElement | null
    getLength(): number
    getLength(): number
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    get(index: number): any

    // Overloads of get

    get(index: number): any
    get(index: number): any
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    set(index: number, item: any): void
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    indexOf(item: any): number
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    insert(index: number, item: any): void
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.GListChildren

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GListChildren extends Gee.AbstractBidirList {

    // Own properties of GXml-0.14.GXml.GListChildren

    static name: string

    // Constructors of GXml-0.14.GXml.GListChildren

    constructor(config?: GListChildren.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GListChildren
    _init(config?: GListChildren.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GListChildrenIterator {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.Traversable.ConstructorProperties, Gee.Iterator.ConstructorProperties, Gee.BidirIterator.ConstructorProperties, Gee.ListIterator.ConstructorProperties, Gee.BidirListIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GListChildrenIterator extends Gee.Traversable, Gee.Iterator, Gee.BidirIterator, Gee.ListIterator, Gee.BidirListIterator {

    // Own properties of GXml-0.14.GXml.GListChildrenIterator

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GListChildrenIterator

    parentInstance: GObject.Object
    priv: GListChildrenIteratorPrivate

    // Class property signals of GXml-0.14.GXml.GListChildrenIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valid", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GListChildrenIterator extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GListChildrenIterator

    static name: string

    // Constructors of GXml-0.14.GXml.GListChildrenIterator

    constructor(config?: GListChildrenIterator.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GListChildrenIterator
    _init(config?: GListChildrenIterator.ConstructorProperties): void
}

module GListNamespaces {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.AbstractList.ConstructorProperties {
    }

}

interface GListNamespaces {

    // Own properties of GXml-0.14.GXml.GListNamespaces

    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Own fields of GXml-0.14.GXml.GListNamespaces

    parentInstance: Gee.AbstractList
    priv: GListNamespacesPrivate

    // Conflicting methods

    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    get(index: number): any

    // Overloads of get

    get(index: number): any
    get(index: number): any
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    set(index: number, item: any): void
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    indexOf(item: any): number
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    insert(index: number, item: any): void
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    contains(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    add(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    remove(item: any): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean

    // Class property signals of GXml-0.14.GXml.GListNamespaces

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GListNamespaces extends Gee.AbstractList {

    // Own properties of GXml-0.14.GXml.GListNamespaces

    static name: string

    // Constructors of GXml-0.14.GXml.GListNamespaces

    constructor(config?: GListNamespaces.ConstructorProperties) 
    constructor(doc: GDocument, node?: any | null) 
    static new(doc: GDocument, node?: any | null): GListNamespaces
    _init(config?: GListNamespaces.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GListNamespacesIterator {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.Traversable.ConstructorProperties, Gee.Iterator.ConstructorProperties, Gee.ListIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GListNamespacesIterator extends Gee.Traversable, Gee.Iterator, Gee.ListIterator {

    // Own properties of GXml-0.14.GXml.GListNamespacesIterator

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GListNamespacesIterator

    parentInstance: GObject.Object
    priv: GListNamespacesIteratorPrivate

    // Class property signals of GXml-0.14.GXml.GListNamespacesIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valid", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GListNamespacesIterator extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GListNamespacesIterator

    static name: string

    // Constructors of GXml-0.14.GXml.GListNamespacesIterator

    constructor(config?: GListNamespacesIterator.ConstructorProperties) 
    constructor(node?: any | null) 
    static new(node?: any | null): GListNamespacesIterator
    _init(config?: GListNamespacesIterator.ConstructorProperties): void
}

module DomNodeFilter {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNodeFilter {

    // Own properties of GXml-0.14.GXml.DomNodeFilter

    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomNodeFilter

    parentInstance: GObject.Object
    priv: DomNodeFilterPrivate

    // Class property signals of GXml-0.14.GXml.DomNodeFilter

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomNodeFilter extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomNodeFilter

    static name: string

    // Constructors of GXml-0.14.GXml.DomNodeFilter

    constructor(config?: DomNodeFilter.ConstructorProperties) 
    constructor() 
    static new(): DomNodeFilter
    _init(config?: DomNodeFilter.ConstructorProperties): void
}

module DomElementList {

    // Constructor properties interface

    interface ConstructorProperties extends DomHTMLCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface DomElementList extends DomHTMLCollection {

    // Own properties of GXml-0.14.GXml.DomElementList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.DomElementList

    parentInstance: Gee.ArrayList
    priv: DomElementListPrivate

    // Conflicting methods

    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.DomElementList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomElementList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.DomElementList

    static name: string

    // Constructors of GXml-0.14.GXml.DomElementList

    constructor(config?: DomElementList.ConstructorProperties) 
    constructor() 
    static new(): DomElementList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: DomElementList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomEventInit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomEventInit

        bubbles?: boolean | null
        cancelable?: boolean | null
    }

}

interface DomEventInit {

    // Own properties of GXml-0.14.GXml.DomEventInit

    bubbles: boolean
    cancelable: boolean
    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomEventInit

    parentInstance: GObject.Object
    priv: DomEventInitPrivate

    // Owm methods of GXml-0.14.GXml.DomEventInit

    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void

    // Class property signals of GXml-0.14.GXml.DomEventInit

    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomEventInit extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomEventInit

    static name: string

    // Constructors of GXml-0.14.GXml.DomEventInit

    constructor(config?: DomEventInit.ConstructorProperties) 
    constructor() 
    static new(): DomEventInit
    _init(config?: DomEventInit.ConstructorProperties): void
}

module DomCustomEventInit {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventInit.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomCustomEventInit

        detail?: any | null
    }

}

interface DomCustomEventInit {

    // Own properties of GXml-0.14.GXml.DomCustomEventInit

    detail: any
    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomCustomEventInit

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.DomCustomEventInit

    getDetail(): any | null
    setDetail(value?: any | null): void

    // Class property signals of GXml-0.14.GXml.DomCustomEventInit

    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomCustomEventInit extends DomEventInit {

    // Own properties of GXml-0.14.GXml.DomCustomEventInit

    static name: string

    // Constructors of GXml-0.14.GXml.DomCustomEventInit

    constructor(config?: DomCustomEventInit.ConstructorProperties) 
    constructor() 
    static new(): DomCustomEventInit

    // Overloads of new

    static new(): DomEventInit
    _init(config?: DomCustomEventInit.ConstructorProperties): void
}

module DomTimeStamp {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomTimeStamp

        time?: GLib.DateTime | null
    }

}

interface DomTimeStamp {

    // Own properties of GXml-0.14.GXml.DomTimeStamp

    time: GLib.DateTime
    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomTimeStamp

    parentInstance: GObject.Object
    priv: DomTimeStampPrivate

    // Owm methods of GXml-0.14.GXml.DomTimeStamp

    toString(): string | null
    getTime(): GLib.DateTime
    setTime(value: GLib.DateTime): void

    // Class property signals of GXml-0.14.GXml.DomTimeStamp

    connect(sigName: "notify::time", callback: (...args: any[]) => void): number
    on(sigName: "notify::time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomTimeStamp extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomTimeStamp

    static name: string

    // Constructors of GXml-0.14.GXml.DomTimeStamp

    constructor(config?: DomTimeStamp.ConstructorProperties) 
    constructor() 
    static new(): DomTimeStamp
    _init(config?: DomTimeStamp.ConstructorProperties): void
}

module DomMutationObserverInit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.DomMutationObserverInit

        child_list?: boolean | null
        attributes?: boolean | null
        character_data?: boolean | null
        subtree?: boolean | null
        attribute_old_value?: boolean | null
        character_data_old_value?: boolean | null
        attribute_filter?: Gee.List | null
    }

}

interface DomMutationObserverInit {

    // Own properties of GXml-0.14.GXml.DomMutationObserverInit

    childList: boolean
    attributes: boolean
    characterData: boolean
    subtree: boolean
    attributeOldValue: boolean
    characterDataOldValue: boolean
    attributeFilter: Gee.List
    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomMutationObserverInit

    parentInstance: GObject.Object
    priv: DomMutationObserverInitPrivate

    // Owm methods of GXml-0.14.GXml.DomMutationObserverInit

    getChildList(): boolean
    setChildList(value: boolean): void
    getAttributes(): boolean
    setAttributes(value: boolean): void
    getCharacterData(): boolean
    setCharacterData(value: boolean): void
    getSubtree(): boolean
    setSubtree(value: boolean): void
    getAttributeOldValue(): boolean
    setAttributeOldValue(value: boolean): void
    getCharacterDataOldValue(): boolean
    setCharacterDataOldValue(value: boolean): void
    getAttributeFilter(): Gee.List
    setAttributeFilter(value: Gee.List): void

    // Class property signals of GXml-0.14.GXml.DomMutationObserverInit

    connect(sigName: "notify::child-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::character-data", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-data", ...args: any[]): void
    connect(sigName: "notify::subtree", callback: (...args: any[]) => void): number
    on(sigName: "notify::subtree", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::subtree", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::subtree", ...args: any[]): void
    connect(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-old-value", ...args: any[]): void
    connect(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-data-old-value", ...args: any[]): void
    connect(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-filter", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomMutationObserverInit extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomMutationObserverInit

    static name: string

    // Constructors of GXml-0.14.GXml.DomMutationObserverInit

    constructor(config?: DomMutationObserverInit.ConstructorProperties) 
    constructor() 
    static new(): DomMutationObserverInit
    _init(config?: DomMutationObserverInit.ConstructorProperties): void
}

module DomErrorName {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomErrorName {

    // Own properties of GXml-0.14.GXml.DomErrorName

    __gtype__: number

    // Own fields of GXml-0.14.GXml.DomErrorName

    parentInstance: GObject.Object
    priv: DomErrorNamePrivate

    // Owm methods of GXml-0.14.GXml.DomErrorName

    getName(errorCode: number): string | null
    getCode(errorName: string): number

    // Class property signals of GXml-0.14.GXml.DomErrorName

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DomErrorName extends GObject.Object {

    // Own properties of GXml-0.14.GXml.DomErrorName

    static name: string

    // Constructors of GXml-0.14.GXml.DomErrorName

    constructor(config?: DomErrorName.ConstructorProperties) 
    constructor() 
    static new(): DomErrorName
    _init(config?: DomErrorName.ConstructorProperties): void
}

module GXPathObject {

    // Constructor properties interface

    interface ConstructorProperties extends XPathObject.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GXPathObject extends XPathObject {

    // Own properties of GXml-0.14.GXml.GXPathObject

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GXPathObject

    parentInstance: GObject.Object
    priv: GXPathObjectPrivate

    // Class property signals of GXml-0.14.GXml.GXPathObject

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::boolean-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::boolean-value", ...args: any[]): void
    connect(sigName: "notify::string-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::string-value", ...args: any[]): void
    connect(sigName: "notify::number-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::number-value", ...args: any[]): void
    connect(sigName: "notify::nodeset", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodeset", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GXPathObject extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GXPathObject

    static name: string

    // Constructors of GXml-0.14.GXml.GXPathObject

    constructor(config?: GXPathObject.ConstructorProperties) 
    constructor(document: GDocument, pointer?: any | null) 
    static new(document: GDocument, pointer?: any | null): GXPathObject
    _init(config?: GXPathObject.ConstructorProperties): void
}

module GomDocument {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocument.ConstructorProperties, DomXMLDocument.ConstructorProperties, GomNode.ConstructorProperties {
    }

}

interface GomDocument extends DomParentNode, DomNonElementParentNode, DomDocument, DomXMLDocument {

    // Own properties of GXml-0.14.GXml.GomDocument

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomDocument

    parentInstance: any
    priv: any
    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    constructor_: DomEvent

    // Owm methods of GXml-0.14.GXml.GomDocument

    writeFile(file: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    writeString(): string | null
    readFromFile(file: Gio.File): void
    readFromString(str: string): void

    // Class property signals of GXml-0.14.GXml.GomDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDocument extends GomNode {

    // Own properties of GXml-0.14.GXml.GomDocument

    static name: string

    // Constructors of GXml-0.14.GXml.GomDocument

    constructor(config?: GomDocument.ConstructorProperties) 
    constructor() 
    static new(): GomDocument

    // Overloads of new

    static new(): GomNode
    static fromPath(path: string): GomDocument
    static fromUri(uri: string): GomDocument
    static fromFile(file: Gio.File): GomDocument
    static fromStream(stream: Gio.InputStream): GomDocument
    static fromString(str: string): GomDocument
    _init(config?: GomDocument.ConstructorProperties): void
}

module GomImplementation {

    // Constructor properties interface

    interface ConstructorProperties extends DomImplementation.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GomImplementation extends DomImplementation {

    // Own properties of GXml-0.14.GXml.GomImplementation

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomImplementation

    parentInstance: GObject.Object
    priv: GomImplementationPrivate

    // Class property signals of GXml-0.14.GXml.GomImplementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomImplementation extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GomImplementation

    static name: string

    // Constructors of GXml-0.14.GXml.GomImplementation

    constructor(config?: GomImplementation.ConstructorProperties) 
    constructor() 
    static new(): GomImplementation
    _init(config?: GomImplementation.ConstructorProperties): void
}

module GomDocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends DomNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomDocumentType.ConstructorProperties, GomNode.ConstructorProperties {
    }

}

interface GomDocumentType extends DomNode, DomChildNode, DomDocumentType {

    // Own properties of GXml-0.14.GXml.GomDocumentType

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomDocumentType

    parentInstance: any
    priv: any
    name: any
    publicId: any
    systemId: any

    // Class property signals of GXml-0.14.GXml.GomDocumentType

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDocumentType extends GomNode {

    // Own properties of GXml-0.14.GXml.GomDocumentType

    static name: string

    // Constructors of GXml-0.14.GXml.GomDocumentType

    constructor(config?: GomDocumentType.ConstructorProperties) 
    static withName(doc: DomDocument, name: string): GomDocumentType
    static withIds(doc: DomDocument, name: string, publicId: string, systemId: string): GomDocumentType
    constructor() 
    static new(): GomDocumentType

    // Overloads of new

    static new(): GomNode
    _init(config?: GomDocumentType.ConstructorProperties): void
}

module GomDocumentFragment {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocumentFragment.ConstructorProperties, GomNode.ConstructorProperties {
    }

}

interface GomDocumentFragment extends DomParentNode, DomNonElementParentNode, DomDocumentFragment {

    // Own properties of GXml-0.14.GXml.GomDocumentFragment

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomDocumentFragment

    parentInstance: any
    priv: any

    // Class property signals of GXml-0.14.GXml.GomDocumentFragment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDocumentFragment extends GomNode {

    // Own properties of GXml-0.14.GXml.GomDocumentFragment

    static name: string

    // Constructors of GXml-0.14.GXml.GomDocumentFragment

    constructor(config?: GomDocumentFragment.ConstructorProperties) 
    constructor(doc: DomDocument) 
    static new(doc: DomDocument): GomDocumentFragment

    // Overloads of new

    static new(): GomNode
    _init(config?: GomDocumentFragment.ConstructorProperties): void
}

module GomElement {

    // Constructor properties interface

    interface ConstructorProperties extends DomChildNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomElement.ConstructorProperties, GomObject.ConstructorProperties, GomNode.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomElement

        parse_children?: boolean | null
        unparsed?: string | null
    }

}

interface GomElement extends DomChildNode, DomNonDocumentTypeChildNode, DomParentNode, DomElement, GomObject {

    // Own properties of GXml-0.14.GXml.GomElement

    parseChildren: boolean
    unparsed: string | null
    __gtype__: number

    // Conflicting properties

    prefix: any
    localName: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomElement

    parentInstance: any
    priv: any
    attributes: any
    namespaceUri: any

    // Owm methods of GXml-0.14.GXml.GomElement

    readFromUri(uri: string): void
    readFromFile(f: Gio.File, cancellable?: Gio.Cancellable | null): void
    readFromStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readFromString(str: string): void
    writeString(): string | null
    writeFile(f: Gio.File): void
    writeStream(stream: Gio.OutputStream): void
    createStream(): Gio.InputStream
    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    initialize(localName: string): void
    initializeDocument(doc: DomDocument, localName: string): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string): void
    readUnparsed(): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string
    setUnparsed(value: string): void

    // Conflicting methods

    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomElement

    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomElement extends GomNode {

    // Own properties of GXml-0.14.GXml.GomElement

    static name: string

    // Constructors of GXml-0.14.GXml.GomElement

    constructor(config?: GomElement.ConstructorProperties) 
    constructor() 
    static new(): GomElement

    // Overloads of new

    static new(): GomNode
    _init(config?: GomElement.ConstructorProperties): void
}

module GomElementAttributes {

    // Constructor properties interface

    interface ConstructorProperties extends DomNamedNodeMap.ConstructorProperties, Gee.HashMap.ConstructorProperties {
    }

}

interface GomElementAttributes extends DomNamedNodeMap {

    // Own properties of GXml-0.14.GXml.GomElementAttributes

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomElementAttributes

    parentInstance: Gee.HashMap
    priv: GomElementAttributesPrivate
    element: GomElement

    // Conflicting methods

    hasKey(key: any): boolean
    hasKey(key: any): boolean

    // Overloads of hasKey

    hasKey(key: any): boolean
    has(key: any, value: any): boolean
    has(key: any, value: any): boolean

    // Overloads of has

    has(key: any, value: any): boolean
    get(key: any): any | null
    get(key: any): any | null

    // Overloads of get

    get(key: any): any | null
    set(key: any, value: any): void
    set(key: any, value: any): void

    // Overloads of set

    set(key: any, value: any): void
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any): [ /* returnType */ boolean, /* value */ any ]
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getKeys(): Gee.Set
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Class property signals of GXml-0.14.GXml.GomElementAttributes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomElementAttributes extends Gee.HashMap {

    // Own properties of GXml-0.14.GXml.GomElementAttributes

    static name: string

    // Constructors of GXml-0.14.GXml.GomElementAttributes

    constructor(config?: GomElementAttributes.ConstructorProperties) 
    constructor(element: GomElement) 
    static new(element: GomElement): GomElementAttributes

    // Overloads of new

    static new(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): Gee.HashMap
    _init(config?: GomElementAttributes.ConstructorProperties): void
}

module GomAttr {

    // Constructor properties interface

    interface ConstructorProperties extends DomAttr.ConstructorProperties, GomNode.ConstructorProperties {
    }

}

interface GomAttr extends DomAttr {

    // Own properties of GXml-0.14.GXml.GomAttr

    __gtype__: number

    // Conflicting properties

    prefix: any
    localName: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomAttr

    parentInstance: any
    priv: any
    namespaceUri: any

    // Class property signals of GXml-0.14.GXml.GomAttr

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::specified", callback: (...args: any[]) => void): number
    on(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::specified", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::specified", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::specified", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomAttr extends GomNode {

    // Own properties of GXml-0.14.GXml.GomAttr

    static name: string

    // Constructors of GXml-0.14.GXml.GomAttr

    constructor(config?: GomAttr.ConstructorProperties) 
    constructor(element: DomElement, name: string, value: string) 
    static new(element: DomElement, name: string, value: string): GomAttr

    // Overloads of new

    static new(): GomNode
    static namespace(element: DomElement, namespaceUri: string, prefix: string | null, name: string, value: string): GomAttr
    _init(config?: GomAttr.ConstructorProperties): void
}

module GomNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventTarget.ConstructorProperties, DomNode.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface GomNode extends DomEventTarget, DomNode {

    // Own properties of GXml-0.14.GXml.GomNode

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomNode

    parentInstance: GObject.Object
    priv: GomNodePrivate
    localName: string | null
    prefix: string | null
    baseUri: any
    nodeValue: string | null
    parent: DomNode
    nodeType: any
    childNodes: any
    document: DomDocument

    // Class property signals of GXml-0.14.GXml.GomNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomNode extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GomNode

    static name: string

    // Constructors of GXml-0.14.GXml.GomNode

    constructor(config?: GomNode.ConstructorProperties) 
    constructor() 
    static new(): GomNode
    _init(config?: GomNode.ConstructorProperties): void
}

module GomNodeList {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeList.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface GomNodeList extends DomNodeList {

    // Own properties of GXml-0.14.GXml.GomNodeList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.14.GXml.GomNodeList

    parentInstance: Gee.ArrayList
    priv: GomNodeListPrivate

    // Conflicting methods

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any
    get(index: number): any

    // Overloads of get

    get(index: number): any
    set(index: number, item: any): void
    set(index: number, item: any): void

    // Overloads of set

    set(index: number, item: any): void
    indexOf(item: any): number
    indexOf(item: any): number

    // Overloads of indexOf

    indexOf(item: any): number
    insert(index: number, item: any): void
    insert(index: number, item: any): void

    // Overloads of insert

    insert(index: number, item: any): void
    removeAt(index: number): any
    removeAt(index: number): any

    // Overloads of removeAt

    removeAt(index: number): any
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any): boolean
    contains(item: any): boolean

    // Overloads of contains

    contains(item: any): boolean
    add(item: any): boolean
    add(item: any): boolean

    // Overloads of add

    add(item: any): boolean
    remove(item: any): boolean
    remove(item: any): boolean

    // Overloads of remove

    remove(item: any): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.14.GXml.GomNodeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomNodeList extends Gee.ArrayList {

    // Own properties of GXml-0.14.GXml.GomNodeList

    static name: string

    // Constructors of GXml-0.14.GXml.GomNodeList

    constructor(config?: GomNodeList.ConstructorProperties) 
    constructor() 
    static new(): GomNodeList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: GomNodeList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module GomCharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends DomNonDocumentTypeChildNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomCharacterData.ConstructorProperties, GomNode.ConstructorProperties {
    }

}

interface GomCharacterData extends DomNonDocumentTypeChildNode, DomChildNode, DomCharacterData {

    // Own properties of GXml-0.14.GXml.GomCharacterData

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomCharacterData

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.GomCharacterData

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomCharacterData extends GomNode {

    // Own properties of GXml-0.14.GXml.GomCharacterData

    static name: string

    // Constructors of GXml-0.14.GXml.GomCharacterData

    constructor(config?: GomCharacterData.ConstructorProperties) 
    constructor() 
    static new(): GomCharacterData

    // Overloads of new

    static new(): GomNode
    _init(config?: GomCharacterData.ConstructorProperties): void
}

module GomText {

    // Constructor properties interface

    interface ConstructorProperties extends DomText.ConstructorProperties, GomCharacterData.ConstructorProperties {
    }

}

interface GomText extends DomText {

    // Own properties of GXml-0.14.GXml.GomText

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomText

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.GomText

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::whole-text", callback: (...args: any[]) => void): number
    on(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::whole-text", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::whole-text", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::whole-text", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomText extends GomCharacterData {

    // Own properties of GXml-0.14.GXml.GomText

    static name: string

    // Constructors of GXml-0.14.GXml.GomText

    constructor(config?: GomText.ConstructorProperties) 
    constructor(doc: DomDocument, data: string) 
    static new(doc: DomDocument, data: string): GomText

    // Overloads of new

    static new(): GomCharacterData
    static new(): GomNode
    _init(config?: GomText.ConstructorProperties): void
}

module GomProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends DomProcessingInstruction.ConstructorProperties, GomCharacterData.ConstructorProperties {
    }

}

interface GomProcessingInstruction extends DomProcessingInstruction {

    // Own properties of GXml-0.14.GXml.GomProcessingInstruction

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomProcessingInstruction

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.GomProcessingInstruction

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomProcessingInstruction extends GomCharacterData {

    // Own properties of GXml-0.14.GXml.GomProcessingInstruction

    static name: string

    // Constructors of GXml-0.14.GXml.GomProcessingInstruction

    constructor(config?: GomProcessingInstruction.ConstructorProperties) 
    constructor(doc: DomDocument, target: string, data: string) 
    static new(doc: DomDocument, target: string, data: string): GomProcessingInstruction

    // Overloads of new

    static new(): GomCharacterData
    static new(): GomNode
    _init(config?: GomProcessingInstruction.ConstructorProperties): void
}

module GomComment {

    // Constructor properties interface

    interface ConstructorProperties extends DomComment.ConstructorProperties, GomCharacterData.ConstructorProperties {
    }

}

interface GomComment extends DomComment {

    // Own properties of GXml-0.14.GXml.GomComment

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomComment

    parentInstance: any
    priv: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string): any | null
    setData(value: string): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string, data: any | null): void

    // Class property signals of GXml-0.14.GXml.GomComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomComment extends GomCharacterData {

    // Own properties of GXml-0.14.GXml.GomComment

    static name: string

    // Constructors of GXml-0.14.GXml.GomComment

    constructor(config?: GomComment.ConstructorProperties) 
    constructor(doc: DomDocument, data: string) 
    static new(doc: DomDocument, data: string): GomComment

    // Overloads of new

    static new(): GomCharacterData
    static new(): GomNode
    _init(config?: GomComment.ConstructorProperties): void
}

module BaseCollection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.BaseCollection

        items_type?: GObject.GType | null
        element?: GomElement | null
    }

}

interface BaseCollection {

    // Own properties of GXml-0.14.GXml.BaseCollection

    __gtype__: number

    // Own fields of GXml-0.14.GXml.BaseCollection

    parentInstance: GObject.Object
    priv: BaseCollectionPrivate
    nodesIndex: GLib.Queue
    element: GomElement
    itemsName: string | null
    itemsType: GObject.GType

    // Owm methods of GXml-0.14.GXml.BaseCollection

    initialize(itemsType: GObject.GType): void
    initializeElement(e: GomElement): void
    append(node: DomElement): void
    search(): void
    // Has conflict: validateAppend(index: number, element: DomElement): boolean
    getItemsName(): string
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    setElement(value: GomElement): void

    // Own virtual methods of GXml-0.14.GXml.BaseCollection

    validateAppend(index: number, element: DomElement): boolean

    // Class property signals of GXml-0.14.GXml.BaseCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BaseCollection extends GObject.Object {

    // Own properties of GXml-0.14.GXml.BaseCollection

    static name: string

    // Constructors of GXml-0.14.GXml.BaseCollection

    constructor(config?: BaseCollection.ConstructorProperties) 
    _init(config?: BaseCollection.ConstructorProperties): void
}

module GomArrayList {

    // Constructor properties interface

    interface ConstructorProperties extends GomCollection.ConstructorProperties, BaseCollection.ConstructorProperties {
    }

}

interface GomArrayList extends GomCollection {

    // Own properties of GXml-0.14.GXml.GomArrayList

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomArrayList

    parentInstance: any
    priv: any

    // Conflicting methods

    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomArrayList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomArrayList extends BaseCollection {

    // Own properties of GXml-0.14.GXml.GomArrayList

    static name: string

    // Constructors of GXml-0.14.GXml.GomArrayList

    constructor(config?: GomArrayList.ConstructorProperties) 
    constructor() 
    static new(): GomArrayList
    _init(config?: GomArrayList.ConstructorProperties): void
}

module GomHashMap {

    // Constructor properties interface

    interface ConstructorProperties extends GomCollection.ConstructorProperties, BaseCollection.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomHashMap

        attribute_key?: string | null
    }

}

interface GomHashMap extends GomCollection {

    // Own properties of GXml-0.14.GXml.GomHashMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomHashMap

    parentInstance: any
    priv: any
    hashtable: GLib.HashTable
    attributeKey: string | null

    // Owm methods of GXml-0.14.GXml.GomHashMap

    initializeElementWithKey(element: GomElement, itemsType: GObject.GType, attributeKey: string): void
    initializeWithKey(itemsType: GObject.GType, attributeKey: string): void
    get(key: string): DomElement | null
    hasKey(key: string): boolean
    getKeys(): string[]
    getAttributeKey(): string
    setAttributeKey(value: string): void

    // Conflicting methods

    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomHashMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomHashMap extends BaseCollection {

    // Own properties of GXml-0.14.GXml.GomHashMap

    static name: string

    // Constructors of GXml-0.14.GXml.GomHashMap

    constructor(config?: GomHashMap.ConstructorProperties) 
    constructor() 
    static new(): GomHashMap
    _init(config?: GomHashMap.ConstructorProperties): void
}

module GomHashPairedMap {

    // Constructor properties interface

    interface ConstructorProperties extends GomCollection.ConstructorProperties, BaseCollection.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomHashPairedMap

        attribute_primary_key?: string | null
        attribute_secondary_key?: string | null
    }

}

interface GomHashPairedMap extends GomCollection {

    // Own properties of GXml-0.14.GXml.GomHashPairedMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomHashPairedMap

    parentInstance: any
    priv: any
    hashtable: GLib.HashTable
    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null

    // Owm methods of GXml-0.14.GXml.GomHashPairedMap

    initializeElementWithKeys(element: GomElement, itemsType: GObject.GType, attributePrimaryKey: string, attributeSecondaryKey: string): void
    initializeWithKeys(itemsType: GObject.GType, attributePrimaryKey: string, attributeSecondaryKey: string): void
    get(primaryKey: string, secondaryKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void

    // Conflicting methods

    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomHashPairedMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomHashPairedMap extends BaseCollection {

    // Own properties of GXml-0.14.GXml.GomHashPairedMap

    static name: string

    // Constructors of GXml-0.14.GXml.GomHashPairedMap

    constructor(config?: GomHashPairedMap.ConstructorProperties) 
    constructor() 
    static new(): GomHashPairedMap
    _init(config?: GomHashPairedMap.ConstructorProperties): void
}

module GomHashThreeMap {

    // Constructor properties interface

    interface ConstructorProperties extends GomCollection.ConstructorProperties, BaseCollection.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomHashThreeMap

        attribute_primary_key?: string | null
        attribute_secondary_key?: string | null
        attribute_third_key?: string | null
    }

}

interface GomHashThreeMap extends GomCollection {

    // Own properties of GXml-0.14.GXml.GomHashThreeMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomHashThreeMap

    parentInstance: any
    priv: any
    hashtable: GLib.HashTable
    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null
    attributeThirdKey: string | null

    // Owm methods of GXml-0.14.GXml.GomHashThreeMap

    initializeElementWithKeys(element: GomElement, itemsType: GObject.GType, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    initializeWithKeys(itemsType: GObject.GType, attributePrimaryKey: string, attributeSecondaryKey: string, attributeThirdKey: string): void
    get(primaryKey: string, secondaryKey: string, thirdKey: string): DomElement | null
    hasPrimaryKey(key: string): boolean
    hasSecondaryKey(pkey: string, key: string): boolean
    hasThirdKey(pkey: string, skey: string, key: string): boolean
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string): string[]
    getThirdKeys(pkey: string, skey: string): string[]
    getAttributePrimaryKey(): string
    setAttributePrimaryKey(value: string): void
    getAttributeSecondaryKey(): string
    setAttributeSecondaryKey(value: string): void
    getAttributeThirdKey(): string
    setAttributeThirdKey(value: string): void

    // Conflicting methods

    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomHashThreeMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomHashThreeMap extends BaseCollection {

    // Own properties of GXml-0.14.GXml.GomHashThreeMap

    static name: string

    // Constructors of GXml-0.14.GXml.GomHashThreeMap

    constructor(config?: GomHashThreeMap.ConstructorProperties) 
    constructor() 
    static new(): GomHashThreeMap
    _init(config?: GomHashThreeMap.ConstructorProperties): void
}

module GomBaseProperty {

    // Constructor properties interface

    interface ConstructorProperties extends GomProperty.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomBaseProperty

        value?: string | null
    }

}

interface GomBaseProperty extends GomProperty {

    // Own properties of GXml-0.14.GXml.GomBaseProperty

    value: string | null
    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomBaseProperty

    parentInstance: GObject.Object
    priv: GomBasePropertyPrivate

    // Owm methods of GXml-0.14.GXml.GomBaseProperty

    // Has conflict: validateValue(val: string): boolean
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value?: string | null): void

    // Own virtual methods of GXml-0.14.GXml.GomBaseProperty

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomBaseProperty

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomBaseProperty extends GObject.Object {

    // Own properties of GXml-0.14.GXml.GomBaseProperty

    static name: string

    // Constructors of GXml-0.14.GXml.GomBaseProperty

    constructor(config?: GomBaseProperty.ConstructorProperties) 
    _init(config?: GomBaseProperty.ConstructorProperties): void
}

module GomString {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {
    }

}

interface GomString {

    // Own properties of GXml-0.14.GXml.GomString

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomString

    parentInstance: any
    priv: any
    value: string | null

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomString

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomString extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomString

    static name: string

    // Constructors of GXml-0.14.GXml.GomString

    constructor(config?: GomString.ConstructorProperties) 
    constructor() 
    static new(): GomString
    _init(config?: GomString.ConstructorProperties): void
}

module GomArrayString {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {
    }

}

interface GomArrayString {

    // Own properties of GXml-0.14.GXml.GomArrayString

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomArrayString

    parentInstance: any
    priv: any
    value: string | null
    values: string[]

    // Owm methods of GXml-0.14.GXml.GomArrayString

    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string): boolean

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomArrayString

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomArrayString extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomArrayString

    static name: string

    // Constructors of GXml-0.14.GXml.GomArrayString

    constructor(config?: GomArrayString.ConstructorProperties) 
    constructor() 
    static new(): GomArrayString
    _init(config?: GomArrayString.ConstructorProperties): void
}

module GomXsdArrayString {

    // Constructor properties interface

    interface ConstructorProperties extends GomArrayString.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdArrayString

        simple_type?: string | null
        source?: Gio.File | null
    }

}

interface GomXsdArrayString {

    // Own properties of GXml-0.14.GXml.GomXsdArrayString

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomXsdArrayString

    parentInstance: any
    priv: any
    source: Gio.File
    simpleType: string | null

    // Owm methods of GXml-0.14.GXml.GomXsdArrayString

    load(): void
    getSimpleType(): string
    setSimpleType(value: string): void
    getSource(): Gio.File
    setSource(value: Gio.File): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomXsdArrayString

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdArrayString extends GomArrayString {

    // Own properties of GXml-0.14.GXml.GomXsdArrayString

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdArrayString

    constructor(config?: GomXsdArrayString.ConstructorProperties) 
    constructor() 
    static new(): GomXsdArrayString

    // Overloads of new

    static new(): GomArrayString
    _init(config?: GomXsdArrayString.ConstructorProperties): void
}

module GomDouble {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomDouble

        decimals?: number | null
    }

}

interface GomDouble {

    // Own properties of GXml-0.14.GXml.GomDouble

    decimals: number
    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomDouble

    parentInstance: any
    priv: any
    value: any

    // Owm methods of GXml-0.14.GXml.GomDouble

    getDouble(): number
    setDouble(value: number): void
    getDecimals(): number
    setDecimals(value: number): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomDouble

    connect(sigName: "notify::decimals", callback: (...args: any[]) => void): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decimals", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDouble extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomDouble

    static name: string

    // Constructors of GXml-0.14.GXml.GomDouble

    constructor(config?: GomDouble.ConstructorProperties) 
    constructor() 
    static new(): GomDouble
    _init(config?: GomDouble.ConstructorProperties): void
}

module GomFloat {

    // Constructor properties interface

    interface ConstructorProperties extends GomDouble.ConstructorProperties {
    }

}

interface GomFloat {

    // Own properties of GXml-0.14.GXml.GomFloat

    __gtype__: number

    // Conflicting properties

    value: any

    // Own fields of GXml-0.14.GXml.GomFloat

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomFloat

    getFloat(): number
    setFloat(value: number): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomFloat

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::decimals", callback: (...args: any[]) => void): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decimals", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomFloat extends GomDouble {

    // Own properties of GXml-0.14.GXml.GomFloat

    static name: string

    // Constructors of GXml-0.14.GXml.GomFloat

    constructor(config?: GomFloat.ConstructorProperties) 
    constructor() 
    static new(): GomFloat

    // Overloads of new

    static new(): GomDouble
    _init(config?: GomFloat.ConstructorProperties): void
}

module GomInt {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {
    }

}

interface GomInt {

    // Own properties of GXml-0.14.GXml.GomInt

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomInt

    parentInstance: any
    priv: any
    value: any

    // Owm methods of GXml-0.14.GXml.GomInt

    getInteger(): number
    setInteger(value: number): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomInt

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomInt extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomInt

    static name: string

    // Constructors of GXml-0.14.GXml.GomInt

    constructor(config?: GomInt.ConstructorProperties) 
    constructor() 
    static new(): GomInt
    _init(config?: GomInt.ConstructorProperties): void
}

module GomBoolean {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {
    }

}

interface GomBoolean {

    // Own properties of GXml-0.14.GXml.GomBoolean

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomBoolean

    parentInstance: any
    priv: any
    value: any

    // Owm methods of GXml-0.14.GXml.GomBoolean

    getBoolean(): boolean
    setBoolean(value: boolean): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomBoolean

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomBoolean extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomBoolean

    static name: string

    // Constructors of GXml-0.14.GXml.GomBoolean

    constructor(config?: GomBoolean.ConstructorProperties) 
    constructor() 
    static new(): GomBoolean
    _init(config?: GomBoolean.ConstructorProperties): void
}

module GomEnum {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomEnum

        enum_type?: GObject.GType | null
    }

}

interface GomEnum {

    // Own properties of GXml-0.14.GXml.GomEnum

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomEnum

    parentInstance: any
    priv: any
    value: any
    enumType: GObject.GType

    // Owm methods of GXml-0.14.GXml.GomEnum

    initializeEnum(enumType: GObject.GType): void
    getEnum(): number
    setEnum(value: number): void
    getEnumType(): GObject.GType
    setEnumType(value: GObject.GType): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomEnum

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomEnum extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomEnum

    static name: string

    // Constructors of GXml-0.14.GXml.GomEnum

    constructor(config?: GomEnum.ConstructorProperties) 
    constructor() 
    static new(): GomEnum
    _init(config?: GomEnum.ConstructorProperties): void
}

module GomDate {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {
    }

}

interface GomDate {

    // Own properties of GXml-0.14.GXml.GomDate

    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomDate

    parentInstance: any
    priv: any
    value: any

    // Owm methods of GXml-0.14.GXml.GomDate

    getDate(): /* result */ GLib.Date
    setDate(date: GLib.Date): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomDate

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDate extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomDate

    static name: string

    // Constructors of GXml-0.14.GXml.GomDate

    constructor(config?: GomDate.ConstructorProperties) 
    constructor() 
    static new(): GomDate
    _init(config?: GomDate.ConstructorProperties): void
}

module GomDateTime {

    // Constructor properties interface

    interface ConstructorProperties extends GomBaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomDateTime

        format?: string | null
    }

}

interface GomDateTime {

    // Own properties of GXml-0.14.GXml.GomDateTime

    format: string | null
    __gtype__: number

    // Own fields of GXml-0.14.GXml.GomDateTime

    parentInstance: any
    priv: any
    value: any

    // Owm methods of GXml-0.14.GXml.GomDateTime

    getDatetime(): GLib.DateTime
    setDatetime(dt: GLib.DateTime): void
    getFormat(): string
    setFormat(value: string): void

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomDateTime

    connect(sigName: "notify::format", callback: (...args: any[]) => void): number
    on(sigName: "notify::format", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::format", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::format", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomDateTime extends GomBaseProperty {

    // Own properties of GXml-0.14.GXml.GomDateTime

    static name: string

    // Constructors of GXml-0.14.GXml.GomDateTime

    constructor(config?: GomDateTime.ConstructorProperties) 
    constructor() 
    static new(): GomDateTime
    _init(config?: GomDateTime.ConstructorProperties): void
}

module XParser {

    // Constructor properties interface

    interface ConstructorProperties extends Parser.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface XParser extends Parser {

    // Own properties of GXml-0.14.GXml.XParser

    __gtype__: number

    // Own fields of GXml-0.14.GXml.XParser

    parentInstance: GObject.Object
    priv: XParserPrivate

    // Owm methods of GXml-0.14.GXml.XParser

    createStream(cancellable?: Gio.Cancellable | null): Gio.InputStream
    readChildNodesStream(istream: Gio.InputStream, cancellable?: Gio.Cancellable | null): void
    readChildNodesString(str: string, cancellable?: Gio.Cancellable | null): void
    readNode(node: DomNode): void
    readUnparsed(): string | null
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string | null
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void
    readChildNodes(parent: DomNode): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]

    // Class property signals of GXml-0.14.GXml.XParser

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::node", callback: (...args: any[]) => void): number
    on(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class XParser extends GObject.Object {

    // Own properties of GXml-0.14.GXml.XParser

    static name: string

    // Constructors of GXml-0.14.GXml.XParser

    constructor(config?: XParser.ConstructorProperties) 
    constructor(node: DomNode) 
    static new(node: DomNode): XParser
    _init(config?: XParser.ConstructorProperties): void
}

module GomXsdSchema {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdSchema

        element_definitions?: GomXsdListElements | null
        simple_type_definitions?: GomXsdListSimpleTypes | null
        complex_type_definitions?: GomXsdListComplexTypes | null
    }

}

interface GomXsdSchema {

    // Own properties of GXml-0.14.GXml.GomXsdSchema

    elementDefinitions: GomXsdListElements
    simpleTypeDefinitions: GomXsdListSimpleTypes
    complexTypeDefinitions: GomXsdListComplexTypes
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdSchema

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdSchema

    getElementDefinitions(): GomXsdListElements
    setElementDefinitions(value: GomXsdListElements): void
    getSimpleTypeDefinitions(): GomXsdListSimpleTypes
    setSimpleTypeDefinitions(value: GomXsdListSimpleTypes): void
    getComplexTypeDefinitions(): GomXsdListComplexTypes
    setComplexTypeDefinitions(value: GomXsdListComplexTypes): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdSchema

    connect(sigName: "notify::element-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element-definitions", ...args: any[]): void
    connect(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type-definitions", ...args: any[]): void
    connect(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type-definitions", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdSchema extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdSchema

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdSchema

    constructor(config?: GomXsdSchema.ConstructorProperties) 
    constructor() 
    static new(): GomXsdSchema

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdSchema.ConstructorProperties): void
}

module GomXsdSimpleType {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdSimpleType

        final?: string | null
        name?: string | null
        annotation?: GomXsdAnnotation | null
        list?: GomXsdTypeList | null
        union?: GomXsdTypeUnion | null
        restriction?: GomXsdTypeRestriction | null
    }

}

interface GomXsdSimpleType {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleType

    final: string | null
    name: string | null
    annotation: GomXsdAnnotation
    list: GomXsdTypeList
    union: GomXsdTypeUnion
    restriction: GomXsdTypeRestriction
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdSimpleType

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdSimpleType

    getFinal(): string
    setFinal(value: string): void
    getName(): string
    setName(value: string): void
    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void
    getList(): GomXsdTypeList
    setList(value: GomXsdTypeList): void
    getUnion(): GomXsdTypeUnion
    setUnion(value: GomXsdTypeUnion): void
    getRestriction(): GomXsdTypeRestriction
    setRestriction(value: GomXsdTypeRestriction): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdSimpleType

    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::list", callback: (...args: any[]) => void): number
    on(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::list", ...args: any[]): void
    connect(sigName: "notify::union", callback: (...args: any[]) => void): number
    on(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::union", ...args: any[]): void
    connect(sigName: "notify::restriction", callback: (...args: any[]) => void): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::restriction", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdSimpleType extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleType

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdSimpleType

    constructor(config?: GomXsdSimpleType.ConstructorProperties) 
    constructor() 
    static new(): GomXsdSimpleType

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdSimpleType.ConstructorProperties): void
}

module GomXsdTypeDefinition {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdTypeDefinition

        annotation?: GomXsdAnnotation | null
    }

}

interface GomXsdTypeDefinition {

    // Own properties of GXml-0.14.GXml.GomXsdTypeDefinition

    annotation: GomXsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeDefinition

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdTypeDefinition

    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeDefinition

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeDefinition extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdTypeDefinition

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeDefinition

    constructor(config?: GomXsdTypeDefinition.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeDefinition

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeDefinition.ConstructorProperties): void
}

module GomXsdTypeList {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeDefinition.ConstructorProperties {
    }

}

interface GomXsdTypeList {

    // Own properties of GXml-0.14.GXml.GomXsdTypeList

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeList

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeList extends GomXsdTypeDefinition {

    // Own properties of GXml-0.14.GXml.GomXsdTypeList

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeList

    constructor(config?: GomXsdTypeList.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeList

    // Overloads of new

    static new(): GomXsdTypeDefinition
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeList.ConstructorProperties): void
}

module GomXsdTypeUnion {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeDefinition.ConstructorProperties {
    }

}

interface GomXsdTypeUnion {

    // Own properties of GXml-0.14.GXml.GomXsdTypeUnion

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeUnion

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeUnion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeUnion extends GomXsdTypeDefinition {

    // Own properties of GXml-0.14.GXml.GomXsdTypeUnion

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeUnion

    constructor(config?: GomXsdTypeUnion.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeUnion

    // Overloads of new

    static new(): GomXsdTypeDefinition
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeUnion.ConstructorProperties): void
}

module GomXsdTypeRestriction {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeDefinition.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdTypeRestriction

        base?: string | null
        simple_type?: GomXsdSimpleType | null
        enumerations?: GomXsdListTypeRestrictionEnumerations | null
        white_spaces?: GomXsdListTypeRestrictionWhiteSpaces | null
    }

}

interface GomXsdTypeRestriction {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestriction

    base: string | null
    simpleType: GomXsdSimpleType
    enumerations: GomXsdListTypeRestrictionEnumerations
    whiteSpaces: GomXsdListTypeRestrictionWhiteSpaces
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestriction

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdTypeRestriction

    getBase(): string
    setBase(value: string): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getEnumerations(): GomXsdListTypeRestrictionEnumerations
    setEnumerations(value: GomXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): GomXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: GomXsdListTypeRestrictionWhiteSpaces): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestriction

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::enumerations", callback: (...args: any[]) => void): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enumerations", ...args: any[]): void
    connect(sigName: "notify::white-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::white-spaces", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestriction extends GomXsdTypeDefinition {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestriction

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestriction

    constructor(config?: GomXsdTypeRestriction.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestriction

    // Overloads of new

    static new(): GomXsdTypeDefinition
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestriction.ConstructorProperties): void
}

module GomXsdTypeRestrictionDef {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdTypeRestrictionDef

        annotation?: GomXsdAnnotation | null
    }

}

interface GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    annotation: GomXsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    getAnnotation(): GomXsdAnnotation
    setAnnotation(value: GomXsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionDef extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionDef

    constructor(config?: GomXsdTypeRestrictionDef.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionDef

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionDef.ConstructorProperties): void
}

module GomXsdTypeRestrictionMinExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMinExclusive {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusive

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMinExclusive extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusive

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusive

    constructor(config?: GomXsdTypeRestrictionMinExclusive.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMinExclusive

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMinExclusive.ConstructorProperties): void
}

module GomXsdTypeRestrictionMinInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMinInclusive {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusive

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMinInclusive extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusive

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusive

    constructor(config?: GomXsdTypeRestrictionMinInclusive.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMinInclusive

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMinInclusive.ConstructorProperties): void
}

module GomXsdTypeRestrictionMaxExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMaxExclusive {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusive

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMaxExclusive extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusive

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusive

    constructor(config?: GomXsdTypeRestrictionMaxExclusive.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMaxExclusive

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMaxExclusive.ConstructorProperties): void
}

module GomXsdTypeRestrictionMaxInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMaxInclusive {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusive

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMaxInclusive extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusive

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusive

    constructor(config?: GomXsdTypeRestrictionMaxInclusive.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMaxInclusive

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMaxInclusive.ConstructorProperties): void
}

module GomXsdTypeRestrictionTotalDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionTotalDigits {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigits

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigits

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionTotalDigits extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigits

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigits

    constructor(config?: GomXsdTypeRestrictionTotalDigits.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionTotalDigits

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionTotalDigits.ConstructorProperties): void
}

module GomXsdTypeRestrictionFractionDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionFractionDigits {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigits

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigits

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionFractionDigits extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigits

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigits

    constructor(config?: GomXsdTypeRestrictionFractionDigits.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionFractionDigits

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionFractionDigits.ConstructorProperties): void
}

module GomXsdTypeRestrictionLength {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionLength {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionLength

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionLength extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionLength

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionLength

    constructor(config?: GomXsdTypeRestrictionLength.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionLength

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionLength.ConstructorProperties): void
}

module GomXsdTypeRestrictionMinLength {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMinLength {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinLength

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMinLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMinLength extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinLength

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMinLength

    constructor(config?: GomXsdTypeRestrictionMinLength.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMinLength

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMinLength.ConstructorProperties): void
}

module GomXsdTypeRestrictionMaxLength {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionMaxLength {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLength

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionMaxLength extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLength

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLength

    constructor(config?: GomXsdTypeRestrictionMaxLength.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionMaxLength

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionMaxLength.ConstructorProperties): void
}

module GomXsdTypeRestrictionEnumeration {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

        value?: string | null
    }

}

interface GomXsdTypeRestrictionEnumeration {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    value: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    getValue(): string
    setValue(value: string): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionEnumeration extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionEnumeration

    constructor(config?: GomXsdTypeRestrictionEnumeration.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionEnumeration

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionEnumeration.ConstructorProperties): void
}

module GomXsdTypeRestrictionWhiteSpace {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

        fixed?: GomXsdTypeRestrictionWhiteSpaceFixed | null
        value?: string | null
    }

}

interface GomXsdTypeRestrictionWhiteSpace {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    fixed: GomXsdTypeRestrictionWhiteSpaceFixed
    value: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    getFixed(): GomXsdTypeRestrictionWhiteSpaceFixed
    setFixed(value: GomXsdTypeRestrictionWhiteSpaceFixed): void
    getValue(): string
    setValue(value: string): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionWhiteSpace extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpace

    constructor(config?: GomXsdTypeRestrictionWhiteSpace.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionWhiteSpace

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionWhiteSpace.ConstructorProperties): void
}

module GomXsdTypeRestrictionWhiteSpaceFixed {

    // Constructor properties interface

    interface ConstructorProperties extends GomBoolean.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionWhiteSpaceFixed {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixed

    __gtype__: number

    // Conflicting properties

    value: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixed

    parentInstance: any
    priv: any

    // Conflicting methods

    validateValue(val: string): boolean

    // Overloads of validateValue

    validateValue(val: string): boolean
    validateValue(val: string): boolean
    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value?: string | null): void

    // Overloads of setValue

    setValue(value?: string | null): void
    setValue(value?: string | null): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixed

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionWhiteSpaceFixed extends GomBoolean {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixed

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixed

    constructor(config?: GomXsdTypeRestrictionWhiteSpaceFixed.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionWhiteSpaceFixed

    // Overloads of new

    static new(): GomBoolean
    _init(config?: GomXsdTypeRestrictionWhiteSpaceFixed.ConstructorProperties): void
}

module GomXsdTypeRestrictionPattern {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionPattern {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionPattern

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionPattern

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionPattern

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionPattern extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionPattern

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionPattern

    constructor(config?: GomXsdTypeRestrictionPattern.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionPattern

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionPattern.ConstructorProperties): void
}

module GomXsdTypeRestrictionAssertion {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionAssertion {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionAssertion

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionAssertion

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionAssertion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionAssertion extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionAssertion

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionAssertion

    constructor(config?: GomXsdTypeRestrictionAssertion.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionAssertion

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionAssertion.ConstructorProperties): void
}

module GomXsdTypeRestrictionExplicitTimezone {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface GomXsdTypeRestrictionExplicitTimezone {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezone

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezone

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezone

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdTypeRestrictionExplicitTimezone extends GomXsdTypeRestrictionDef {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezone

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezone

    constructor(config?: GomXsdTypeRestrictionExplicitTimezone.ConstructorProperties) 
    constructor() 
    static new(): GomXsdTypeRestrictionExplicitTimezone

    // Overloads of new

    static new(): GomXsdTypeRestrictionDef
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdTypeRestrictionExplicitTimezone.ConstructorProperties): void
}

module GomXsdComplexType {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdComplexType

        abstract?: boolean | null
        block?: string | null
        final?: string | null
        mixed?: boolean | null
        name?: string | null
        default_attributes_apply?: boolean | null
        content_type?: GomXsdBaseContent | null
    }

}

interface GomXsdComplexType {

    // Own properties of GXml-0.14.GXml.GomXsdComplexType

    abstract: boolean
    block: string | null
    final: string | null
    mixed: boolean
    name: string | null
    defaultAttributesApply: boolean
    contentType: GomXsdBaseContent
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdComplexType

    parentInstance: any
    priv: any
    typeAttributes: GomXsdList
    groupAttributes: GomXsdList

    // Owm methods of GXml-0.14.GXml.GomXsdComplexType

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string
    setName(value: string): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): GomXsdBaseContent
    setContentType(value: GomXsdBaseContent): void
    getTypeAttributes(): GomXsdList
    getGroupAttributes(): GomXsdList

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdComplexType

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::mixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mixed", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-attributes-apply", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdComplexType extends GomXsdBaseType {

    // Own properties of GXml-0.14.GXml.GomXsdComplexType

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdComplexType

    constructor(config?: GomXsdComplexType.ConstructorProperties) 
    constructor() 
    static new(): GomXsdComplexType

    // Overloads of new

    static new(): GomXsdBaseType
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdComplexType.ConstructorProperties): void
}

module GomXsdExtension {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdExtension

        base?: string | null
    }

}

interface GomXsdExtension {

    // Own properties of GXml-0.14.GXml.GomXsdExtension

    base: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdExtension

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdExtension

    getBase(): string
    setBase(value: string): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdExtension

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdExtension extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdExtension

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdExtension

    constructor(config?: GomXsdExtension.ConstructorProperties) 
    constructor() 
    static new(): GomXsdExtension

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdExtension.ConstructorProperties): void
}

module GomXsdElement {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdElement

        abstract?: boolean | null
        block?: string | null
        "default"?: string | null
        final?: string | null
        fixed?: string | null
        form?: string | null
        max_occurs?: string | null
        min_occurs?: string | null
        name?: string | null
        nillable?: boolean | null
        ref?: string | null
        substitution_group?: DomTokenList | null
        target_namespace?: string | null
        object_type?: string | null
        anotation?: GomXsdAnnotation | null
        simple_type?: GomXsdSimpleType | null
        complex_type?: GomXsdComplexType | null
    }

}

interface GomXsdElement {

    // Own properties of GXml-0.14.GXml.GomXsdElement

    abstract: boolean
    block: string | null
    "default": string | null
    final: string | null
    fixed: string | null
    form: string | null
    maxOccurs: string | null
    minOccurs: string | null
    name: string | null
    nillable: boolean
    // Has conflict: ref: string | null
    substitutionGroup: DomTokenList
    targetNamespace: string | null
    objectType: string | null
    anotation: GomXsdAnnotation
    simpleType: GomXsdSimpleType
    complexType: GomXsdComplexType
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdElement

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdElement

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string
    setBlock(value: string): void
    getDefault(): string
    setDefault(value: string): void
    getFinal(): string
    setFinal(value: string): void
    getFixed(): string
    setFixed(value: string): void
    getForm(): string
    setForm(value: string): void
    getMaxOccurs(): string
    setMaxOccurs(value: string): void
    getMinOccurs(): string
    setMinOccurs(value: string): void
    getName(): string
    setName(value: string): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string
    setRef(value: string): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string
    setTargetNamespace(value: string): void
    getObjectType(): string
    setObjectType(value: string): void
    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void
    getSimpleType(): GomXsdSimpleType
    setSimpleType(value: GomXsdSimpleType): void
    getComplexType(): GomXsdComplexType
    setComplexType(value: GomXsdComplexType): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdElement

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::default", callback: (...args: any[]) => void): number
    on(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::max-occurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-occurs", ...args: any[]): void
    connect(sigName: "notify::min-occurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::min-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::min-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::min-occurs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::nillable", callback: (...args: any[]) => void): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nillable", ...args: any[]): void
    connect(sigName: "notify::ref", callback: (...args: any[]) => void): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ref", ...args: any[]): void
    connect(sigName: "notify::substitution-group", callback: (...args: any[]) => void): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::substitution-group", ...args: any[]): void
    connect(sigName: "notify::target-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target-namespace", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::complex-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdElement extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdElement

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdElement

    constructor(config?: GomXsdElement.ConstructorProperties) 
    constructor() 
    static new(): GomXsdElement

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdElement.ConstructorProperties): void
}

module GomXsdAnnotation {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {
    }

}

interface GomXsdAnnotation {

    // Own properties of GXml-0.14.GXml.GomXsdAnnotation

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdAnnotation

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdAnnotation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdAnnotation extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdAnnotation

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdAnnotation

    constructor(config?: GomXsdAnnotation.ConstructorProperties) 
    constructor() 
    static new(): GomXsdAnnotation

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdAnnotation.ConstructorProperties): void
}

module GomXsdBaseType {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdBaseType

        anotation?: GomXsdAnnotation | null
    }

}

interface GomXsdBaseType {

    // Own properties of GXml-0.14.GXml.GomXsdBaseType

    anotation: GomXsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdBaseType

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdBaseType

    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdBaseType

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdBaseType extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdBaseType

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdBaseType

    constructor(config?: GomXsdBaseType.ConstructorProperties) 
    constructor() 
    static new(): GomXsdBaseType

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdBaseType.ConstructorProperties): void
}

module GomXsdBaseContent {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdBaseContent

        anotation?: GomXsdAnnotation | null
    }

}

interface GomXsdBaseContent {

    // Own properties of GXml-0.14.GXml.GomXsdBaseContent

    anotation: GomXsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdBaseContent

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdBaseContent

    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdBaseContent

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdBaseContent extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdBaseContent

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdBaseContent

    constructor(config?: GomXsdBaseContent.ConstructorProperties) 
    constructor() 
    static new(): GomXsdBaseContent

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdBaseContent.ConstructorProperties): void
}

module GomXsdSimpleContent {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseContent.ConstructorProperties {
    }

}

interface GomXsdSimpleContent {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdSimpleContent

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdSimpleContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdSimpleContent extends GomXsdBaseContent {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleContent

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdSimpleContent

    constructor(config?: GomXsdSimpleContent.ConstructorProperties) 
    constructor() 
    static new(): GomXsdSimpleContent

    // Overloads of new

    static new(): GomXsdBaseContent
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdSimpleContent.ConstructorProperties): void
}

module GomXsdComplexContent {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseContent.ConstructorProperties {
    }

}

interface GomXsdComplexContent {

    // Own properties of GXml-0.14.GXml.GomXsdComplexContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdComplexContent

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdComplexContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdComplexContent extends GomXsdBaseContent {

    // Own properties of GXml-0.14.GXml.GomXsdComplexContent

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdComplexContent

    constructor(config?: GomXsdComplexContent.ConstructorProperties) 
    constructor() 
    static new(): GomXsdComplexContent

    // Overloads of new

    static new(): GomXsdBaseContent
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdComplexContent.ConstructorProperties): void
}

module GomXsdOpenContent {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseContent.ConstructorProperties {
    }

}

interface GomXsdOpenContent {

    // Own properties of GXml-0.14.GXml.GomXsdOpenContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdOpenContent

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdOpenContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdOpenContent extends GomXsdBaseContent {

    // Own properties of GXml-0.14.GXml.GomXsdOpenContent

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdOpenContent

    constructor(config?: GomXsdOpenContent.ConstructorProperties) 
    constructor() 
    static new(): GomXsdOpenContent

    // Overloads of new

    static new(): GomXsdBaseContent
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdOpenContent.ConstructorProperties): void
}

module GomXsdBaseAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.14.GXml.GomXsdBaseAttribute

        anotation?: GomXsdAnnotation | null
    }

}

interface GomXsdBaseAttribute {

    // Own properties of GXml-0.14.GXml.GomXsdBaseAttribute

    anotation: GomXsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdBaseAttribute

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdBaseAttribute

    getAnotation(): GomXsdAnnotation
    setAnotation(value: GomXsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdBaseAttribute

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdBaseAttribute extends GomElement {

    // Own properties of GXml-0.14.GXml.GomXsdBaseAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdBaseAttribute

    constructor(config?: GomXsdBaseAttribute.ConstructorProperties) 
    constructor() 
    static new(): GomXsdBaseAttribute

    // Overloads of new

    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdBaseAttribute.ConstructorProperties): void
}

module GomXsdAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseAttribute.ConstructorProperties {
    }

}

interface GomXsdAttribute {

    // Own properties of GXml-0.14.GXml.GomXsdAttribute

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdAttribute

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdAttribute extends GomXsdBaseAttribute {

    // Own properties of GXml-0.14.GXml.GomXsdAttribute

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdAttribute

    constructor(config?: GomXsdAttribute.ConstructorProperties) 
    constructor() 
    static new(): GomXsdAttribute

    // Overloads of new

    static new(): GomXsdBaseAttribute
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdAttribute.ConstructorProperties): void
}

module GomXsdAttributeGroup {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdBaseAttribute.ConstructorProperties {
    }

}

interface GomXsdAttributeGroup {

    // Own properties of GXml-0.14.GXml.GomXsdAttributeGroup

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.14.GXml.GomXsdAttributeGroup

    parentInstance: any
    priv: any

    // Conflicting methods

    lookupPrefix(nspace?: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace?: string | null): string | null
    lookupPrefix(nspace?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix?: string | null): string | null
    lookupNamespaceUri(prefix?: string | null): string | null
    getAttribute(name: string): string | null
    getAttribute(name: string): string | null

    // Overloads of getAttribute

    getAttribute(name: string): string | null
    setAttribute(name: string, value: string): void
    setAttribute(name: string, val: string): boolean

    // Overloads of setAttribute

    setAttribute(name: string, value: string): void
    removeAttribute(name: string): void
    removeAttribute(name: string): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string): void

    // Class property signals of GXml-0.14.GXml.GomXsdAttributeGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdAttributeGroup extends GomXsdBaseAttribute {

    // Own properties of GXml-0.14.GXml.GomXsdAttributeGroup

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdAttributeGroup

    constructor(config?: GomXsdAttributeGroup.ConstructorProperties) 
    constructor() 
    static new(): GomXsdAttributeGroup

    // Overloads of new

    static new(): GomXsdBaseAttribute
    static new(): GomElement
    static new(): GomNode
    _init(config?: GomXsdAttributeGroup.ConstructorProperties): void
}

module GomXsdList {

    // Constructor properties interface

    interface ConstructorProperties extends GomArrayList.ConstructorProperties {
    }

}

interface GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdList

    parentInstance: any
    priv: any

    // Owm methods of GXml-0.14.GXml.GomXsdList

    remove(index: number): void
    indexOf(element: DomElement): number
    getLength(): number

    // Overloads of getLength

    getLength(): number

    // Conflicting methods

    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdList extends GomArrayList {

    // Own properties of GXml-0.14.GXml.GomXsdList

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdList

    constructor(config?: GomXsdList.ConstructorProperties) 
    constructor() 
    static new(): GomXsdList

    // Overloads of new

    static new(): GomArrayList
    _init(config?: GomXsdList.ConstructorProperties): void
}

module GomXsdListElements {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdList.ConstructorProperties {
    }

}

interface GomXsdListElements {

    // Own properties of GXml-0.14.GXml.GomXsdListElements

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdListElements

    parentInstance: any
    priv: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdListElements

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdListElements extends GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdListElements

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdListElements

    constructor(config?: GomXsdListElements.ConstructorProperties) 
    constructor() 
    static new(): GomXsdListElements

    // Overloads of new

    static new(): GomXsdList
    static new(): GomArrayList
    _init(config?: GomXsdListElements.ConstructorProperties): void
}

module GomXsdListSimpleTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdList.ConstructorProperties {
    }

}

interface GomXsdListSimpleTypes {

    // Own properties of GXml-0.14.GXml.GomXsdListSimpleTypes

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdListSimpleTypes

    parentInstance: any
    priv: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdListSimpleTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdListSimpleTypes extends GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdListSimpleTypes

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdListSimpleTypes

    constructor(config?: GomXsdListSimpleTypes.ConstructorProperties) 
    constructor() 
    static new(): GomXsdListSimpleTypes

    // Overloads of new

    static new(): GomXsdList
    static new(): GomArrayList
    _init(config?: GomXsdListSimpleTypes.ConstructorProperties): void
}

module GomXsdListComplexTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdList.ConstructorProperties {
    }

}

interface GomXsdListComplexTypes {

    // Own properties of GXml-0.14.GXml.GomXsdListComplexTypes

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdListComplexTypes

    parentInstance: any
    priv: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdListComplexTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdListComplexTypes extends GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdListComplexTypes

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdListComplexTypes

    constructor(config?: GomXsdListComplexTypes.ConstructorProperties) 
    constructor() 
    static new(): GomXsdListComplexTypes

    // Overloads of new

    static new(): GomXsdList
    static new(): GomArrayList
    _init(config?: GomXsdListComplexTypes.ConstructorProperties): void
}

module GomXsdListTypeRestrictionEnumerations {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdList.ConstructorProperties {
    }

}

interface GomXsdListTypeRestrictionEnumerations {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerations

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerations

    parentInstance: any
    priv: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerations

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdListTypeRestrictionEnumerations extends GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerations

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerations

    constructor(config?: GomXsdListTypeRestrictionEnumerations.ConstructorProperties) 
    constructor() 
    static new(): GomXsdListTypeRestrictionEnumerations

    // Overloads of new

    static new(): GomXsdList
    static new(): GomArrayList
    _init(config?: GomXsdListTypeRestrictionEnumerations.ConstructorProperties): void
}

module GomXsdListTypeRestrictionWhiteSpaces {

    // Constructor properties interface

    interface ConstructorProperties extends GomXsdList.ConstructorProperties {
    }

}

interface GomXsdListTypeRestrictionWhiteSpaces {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpaces

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    itemsName: any

    // Own fields of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpaces

    parentInstance: any
    priv: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    search(): void
    search(): void
    append(node: DomElement): void
    append(node: DomElement): void
    initialize(itemsType: GObject.GType): void
    initialize(t: GObject.GType): void
    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    getNodesIndex(): GLib.Queue
    getNodesIndex(): GLib.Queue
    getElement(): GomElement
    getElement(): GomElement
    setElement(value: GomElement): void
    setElement(value: GomElement): void
    getItemsName(): string
    getItemsName(): string
    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void

    // Class property signals of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpaces

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GomXsdListTypeRestrictionWhiteSpaces extends GomXsdList {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpaces

    static name: string

    // Constructors of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpaces

    constructor(config?: GomXsdListTypeRestrictionWhiteSpaces.ConstructorProperties) 
    constructor() 
    static new(): GomXsdListTypeRestrictionWhiteSpaces

    // Overloads of new

    static new(): GomXsdList
    static new(): GomArrayList
    _init(config?: GomXsdListTypeRestrictionWhiteSpaces.ConstructorProperties): void
}

interface ElementListClass {

    // Own fields of GXml-0.14.GXml.ElementListClass

    parentClass: Gee.ArrayListClass
}

abstract class ElementListClass {

    // Own properties of GXml-0.14.GXml.ElementListClass

    static name: string
}

interface ElementListPrivate {
}

class ElementListPrivate {

    // Own properties of GXml-0.14.GXml.ElementListPrivate

    static name: string
}

interface NodeListClass {

    // Own fields of GXml-0.14.GXml.NodeListClass

    parentClass: Gee.ArrayListClass
}

abstract class NodeListClass {

    // Own properties of GXml-0.14.GXml.NodeListClass

    static name: string
}

interface NodeListPrivate {
}

class NodeListPrivate {

    // Own properties of GXml-0.14.GXml.NodeListPrivate

    static name: string
}

interface SerializableBoolClass {

    // Own fields of GXml-0.14.GXml.SerializableBoolClass

    parentClass: GObject.ObjectClass
}

abstract class SerializableBoolClass {

    // Own properties of GXml-0.14.GXml.SerializableBoolClass

    static name: string
}

interface SerializableBoolPrivate {
}

class SerializableBoolPrivate {

    // Own properties of GXml-0.14.GXml.SerializableBoolPrivate

    static name: string
}

interface SerializableDoubleClass {

    // Own fields of GXml-0.14.GXml.SerializableDoubleClass

    parentClass: GObject.ObjectClass
}

abstract class SerializableDoubleClass {

    // Own properties of GXml-0.14.GXml.SerializableDoubleClass

    static name: string
}

interface SerializableDoublePrivate {
}

class SerializableDoublePrivate {

    // Own properties of GXml-0.14.GXml.SerializableDoublePrivate

    static name: string
}

interface SerializableFloatClass {

    // Own fields of GXml-0.14.GXml.SerializableFloatClass

    parentClass: SerializableDoubleClass
}

abstract class SerializableFloatClass {

    // Own properties of GXml-0.14.GXml.SerializableFloatClass

    static name: string
}

interface SerializableFloatPrivate {
}

class SerializableFloatPrivate {

    // Own properties of GXml-0.14.GXml.SerializableFloatPrivate

    static name: string
}

interface SerializableEnumClass {

    // Own fields of GXml-0.14.GXml.SerializableEnumClass

    parentClass: GObject.ObjectClass
}

abstract class SerializableEnumClass {

    // Own properties of GXml-0.14.GXml.SerializableEnumClass

    static name: string
}

interface SerializableEnumPrivate {
}

class SerializableEnumPrivate {

    // Own properties of GXml-0.14.GXml.SerializableEnumPrivate

    static name: string
}

interface SerializableIntClass {

    // Own fields of GXml-0.14.GXml.SerializableIntClass

    parentClass: SerializableDoubleClass
}

abstract class SerializableIntClass {

    // Own properties of GXml-0.14.GXml.SerializableIntClass

    static name: string
}

interface SerializableIntPrivate {
}

class SerializableIntPrivate {

    // Own properties of GXml-0.14.GXml.SerializableIntPrivate

    static name: string
}

interface SerializableValueListClass {

    // Own fields of GXml-0.14.GXml.SerializableValueListClass

    parentClass: GObject.ObjectClass
    getValues: (self: SerializableValueList) => Gee.List
    addValues: (self: SerializableValueList, vals: string[]) => void
    getValueAt: (self: SerializableValueList, index: number) => string | null
    selectValueAt: (self: SerializableValueList, index: number) => void
    getValuesArray: (self: SerializableValueList) => string[]
    isValue: (self: SerializableValueList) => boolean
}

abstract class SerializableValueListClass {

    // Own properties of GXml-0.14.GXml.SerializableValueListClass

    static name: string
}

interface SerializableValueListPrivate {
}

class SerializableValueListPrivate {

    // Own properties of GXml-0.14.GXml.SerializableValueListPrivate

    static name: string
}

interface Enumeration {
}

class Enumeration {

    // Own properties of GXml-0.14.GXml.Enumeration

    static name: string

    // Constructors of GXml-0.14.GXml.Enumeration

    constructor() 
    static new(): Enumeration
    static getNick(enumeration: GObject.GType, val: number): string | null
    static getNickCamelcase(enumeration: GObject.GType, val: number): string | null
    static getString(enumeration: GObject.GType, val: number, useNick: boolean, camelcase: boolean): string | null
    static parse(enumeration: GObject.GType, val: string): GObject.EnumValue | null
    static toArray(enumeration: GObject.GType): GObject.EnumValue[]
    static parseInteger(enumeration: GObject.GType, val: number): GObject.EnumValue | null
    static toStringArray(enumeration: GObject.GType): string[]
}

interface SerializableObjectModelClass {

    // Own fields of GXml-0.14.GXml.SerializableObjectModelClass

    parentClass: GObject.ObjectClass
    getEnableUnknownSerializableProperty: (self: SerializableObjectModel) => boolean
    serializeUseXmlNodeValue: (self: SerializableObjectModel) => boolean
    propertyUseNick: (self: SerializableObjectModel) => boolean
    setDefaultNamespace: (self: SerializableObjectModel, node: Node) => boolean
    nodeName: (self: SerializableObjectModel) => string | null
    findPropertySpec: (self: SerializableObjectModel, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableObjectModel) => GObject.ParamSpec[]
    serialize: (self: SerializableObjectModel, node: Node) => Node | null
    serializeProperty: (self: SerializableObjectModel, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableObjectModel, node: Node) => boolean
    deserializeProperty: (self: SerializableObjectModel, propertyNode: Node) => boolean
    toString: (self: SerializableObjectModel) => string | null
}

abstract class SerializableObjectModelClass {

    // Own properties of GXml-0.14.GXml.SerializableObjectModelClass

    static name: string
}

interface SerializableObjectModelPrivate {
}

class SerializableObjectModelPrivate {

    // Own properties of GXml-0.14.GXml.SerializableObjectModelPrivate

    static name: string
}

interface SerializableTreeMapClass {

    // Own fields of GXml-0.14.GXml.SerializableTreeMapClass

    parentClass: Gee.TreeMapClass
    deserializeProceed: (self: SerializableTreeMap) => boolean
    deserialized: (self: SerializableTreeMap) => boolean
    deserializeNode: (self: SerializableTreeMap, node: Node) => boolean
    deserializeChildren: (self: SerializableTreeMap) => boolean
    setDefaultNamespace: (self: SerializableTreeMap, node: Node) => boolean
    serializeUseXmlNodeValue: (self: SerializableTreeMap) => boolean
    propertyUseNick: (self: SerializableTreeMap) => boolean
    nodeName: (self: SerializableTreeMap) => string | null
    findPropertySpec: (self: SerializableTreeMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableTreeMap) => GObject.ParamSpec[]
    serialize: (self: SerializableTreeMap, node: Node) => Node | null
    serializeProperty: (self: SerializableTreeMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableTreeMap, node: Node) => boolean
    deserializeProperty: (self: SerializableTreeMap, propertyNode: Node) => boolean
}

abstract class SerializableTreeMapClass {

    // Own properties of GXml-0.14.GXml.SerializableTreeMapClass

    static name: string
}

interface SerializableTreeMapPrivate {
}

class SerializableTreeMapPrivate {

    // Own properties of GXml-0.14.GXml.SerializableTreeMapPrivate

    static name: string
}

interface SerializableHashMapClass {

    // Own fields of GXml-0.14.GXml.SerializableHashMapClass

    parentClass: Gee.HashMapClass
    deserializeProceed: (self: SerializableHashMap) => boolean
    deserialized: (self: SerializableHashMap) => boolean
    deserializeNode: (self: SerializableHashMap, node: Node) => boolean
    deserializeChildren: (self: SerializableHashMap) => boolean
    setDefaultNamespace: (self: SerializableHashMap, node: Node) => boolean
    getEnableUnknownSerializableProperty: (self: SerializableHashMap) => boolean
    serializeUseXmlNodeValue: (self: SerializableHashMap) => boolean
    propertyUseNick: (self: SerializableHashMap) => boolean
    nodeName: (self: SerializableHashMap) => string | null
    findPropertySpec: (self: SerializableHashMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableHashMap) => GObject.ParamSpec[]
    serialize: (self: SerializableHashMap, node: Node) => Node | null
    serializeProperty: (self: SerializableHashMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableHashMap, node: Node) => boolean
    deserializeProperty: (self: SerializableHashMap, propertyNode: Node) => boolean
}

abstract class SerializableHashMapClass {

    // Own properties of GXml-0.14.GXml.SerializableHashMapClass

    static name: string
}

interface SerializableHashMapPrivate {
}

class SerializableHashMapPrivate {

    // Own properties of GXml-0.14.GXml.SerializableHashMapPrivate

    static name: string
}

interface SerializableDualKeyMapClass {

    // Own fields of GXml-0.14.GXml.SerializableDualKeyMapClass

    parentClass: GObject.ObjectClass
    deserializeProceed: (self: SerializableDualKeyMap) => boolean
    deserialized: (self: SerializableDualKeyMap) => boolean
    deserializeNode: (self: SerializableDualKeyMap, node: Node) => boolean
    deserializeChildren: (self: SerializableDualKeyMap) => boolean
    setDefaultNamespace: (self: SerializableDualKeyMap, node: Node) => boolean
    getEnableUnknownSerializableProperty: (self: SerializableDualKeyMap) => boolean
    serializeUseXmlNodeValue: (self: SerializableDualKeyMap) => boolean
    propertyUseNick: (self: SerializableDualKeyMap) => boolean
    nodeName: (self: SerializableDualKeyMap) => string | null
    findPropertySpec: (self: SerializableDualKeyMap, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableDualKeyMap) => GObject.ParamSpec[]
    serialize: (self: SerializableDualKeyMap, node: Node) => Node | null
    serializeProperty: (self: SerializableDualKeyMap, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableDualKeyMap, node: Node) => boolean
    deserializeProperty: (self: SerializableDualKeyMap, propertyNode: Node) => boolean
}

abstract class SerializableDualKeyMapClass {

    // Own properties of GXml-0.14.GXml.SerializableDualKeyMapClass

    static name: string
}

interface SerializableDualKeyMapPrivate {
}

class SerializableDualKeyMapPrivate {

    // Own properties of GXml-0.14.GXml.SerializableDualKeyMapPrivate

    static name: string
}

interface SerializableArrayListClass {

    // Own fields of GXml-0.14.GXml.SerializableArrayListClass

    parentClass: Gee.ArrayListClass
    deserializeProceed: (self: SerializableArrayList) => boolean
    deserialized: (self: SerializableArrayList) => boolean
    deserializeNode: (self: SerializableArrayList, node: Node) => boolean
    deserializeChildren: (self: SerializableArrayList) => boolean
    setDefaultNamespace: (self: SerializableArrayList, node: Node) => boolean
    serializeUseXmlNodeValue: (self: SerializableArrayList) => boolean
    propertyUseNick: (self: SerializableArrayList) => boolean
    nodeName: (self: SerializableArrayList) => string | null
    findPropertySpec: (self: SerializableArrayList, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: SerializableArrayList) => GObject.ParamSpec[]
    serialize: (self: SerializableArrayList, node: Node) => Node | null
    serializeProperty: (self: SerializableArrayList, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: SerializableArrayList, node: Node) => boolean
    deserializeProperty: (self: SerializableArrayList, propertyNode: Node) => boolean
}

abstract class SerializableArrayListClass {

    // Own properties of GXml-0.14.GXml.SerializableArrayListClass

    static name: string
}

interface SerializableArrayListPrivate {
}

class SerializableArrayListPrivate {

    // Own properties of GXml-0.14.GXml.SerializableArrayListPrivate

    static name: string
}

interface SerializableContainerClass {

    // Own fields of GXml-0.14.GXml.SerializableContainerClass

    parentClass: SerializableObjectModelClass
    initContainers: (self: SerializableContainer) => void
}

abstract class SerializableContainerClass {

    // Own properties of GXml-0.14.GXml.SerializableContainerClass

    static name: string
}

interface SerializableContainerPrivate {
}

class SerializableContainerPrivate {

    // Own properties of GXml-0.14.GXml.SerializableContainerPrivate

    static name: string
}

interface TAttributeClass {

    // Own fields of GXml-0.14.GXml.TAttributeClass

    parentClass: TNodeClass
}

abstract class TAttributeClass {

    // Own properties of GXml-0.14.GXml.TAttributeClass

    static name: string
}

interface TAttributePrivate {
}

class TAttributePrivate {

    // Own properties of GXml-0.14.GXml.TAttributePrivate

    static name: string
}

interface TCommentClass {

    // Own fields of GXml-0.14.GXml.TCommentClass

    parentClass: TNodeClass
}

abstract class TCommentClass {

    // Own properties of GXml-0.14.GXml.TCommentClass

    static name: string
}

interface TCommentPrivate {
}

class TCommentPrivate {

    // Own properties of GXml-0.14.GXml.TCommentPrivate

    static name: string
}

interface TCDATAClass {

    // Own fields of GXml-0.14.GXml.TCDATAClass

    parentClass: TNodeClass
}

abstract class TCDATAClass {

    // Own properties of GXml-0.14.GXml.TCDATAClass

    static name: string
}

interface TCDATAPrivate {
}

class TCDATAPrivate {

    // Own properties of GXml-0.14.GXml.TCDATAPrivate

    static name: string
}

interface TDocumentClass {

    // Own fields of GXml-0.14.GXml.TDocumentClass

    parentClass: TNodeClass
}

abstract class TDocumentClass {

    // Own properties of GXml-0.14.GXml.TDocumentClass

    static name: string
}

interface TDocumentPrivate {
}

class TDocumentPrivate {

    // Own properties of GXml-0.14.GXml.TDocumentPrivate

    static name: string
}

interface TElementClass {

    // Own fields of GXml-0.14.GXml.TElementClass

    parentClass: TNodeClass
}

abstract class TElementClass {

    // Own properties of GXml-0.14.GXml.TElementClass

    static name: string
}

interface TElementPrivate {
}

class TElementPrivate {

    // Own properties of GXml-0.14.GXml.TElementPrivate

    static name: string
}

interface TNamespaceClass {

    // Own fields of GXml-0.14.GXml.TNamespaceClass

    parentClass: TNodeClass
}

abstract class TNamespaceClass {

    // Own properties of GXml-0.14.GXml.TNamespaceClass

    static name: string
}

interface TNamespacePrivate {
}

class TNamespacePrivate {

    // Own properties of GXml-0.14.GXml.TNamespacePrivate

    static name: string
}

interface TNodeClass {

    // Own fields of GXml-0.14.GXml.TNodeClass

    parentClass: GObject.ObjectClass
    setNamespace: (self: TNode, uri: string, prefix?: string | null) => boolean
    toString: (self: TNode) => string | null
    setParent: (self: TNode, node: Node) => void
}

abstract class TNodeClass {

    // Own properties of GXml-0.14.GXml.TNodeClass

    static name: string
}

interface TNodePrivate {
}

class TNodePrivate {

    // Own properties of GXml-0.14.GXml.TNodePrivate

    static name: string
}

interface TNodeTChildrenListClass {

    // Own fields of GXml-0.14.GXml.TNodeTChildrenListClass

    parentClass: Gee.AbstractBidirListClass
}

abstract class TNodeTChildrenListClass {

    // Own properties of GXml-0.14.GXml.TNodeTChildrenListClass

    static name: string
}

interface TNodeTChildrenListPrivate {
}

class TNodeTChildrenListPrivate {

    // Own properties of GXml-0.14.GXml.TNodeTChildrenListPrivate

    static name: string
}

interface TProcessingInstructionClass {

    // Own fields of GXml-0.14.GXml.TProcessingInstructionClass

    parentClass: TNodeClass
}

abstract class TProcessingInstructionClass {

    // Own properties of GXml-0.14.GXml.TProcessingInstructionClass

    static name: string
}

interface TProcessingInstructionPrivate {
}

class TProcessingInstructionPrivate {

    // Own properties of GXml-0.14.GXml.TProcessingInstructionPrivate

    static name: string
}

interface TTextClass {

    // Own fields of GXml-0.14.GXml.TTextClass

    parentClass: TNodeClass
}

abstract class TTextClass {

    // Own properties of GXml-0.14.GXml.TTextClass

    static name: string
}

interface TTextPrivate {
}

class TTextPrivate {

    // Own properties of GXml-0.14.GXml.TTextPrivate

    static name: string
}

interface HtmlDocumentClass {

    // Own fields of GXml-0.14.GXml.HtmlDocumentClass

    parentClass: GDocumentClass
}

abstract class HtmlDocumentClass {

    // Own properties of GXml-0.14.GXml.HtmlDocumentClass

    static name: string
}

interface HtmlDocumentPrivate {
}

class HtmlDocumentPrivate {

    // Own properties of GXml-0.14.GXml.HtmlDocumentPrivate

    static name: string
}

interface GAttributeClass {

    // Own fields of GXml-0.14.GXml.GAttributeClass

    parentClass: GNodeClass
}

abstract class GAttributeClass {

    // Own properties of GXml-0.14.GXml.GAttributeClass

    static name: string
}

interface GAttributePrivate {
}

class GAttributePrivate {

    // Own properties of GXml-0.14.GXml.GAttributePrivate

    static name: string
}

interface GCommentClass {

    // Own fields of GXml-0.14.GXml.GCommentClass

    parentClass: GCharacterDataClass
}

abstract class GCommentClass {

    // Own properties of GXml-0.14.GXml.GCommentClass

    static name: string
}

interface GCommentPrivate {
}

class GCommentPrivate {

    // Own properties of GXml-0.14.GXml.GCommentPrivate

    static name: string
}

interface GCharacterDataClass {

    // Own fields of GXml-0.14.GXml.GCharacterDataClass

    parentClass: GNonDocumentChildNodeClass
}

abstract class GCharacterDataClass {

    // Own properties of GXml-0.14.GXml.GCharacterDataClass

    static name: string
}

interface GCharacterDataPrivate {
}

class GCharacterDataPrivate {

    // Own properties of GXml-0.14.GXml.GCharacterDataPrivate

    static name: string
}

interface GChildNodeClass {

    // Own fields of GXml-0.14.GXml.GChildNodeClass

    parentClass: GNodeClass
}

abstract class GChildNodeClass {

    // Own properties of GXml-0.14.GXml.GChildNodeClass

    static name: string
}

interface GChildNodePrivate {
}

class GChildNodePrivate {

    // Own properties of GXml-0.14.GXml.GChildNodePrivate

    static name: string
}

interface GNonDocumentChildNodeClass {

    // Own fields of GXml-0.14.GXml.GNonDocumentChildNodeClass

    parentClass: GChildNodeClass
}

abstract class GNonDocumentChildNodeClass {

    // Own properties of GXml-0.14.GXml.GNonDocumentChildNodeClass

    static name: string
}

interface GNonDocumentChildNodePrivate {
}

class GNonDocumentChildNodePrivate {

    // Own properties of GXml-0.14.GXml.GNonDocumentChildNodePrivate

    static name: string
}

interface GCDATAClass {

    // Own fields of GXml-0.14.GXml.GCDATAClass

    parentClass: GNodeClass
}

abstract class GCDATAClass {

    // Own properties of GXml-0.14.GXml.GCDATAClass

    static name: string
}

interface GCDATAPrivate {
}

class GCDATAPrivate {

    // Own properties of GXml-0.14.GXml.GCDATAPrivate

    static name: string
}

interface GDocumentClass {

    // Own fields of GXml-0.14.GXml.GDocumentClass

    parentClass: GNodeClass
    save: (self: GDocument, cancellable?: Gio.Cancellable | null) => boolean
    saveAs: (self: GDocument, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
}

abstract class GDocumentClass {

    // Own properties of GXml-0.14.GXml.GDocumentClass

    static name: string
}

interface GDocumentPrivate {
}

class GDocumentPrivate {

    // Own properties of GXml-0.14.GXml.GDocumentPrivate

    static name: string
}

interface GImplementationClass {

    // Own fields of GXml-0.14.GXml.GImplementationClass

    parentClass: GObject.ObjectClass
}

abstract class GImplementationClass {

    // Own properties of GXml-0.14.GXml.GImplementationClass

    static name: string
}

interface GImplementationPrivate {
}

class GImplementationPrivate {

    // Own properties of GXml-0.14.GXml.GImplementationPrivate

    static name: string
}

interface GDocumentTypeClass {

    // Own fields of GXml-0.14.GXml.GDocumentTypeClass

    parentClass: GChildNodeClass
}

abstract class GDocumentTypeClass {

    // Own properties of GXml-0.14.GXml.GDocumentTypeClass

    static name: string
}

interface GDocumentTypePrivate {
}

class GDocumentTypePrivate {

    // Own properties of GXml-0.14.GXml.GDocumentTypePrivate

    static name: string
}

interface GDocumentFragmentClass {

    // Own fields of GXml-0.14.GXml.GDocumentFragmentClass

    parentClass: GDocumentClass
}

abstract class GDocumentFragmentClass {

    // Own properties of GXml-0.14.GXml.GDocumentFragmentClass

    static name: string
}

interface GDocumentFragmentPrivate {
}

class GDocumentFragmentPrivate {

    // Own properties of GXml-0.14.GXml.GDocumentFragmentPrivate

    static name: string
}

interface GDomNodeIteratorClass {

    // Own fields of GXml-0.14.GXml.GDomNodeIteratorClass

    parentClass: GObject.ObjectClass
}

abstract class GDomNodeIteratorClass {

    // Own properties of GXml-0.14.GXml.GDomNodeIteratorClass

    static name: string
}

interface GDomNodeIteratorPrivate {
}

class GDomNodeIteratorPrivate {

    // Own properties of GXml-0.14.GXml.GDomNodeIteratorPrivate

    static name: string
}

interface GDomTreeWalkerClass {

    // Own fields of GXml-0.14.GXml.GDomTreeWalkerClass

    parentClass: GObject.ObjectClass
}

abstract class GDomTreeWalkerClass {

    // Own properties of GXml-0.14.GXml.GDomTreeWalkerClass

    static name: string
}

interface GDomTreeWalkerPrivate {
}

class GDomTreeWalkerPrivate {

    // Own properties of GXml-0.14.GXml.GDomTreeWalkerPrivate

    static name: string
}

interface GDomTokenListClass {

    // Own fields of GXml-0.14.GXml.GDomTokenListClass

    parentClass: Gee.ArrayListClass
}

abstract class GDomTokenListClass {

    // Own properties of GXml-0.14.GXml.GDomTokenListClass

    static name: string
}

interface GDomTokenListPrivate {
}

class GDomTokenListPrivate {

    // Own properties of GXml-0.14.GXml.GDomTokenListPrivate

    static name: string
}

interface GDomSettableTokenListClass {

    // Own fields of GXml-0.14.GXml.GDomSettableTokenListClass

    parentClass: GDomTokenListClass
}

abstract class GDomSettableTokenListClass {

    // Own properties of GXml-0.14.GXml.GDomSettableTokenListClass

    static name: string
}

interface GDomSettableTokenListPrivate {
}

class GDomSettableTokenListPrivate {

    // Own properties of GXml-0.14.GXml.GDomSettableTokenListPrivate

    static name: string
}

interface GDomHTMLCollectionClass {

    // Own fields of GXml-0.14.GXml.GDomHTMLCollectionClass

    parentClass: Gee.ArrayListClass
}

abstract class GDomHTMLCollectionClass {

    // Own properties of GXml-0.14.GXml.GDomHTMLCollectionClass

    static name: string
}

interface GDomHTMLCollectionPrivate {
}

class GDomHTMLCollectionPrivate {

    // Own properties of GXml-0.14.GXml.GDomHTMLCollectionPrivate

    static name: string
}

interface GDomEventClass {

    // Own fields of GXml-0.14.GXml.GDomEventClass

    parentClass: GObject.ObjectClass
}

abstract class GDomEventClass {

    // Own properties of GXml-0.14.GXml.GDomEventClass

    static name: string
}

interface GDomEventPrivate {
}

class GDomEventPrivate {

    // Own properties of GXml-0.14.GXml.GDomEventPrivate

    static name: string
}

interface GDomCustomEventClass {

    // Own fields of GXml-0.14.GXml.GDomCustomEventClass

    parentClass: GDomEventClass
}

abstract class GDomCustomEventClass {

    // Own properties of GXml-0.14.GXml.GDomCustomEventClass

    static name: string
}

interface GDomCustomEventPrivate {
}

class GDomCustomEventPrivate {

    // Own properties of GXml-0.14.GXml.GDomCustomEventPrivate

    static name: string
}

interface GDomRangeClass {

    // Own fields of GXml-0.14.GXml.GDomRangeClass

    parentClass: GObject.ObjectClass
}

abstract class GDomRangeClass {

    // Own properties of GXml-0.14.GXml.GDomRangeClass

    static name: string
}

interface GDomRangePrivate {
}

class GDomRangePrivate {

    // Own properties of GXml-0.14.GXml.GDomRangePrivate

    static name: string
}

interface GElementClass {

    // Own fields of GXml-0.14.GXml.GElementClass

    parentClass: GNonDocumentChildNodeClass
}

abstract class GElementClass {

    // Own properties of GXml-0.14.GXml.GElementClass

    static name: string
}

interface GElementPrivate {
}

class GElementPrivate {

    // Own properties of GXml-0.14.GXml.GElementPrivate

    static name: string
}

interface GNamespaceClass {

    // Own fields of GXml-0.14.GXml.GNamespaceClass

    parentClass: GObject.ObjectClass
}

abstract class GNamespaceClass {

    // Own properties of GXml-0.14.GXml.GNamespaceClass

    static name: string
}

interface GNamespacePrivate {
}

class GNamespacePrivate {

    // Own properties of GXml-0.14.GXml.GNamespacePrivate

    static name: string
}

interface GNodeClass {

    // Own fields of GXml-0.14.GXml.GNodeClass

    parentClass: GObject.ObjectClass
    setNamespace: (self: GNode, uri: string, prefix?: string | null) => boolean
    toString: (self: GNode) => string | null
}

abstract class GNodeClass {

    // Own properties of GXml-0.14.GXml.GNodeClass

    static name: string
}

interface GNodePrivate {
}

class GNodePrivate {

    // Own properties of GXml-0.14.GXml.GNodePrivate

    static name: string
}

interface GProcessingInstructionClass {

    // Own fields of GXml-0.14.GXml.GProcessingInstructionClass

    parentClass: GCharacterDataClass
}

abstract class GProcessingInstructionClass {

    // Own properties of GXml-0.14.GXml.GProcessingInstructionClass

    static name: string
}

interface GProcessingInstructionPrivate {
}

class GProcessingInstructionPrivate {

    // Own properties of GXml-0.14.GXml.GProcessingInstructionPrivate

    static name: string
}

interface GTextClass {

    // Own fields of GXml-0.14.GXml.GTextClass

    parentClass: GCharacterDataClass
}

abstract class GTextClass {

    // Own properties of GXml-0.14.GXml.GTextClass

    static name: string
}

interface GTextPrivate {
}

class GTextPrivate {

    // Own properties of GXml-0.14.GXml.GTextPrivate

    static name: string
}

interface GHashMapAttrClass {

    // Own fields of GXml-0.14.GXml.GHashMapAttrClass

    parentClass: Gee.AbstractMapClass
}

abstract class GHashMapAttrClass {

    // Own properties of GXml-0.14.GXml.GHashMapAttrClass

    static name: string
}

interface GHashMapAttrPrivate {
}

class GHashMapAttrPrivate {

    // Own properties of GXml-0.14.GXml.GHashMapAttrPrivate

    static name: string
}

interface GHashMapAttrEntryClass {

    // Own fields of GXml-0.14.GXml.GHashMapAttrEntryClass

    parentClass: Gee.MapEntryClass
}

abstract class GHashMapAttrEntryClass {

    // Own properties of GXml-0.14.GXml.GHashMapAttrEntryClass

    static name: string
}

interface GHashMapAttrEntryPrivate {
}

class GHashMapAttrEntryPrivate {

    // Own properties of GXml-0.14.GXml.GHashMapAttrEntryPrivate

    static name: string
}

interface GHashMapAttrIteratorClass {

    // Own fields of GXml-0.14.GXml.GHashMapAttrIteratorClass

    parentClass: GObject.ObjectClass
}

abstract class GHashMapAttrIteratorClass {

    // Own properties of GXml-0.14.GXml.GHashMapAttrIteratorClass

    static name: string
}

interface GHashMapAttrIteratorPrivate {
}

class GHashMapAttrIteratorPrivate {

    // Own properties of GXml-0.14.GXml.GHashMapAttrIteratorPrivate

    static name: string
}

interface GListChildrenClass {

    // Own fields of GXml-0.14.GXml.GListChildrenClass

    parentClass: Gee.AbstractBidirListClass
}

abstract class GListChildrenClass {

    // Own properties of GXml-0.14.GXml.GListChildrenClass

    static name: string
}

interface GListChildrenPrivate {
}

class GListChildrenPrivate {

    // Own properties of GXml-0.14.GXml.GListChildrenPrivate

    static name: string
}

interface GListChildrenIteratorClass {

    // Own fields of GXml-0.14.GXml.GListChildrenIteratorClass

    parentClass: GObject.ObjectClass
}

abstract class GListChildrenIteratorClass {

    // Own properties of GXml-0.14.GXml.GListChildrenIteratorClass

    static name: string
}

interface GListChildrenIteratorPrivate {
}

class GListChildrenIteratorPrivate {

    // Own properties of GXml-0.14.GXml.GListChildrenIteratorPrivate

    static name: string
}

interface GListNamespacesClass {

    // Own fields of GXml-0.14.GXml.GListNamespacesClass

    parentClass: Gee.AbstractListClass
}

abstract class GListNamespacesClass {

    // Own properties of GXml-0.14.GXml.GListNamespacesClass

    static name: string
}

interface GListNamespacesPrivate {
}

class GListNamespacesPrivate {

    // Own properties of GXml-0.14.GXml.GListNamespacesPrivate

    static name: string
}

interface GListNamespacesIteratorClass {

    // Own fields of GXml-0.14.GXml.GListNamespacesIteratorClass

    parentClass: GObject.ObjectClass
}

abstract class GListNamespacesIteratorClass {

    // Own properties of GXml-0.14.GXml.GListNamespacesIteratorClass

    static name: string
}

interface GListNamespacesIteratorPrivate {
}

class GListNamespacesIteratorPrivate {

    // Own properties of GXml-0.14.GXml.GListNamespacesIteratorPrivate

    static name: string
}

interface DomNodeFilterClass {

    // Own fields of GXml-0.14.GXml.DomNodeFilterClass

    parentClass: GObject.ObjectClass
}

abstract class DomNodeFilterClass {

    // Own properties of GXml-0.14.GXml.DomNodeFilterClass

    static name: string
}

interface DomNodeFilterPrivate {
}

class DomNodeFilterPrivate {

    // Own properties of GXml-0.14.GXml.DomNodeFilterPrivate

    static name: string
}

interface DomElementListClass {

    // Own fields of GXml-0.14.GXml.DomElementListClass

    parentClass: Gee.ArrayListClass
}

abstract class DomElementListClass {

    // Own properties of GXml-0.14.GXml.DomElementListClass

    static name: string
}

interface DomElementListPrivate {
}

class DomElementListPrivate {

    // Own properties of GXml-0.14.GXml.DomElementListPrivate

    static name: string
}

interface DomEventInitClass {

    // Own fields of GXml-0.14.GXml.DomEventInitClass

    parentClass: GObject.ObjectClass
}

abstract class DomEventInitClass {

    // Own properties of GXml-0.14.GXml.DomEventInitClass

    static name: string
}

interface DomEventInitPrivate {
}

class DomEventInitPrivate {

    // Own properties of GXml-0.14.GXml.DomEventInitPrivate

    static name: string
}

interface DomCustomEventInitClass {

    // Own fields of GXml-0.14.GXml.DomCustomEventInitClass

    parentClass: DomEventInitClass
}

abstract class DomCustomEventInitClass {

    // Own properties of GXml-0.14.GXml.DomCustomEventInitClass

    static name: string
}

interface DomCustomEventInitPrivate {
}

class DomCustomEventInitPrivate {

    // Own properties of GXml-0.14.GXml.DomCustomEventInitPrivate

    static name: string
}

interface DomTimeStampClass {

    // Own fields of GXml-0.14.GXml.DomTimeStampClass

    parentClass: GObject.ObjectClass
}

abstract class DomTimeStampClass {

    // Own properties of GXml-0.14.GXml.DomTimeStampClass

    static name: string
}

interface DomTimeStampPrivate {
}

class DomTimeStampPrivate {

    // Own properties of GXml-0.14.GXml.DomTimeStampPrivate

    static name: string
}

interface DomMutationObserverInitClass {

    // Own fields of GXml-0.14.GXml.DomMutationObserverInitClass

    parentClass: GObject.ObjectClass
}

abstract class DomMutationObserverInitClass {

    // Own properties of GXml-0.14.GXml.DomMutationObserverInitClass

    static name: string
}

interface DomMutationObserverInitPrivate {
}

class DomMutationObserverInitPrivate {

    // Own properties of GXml-0.14.GXml.DomMutationObserverInitPrivate

    static name: string
}

interface DomErrorNameClass {

    // Own fields of GXml-0.14.GXml.DomErrorNameClass

    parentClass: GObject.ObjectClass
}

abstract class DomErrorNameClass {

    // Own properties of GXml-0.14.GXml.DomErrorNameClass

    static name: string
}

interface DomErrorNamePrivate {
}

class DomErrorNamePrivate {

    // Own properties of GXml-0.14.GXml.DomErrorNamePrivate

    static name: string
}

interface GXPathObjectClass {

    // Own fields of GXml-0.14.GXml.GXPathObjectClass

    parentClass: GObject.ObjectClass
}

abstract class GXPathObjectClass {

    // Own properties of GXml-0.14.GXml.GXPathObjectClass

    static name: string
}

interface GXPathObjectPrivate {
}

class GXPathObjectPrivate {

    // Own properties of GXml-0.14.GXml.GXPathObjectPrivate

    static name: string
}

interface GomDocumentClass {

    // Own fields of GXml-0.14.GXml.GomDocumentClass

    parentClass: GomNodeClass
}

abstract class GomDocumentClass {

    // Own properties of GXml-0.14.GXml.GomDocumentClass

    static name: string
}

interface GomDocumentPrivate {
}

class GomDocumentPrivate {

    // Own properties of GXml-0.14.GXml.GomDocumentPrivate

    static name: string
}

interface GomImplementationClass {

    // Own fields of GXml-0.14.GXml.GomImplementationClass

    parentClass: GObject.ObjectClass
}

abstract class GomImplementationClass {

    // Own properties of GXml-0.14.GXml.GomImplementationClass

    static name: string
}

interface GomImplementationPrivate {
}

class GomImplementationPrivate {

    // Own properties of GXml-0.14.GXml.GomImplementationPrivate

    static name: string
}

interface GomDocumentTypeClass {

    // Own fields of GXml-0.14.GXml.GomDocumentTypeClass

    parentClass: GomNodeClass
}

abstract class GomDocumentTypeClass {

    // Own properties of GXml-0.14.GXml.GomDocumentTypeClass

    static name: string
}

interface GomDocumentTypePrivate {
}

class GomDocumentTypePrivate {

    // Own properties of GXml-0.14.GXml.GomDocumentTypePrivate

    static name: string
}

interface GomDocumentFragmentClass {

    // Own fields of GXml-0.14.GXml.GomDocumentFragmentClass

    parentClass: GomNodeClass
}

abstract class GomDocumentFragmentClass {

    // Own properties of GXml-0.14.GXml.GomDocumentFragmentClass

    static name: string
}

interface GomDocumentFragmentPrivate {
}

class GomDocumentFragmentPrivate {

    // Own properties of GXml-0.14.GXml.GomDocumentFragmentPrivate

    static name: string
}

interface GomElementClass {

    // Own fields of GXml-0.14.GXml.GomElementClass

    parentClass: GomNodeClass
}

abstract class GomElementClass {

    // Own properties of GXml-0.14.GXml.GomElementClass

    static name: string
}

interface GomElementPrivate {
}

class GomElementPrivate {

    // Own properties of GXml-0.14.GXml.GomElementPrivate

    static name: string
}

interface GomElementAttributesClass {

    // Own fields of GXml-0.14.GXml.GomElementAttributesClass

    parentClass: Gee.HashMapClass
}

abstract class GomElementAttributesClass {

    // Own properties of GXml-0.14.GXml.GomElementAttributesClass

    static name: string
}

interface GomElementAttributesPrivate {
}

class GomElementAttributesPrivate {

    // Own properties of GXml-0.14.GXml.GomElementAttributesPrivate

    static name: string
}

interface GomAttrClass {

    // Own fields of GXml-0.14.GXml.GomAttrClass

    parentClass: GomNodeClass
}

abstract class GomAttrClass {

    // Own properties of GXml-0.14.GXml.GomAttrClass

    static name: string
}

interface GomAttrPrivate {
}

class GomAttrPrivate {

    // Own properties of GXml-0.14.GXml.GomAttrPrivate

    static name: string
}

interface GomNodeClass {

    // Own fields of GXml-0.14.GXml.GomNodeClass

    parentClass: GObject.ObjectClass
}

abstract class GomNodeClass {

    // Own properties of GXml-0.14.GXml.GomNodeClass

    static name: string
}

interface GomNodePrivate {
}

class GomNodePrivate {

    // Own properties of GXml-0.14.GXml.GomNodePrivate

    static name: string
}

interface GomNodeListClass {

    // Own fields of GXml-0.14.GXml.GomNodeListClass

    parentClass: Gee.ArrayListClass
}

abstract class GomNodeListClass {

    // Own properties of GXml-0.14.GXml.GomNodeListClass

    static name: string
}

interface GomNodeListPrivate {
}

class GomNodeListPrivate {

    // Own properties of GXml-0.14.GXml.GomNodeListPrivate

    static name: string
}

interface GomCharacterDataClass {

    // Own fields of GXml-0.14.GXml.GomCharacterDataClass

    parentClass: GomNodeClass
}

abstract class GomCharacterDataClass {

    // Own properties of GXml-0.14.GXml.GomCharacterDataClass

    static name: string
}

interface GomCharacterDataPrivate {
}

class GomCharacterDataPrivate {

    // Own properties of GXml-0.14.GXml.GomCharacterDataPrivate

    static name: string
}

interface GomTextClass {

    // Own fields of GXml-0.14.GXml.GomTextClass

    parentClass: GomCharacterDataClass
}

abstract class GomTextClass {

    // Own properties of GXml-0.14.GXml.GomTextClass

    static name: string
}

interface GomTextPrivate {
}

class GomTextPrivate {

    // Own properties of GXml-0.14.GXml.GomTextPrivate

    static name: string
}

interface GomProcessingInstructionClass {

    // Own fields of GXml-0.14.GXml.GomProcessingInstructionClass

    parentClass: GomCharacterDataClass
}

abstract class GomProcessingInstructionClass {

    // Own properties of GXml-0.14.GXml.GomProcessingInstructionClass

    static name: string
}

interface GomProcessingInstructionPrivate {
}

class GomProcessingInstructionPrivate {

    // Own properties of GXml-0.14.GXml.GomProcessingInstructionPrivate

    static name: string
}

interface GomCommentClass {

    // Own fields of GXml-0.14.GXml.GomCommentClass

    parentClass: GomCharacterDataClass
}

abstract class GomCommentClass {

    // Own properties of GXml-0.14.GXml.GomCommentClass

    static name: string
}

interface GomCommentPrivate {
}

class GomCommentPrivate {

    // Own properties of GXml-0.14.GXml.GomCommentPrivate

    static name: string
}

interface BaseCollectionClass {

    // Own fields of GXml-0.14.GXml.BaseCollectionClass

    parentClass: GObject.ObjectClass
    validateAppend: (self: BaseCollection, index: number, element: DomElement) => boolean
}

abstract class BaseCollectionClass {

    // Own properties of GXml-0.14.GXml.BaseCollectionClass

    static name: string
}

interface BaseCollectionPrivate {
}

class BaseCollectionPrivate {

    // Own properties of GXml-0.14.GXml.BaseCollectionPrivate

    static name: string
}

interface GomArrayListClass {

    // Own fields of GXml-0.14.GXml.GomArrayListClass

    parentClass: BaseCollectionClass
}

abstract class GomArrayListClass {

    // Own properties of GXml-0.14.GXml.GomArrayListClass

    static name: string
}

interface GomArrayListPrivate {
}

class GomArrayListPrivate {

    // Own properties of GXml-0.14.GXml.GomArrayListPrivate

    static name: string
}

interface GomHashMapClass {

    // Own fields of GXml-0.14.GXml.GomHashMapClass

    parentClass: BaseCollectionClass
}

abstract class GomHashMapClass {

    // Own properties of GXml-0.14.GXml.GomHashMapClass

    static name: string
}

interface GomHashMapPrivate {
}

class GomHashMapPrivate {

    // Own properties of GXml-0.14.GXml.GomHashMapPrivate

    static name: string
}

interface GomHashPairedMapClass {

    // Own fields of GXml-0.14.GXml.GomHashPairedMapClass

    parentClass: BaseCollectionClass
}

abstract class GomHashPairedMapClass {

    // Own properties of GXml-0.14.GXml.GomHashPairedMapClass

    static name: string
}

interface GomHashPairedMapPrivate {
}

class GomHashPairedMapPrivate {

    // Own properties of GXml-0.14.GXml.GomHashPairedMapPrivate

    static name: string
}

interface GomHashThreeMapClass {

    // Own fields of GXml-0.14.GXml.GomHashThreeMapClass

    parentClass: BaseCollectionClass
}

abstract class GomHashThreeMapClass {

    // Own properties of GXml-0.14.GXml.GomHashThreeMapClass

    static name: string
}

interface GomHashThreeMapPrivate {
}

class GomHashThreeMapPrivate {

    // Own properties of GXml-0.14.GXml.GomHashThreeMapPrivate

    static name: string
}

interface GomBasePropertyClass {

    // Own fields of GXml-0.14.GXml.GomBasePropertyClass

    parentClass: GObject.ObjectClass
    validateValue: (self: GomBaseProperty, val: string) => boolean
}

abstract class GomBasePropertyClass {

    // Own properties of GXml-0.14.GXml.GomBasePropertyClass

    static name: string
}

interface GomBasePropertyPrivate {
}

class GomBasePropertyPrivate {

    // Own properties of GXml-0.14.GXml.GomBasePropertyPrivate

    static name: string
}

interface GomStringClass {

    // Own fields of GXml-0.14.GXml.GomStringClass

    parentClass: GomBasePropertyClass
}

abstract class GomStringClass {

    // Own properties of GXml-0.14.GXml.GomStringClass

    static name: string
}

interface GomStringPrivate {
}

class GomStringPrivate {

    // Own properties of GXml-0.14.GXml.GomStringPrivate

    static name: string
}

interface GomArrayStringClass {

    // Own fields of GXml-0.14.GXml.GomArrayStringClass

    parentClass: GomBasePropertyClass
}

abstract class GomArrayStringClass {

    // Own properties of GXml-0.14.GXml.GomArrayStringClass

    static name: string
}

interface GomArrayStringPrivate {
}

class GomArrayStringPrivate {

    // Own properties of GXml-0.14.GXml.GomArrayStringPrivate

    static name: string
}

interface GomXsdArrayStringClass {

    // Own fields of GXml-0.14.GXml.GomXsdArrayStringClass

    parentClass: GomArrayStringClass
}

abstract class GomXsdArrayStringClass {

    // Own properties of GXml-0.14.GXml.GomXsdArrayStringClass

    static name: string
}

interface GomXsdArrayStringPrivate {
}

class GomXsdArrayStringPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdArrayStringPrivate

    static name: string
}

interface GomDoubleClass {

    // Own fields of GXml-0.14.GXml.GomDoubleClass

    parentClass: GomBasePropertyClass
}

abstract class GomDoubleClass {

    // Own properties of GXml-0.14.GXml.GomDoubleClass

    static name: string
}

interface GomDoublePrivate {
}

class GomDoublePrivate {

    // Own properties of GXml-0.14.GXml.GomDoublePrivate

    static name: string
}

interface GomFloatClass {

    // Own fields of GXml-0.14.GXml.GomFloatClass

    parentClass: GomDoubleClass
}

abstract class GomFloatClass {

    // Own properties of GXml-0.14.GXml.GomFloatClass

    static name: string
}

interface GomFloatPrivate {
}

class GomFloatPrivate {

    // Own properties of GXml-0.14.GXml.GomFloatPrivate

    static name: string
}

interface GomIntClass {

    // Own fields of GXml-0.14.GXml.GomIntClass

    parentClass: GomBasePropertyClass
}

abstract class GomIntClass {

    // Own properties of GXml-0.14.GXml.GomIntClass

    static name: string
}

interface GomIntPrivate {
}

class GomIntPrivate {

    // Own properties of GXml-0.14.GXml.GomIntPrivate

    static name: string
}

interface GomBooleanClass {

    // Own fields of GXml-0.14.GXml.GomBooleanClass

    parentClass: GomBasePropertyClass
}

abstract class GomBooleanClass {

    // Own properties of GXml-0.14.GXml.GomBooleanClass

    static name: string
}

interface GomBooleanPrivate {
}

class GomBooleanPrivate {

    // Own properties of GXml-0.14.GXml.GomBooleanPrivate

    static name: string
}

interface GomEnumClass {

    // Own fields of GXml-0.14.GXml.GomEnumClass

    parentClass: GomBasePropertyClass
}

abstract class GomEnumClass {

    // Own properties of GXml-0.14.GXml.GomEnumClass

    static name: string
}

interface GomEnumPrivate {
}

class GomEnumPrivate {

    // Own properties of GXml-0.14.GXml.GomEnumPrivate

    static name: string
}

interface GomDateClass {

    // Own fields of GXml-0.14.GXml.GomDateClass

    parentClass: GomBasePropertyClass
}

abstract class GomDateClass {

    // Own properties of GXml-0.14.GXml.GomDateClass

    static name: string
}

interface GomDatePrivate {
}

class GomDatePrivate {

    // Own properties of GXml-0.14.GXml.GomDatePrivate

    static name: string
}

interface GomDateTimeClass {

    // Own fields of GXml-0.14.GXml.GomDateTimeClass

    parentClass: GomBasePropertyClass
}

abstract class GomDateTimeClass {

    // Own properties of GXml-0.14.GXml.GomDateTimeClass

    static name: string
}

interface GomDateTimePrivate {
}

class GomDateTimePrivate {

    // Own properties of GXml-0.14.GXml.GomDateTimePrivate

    static name: string
}

interface XParserClass {

    // Own fields of GXml-0.14.GXml.XParserClass

    parentClass: GObject.ObjectClass
}

abstract class XParserClass {

    // Own properties of GXml-0.14.GXml.XParserClass

    static name: string
}

interface XParserPrivate {
}

class XParserPrivate {

    // Own properties of GXml-0.14.GXml.XParserPrivate

    static name: string
}

interface GomXsdSchemaClass {

    // Own fields of GXml-0.14.GXml.GomXsdSchemaClass

    parentClass: GomElementClass
}

abstract class GomXsdSchemaClass {

    // Own properties of GXml-0.14.GXml.GomXsdSchemaClass

    static name: string
}

interface GomXsdSchemaPrivate {
}

class GomXsdSchemaPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdSchemaPrivate

    static name: string
}

interface GomXsdSimpleTypeClass {

    // Own fields of GXml-0.14.GXml.GomXsdSimpleTypeClass

    parentClass: GomElementClass
}

abstract class GomXsdSimpleTypeClass {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleTypeClass

    static name: string
}

interface GomXsdSimpleTypePrivate {
}

class GomXsdSimpleTypePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleTypePrivate

    static name: string
}

interface GomXsdTypeDefinitionClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeDefinitionClass

    parentClass: GomElementClass
}

abstract class GomXsdTypeDefinitionClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeDefinitionClass

    static name: string
}

interface GomXsdTypeDefinitionPrivate {
}

class GomXsdTypeDefinitionPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeDefinitionPrivate

    static name: string
}

interface GomXsdTypeListClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeListClass

    parentClass: GomXsdTypeDefinitionClass
}

abstract class GomXsdTypeListClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeListClass

    static name: string
}

interface GomXsdTypeListPrivate {
}

class GomXsdTypeListPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeListPrivate

    static name: string
}

interface GomXsdTypeUnionClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeUnionClass

    parentClass: GomXsdTypeDefinitionClass
}

abstract class GomXsdTypeUnionClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeUnionClass

    static name: string
}

interface GomXsdTypeUnionPrivate {
}

class GomXsdTypeUnionPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeUnionPrivate

    static name: string
}

interface GomXsdTypeRestrictionClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionClass

    parentClass: GomXsdTypeDefinitionClass
}

abstract class GomXsdTypeRestrictionClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionClass

    static name: string
}

interface GomXsdTypeRestrictionPrivate {
}

class GomXsdTypeRestrictionPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionPrivate

    static name: string
}

interface GomXsdTypeRestrictionDefClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionDefClass

    parentClass: GomElementClass
}

abstract class GomXsdTypeRestrictionDefClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionDefClass

    static name: string
}

interface GomXsdTypeRestrictionDefPrivate {
}

class GomXsdTypeRestrictionDefPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionDefPrivate

    static name: string
}

interface GomXsdTypeRestrictionMinExclusiveClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusiveClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMinExclusiveClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusiveClass

    static name: string
}

interface GomXsdTypeRestrictionMinExclusivePrivate {
}

class GomXsdTypeRestrictionMinExclusivePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinExclusivePrivate

    static name: string
}

interface GomXsdTypeRestrictionMinInclusiveClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusiveClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMinInclusiveClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusiveClass

    static name: string
}

interface GomXsdTypeRestrictionMinInclusivePrivate {
}

class GomXsdTypeRestrictionMinInclusivePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinInclusivePrivate

    static name: string
}

interface GomXsdTypeRestrictionMaxExclusiveClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusiveClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMaxExclusiveClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusiveClass

    static name: string
}

interface GomXsdTypeRestrictionMaxExclusivePrivate {
}

class GomXsdTypeRestrictionMaxExclusivePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxExclusivePrivate

    static name: string
}

interface GomXsdTypeRestrictionMaxInclusiveClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusiveClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMaxInclusiveClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusiveClass

    static name: string
}

interface GomXsdTypeRestrictionMaxInclusivePrivate {
}

class GomXsdTypeRestrictionMaxInclusivePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxInclusivePrivate

    static name: string
}

interface GomXsdTypeRestrictionTotalDigitsClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigitsClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionTotalDigitsClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigitsClass

    static name: string
}

interface GomXsdTypeRestrictionTotalDigitsPrivate {
}

class GomXsdTypeRestrictionTotalDigitsPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionTotalDigitsPrivate

    static name: string
}

interface GomXsdTypeRestrictionFractionDigitsClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigitsClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionFractionDigitsClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigitsClass

    static name: string
}

interface GomXsdTypeRestrictionFractionDigitsPrivate {
}

class GomXsdTypeRestrictionFractionDigitsPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionFractionDigitsPrivate

    static name: string
}

interface GomXsdTypeRestrictionLengthClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionLengthClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionLengthClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionLengthClass

    static name: string
}

interface GomXsdTypeRestrictionLengthPrivate {
}

class GomXsdTypeRestrictionLengthPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionLengthPrivate

    static name: string
}

interface GomXsdTypeRestrictionMinLengthClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMinLengthClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMinLengthClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinLengthClass

    static name: string
}

interface GomXsdTypeRestrictionMinLengthPrivate {
}

class GomXsdTypeRestrictionMinLengthPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMinLengthPrivate

    static name: string
}

interface GomXsdTypeRestrictionMaxLengthClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLengthClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionMaxLengthClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLengthClass

    static name: string
}

interface GomXsdTypeRestrictionMaxLengthPrivate {
}

class GomXsdTypeRestrictionMaxLengthPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionMaxLengthPrivate

    static name: string
}

interface GomXsdTypeRestrictionEnumerationClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionEnumerationClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionEnumerationClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionEnumerationClass

    static name: string
}

interface GomXsdTypeRestrictionEnumerationPrivate {
}

class GomXsdTypeRestrictionEnumerationPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionEnumerationPrivate

    static name: string
}

interface GomXsdTypeRestrictionWhiteSpaceClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionWhiteSpaceClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceClass

    static name: string
}

interface GomXsdTypeRestrictionWhiteSpacePrivate {
}

class GomXsdTypeRestrictionWhiteSpacePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpacePrivate

    static name: string
}

interface GomXsdTypeRestrictionWhiteSpaceFixedClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixedClass

    parentClass: GomBooleanClass
}

abstract class GomXsdTypeRestrictionWhiteSpaceFixedClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixedClass

    static name: string
}

interface GomXsdTypeRestrictionWhiteSpaceFixedPrivate {
}

class GomXsdTypeRestrictionWhiteSpaceFixedPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionWhiteSpaceFixedPrivate

    static name: string
}

interface GomXsdTypeRestrictionPatternClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionPatternClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionPatternClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionPatternClass

    static name: string
}

interface GomXsdTypeRestrictionPatternPrivate {
}

class GomXsdTypeRestrictionPatternPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionPatternPrivate

    static name: string
}

interface GomXsdTypeRestrictionAssertionClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionAssertionClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionAssertionClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionAssertionClass

    static name: string
}

interface GomXsdTypeRestrictionAssertionPrivate {
}

class GomXsdTypeRestrictionAssertionPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionAssertionPrivate

    static name: string
}

interface GomXsdTypeRestrictionExplicitTimezoneClass {

    // Own fields of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezoneClass

    parentClass: GomXsdTypeRestrictionDefClass
}

abstract class GomXsdTypeRestrictionExplicitTimezoneClass {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezoneClass

    static name: string
}

interface GomXsdTypeRestrictionExplicitTimezonePrivate {
}

class GomXsdTypeRestrictionExplicitTimezonePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdTypeRestrictionExplicitTimezonePrivate

    static name: string
}

interface GomXsdComplexTypeClass {

    // Own fields of GXml-0.14.GXml.GomXsdComplexTypeClass

    parentClass: GomXsdBaseTypeClass
}

abstract class GomXsdComplexTypeClass {

    // Own properties of GXml-0.14.GXml.GomXsdComplexTypeClass

    static name: string
}

interface GomXsdComplexTypePrivate {
}

class GomXsdComplexTypePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdComplexTypePrivate

    static name: string
}

interface GomXsdExtensionClass {

    // Own fields of GXml-0.14.GXml.GomXsdExtensionClass

    parentClass: GomElementClass
}

abstract class GomXsdExtensionClass {

    // Own properties of GXml-0.14.GXml.GomXsdExtensionClass

    static name: string
}

interface GomXsdExtensionPrivate {
}

class GomXsdExtensionPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdExtensionPrivate

    static name: string
}

interface GomXsdElementClass {

    // Own fields of GXml-0.14.GXml.GomXsdElementClass

    parentClass: GomElementClass
}

abstract class GomXsdElementClass {

    // Own properties of GXml-0.14.GXml.GomXsdElementClass

    static name: string
}

interface GomXsdElementPrivate {
}

class GomXsdElementPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdElementPrivate

    static name: string
}

interface GomXsdAnnotationClass {

    // Own fields of GXml-0.14.GXml.GomXsdAnnotationClass

    parentClass: GomElementClass
}

abstract class GomXsdAnnotationClass {

    // Own properties of GXml-0.14.GXml.GomXsdAnnotationClass

    static name: string
}

interface GomXsdAnnotationPrivate {
}

class GomXsdAnnotationPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdAnnotationPrivate

    static name: string
}

interface GomXsdBaseTypeClass {

    // Own fields of GXml-0.14.GXml.GomXsdBaseTypeClass

    parentClass: GomElementClass
}

abstract class GomXsdBaseTypeClass {

    // Own properties of GXml-0.14.GXml.GomXsdBaseTypeClass

    static name: string
}

interface GomXsdBaseTypePrivate {
}

class GomXsdBaseTypePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdBaseTypePrivate

    static name: string
}

interface GomXsdBaseContentClass {

    // Own fields of GXml-0.14.GXml.GomXsdBaseContentClass

    parentClass: GomElementClass
}

abstract class GomXsdBaseContentClass {

    // Own properties of GXml-0.14.GXml.GomXsdBaseContentClass

    static name: string
}

interface GomXsdBaseContentPrivate {
}

class GomXsdBaseContentPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdBaseContentPrivate

    static name: string
}

interface GomXsdSimpleContentClass {

    // Own fields of GXml-0.14.GXml.GomXsdSimpleContentClass

    parentClass: GomXsdBaseContentClass
}

abstract class GomXsdSimpleContentClass {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleContentClass

    static name: string
}

interface GomXsdSimpleContentPrivate {
}

class GomXsdSimpleContentPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdSimpleContentPrivate

    static name: string
}

interface GomXsdComplexContentClass {

    // Own fields of GXml-0.14.GXml.GomXsdComplexContentClass

    parentClass: GomXsdBaseContentClass
}

abstract class GomXsdComplexContentClass {

    // Own properties of GXml-0.14.GXml.GomXsdComplexContentClass

    static name: string
}

interface GomXsdComplexContentPrivate {
}

class GomXsdComplexContentPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdComplexContentPrivate

    static name: string
}

interface GomXsdOpenContentClass {

    // Own fields of GXml-0.14.GXml.GomXsdOpenContentClass

    parentClass: GomXsdBaseContentClass
}

abstract class GomXsdOpenContentClass {

    // Own properties of GXml-0.14.GXml.GomXsdOpenContentClass

    static name: string
}

interface GomXsdOpenContentPrivate {
}

class GomXsdOpenContentPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdOpenContentPrivate

    static name: string
}

interface GomXsdBaseAttributeClass {

    // Own fields of GXml-0.14.GXml.GomXsdBaseAttributeClass

    parentClass: GomElementClass
}

abstract class GomXsdBaseAttributeClass {

    // Own properties of GXml-0.14.GXml.GomXsdBaseAttributeClass

    static name: string
}

interface GomXsdBaseAttributePrivate {
}

class GomXsdBaseAttributePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdBaseAttributePrivate

    static name: string
}

interface GomXsdAttributeClass {

    // Own fields of GXml-0.14.GXml.GomXsdAttributeClass

    parentClass: GomXsdBaseAttributeClass
}

abstract class GomXsdAttributeClass {

    // Own properties of GXml-0.14.GXml.GomXsdAttributeClass

    static name: string
}

interface GomXsdAttributePrivate {
}

class GomXsdAttributePrivate {

    // Own properties of GXml-0.14.GXml.GomXsdAttributePrivate

    static name: string
}

interface GomXsdAttributeGroupClass {

    // Own fields of GXml-0.14.GXml.GomXsdAttributeGroupClass

    parentClass: GomXsdBaseAttributeClass
}

abstract class GomXsdAttributeGroupClass {

    // Own properties of GXml-0.14.GXml.GomXsdAttributeGroupClass

    static name: string
}

interface GomXsdAttributeGroupPrivate {
}

class GomXsdAttributeGroupPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdAttributeGroupPrivate

    static name: string
}

interface GomXsdListClass {

    // Own fields of GXml-0.14.GXml.GomXsdListClass

    parentClass: GomArrayListClass
}

abstract class GomXsdListClass {

    // Own properties of GXml-0.14.GXml.GomXsdListClass

    static name: string
}

interface GomXsdListPrivate {
}

class GomXsdListPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListPrivate

    static name: string
}

interface GomXsdListElementsClass {

    // Own fields of GXml-0.14.GXml.GomXsdListElementsClass

    parentClass: GomXsdListClass
}

abstract class GomXsdListElementsClass {

    // Own properties of GXml-0.14.GXml.GomXsdListElementsClass

    static name: string
}

interface GomXsdListElementsPrivate {
}

class GomXsdListElementsPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListElementsPrivate

    static name: string
}

interface GomXsdListSimpleTypesClass {

    // Own fields of GXml-0.14.GXml.GomXsdListSimpleTypesClass

    parentClass: GomXsdListClass
}

abstract class GomXsdListSimpleTypesClass {

    // Own properties of GXml-0.14.GXml.GomXsdListSimpleTypesClass

    static name: string
}

interface GomXsdListSimpleTypesPrivate {
}

class GomXsdListSimpleTypesPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListSimpleTypesPrivate

    static name: string
}

interface GomXsdListComplexTypesClass {

    // Own fields of GXml-0.14.GXml.GomXsdListComplexTypesClass

    parentClass: GomXsdListClass
}

abstract class GomXsdListComplexTypesClass {

    // Own properties of GXml-0.14.GXml.GomXsdListComplexTypesClass

    static name: string
}

interface GomXsdListComplexTypesPrivate {
}

class GomXsdListComplexTypesPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListComplexTypesPrivate

    static name: string
}

interface GomXsdListTypeRestrictionEnumerationsClass {

    // Own fields of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerationsClass

    parentClass: GomXsdListClass
}

abstract class GomXsdListTypeRestrictionEnumerationsClass {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerationsClass

    static name: string
}

interface GomXsdListTypeRestrictionEnumerationsPrivate {
}

class GomXsdListTypeRestrictionEnumerationsPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionEnumerationsPrivate

    static name: string
}

interface GomXsdListTypeRestrictionWhiteSpacesClass {

    // Own fields of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpacesClass

    parentClass: GomXsdListClass
}

abstract class GomXsdListTypeRestrictionWhiteSpacesClass {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpacesClass

    static name: string
}

interface GomXsdListTypeRestrictionWhiteSpacesPrivate {
}

class GomXsdListTypeRestrictionWhiteSpacesPrivate {

    // Own properties of GXml-0.14.GXml.GomXsdListTypeRestrictionWhiteSpacesPrivate

    static name: string
}

interface AttributeIface {

    // Own fields of GXml-0.14.GXml.AttributeIface

    parentIface: GObject.TypeInterface
    getNamespace: (self: Attribute) => Namespace | null
    setNamespace: (self: Attribute, value?: Namespace | null) => void
    getPrefix: (self: Attribute) => string | null
}

abstract class AttributeIface {

    // Own properties of GXml-0.14.GXml.AttributeIface

    static name: string
}

interface CommentIface {

    // Own fields of GXml-0.14.GXml.CommentIface

    parentIface: GObject.TypeInterface
    getStr: (self: Comment) => string | null
    setStr: (self: Comment, value: string) => void
}

abstract class CommentIface {

    // Own properties of GXml-0.14.GXml.CommentIface

    static name: string
}

interface CDATAIface {

    // Own fields of GXml-0.14.GXml.CDATAIface

    parentIface: GObject.TypeInterface
    getStr: (self: CDATA) => string | null
}

abstract class CDATAIface {

    // Own properties of GXml-0.14.GXml.CDATAIface

    static name: string
}

interface CharacterIface {

    // Own fields of GXml-0.14.GXml.CharacterIface

    parentIface: GObject.TypeInterface
    getStr: (self: Character) => string | null
    setStr: (self: Character, value: string) => void
}

abstract class CharacterIface {

    // Own properties of GXml-0.14.GXml.CharacterIface

    static name: string
}

interface DocumentIface {

    // Own fields of GXml-0.14.GXml.DocumentIface

    parentIface: GObject.TypeInterface
    createElement: (self: Document, name: string) => Node
    createText: (self: Document, text: string) => Node
    createComment: (self: Document, text: string) => Node
    createCdata: (self: Document, text: string) => Node
    createPi: (self: Document, target: string, data: string) => Node
    save: (self: Document, cancellable?: Gio.Cancellable | null) => boolean
    saveAs: (self: Document, f: Gio.File, cancellable?: Gio.Cancellable | null) => boolean
    getIndent: (self: Document) => boolean
    setIndent: (self: Document, value: boolean) => void
    getNsTop: (self: Document) => boolean
    setNsTop: (self: Document, value: boolean) => void
    getPrefixDefaultNs: (self: Document) => boolean
    setPrefixDefaultNs: (self: Document, value: boolean) => void
    getBackup: (self: Document) => boolean
    setBackup: (self: Document, value: boolean) => void
    getRoot: (self: Document) => Node
    getFile: (self: Document) => Gio.File
    setFile: (self: Document, value: Gio.File) => void
}

abstract class DocumentIface {

    // Own properties of GXml-0.14.GXml.DocumentIface

    static name: string
}

interface DocumentTypeIface {

    // Own fields of GXml-0.14.GXml.DocumentTypeIface

    parentIface: GObject.TypeInterface
}

abstract class DocumentTypeIface {

    // Own properties of GXml-0.14.GXml.DocumentTypeIface

    static name: string
}

interface ElementIface {

    // Own fields of GXml-0.14.GXml.ElementIface

    parentIface: GObject.TypeInterface
    normalize: (self: Element) => void
    setAttr: (self: Element, name: string, value: string) => void
    getAttr: (self: Element, name: string) => Node | null
    removeAttr: (self: Element, name: string) => void
    removeNsAttr: (self: Element, name: string, uri: string) => void
    setNsAttr: (self: Element, ns: string, name: string, value: string) => void
    getNsAttr: (self: Element, name: string, uri: string) => Node | null
    getTagName: (self: Element) => string | null
    getContent: (self: Element) => string | null
    setContent: (self: Element, value: string) => void
}

abstract class ElementIface {

    // Own properties of GXml-0.14.GXml.ElementIface

    static name: string
}

interface NamespaceIface {

    // Own fields of GXml-0.14.GXml.NamespaceIface

    parentIface: GObject.TypeInterface
    getUri: (self: Namespace) => string | null
    getPrefix: (self: Namespace) => string | null
}

abstract class NamespaceIface {

    // Own properties of GXml-0.14.GXml.NamespaceIface

    static name: string
}

interface NodeIface {

    // Own fields of GXml-0.14.GXml.NodeIface

    parentIface: GObject.TypeInterface
    get: (self: Node, key: string) => Node | null
    getElementsByPropertyValue: (self: Node, property: string, value: string) => ElementList
    getElementsByName: (self: Node, name: string) => ElementList
    getElementsByNameNs: (self: Node, name: string, ns?: string | null) => ElementList
    toString: (self: Node) => string | null
    setNamespace: (self: Node, uri: string, prefix?: string | null) => boolean
    nsPrefix: (self: Node) => string | null
    nsUri: (self: Node) => string | null
    getNamespaces: (self: Node) => Gee.List
    getChildrenNodes: (self: Node) => Gee.BidirList
    getAttrs: (self: Node) => Gee.Map
    getName: (self: Node) => string | null
    getValue: (self: Node) => string | null
    setValue: (self: Node, value: string) => void
    getTypeNode: (self: Node) => NodeType
    getDocument: (self: Node) => Document
    getParent: (self: Node) => Node
}

abstract class NodeIface {

    // Own properties of GXml-0.14.GXml.NodeIface

    static name: string
}

interface NotationIface {

    // Own fields of GXml-0.14.GXml.NotationIface

    parentIface: GObject.TypeInterface
    getPublicId: (self: Notation) => string | null
    getExternalId: (self: Notation) => string | null
}

abstract class NotationIface {

    // Own properties of GXml-0.14.GXml.NotationIface

    static name: string
}

interface EntityIface {

    // Own fields of GXml-0.14.GXml.EntityIface

    parentIface: GObject.TypeInterface
}

abstract class EntityIface {

    // Own properties of GXml-0.14.GXml.EntityIface

    static name: string
}

interface ProcessingInstructionIface {

    // Own fields of GXml-0.14.GXml.ProcessingInstructionIface

    parentIface: GObject.TypeInterface
    getTarget: (self: ProcessingInstruction) => string | null
    getData: (self: ProcessingInstruction) => string | null
    setData: (self: ProcessingInstruction, value: string) => void
}

abstract class ProcessingInstructionIface {

    // Own properties of GXml-0.14.GXml.ProcessingInstructionIface

    static name: string
}

interface TextIface {

    // Own fields of GXml-0.14.GXml.TextIface

    parentIface: GObject.TypeInterface
    getStr: (self: Text) => string | null
    setStr: (self: Text, value: string) => void
}

abstract class TextIface {

    // Own properties of GXml-0.14.GXml.TextIface

    static name: string
}

interface SerializableIface {

    // Own fields of GXml-0.14.GXml.SerializableIface

    parentIface: GObject.TypeInterface
    getEnableUnknownSerializableProperty: (self: Serializable) => boolean
    setDefaultNamespace: (self: Serializable, node: Node) => boolean
    serializeUseXmlNodeValue: (self: Serializable) => boolean
    nodeName: (self: Serializable) => string | null
    propertyUseNick: (self: Serializable) => boolean
    serialize: (self: Serializable, node: Node) => Node | null
    serializeProperty: (self: Serializable, element: Node, prop: GObject.ParamSpec) => Node | null
    deserialize: (self: Serializable, node: Node) => boolean
    deserializeProperty: (self: Serializable, propertyNode: Node) => boolean
    findPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    defaultFindPropertySpec: (self: Serializable, propertyName: string) => GObject.ParamSpec | null
    listSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    defaultListSerializableProperties: (self: Serializable) => GObject.ParamSpec[]
    getUnknownSerializableProperties: (self: Serializable) => Gee.Map
    getUnknownSerializableNodes: (self: Serializable) => Gee.Collection
    getSerializedXmlNodeValue: (self: Serializable) => string | null
    setSerializedXmlNodeValue: (self: Serializable, value?: string | null) => void
}

abstract class SerializableIface {

    // Own properties of GXml-0.14.GXml.SerializableIface

    static name: string
}

interface SerializablePropertyIface {

    // Own fields of GXml-0.14.GXml.SerializablePropertyIface

    parentIface: GObject.TypeInterface
    getSerializablePropertyValue: (self: SerializableProperty) => string | null
    setSerializablePropertyValue: (self: SerializableProperty, val?: string | null) => void
    deserializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => boolean
    serializeProperty: (self: SerializableProperty, propertyNode: Node, prop: GObject.ParamSpec, nick: boolean) => Node | null
}

abstract class SerializablePropertyIface {

    // Own properties of GXml-0.14.GXml.SerializablePropertyIface

    static name: string
}

interface SerializableMapKeyIface {

    // Own fields of GXml-0.14.GXml.SerializableMapKeyIface

    parentIface: GObject.TypeInterface
    getMapKey: (self: SerializableMapKey) => any | null
}

abstract class SerializableMapKeyIface {

    // Own properties of GXml-0.14.GXml.SerializableMapKeyIface

    static name: string
}

interface SerializableMapDualKeyIface {

    // Own fields of GXml-0.14.GXml.SerializableMapDualKeyIface

    parentIface: GObject.TypeInterface
    getMapPrimaryKey: (self: SerializableMapDualKey) => any | null
    getMapSecondaryKey: (self: SerializableMapDualKey) => any | null
}

abstract class SerializableMapDualKeyIface {

    // Own properties of GXml-0.14.GXml.SerializableMapDualKeyIface

    static name: string
}

interface SerializableCollectionIface {

    // Own fields of GXml-0.14.GXml.SerializableCollectionIface

    parentIface: GObject.TypeInterface
    deserializeProceed: (self: SerializableCollection) => boolean
    deserialized: (self: SerializableCollection) => boolean
    deserializeNode: (self: SerializableCollection, node: Node) => boolean
    deserializeChildren: (self: SerializableCollection) => boolean
    isCollection: (self: SerializableCollection) => boolean
}

abstract class SerializableCollectionIface {

    // Own properties of GXml-0.14.GXml.SerializableCollectionIface

    static name: string
}

interface DomAttrIface {

    // Own fields of GXml-0.14.GXml.DomAttrIface

    parentIface: GObject.TypeInterface
    getNamespaceUri: (self: DomAttr) => string | null
    getPrefix: (self: DomAttr) => string | null
    getLocalName: (self: DomAttr) => string | null
    getName: (self: DomAttr) => string | null
    getValue: (self: DomAttr) => string | null
    setValue: (self: DomAttr, value: string) => void
    getSpecified: (self: DomAttr) => boolean
}

abstract class DomAttrIface {

    // Own properties of GXml-0.14.GXml.DomAttrIface

    static name: string
}

interface DomCharacterDataIface {

    // Own fields of GXml-0.14.GXml.DomCharacterDataIface

    parentIface: GObject.TypeInterface
    substringData: (self: DomCharacterData, offset: number, count: number) => string | null
    appendData: (self: DomCharacterData, data: string) => void
    insertData: (self: DomCharacterData, offset: number, data: string) => void
    deleteData: (self: DomCharacterData, offset: number, count: number) => void
    replaceData: (self: DomCharacterData, offset: number, count: number, data: string) => void
    getData: (self: DomCharacterData) => string | null
    setData: (self: DomCharacterData, value: string) => void
    getLength: (self: DomCharacterData) => number
}

abstract class DomCharacterDataIface {

    // Own properties of GXml-0.14.GXml.DomCharacterDataIface

    static name: string
}

interface DomTextIface {

    // Own fields of GXml-0.14.GXml.DomTextIface

    parentIface: GObject.TypeInterface
    splitText: (self: DomText, offset: number) => DomText
    getWholeText: (self: DomText) => string | null
}

abstract class DomTextIface {

    // Own properties of GXml-0.14.GXml.DomTextIface

    static name: string
}

interface DomProcessingInstructionIface {

    // Own fields of GXml-0.14.GXml.DomProcessingInstructionIface

    parentIface: GObject.TypeInterface
    getTarget: (self: DomProcessingInstruction) => string | null
}

abstract class DomProcessingInstructionIface {

    // Own properties of GXml-0.14.GXml.DomProcessingInstructionIface

    static name: string
}

interface DomCommentIface {

    // Own fields of GXml-0.14.GXml.DomCommentIface

    parentIface: GObject.TypeInterface
}

abstract class DomCommentIface {

    // Own properties of GXml-0.14.GXml.DomCommentIface

    static name: string
}

interface DomNonElementParentNodeIface {

    // Own fields of GXml-0.14.GXml.DomNonElementParentNodeIface

    parentIface: GObject.TypeInterface
    getElementById: (self: DomNonElementParentNode, elementId: string) => DomElement | null
}

abstract class DomNonElementParentNodeIface {

    // Own properties of GXml-0.14.GXml.DomNonElementParentNodeIface

    static name: string
}

interface DomParentNodeIface {

    // Own fields of GXml-0.14.GXml.DomParentNodeIface

    parentIface: GObject.TypeInterface
    querySelector: (self: DomParentNode, selectors: string) => DomElement | null
    querySelectorAll: (self: DomParentNode, selectors: string) => DomNodeList
    getElementsByPropertyValue: (self: DomParentNode, property: string, value: string) => DomElementList
    getChildren: (self: DomParentNode) => DomHTMLCollection
    getFirstElementChild: (self: DomParentNode) => DomElement | null
    getLastElementChild: (self: DomParentNode) => DomElement | null
    getChildElementCount: (self: DomParentNode) => number
}

abstract class DomParentNodeIface {

    // Own properties of GXml-0.14.GXml.DomParentNodeIface

    static name: string
}

interface DomNonDocumentTypeChildNodeIface {

    // Own fields of GXml-0.14.GXml.DomNonDocumentTypeChildNodeIface

    parentIface: GObject.TypeInterface
    getPreviousElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    getNextElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
}

abstract class DomNonDocumentTypeChildNodeIface {

    // Own properties of GXml-0.14.GXml.DomNonDocumentTypeChildNodeIface

    static name: string
}

interface DomChildNodeIface {

    // Own fields of GXml-0.14.GXml.DomChildNodeIface

    parentIface: GObject.TypeInterface
    remove: (self: DomChildNode) => void
}

abstract class DomChildNodeIface {

    // Own properties of GXml-0.14.GXml.DomChildNodeIface

    static name: string
}

interface DomNodeListIface {

    // Own fields of GXml-0.14.GXml.DomNodeListIface

    parentIface: GObject.TypeInterface
    item: (self: DomNodeList, index: number) => DomNode | null
    getLength: (self: DomNodeList) => number
}

abstract class DomNodeListIface {

    // Own properties of GXml-0.14.GXml.DomNodeListIface

    static name: string
}

interface DomHTMLCollectionIface {

    // Own fields of GXml-0.14.GXml.DomHTMLCollectionIface

    parentIface: GObject.TypeInterface
    getElement: (self: DomHTMLCollection, index: number) => DomElement | null
    toArray: (self: DomHTMLCollection) => DomElement[]
    item: (self: DomHTMLCollection, index: number) => DomElement | null
    namedItem: (self: DomHTMLCollection, name: string) => DomElement | null
    getLength: (self: DomHTMLCollection) => number
}

abstract class DomHTMLCollectionIface {

    // Own properties of GXml-0.14.GXml.DomHTMLCollectionIface

    static name: string
}

interface DomNodeIteratorIface {

    // Own fields of GXml-0.14.GXml.DomNodeIteratorIface

    parentIface: GObject.TypeInterface
    nextNode: (self: DomNodeIterator) => DomNode | null
    previousNode: (self: DomNodeIterator) => DomNode | null
    detach: (self: DomNodeIterator) => void
    getRoot: (self: DomNodeIterator) => DomNode
    getReferenceNode: (self: DomNodeIterator) => DomNode
    getPointerBeforeReferenceNode: (self: DomNodeIterator) => boolean
    getWhatToShow: (self: DomNodeIterator) => number
    getFilter: (self: DomNodeIterator) => DomNodeFilter | null
}

abstract class DomNodeIteratorIface {

    // Own properties of GXml-0.14.GXml.DomNodeIteratorIface

    static name: string
}

interface DomTreeWalkerIface {

    // Own fields of GXml-0.14.GXml.DomTreeWalkerIface

    parentIface: GObject.TypeInterface
    parentNode: (self: DomTreeWalker) => DomNode | null
    firstChild: (self: DomTreeWalker) => DomNode | null
    lastChild: (self: DomTreeWalker) => DomNode | null
    previousSibling: (self: DomTreeWalker) => DomNode | null
    nextSibling: (self: DomTreeWalker) => DomNode | null
    previousNode: (self: DomTreeWalker) => DomNode | null
    nextNode: (self: DomTreeWalker) => DomNode | null
    getRoot: (self: DomTreeWalker) => DomNode
    getWhatToShow: (self: DomTreeWalker) => number
    getFilter: (self: DomTreeWalker) => DomNodeFilter | null
    getCurrentNode: (self: DomTreeWalker) => DomNode
}

abstract class DomTreeWalkerIface {

    // Own properties of GXml-0.14.GXml.DomTreeWalkerIface

    static name: string
}

interface DomNamedNodeMapIface {

    // Own fields of GXml-0.14.GXml.DomNamedNodeMapIface

    parentIface: GObject.TypeInterface
    item: (self: DomNamedNodeMap, index: number) => DomNode | null
    getNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    setNamedItem: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    removeNamedItem: (self: DomNamedNodeMap, name: string) => DomNode | null
    removeNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    getNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string, localName: string) => DomNode | null
    setNamedItemNs: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    getLength: (self: DomNamedNodeMap) => number
}

abstract class DomNamedNodeMapIface {

    // Own properties of GXml-0.14.GXml.DomNamedNodeMapIface

    static name: string
}

interface DomTokenListIface {

    // Own fields of GXml-0.14.GXml.DomTokenListIface

    parentIface: GObject.TypeInterface
    item: (self: DomTokenList, index: number) => string | null
    contains: (self: DomTokenList, token: string) => boolean
    add: (self: DomTokenList, tokens: string[]) => void
    remove: (self: DomTokenList, tokens: string[]) => void
    toggle: (self: DomTokenList, token: string, force: boolean, auto: boolean) => boolean
    toString: (self: DomTokenList) => string | null
    getLength: (self: DomTokenList) => number
}

abstract class DomTokenListIface {

    // Own properties of GXml-0.14.GXml.DomTokenListIface

    static name: string
}

interface DomSettableTokenListIface {

    // Own fields of GXml-0.14.GXml.DomSettableTokenListIface

    parentIface: GObject.TypeInterface
    getValue: (self: DomSettableTokenList) => string | null
    setValue: (self: DomSettableTokenList, value: string) => void
}

abstract class DomSettableTokenListIface {

    // Own properties of GXml-0.14.GXml.DomSettableTokenListIface

    static name: string
}

interface DomDocumentIface {

    // Own fields of GXml-0.14.GXml.DomDocumentIface

    parentIface: GObject.TypeInterface
    getElementsByTagName: (self: DomDocument, localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomDocument, namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (self: DomDocument, classNames: string) => DomHTMLCollection
    createElement: (self: DomDocument, localName: string) => DomElement
    createElementNs: (self: DomDocument, namespace: string | null, qualifiedName: string) => DomElement
    createDocumentFragment: (self: DomDocument) => DomDocumentFragment
    createTextNode: (self: DomDocument, data: string) => DomText
    createComment: (self: DomDocument, data: string) => DomComment
    createProcessingInstruction: (self: DomDocument, target: string, data: string) => DomProcessingInstruction
    importNode: (self: DomDocument, node: DomNode, deep: boolean) => DomNode
    adoptNode: (self: DomDocument, node: DomNode) => DomNode
    createEvent: (self: DomDocument, interface: string) => DomEvent
    createRange: (self: DomDocument) => DomRange
    createNodeIterator: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomNodeIterator
    createTreeWalker: (self: DomDocument, root: DomNode, whatToShow: number, filter?: DomNodeFilter | null) => DomTreeWalker
    getImplementation: (self: DomDocument) => DomImplementation
    getUrl: (self: DomDocument) => string
    getDocumentUri: (self: DomDocument) => string
    getOrigin: (self: DomDocument) => string
    getCompatMode: (self: DomDocument) => string
    getCharacterSet: (self: DomDocument) => string
    getContentType: (self: DomDocument) => string
    getDoctype: (self: DomDocument) => DomDocumentType | null
    getDocumentElement: (self: DomDocument) => DomElement | null
}

abstract class DomDocumentIface {

    // Own properties of GXml-0.14.GXml.DomDocumentIface

    static name: string
}

interface DomXMLDocumentIface {

    // Own fields of GXml-0.14.GXml.DomXMLDocumentIface

    parentIface: GObject.TypeInterface
}

abstract class DomXMLDocumentIface {

    // Own properties of GXml-0.14.GXml.DomXMLDocumentIface

    static name: string
}

interface DomImplementationIface {

    // Own fields of GXml-0.14.GXml.DomImplementationIface

    parentIface: GObject.TypeInterface
    createDocumentType: (self: DomImplementation, qualifiedName: string, publicId: string, systemId: string) => DomDocumentType
    createDocument: (self: DomImplementation, nspace?: string | null, qualifiedName?: string | null, doctype?: DomDocumentType | null) => DomXMLDocument
    createHtmlDocument: (self: DomImplementation, title: string) => Document
    hasFeature: (self: DomImplementation) => boolean
}

abstract class DomImplementationIface {

    // Own properties of GXml-0.14.GXml.DomImplementationIface

    static name: string
}

interface DomDocumentFragmentIface {

    // Own fields of GXml-0.14.GXml.DomDocumentFragmentIface

    parentIface: GObject.TypeInterface
}

abstract class DomDocumentFragmentIface {

    // Own properties of GXml-0.14.GXml.DomDocumentFragmentIface

    static name: string
}

interface DomDocumentTypeIface {

    // Own fields of GXml-0.14.GXml.DomDocumentTypeIface

    parentIface: GObject.TypeInterface
    getName: (self: DomDocumentType) => string
    getPublicId: (self: DomDocumentType) => string
    getSystemId: (self: DomDocumentType) => string
}

abstract class DomDocumentTypeIface {

    // Own properties of GXml-0.14.GXml.DomDocumentTypeIface

    static name: string
}

interface DomElementIface {

    // Own fields of GXml-0.14.GXml.DomElementIface

    parentIface: GObject.TypeInterface
    getAttribute: (self: DomElement, name: string) => string | null
    getAttributeNs: (self: DomElement, namespace: string | null, localName: string) => string | null
    setAttribute: (self: DomElement, name: string, value: string) => void
    setAttributeNs: (self: DomElement, namespace: string | null, name: string, value: string) => void
    removeAttribute: (self: DomElement, name: string) => void
    removeAttributeNs: (self: DomElement, namespace: string | null, localName: string) => void
    hasAttribute: (self: DomElement, name: string) => boolean
    hasAttributeNs: (self: DomElement, namespace: string | null, localName: string) => boolean
    getElementsByTagName: (self: DomElement, localName: string) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomElement, namespace: string | null, localName: string) => DomHTMLCollection
    getElementsByClassName: (self: DomElement, classNames: string) => DomHTMLCollection
    getNamespaceUri: (self: DomElement) => string | null
    getPrefix: (self: DomElement) => string | null
    getLocalName: (self: DomElement) => string | null
    getTagName: (self: DomElement) => string | null
    getId: (self: DomElement) => string | null
    setId: (self: DomElement, value?: string | null) => void
    getClassName: (self: DomElement) => string | null
    setClassName: (self: DomElement, value?: string | null) => void
    getClassList: (self: DomElement) => DomTokenList
    getAttributes: (self: DomElement) => DomNamedNodeMap
}

abstract class DomElementIface {

    // Own properties of GXml-0.14.GXml.DomElementIface

    static name: string
}

interface DomEventTargetIface {

    // Own fields of GXml-0.14.GXml.DomEventTargetIface

    parentIface: GObject.TypeInterface
    addEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    removeEventListener: (self: DomEventTarget, type: string, callback: DomEventListener | null, capture: boolean) => void
    dispatchEvent: (self: DomEventTarget, event: DomEvent) => boolean
}

abstract class DomEventTargetIface {

    // Own properties of GXml-0.14.GXml.DomEventTargetIface

    static name: string
}

interface DomEventListenerIface {

    // Own fields of GXml-0.14.GXml.DomEventListenerIface

    parentIface: GObject.TypeInterface
    handleEvent: (self: DomEventListener, event: DomEvent) => void
}

abstract class DomEventListenerIface {

    // Own properties of GXml-0.14.GXml.DomEventListenerIface

    static name: string
}

interface DomEventIface {

    // Own fields of GXml-0.14.GXml.DomEventIface

    parentIface: GObject.TypeInterface
    stopPropagation: (self: DomEvent) => void
    stopImmediatePropagation: (self: DomEvent) => void
    preventDefault: (self: DomEvent) => void
    initEvent: (self: DomEvent, type: string, bubbles: boolean, cancelable: boolean) => void
    getEtype: (self: DomEvent) => string
    getEventTarget: (self: DomEvent) => DomEventTarget | null
    getCurrentTarget: (self: DomEvent) => DomEventTarget | null
    getBubbles: (self: DomEvent) => boolean
    getCancelable: (self: DomEvent) => boolean
    getIsTrusted: (self: DomEvent) => boolean
    getTimeStamp: (self: DomEvent) => DomTimeStamp
    getDefaultPrevented: (self: DomEvent) => boolean
    getEventPhase: (self: DomEvent) => DomEventPhase
}

abstract class DomEventIface {

    // Own properties of GXml-0.14.GXml.DomEventIface

    static name: string
}

interface DomCustomEventIface {

    // Own fields of GXml-0.14.GXml.DomCustomEventIface

    parentIface: GObject.TypeInterface
    initCustomEvent: (self: DomCustomEvent, type: string, bubbles: boolean, cancelable: boolean, detail?: any | null) => void
    getDetail: (self: DomCustomEvent) => any | null
}

abstract class DomCustomEventIface {

    // Own properties of GXml-0.14.GXml.DomCustomEventIface

    static name: string
}

interface DomMutationObserverIface {

    // Own fields of GXml-0.14.GXml.DomMutationObserverIface

    parentIface: GObject.TypeInterface
    observe: (self: DomMutationObserver, target: Node, options: DomMutationObserverInit) => void
    // Has conflict: disconnect: (self: DomMutationObserver) => void
    takeRecords: (self: DomMutationObserver) => Gee.List
}

abstract class DomMutationObserverIface {

    // Own properties of GXml-0.14.GXml.DomMutationObserverIface

    static name: string
}

interface DomMutationRecordIface {

    // Own fields of GXml-0.14.GXml.DomMutationRecordIface

    parentIface: GObject.TypeInterface
    getMtype: (self: DomMutationRecord) => string
    getTarget: (self: DomMutationRecord) => DomNode
    getAddedNodes: (self: DomMutationRecord) => DomNodeList
    setAddedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getRemovedNodes: (self: DomMutationRecord) => DomNodeList
    setRemovedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getPreviousSibling: (self: DomMutationRecord) => DomNode | null
    getNextSibling: (self: DomMutationRecord) => DomNode | null
    getAttributeName: (self: DomMutationRecord) => string | null
    getAttributeNamespace: (self: DomMutationRecord) => string | null
    getOldValue: (self: DomMutationRecord) => string | null
}

abstract class DomMutationRecordIface {

    // Own properties of GXml-0.14.GXml.DomMutationRecordIface

    static name: string
}

interface DomNodeIface {

    // Own fields of GXml-0.14.GXml.DomNodeIface

    parentIface: GObject.TypeInterface
    hasChildNodes: (self: DomNode) => boolean
    normalize: (self: DomNode) => void
    isEqualNode: (self: DomNode, node?: DomNode | null) => boolean
    compareDocumentPosition: (self: DomNode, other: DomNode) => DomNodeDocumentPosition
    contains: (self: DomNode, other?: DomNode | null) => boolean
    lookupPrefix: (self: DomNode, nspace?: string | null) => string | null
    lookupNamespaceUri: (self: DomNode, prefix?: string | null) => string | null
    isDefaultNamespace: (self: DomNode, nspace?: string | null) => boolean
    insertBefore: (self: DomNode, node: DomNode, child?: DomNode | null) => DomNode
    appendChild: (self: DomNode, node: DomNode) => DomNode
    replaceChild: (self: DomNode, node: DomNode, child: DomNode) => DomNode
    removeChild: (self: DomNode, child: DomNode) => DomNode
    cloneNode: (self: DomNode, deep: boolean) => DomNode
    getNodeType: (self: DomNode) => DomNodeNodeType
    getNodeName: (self: DomNode) => string | null
    getBaseUri: (self: DomNode) => string | null
    getOwnerDocument: (self: DomNode) => DomDocument | null
    setOwnerDocument: (self: DomNode, value?: DomDocument | null) => void
    getParentNode: (self: DomNode) => DomNode | null
    getParentElement: (self: DomNode) => DomElement | null
    getChildNodes: (self: DomNode) => DomNodeList
    getFirstChild: (self: DomNode) => DomNode | null
    getLastChild: (self: DomNode) => DomNode | null
    getPreviousSibling: (self: DomNode) => DomNode | null
    getNextSibling: (self: DomNode) => DomNode | null
    getNodeValue: (self: DomNode) => string | null
    setNodeValue: (self: DomNode, value?: string | null) => void
    getTextContent: (self: DomNode) => string | null
    setTextContent: (self: DomNode, value?: string | null) => void
}

abstract class DomNodeIface {

    // Own properties of GXml-0.14.GXml.DomNodeIface

    static name: string
}

interface DomRangeIface {

    // Own fields of GXml-0.14.GXml.DomRangeIface

    parentIface: GObject.TypeInterface
    setStart: (self: DomRange, node: DomNode, offset: number) => void
    setEnd: (self: DomRange, node: DomNode, offset: number) => void
    setStartBefore: (self: DomRange, node: DomNode) => void
    setStartAfter: (self: DomRange, node: DomNode) => void
    setEndBefore: (self: DomRange, node: DomNode) => void
    setEndAfter: (self: DomRange, node: DomNode) => void
    collapse: (self: DomRange, toStart: boolean) => void
    selectNode: (self: DomRange, node: DomNode) => void
    selectNodeContents: (self: DomRange, node: DomNode) => void
    compareBoundaryPoints: (self: DomRange, how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    deleteContents: (self: DomRange) => void
    extractContents: (self: DomRange) => DomDocumentFragment | null
    cloneContents: (self: DomRange) => DomDocumentFragment | null
    insertNode: (self: DomRange, node: DomNode) => void
    surroundContents: (self: DomRange, newParent: DomNode) => void
    cloneRange: (self: DomRange) => DomRange
    detach: (self: DomRange) => void
    isPointInRange: (self: DomRange, node: DomNode, offset: number) => boolean
    comparePoint: (self: DomRange, node: DomNode, offset: number) => number
    intersectsNode: (self: DomRange, node: DomNode) => boolean
    toString: (self: DomRange) => string | null
    getStartContainer: (self: DomRange) => DomNode
    getStartOffset: (self: DomRange) => number
    getEndContainer: (self: DomRange) => DomNode
    getEndOffset: (self: DomRange) => number
    getCollapsed: (self: DomRange) => boolean
    getCommonAncestorContainer: (self: DomRange) => DomNode
}

abstract class DomRangeIface {

    // Own properties of GXml-0.14.GXml.DomRangeIface

    static name: string
}

interface XPathContextIface {

    // Own fields of GXml-0.14.GXml.XPathContextIface

    parentIface: GObject.TypeInterface
    evaluate: (self: XPathContext, expression: string, resolver?: Gee.List | null) => XPathObject
}

abstract class XPathContextIface {

    // Own properties of GXml-0.14.GXml.XPathContextIface

    static name: string
}

interface XPathObjectIface {

    // Own fields of GXml-0.14.GXml.XPathObjectIface

    parentIface: GObject.TypeInterface
    getObjectType: (self: XPathObject) => XPathObjectType
    getBooleanValue: (self: XPathObject) => boolean
    getStringValue: (self: XPathObject) => string
    getNumberValue: (self: XPathObject) => number
    getNodeset: (self: XPathObject) => DomHTMLCollection
}

abstract class XPathObjectIface {

    // Own properties of GXml-0.14.GXml.XPathObjectIface

    static name: string
}

interface GomObjectIface {

    // Own fields of GXml-0.14.GXml.GomObjectIface

    parentIface: GObject.TypeInterface
    getPropertiesList: (self: GomObject) => GObject.ParamSpec[]
    findPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    findObjectPropertyName: (self: GomObject, pname: string) => GObject.ParamSpec | null
    getPropertyElementList: (self: GomObject) => GObject.ParamSpec[]
    getPropertyString: (self: GomObject, prop: GObject.ParamSpec) => string | null
    getAttribute: (self: GomObject, name: string) => string | null
    setAttribute: (self: GomObject, name: string, val: string) => boolean
    getChild: (self: GomObject, name: string) => DomElement | null
    findElements: (self: GomObject, name: string) => DomElementList
    removeAttribute: (self: GomObject, name: string) => boolean
    setInstanceProperty: (self: GomObject, name: string) => boolean
    cleanPropertyElements: (self: GomObject, name: string) => void
}

abstract class GomObjectIface {

    // Own properties of GXml-0.14.GXml.GomObjectIface

    static name: string
}

interface GomCollectionIface {

    // Own fields of GXml-0.14.GXml.GomCollectionIface

    parentIface: GObject.TypeInterface
    search: (self: GomCollection) => void
    getItem: (self: GomCollection, index: number) => DomElement | null
    append: (self: GomCollection, node: DomElement) => void
    initialize: (self: GomCollection, t: GObject.GType) => void
    createItem: (self: GomCollection) => GomElement | null
    validateAppend: (self: GomCollection, index: number, element: DomElement) => boolean
    getNodesIndex: (self: GomCollection) => GLib.Queue
    getElement: (self: GomCollection) => GomElement
    setElement: (self: GomCollection, value: GomElement) => void
    getItemsName: (self: GomCollection) => string
    getItemsType: (self: GomCollection) => GObject.GType
    setItemsType: (self: GomCollection, value: GObject.GType) => void
    getLength: (self: GomCollection) => number
}

abstract class GomCollectionIface {

    // Own properties of GXml-0.14.GXml.GomCollectionIface

    static name: string
}

interface MappeableElementIface {

    // Own fields of GXml-0.14.GXml.MappeableElementIface

    parentIface: GObject.TypeInterface
    getMapKey: (self: MappeableElement) => string | null
}

abstract class MappeableElementIface {

    // Own properties of GXml-0.14.GXml.MappeableElementIface

    static name: string
}

interface MappeableElementPairKeyIface {

    // Own fields of GXml-0.14.GXml.MappeableElementPairKeyIface

    parentIface: GObject.TypeInterface
    getMapPrimaryKey: (self: MappeableElementPairKey) => string | null
    getMapSecondaryKey: (self: MappeableElementPairKey) => string | null
}

abstract class MappeableElementPairKeyIface {

    // Own properties of GXml-0.14.GXml.MappeableElementPairKeyIface

    static name: string
}

interface MappeableElementThreeKeyIface {

    // Own fields of GXml-0.14.GXml.MappeableElementThreeKeyIface

    parentIface: GObject.TypeInterface
    getMapPkey: (self: MappeableElementThreeKey) => string | null
    getMapSkey: (self: MappeableElementThreeKey) => string | null
    getMapTkey: (self: MappeableElementThreeKey) => string | null
}

abstract class MappeableElementThreeKeyIface {

    // Own properties of GXml-0.14.GXml.MappeableElementThreeKeyIface

    static name: string
}

interface GomPropertyIface {

    // Own fields of GXml-0.14.GXml.GomPropertyIface

    parentIface: GObject.TypeInterface
    validateValue: (self: GomProperty, val: string) => boolean
    getValue: (self: GomProperty) => string | null
    setValue: (self: GomProperty, value?: string | null) => void
}

abstract class GomPropertyIface {

    // Own properties of GXml-0.14.GXml.GomPropertyIface

    static name: string
}

interface ParserIface {

    // Own fields of GXml-0.14.GXml.ParserIface

    parentIface: GObject.TypeInterface
    writeFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    writeString: (self: Parser) => string | null
    writeStream: (self: Parser, stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => void
    readFile: (self: Parser, file: Gio.File, cancellable?: Gio.Cancellable | null) => void
    readStream: (self: Parser, stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => void
    readString: (self: Parser, str: string, cancellable?: Gio.Cancellable | null) => void
    getBackup: (self: Parser) => boolean
    setBackup: (self: Parser, value: boolean) => void
    getIndent: (self: Parser) => boolean
    setIndent: (self: Parser, value: boolean) => void
    getNode: (self: Parser) => DomNode
}

abstract class ParserIface {

    // Own properties of GXml-0.14.GXml.ParserIface

    static name: string
}

interface IXsdSchemaIface {

    // Own fields of GXml-0.14.GXml.IXsdSchemaIface

    parentIface: GObject.TypeInterface
    getElementDefinitions: (self: IXsdSchema) => IXsdListElements
    setElementDefinitions: (self: IXsdSchema, value: IXsdListElements) => void
    getSimpleTypeDefinitions: (self: IXsdSchema) => IXsdListSimpleTypes
    setSimpleTypeDefinitions: (self: IXsdSchema, value: IXsdListSimpleTypes) => void
    getComplexTypeDefinitions: (self: IXsdSchema) => IXsdListComplexTypes
    setComplexTypeDefinitions: (self: IXsdSchema, value: IXsdListComplexTypes) => void
}

abstract class IXsdSchemaIface {

    // Own properties of GXml-0.14.GXml.IXsdSchemaIface

    static name: string
}

interface IXsdBaseTypeIface {

    // Own fields of GXml-0.14.GXml.IXsdBaseTypeIface

    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseType) => IXsdAnnotation
    setAnotation: (self: IXsdBaseType, value: IXsdAnnotation) => void
}

abstract class IXsdBaseTypeIface {

    // Own properties of GXml-0.14.GXml.IXsdBaseTypeIface

    static name: string
}

interface IXsdSimpleTypeIface {

    // Own fields of GXml-0.14.GXml.IXsdSimpleTypeIface

    parentIface: GObject.TypeInterface
    getFinal: (self: IXsdSimpleType) => string
    setFinal: (self: IXsdSimpleType, value: string) => void
    getId: (self: IXsdSimpleType) => string
    setId: (self: IXsdSimpleType, value: string) => void
    getName: (self: IXsdSimpleType) => string
    setName: (self: IXsdSimpleType, value: string) => void
    getAnnotation: (self: IXsdSimpleType) => IXsdAnnotation
    setAnnotation: (self: IXsdSimpleType, value: IXsdAnnotation) => void
    getList: (self: IXsdSimpleType) => IXsdTypeList
    setList: (self: IXsdSimpleType, value: IXsdTypeList) => void
    getUnion: (self: IXsdSimpleType) => IXsdTypeUnion
    setUnion: (self: IXsdSimpleType, value: IXsdTypeUnion) => void
    getRestriction: (self: IXsdSimpleType) => IXsdTypeRestriction
    setRestriction: (self: IXsdSimpleType, value: IXsdTypeRestriction) => void
}

abstract class IXsdSimpleTypeIface {

    // Own properties of GXml-0.14.GXml.IXsdSimpleTypeIface

    static name: string
}

interface IXsdTypeDefIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeDefIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeDefIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeDefIface

    static name: string
}

interface IXsdTypeRestrictionIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionIface

    parentIface: GObject.TypeInterface
    getBase: (self: IXsdTypeRestriction) => string
    setBase: (self: IXsdTypeRestriction, value: string) => void
    getId: (self: IXsdTypeRestriction) => string
    setId: (self: IXsdTypeRestriction, value: string) => void
    getSimpleType: (self: IXsdTypeRestriction) => IXsdSimpleType
    setSimpleType: (self: IXsdTypeRestriction, value: IXsdSimpleType) => void
    getEnumerations: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionEnumerations
    setEnumerations: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionEnumerations) => void
    getWhiteSpaces: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionWhiteSpaces) => void
}

abstract class IXsdTypeRestrictionIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionIface

    static name: string
}

interface IXsdTypeListIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeListIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeListIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeListIface

    static name: string
}

interface IXsdTypeUnionIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeUnionIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeUnionIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeUnionIface

    static name: string
}

interface IXsdTypeRestrictionDefIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionDefIface

    parentIface: GObject.TypeInterface
    getAnnotation: (self: IXsdTypeRestrictionDef) => IXsdAnnotation
    setAnnotation: (self: IXsdTypeRestrictionDef, value: IXsdAnnotation) => void
}

abstract class IXsdTypeRestrictionDefIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionDefIface

    static name: string
}

interface IXsdTypeRestrictionMinExclusiveIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusiveIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMinExclusiveIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinExclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMinInclusiveIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusiveIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMinInclusiveIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinInclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMaxExclusiveIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusiveIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMaxExclusiveIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxExclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMaxInclusiveIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusiveIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMaxInclusiveIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxInclusiveIface

    static name: string
}

interface IXsdTypeRestrictionTotalDigitsIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigitsIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionTotalDigitsIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionTotalDigitsIface

    static name: string
}

interface IXsdTypeRestrictionFractionDigitsIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigitsIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionFractionDigitsIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionFractionDigitsIface

    static name: string
}

interface IXsdTypeRestrictionLengthIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionLengthIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionLengthIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionLengthIface

    static name: string
}

interface IXsdTypeRestrictionMinLengthIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMinLengthIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMinLengthIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMinLengthIface

    static name: string
}

interface IXsdTypeRestrictionMaxLengthIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionMaxLengthIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionMaxLengthIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionMaxLengthIface

    static name: string
}

interface IXsdTypeRestrictionEnumerationIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionEnumerationIface

    parentIface: GObject.TypeInterface
    getId: (self: IXsdTypeRestrictionEnumeration) => string
    setId: (self: IXsdTypeRestrictionEnumeration, value: string) => void
    getValue: (self: IXsdTypeRestrictionEnumeration) => string
    setValue: (self: IXsdTypeRestrictionEnumeration, value: string) => void
}

abstract class IXsdTypeRestrictionEnumerationIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionEnumerationIface

    static name: string
}

interface IXsdTypeRestrictionWhiteSpaceIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpaceIface

    parentIface: GObject.TypeInterface
    getFixed: (self: IXsdTypeRestrictionWhiteSpace) => boolean
    setFixed: (self: IXsdTypeRestrictionWhiteSpace, value: boolean) => void
    getId: (self: IXsdTypeRestrictionWhiteSpace) => string
    setId: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
    getValue: (self: IXsdTypeRestrictionWhiteSpace) => string
    setValue: (self: IXsdTypeRestrictionWhiteSpace, value: string) => void
}

abstract class IXsdTypeRestrictionWhiteSpaceIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionWhiteSpaceIface

    static name: string
}

interface IXsdTypeRestrictionPatternIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionPatternIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionPatternIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionPatternIface

    static name: string
}

interface IXsdTypeRestrictionAssertionIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionAssertionIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionAssertionIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionAssertionIface

    static name: string
}

interface IXsdTypeRestrictionExplicitTimezoneIface {

    // Own fields of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezoneIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdTypeRestrictionExplicitTimezoneIface {

    // Own properties of GXml-0.14.GXml.IXsdTypeRestrictionExplicitTimezoneIface

    static name: string
}

interface IXsdComplexTypeIface {

    // Own fields of GXml-0.14.GXml.IXsdComplexTypeIface

    parentIface: GObject.TypeInterface
    getAbstract: (self: IXsdComplexType) => boolean
    setAbstract: (self: IXsdComplexType, value: boolean) => void
    getBlock: (self: IXsdComplexType) => string
    setBlock: (self: IXsdComplexType, value: string) => void
    getFinal: (self: IXsdComplexType) => string
    setFinal: (self: IXsdComplexType, value: string) => void
    getMixed: (self: IXsdComplexType) => boolean
    setMixed: (self: IXsdComplexType, value: boolean) => void
    getName: (self: IXsdComplexType) => string
    setName: (self: IXsdComplexType, value: string) => void
    getDefaultAttributesApply: (self: IXsdComplexType) => boolean
    setDefaultAttributesApply: (self: IXsdComplexType, value: boolean) => void
    getContentType: (self: IXsdComplexType) => IXsdBaseContent
    setContentType: (self: IXsdComplexType, value: IXsdBaseContent) => void
    getTypeAttributes: (self: IXsdComplexType) => IXsdListAttributes
    getGroupAttributes: (self: IXsdComplexType) => IXsdListAttributesGroup
}

abstract class IXsdComplexTypeIface {

    // Own properties of GXml-0.14.GXml.IXsdComplexTypeIface

    static name: string
}

interface IXsdExtensionIface {

    // Own fields of GXml-0.14.GXml.IXsdExtensionIface

    parentIface: GObject.TypeInterface
    getBase: (self: IXsdExtension) => string
    setBase: (self: IXsdExtension, value: string) => void
}

abstract class IXsdExtensionIface {

    // Own properties of GXml-0.14.GXml.IXsdExtensionIface

    static name: string
}

interface IXsdElementIface {

    // Own fields of GXml-0.14.GXml.IXsdElementIface

    parentIface: GObject.TypeInterface
    getAbstract: (self: IXsdElement) => boolean
    setAbstract: (self: IXsdElement, value: boolean) => void
    getBlock: (self: IXsdElement) => string
    setBlock: (self: IXsdElement, value: string) => void
    getDefault: (self: IXsdElement) => string
    setDefault: (self: IXsdElement, value: string) => void
    getFinal: (self: IXsdElement) => string
    setFinal: (self: IXsdElement, value: string) => void
    getFixed: (self: IXsdElement) => string
    setFixed: (self: IXsdElement, value: string) => void
    getForm: (self: IXsdElement) => string
    setForm: (self: IXsdElement, value: string) => void
    getId: (self: IXsdElement) => string | null
    setId: (self: IXsdElement, value?: string | null) => void
    getMaxOccurs: (self: IXsdElement) => string
    setMaxOccurs: (self: IXsdElement, value: string) => void
    getMinOccurs: (self: IXsdElement) => string
    setMinOccurs: (self: IXsdElement, value: string) => void
    getName: (self: IXsdElement) => string
    setName: (self: IXsdElement, value: string) => void
    getNillable: (self: IXsdElement) => boolean
    setNillable: (self: IXsdElement, value: boolean) => void
    getRef: (self: IXsdElement) => string
    setRef: (self: IXsdElement, value: string) => void
    getSubstitutionGroup: (self: IXsdElement) => DomTokenList
    setSubstitutionGroup: (self: IXsdElement, value: DomTokenList) => void
    getTargetNamespace: (self: IXsdElement) => string
    setTargetNamespace: (self: IXsdElement, value: string) => void
    getObjectType: (self: IXsdElement) => string
    setObjectType: (self: IXsdElement, value: string) => void
    getAnotation: (self: IXsdElement) => IXsdAnnotation
    setAnotation: (self: IXsdElement, value: IXsdAnnotation) => void
    getSimpleType: (self: IXsdElement) => IXsdSimpleType
    setSimpleType: (self: IXsdElement, value: IXsdSimpleType) => void
    getComplexType: (self: IXsdElement) => IXsdComplexType
    setComplexType: (self: IXsdElement, value: IXsdComplexType) => void
}

abstract class IXsdElementIface {

    // Own properties of GXml-0.14.GXml.IXsdElementIface

    static name: string
}

interface IXsdAnnotationIface {

    // Own fields of GXml-0.14.GXml.IXsdAnnotationIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdAnnotationIface {

    // Own properties of GXml-0.14.GXml.IXsdAnnotationIface

    static name: string
}

interface IXsdBaseContentIface {

    // Own fields of GXml-0.14.GXml.IXsdBaseContentIface

    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseContent) => IXsdAnnotation
    setAnotation: (self: IXsdBaseContent, value: IXsdAnnotation) => void
}

abstract class IXsdBaseContentIface {

    // Own properties of GXml-0.14.GXml.IXsdBaseContentIface

    static name: string
}

interface IXsdSimpleContentIface {

    // Own fields of GXml-0.14.GXml.IXsdSimpleContentIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdSimpleContentIface {

    // Own properties of GXml-0.14.GXml.IXsdSimpleContentIface

    static name: string
}

interface IXsdComplexContentIface {

    // Own fields of GXml-0.14.GXml.IXsdComplexContentIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdComplexContentIface {

    // Own properties of GXml-0.14.GXml.IXsdComplexContentIface

    static name: string
}

interface IXsdOpenContentIface {

    // Own fields of GXml-0.14.GXml.IXsdOpenContentIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdOpenContentIface {

    // Own properties of GXml-0.14.GXml.IXsdOpenContentIface

    static name: string
}

interface IXsdBaseAttributeIface {

    // Own fields of GXml-0.14.GXml.IXsdBaseAttributeIface

    parentIface: GObject.TypeInterface
    getAnotation: (self: IXsdBaseAttribute) => IXsdAnnotation
    setAnotation: (self: IXsdBaseAttribute, value: IXsdAnnotation) => void
}

abstract class IXsdBaseAttributeIface {

    // Own properties of GXml-0.14.GXml.IXsdBaseAttributeIface

    static name: string
}

interface IXsdAttributeIface {

    // Own fields of GXml-0.14.GXml.IXsdAttributeIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdAttributeIface {

    // Own properties of GXml-0.14.GXml.IXsdAttributeIface

    static name: string
}

interface IXsdAttributeGroupIface {

    // Own fields of GXml-0.14.GXml.IXsdAttributeGroupIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdAttributeGroupIface {

    // Own properties of GXml-0.14.GXml.IXsdAttributeGroupIface

    static name: string
}

interface IXsdListIface {

    // Own fields of GXml-0.14.GXml.IXsdListIface

    parentIface: GObject.TypeInterface
    getItem: (self: IXsdList, index: number) => DomElement | null
    append: (self: IXsdList, element: DomElement) => void
    remove: (self: IXsdList, index: number) => void
    indexOf: (self: IXsdList, element: DomElement) => number
    getElement: (self: IXsdList) => DomElement
    setElement: (self: IXsdList, value: DomElement) => void
    getItemsType: (self: IXsdList) => GObject.GType
    setItemsType: (self: IXsdList, value: GObject.GType) => void
    getItemsName: (self: IXsdList) => GObject.GType
    setItemsName: (self: IXsdList, value: GObject.GType) => void
    getLength: (self: IXsdList) => number
}

abstract class IXsdListIface {

    // Own properties of GXml-0.14.GXml.IXsdListIface

    static name: string
}

interface IXsdListElementsIface {

    // Own fields of GXml-0.14.GXml.IXsdListElementsIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListElementsIface {

    // Own properties of GXml-0.14.GXml.IXsdListElementsIface

    static name: string
}

interface IXsdListSimpleTypesIface {

    // Own fields of GXml-0.14.GXml.IXsdListSimpleTypesIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListSimpleTypesIface {

    // Own properties of GXml-0.14.GXml.IXsdListSimpleTypesIface

    static name: string
}

interface IXsdListComplexTypesIface {

    // Own fields of GXml-0.14.GXml.IXsdListComplexTypesIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListComplexTypesIface {

    // Own properties of GXml-0.14.GXml.IXsdListComplexTypesIface

    static name: string
}

interface IXsdListAttributesIface {

    // Own fields of GXml-0.14.GXml.IXsdListAttributesIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListAttributesIface {

    // Own properties of GXml-0.14.GXml.IXsdListAttributesIface

    static name: string
}

interface IXsdListAttributesGroupIface {

    // Own fields of GXml-0.14.GXml.IXsdListAttributesGroupIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListAttributesGroupIface {

    // Own properties of GXml-0.14.GXml.IXsdListAttributesGroupIface

    static name: string
}

interface IXsdListTypeRestrictionEnumerationsIface {

    // Own fields of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerationsIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListTypeRestrictionEnumerationsIface {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionEnumerationsIface

    static name: string
}

interface IXsdListTypeRestrictionWhiteSpacesIface {

    // Own fields of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpacesIface

    parentIface: GObject.TypeInterface
}

abstract class IXsdListTypeRestrictionWhiteSpacesIface {

    // Own properties of GXml-0.14.GXml.IXsdListTypeRestrictionWhiteSpacesIface

    static name: string
}

}

export default GXml;
// END