
/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/gjsify/ts-for-gir
 */
/**
 * GXml-0.20
 */

import type libxml2 from '@girs/libxml2-2.0';
import type Gio from '@girs/gio-2.0';
import type GObject from '@girs/gobject-2.0';
import type GLib from '@girs/glib-2.0';
import type Gee from '@girs/gee-0.8';

export namespace GXml {

enum CssCombiner {
    NULL,
    NONE,
    INSIDE,
    AND,
    PARENT,
    AFTER,
    PRECEDED,
}
enum CssSelectorType {
    CLASS,
    ID,
    ALL,
    ELEMENT,
    ATTRIBUTE,
    ATTRIBUTE_EQUAL,
    ATTRIBUTE_CONTAINS,
    ATTRIBUTE_SUBSTRING,
    ATTRIBUTE_STARTS_WITH,
    ATTRIBUTE_STARTS_WITH_WORD,
    ATTRIBUTE_ENDS_WITH,
    PSEUDO_CLASS,
}
enum NodeType {
    INVALID,
    ELEMENT,
    ATTRIBUTE,
    TEXT,
    CDATA_SECTION,
    ENTITY_REFERENCE,
    ENTITY,
    PROCESSING_INSTRUCTION,
    COMMENT,
    DOCUMENT,
    DOCUMENT_TYPE,
    DOCUMENT_FRAGMENT,
    NOTATION,
}
enum XPathObjectType {
    UNDEFINED,
    NODESET,
    BOOLEAN,
    NUMBER,
    STRING,
    POINT,
    RANGE,
    LOCATIONSET,
    USERS,
    XSLT_TREE,
}
enum CssSelectorError {
    NULL,
    EOF,
    NOT,
    PSEUDO,
    ATTRIBUTE,
    IDENTIFIER,
    COMBINER,
}
enum DomDocumentError {
    FILE_NOT_FOUND_ERROR,
    INVALID_DOCUMENT_ERROR,
}
enum DomError {
    INDEX_SIZE_ERROR,
    DOMSTRING_SIZE_ERROR,
    HIERARCHY_REQUEST_ERROR,
    WRONG_DOCUMENT_ERROR,
    INVALID_CHARACTER_ERROR,
    NO_DATA_ALLOWED_ERROR,
    NO_MODIFICATION_ALLOWED_ERROR,
    NOT_FOUND_ERROR,
    NOT_SUPPORTED_ERROR,
    INUSE_ATTRIBUTE_ERROR,
    INVALID_STATE_ERROR,
    SYNTAX_ERROR,
    INVALID_MODIFICATION_ERROR,
    NAMESPACE_ERROR,
    INVALID_ACCESS_ERROR,
    VALIDATION_ERROR,
    TYPE_MISMATCH_ERROR,
    SECURITY_ERROR,
    NETWORK_ERROR,
    ABORT_ERROR,
    URL_MISMATCH_ERROR,
    QUOTA_EXCEEDED_ERROR,
    TIME_OUT_ERROR,
    INVALID_NODE_TYPE_ERROR,
    DATA_CLONE_ERROR,
}
enum EnumerationError {
    INVALID_VALUE,
    INVALID_TEXT,
}
enum IXsdSchemaError {
    INVALIDATION_ERROR,
}
enum ParserError {
    INVALID_DATA_ERROR,
    INVALID_FILE_ERROR,
    INVALID_STREAM_ERROR,
}
enum Error {
    NOT_SUPPORTED,
    PARSER,
    WRITER,
}
enum XPathError {
    EXPRESSION_OK,
    NUMBER_ERROR,
    UNFINISHED_LITERAL_ERROR,
    START_LITERAL_ERROR,
    VARIABLE_REF_ERROR,
    UNDEF_VARIABLE_ERROR,
    INVALID_PREDICATE_ERROR,
    EXPR_ERROR,
    UNCLOSED_ERROR,
    UNKNOWN_FUNC_ERROR,
    INVALID_OPERAND,
    INVALID_TYPE,
    INVALID_ARITY,
    INVALID_CTXT_SIZE,
    INVALID_CTXT_POSITION,
    MEMORY_ERROR,
    XPTR_SYNTAX_ERROR,
    XPTR_RESOURCE_ERROR,
    XPTR_SUB_RESOURCE_ERROR,
    UNDEF_PREFIX_ERROR,
    ENCODING_ERROR,
    INVALID_CHAR_ERROR,
    INVALID_CTXT,
}
enum XPathObjectError {
    INVALID_NAMESPACE_ERROR,
}
enum DomNodeFilterFilter {
    ACCEPT,
    REJECT,
    SKIP,
}
enum DomEventPhase {
    NONE,
    CAPTURING_PHASE,
    AT_TARGET,
    BUBBLING_PHASE,
}
enum DomNodeNodeType {
    INVALID,
    ELEMENT_NODE,
    ATTRIBUTE_NODE,
    TEXT_NODE,
    CDATA_SECTION_NODE,
    ENTITY_REFERENCE_NODE,
    ENTITY_NODE,
    PROCESSING_INSTRUCTION_NODE,
    COMMENT_NODE,
    DOCUMENT_NODE,
    DOCUMENT_TYPE_NODE,
    DOCUMENT_FRAGMENT_NODE,
    NOTATION_NODE,
}
enum DomRangeBoundaryPoints {
    START_TO_START,
    START_TO_END,
    END_TO_END,
    END_TO_START,
}
enum DomEventFlags {
    STOP_PROPAGATION_FLAG,
    STOP_IMMEDIATE_PROPAGATION_FLAG,
    CANCELED_FLAG,
    INITIALIZED_FLAG,
    DISPATCH_FLAG,
}
enum DomNodeDocumentPosition {
    NONE,
    DISCONNECTED,
    PRECEDING,
    FOLLOWING,
    CONTAINS,
    CONTAINED_BY,
    IMPLEMENTATION_SPECIFIC,
}
interface DomMutationCallback {
    (mutations: Gee.List, observer: DomMutationObserver): void
}
module Collection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Collection

        element?: DomElement | null
        itemsType?: GObject.GType | null
    }

}

interface Collection extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Collection

    readonly nodesIndex: GLib.Queue
    element: DomElement
    readonly itemsName: string | null
    itemsType: GObject.GType
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.Collection

    // Has conflict: getNodesIndex(): GLib.Queue
    // Has conflict: getElement(): DomElement
    // Has conflict: setElement(value: DomElement): void
    // Has conflict: getItemsName(): string | null
    // Has conflict: getItemsType(): GObject.GType
    // Has conflict: setItemsType(value: GObject.GType): void
    // Has conflict: search(): void
    // Has conflict: getItem(index: number): DomElement | null
    // Has conflict: append(node: DomElement): void
    // Has conflict: getLength(): number
    // Has conflict: initialize(t: GObject.GType): void
    // Has conflict: createItem(): DomElement | null
    // Has conflict: validateAppend(index: number, element: DomElement): boolean
    // Has conflict: clear(): void

    // Own virtual methods of GXml-0.20.GXml.Collection

    getNodesIndex(): GLib.Queue
    getElement(): DomElement
    setElement(value: DomElement): void
    getItemsName(): string | null
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void
    search(): void
    getItem(index: number): DomElement | null
    append(node: DomElement): void
    getLength(): number
    initialize(t: GObject.GType): void
    createItem(): DomElement | null
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Class property signals of GXml-0.20.GXml.Collection

    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Collection {

    // Own properties of GXml-0.20.GXml.Collection

    static name: string

    // Constructors of GXml-0.20.GXml.Collection

    constructor(config?: Collection.ConstructorProperties) 
    _init(config?: Collection.ConstructorProperties): void
}

module List {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties, Gee.Traversable.ConstructorProperties, Gee.Iterable.ConstructorProperties {
    }

}

interface List extends GObject.Object, Collection, Gee.Traversable, Gee.Iterable {

    // Own properties of GXml-0.20.GXml.List

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.List

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class List {

    // Own properties of GXml-0.20.GXml.List

    static name: string

    // Constructors of GXml-0.20.GXml.List

    constructor(config?: List.ConstructorProperties) 
    _init(config?: List.ConstructorProperties): void
}

module MappeableElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElement extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.MappeableElement

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.MappeableElement

    // Has conflict: getMapKey(): string | null

    // Own virtual methods of GXml-0.20.GXml.MappeableElement

    getMapKey(): string | null

    // Class property signals of GXml-0.20.GXml.MappeableElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class MappeableElement {

    // Own properties of GXml-0.20.GXml.MappeableElement

    static name: string

    // Constructors of GXml-0.20.GXml.MappeableElement

    constructor(config?: MappeableElement.ConstructorProperties) 
    _init(config?: MappeableElement.ConstructorProperties): void
}

module Map {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties, Gee.Traversable.ConstructorProperties, Gee.Iterable.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Map

        attributeKey?: string | null
    }

}

interface Map extends GObject.Object, Collection, Gee.Traversable, Gee.Iterable {

    // Own properties of GXml-0.20.GXml.Map

    attributeKey: string | null
    readonly keysSet: Gee.Set
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.Map

    // Has conflict: getAttributeKey(): string | null
    // Has conflict: setAttributeKey(value: string | null): void
    // Has conflict: item(key: string | null): DomElement | null
    // Has conflict: hasKey(key: string | null): boolean
    // Has conflict: getKeysSet(): Gee.Set

    // Own virtual methods of GXml-0.20.GXml.Map

    getAttributeKey(): string | null
    setAttributeKey(value: string | null): void
    item(key: string | null): DomElement | null
    hasKey(key: string | null): boolean
    getKeysSet(): Gee.Set

    // Class property signals of GXml-0.20.GXml.Map

    connect(sigName: "notify::attribute-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-key", ...args: any[]): void
    connect(sigName: "notify::keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys-set", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Map {

    // Own properties of GXml-0.20.GXml.Map

    static name: string

    // Constructors of GXml-0.20.GXml.Map

    constructor(config?: Map.ConstructorProperties) 
    _init(config?: Map.ConstructorProperties): void
}

module MappeableElementPairKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElementPairKey extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.MappeableElementPairKey

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.MappeableElementPairKey

    // Has conflict: getMapPrimaryKey(): string | null
    // Has conflict: getMapSecondaryKey(): string | null

    // Own virtual methods of GXml-0.20.GXml.MappeableElementPairKey

    getMapPrimaryKey(): string | null
    getMapSecondaryKey(): string | null

    // Class property signals of GXml-0.20.GXml.MappeableElementPairKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class MappeableElementPairKey {

    // Own properties of GXml-0.20.GXml.MappeableElementPairKey

    static name: string

    // Constructors of GXml-0.20.GXml.MappeableElementPairKey

    constructor(config?: MappeableElementPairKey.ConstructorProperties) 
    _init(config?: MappeableElementPairKey.ConstructorProperties): void
}

module PairedMap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties, Gee.Traversable.ConstructorProperties, Gee.Iterable.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.PairedMap

        attributePrimaryKey?: string | null
        attributeSecondaryKey?: string | null
    }

}

interface PairedMap extends GObject.Object, Collection, Gee.Traversable, Gee.Iterable {

    // Own properties of GXml-0.20.GXml.PairedMap

    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null
    readonly primaryKeysSet: Gee.Set
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.PairedMap

    // Has conflict: getAttributePrimaryKey(): string | null
    // Has conflict: setAttributePrimaryKey(value: string | null): void
    // Has conflict: getAttributeSecondaryKey(): string | null
    // Has conflict: setAttributeSecondaryKey(value: string | null): void
    // Has conflict: getPrimaryKeysSet(): Gee.Set
    // Has conflict: item(primaryKey: string | null, secondaryKey: string | null): DomElement | null
    // Has conflict: hasPrimaryKey(key: string | null): boolean
    // Has conflict: hasSecondaryKey(pkey: string | null, key: string | null): boolean
    // Has conflict: secondaryKeysSet(pkey: string | null): Gee.Set

    // Own virtual methods of GXml-0.20.GXml.PairedMap

    getAttributePrimaryKey(): string | null
    setAttributePrimaryKey(value: string | null): void
    getAttributeSecondaryKey(): string | null
    setAttributeSecondaryKey(value: string | null): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string | null, secondaryKey: string | null): DomElement | null
    hasPrimaryKey(key: string | null): boolean
    hasSecondaryKey(pkey: string | null, key: string | null): boolean
    secondaryKeysSet(pkey: string | null): Gee.Set

    // Class property signals of GXml-0.20.GXml.PairedMap

    connect(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-primary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-secondary-key", ...args: any[]): void
    connect(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-keys-set", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class PairedMap {

    // Own properties of GXml-0.20.GXml.PairedMap

    static name: string

    // Constructors of GXml-0.20.GXml.PairedMap

    constructor(config?: PairedMap.ConstructorProperties) 
    _init(config?: PairedMap.ConstructorProperties): void
}

module MappeableElementThreeKey {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface MappeableElementThreeKey extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.MappeableElementThreeKey

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.MappeableElementThreeKey

    // Has conflict: getMapPkey(): string | null
    // Has conflict: getMapSkey(): string | null
    // Has conflict: getMapTkey(): string | null

    // Own virtual methods of GXml-0.20.GXml.MappeableElementThreeKey

    getMapPkey(): string | null
    getMapSkey(): string | null
    getMapTkey(): string | null

    // Class property signals of GXml-0.20.GXml.MappeableElementThreeKey

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class MappeableElementThreeKey {

    // Own properties of GXml-0.20.GXml.MappeableElementThreeKey

    static name: string

    // Constructors of GXml-0.20.GXml.MappeableElementThreeKey

    constructor(config?: MappeableElementThreeKey.ConstructorProperties) 
    _init(config?: MappeableElementThreeKey.ConstructorProperties): void
}

module ThreeMap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties, Gee.Traversable.ConstructorProperties, Gee.Iterable.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.ThreeMap

        attributePrimaryKey?: string | null
        attributeSecondaryKey?: string | null
        attributeThirdKey?: string | null
    }

}

interface ThreeMap extends GObject.Object, Collection, Gee.Traversable, Gee.Iterable {

    // Own properties of GXml-0.20.GXml.ThreeMap

    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null
    attributeThirdKey: string | null
    readonly primaryKeysSet: Gee.Set
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.ThreeMap

    // Has conflict: getAttributePrimaryKey(): string | null
    // Has conflict: setAttributePrimaryKey(value: string | null): void
    // Has conflict: getAttributeSecondaryKey(): string | null
    // Has conflict: setAttributeSecondaryKey(value: string | null): void
    // Has conflict: getAttributeThirdKey(): string | null
    // Has conflict: setAttributeThirdKey(value: string | null): void
    // Has conflict: getPrimaryKeysSet(): Gee.Set
    // Has conflict: item(primaryKey: string | null, secondaryKey: string | null, thirdKey: string | null): DomElement | null
    // Has conflict: hasPrimaryKey(key: string | null): boolean
    // Has conflict: hasSecondaryKey(pkey: string | null, key: string | null): boolean
    // Has conflict: hasThirdKey(pkey: string | null, skey: string | null, key: string | null): boolean
    // Has conflict: secondaryKeysSet(pkey: string | null): Gee.Set
    // Has conflict: thirdKeysSet(pkey: string | null, skey: string | null): Gee.Set

    // Own virtual methods of GXml-0.20.GXml.ThreeMap

    getAttributePrimaryKey(): string | null
    setAttributePrimaryKey(value: string | null): void
    getAttributeSecondaryKey(): string | null
    setAttributeSecondaryKey(value: string | null): void
    getAttributeThirdKey(): string | null
    setAttributeThirdKey(value: string | null): void
    getPrimaryKeysSet(): Gee.Set
    item(primaryKey: string | null, secondaryKey: string | null, thirdKey: string | null): DomElement | null
    hasPrimaryKey(key: string | null): boolean
    hasSecondaryKey(pkey: string | null, key: string | null): boolean
    hasThirdKey(pkey: string | null, skey: string | null, key: string | null): boolean
    secondaryKeysSet(pkey: string | null): Gee.Set
    thirdKeysSet(pkey: string | null, skey: string | null): Gee.Set

    // Class property signals of GXml-0.20.GXml.ThreeMap

    connect(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-primary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-secondary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-third-key", ...args: any[]): void
    connect(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-keys-set", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ThreeMap {

    // Own properties of GXml-0.20.GXml.ThreeMap

    static name: string

    // Constructors of GXml-0.20.GXml.ThreeMap

    constructor(config?: ThreeMap.ConstructorProperties) 
    _init(config?: ThreeMap.ConstructorProperties): void
}

module CollectionParent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties {
    }

}

interface CollectionParent extends GObject.Object, Collection {

    // Own properties of GXml-0.20.GXml.CollectionParent

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CollectionParent

    // Has conflict: getTypes(): GLib.HashTable

    // Own virtual methods of GXml-0.20.GXml.CollectionParent

    getTypes(): GLib.HashTable

    // Class property signals of GXml-0.20.GXml.CollectionParent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CollectionParent {

    // Own properties of GXml-0.20.GXml.CollectionParent

    static name: string

    // Constructors of GXml-0.20.GXml.CollectionParent

    constructor(config?: CollectionParent.ConstructorProperties) 
    _init(config?: CollectionParent.ConstructorProperties): void
    static addSupportedType(types: GLib.HashTable, parentType: GObject.GType, type: GObject.GType): void
    static addSupportedTypes(table: GLib.HashTable, parentType: GObject.GType, types: GObject.GType[]): void
}

module DomAttr {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomAttr

        value?: string | null
    }

}

interface DomAttr extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomAttr

    readonly namespaceUri: string | null
    readonly prefix: string | null
    readonly localName: string | null
    readonly name: string | null
    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomAttr

    // Has conflict: getNamespaceUri(): string | null
    // Has conflict: getPrefix(): string | null
    // Has conflict: getLocalName(): string | null
    // Has conflict: getName(): string | null
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void
    // Has conflict: getSpecified(): boolean

    // Own virtual methods of GXml-0.20.GXml.DomAttr

    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string | null
    getName(): string | null
    getValue(): string | null
    setValue(value: string | null): void
    getSpecified(): boolean

    // Class property signals of GXml-0.20.GXml.DomAttr

    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomAttr {

    // Own properties of GXml-0.20.GXml.DomAttr

    static name: string

    // Constructors of GXml-0.20.GXml.DomAttr

    constructor(config?: DomAttr.ConstructorProperties) 
    _init(config?: DomAttr.ConstructorProperties): void
}

module DomCharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomChildNode.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomCharacterData

        data?: string | null
    }

}

interface DomCharacterData extends GObject.Object, DomNode, DomNonDocumentTypeChildNode, DomChildNode {

    // Own properties of GXml-0.20.GXml.DomCharacterData

    data: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomCharacterData

    // Has conflict: getData(): string | null
    // Has conflict: setData(value: string | null): void
    // Has conflict: getLength(): number
    // Has conflict: substringData(offset: number, count: number): string | null
    // Has conflict: appendData(data: string | null): void
    // Has conflict: insertData(offset: number, data: string | null): void
    // Has conflict: deleteData(offset: number, count: number): void
    // Has conflict: replaceData(offset: number, count: number, data: string | null): void

    // Own virtual methods of GXml-0.20.GXml.DomCharacterData

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    getLength(): number
    substringData(offset: number, count: number): string | null
    appendData(data: string | null): void
    insertData(offset: number, data: string | null): void
    deleteData(offset: number, count: number): void
    replaceData(offset: number, count: number, data: string | null): void

    // Class property signals of GXml-0.20.GXml.DomCharacterData

    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomCharacterData {

    // Own properties of GXml-0.20.GXml.DomCharacterData

    static name: string

    // Constructors of GXml-0.20.GXml.DomCharacterData

    constructor(config?: DomCharacterData.ConstructorProperties) 
    _init(config?: DomCharacterData.ConstructorProperties): void
}

module DomText {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomText extends DomCharacterData {

    // Own properties of GXml-0.20.GXml.DomText

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomText

    // Has conflict: splitText(offset: number): DomText
    // Has conflict: getWholeText(): string | null

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Own virtual methods of GXml-0.20.GXml.DomText

    splitText(offset: number): DomText
    getWholeText(): string | null

    // Class property signals of GXml-0.20.GXml.DomText

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomText extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomText

    static name: string

    // Constructors of GXml-0.20.GXml.DomText

    constructor(config?: DomText.ConstructorProperties) 
    _init(config?: DomText.ConstructorProperties): void
}

module DomProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomProcessingInstruction extends DomCharacterData {

    // Own properties of GXml-0.20.GXml.DomProcessingInstruction

    readonly target: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomProcessingInstruction

    // Has conflict: getTarget(): string | null

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Own virtual methods of GXml-0.20.GXml.DomProcessingInstruction

    getTarget(): string | null

    // Class property signals of GXml-0.20.GXml.DomProcessingInstruction

    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomProcessingInstruction extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomProcessingInstruction

    static name: string

    // Constructors of GXml-0.20.GXml.DomProcessingInstruction

    constructor(config?: DomProcessingInstruction.ConstructorProperties) 
    _init(config?: DomProcessingInstruction.ConstructorProperties): void
}

module DomComment {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DomComment extends DomCharacterData {

    // Own properties of GXml-0.20.GXml.DomComment

    __gtype__: number

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.DomComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomComment extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomComment

    static name: string

    // Constructors of GXml-0.20.GXml.DomComment

    constructor(config?: DomComment.ConstructorProperties) 
    _init(config?: DomComment.ConstructorProperties): void
}

module DomNonElementParentNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNonElementParentNode extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomNonElementParentNode

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomNonElementParentNode

    // Has conflict: getElementById(elementId: string | null): DomElement | null

    // Own virtual methods of GXml-0.20.GXml.DomNonElementParentNode

    getElementById(elementId: string | null): DomElement | null

    // Class property signals of GXml-0.20.GXml.DomNonElementParentNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNonElementParentNode {

    // Own properties of GXml-0.20.GXml.DomNonElementParentNode

    static name: string

    // Constructors of GXml-0.20.GXml.DomNonElementParentNode

    constructor(config?: DomNonElementParentNode.ConstructorProperties) 
    _init(config?: DomNonElementParentNode.ConstructorProperties): void
}

module DomParentNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomParentNode extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomParentNode

    readonly children: DomHTMLCollection
    readonly firstElementChild: DomElement
    readonly lastElementChild: DomElement
    readonly childElementCount: number
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomParentNode

    // Has conflict: getChildren(): DomHTMLCollection
    // Has conflict: getFirstElementChild(): DomElement | null
    // Has conflict: getLastElementChild(): DomElement | null
    // Has conflict: getChildElementCount(): number
    // Has conflict: querySelector(selectors: string | null): DomElement | null
    // Has conflict: querySelectorAll(selectors: string | null): DomNodeList
    // Has conflict: getElementsByPropertyValue(property: string | null, value: string | null): DomElementList

    // Own virtual methods of GXml-0.20.GXml.DomParentNode

    getChildren(): DomHTMLCollection
    getFirstElementChild(): DomElement | null
    getLastElementChild(): DomElement | null
    getChildElementCount(): number
    querySelector(selectors: string | null): DomElement | null
    querySelectorAll(selectors: string | null): DomNodeList
    getElementsByPropertyValue(property: string | null, value: string | null): DomElementList

    // Class property signals of GXml-0.20.GXml.DomParentNode

    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomParentNode {

    // Own properties of GXml-0.20.GXml.DomParentNode

    static name: string

    // Constructors of GXml-0.20.GXml.DomParentNode

    constructor(config?: DomParentNode.ConstructorProperties) 
    _init(config?: DomParentNode.ConstructorProperties): void
}

module DomNonDocumentTypeChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNonDocumentTypeChildNode extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    readonly previousElementSibling: DomElement
    readonly nextElementSibling: DomElement
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    // Has conflict: getPreviousElementSibling(): DomElement | null
    // Has conflict: getNextElementSibling(): DomElement | null

    // Own virtual methods of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    getPreviousElementSibling(): DomElement | null
    getNextElementSibling(): DomElement | null

    // Class property signals of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNonDocumentTypeChildNode {

    // Own properties of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    static name: string

    // Constructors of GXml-0.20.GXml.DomNonDocumentTypeChildNode

    constructor(config?: DomNonDocumentTypeChildNode.ConstructorProperties) 
    _init(config?: DomNonDocumentTypeChildNode.ConstructorProperties): void
}

module DomChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomChildNode extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomChildNode

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomChildNode

    // Has conflict: remove(): void

    // Own virtual methods of GXml-0.20.GXml.DomChildNode

    remove(): void

    // Class property signals of GXml-0.20.GXml.DomChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomChildNode {

    // Own properties of GXml-0.20.GXml.DomChildNode

    static name: string

    // Constructors of GXml-0.20.GXml.DomChildNode

    constructor(config?: DomChildNode.ConstructorProperties) 
    _init(config?: DomChildNode.ConstructorProperties): void
}

module DomNodeList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomNodeList extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.20.GXml.DomNodeList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.20.GXml.DomNodeList

    // Has conflict: item(index: number): DomNode | null
    // Has conflict: getLength(): number

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.20.GXml.DomNodeList

    item(index: number): DomNode | null
    getLength(): number

    // Class property signals of GXml-0.20.GXml.DomNodeList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNodeList {

    // Own properties of GXml-0.20.GXml.DomNodeList

    static name: string

    // Constructors of GXml-0.20.GXml.DomNodeList

    constructor(config?: DomNodeList.ConstructorProperties) 
    _init(config?: DomNodeList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomHTMLCollection {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomHTMLCollection extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.20.GXml.DomHTMLCollection

    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.20.GXml.DomHTMLCollection

    // Has conflict: getElement(index: number): DomElement | null
    // Has conflict: toArray(): DomElement[]
    // Has conflict: getLength(): number
    // Has conflict: item(index: number): DomElement | null
    // Has conflict: namedItem(name: string | null): DomElement | null

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.20.GXml.DomHTMLCollection

    getElement(index: number): DomElement | null
    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    getLength(): number
    item(index: number): DomElement | null
    namedItem(name: string | null): DomElement | null

    // Class property signals of GXml-0.20.GXml.DomHTMLCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomHTMLCollection {

    // Own properties of GXml-0.20.GXml.DomHTMLCollection

    static name: string

    // Constructors of GXml-0.20.GXml.DomHTMLCollection

    constructor(config?: DomHTMLCollection.ConstructorProperties) 
    _init(config?: DomHTMLCollection.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomNodeIterator {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accept-node`
     */
    interface AcceptNodeSignalCallback {
        (node: DomNode): DomNodeFilterFilter
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNodeIterator extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomNodeIterator

    readonly root: DomNode
    readonly referenceNode: DomNode
    readonly pointerBeforeReferenceNode: boolean
    readonly whatToShow: number
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomNodeIterator

    // Has conflict: getRoot(): DomNode
    // Has conflict: getReferenceNode(): DomNode
    // Has conflict: getPointerBeforeReferenceNode(): boolean
    // Has conflict: getWhatToShow(): number
    // Has conflict: nextNode(): DomNode | null
    // Has conflict: previousNode(): DomNode | null
    // Has conflict: detach(): void

    // Own virtual methods of GXml-0.20.GXml.DomNodeIterator

    getRoot(): DomNode
    getReferenceNode(): DomNode
    getPointerBeforeReferenceNode(): boolean
    getWhatToShow(): number
    nextNode(): DomNode | null
    previousNode(): DomNode | null
    detach(): void

    // Own signals of GXml-0.20.GXml.DomNodeIterator

    connect(sigName: "accept-node", callback: DomNodeIterator.AcceptNodeSignalCallback): number
    on(sigName: "accept-node", callback: DomNodeIterator.AcceptNodeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: DomNodeIterator.AcceptNodeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: DomNodeIterator.AcceptNodeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "accept-node", ...args: any[]): void

    // Class property signals of GXml-0.20.GXml.DomNodeIterator

    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reference-node", ...args: any[]): void
    connect(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-before-reference-node", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNodeIterator {

    // Own properties of GXml-0.20.GXml.DomNodeIterator

    static name: string

    // Constructors of GXml-0.20.GXml.DomNodeIterator

    constructor(config?: DomNodeIterator.ConstructorProperties) 
    _init(config?: DomNodeIterator.ConstructorProperties): void
}

module DomTreeWalker {

    // Signal callback interfaces

    /**
     * Signal callback interface for `accept-node`
     */
    interface AcceptNodeSignalCallback {
        (node: DomNode): DomNodeFilterFilter
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomTreeWalker extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomTreeWalker

    readonly root: DomNode
    readonly whatToShow: number
    readonly currentNode: DomNode
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomTreeWalker

    // Has conflict: getRoot(): DomNode
    // Has conflict: getWhatToShow(): number
    // Has conflict: getCurrentNode(): DomNode
    // Has conflict: parentNode(): DomNode | null
    // Has conflict: firstChild(): DomNode | null
    // Has conflict: lastChild(): DomNode | null
    // Has conflict: previousSibling(): DomNode | null
    // Has conflict: nextSibling(): DomNode | null
    // Has conflict: previousNode(): DomNode | null
    // Has conflict: nextNode(): DomNode | null

    // Own virtual methods of GXml-0.20.GXml.DomTreeWalker

    getRoot(): DomNode
    getWhatToShow(): number
    getCurrentNode(): DomNode
    parentNode(): DomNode | null
    firstChild(): DomNode | null
    lastChild(): DomNode | null
    previousSibling(): DomNode | null
    nextSibling(): DomNode | null
    previousNode(): DomNode | null
    nextNode(): DomNode | null

    // Own signals of GXml-0.20.GXml.DomTreeWalker

    connect(sigName: "accept-node", callback: DomTreeWalker.AcceptNodeSignalCallback): number
    on(sigName: "accept-node", callback: DomTreeWalker.AcceptNodeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "accept-node", callback: DomTreeWalker.AcceptNodeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "accept-node", callback: DomTreeWalker.AcceptNodeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "accept-node", ...args: any[]): void

    // Class property signals of GXml-0.20.GXml.DomTreeWalker

    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::current-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-node", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomTreeWalker {

    // Own properties of GXml-0.20.GXml.DomTreeWalker

    static name: string

    // Constructors of GXml-0.20.GXml.DomTreeWalker

    constructor(config?: DomTreeWalker.ConstructorProperties) 
    _init(config?: DomTreeWalker.ConstructorProperties): void
}

module DomNamedNodeMap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.Map.ConstructorProperties {
    }

}

interface DomNamedNodeMap extends GObject.Object, Gee.Map {

    // Own properties of GXml-0.20.GXml.DomNamedNodeMap

    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomNamedNodeMap

    // Has conflict: getLength(): number
    // Has conflict: item(index: number): DomNode | null
    // Has conflict: getNamedItem(name: string | null): DomNode | null
    // Has conflict: setNamedItem(node: DomNode): DomNode | null
    // Has conflict: removeNamedItem(name: string | null): DomNode | null
    // Has conflict: removeNamedItemNs(namespaceUri: string | null, localName: string | null): DomNode | null
    // Has conflict: getNamedItemNs(namespaceUri: string | null, localName: string | null): DomNode | null
    // Has conflict: setNamedItemNs(node: DomNode): DomNode | null

    // Own virtual methods of GXml-0.20.GXml.DomNamedNodeMap

    getLength(): number
    item(index: number): DomNode | null
    getNamedItem(name: string | null): DomNode | null
    setNamedItem(node: DomNode): DomNode | null
    removeNamedItem(name: string | null): DomNode | null
    removeNamedItemNs(namespaceUri: string | null, localName: string | null): DomNode | null
    getNamedItemNs(namespaceUri: string | null, localName: string | null): DomNode | null
    setNamedItemNs(node: DomNode): DomNode | null

    // Class property signals of GXml-0.20.GXml.DomNamedNodeMap

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNamedNodeMap {

    // Own properties of GXml-0.20.GXml.DomNamedNodeMap

    static name: string

    // Constructors of GXml-0.20.GXml.DomNamedNodeMap

    constructor(config?: DomNamedNodeMap.ConstructorProperties) 
    _init(config?: DomNamedNodeMap.ConstructorProperties): void
}

module DomTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Gee.BidirList.ConstructorProperties {
    }

}

interface DomTokenList extends GObject.Object, Gee.BidirList {

    // Own properties of GXml-0.20.GXml.DomTokenList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.20.GXml.DomTokenList

    // Has conflict: getLength(): number
    // Has conflict: item(index: number): string | null
    // Has conflict: contains(token: string | null): boolean
    // Has conflict: add(tokens: string[]): void
    // Has conflict: remove(tokens: string[]): void
    // Has conflict: toggle(token: string | null, force: boolean, auto: boolean): boolean
    // Has conflict: toString(): string | null

    // Conflicting methods

    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.20.GXml.DomTokenList

    getLength(): number
    item(index: number): string | null
    contains(token: string | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any | null): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any | null): boolean
    toggle(token: string | null, force: boolean, auto: boolean): boolean
    toString(): string | null

    // Class property signals of GXml-0.20.GXml.DomTokenList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomTokenList {

    // Own properties of GXml-0.20.GXml.DomTokenList

    static name: string

    // Constructors of GXml-0.20.GXml.DomTokenList

    constructor(config?: DomTokenList.ConstructorProperties) 
    _init(config?: DomTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomSettableTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomTokenList.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomSettableTokenList

        value?: string | null
    }

}

interface DomSettableTokenList extends GObject.Object, DomTokenList {

    // Own properties of GXml-0.20.GXml.DomSettableTokenList

    value: string | null
    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Owm methods of GXml-0.20.GXml.DomSettableTokenList

    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void

    // Conflicting methods

    contains(token: string | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    contains(item: any | null): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any | null): boolean
    add(item: any | null): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any | null): boolean
    remove(item: any | null): boolean
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Own virtual methods of GXml-0.20.GXml.DomSettableTokenList

    getValue(): string | null
    setValue(value: string | null): void

    // Class property signals of GXml-0.20.GXml.DomSettableTokenList

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomSettableTokenList {

    // Own properties of GXml-0.20.GXml.DomSettableTokenList

    static name: string

    // Constructors of GXml-0.20.GXml.DomSettableTokenList

    constructor(config?: DomSettableTokenList.ConstructorProperties) 
    _init(config?: DomSettableTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties {
    }

}

interface DomDocument extends GObject.Object, DomNode, DomParentNode, DomNonElementParentNode {

    // Own properties of GXml-0.20.GXml.DomDocument

    readonly implementation: DomImplementation
    readonly url: string | null
    readonly documentUri: string | null
    readonly origin: string | null
    readonly compatMode: string | null
    readonly characterSet: string | null
    readonly contentType: string | null
    readonly doctype: DomDocumentType
    readonly documentElement: DomElement
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomDocument

    // Has conflict: getImplementation(): DomImplementation
    // Has conflict: getUrl(): string | null
    // Has conflict: getDocumentUri(): string | null
    // Has conflict: getOrigin(): string | null
    // Has conflict: getCompatMode(): string | null
    // Has conflict: getCharacterSet(): string | null
    // Has conflict: getContentType(): string | null
    // Has conflict: getDoctype(): DomDocumentType | null
    // Has conflict: getDocumentElement(): DomElement | null
    // Has conflict: getElementsByTagName(localName: string | null): DomHTMLCollection
    // Has conflict: getElementsByTagNameNs(namespace: string | null, localName: string | null): DomHTMLCollection
    // Has conflict: getElementsByClassName(classNames: string | null): DomHTMLCollection
    // Has conflict: createElement(localName: string | null): DomElement
    // Has conflict: createElementNs(namespace: string | null, qualifiedName: string | null): DomElement
    // Has conflict: createDocumentFragment(): DomDocumentFragment
    // Has conflict: createTextNode(data: string | null): DomText
    // Has conflict: createComment(data: string | null): DomComment
    // Has conflict: createProcessingInstruction(target: string | null, data: string | null): DomProcessingInstruction
    // Has conflict: importNode(node: DomNode, deep: boolean): DomNode
    // Has conflict: adoptNode(node: DomNode): DomNode
    // Has conflict: createEvent(interface: string | null): DomEvent
    // Has conflict: createRange(): DomRange
    // Has conflict: createNodeIterator(root: DomNode, whatToShow: number): DomNodeIterator
    // Has conflict: createTreeWalker(root: DomNode, whatToShow: number): DomTreeWalker
    // Has conflict: writeFile(file: Gio.File, cancellable: Gio.Cancellable | null): void
    // Has conflict: writeFileAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeFileFinish(res: Gio.AsyncResult): void
    // Has conflict: writeStream(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null): void
    // Has conflict: writeStreamAsync(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: createStream(): Gio.InputStream
    // Has conflict: createStreamAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    // Has conflict: writeString(cancellable: Gio.Cancellable | null): string | null
    // Has conflict: writeStringAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStringFinish(res: Gio.AsyncResult): string | null
    // Has conflict: readFromFile(file: Gio.File, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromFileAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromFileFinish(res: Gio.AsyncResult): void
    // Has conflict: readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromStringAsync(str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromStringFinish(res: Gio.AsyncResult): void
    // Has conflict: readFromStream(stream: Gio.InputStream, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromStreamAsync(stream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: getXmlParser(): Parser
    // Has conflict: setXmlParser(parser: Parser): void

    // Own virtual methods of GXml-0.20.GXml.DomDocument

    getImplementation(): DomImplementation
    getUrl(): string | null
    getDocumentUri(): string | null
    getOrigin(): string | null
    getCompatMode(): string | null
    getCharacterSet(): string | null
    getContentType(): string | null
    getDoctype(): DomDocumentType | null
    getDocumentElement(): DomElement | null
    getElementsByTagName(localName: string | null): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string | null): DomHTMLCollection
    getElementsByClassName(classNames: string | null): DomHTMLCollection
    createElement(localName: string | null): DomElement
    createElementNs(namespace: string | null, qualifiedName: string | null): DomElement
    createDocumentFragment(): DomDocumentFragment
    createTextNode(data: string | null): DomText
    createComment(data: string | null): DomComment
    createProcessingInstruction(target: string | null, data: string | null): DomProcessingInstruction
    importNode(node: DomNode, deep: boolean): DomNode
    adoptNode(node: DomNode): DomNode
    createEvent(interface: string | null): DomEvent
    createRange(): DomRange
    createNodeIterator(root: DomNode, whatToShow: number): DomNodeIterator
    createTreeWalker(root: DomNode, whatToShow: number): DomTreeWalker
    writeFile(file: Gio.File, cancellable: Gio.Cancellable | null): void
    writeFileAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    writeString(cancellable: Gio.Cancellable | null): string | null
    writeStringAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string | null
    readFromFile(file: Gio.File, cancellable: Gio.Cancellable | null): void
    readFromFileAsync(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    readFromStringAsync(str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    readFromStream(stream: Gio.InputStream, cancellable: Gio.Cancellable | null): void
    readFromStreamAsync(stream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    getXmlParser(): Parser
    setXmlParser(parser: Parser): void

    // Class property signals of GXml-0.20.GXml.DomDocument

    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomDocument {

    // Own properties of GXml-0.20.GXml.DomDocument

    static name: string

    // Constructors of GXml-0.20.GXml.DomDocument

    constructor(config?: DomDocument.ConstructorProperties) 
    _init(config?: DomDocument.ConstructorProperties): void
}

module DomXMLDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomDocument.ConstructorProperties {
    }

}

interface DomXMLDocument extends GObject.Object, DomDocument {

    // Own properties of GXml-0.20.GXml.DomXMLDocument

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.DomXMLDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomXMLDocument {

    // Own properties of GXml-0.20.GXml.DomXMLDocument

    static name: string

    // Constructors of GXml-0.20.GXml.DomXMLDocument

    constructor(config?: DomXMLDocument.ConstructorProperties) 
    _init(config?: DomXMLDocument.ConstructorProperties): void
}

module DomImplementation {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomImplementation extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomImplementation

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomImplementation

    // Has conflict: createDocumentType(qualifiedName: string | null, publicId: string | null, systemId: string | null): DomDocumentType
    // Has conflict: createDocument(nspace: string | null, qualifiedName: string | null, doctype: DomDocumentType | null): DomXMLDocument
    // Has conflict: createHtmlDocument(title: string | null): DomDocument
    // Has conflict: hasFeature(): boolean

    // Own virtual methods of GXml-0.20.GXml.DomImplementation

    createDocumentType(qualifiedName: string | null, publicId: string | null, systemId: string | null): DomDocumentType
    createDocument(nspace: string | null, qualifiedName: string | null, doctype: DomDocumentType | null): DomXMLDocument
    createHtmlDocument(title: string | null): DomDocument
    hasFeature(): boolean

    // Class property signals of GXml-0.20.GXml.DomImplementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomImplementation {

    // Own properties of GXml-0.20.GXml.DomImplementation

    static name: string

    // Constructors of GXml-0.20.GXml.DomImplementation

    constructor(config?: DomImplementation.ConstructorProperties) 
    _init(config?: DomImplementation.ConstructorProperties): void
}

module DomDocumentFragment {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties {
    }

}

interface DomDocumentFragment extends GObject.Object, DomNode, DomParentNode, DomNonElementParentNode {

    // Own properties of GXml-0.20.GXml.DomDocumentFragment

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.DomDocumentFragment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomDocumentFragment {

    // Own properties of GXml-0.20.GXml.DomDocumentFragment

    static name: string

    // Constructors of GXml-0.20.GXml.DomDocumentFragment

    constructor(config?: DomDocumentFragment.ConstructorProperties) 
    _init(config?: DomDocumentFragment.ConstructorProperties): void
}

module DomDocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomChildNode.ConstructorProperties {
    }

}

interface DomDocumentType extends GObject.Object, DomNode, DomChildNode {

    // Own properties of GXml-0.20.GXml.DomDocumentType

    readonly name: string | null
    readonly publicId: string | null
    readonly systemId: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomDocumentType

    // Has conflict: getName(): string | null
    // Has conflict: getPublicId(): string | null
    // Has conflict: getSystemId(): string | null

    // Own virtual methods of GXml-0.20.GXml.DomDocumentType

    getName(): string | null
    getPublicId(): string | null
    getSystemId(): string | null

    // Class property signals of GXml-0.20.GXml.DomDocumentType

    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomDocumentType {

    // Own properties of GXml-0.20.GXml.DomDocumentType

    static name: string

    // Constructors of GXml-0.20.GXml.DomDocumentType

    constructor(config?: DomDocumentType.ConstructorProperties) 
    _init(config?: DomDocumentType.ConstructorProperties): void
}

module DomHtmlDocument {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomDocument.ConstructorProperties {
    }

}

interface DomHtmlDocument extends GObject.Object, DomDocument {

    // Own properties of GXml-0.20.GXml.DomHtmlDocument

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomHtmlDocument

    // Has conflict: readFromString(str: string | null): void
    // Has conflict: readFromStringTolerant(str: string | null): void
    // Has conflict: toHtml(): string | null

    // Own virtual methods of GXml-0.20.GXml.DomHtmlDocument

    readFromString(str: string | null): void

    // Overloads of readFromString

    readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    readFromStringTolerant(str: string | null): void
    toHtml(): string | null

    // Class property signals of GXml-0.20.GXml.DomHtmlDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomHtmlDocument {

    // Own properties of GXml-0.20.GXml.DomHtmlDocument

    static name: string

    // Constructors of GXml-0.20.GXml.DomHtmlDocument

    constructor(config?: DomHtmlDocument.ConstructorProperties) 
    _init(config?: DomHtmlDocument.ConstructorProperties): void
}

module DomElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomParentNode.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomElement

        id?: string | null
        className?: string | null
    }

}

interface DomElement extends GObject.Object, DomNode, DomChildNode, DomNonDocumentTypeChildNode, DomParentNode {

    // Own properties of GXml-0.20.GXml.DomElement

    readonly namespaceUri: string | null
    readonly prefix: string | null
    readonly localName: string | null
    readonly tagName: string | null
    id: string | null
    className: string | null
    readonly classList: DomTokenList
    readonly attributes: DomNamedNodeMap
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomElement

    // Has conflict: getNamespaceUri(): string | null
    // Has conflict: getPrefix(): string | null
    // Has conflict: getLocalName(): string | null
    // Has conflict: getTagName(): string | null
    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getClassName(): string | null
    // Has conflict: setClassName(value: string | null): void
    // Has conflict: getClassList(): DomTokenList
    // Has conflict: getAttributes(): DomNamedNodeMap
    // Has conflict: getAttribute(name: string | null): string | null
    // Has conflict: getAttributeNs(namespace: string | null, localName: string | null): string | null
    // Has conflict: setAttribute(name: string | null, value: string | null): void
    // Has conflict: setAttributeNs(namespace: string | null, name: string | null, value: string | null): void
    // Has conflict: removeAttribute(name: string | null): void
    // Has conflict: removeAttributeNs(namespace: string | null, localName: string | null): void
    // Has conflict: hasAttribute(name: string | null): boolean
    // Has conflict: hasAttributeNs(namespace: string | null, localName: string | null): boolean
    // Has conflict: getElementsByTagName(localName: string | null): DomHTMLCollection
    // Has conflict: getElementsByTagNameNs(namespace: string | null, localName: string | null): DomHTMLCollection
    // Has conflict: getElementsByClassName(classNames: string | null): DomHTMLCollection
    // Has conflict: matches(selectors: string | null): boolean
    // Has conflict: readFromUri(uri: string | null): void
    // Has conflict: readFromUriAsync(uri: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromUriFinish(res: Gio.AsyncResult): void
    // Has conflict: readFromFile(f: Gio.File, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromFileAsync(f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromFileFinish(res: Gio.AsyncResult): void
    // Has conflict: readFromStream(istream: Gio.InputStream, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromStreamAsync(istream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    // Has conflict: readFromStringAsync(str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFromStringFinish(res: Gio.AsyncResult): void
    // Has conflict: writeString(cancellable: Gio.Cancellable | null): string | null
    // Has conflict: writeStringAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStringFinish(res: Gio.AsyncResult): string | null
    // Has conflict: writeFile(f: Gio.File, cancellable: Gio.Cancellable | null): void
    // Has conflict: writeFileAsync(f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeFileFinish(res: Gio.AsyncResult): void
    // Has conflict: writeStream(stream: Gio.OutputStream): void
    // Has conflict: writeStreamAsync(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: createStream(): Gio.InputStream
    // Has conflict: createStreamAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: createStreamFinish(res: Gio.AsyncResult): Gio.InputStream

    // Own virtual methods of GXml-0.20.GXml.DomElement

    getNamespaceUri(): string | null
    getPrefix(): string | null
    getLocalName(): string | null
    getTagName(): string | null
    getId(): string | null
    setId(value: string | null): void
    getClassName(): string | null
    setClassName(value: string | null): void
    getClassList(): DomTokenList
    getAttributes(): DomNamedNodeMap
    getAttribute(name: string | null): string | null
    getAttributeNs(namespace: string | null, localName: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttributeNs(namespace: string | null, name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttributeNs(namespace: string | null, localName: string | null): void
    hasAttribute(name: string | null): boolean
    hasAttributeNs(namespace: string | null, localName: string | null): boolean
    getElementsByTagName(localName: string | null): DomHTMLCollection
    getElementsByTagNameNs(namespace: string | null, localName: string | null): DomHTMLCollection
    getElementsByClassName(classNames: string | null): DomHTMLCollection
    matches(selectors: string | null): boolean
    readFromUri(uri: string | null): void
    readFromUriAsync(uri: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromUriFinish(res: Gio.AsyncResult): void
    readFromFile(f: Gio.File, cancellable: Gio.Cancellable | null): void
    readFromFileAsync(f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromFileFinish(res: Gio.AsyncResult): void
    readFromStream(istream: Gio.InputStream, cancellable: Gio.Cancellable | null): void
    readFromStreamAsync(istream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromStreamFinish(res: Gio.AsyncResult): void
    readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    readFromStringAsync(str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    readFromStringFinish(res: Gio.AsyncResult): void
    writeString(cancellable: Gio.Cancellable | null): string | null
    writeStringAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string | null
    writeFile(f: Gio.File, cancellable: Gio.Cancellable | null): void
    writeFileAsync(f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream

    // Class property signals of GXml-0.20.GXml.DomElement

    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomElement {

    // Own properties of GXml-0.20.GXml.DomElement

    static name: string

    // Constructors of GXml-0.20.GXml.DomElement

    constructor(config?: DomElement.ConstructorProperties) 
    _init(config?: DomElement.ConstructorProperties): void
}

module DomEventTarget {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEventTarget extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomEventTarget

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomEventTarget

    // Has conflict: addEventListener(type: string | null, callback: DomEventListener | null, capture: boolean): void
    // Has conflict: removeEventListener(type: string | null, callback: DomEventListener | null, capture: boolean): void
    // Has conflict: dispatchEvent(event: DomEvent): boolean

    // Own virtual methods of GXml-0.20.GXml.DomEventTarget

    addEventListener(type: string | null, callback: DomEventListener | null, capture: boolean): void
    removeEventListener(type: string | null, callback: DomEventListener | null, capture: boolean): void
    dispatchEvent(event: DomEvent): boolean

    // Class property signals of GXml-0.20.GXml.DomEventTarget

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomEventTarget {

    // Own properties of GXml-0.20.GXml.DomEventTarget

    static name: string

    // Constructors of GXml-0.20.GXml.DomEventTarget

    constructor(config?: DomEventTarget.ConstructorProperties) 
    _init(config?: DomEventTarget.ConstructorProperties): void
}

module DomEventListener {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEventListener extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomEventListener

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomEventListener

    // Has conflict: handleEvent(event: DomEvent): void

    // Own virtual methods of GXml-0.20.GXml.DomEventListener

    handleEvent(event: DomEvent): void

    // Class property signals of GXml-0.20.GXml.DomEventListener

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomEventListener {

    // Own properties of GXml-0.20.GXml.DomEventListener

    static name: string

    // Constructors of GXml-0.20.GXml.DomEventListener

    constructor(config?: DomEventListener.ConstructorProperties) 
    _init(config?: DomEventListener.ConstructorProperties): void
}

module DomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomEvent extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomEvent

    readonly etype: string | null
    readonly eventTarget: DomEventTarget
    readonly currentTarget: DomEventTarget
    readonly bubbles: boolean
    readonly cancelable: boolean
    readonly isTrusted: boolean
    readonly timeStamp: DomTimeStamp
    readonly defaultPrevented: boolean
    readonly eventPhase: DomEventPhase
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomEvent

    // Has conflict: getEtype(): string | null
    // Has conflict: getEventTarget(): DomEventTarget | null
    // Has conflict: getCurrentTarget(): DomEventTarget | null
    // Has conflict: getBubbles(): boolean
    // Has conflict: getCancelable(): boolean
    // Has conflict: getIsTrusted(): boolean
    // Has conflict: getTimeStamp(): DomTimeStamp
    // Has conflict: getDefaultPrevented(): boolean
    // Has conflict: getEventPhase(): DomEventPhase
    // Has conflict: stopPropagation(): void
    // Has conflict: stopImmediatePropagation(): void
    // Has conflict: preventDefault(): void
    // Has conflict: initEvent(type: string | null, bubbles: boolean, cancelable: boolean): void

    // Own virtual methods of GXml-0.20.GXml.DomEvent

    getEtype(): string | null
    getEventTarget(): DomEventTarget | null
    getCurrentTarget(): DomEventTarget | null
    getBubbles(): boolean
    getCancelable(): boolean
    getIsTrusted(): boolean
    getTimeStamp(): DomTimeStamp
    getDefaultPrevented(): boolean
    getEventPhase(): DomEventPhase
    stopPropagation(): void
    stopImmediatePropagation(): void
    preventDefault(): void
    initEvent(type: string | null, bubbles: boolean, cancelable: boolean): void

    // Class property signals of GXml-0.20.GXml.DomEvent

    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomEvent {

    // Own properties of GXml-0.20.GXml.DomEvent

    static name: string

    // Constructors of GXml-0.20.GXml.DomEvent

    constructor(config?: DomEvent.ConstructorProperties) 
    _init(config?: DomEvent.ConstructorProperties): void
}

module DomCustomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomEvent.ConstructorProperties {
    }

}

interface DomCustomEvent extends GObject.Object, DomEvent {

    // Own properties of GXml-0.20.GXml.DomCustomEvent

    readonly detail: any
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomCustomEvent

    // Has conflict: getDetail(): /* result */ any
    // Has conflict: initCustomEvent(type: string | null, bubbles: boolean, cancelable: boolean, detail: any): void

    // Own virtual methods of GXml-0.20.GXml.DomCustomEvent

    getDetail(): /* result */ any
    initCustomEvent(type: string | null, bubbles: boolean, cancelable: boolean, detail: any): void

    // Class property signals of GXml-0.20.GXml.DomCustomEvent

    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomCustomEvent {

    // Own properties of GXml-0.20.GXml.DomCustomEvent

    static name: string

    // Constructors of GXml-0.20.GXml.DomCustomEvent

    constructor(config?: DomCustomEvent.ConstructorProperties) 
    _init(config?: DomCustomEvent.ConstructorProperties): void
}

module DomMutationObserver {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomMutationObserver extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomMutationObserver

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomMutationObserver

    // Has conflict: observe(target: Node, options: DomMutationObserverInit): void
    // Has conflict: disconnect(): void
    // Has conflict: takeRecords(): Gee.List

    // Own virtual methods of GXml-0.20.GXml.DomMutationObserver

    observe(target: Node, options: DomMutationObserverInit): void
    disconnect(): void
    takeRecords(): Gee.List

    // Class property signals of GXml-0.20.GXml.DomMutationObserver

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomMutationObserver {

    // Own properties of GXml-0.20.GXml.DomMutationObserver

    static name: string

    // Constructors of GXml-0.20.GXml.DomMutationObserver

    constructor(config?: DomMutationObserver.ConstructorProperties) 
    _init(config?: DomMutationObserver.ConstructorProperties): void
}

module DomMutationRecord {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomMutationRecord

        addedNodes?: DomNodeList | null
        removedNodes?: DomNodeList | null
    }

}

interface DomMutationRecord extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomMutationRecord

    readonly mtype: string | null
    readonly target: DomNode
    addedNodes: DomNodeList
    removedNodes: DomNodeList
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    readonly attributeName: string | null
    readonly attributeNamespace: string | null
    readonly oldValue: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomMutationRecord

    // Has conflict: getMtype(): string | null
    // Has conflict: getTarget(): DomNode
    // Has conflict: getAddedNodes(): DomNodeList
    // Has conflict: setAddedNodes(value: DomNodeList): void
    // Has conflict: getRemovedNodes(): DomNodeList
    // Has conflict: setRemovedNodes(value: DomNodeList): void
    // Has conflict: getPreviousSibling(): DomNode | null
    // Has conflict: getNextSibling(): DomNode | null
    // Has conflict: getAttributeName(): string | null
    // Has conflict: getAttributeNamespace(): string | null
    // Has conflict: getOldValue(): string | null

    // Own virtual methods of GXml-0.20.GXml.DomMutationRecord

    getMtype(): string | null
    getTarget(): DomNode
    getAddedNodes(): DomNodeList
    setAddedNodes(value: DomNodeList): void
    getRemovedNodes(): DomNodeList
    setRemovedNodes(value: DomNodeList): void
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getAttributeName(): string | null
    getAttributeNamespace(): string | null
    getOldValue(): string | null

    // Class property signals of GXml-0.20.GXml.DomMutationRecord

    connect(sigName: "notify::mtype", callback: (...args: any[]) => void): number
    on(sigName: "notify::mtype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mtype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mtype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mtype", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::added-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::added-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::added-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::added-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::added-nodes", ...args: any[]): void
    connect(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::removed-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::removed-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::removed-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::removed-nodes", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::attribute-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-name", ...args: any[]): void
    connect(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-namespace", ...args: any[]): void
    connect(sigName: "notify::old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::old-value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomMutationRecord {

    // Own properties of GXml-0.20.GXml.DomMutationRecord

    static name: string

    // Constructors of GXml-0.20.GXml.DomMutationRecord

    constructor(config?: DomMutationRecord.ConstructorProperties) 
    _init(config?: DomMutationRecord.ConstructorProperties): void
}

module DomNode {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomEventTarget.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomNode

        ownerDocument?: DomDocument | null
        nodeValue?: string | null
        textContent?: string | null
    }

}

interface DomNode extends GObject.Object, DomEventTarget {

    // Own properties of GXml-0.20.GXml.DomNode

    readonly nodeType: DomNodeNodeType
    readonly nodeName: string | null
    readonly baseUri: string | null
    ownerDocument: DomDocument
    readonly parentNode: DomNode
    readonly parentElement: DomElement
    readonly childNodes: DomNodeList
    readonly firstChild: DomNode
    readonly lastChild: DomNode
    readonly previousSibling: DomNode
    readonly nextSibling: DomNode
    nodeValue: string | null
    textContent: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomNode

    // Has conflict: getNodeType(): DomNodeNodeType
    // Has conflict: getNodeName(): string | null
    // Has conflict: getBaseUri(): string | null
    // Has conflict: getOwnerDocument(): DomDocument | null
    // Has conflict: setOwnerDocument(value: DomDocument | null): void
    // Has conflict: getParentNode(): DomNode | null
    // Has conflict: getParentElement(): DomElement | null
    // Has conflict: getChildNodes(): DomNodeList
    // Has conflict: getFirstChild(): DomNode | null
    // Has conflict: getLastChild(): DomNode | null
    // Has conflict: getPreviousSibling(): DomNode | null
    // Has conflict: getNextSibling(): DomNode | null
    // Has conflict: getNodeValue(): string | null
    // Has conflict: setNodeValue(value: string | null): void
    // Has conflict: getTextContent(): string | null
    // Has conflict: setTextContent(value: string | null): void
    // Has conflict: hasChildNodes(): boolean
    // Has conflict: normalize(): void
    // Has conflict: isEqualNode(node: DomNode | null): boolean
    // Has conflict: compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    // Has conflict: contains(other: DomNode | null): boolean
    // Has conflict: lookupPrefix(nspace: string | null): string | null
    // Has conflict: lookupNamespaceUri(prefix: string | null): string | null
    // Has conflict: isDefaultNamespace(nspace: string | null): boolean
    // Has conflict: insertBefore(node: DomNode, child: DomNode | null): DomNode
    // Has conflict: appendChild(node: DomNode): DomNode
    // Has conflict: replaceChild(node: DomNode, child: DomNode): DomNode
    // Has conflict: removeChild(child: DomNode): DomNode

    // Own virtual methods of GXml-0.20.GXml.DomNode

    getNodeType(): DomNodeNodeType
    getNodeName(): string | null
    getBaseUri(): string | null
    getOwnerDocument(): DomDocument | null
    setOwnerDocument(value: DomDocument | null): void
    getParentNode(): DomNode | null
    getParentElement(): DomElement | null
    getChildNodes(): DomNodeList
    getFirstChild(): DomNode | null
    getLastChild(): DomNode | null
    getPreviousSibling(): DomNode | null
    getNextSibling(): DomNode | null
    getNodeValue(): string | null
    setNodeValue(value: string | null): void
    getTextContent(): string | null
    setTextContent(value: string | null): void
    hasChildNodes(): boolean
    normalize(): void
    isEqualNode(node: DomNode | null): boolean
    compareDocumentPosition(other: DomNode): DomNodeDocumentPosition
    contains(other: DomNode | null): boolean
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    isDefaultNamespace(nspace: string | null): boolean
    insertBefore(node: DomNode, child: DomNode | null): DomNode
    appendChild(node: DomNode): DomNode
    replaceChild(node: DomNode, child: DomNode): DomNode
    removeChild(child: DomNode): DomNode

    // Class property signals of GXml-0.20.GXml.DomNode

    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNode {

    // Own properties of GXml-0.20.GXml.DomNode

    static name: string

    // Constructors of GXml-0.20.GXml.DomNode

    constructor(config?: DomNode.ConstructorProperties) 
    _init(config?: DomNode.ConstructorProperties): void
    static copy(doc: DomDocument, node: DomNode, source: DomNode, deep: boolean): boolean
}

module DomRange {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomRange extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomRange

    readonly startContainer: DomNode
    readonly startOffset: number
    readonly endContainer: DomNode
    readonly endOffset: number
    readonly collapsed: boolean
    readonly commonAncestorContainer: DomNode
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomRange

    // Has conflict: getStartContainer(): DomNode
    // Has conflict: getStartOffset(): number
    // Has conflict: getEndContainer(): DomNode
    // Has conflict: getEndOffset(): number
    // Has conflict: getCollapsed(): boolean
    // Has conflict: getCommonAncestorContainer(): DomNode
    // Has conflict: setStart(node: DomNode, offset: number): void
    // Has conflict: setEnd(node: DomNode, offset: number): void
    // Has conflict: setStartBefore(node: DomNode): void
    // Has conflict: setStartAfter(node: DomNode): void
    // Has conflict: setEndBefore(node: DomNode): void
    // Has conflict: setEndAfter(node: DomNode): void
    // Has conflict: collapse(toStart: boolean): void
    // Has conflict: selectNode(node: DomNode): void
    // Has conflict: selectNodeContents(node: DomNode): void
    // Has conflict: compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    // Has conflict: deleteContents(): void
    // Has conflict: extractContents(): DomDocumentFragment | null
    // Has conflict: cloneContents(): DomDocumentFragment | null
    // Has conflict: insertNode(node: DomNode): void
    // Has conflict: surroundContents(newParent: DomNode): void
    // Has conflict: cloneRange(): DomRange
    // Has conflict: detach(): void
    // Has conflict: isPointInRange(node: DomNode, offset: number): boolean
    // Has conflict: comparePoint(node: DomNode, offset: number): number
    // Has conflict: intersectsNode(node: DomNode): boolean
    // Has conflict: toString(): string | null

    // Own virtual methods of GXml-0.20.GXml.DomRange

    getStartContainer(): DomNode
    getStartOffset(): number
    getEndContainer(): DomNode
    getEndOffset(): number
    getCollapsed(): boolean
    getCommonAncestorContainer(): DomNode
    setStart(node: DomNode, offset: number): void
    setEnd(node: DomNode, offset: number): void
    setStartBefore(node: DomNode): void
    setStartAfter(node: DomNode): void
    setEndBefore(node: DomNode): void
    setEndAfter(node: DomNode): void
    collapse(toStart: boolean): void
    selectNode(node: DomNode): void
    selectNodeContents(node: DomNode): void
    compareBoundaryPoints(how: DomRangeBoundaryPoints, sourceRange: DomRange): number
    deleteContents(): void
    extractContents(): DomDocumentFragment | null
    cloneContents(): DomDocumentFragment | null
    insertNode(node: DomNode): void
    surroundContents(newParent: DomNode): void
    cloneRange(): DomRange
    detach(): void
    isPointInRange(node: DomNode, offset: number): boolean
    comparePoint(node: DomNode, offset: number): number
    intersectsNode(node: DomNode): boolean
    toString(): string | null

    // Class property signals of GXml-0.20.GXml.DomRange

    connect(sigName: "notify::start-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-container", ...args: any[]): void
    connect(sigName: "notify::start-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-offset", ...args: any[]): void
    connect(sigName: "notify::end-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-container", ...args: any[]): void
    connect(sigName: "notify::end-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-offset", ...args: any[]): void
    connect(sigName: "notify::collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::common-ancestor-container", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomRange {

    // Own properties of GXml-0.20.GXml.DomRange

    static name: string

    // Constructors of GXml-0.20.GXml.DomRange

    constructor(config?: DomRange.ConstructorProperties) 
    _init(config?: DomRange.ConstructorProperties): void
}

module IXsdSchema {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdSchema

        elementDefinitions?: IXsdListElements | null
        simpleTypeDefinitions?: IXsdListSimpleTypes | null
        complexTypeDefinitions?: IXsdListComplexTypes | null
    }

}

interface IXsdSchema extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.IXsdSchema

    elementDefinitions: IXsdListElements
    simpleTypeDefinitions: IXsdListSimpleTypes
    complexTypeDefinitions: IXsdListComplexTypes
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdSchema

    // Has conflict: getElementDefinitions(): IXsdListElements
    // Has conflict: setElementDefinitions(value: IXsdListElements): void
    // Has conflict: getSimpleTypeDefinitions(): IXsdListSimpleTypes
    // Has conflict: setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    // Has conflict: getComplexTypeDefinitions(): IXsdListComplexTypes
    // Has conflict: setComplexTypeDefinitions(value: IXsdListComplexTypes): void

    // Own virtual methods of GXml-0.20.GXml.IXsdSchema

    getElementDefinitions(): IXsdListElements
    setElementDefinitions(value: IXsdListElements): void
    getSimpleTypeDefinitions(): IXsdListSimpleTypes
    setSimpleTypeDefinitions(value: IXsdListSimpleTypes): void
    getComplexTypeDefinitions(): IXsdListComplexTypes
    setComplexTypeDefinitions(value: IXsdListComplexTypes): void

    // Class property signals of GXml-0.20.GXml.IXsdSchema

    connect(sigName: "notify::element-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element-definitions", ...args: any[]): void
    connect(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type-definitions", ...args: any[]): void
    connect(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type-definitions", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdSchema {

    // Own properties of GXml-0.20.GXml.IXsdSchema

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdSchema

    constructor(config?: IXsdSchema.ConstructorProperties) 
    _init(config?: IXsdSchema.ConstructorProperties): void
}

module IXsdBaseType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdBaseType

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseType extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdBaseType

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdBaseType

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.20.GXml.IXsdBaseType

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.20.GXml.IXsdBaseType

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdBaseType {

    // Own properties of GXml-0.20.GXml.IXsdBaseType

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdBaseType

    constructor(config?: IXsdBaseType.ConstructorProperties) 
    _init(config?: IXsdBaseType.ConstructorProperties): void
}

module IXsdSimpleType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties, IXsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdSimpleType

        final?: string | null
        id?: string | null
        name?: string | null
        annotation?: IXsdAnnotation | null
        list?: IXsdTypeList | null
        union?: IXsdTypeUnion | null
        restriction?: IXsdTypeRestriction | null
    }

}

interface IXsdSimpleType extends GObject.Object, DomElement, IXsdBaseType {

    // Own properties of GXml-0.20.GXml.IXsdSimpleType

    final: string | null
    id: string | null
    name: string | null
    annotation: IXsdAnnotation
    list: IXsdTypeList
    union: IXsdTypeUnion
    restriction: IXsdTypeRestriction
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdSimpleType

    // Has conflict: getFinal(): string | null
    // Has conflict: setFinal(value: string | null): void
    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getName(): string | null
    // Has conflict: setName(value: string | null): void
    // Has conflict: getAnnotation(): IXsdAnnotation
    // Has conflict: setAnnotation(value: IXsdAnnotation): void
    // Has conflict: getList(): IXsdTypeList
    // Has conflict: setList(value: IXsdTypeList): void
    // Has conflict: getUnion(): IXsdTypeUnion
    // Has conflict: setUnion(value: IXsdTypeUnion): void
    // Has conflict: getRestriction(): IXsdTypeRestriction
    // Has conflict: setRestriction(value: IXsdTypeRestriction): void

    // Own virtual methods of GXml-0.20.GXml.IXsdSimpleType

    getFinal(): string | null
    setFinal(value: string | null): void
    getId(): string | null

    // Overloads of getId

    getId(): string | null
    setId(value: string | null): void

    // Overloads of setId

    setId(value: string | null): void
    getName(): string | null
    setName(value: string | null): void
    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void
    getList(): IXsdTypeList
    setList(value: IXsdTypeList): void
    getUnion(): IXsdTypeUnion
    setUnion(value: IXsdTypeUnion): void
    getRestriction(): IXsdTypeRestriction
    setRestriction(value: IXsdTypeRestriction): void

    // Class property signals of GXml-0.20.GXml.IXsdSimpleType

    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::list", callback: (...args: any[]) => void): number
    on(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::list", ...args: any[]): void
    connect(sigName: "notify::union", callback: (...args: any[]) => void): number
    on(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::union", ...args: any[]): void
    connect(sigName: "notify::restriction", callback: (...args: any[]) => void): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::restriction", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdSimpleType {

    // Own properties of GXml-0.20.GXml.IXsdSimpleType

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdSimpleType

    constructor(config?: IXsdSimpleType.ConstructorProperties) 
    _init(config?: IXsdSimpleType.ConstructorProperties): void
}

module IXsdTypeDef {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdTypeDef extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdTypeDef

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeDef

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeDef

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeDef

    constructor(config?: IXsdTypeDef.ConstructorProperties) 
    _init(config?: IXsdTypeDef.ConstructorProperties): void
}

module IXsdTypeRestriction {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdTypeRestriction

        base?: string | null
        id?: string | null
        simpleType?: IXsdSimpleType | null
        enumerations?: IXsdListTypeRestrictionEnumerations | null
        whiteSpaces?: IXsdListTypeRestrictionWhiteSpaces | null
    }

}

interface IXsdTypeRestriction extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestriction

    base: string | null
    id: string | null
    simpleType: IXsdSimpleType
    enumerations: IXsdListTypeRestrictionEnumerations
    whiteSpaces: IXsdListTypeRestrictionWhiteSpaces
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdTypeRestriction

    // Has conflict: getBase(): string | null
    // Has conflict: setBase(value: string | null): void
    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getSimpleType(): IXsdSimpleType
    // Has conflict: setSimpleType(value: IXsdSimpleType): void
    // Has conflict: getEnumerations(): IXsdListTypeRestrictionEnumerations
    // Has conflict: setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    // Has conflict: getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    // Has conflict: setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void

    // Own virtual methods of GXml-0.20.GXml.IXsdTypeRestriction

    getBase(): string | null
    setBase(value: string | null): void
    getId(): string | null
    setId(value: string | null): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getEnumerations(): IXsdListTypeRestrictionEnumerations
    setEnumerations(value: IXsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: IXsdListTypeRestrictionWhiteSpaces): void

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestriction

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::enumerations", callback: (...args: any[]) => void): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enumerations", ...args: any[]): void
    connect(sigName: "notify::white-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::white-spaces", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestriction {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestriction

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestriction

    constructor(config?: IXsdTypeRestriction.ConstructorProperties) 
    _init(config?: IXsdTypeRestriction.ConstructorProperties): void
}

module IXsdTypeList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {
    }

}

interface IXsdTypeList extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeList

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeList {

    // Own properties of GXml-0.20.GXml.IXsdTypeList

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeList

    constructor(config?: IXsdTypeList.ConstructorProperties) 
    _init(config?: IXsdTypeList.ConstructorProperties): void
}

module IXsdTypeUnion {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeDef.ConstructorProperties {
    }

}

interface IXsdTypeUnion extends GObject.Object, IXsdTypeDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeUnion

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeUnion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeUnion {

    // Own properties of GXml-0.20.GXml.IXsdTypeUnion

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeUnion

    constructor(config?: IXsdTypeUnion.ConstructorProperties) 
    _init(config?: IXsdTypeUnion.ConstructorProperties): void
}

module IXsdTypeRestrictionDef {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdTypeRestrictionDef

        annotation?: IXsdAnnotation | null
    }

}

interface IXsdTypeRestrictionDef extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionDef

    annotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdTypeRestrictionDef

    // Has conflict: getAnnotation(): IXsdAnnotation
    // Has conflict: setAnnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.20.GXml.IXsdTypeRestrictionDef

    getAnnotation(): IXsdAnnotation
    setAnnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionDef

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionDef

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionDef

    constructor(config?: IXsdTypeRestrictionDef.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionDef.ConstructorProperties): void
}

module IXsdTypeRestrictionMinExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinExclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinExclusive

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMinExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMinExclusive {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinExclusive

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMinExclusive

    constructor(config?: IXsdTypeRestrictionMinExclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinExclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMinInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinInclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinInclusive

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMinInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMinInclusive {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinInclusive

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMinInclusive

    constructor(config?: IXsdTypeRestrictionMinInclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinInclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxExclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxExclusive

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMaxExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMaxExclusive {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxExclusive

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMaxExclusive

    constructor(config?: IXsdTypeRestrictionMaxExclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxExclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxInclusive extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxInclusive

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMaxInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMaxInclusive {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxInclusive

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMaxInclusive

    constructor(config?: IXsdTypeRestrictionMaxInclusive.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxInclusive.ConstructorProperties): void
}

module IXsdTypeRestrictionTotalDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionTotalDigits extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionTotalDigits

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionTotalDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionTotalDigits {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionTotalDigits

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionTotalDigits

    constructor(config?: IXsdTypeRestrictionTotalDigits.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionTotalDigits.ConstructorProperties): void
}

module IXsdTypeRestrictionFractionDigits {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionFractionDigits extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionFractionDigits

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionFractionDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionFractionDigits {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionFractionDigits

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionFractionDigits

    constructor(config?: IXsdTypeRestrictionFractionDigits.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionFractionDigits.ConstructorProperties): void
}

module IXsdTypeRestrictionLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionLength

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionLength {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionLength

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionLength

    constructor(config?: IXsdTypeRestrictionLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionLength.ConstructorProperties): void
}

module IXsdTypeRestrictionMinLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMinLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinLength

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMinLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMinLength {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinLength

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMinLength

    constructor(config?: IXsdTypeRestrictionMinLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMinLength.ConstructorProperties): void
}

module IXsdTypeRestrictionMaxLength {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionMaxLength extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxLength

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionMaxLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionMaxLength {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxLength

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionMaxLength

    constructor(config?: IXsdTypeRestrictionMaxLength.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionMaxLength.ConstructorProperties): void
}

module IXsdTypeRestrictionEnumeration {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

        id?: string | null
        value?: string | null
    }

}

interface IXsdTypeRestrictionEnumeration extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    id: string | null
    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void

    // Own virtual methods of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    getId(): string | null
    setId(value: string | null): void
    getValue(): string | null
    setValue(value: string | null): void

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionEnumeration {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionEnumeration

    constructor(config?: IXsdTypeRestrictionEnumeration.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionEnumeration.ConstructorProperties): void
}

module IXsdTypeRestrictionWhiteSpace {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

        fixed?: boolean | null
        id?: string | null
        value?: string | null
    }

}

interface IXsdTypeRestrictionWhiteSpace extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    fixed: boolean
    id: string | null
    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    // Has conflict: getFixed(): boolean
    // Has conflict: setFixed(value: boolean): void
    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void

    // Own virtual methods of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    getFixed(): boolean
    setFixed(value: boolean): void
    getId(): string | null
    setId(value: string | null): void
    getValue(): string | null
    setValue(value: string | null): void

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionWhiteSpace {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpace

    constructor(config?: IXsdTypeRestrictionWhiteSpace.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionWhiteSpace.ConstructorProperties): void
}

module IXsdTypeRestrictionPattern {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionPattern extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionPattern

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionPattern

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionPattern {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionPattern

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionPattern

    constructor(config?: IXsdTypeRestrictionPattern.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionPattern.ConstructorProperties): void
}

module IXsdTypeRestrictionAssertion {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionAssertion extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionAssertion

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionAssertion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionAssertion {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionAssertion

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionAssertion

    constructor(config?: IXsdTypeRestrictionAssertion.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionAssertion.ConstructorProperties): void
}

module IXsdTypeRestrictionExplicitTimezone {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface IXsdTypeRestrictionExplicitTimezone extends GObject.Object, IXsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionExplicitTimezone

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdTypeRestrictionExplicitTimezone

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdTypeRestrictionExplicitTimezone {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionExplicitTimezone

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdTypeRestrictionExplicitTimezone

    constructor(config?: IXsdTypeRestrictionExplicitTimezone.ConstructorProperties) 
    _init(config?: IXsdTypeRestrictionExplicitTimezone.ConstructorProperties): void
}

module IXsdComplexType {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties, IXsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdComplexType

        abstract?: boolean | null
        block?: string | null
        final?: string | null
        mixed?: boolean | null
        name?: string | null
        defaultAttributesApply?: boolean | null
        contentType?: IXsdBaseContent | null
    }

}

interface IXsdComplexType extends GObject.Object, DomElement, IXsdBaseType {

    // Own properties of GXml-0.20.GXml.IXsdComplexType

    abstract: boolean
    block: string | null
    final: string | null
    mixed: boolean
    name: string | null
    defaultAttributesApply: boolean
    contentType: IXsdBaseContent
    readonly typeAttributes: IXsdListAttributes
    readonly groupAttributes: IXsdListAttributesGroup
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdComplexType

    // Has conflict: getAbstract(): boolean
    // Has conflict: setAbstract(value: boolean): void
    // Has conflict: getBlock(): string | null
    // Has conflict: setBlock(value: string | null): void
    // Has conflict: getFinal(): string | null
    // Has conflict: setFinal(value: string | null): void
    // Has conflict: getMixed(): boolean
    // Has conflict: setMixed(value: boolean): void
    // Has conflict: getName(): string | null
    // Has conflict: setName(value: string | null): void
    // Has conflict: getDefaultAttributesApply(): boolean
    // Has conflict: setDefaultAttributesApply(value: boolean): void
    // Has conflict: getContentType(): IXsdBaseContent
    // Has conflict: setContentType(value: IXsdBaseContent): void
    // Has conflict: getTypeAttributes(): IXsdListAttributes
    // Has conflict: getGroupAttributes(): IXsdListAttributesGroup

    // Own virtual methods of GXml-0.20.GXml.IXsdComplexType

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string | null
    setBlock(value: string | null): void
    getFinal(): string | null
    setFinal(value: string | null): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string | null
    setName(value: string | null): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): IXsdBaseContent
    setContentType(value: IXsdBaseContent): void
    getTypeAttributes(): IXsdListAttributes
    getGroupAttributes(): IXsdListAttributesGroup

    // Class property signals of GXml-0.20.GXml.IXsdComplexType

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::mixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mixed", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-attributes-apply", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::type-attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-attributes", ...args: any[]): void
    connect(sigName: "notify::group-attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::group-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::group-attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::group-attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::group-attributes", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdComplexType {

    // Own properties of GXml-0.20.GXml.IXsdComplexType

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdComplexType

    constructor(config?: IXsdComplexType.ConstructorProperties) 
    _init(config?: IXsdComplexType.ConstructorProperties): void
}

module IXsdExtension {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdExtension

        base?: string | null
    }

}

interface IXsdExtension extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.IXsdExtension

    base: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdExtension

    // Has conflict: getBase(): string | null
    // Has conflict: setBase(value: string | null): void

    // Own virtual methods of GXml-0.20.GXml.IXsdExtension

    getBase(): string | null
    setBase(value: string | null): void

    // Class property signals of GXml-0.20.GXml.IXsdExtension

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdExtension {

    // Own properties of GXml-0.20.GXml.IXsdExtension

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdExtension

    constructor(config?: IXsdExtension.ConstructorProperties) 
    _init(config?: IXsdExtension.ConstructorProperties): void
}

module IXsdElement {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomElement.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdElement

        abstract?: boolean | null
        block?: string | null
        "default"?: string | null
        final?: string | null
        fixed?: string | null
        form?: string | null
        id?: string | null
        maxOccurs?: string | null
        minOccurs?: string | null
        name?: string | null
        nillable?: boolean | null
        ref?: string | null
        substitutionGroup?: DomTokenList | null
        targetNamespace?: string | null
        objectType?: string | null
        anotation?: IXsdAnnotation | null
        simpleType?: IXsdSimpleType | null
        complexType?: IXsdComplexType | null
    }

}

interface IXsdElement extends GObject.Object, DomElement {

    // Own properties of GXml-0.20.GXml.IXsdElement

    abstract: boolean
    block: string | null
    "default": string | null
    final: string | null
    fixed: string | null
    form: string | null
    id: string | null
    maxOccurs: string | null
    minOccurs: string | null
    name: string | null
    nillable: boolean
    // Has conflict: ref: string | null
    substitutionGroup: DomTokenList
    targetNamespace: string | null
    objectType: string | null
    anotation: IXsdAnnotation
    simpleType: IXsdSimpleType
    complexType: IXsdComplexType
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdElement

    // Has conflict: getAbstract(): boolean
    // Has conflict: setAbstract(value: boolean): void
    // Has conflict: getBlock(): string | null
    // Has conflict: setBlock(value: string | null): void
    // Has conflict: getDefault(): string | null
    // Has conflict: setDefault(value: string | null): void
    // Has conflict: getFinal(): string | null
    // Has conflict: setFinal(value: string | null): void
    // Has conflict: getFixed(): string | null
    // Has conflict: setFixed(value: string | null): void
    // Has conflict: getForm(): string | null
    // Has conflict: setForm(value: string | null): void
    // Has conflict: getId(): string | null
    // Has conflict: setId(value: string | null): void
    // Has conflict: getMaxOccurs(): string | null
    // Has conflict: setMaxOccurs(value: string | null): void
    // Has conflict: getMinOccurs(): string | null
    // Has conflict: setMinOccurs(value: string | null): void
    // Has conflict: getName(): string | null
    // Has conflict: setName(value: string | null): void
    // Has conflict: getNillable(): boolean
    // Has conflict: setNillable(value: boolean): void
    // Has conflict: getRef(): string | null
    // Has conflict: setRef(value: string | null): void
    // Has conflict: getSubstitutionGroup(): DomTokenList
    // Has conflict: setSubstitutionGroup(value: DomTokenList): void
    // Has conflict: getTargetNamespace(): string | null
    // Has conflict: setTargetNamespace(value: string | null): void
    // Has conflict: getObjectType(): string | null
    // Has conflict: setObjectType(value: string | null): void
    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void
    // Has conflict: getSimpleType(): IXsdSimpleType
    // Has conflict: setSimpleType(value: IXsdSimpleType): void
    // Has conflict: getComplexType(): IXsdComplexType
    // Has conflict: setComplexType(value: IXsdComplexType): void

    // Own virtual methods of GXml-0.20.GXml.IXsdElement

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string | null
    setBlock(value: string | null): void
    getDefault(): string | null
    setDefault(value: string | null): void
    getFinal(): string | null
    setFinal(value: string | null): void
    getFixed(): string | null
    setFixed(value: string | null): void
    getForm(): string | null
    setForm(value: string | null): void
    getId(): string | null

    // Overloads of getId

    getId(): string | null
    setId(value: string | null): void

    // Overloads of setId

    setId(value: string | null): void
    getMaxOccurs(): string | null
    setMaxOccurs(value: string | null): void
    getMinOccurs(): string | null
    setMinOccurs(value: string | null): void
    getName(): string | null
    setName(value: string | null): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string | null
    setRef(value: string | null): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string | null
    setTargetNamespace(value: string | null): void
    getObjectType(): string | null
    setObjectType(value: string | null): void
    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void
    getSimpleType(): IXsdSimpleType
    setSimpleType(value: IXsdSimpleType): void
    getComplexType(): IXsdComplexType
    setComplexType(value: IXsdComplexType): void

    // Class property signals of GXml-0.20.GXml.IXsdElement

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::default", callback: (...args: any[]) => void): number
    on(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::maxOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::maxOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::maxOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::maxOccurs", ...args: any[]): void
    connect(sigName: "notify::minOccurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::minOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::minOccurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::minOccurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::minOccurs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::nillable", callback: (...args: any[]) => void): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nillable", ...args: any[]): void
    connect(sigName: "notify::ref", callback: (...args: any[]) => void): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ref", ...args: any[]): void
    connect(sigName: "notify::substitution-group", callback: (...args: any[]) => void): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::substitution-group", ...args: any[]): void
    connect(sigName: "notify::target-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target-namespace", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::complex-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdElement {

    // Own properties of GXml-0.20.GXml.IXsdElement

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdElement

    constructor(config?: IXsdElement.ConstructorProperties) 
    _init(config?: IXsdElement.ConstructorProperties): void
}

module IXsdAnnotation {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAnnotation extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdAnnotation

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdAnnotation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdAnnotation {

    // Own properties of GXml-0.20.GXml.IXsdAnnotation

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdAnnotation

    constructor(config?: IXsdAnnotation.ConstructorProperties) 
    _init(config?: IXsdAnnotation.ConstructorProperties): void
}

module IXsdBaseContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdBaseContent

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseContent extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdBaseContent

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdBaseContent

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.20.GXml.IXsdBaseContent

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.20.GXml.IXsdBaseContent

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdBaseContent {

    // Own properties of GXml-0.20.GXml.IXsdBaseContent

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdBaseContent

    constructor(config?: IXsdBaseContent.ConstructorProperties) 
    _init(config?: IXsdBaseContent.ConstructorProperties): void
}

module IXsdSimpleContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdSimpleContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.20.GXml.IXsdSimpleContent

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdSimpleContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdSimpleContent {

    // Own properties of GXml-0.20.GXml.IXsdSimpleContent

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdSimpleContent

    constructor(config?: IXsdSimpleContent.ConstructorProperties) 
    _init(config?: IXsdSimpleContent.ConstructorProperties): void
}

module IXsdComplexContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdComplexContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.20.GXml.IXsdComplexContent

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdComplexContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdComplexContent {

    // Own properties of GXml-0.20.GXml.IXsdComplexContent

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdComplexContent

    constructor(config?: IXsdComplexContent.ConstructorProperties) 
    _init(config?: IXsdComplexContent.ConstructorProperties): void
}

module IXsdOpenContent {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdBaseContent.ConstructorProperties {
    }

}

interface IXsdOpenContent extends GObject.Object, IXsdBaseContent {

    // Own properties of GXml-0.20.GXml.IXsdOpenContent

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdOpenContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdOpenContent {

    // Own properties of GXml-0.20.GXml.IXsdOpenContent

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdOpenContent

    constructor(config?: IXsdOpenContent.ConstructorProperties) 
    _init(config?: IXsdOpenContent.ConstructorProperties): void
}

module IXsdBaseAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdBaseAttribute

        anotation?: IXsdAnnotation | null
    }

}

interface IXsdBaseAttribute extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdBaseAttribute

    anotation: IXsdAnnotation
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdBaseAttribute

    // Has conflict: getAnotation(): IXsdAnnotation
    // Has conflict: setAnotation(value: IXsdAnnotation): void

    // Own virtual methods of GXml-0.20.GXml.IXsdBaseAttribute

    getAnotation(): IXsdAnnotation
    setAnotation(value: IXsdAnnotation): void

    // Class property signals of GXml-0.20.GXml.IXsdBaseAttribute

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdBaseAttribute {

    // Own properties of GXml-0.20.GXml.IXsdBaseAttribute

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdBaseAttribute

    constructor(config?: IXsdBaseAttribute.ConstructorProperties) 
    _init(config?: IXsdBaseAttribute.ConstructorProperties): void
}

module IXsdAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAttribute extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdAttribute

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdAttribute {

    // Own properties of GXml-0.20.GXml.IXsdAttribute

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdAttribute

    constructor(config?: IXsdAttribute.ConstructorProperties) 
    _init(config?: IXsdAttribute.ConstructorProperties): void
}

module IXsdAttributeGroup {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface IXsdAttributeGroup extends GObject.Object {

    // Own properties of GXml-0.20.GXml.IXsdAttributeGroup

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.IXsdAttributeGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdAttributeGroup {

    // Own properties of GXml-0.20.GXml.IXsdAttributeGroup

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdAttributeGroup

    constructor(config?: IXsdAttributeGroup.ConstructorProperties) 
    _init(config?: IXsdAttributeGroup.ConstructorProperties): void
}

module IXsdList {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, Collection.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.IXsdList

        element?: DomElement | null
        itemsType?: GObject.GType | null
        itemsName?: GObject.GType | null
    }

}

interface IXsdList extends GObject.Object, Collection {

    // Own properties of GXml-0.20.GXml.IXsdList

    element: DomElement
    itemsType: GObject.GType
    itemsName: any
    readonly length: number
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.IXsdList

    // Has conflict: getElement(): DomElement
    // Has conflict: setElement(value: DomElement): void
    // Has conflict: getItemsType(): GObject.GType
    // Has conflict: setItemsType(value: GObject.GType): void
    // Has conflict: getItemsName(): GObject.GType
    // Has conflict: setItemsName(value: GObject.GType): void
    // Has conflict: getLength(): number
    // Has conflict: getItem(index: number): DomElement | null
    // Has conflict: append(element: DomElement): void
    // Has conflict: remove(index: number): void
    // Has conflict: indexOf(element: DomElement): number

    // Own virtual methods of GXml-0.20.GXml.IXsdList

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    setItemsName(value: GObject.GType): void
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    remove(index: number): void
    indexOf(element: DomElement): number

    // Class property signals of GXml-0.20.GXml.IXsdList

    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdList

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdList

    constructor(config?: IXsdList.ConstructorProperties) 
    _init(config?: IXsdList.ConstructorProperties): void
}

module IXsdListElements {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListElements extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListElements

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListElements

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListElements {

    // Own properties of GXml-0.20.GXml.IXsdListElements

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListElements

    constructor(config?: IXsdListElements.ConstructorProperties) 
    _init(config?: IXsdListElements.ConstructorProperties): void
}

module IXsdListSimpleTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListSimpleTypes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListSimpleTypes

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListSimpleTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListSimpleTypes {

    // Own properties of GXml-0.20.GXml.IXsdListSimpleTypes

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListSimpleTypes

    constructor(config?: IXsdListSimpleTypes.ConstructorProperties) 
    _init(config?: IXsdListSimpleTypes.ConstructorProperties): void
}

module IXsdListComplexTypes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListComplexTypes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListComplexTypes

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListComplexTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListComplexTypes {

    // Own properties of GXml-0.20.GXml.IXsdListComplexTypes

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListComplexTypes

    constructor(config?: IXsdListComplexTypes.ConstructorProperties) 
    _init(config?: IXsdListComplexTypes.ConstructorProperties): void
}

module IXsdListAttributes {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListAttributes extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListAttributes

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListAttributes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListAttributes {

    // Own properties of GXml-0.20.GXml.IXsdListAttributes

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListAttributes

    constructor(config?: IXsdListAttributes.ConstructorProperties) 
    _init(config?: IXsdListAttributes.ConstructorProperties): void
}

module IXsdListAttributesGroup {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListAttributesGroup extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListAttributesGroup

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListAttributesGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListAttributesGroup {

    // Own properties of GXml-0.20.GXml.IXsdListAttributesGroup

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListAttributesGroup

    constructor(config?: IXsdListAttributesGroup.ConstructorProperties) 
    _init(config?: IXsdListAttributesGroup.ConstructorProperties): void
}

module IXsdListTypeRestrictionEnumerations {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListTypeRestrictionEnumerations extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionEnumerations

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListTypeRestrictionEnumerations

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListTypeRestrictionEnumerations {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionEnumerations

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListTypeRestrictionEnumerations

    constructor(config?: IXsdListTypeRestrictionEnumerations.ConstructorProperties) 
    _init(config?: IXsdListTypeRestrictionEnumerations.ConstructorProperties): void
}

module IXsdListTypeRestrictionWhiteSpaces {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, IXsdList.ConstructorProperties {
    }

}

interface IXsdListTypeRestrictionWhiteSpaces extends GObject.Object, IXsdList {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionWhiteSpaces

    __gtype__: number

    // Conflicting properties

    itemsName: any

    // Conflicting methods

    getElement(): DomElement

    // Overloads of getElement

    getElement(): DomElement
    getElement(): DomElement
    setElement(value: DomElement): void

    // Overloads of setElement

    setElement(value: DomElement): void
    setElement(value: DomElement): void
    getItemsType(): GObject.GType

    // Overloads of getItemsType

    getItemsType(): GObject.GType
    getItemsType(): GObject.GType
    setItemsType(value: GObject.GType): void

    // Overloads of setItemsType

    setItemsType(value: GObject.GType): void
    setItemsType(value: GObject.GType): void
    getItemsName(): GObject.GType

    // Overloads of getItemsName

    getItemsName(): string | null
    getItemsName(): string | null
    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    getItem(index: number): DomElement | null

    // Overloads of getItem

    getItem(index: number): DomElement | null
    getItem(index: number): DomElement | null
    append(element: DomElement): void

    // Overloads of append

    append(node: DomElement): void
    append(node: DomElement): void

    // Class property signals of GXml-0.20.GXml.IXsdListTypeRestrictionWhiteSpaces

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class IXsdListTypeRestrictionWhiteSpaces {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionWhiteSpaces

    static name: string

    // Constructors of GXml-0.20.GXml.IXsdListTypeRestrictionWhiteSpaces

    constructor(config?: IXsdListTypeRestrictionWhiteSpaces.ConstructorProperties) 
    _init(config?: IXsdListTypeRestrictionWhiteSpaces.ConstructorProperties): void
}

module Object {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties, DomNode.ConstructorProperties, DomElement.ConstructorProperties {
    }

}

interface Object extends GObject.Object, DomNode, DomElement {

    // Own properties of GXml-0.20.GXml.Object

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.Object

    // Has conflict: getPropertiesList(): GObject.ParamSpec[]
    // Has conflict: findPropertyName(nick: string | null): GObject.ParamSpec | null
    // Has conflict: findObjectPropertyName(pname: string | null): GObject.ParamSpec | null
    // Has conflict: getPropertyElementList(): GObject.ParamSpec[]
    // Has conflict: getPropertyString(prop: GObject.ParamSpec): string | null
    // Has conflict: getAttribute(name: string | null): string | null
    // Has conflict: findProperty(name: string | null): Property | null
    // Has conflict: setAttribute(name: string | null, val: string | null): boolean
    // Has conflict: getChild(name: string | null): DomElement | null
    // Has conflict: findElements(name: string | null): DomElementList
    // Has conflict: removeAttribute(name: string | null): boolean
    // Has conflict: setInstanceProperty(name: string | null): boolean
    // Has conflict: cleanPropertyElements(name: string | null): void

    // Own virtual methods of GXml-0.20.GXml.Object

    getPropertiesList(): GObject.ParamSpec[]
    findPropertyName(nick: string | null): GObject.ParamSpec | null
    findObjectPropertyName(pname: string | null): GObject.ParamSpec | null
    getPropertyElementList(): GObject.ParamSpec[]
    getPropertyString(prop: GObject.ParamSpec): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    findProperty(name: string | null): Property | null
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    getChild(name: string | null): DomElement | null
    findElements(name: string | null): DomElementList
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void
    setInstanceProperty(name: string | null): boolean
    cleanPropertyElements(name: string | null): void

    // Class property signals of GXml-0.20.GXml.Object

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Object {

    // Own properties of GXml-0.20.GXml.Object

    static name: string

    // Constructors of GXml-0.20.GXml.Object

    constructor(config?: Object.ConstructorProperties) 
    _init(config?: Object.ConstructorProperties): void
}

module Parser {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Parser

        backup?: boolean | null
        indent?: boolean | null
        cancellable?: Gio.Cancellable | null
    }

}

interface Parser extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Parser

    backup: boolean
    indent: boolean
    cancellable: Gio.Cancellable
    readonly node: DomNode
    readonly types: GLib.HashTable
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.Parser

    // Has conflict: getBackup(): boolean
    // Has conflict: setBackup(value: boolean): void
    // Has conflict: getIndent(): boolean
    // Has conflict: setIndent(value: boolean): void
    // Has conflict: getCancellable(): Gio.Cancellable | null
    // Has conflict: setCancellable(value: Gio.Cancellable | null): void
    // Has conflict: getNode(): DomNode
    // Has conflict: getTypes(): GLib.HashTable
    // Has conflict: writeFile(file: Gio.File): void
    // Has conflict: writeFileAsync(file: Gio.File, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeFileFinish(res: Gio.AsyncResult): void
    // Has conflict: writeString(): string | null
    // Has conflict: writeStringAsync(callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStringFinish(res: Gio.AsyncResult): string | null
    // Has conflict: writeStream(stream: Gio.OutputStream): void
    // Has conflict: writeStreamAsync(stream: Gio.OutputStream, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: writeStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: readFile(file: Gio.File): void
    // Has conflict: readFileAsync(file: Gio.File, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readFileFinish(res: Gio.AsyncResult): void
    // Has conflict: readStream(stream: Gio.InputStream): void
    // Has conflict: readStreamAsync(stream: Gio.InputStream, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readStreamFinish(res: Gio.AsyncResult): void
    // Has conflict: readString(str: string | null): void
    // Has conflict: readStringAsync(str: string | null, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readStringFinish(res: Gio.AsyncResult): void
    // Has conflict: createStream(): Gio.InputStream
    // Has conflict: createStreamAsync(callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    // Has conflict: readChildNodes(parent: DomNode): void
    // Has conflict: readChildNodesAsync(parent: DomNode, callback: Gio.AsyncReadyCallback | null): void
    // Has conflict: readChildNodesFinish(res: Gio.AsyncResult): void
    // Has conflict: readChildNode(parent: DomNode): boolean
    // Has conflict: readChildElement(parent: DomNode): boolean
    // Has conflict: readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    // Has conflict: addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    // Has conflict: readChildNodesStream(istream: Gio.InputStream): void
    // Has conflict: readChildNodesString(str: string | null): void
    // Has conflict: readUnparsed(): string | null
    // Has conflict: moveNextNode(): boolean
    // Has conflict: currentIsEmptyElement(): boolean
    // Has conflict: currentIsElement(): boolean
    // Has conflict: currentIsDocument(): boolean
    // Has conflict: currentNodeName(): string | null
    // Has conflict: createElement(parent: DomNode): DomElement | null
    // Has conflict: readElement(element: DomElement): void

    // Own virtual methods of GXml-0.20.GXml.Parser

    getBackup(): boolean
    setBackup(value: boolean): void
    getIndent(): boolean
    setIndent(value: boolean): void
    getCancellable(): Gio.Cancellable | null
    setCancellable(value: Gio.Cancellable | null): void
    getNode(): DomNode
    getTypes(): GLib.HashTable
    writeFile(file: Gio.File): void
    writeFileAsync(file: Gio.File, callback: Gio.AsyncReadyCallback | null): void
    writeFileFinish(res: Gio.AsyncResult): void
    writeString(): string | null
    writeStringAsync(callback: Gio.AsyncReadyCallback | null): void
    writeStringFinish(res: Gio.AsyncResult): string | null
    writeStream(stream: Gio.OutputStream): void
    writeStreamAsync(stream: Gio.OutputStream, callback: Gio.AsyncReadyCallback | null): void
    writeStreamFinish(res: Gio.AsyncResult): void
    readFile(file: Gio.File): void
    readFileAsync(file: Gio.File, callback: Gio.AsyncReadyCallback | null): void
    readFileFinish(res: Gio.AsyncResult): void
    readStream(stream: Gio.InputStream): void
    readStreamAsync(stream: Gio.InputStream, callback: Gio.AsyncReadyCallback | null): void
    readStreamFinish(res: Gio.AsyncResult): void
    readString(str: string | null): void
    readStringAsync(str: string | null, callback: Gio.AsyncReadyCallback | null): void
    readStringFinish(res: Gio.AsyncResult): void
    createStream(): Gio.InputStream
    createStreamAsync(callback: Gio.AsyncReadyCallback | null): void
    createStreamFinish(res: Gio.AsyncResult): Gio.InputStream
    readChildNodes(parent: DomNode): void
    readChildNodesAsync(parent: DomNode, callback: Gio.AsyncReadyCallback | null): void
    readChildNodesFinish(res: Gio.AsyncResult): void
    readChildNode(parent: DomNode): boolean
    readChildElement(parent: DomNode): boolean
    readElementProperty(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection(parent: DomNode): [ /* returnType */ boolean, /* element */ DomNode ]
    readChildNodesStream(istream: Gio.InputStream): void
    readChildNodesString(str: string | null): void
    readUnparsed(): string | null
    moveNextNode(): boolean
    currentIsEmptyElement(): boolean
    currentIsElement(): boolean
    currentIsDocument(): boolean
    currentNodeName(): string | null
    createElement(parent: DomNode): DomElement | null
    readElement(element: DomElement): void

    // Class property signals of GXml-0.20.GXml.Parser

    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::cancellable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancellable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancellable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancellable", ...args: any[]): void
    connect(sigName: "notify::node", callback: (...args: any[]) => void): number
    on(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node", ...args: any[]): void
    connect(sigName: "notify::types", callback: (...args: any[]) => void): number
    on(sigName: "notify::types", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::types", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::types", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Parser {

    // Own properties of GXml-0.20.GXml.Parser

    static name: string

    // Constructors of GXml-0.20.GXml.Parser

    constructor(config?: Parser.ConstructorProperties) 
    _init(config?: Parser.ConstructorProperties): void
}

module Property {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Property

        value?: string | null
    }

}

interface Property extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Property

    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.Property

    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void
    // Has conflict: validateValue(val: string | null): boolean

    // Own virtual methods of GXml-0.20.GXml.Property

    getValue(): string | null
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Property

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Property {

    // Own properties of GXml-0.20.GXml.Property

    static name: string

    // Constructors of GXml-0.20.GXml.Property

    constructor(config?: Property.ConstructorProperties) 
    _init(config?: Property.ConstructorProperties): void
}

module XPathContext {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface XPathContext extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XPathContext

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.XPathContext

    // Has conflict: evaluate(expression: string | null, resolver: Gee.Map | null): XPathObject

    // Own virtual methods of GXml-0.20.GXml.XPathContext

    evaluate(expression: string | null, resolver: Gee.Map | null): XPathObject

    // Class property signals of GXml-0.20.GXml.XPathContext

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XPathContext {

    // Own properties of GXml-0.20.GXml.XPathContext

    static name: string

    // Constructors of GXml-0.20.GXml.XPathContext

    constructor(config?: XPathContext.ConstructorProperties) 
    _init(config?: XPathContext.ConstructorProperties): void
}

module XPathObject {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface XPathObject extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XPathObject

    readonly objectType: XPathObjectType
    readonly booleanValue: boolean
    readonly stringValue: string | null
    readonly numberValue: number
    readonly nodeset: DomHTMLCollection
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.XPathObject

    // Has conflict: getObjectType(): XPathObjectType
    // Has conflict: getBooleanValue(): boolean
    // Has conflict: getStringValue(): string | null
    // Has conflict: getNumberValue(): number
    // Has conflict: getNodeset(): DomHTMLCollection

    // Own virtual methods of GXml-0.20.GXml.XPathObject

    getObjectType(): XPathObjectType
    getBooleanValue(): boolean
    getStringValue(): string | null
    getNumberValue(): number
    getNodeset(): DomHTMLCollection

    // Class property signals of GXml-0.20.GXml.XPathObject

    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::boolean-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::boolean-value", ...args: any[]): void
    connect(sigName: "notify::string-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::string-value", ...args: any[]): void
    connect(sigName: "notify::number-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::number-value", ...args: any[]): void
    connect(sigName: "notify::nodeset", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodeset", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XPathObject {

    // Own properties of GXml-0.20.GXml.XPathObject

    static name: string

    // Constructors of GXml-0.20.GXml.XPathObject

    constructor(config?: XPathObject.ConstructorProperties) 
    _init(config?: XPathObject.ConstructorProperties): void
}

module ArrayList {

    // Constructor properties interface

    interface ConstructorProperties extends List.ConstructorProperties, BaseCollection.ConstructorProperties {
    }

}

interface ArrayList extends List {

    // Own properties of GXml-0.20.GXml.ArrayList

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.ArrayList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ArrayList extends BaseCollection {

    // Own properties of GXml-0.20.GXml.ArrayList

    static name: string

    // Constructors of GXml-0.20.GXml.ArrayList

    constructor(config?: ArrayList.ConstructorProperties) 
    constructor() 
    static new(): ArrayList
    _init(config?: ArrayList.ConstructorProperties): void
}

module Attr {

    // Constructor properties interface

    interface ConstructorProperties extends DomAttr.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface Attr extends DomAttr {

    // Own properties of GXml-0.20.GXml.Attr

    readonly isReferenced: boolean
    __gtype__: number

    // Conflicting properties

    prefix: any
    localName: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.20.GXml.Attr

    namespaceUri: any
    prop: Property

    // Owm methods of GXml-0.20.GXml.Attr

    getIsReferenced(): boolean

    // Class property signals of GXml-0.20.GXml.Attr

    connect(sigName: "notify::is-referenced", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-referenced", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-referenced", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-referenced", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-referenced", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Attr extends Node {

    // Own properties of GXml-0.20.GXml.Attr

    static name: string

    // Constructors of GXml-0.20.GXml.Attr

    constructor(config?: Attr.ConstructorProperties) 
    constructor(element: DomElement, name: string | null, val: string | null) 
    static new(element: DomElement, name: string | null, val: string | null): Attr

    // Overloads of new

    static new(): Node
    static namespace(element: DomElement, namespaceUri: string | null, prefix: string | null, name: string | null, val: string | null): Attr
    static reference(element: DomElement, name: string | null): Attr
    _init(config?: Attr.ConstructorProperties): void
}

module BaseCollection {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.Traversable.ConstructorProperties, Gee.Iterable.ConstructorProperties, Collection.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BaseCollection extends Gee.Traversable, Gee.Iterable, Collection {

    // Own properties of GXml-0.20.GXml.BaseCollection

    __gtype__: number

    // Own fields of GXml-0.20.GXml.BaseCollection

    nodesIndex: any
    element: any
    itemsName: any
    itemsType: GObject.GType

    // Owm methods of GXml-0.20.GXml.BaseCollection

    initializeElement(e: Element): void
    // Has conflict: validateAppend(index: number, element: DomElement): boolean
    // Has conflict: clear(): void

    // Own virtual methods of GXml-0.20.GXml.BaseCollection

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void

    // Class property signals of GXml-0.20.GXml.BaseCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BaseCollection extends GObject.Object {

    // Own properties of GXml-0.20.GXml.BaseCollection

    static name: string

    // Constructors of GXml-0.20.GXml.BaseCollection

    constructor(config?: BaseCollection.ConstructorProperties) 
    _init(config?: BaseCollection.ConstructorProperties): void
}

module CssSelector {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.CssSelector

        selectorType?: CssSelectorType | null
        name?: string | null
        value?: string | null
        combiner?: CssCombiner | null
    }

}

interface CssSelector {

    // Own properties of GXml-0.20.GXml.CssSelector

    selectorType: CssSelectorType
    name: string | null
    value: string | null
    combiner: CssCombiner
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CssSelector

    getSelectorType(): CssSelectorType
    setSelectorType(value: CssSelectorType): void
    getName(): string | null
    setName(value: string | null): void
    getValue(): string | null
    setValue(value: string | null): void
    getCombiner(): CssCombiner
    setCombiner(value: CssCombiner): void

    // Class property signals of GXml-0.20.GXml.CssSelector

    connect(sigName: "notify::selector-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selector-type", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::combiner", callback: (...args: any[]) => void): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::combiner", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CssSelector extends GObject.Object {

    // Own properties of GXml-0.20.GXml.CssSelector

    static name: string

    // Constructors of GXml-0.20.GXml.CssSelector

    constructor(config?: CssSelector.ConstructorProperties) 
    constructor(t: CssSelectorType, name: string | null) 
    static new(t: CssSelectorType, name: string | null): CssSelector
    static withValue(t: CssSelectorType, name: string | null, value: string | null): CssSelector
    _init(config?: CssSelector.ConstructorProperties): void
}

module CssElementSelector {

    // Constructor properties interface

    interface ConstructorProperties extends CssSelector.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.CssElementSelector

        prefix?: string | null
        localName?: string | null
    }

}

interface CssElementSelector {

    // Own properties of GXml-0.20.GXml.CssElementSelector

    readonly prefixed: boolean
    prefix: string | null
    localName: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CssElementSelector

    getPrefixed(): boolean
    getPrefix(): string | null
    setPrefix(value: string | null): void
    getLocalName(): string | null
    setLocalName(value: string | null): void

    // Class property signals of GXml-0.20.GXml.CssElementSelector

    connect(sigName: "notify::prefixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefixed", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::selector-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selector-type", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::combiner", callback: (...args: any[]) => void): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::combiner", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CssElementSelector extends CssSelector {

    // Own properties of GXml-0.20.GXml.CssElementSelector

    static name: string

    // Constructors of GXml-0.20.GXml.CssElementSelector

    constructor(config?: CssElementSelector.ConstructorProperties) 
    constructor(prefix: string | null, localName: string | null) 
    static new(prefix: string | null, localName: string | null): CssElementSelector

    // Overloads of new

    static new(t: CssSelectorType, name: string | null): CssSelector
    _init(config?: CssElementSelector.ConstructorProperties): void
}

module CssAttributeSelector {

    // Constructor properties interface

    interface ConstructorProperties extends CssSelector.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.CssAttributeSelector

        prefix?: string | null
        localName?: string | null
    }

}

interface CssAttributeSelector {

    // Own properties of GXml-0.20.GXml.CssAttributeSelector

    prefix: string | null
    localName: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CssAttributeSelector

    getPrefix(): string | null
    setPrefix(value: string | null): void
    getLocalName(): string | null
    setLocalName(value: string | null): void

    // Class property signals of GXml-0.20.GXml.CssAttributeSelector

    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::selector-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selector-type", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::combiner", callback: (...args: any[]) => void): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::combiner", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CssAttributeSelector extends CssSelector {

    // Own properties of GXml-0.20.GXml.CssAttributeSelector

    static name: string

    // Constructors of GXml-0.20.GXml.CssAttributeSelector

    constructor(config?: CssAttributeSelector.ConstructorProperties) 
    constructor(prefix: string | null, localName: string | null) 
    static new(prefix: string | null, localName: string | null): CssAttributeSelector

    // Overloads of new

    static new(t: CssSelectorType, name: string | null): CssSelector
    _init(config?: CssAttributeSelector.ConstructorProperties): void
}

module CssNotSelector {

    // Constructor properties interface

    interface ConstructorProperties extends CssSelector.ConstructorProperties {
    }

}

interface CssNotSelector {

    // Own properties of GXml-0.20.GXml.CssNotSelector

    readonly selectors: Gee.List
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CssNotSelector

    getSelectors(): Gee.List

    // Class property signals of GXml-0.20.GXml.CssNotSelector

    connect(sigName: "notify::selectors", callback: (...args: any[]) => void): number
    on(sigName: "notify::selectors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selectors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selectors", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::selector-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selector-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selector-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selector-type", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::combiner", callback: (...args: any[]) => void): number
    on(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::combiner", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::combiner", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::combiner", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CssNotSelector extends CssSelector {

    // Own properties of GXml-0.20.GXml.CssNotSelector

    static name: string

    // Constructors of GXml-0.20.GXml.CssNotSelector

    constructor(config?: CssNotSelector.ConstructorProperties) 
    constructor() 
    static new(): CssNotSelector

    // Overloads of new

    static new(t: CssSelectorType, name: string | null): CssSelector
    _init(config?: CssNotSelector.ConstructorProperties): void
}

module CssSelectorParser {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface CssSelectorParser {

    // Own properties of GXml-0.20.GXml.CssSelectorParser

    readonly selectors: Gee.List
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.CssSelectorParser

    parse(selectors: string | null): void
    getSelectors(): Gee.List
    match(element: DomElement): boolean
    querySelectorAll(element: DomElement): DomNodeList

    // Class property signals of GXml-0.20.GXml.CssSelectorParser

    connect(sigName: "notify::selectors", callback: (...args: any[]) => void): number
    on(sigName: "notify::selectors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::selectors", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::selectors", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::selectors", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CssSelectorParser extends GObject.Object {

    // Own properties of GXml-0.20.GXml.CssSelectorParser

    static name: string

    // Constructors of GXml-0.20.GXml.CssSelectorParser

    constructor(config?: CssSelectorParser.ConstructorProperties) 
    constructor() 
    static new(): CssSelectorParser
    _init(config?: CssSelectorParser.ConstructorProperties): void
}

module Document {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocument.ConstructorProperties, DomXMLDocument.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface Document extends DomParentNode, DomNonElementParentNode, DomDocument, DomXMLDocument {

    // Own properties of GXml-0.20.GXml.Document

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.20.GXml.Document

    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    constructor_: DomEvent
    parser: Parser

    // Owm methods of GXml-0.20.GXml.Document

    searchRootElementProperty(): Element

    // Class property signals of GXml-0.20.GXml.Document

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Document extends Node {

    // Own properties of GXml-0.20.GXml.Document

    static name: string

    // Constructors of GXml-0.20.GXml.Document

    constructor(config?: Document.ConstructorProperties) 
    constructor() 
    static new(): Document

    // Overloads of new

    static new(): Node
    static fromPath(path: string | null): Document
    static fromUri(uri: string | null): Document
    static fromFile(file: Gio.File): Document
    static fromStream(stream: Gio.InputStream): Document
    static fromString(str: string | null): Document
    _init(config?: Document.ConstructorProperties): void
}

module Implementation {

    // Constructor properties interface

    interface ConstructorProperties extends DomImplementation.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Implementation extends DomImplementation {

    // Own properties of GXml-0.20.GXml.Implementation

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.Implementation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Implementation extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Implementation

    static name: string

    // Constructors of GXml-0.20.GXml.Implementation

    constructor(config?: Implementation.ConstructorProperties) 
    constructor() 
    static new(): Implementation
    _init(config?: Implementation.ConstructorProperties): void
}

module DocumentType {

    // Constructor properties interface

    interface ConstructorProperties extends DomChildNode.ConstructorProperties, DomDocumentType.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface DocumentType extends DomChildNode, DomDocumentType {

    // Own properties of GXml-0.20.GXml.DocumentType

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.20.GXml.DocumentType

    name: any
    publicId: any
    systemId: any

    // Class property signals of GXml-0.20.GXml.DocumentType

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::public-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::public-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::public-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::public-id", ...args: any[]): void
    connect(sigName: "notify::system-id", callback: (...args: any[]) => void): number
    on(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::system-id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::system-id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::system-id", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DocumentType extends Node {

    // Own properties of GXml-0.20.GXml.DocumentType

    static name: string

    // Constructors of GXml-0.20.GXml.DocumentType

    constructor(config?: DocumentType.ConstructorProperties) 
    constructor(doc: DomDocument, name: string | null, publicId: string | null, systemId: string | null) 
    static new(doc: DomDocument, name: string | null, publicId: string | null, systemId: string | null): DocumentType

    // Overloads of new

    static new(): Node
    static withName(doc: DomDocument, name: string | null): DocumentType
    static withIds(doc: DomDocument, name: string | null, publicId: string | null, systemId: string | null): DocumentType
    _init(config?: DocumentType.ConstructorProperties): void
}

module DocumentFragment {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocumentFragment.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface DocumentFragment extends DomParentNode, DomNonElementParentNode, DomDocumentFragment {

    // Own properties of GXml-0.20.GXml.DocumentFragment

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Class property signals of GXml-0.20.GXml.DocumentFragment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DocumentFragment extends Node {

    // Own properties of GXml-0.20.GXml.DocumentFragment

    static name: string

    // Constructors of GXml-0.20.GXml.DocumentFragment

    constructor(config?: DocumentFragment.ConstructorProperties) 
    constructor(doc: DomDocument) 
    static new(doc: DomDocument): DocumentFragment

    // Overloads of new

    static new(): Node
    _init(config?: DocumentFragment.ConstructorProperties): void
}

module DomNodeFilter {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomNodeFilter {

    // Own properties of GXml-0.20.GXml.DomNodeFilter

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.DomNodeFilter

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomNodeFilter extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomNodeFilter

    static name: string

    // Constructors of GXml-0.20.GXml.DomNodeFilter

    constructor(config?: DomNodeFilter.ConstructorProperties) 
    constructor() 
    static new(): DomNodeFilter
    _init(config?: DomNodeFilter.ConstructorProperties): void
}

module DomElementList {

    // Constructor properties interface

    interface ConstructorProperties extends DomHTMLCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface DomElementList extends DomHTMLCollection {

    // Own properties of GXml-0.20.GXml.DomElementList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Conflicting methods

    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any | null
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    set(index: number, item: any | null): void
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    indexOf(item: any | null): number
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    removeAt(index: number): any | null
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any | null): boolean
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    remove(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.DomElementList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomElementList extends Gee.ArrayList {

    // Own properties of GXml-0.20.GXml.DomElementList

    static name: string

    // Constructors of GXml-0.20.GXml.DomElementList

    constructor(config?: DomElementList.ConstructorProperties) 
    constructor() 
    static new(): DomElementList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: DomElementList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module DomEventInit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomEventInit

        bubbles?: boolean | null
        cancelable?: boolean | null
    }

}

interface DomEventInit {

    // Own properties of GXml-0.20.GXml.DomEventInit

    bubbles: boolean
    cancelable: boolean
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomEventInit

    getBubbles(): boolean
    setBubbles(value: boolean): void
    getCancelable(): boolean
    setCancelable(value: boolean): void

    // Class property signals of GXml-0.20.GXml.DomEventInit

    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomEventInit extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomEventInit

    static name: string

    // Constructors of GXml-0.20.GXml.DomEventInit

    constructor(config?: DomEventInit.ConstructorProperties) 
    constructor() 
    static new(): DomEventInit
    _init(config?: DomEventInit.ConstructorProperties): void
}

module DomCustomEventInit {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventInit.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomCustomEventInit

        detail?: any | null
    }

}

interface DomCustomEventInit {

    // Own properties of GXml-0.20.GXml.DomCustomEventInit

    detail: any
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomCustomEventInit

    getDetail(): /* result */ any
    setDetail(value: any): void

    // Class property signals of GXml-0.20.GXml.DomCustomEventInit

    connect(sigName: "notify::detail", callback: (...args: any[]) => void): number
    on(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::detail", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::detail", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::detail", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomCustomEventInit extends DomEventInit {

    // Own properties of GXml-0.20.GXml.DomCustomEventInit

    static name: string

    // Constructors of GXml-0.20.GXml.DomCustomEventInit

    constructor(config?: DomCustomEventInit.ConstructorProperties) 
    constructor() 
    static new(): DomCustomEventInit

    // Overloads of new

    static new(): DomEventInit
    _init(config?: DomCustomEventInit.ConstructorProperties): void
}

module DomTimeStamp {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomTimeStamp

        time?: GLib.DateTime | null
    }

}

interface DomTimeStamp {

    // Own properties of GXml-0.20.GXml.DomTimeStamp

    time: GLib.DateTime
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomTimeStamp

    getTime(): GLib.DateTime
    setTime(value: GLib.DateTime): void
    toString(): string | null

    // Class property signals of GXml-0.20.GXml.DomTimeStamp

    connect(sigName: "notify::time", callback: (...args: any[]) => void): number
    on(sigName: "notify::time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomTimeStamp extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomTimeStamp

    static name: string

    // Constructors of GXml-0.20.GXml.DomTimeStamp

    constructor(config?: DomTimeStamp.ConstructorProperties) 
    constructor() 
    static new(): DomTimeStamp
    _init(config?: DomTimeStamp.ConstructorProperties): void
}

module DomMutationObserverInit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DomMutationObserverInit

        childList?: boolean | null
        attributes?: boolean | null
        characterData?: boolean | null
        subtree?: boolean | null
        attributeOldValue?: boolean | null
        characterDataOldValue?: boolean | null
        attributeFilter?: Gee.List | null
    }

}

interface DomMutationObserverInit {

    // Own properties of GXml-0.20.GXml.DomMutationObserverInit

    childList: boolean
    attributes: boolean
    characterData: boolean
    subtree: boolean
    attributeOldValue: boolean
    characterDataOldValue: boolean
    attributeFilter: Gee.List
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomMutationObserverInit

    getChildList(): boolean
    setChildList(value: boolean): void
    getAttributes(): boolean
    setAttributes(value: boolean): void
    getCharacterData(): boolean
    setCharacterData(value: boolean): void
    getSubtree(): boolean
    setSubtree(value: boolean): void
    getAttributeOldValue(): boolean
    setAttributeOldValue(value: boolean): void
    getCharacterDataOldValue(): boolean
    setCharacterDataOldValue(value: boolean): void
    getAttributeFilter(): Gee.List
    setAttributeFilter(value: Gee.List): void

    // Class property signals of GXml-0.20.GXml.DomMutationObserverInit

    connect(sigName: "notify::child-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::character-data", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-data", ...args: any[]): void
    connect(sigName: "notify::subtree", callback: (...args: any[]) => void): number
    on(sigName: "notify::subtree", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::subtree", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::subtree", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::subtree", ...args: any[]): void
    connect(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-old-value", ...args: any[]): void
    connect(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-data-old-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-data-old-value", ...args: any[]): void
    connect(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-filter", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-filter", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-filter", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomMutationObserverInit extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomMutationObserverInit

    static name: string

    // Constructors of GXml-0.20.GXml.DomMutationObserverInit

    constructor(config?: DomMutationObserverInit.ConstructorProperties) 
    constructor() 
    static new(): DomMutationObserverInit
    _init(config?: DomMutationObserverInit.ConstructorProperties): void
}

module DomErrorName {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface DomErrorName {

    // Own properties of GXml-0.20.GXml.DomErrorName

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.DomErrorName

    getName(errorCode: number): string | null
    getCode(errorName: string | null): number

    // Class property signals of GXml-0.20.GXml.DomErrorName

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DomErrorName extends GObject.Object {

    // Own properties of GXml-0.20.GXml.DomErrorName

    static name: string

    // Constructors of GXml-0.20.GXml.DomErrorName

    constructor(config?: DomErrorName.ConstructorProperties) 
    constructor() 
    static new(): DomErrorName
    _init(config?: DomErrorName.ConstructorProperties): void
}

module Element {

    // Constructor properties interface

    interface ConstructorProperties extends DomChildNode.ConstructorProperties, DomNonDocumentTypeChildNode.ConstructorProperties, DomParentNode.ConstructorProperties, DomElement.ConstructorProperties, Object.ConstructorProperties, Node.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Element

        parseChildren?: boolean | null
        unparsed?: string | null
        readBuffer?: Gio.MemoryOutputStream | null
    }

}

interface Element extends DomChildNode, DomNonDocumentTypeChildNode, DomParentNode, DomElement, Object {

    // Own properties of GXml-0.20.GXml.Element

    parseChildren: boolean
    unparsed: string | null
    readBuffer: Gio.MemoryOutputStream
    __gtype__: number

    // Conflicting properties

    prefix: any
    localName: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.20.GXml.Element

    attributes: any
    namespaceUri: any

    // Owm methods of GXml-0.20.GXml.Element

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    initialize(localName: string | null): void
    initializeDocument(doc: DomDocument, localName: string | null): void
    initializeWithNamespace(namespaceUri: string | null, prefix: string | null, localName: string | null): void
    initializeDocumentWithNamespace(doc: DomDocument, namespaceUri: string | null, prefix: string | null, localName: string | null): void
    getParseChildren(): boolean
    setParseChildren(value: boolean): void
    getUnparsed(): string | null
    setUnparsed(value: string | null): void
    readUnparsed(): void
    getReadBuffer(): Gio.MemoryOutputStream
    setReadBuffer(value: Gio.MemoryOutputStream): void
    parseBuffer(): void
    parsePending(): number
    parseBufferAsync(callback: Gio.AsyncReadyCallback | null): void
    parseBufferFinish(res: Gio.AsyncResult): void

    // Conflicting methods

    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.Element

    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Element extends Node {

    // Own properties of GXml-0.20.GXml.Element

    static name: string

    // Constructors of GXml-0.20.GXml.Element

    constructor(config?: Element.ConstructorProperties) 
    constructor() 
    static new(): Element

    // Overloads of new

    static new(): Node
    _init(config?: Element.ConstructorProperties): void
}

module ElementAttributes {

    // Constructor properties interface

    interface ConstructorProperties extends DomNamedNodeMap.ConstructorProperties, Gee.HashMap.ConstructorProperties {
    }

}

interface ElementAttributes extends DomNamedNodeMap {

    // Own properties of GXml-0.20.GXml.ElementAttributes

    __gtype__: number

    // Own fields of GXml-0.20.GXml.ElementAttributes

    element: Element

    // Owm methods of GXml-0.20.GXml.ElementAttributes

    addReference(name: string | null): void

    // Conflicting methods

    hasKey(key: any | null): boolean
    hasKey(key: any | null): boolean

    // Overloads of hasKey

    hasKey(key: any | null): boolean
    has(key: any | null, value: any | null): boolean
    has(key: any | null, value: any | null): boolean

    // Overloads of has

    has(key: any | null, value: any | null): boolean
    get(key: any | null): any | null
    get(key: any | null): any | null

    // Overloads of get

    get(key: any | null): any | null
    set(key: any | null, value: any | null): void
    set(key: any | null, value: any | null): void

    // Overloads of set

    set(key: any | null, value: any | null): void
    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getKeys(): Gee.Set
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getValues(): Gee.Collection
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getEntries(): Gee.Set
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Class property signals of GXml-0.20.GXml.ElementAttributes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ElementAttributes extends Gee.HashMap {

    // Own properties of GXml-0.20.GXml.ElementAttributes

    static name: string

    // Constructors of GXml-0.20.GXml.ElementAttributes

    constructor(config?: ElementAttributes.ConstructorProperties) 
    constructor(element: Element) 
    static new(element: Element): ElementAttributes

    // Overloads of new

    static new(kType: GObject.GType, kDupFunc: GObject.BoxedCopyFunc, kDestroyFunc: GLib.DestroyNotify, vType: GObject.GType, vDupFunc: GObject.BoxedCopyFunc, vDestroyFunc: GLib.DestroyNotify, keyHashFunc: Gee.HashDataFunc | null, keyEqualFunc: Gee.EqualDataFunc | null, valueEqualFunc: Gee.EqualDataFunc | null): Gee.HashMap
    _init(config?: ElementAttributes.ConstructorProperties): void
}

interface Enumeration {

    // Own fields of GXml-0.20.GXml.Enumeration

    refCount: number
}

class Enumeration {

    // Own properties of GXml-0.20.GXml.Enumeration

    static name: string

    // Constructors of GXml-0.20.GXml.Enumeration

    constructor() 
    static new(): Enumeration
    static getNick(enumeration: GObject.GType, val: number): string | null
    static getNickCamelcase(enumeration: GObject.GType, val: number): string | null
    static getString(enumeration: GObject.GType, val: number, useNick: boolean, camelcase: boolean): string | null
    static parse(enumeration: GObject.GType, val: string | null): GObject.EnumValue | null
    static toArray(enumeration: GObject.GType): GObject.EnumValue[]
    static parseInteger(enumeration: GObject.GType, val: number): GObject.EnumValue | null
    static toStringArray(enumeration: GObject.GType): string[]
}

module Event {

    // Constructor properties interface

    interface ConstructorProperties extends DomEvent.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Event extends DomEvent {

    // Own properties of GXml-0.20.GXml.Event

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Event

    etype: any
    eventTarget: any
    currentTarget: any
    bubbles: any
    cancelable: any
    isTrusted: any
    timeStamp: any
    defaultPrevented: any
    eventPhase: any
    flags: DomEventFlags

    // Class property signals of GXml-0.20.GXml.Event

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::etype", callback: (...args: any[]) => void): number
    on(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::etype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::etype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::etype", ...args: any[]): void
    connect(sigName: "notify::event-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-target", ...args: any[]): void
    connect(sigName: "notify::current-target", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-target", ...args: any[]): void
    connect(sigName: "notify::bubbles", callback: (...args: any[]) => void): number
    on(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::bubbles", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::bubbles", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::bubbles", ...args: any[]): void
    connect(sigName: "notify::cancelable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancelable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancelable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancelable", ...args: any[]): void
    connect(sigName: "notify::is-trusted", callback: (...args: any[]) => void): number
    on(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::is-trusted", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::is-trusted", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::is-trusted", ...args: any[]): void
    connect(sigName: "notify::time-stamp", callback: (...args: any[]) => void): number
    on(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::time-stamp", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::time-stamp", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::time-stamp", ...args: any[]): void
    connect(sigName: "notify::default-prevented", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-prevented", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-prevented", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-prevented", ...args: any[]): void
    connect(sigName: "notify::event-phase", callback: (...args: any[]) => void): number
    on(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::event-phase", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::event-phase", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::event-phase", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Event extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Event

    static name: string

    // Constructors of GXml-0.20.GXml.Event

    constructor(config?: Event.ConstructorProperties) 
    constructor() 
    static new(): Event
    _init(config?: Event.ConstructorProperties): void
}

module CustomEvent {

    // Constructor properties interface

    interface ConstructorProperties extends Event.ConstructorProperties {
    }

}

interface CustomEvent {

    // Own properties of GXml-0.20.GXml.CustomEvent

    __gtype__: number

    // Conflicting properties

    etype: any
    eventTarget: any
    currentTarget: any
    bubbles: any
    cancelable: any
    isTrusted: any
    timeStamp: any
    defaultPrevented: any
    eventPhase: any

    // Own fields of GXml-0.20.GXml.CustomEvent

    detail: any

    // Owm methods of GXml-0.20.GXml.CustomEvent

    getDetail(): /* result */ any
    initCustomEvent(type: string | null, bubbles: boolean, cancelable: boolean, detail: any | null): void

    // Class property signals of GXml-0.20.GXml.CustomEvent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CustomEvent extends Event {

    // Own properties of GXml-0.20.GXml.CustomEvent

    static name: string

    // Constructors of GXml-0.20.GXml.CustomEvent

    constructor(config?: CustomEvent.ConstructorProperties) 
    constructor() 
    static new(): CustomEvent

    // Overloads of new

    static new(): Event
    _init(config?: CustomEvent.ConstructorProperties): void
}

module HashMap {

    // Constructor properties interface

    interface ConstructorProperties extends Map.ConstructorProperties, BaseCollection.ConstructorProperties {
    }

}

interface HashMap extends Map {

    // Own properties of GXml-0.20.GXml.HashMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Own fields of GXml-0.20.GXml.HashMap

    hashtable: Gee.HashMap
    attributeKey: string | null

    // Owm methods of GXml-0.20.GXml.HashMap

    initializeElementWithKey(element: Element, itemsType: GObject.GType, attributeKey: string | null): void
    initializeWithKey(itemsType: GObject.GType, attributeKey: string | null): void
    get(key: string | null): DomElement | null
    getKeys(): string[]

    // Conflicting methods

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.HashMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attribute-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-key", ...args: any[]): void
    connect(sigName: "notify::keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys-set", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HashMap extends BaseCollection {

    // Own properties of GXml-0.20.GXml.HashMap

    static name: string

    // Constructors of GXml-0.20.GXml.HashMap

    constructor(config?: HashMap.ConstructorProperties) 
    constructor() 
    static new(): HashMap
    _init(config?: HashMap.ConstructorProperties): void
}

module HashPairedMap {

    // Constructor properties interface

    interface ConstructorProperties extends PairedMap.ConstructorProperties, BaseCollection.ConstructorProperties {
    }

}

interface HashPairedMap extends PairedMap {

    // Own properties of GXml-0.20.GXml.HashPairedMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Own fields of GXml-0.20.GXml.HashPairedMap

    hashtable: Gee.HashMap
    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null

    // Owm methods of GXml-0.20.GXml.HashPairedMap

    initializeElementWithKeys(element: Element, itemsType: GObject.GType, attributePrimaryKey: string | null, attributeSecondaryKey: string | null): void
    initializeWithKeys(itemsType: GObject.GType, attributePrimaryKey: string | null, attributeSecondaryKey: string | null): void
    get(primaryKey: string | null, secondaryKey: string | null): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string | null): string[]

    // Conflicting methods

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.HashPairedMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-primary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-secondary-key", ...args: any[]): void
    connect(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-keys-set", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HashPairedMap extends BaseCollection {

    // Own properties of GXml-0.20.GXml.HashPairedMap

    static name: string

    // Constructors of GXml-0.20.GXml.HashPairedMap

    constructor(config?: HashPairedMap.ConstructorProperties) 
    constructor() 
    static new(): HashPairedMap
    _init(config?: HashPairedMap.ConstructorProperties): void
}

module HashThreeMap {

    // Constructor properties interface

    interface ConstructorProperties extends ThreeMap.ConstructorProperties, BaseCollection.ConstructorProperties {
    }

}

interface HashThreeMap extends ThreeMap {

    // Own properties of GXml-0.20.GXml.HashThreeMap

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Own fields of GXml-0.20.GXml.HashThreeMap

    hashtable: Gee.HashMap
    attributePrimaryKey: string | null
    attributeSecondaryKey: string | null
    attributeThirdKey: string | null

    // Owm methods of GXml-0.20.GXml.HashThreeMap

    initializeElementWithKeys(element: Element, itemsType: GObject.GType, attributePrimaryKey: string | null, attributeSecondaryKey: string | null, attributeThirdKey: string | null): void
    initializeWithKeys(itemsType: GObject.GType, attributePrimaryKey: string | null, attributeSecondaryKey: string | null, attributeThirdKey: string | null): void
    get(primaryKey: string | null, secondaryKey: string | null, thirdKey: string | null): DomElement | null
    getPrimaryKeys(): string[]
    getSecondaryKeys(pkey: string | null): string[]
    getThirdKeys(pkey: string | null, skey: string | null): string[]

    // Conflicting methods

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.HashThreeMap

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-primary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-primary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-secondary-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-secondary-key", ...args: any[]): void
    connect(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): number
    on(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attribute-third-key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attribute-third-key", ...args: any[]): void
    connect(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::primary-keys-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::primary-keys-set", ...args: any[]): void
    connect(sigName: "notify::nodes-index", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodes-index", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodes-index", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodes-index", ...args: any[]): void
    connect(sigName: "notify::element", callback: (...args: any[]) => void): number
    on(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element", ...args: any[]): void
    connect(sigName: "notify::items-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-name", ...args: any[]): void
    connect(sigName: "notify::items-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::items-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::items-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::items-type", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HashThreeMap extends BaseCollection {

    // Own properties of GXml-0.20.GXml.HashThreeMap

    static name: string

    // Constructors of GXml-0.20.GXml.HashThreeMap

    constructor(config?: HashThreeMap.ConstructorProperties) 
    constructor() 
    static new(): HashThreeMap
    _init(config?: HashThreeMap.ConstructorProperties): void
}

module HTMLCollection {

    // Constructor properties interface

    interface ConstructorProperties extends DomHTMLCollection.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface HTMLCollection extends DomHTMLCollection {

    // Own properties of GXml-0.20.GXml.HTMLCollection

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Conflicting methods

    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any | null
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    set(index: number, item: any | null): void
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    indexOf(item: any | null): number
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    removeAt(index: number): any | null
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any | null): boolean
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    remove(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.HTMLCollection

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HTMLCollection extends Gee.ArrayList {

    // Own properties of GXml-0.20.GXml.HTMLCollection

    static name: string

    // Constructors of GXml-0.20.GXml.HTMLCollection

    constructor(config?: HTMLCollection.ConstructorProperties) 
    constructor() 
    static new(): HTMLCollection

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: HTMLCollection.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module HtmlDocument {

    // Constructor properties interface

    interface ConstructorProperties extends Document.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.HtmlDocument

        html?: DomElement | null
    }

}

interface HtmlDocument {

    // Own properties of GXml-0.20.GXml.HtmlDocument

    html: DomElement
    __gtype__: number

    // Conflicting properties

    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.HtmlDocument

    getHtml(): DomElement
    setHtml(value: DomElement): void

    // Class property signals of GXml-0.20.GXml.HtmlDocument

    connect(sigName: "notify::html", callback: (...args: any[]) => void): number
    on(sigName: "notify::html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::html", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::html", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::html", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HtmlDocument extends Document {

    // Own properties of GXml-0.20.GXml.HtmlDocument

    static name: string

    // Constructors of GXml-0.20.GXml.HtmlDocument

    constructor(config?: HtmlDocument.ConstructorProperties) 
    constructor() 
    static new(): HtmlDocument

    // Overloads of new

    static new(): Document
    static new(): Node
    _init(config?: HtmlDocument.ConstructorProperties): void
}

module HtmlElement {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {
    }

}

interface HtmlElement {

    // Own properties of GXml-0.20.GXml.HtmlElement

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.HtmlElement

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class HtmlElement extends Element {

    // Own properties of GXml-0.20.GXml.HtmlElement

    static name: string

    // Constructors of GXml-0.20.GXml.HtmlElement

    constructor(config?: HtmlElement.ConstructorProperties) 
    constructor() 
    static new(): HtmlElement

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: HtmlElement.ConstructorProperties): void
}

module LXPathObject {

    // Constructor properties interface

    interface ConstructorProperties extends XPathObject.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface LXPathObject extends XPathObject {

    // Own properties of GXml-0.20.GXml.LXPathObject

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.LXPathObject

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::boolean-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::boolean-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::boolean-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::boolean-value", ...args: any[]): void
    connect(sigName: "notify::string-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::string-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::string-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::string-value", ...args: any[]): void
    connect(sigName: "notify::number-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::number-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::number-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::number-value", ...args: any[]): void
    connect(sigName: "notify::nodeset", callback: (...args: any[]) => void): number
    on(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nodeset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nodeset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nodeset", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class LXPathObject extends GObject.Object {

    // Own properties of GXml-0.20.GXml.LXPathObject

    static name: string

    // Constructors of GXml-0.20.GXml.LXPathObject

    constructor(config?: LXPathObject.ConstructorProperties) 
    constructor(document: XDocument, pointer: any | null) 
    static new(document: XDocument, pointer: any | null): LXPathObject
    _init(config?: LXPathObject.ConstructorProperties): void
}

module Node {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventTarget.ConstructorProperties, DomNode.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Node extends DomEventTarget, DomNode {

    // Own properties of GXml-0.20.GXml.Node

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Node

    localName: string | null
    prefix: string | null
    baseUri: any
    nodeValue: string | null
    parent: DomNode
    nodeType: any
    childNodes: any
    document: DomDocument

    // Class property signals of GXml-0.20.GXml.Node

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Node extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Node

    static name: string

    // Constructors of GXml-0.20.GXml.Node

    constructor(config?: Node.ConstructorProperties) 
    constructor() 
    static new(): Node
    _init(config?: Node.ConstructorProperties): void
}

module NodeList {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeList.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface NodeList extends DomNodeList {

    // Own properties of GXml-0.20.GXml.NodeList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Conflicting methods

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any | null
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    set(index: number, item: any | null): void
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    indexOf(item: any | null): number
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    removeAt(index: number): any | null
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    contains(item: any | null): boolean
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    remove(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.NodeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class NodeList extends Gee.ArrayList {

    // Own properties of GXml-0.20.GXml.NodeList

    static name: string

    // Constructors of GXml-0.20.GXml.NodeList

    constructor(config?: NodeList.ConstructorProperties) 
    constructor() 
    static new(): NodeList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: NodeList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module NodeIterator {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface NodeIterator extends DomNodeIterator {

    // Own properties of GXml-0.20.GXml.NodeIterator

    __gtype__: number

    // Own fields of GXml-0.20.GXml.NodeIterator

    root: any
    referenceNode: any
    pointerBeforeReferenceNode: any
    whatToShow: any

    // Class property signals of GXml-0.20.GXml.NodeIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::reference-node", ...args: any[]): void
    connect(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::pointer-before-reference-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::pointer-before-reference-node", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class NodeIterator extends GObject.Object {

    // Own properties of GXml-0.20.GXml.NodeIterator

    static name: string

    // Constructors of GXml-0.20.GXml.NodeIterator

    constructor(config?: NodeIterator.ConstructorProperties) 
    constructor(n: DomNode, whatToShow: number) 
    static new(n: DomNode, whatToShow: number): NodeIterator
    _init(config?: NodeIterator.ConstructorProperties): void
}

module BaseProperty {

    // Constructor properties interface

    interface ConstructorProperties extends Property.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.BaseProperty

        value?: string | null
    }

}

interface BaseProperty extends Property {

    // Own properties of GXml-0.20.GXml.BaseProperty

    value: string | null
    __gtype__: number

    // Owm methods of GXml-0.20.GXml.BaseProperty

    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void
    // Has conflict: validateValue(val: string | null): boolean

    // Own virtual methods of GXml-0.20.GXml.BaseProperty

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.BaseProperty

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class BaseProperty extends GObject.Object {

    // Own properties of GXml-0.20.GXml.BaseProperty

    static name: string

    // Constructors of GXml-0.20.GXml.BaseProperty

    constructor(config?: BaseProperty.ConstructorProperties) 
    _init(config?: BaseProperty.ConstructorProperties): void
}

module String {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {
    }

}

interface String {

    // Own properties of GXml-0.20.GXml.String

    __gtype__: number

    // Own fields of GXml-0.20.GXml.String

    value: string | null

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.String

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class String extends BaseProperty {

    // Own properties of GXml-0.20.GXml.String

    static name: string

    // Constructors of GXml-0.20.GXml.String

    constructor(config?: String.ConstructorProperties) 
    static withString(str: string | null): String
    constructor() 
    static new(): String
    _init(config?: String.ConstructorProperties): void
}

module ArrayString {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {
    }

}

interface ArrayString {

    // Own properties of GXml-0.20.GXml.ArrayString

    __gtype__: number

    // Own fields of GXml-0.20.GXml.ArrayString

    value: string | null
    values: string[]
    valuesLength1: number

    // Owm methods of GXml-0.20.GXml.ArrayString

    getValues(): string[]
    initializeStrings(strs: string[]): void
    isValidValue(): boolean
    select(index: number): void
    search(str: string | null): boolean

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.ArrayString

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ArrayString extends BaseProperty {

    // Own properties of GXml-0.20.GXml.ArrayString

    static name: string

    // Constructors of GXml-0.20.GXml.ArrayString

    constructor(config?: ArrayString.ConstructorProperties) 
    constructor() 
    static new(): ArrayString
    _init(config?: ArrayString.ConstructorProperties): void
}

module XsdArrayString {

    // Constructor properties interface

    interface ConstructorProperties extends ArrayString.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdArrayString

        simpleType?: string | null
        source?: Gio.File | null
    }

}

interface XsdArrayString {

    // Own properties of GXml-0.20.GXml.XsdArrayString

    __gtype__: number

    // Own fields of GXml-0.20.GXml.XsdArrayString

    source: Gio.File
    simpleType: string | null

    // Owm methods of GXml-0.20.GXml.XsdArrayString

    getSimpleType(): string | null
    setSimpleType(value: string | null): void
    getSource(): Gio.File
    setSource(value: Gio.File): void
    load(): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.XsdArrayString

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdArrayString extends ArrayString {

    // Own properties of GXml-0.20.GXml.XsdArrayString

    static name: string

    // Constructors of GXml-0.20.GXml.XsdArrayString

    constructor(config?: XsdArrayString.ConstructorProperties) 
    constructor() 
    static new(): XsdArrayString

    // Overloads of new

    static new(): ArrayString
    _init(config?: XsdArrayString.ConstructorProperties): void
}

module Double {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Double

        decimals?: number | null
    }

}

interface Double {

    // Own properties of GXml-0.20.GXml.Double

    decimals: number
    __gtype__: number

    // Own fields of GXml-0.20.GXml.Double

    value: any

    // Owm methods of GXml-0.20.GXml.Double

    getDecimals(): number
    setDecimals(value: number): void
    getDouble(): number
    setDouble(value: number): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Double

    connect(sigName: "notify::decimals", callback: (...args: any[]) => void): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decimals", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Double extends BaseProperty {

    // Own properties of GXml-0.20.GXml.Double

    static name: string

    // Constructors of GXml-0.20.GXml.Double

    constructor(config?: Double.ConstructorProperties) 
    constructor() 
    static new(): Double
    _init(config?: Double.ConstructorProperties): void
}

module Float {

    // Constructor properties interface

    interface ConstructorProperties extends Double.ConstructorProperties {
    }

}

interface Float {

    // Own properties of GXml-0.20.GXml.Float

    __gtype__: number

    // Conflicting properties

    value: any

    // Owm methods of GXml-0.20.GXml.Float

    getFloat(): number
    setFloat(value: number): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Float

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::decimals", callback: (...args: any[]) => void): number
    on(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::decimals", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::decimals", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::decimals", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Float extends Double {

    // Own properties of GXml-0.20.GXml.Float

    static name: string

    // Constructors of GXml-0.20.GXml.Float

    constructor(config?: Float.ConstructorProperties) 
    constructor() 
    static new(): Float

    // Overloads of new

    static new(): Double
    _init(config?: Float.ConstructorProperties): void
}

module Int {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {
    }

}

interface Int {

    // Own properties of GXml-0.20.GXml.Int

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Int

    value: any

    // Owm methods of GXml-0.20.GXml.Int

    getInteger(): number
    setInteger(value: number): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Int

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Int extends BaseProperty {

    // Own properties of GXml-0.20.GXml.Int

    static name: string

    // Constructors of GXml-0.20.GXml.Int

    constructor(config?: Int.ConstructorProperties) 
    constructor() 
    static new(): Int
    _init(config?: Int.ConstructorProperties): void
}

module Boolean {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {
    }

}

interface Boolean {

    // Own properties of GXml-0.20.GXml.Boolean

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Boolean

    value: any

    // Owm methods of GXml-0.20.GXml.Boolean

    getBoolean(): boolean
    setBoolean(value: boolean): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Boolean

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Boolean extends BaseProperty {

    // Own properties of GXml-0.20.GXml.Boolean

    static name: string

    // Constructors of GXml-0.20.GXml.Boolean

    constructor(config?: Boolean.ConstructorProperties) 
    constructor() 
    static new(): Boolean
    _init(config?: Boolean.ConstructorProperties): void
}

module Enum {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.Enum

        useNick?: boolean | null
        camelCase?: boolean | null
        upperCase?: boolean | null
        enumType?: GObject.GType | null
    }

}

interface Enum {

    // Own properties of GXml-0.20.GXml.Enum

    useNick: boolean
    camelCase: boolean
    upperCase: boolean
    __gtype__: number

    // Own fields of GXml-0.20.GXml.Enum

    value: any
    enumType: GObject.GType
    val: string | null

    // Owm methods of GXml-0.20.GXml.Enum

    getUseNick(): boolean
    setUseNick(value: boolean): void
    getCamelCase(): boolean
    setCamelCase(value: boolean): void
    getUpperCase(): boolean
    setUpperCase(value: boolean): void
    getEnumType(): GObject.GType
    setEnumType(value: GObject.GType): void
    initializeEnum(enumType: GObject.GType): void
    getEnum(): number
    setEnum(value: number): void
    isValid(): boolean

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Enum

    connect(sigName: "notify::use-nick", callback: (...args: any[]) => void): number
    on(sigName: "notify::use-nick", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::use-nick", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::use-nick", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::use-nick", ...args: any[]): void
    connect(sigName: "notify::camel-case", callback: (...args: any[]) => void): number
    on(sigName: "notify::camel-case", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::camel-case", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::camel-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::camel-case", ...args: any[]): void
    connect(sigName: "notify::upper-case", callback: (...args: any[]) => void): number
    on(sigName: "notify::upper-case", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::upper-case", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::upper-case", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::upper-case", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Enum extends BaseProperty {

    // Own properties of GXml-0.20.GXml.Enum

    static name: string

    // Constructors of GXml-0.20.GXml.Enum

    constructor(config?: Enum.ConstructorProperties) 
    constructor() 
    static new(): Enum
    _init(config?: Enum.ConstructorProperties): void
}

module Date {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {
    }

}

interface Date {

    // Own properties of GXml-0.20.GXml.Date

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Date

    value: any

    // Owm methods of GXml-0.20.GXml.Date

    getDate(): /* result */ GLib.Date
    setDate(date: GLib.Date): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.Date

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Date extends BaseProperty {

    // Own properties of GXml-0.20.GXml.Date

    static name: string

    // Constructors of GXml-0.20.GXml.Date

    constructor(config?: Date.ConstructorProperties) 
    constructor() 
    static new(): Date
    _init(config?: Date.ConstructorProperties): void
}

module DateTime {

    // Constructor properties interface

    interface ConstructorProperties extends BaseProperty.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.DateTime

        format?: string | null
    }

}

interface DateTime {

    // Own properties of GXml-0.20.GXml.DateTime

    format: string | null
    __gtype__: number

    // Own fields of GXml-0.20.GXml.DateTime

    value: any

    // Owm methods of GXml-0.20.GXml.DateTime

    getFormat(): string | null
    setFormat(value: string | null): void
    getDatetime(): GLib.DateTime
    setDatetime(dt: GLib.DateTime): void

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.DateTime

    connect(sigName: "notify::format", callback: (...args: any[]) => void): number
    on(sigName: "notify::format", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::format", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::format", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::format", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class DateTime extends BaseProperty {

    // Own properties of GXml-0.20.GXml.DateTime

    static name: string

    // Constructors of GXml-0.20.GXml.DateTime

    constructor(config?: DateTime.ConstructorProperties) 
    constructor() 
    static new(): DateTime
    _init(config?: DateTime.ConstructorProperties): void
}

module Range {

    // Constructor properties interface

    interface ConstructorProperties extends DomRange.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Range extends DomRange {

    // Own properties of GXml-0.20.GXml.Range

    __gtype__: number

    // Own fields of GXml-0.20.GXml.Range

    document: DomDocument
    startContainer: any
    startOffset: any
    endContainer: any
    endOffset: any
    // Has conflict: collapse: boolean
    commonAncestorContainer: any

    // Class property signals of GXml-0.20.GXml.Range

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::start-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-container", ...args: any[]): void
    connect(sigName: "notify::start-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::start-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::start-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::start-offset", ...args: any[]): void
    connect(sigName: "notify::end-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-container", ...args: any[]): void
    connect(sigName: "notify::end-offset", callback: (...args: any[]) => void): number
    on(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::end-offset", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::end-offset", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::end-offset", ...args: any[]): void
    connect(sigName: "notify::collapsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::collapsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::collapsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::collapsed", ...args: any[]): void
    connect(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): number
    on(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::common-ancestor-container", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::common-ancestor-container", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Range extends GObject.Object {

    // Own properties of GXml-0.20.GXml.Range

    static name: string

    // Constructors of GXml-0.20.GXml.Range

    constructor(config?: Range.ConstructorProperties) 
    constructor(doc: DomDocument) 
    static new(doc: DomDocument): Range
    _init(config?: Range.ConstructorProperties): void
}

module SettableTokenList {

    // Constructor properties interface

    interface ConstructorProperties extends DomSettableTokenList.ConstructorProperties, TokenList.ConstructorProperties {
    }

}

interface SettableTokenList extends DomSettableTokenList {

    // Own properties of GXml-0.20.GXml.SettableTokenList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Conflicting methods

    contains(token: string | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    contains(item: any | null): boolean
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any | null): boolean
    add(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any | null): boolean
    remove(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any | null
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    set(index: number, item: any | null): void
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    indexOf(item: any | null): number
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    removeAt(index: number): any | null
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.SettableTokenList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class SettableTokenList extends TokenList {

    // Own properties of GXml-0.20.GXml.SettableTokenList

    static name: string

    // Constructors of GXml-0.20.GXml.SettableTokenList

    constructor(config?: SettableTokenList.ConstructorProperties) 
    constructor(e: DomElement, attr: string | null) 
    static new(e: DomElement, attr: string | null): SettableTokenList

    // Overloads of new

    static new(e: DomElement, attr: string | null): TokenList
    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: SettableTokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module StringRef {

    // Constructor properties interface

    interface ConstructorProperties extends Property.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface StringRef extends Property {

    // Own properties of GXml-0.20.GXml.StringRef

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.StringRef

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class StringRef extends GObject.Object {

    // Own properties of GXml-0.20.GXml.StringRef

    static name: string

    // Constructors of GXml-0.20.GXml.StringRef

    constructor(config?: StringRef.ConstructorProperties) 
    constructor(obj: Object, name: string | null) 
    static new(obj: Object, name: string | null): StringRef
    _init(config?: StringRef.ConstructorProperties): void
}

module CharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends DomNonDocumentTypeChildNode.ConstructorProperties, DomChildNode.ConstructorProperties, DomCharacterData.ConstructorProperties, Node.ConstructorProperties {
    }

}

interface CharacterData extends DomNonDocumentTypeChildNode, DomChildNode, DomCharacterData {

    // Own properties of GXml-0.20.GXml.CharacterData

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.CharacterData

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class CharacterData extends Node {

    // Own properties of GXml-0.20.GXml.CharacterData

    static name: string

    // Constructors of GXml-0.20.GXml.CharacterData

    constructor(config?: CharacterData.ConstructorProperties) 
    constructor() 
    static new(): CharacterData

    // Overloads of new

    static new(): Node
    _init(config?: CharacterData.ConstructorProperties): void
}

module Text {

    // Constructor properties interface

    interface ConstructorProperties extends DomText.ConstructorProperties, CharacterData.ConstructorProperties {
    }

}

interface Text extends DomText {

    // Own properties of GXml-0.20.GXml.Text

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.Text

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Text extends CharacterData {

    // Own properties of GXml-0.20.GXml.Text

    static name: string

    // Constructors of GXml-0.20.GXml.Text

    constructor(config?: Text.ConstructorProperties) 
    constructor(doc: DomDocument, data: string | null) 
    static new(doc: DomDocument, data: string | null): Text

    // Overloads of new

    static new(): CharacterData
    static new(): Node
    _init(config?: Text.ConstructorProperties): void
}

module ProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends DomProcessingInstruction.ConstructorProperties, CharacterData.ConstructorProperties {
    }

}

interface ProcessingInstruction extends DomProcessingInstruction {

    // Own properties of GXml-0.20.GXml.ProcessingInstruction

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.ProcessingInstruction

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class ProcessingInstruction extends CharacterData {

    // Own properties of GXml-0.20.GXml.ProcessingInstruction

    static name: string

    // Constructors of GXml-0.20.GXml.ProcessingInstruction

    constructor(config?: ProcessingInstruction.ConstructorProperties) 
    constructor(doc: DomDocument, target: string | null, data: string | null) 
    static new(doc: DomDocument, target: string | null, data: string | null): ProcessingInstruction

    // Overloads of new

    static new(): CharacterData
    static new(): Node
    _init(config?: ProcessingInstruction.ConstructorProperties): void
}

module Comment {

    // Constructor properties interface

    interface ConstructorProperties extends DomComment.ConstructorProperties, CharacterData.ConstructorProperties {
    }

}

interface Comment extends DomComment {

    // Own properties of GXml-0.20.GXml.Comment

    __gtype__: number

    // Conflicting properties

    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.Comment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class Comment extends CharacterData {

    // Own properties of GXml-0.20.GXml.Comment

    static name: string

    // Constructors of GXml-0.20.GXml.Comment

    constructor(config?: Comment.ConstructorProperties) 
    constructor(doc: DomDocument, data: string | null) 
    static new(doc: DomDocument, data: string | null): Comment

    // Overloads of new

    static new(): CharacterData
    static new(): Node
    _init(config?: Comment.ConstructorProperties): void
}

module TokenList {

    // Constructor properties interface

    interface ConstructorProperties extends DomTokenList.ConstructorProperties, Gee.ArrayList.ConstructorProperties {
    }

}

interface TokenList extends DomTokenList {

    // Own properties of GXml-0.20.GXml.TokenList

    __gtype__: number

    // Conflicting properties

    readOnlyView: any
    size: any

    // Own fields of GXml-0.20.GXml.TokenList

    element: DomElement
    attr: string | null

    // Owm methods of GXml-0.20.GXml.TokenList

    update(): void

    // Conflicting methods

    contains(token: string | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    contains(item: any | null): boolean
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    add(tokens: string[]): void

    // Overloads of add

    add(item: any | null): boolean
    add(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    remove(tokens: string[]): void

    // Overloads of remove

    remove(item: any | null): boolean
    remove(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    get(index: number): any | null
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    set(index: number, item: any | null): void
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    indexOf(item: any | null): number
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    removeAt(index: number): any | null
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    clear(): void
    clear(): void

    // Overloads of clear

    clear(): void
    addAll(collection: Gee.Collection): boolean

    // Overloads of addAll

    addAll(collection: Gee.Collection): boolean
    addAll(collection: Gee.Collection): boolean
    getSize(): number
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getReadOnly(): boolean
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.TokenList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TokenList extends Gee.ArrayList {

    // Own properties of GXml-0.20.GXml.TokenList

    static name: string

    // Constructors of GXml-0.20.GXml.TokenList

    constructor(config?: TokenList.ConstructorProperties) 
    constructor(e: DomElement, attr: string | null) 
    static new(e: DomElement, attr: string | null): TokenList

    // Overloads of new

    static new(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify, equalFunc: Gee.EqualDataFunc | null): Gee.ArrayList
    _init(config?: TokenList.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module TreeWalker {

    // Constructor properties interface

    interface ConstructorProperties extends DomTreeWalker.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface TreeWalker extends DomTreeWalker {

    // Own properties of GXml-0.20.GXml.TreeWalker

    __gtype__: number

    // Own fields of GXml-0.20.GXml.TreeWalker

    root: any
    whatToShow: any
    currentNode: any

    // Class property signals of GXml-0.20.GXml.TreeWalker

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::what-to-show", callback: (...args: any[]) => void): number
    on(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::what-to-show", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::what-to-show", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::what-to-show", ...args: any[]): void
    connect(sigName: "notify::current-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::current-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::current-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::current-node", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class TreeWalker extends GObject.Object {

    // Own properties of GXml-0.20.GXml.TreeWalker

    static name: string

    // Constructors of GXml-0.20.GXml.TreeWalker

    constructor(config?: TreeWalker.ConstructorProperties) 
    constructor(root: DomNode, w: number) 
    static new(root: DomNode, w: number): TreeWalker
    _init(config?: TreeWalker.ConstructorProperties): void
}

module XAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends DomAttr.ConstructorProperties, XNode.ConstructorProperties {
    }

}

interface XAttribute extends DomAttr {

    // Own properties of GXml-0.20.GXml.XAttribute

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Conflicting methods

    getName(): string | null
    getName(): string | null
    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void
    setValue(value: string | null): void

    // Class property signals of GXml-0.20.GXml.XAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XAttribute extends XNode {

    // Own properties of GXml-0.20.GXml.XAttribute

    static name: string

    // Constructors of GXml-0.20.GXml.XAttribute

    constructor(config?: XAttribute.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XAttribute
    _init(config?: XAttribute.ConstructorProperties): void
}

module XCharacterData {

    // Constructor properties interface

    interface ConstructorProperties extends DomCharacterData.ConstructorProperties, XNonDocumentChildNode.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XCharacterData

        str?: string | null
    }

}

interface XCharacterData extends DomCharacterData {

    // Own properties of GXml-0.20.GXml.XCharacterData

    str: string | null
    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Owm methods of GXml-0.20.GXml.XCharacterData

    getStr(): string | null
    setStr(value: string | null): void

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.XCharacterData

    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XCharacterData extends XNonDocumentChildNode {

    // Own properties of GXml-0.20.GXml.XCharacterData

    static name: string

    // Constructors of GXml-0.20.GXml.XCharacterData

    constructor(config?: XCharacterData.ConstructorProperties) 
    constructor() 
    static new(): XCharacterData

    // Overloads of new

    static new(): XNonDocumentChildNode
    static new(): XChildNode
    _init(config?: XCharacterData.ConstructorProperties): void
}

module XChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomChildNode.ConstructorProperties, XNode.ConstructorProperties {
    }

}

interface XChildNode extends DomChildNode {

    // Own properties of GXml-0.20.GXml.XChildNode

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Class property signals of GXml-0.20.GXml.XChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XChildNode extends XNode {

    // Own properties of GXml-0.20.GXml.XChildNode

    static name: string

    // Constructors of GXml-0.20.GXml.XChildNode

    constructor(config?: XChildNode.ConstructorProperties) 
    constructor() 
    static new(): XChildNode
    _init(config?: XChildNode.ConstructorProperties): void
}

module XNonDocumentChildNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomNonDocumentTypeChildNode.ConstructorProperties, XChildNode.ConstructorProperties {
    }

}

interface XNonDocumentChildNode extends DomNonDocumentTypeChildNode {

    // Own properties of GXml-0.20.GXml.XNonDocumentChildNode

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Class property signals of GXml-0.20.GXml.XNonDocumentChildNode

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XNonDocumentChildNode extends XChildNode {

    // Own properties of GXml-0.20.GXml.XNonDocumentChildNode

    static name: string

    // Constructors of GXml-0.20.GXml.XNonDocumentChildNode

    constructor(config?: XNonDocumentChildNode.ConstructorProperties) 
    constructor() 
    static new(): XNonDocumentChildNode

    // Overloads of new

    static new(): XChildNode
    _init(config?: XNonDocumentChildNode.ConstructorProperties): void
}

module XComment {

    // Constructor properties interface

    interface ConstructorProperties extends DomComment.ConstructorProperties, XCharacterData.ConstructorProperties {
    }

}

interface XComment extends DomComment {

    // Own properties of GXml-0.20.GXml.XComment

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.XComment

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XComment extends XCharacterData {

    // Own properties of GXml-0.20.GXml.XComment

    static name: string

    // Constructors of GXml-0.20.GXml.XComment

    constructor(config?: XComment.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XComment

    // Overloads of new

    static new(): XCharacterData
    static new(): XNonDocumentChildNode
    static new(): XChildNode
    _init(config?: XComment.ConstructorProperties): void
}

module XDocument {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomNonElementParentNode.ConstructorProperties, DomDocument.ConstructorProperties, DomXMLDocument.ConstructorProperties, XPathContext.ConstructorProperties, XNode.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XDocument

        indent?: boolean | null
        nsTop?: boolean | null
        prefixDefaultNs?: boolean | null
        backup?: boolean | null
        file?: Gio.File | null
    }

}

interface XDocument extends DomParentNode, DomNonElementParentNode, DomDocument, DomXMLDocument, XPathContext {

    // Own properties of GXml-0.20.GXml.XDocument

    indent: boolean
    nsTop: boolean
    prefixDefaultNs: boolean
    backup: boolean
    file: Gio.File
    readonly root: DomNode
    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Own fields of GXml-0.20.GXml.XDocument

    doc: any
    buffer: any
    parser: Parser
    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    constructor_: DomEvent

    // Owm methods of GXml-0.20.GXml.XDocument

    getIndent(): boolean
    setIndent(value: boolean): void
    getNsTop(): boolean
    setNsTop(value: boolean): void
    getPrefixDefaultNs(): boolean
    setPrefixDefaultNs(value: boolean): void
    getBackup(): boolean
    setBackup(value: boolean): void
    getFile(): Gio.File
    setFile(value: Gio.File): void
    getRoot(): DomNode
    createPi(target: string | null, data: string | null): DomNode
    createText(text: string | null): DomNode
    libxmlToString(): string | null
    // Has conflict: save(cancellable: Gio.Cancellable | null): boolean
    // Has conflict: saveAs(f: Gio.File, cancellable: Gio.Cancellable | null): boolean

    // Own virtual methods of GXml-0.20.GXml.XDocument

    save(cancellable: Gio.Cancellable | null): boolean
    saveAs(f: Gio.File, cancellable: Gio.Cancellable | null): boolean

    // Class property signals of GXml-0.20.GXml.XDocument

    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::ns-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ns-top", ...args: any[]): void
    connect(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix-default-ns", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XDocument extends XNode {

    // Own properties of GXml-0.20.GXml.XDocument

    static name: string

    // Constructors of GXml-0.20.GXml.XDocument

    constructor(config?: XDocument.ConstructorProperties) 
    constructor() 
    static new(): XDocument
    static fromPath(path: string | null, options: number): XDocument
    static fromUri(uri: string | null, options: number): XDocument
    static fromFile(file: Gio.File, options: number, cancel: Gio.Cancellable | null): XDocument
    static fromString(str: string | null, options: number): XDocument
    static fromStream(istream: Gio.InputStream): XDocument
    static fromDoc(doc: libxml2.Doc): XDocument
    _init(config?: XDocument.ConstructorProperties): void
}

module XElement {

    // Constructor properties interface

    interface ConstructorProperties extends DomParentNode.ConstructorProperties, DomElement.ConstructorProperties, XPathContext.ConstructorProperties, XNonDocumentChildNode.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XElement

        content?: string | null
    }

}

interface XElement extends DomParentNode, DomElement, XPathContext {

    // Own properties of GXml-0.20.GXml.XElement

    content: string | null
    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Owm methods of GXml-0.20.GXml.XElement

    setAttr(aname: string | null, avalue: string | null): void
    getAttr(name: string | null): DomNode | null
    setNsAttr(ns: string | null, aname: string | null, value: string | null): void
    getNsAttr(name: string | null, uri: string | null): DomNode | null
    normalize(): void

    // Overloads of normalize

    normalize(): void
    getContent(): string | null
    setContent(value: string | null): void
    removeAttr(name: string | null): void
    removeNsAttr(name: string | null, uri: string | null): void

    // Class property signals of GXml-0.20.GXml.XElement

    connect(sigName: "notify::content", callback: (...args: any[]) => void): number
    on(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::namespace-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::namespace-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::namespace-uri", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::local-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::local-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::local-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::local-name", ...args: any[]): void
    connect(sigName: "notify::tag-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::tag-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::tag-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::tag-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (...args: any[]) => void): number
    on(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::id", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::id", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::class-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-name", ...args: any[]): void
    connect(sigName: "notify::class-list", callback: (...args: any[]) => void): number
    on(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::class-list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::class-list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::class-list", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (...args: any[]) => void): number
    on(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attributes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attributes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XElement extends XNonDocumentChildNode {

    // Own properties of GXml-0.20.GXml.XElement

    static name: string

    // Constructors of GXml-0.20.GXml.XElement

    constructor(config?: XElement.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XElement

    // Overloads of new

    static new(): XNonDocumentChildNode
    static new(): XChildNode
    _init(config?: XElement.ConstructorProperties): void
}

module XHashMapAttr {

    // Constructor properties interface

    interface ConstructorProperties extends DomNamedNodeMap.ConstructorProperties, Gee.AbstractMap.ConstructorProperties {
    }

}

interface XHashMapAttr extends DomNamedNodeMap {

    // Own properties of GXml-0.20.GXml.XHashMapAttr

    __gtype__: number

    // Conflicting methods

    hasKey(key: any | null): boolean

    // Overloads of hasKey

    hasKey(key: any | null): boolean
    hasKey(key: any | null): boolean
    has(key: any | null, value: any | null): boolean

    // Overloads of has

    has(key: any | null, value: any | null): boolean
    has(key: any | null, value: any | null): boolean
    get(key: any | null): any | null

    // Overloads of get

    get(key: any | null): any | null
    get(key: any | null): any | null
    set(key: any | null, value: any | null): void

    // Overloads of set

    set(key: any | null, value: any | null): void
    set(key: any | null, value: any | null): void
    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]

    // Overloads of unset

    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]
    unset(key: any | null): [ /* returnType */ boolean, /* value */ any ]
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    mapIterator(): Gee.MapIterator

    // Overloads of mapIterator

    mapIterator(): Gee.MapIterator
    mapIterator(): Gee.MapIterator
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    getKeys(): Gee.Set

    // Overloads of getKeys

    getKeys(): Gee.Set
    getKeys(): Gee.Set
    getValues(): Gee.Collection

    // Overloads of getValues

    getValues(): Gee.Collection
    getValues(): Gee.Collection
    getEntries(): Gee.Set

    // Overloads of getEntries

    getEntries(): Gee.Set
    getEntries(): Gee.Set
    getReadOnlyView(): Gee.Map

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Map
    getReadOnlyView(): Gee.Map
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Overloads of stream

    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator
    stream(aType: GObject.GType, aDupFunc: GObject.BoxedCopyFunc, aDestroyFunc: GLib.DestroyNotify, f: Gee.StreamFunc): Gee.Iterator

    // Class property signals of GXml-0.20.GXml.XHashMapAttr

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::keys", callback: (...args: any[]) => void): number
    on(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::keys", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::keys", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::keys", ...args: any[]): void
    connect(sigName: "notify::values", callback: (...args: any[]) => void): number
    on(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::values", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::values", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::values", ...args: any[]): void
    connect(sigName: "notify::entries", callback: (...args: any[]) => void): number
    on(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::entries", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::entries", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::entries", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XHashMapAttr extends Gee.AbstractMap {

    // Own properties of GXml-0.20.GXml.XHashMapAttr

    static name: string

    // Constructors of GXml-0.20.GXml.XHashMapAttr

    constructor(config?: XHashMapAttr.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XHashMapAttr
    _init(config?: XHashMapAttr.ConstructorProperties): void
}

module XHashMapAttrEntry {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.MapEntry.ConstructorProperties {
    }

}

interface XHashMapAttrEntry {

    // Own properties of GXml-0.20.GXml.XHashMapAttrEntry

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.XHashMapAttrEntry

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::k-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-type", ...args: any[]): void
    connect(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-dup-func", ...args: any[]): void
    connect(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::k-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::k-destroy-func", ...args: any[]): void
    connect(sigName: "notify::v-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-type", ...args: any[]): void
    connect(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-dup-func", ...args: any[]): void
    connect(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::v-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::v-destroy-func", ...args: any[]): void
    connect(sigName: "notify::key", callback: (...args: any[]) => void): number
    on(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::key", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::key", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XHashMapAttrEntry extends Gee.MapEntry {

    // Own properties of GXml-0.20.GXml.XHashMapAttrEntry

    static name: string

    // Constructors of GXml-0.20.GXml.XHashMapAttrEntry

    constructor(config?: XHashMapAttrEntry.ConstructorProperties) 
    constructor(doc: XDocument, attr: any | null) 
    static new(doc: XDocument, attr: any | null): XHashMapAttrEntry
    _init(config?: XHashMapAttrEntry.ConstructorProperties): void
}

module XHashMapAttrIterator {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.MapIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface XHashMapAttrIterator extends Gee.MapIterator {

    // Own properties of GXml-0.20.GXml.XHashMapAttrIterator

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.XHashMapAttrIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valid", ...args: any[]): void
    connect(sigName: "notify::mutable", callback: (...args: any[]) => void): number
    on(sigName: "notify::mutable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mutable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mutable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mutable", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XHashMapAttrIterator extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XHashMapAttrIterator

    static name: string

    // Constructors of GXml-0.20.GXml.XHashMapAttrIterator

    constructor(config?: XHashMapAttrIterator.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XHashMapAttrIterator
    _init(config?: XHashMapAttrIterator.ConstructorProperties): void
}

module XHtmlDocument {

    // Constructor properties interface

    interface ConstructorProperties extends DomHtmlDocument.ConstructorProperties, XDocument.ConstructorProperties {
    }

}

interface XHtmlDocument extends DomHtmlDocument {

    // Own properties of GXml-0.20.GXml.XHtmlDocument

    __gtype__: number

    // Conflicting properties

    implementation: any
    url: any
    origin: any
    compatMode: any
    characterSet: any
    contentType: any
    baseUri: any
    doc: any

    // Conflicting methods

    readFromString(str: string | null): void

    // Overloads of readFromString

    readFromString(str: string | null, cancellable: Gio.Cancellable | null): void
    readFromString(str: string | null, cancellable: Gio.Cancellable | null): void

    // Class property signals of GXml-0.20.GXml.XHtmlDocument

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::ns-top", callback: (...args: any[]) => void): number
    on(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ns-top", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ns-top", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ns-top", ...args: any[]): void
    connect(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): number
    on(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::prefix-default-ns", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::prefix-default-ns", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::file", callback: (...args: any[]) => void): number
    on(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::root", callback: (...args: any[]) => void): number
    on(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::root", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::root", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::implementation", callback: (...args: any[]) => void): number
    on(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::implementation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::implementation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::implementation", ...args: any[]): void
    connect(sigName: "notify::url", callback: (...args: any[]) => void): number
    on(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::url", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::url", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::url", ...args: any[]): void
    connect(sigName: "notify::document-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-uri", ...args: any[]): void
    connect(sigName: "notify::origin", callback: (...args: any[]) => void): number
    on(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::origin", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::origin", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::origin", ...args: any[]): void
    connect(sigName: "notify::compat-mode", callback: (...args: any[]) => void): number
    on(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::compat-mode", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::compat-mode", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::compat-mode", ...args: any[]): void
    connect(sigName: "notify::character-set", callback: (...args: any[]) => void): number
    on(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::character-set", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::character-set", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::character-set", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::doctype", callback: (...args: any[]) => void): number
    on(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::doctype", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::doctype", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::doctype", ...args: any[]): void
    connect(sigName: "notify::document-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document-element", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::children", callback: (...args: any[]) => void): number
    on(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children", ...args: any[]): void
    connect(sigName: "notify::first-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-element-child", ...args: any[]): void
    connect(sigName: "notify::last-element-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-element-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-element-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-element-child", ...args: any[]): void
    connect(sigName: "notify::child-element-count", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-element-count", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-element-count", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-element-count", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XHtmlDocument extends XDocument {

    // Own properties of GXml-0.20.GXml.XHtmlDocument

    static name: string

    // Constructors of GXml-0.20.GXml.XHtmlDocument

    constructor(config?: XHtmlDocument.ConstructorProperties) 
    static fromPath(path: string | null, options: number): XHtmlDocument

    // Overloads of fromPath

    static fromPath(path: string | null, options: number): XDocument
    static fromUri(uri: string | null, options: number): XHtmlDocument

    // Overloads of fromUri

    static fromUri(uri: string | null, options: number): XDocument
    static fromFile(file: Gio.File, options: number, cancel: Gio.Cancellable | null): XHtmlDocument

    // Overloads of fromFile

    static fromFile(file: Gio.File, options: number, cancel: Gio.Cancellable | null): XDocument
    static fromString(html: string | null, options: number): XHtmlDocument

    // Overloads of fromString

    static fromString(str: string | null, options: number): XDocument
    static fromStringContext(html: string | null, options: number): XHtmlDocument
    static fromStringDoc(html: string | null, options: number): XHtmlDocument
    constructor() 
    static new(): XHtmlDocument

    // Overloads of new

    static new(): XDocument
    _init(config?: XHtmlDocument.ConstructorProperties): void
    static getDefaultOptions(): number
}

module XListChildren {

    // Constructor properties interface

    interface ConstructorProperties extends DomNodeList.ConstructorProperties, DomHTMLCollection.ConstructorProperties, Gee.AbstractBidirList.ConstructorProperties {
    }

}

interface XListChildren extends DomNodeList, DomHTMLCollection {

    // Own properties of GXml-0.20.GXml.XListChildren

    __gtype__: number

    // Conflicting properties

    readOnlyView: any

    // Conflicting methods

    item(index: number): DomNode | null
    item(index: number): DomElement | null
    getLength(): number
    getLength(): number
    bidirListIterator(): Gee.BidirListIterator

    // Overloads of bidirListIterator

    bidirListIterator(): Gee.BidirListIterator
    bidirListIterator(): Gee.BidirListIterator
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.BidirList
    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.BidirList

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.List
    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.List

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection

    // Overloads of getReadOnlyView

    getReadOnlyView(): Gee.Collection
    getReadOnlyView(): Gee.Collection
    listIterator(): Gee.ListIterator

    // Overloads of listIterator

    listIterator(): Gee.ListIterator
    listIterator(): Gee.ListIterator
    get(index: number): any | null

    // Overloads of get

    get(index: number): any | null
    get(index: number): any | null
    set(index: number, item: any | null): void

    // Overloads of set

    set(index: number, item: any | null): void
    set(index: number, item: any | null): void
    indexOf(item: any | null): number

    // Overloads of indexOf

    indexOf(item: any | null): number
    indexOf(item: any | null): number
    insert(index: number, item: any | null): void

    // Overloads of insert

    insert(index: number, item: any | null): void
    insert(index: number, item: any | null): void
    removeAt(index: number): any | null

    // Overloads of removeAt

    removeAt(index: number): any | null
    removeAt(index: number): any | null
    slice(start: number, stop: number): Gee.List | null

    // Overloads of slice

    slice(start: number, stop: number): Gee.List | null
    slice(start: number, stop: number): Gee.List | null
    contains(item: any | null): boolean

    // Overloads of contains

    contains(item: any | null): boolean
    contains(item: any | null): boolean
    add(item: any | null): boolean

    // Overloads of add

    add(item: any | null): boolean
    add(item: any | null): boolean
    remove(item: any | null): boolean

    // Overloads of remove

    remove(item: any | null): boolean
    remove(item: any | null): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void
    toArray(): DomElement[]

    // Overloads of toArray

    toArray(): any[]
    toArray(): any[]
    getSize(): number

    // Overloads of getSize

    getSize(): number
    getSize(): number
    getReadOnly(): boolean

    // Overloads of getReadOnly

    getReadOnly(): boolean
    getReadOnly(): boolean
    iterator(): Gee.Iterator

    // Overloads of iterator

    iterator(): Gee.Iterator
    iterator(): Gee.Iterator
    foreach(f: Gee.ForallFunc): boolean

    // Overloads of foreach

    foreach(f: Gee.ForallFunc): boolean
    foreach(f: Gee.ForallFunc): boolean
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void

    // Overloads of reserved0

    reserved0(): void
    reserved0(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void

    // Overloads of reserved1

    reserved1(): void
    reserved1(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void

    // Overloads of reserved2

    reserved2(): void
    reserved2(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void

    // Overloads of reserved3

    reserved3(): void
    reserved3(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void

    // Overloads of reserved4

    reserved4(): void
    reserved4(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void

    // Overloads of reserved5

    reserved5(): void
    reserved5(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void

    // Overloads of reserved6

    reserved6(): void
    reserved6(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void

    // Overloads of reserved7

    reserved7(): void
    reserved7(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void

    // Overloads of reserved8

    reserved8(): void
    reserved8(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Overloads of reserved9

    reserved9(): void
    reserved9(): void

    // Class property signals of GXml-0.20.GXml.XListChildren

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::g-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-type", ...args: any[]): void
    connect(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-dup-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-dup-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-dup-func", ...args: any[]): void
    connect(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): number
    on(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::g-destroy-func", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::g-destroy-func", ...args: any[]): void
    connect(sigName: "notify::read-only-view", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only-view", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only-view", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only-view", ...args: any[]): void
    connect(sigName: "notify::size", callback: (...args: any[]) => void): number
    on(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::size", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::size", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::size", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XListChildren extends Gee.AbstractBidirList {

    // Own properties of GXml-0.20.GXml.XListChildren

    static name: string

    // Constructors of GXml-0.20.GXml.XListChildren

    constructor(config?: XListChildren.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XListChildren
    _init(config?: XListChildren.ConstructorProperties): void

    // Conflicting static methods

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.List

    // Overloads of empty

    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
    static empty(gType: GObject.GType, gDupFunc: GObject.BoxedCopyFunc, gDestroyFunc: GLib.DestroyNotify): Gee.Collection
}

module XListChildrenIterator {

    // Constructor properties interface

    interface ConstructorProperties extends Gee.Traversable.ConstructorProperties, Gee.Iterator.ConstructorProperties, Gee.BidirIterator.ConstructorProperties, Gee.ListIterator.ConstructorProperties, Gee.BidirListIterator.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface XListChildrenIterator extends Gee.Traversable, Gee.Iterator, Gee.BidirIterator, Gee.ListIterator, Gee.BidirListIterator {

    // Own properties of GXml-0.20.GXml.XListChildrenIterator

    __gtype__: number

    // Class property signals of GXml-0.20.GXml.XListChildrenIterator

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::valid", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-only", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-only", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XListChildrenIterator extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XListChildrenIterator

    static name: string

    // Constructors of GXml-0.20.GXml.XListChildrenIterator

    constructor(config?: XListChildrenIterator.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XListChildrenIterator
    _init(config?: XListChildrenIterator.ConstructorProperties): void
}

module XNode {

    // Constructor properties interface

    interface ConstructorProperties extends DomEventTarget.ConstructorProperties, DomNode.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XNode

        value?: string | null
    }

}

interface XNode extends DomEventTarget, DomNode {

    // Own properties of GXml-0.20.GXml.XNode

    readonly attrs: Gee.Map
    readonly childrenNodes: Gee.BidirList
    readonly document: DomDocument
    readonly parent: DomNode
    readonly typeNode: NodeType
    readonly name: string | null
    value: string | null
    __gtype__: number

    // Own fields of GXml-0.20.GXml.XNode

    doc: XDocument
    node: any | null
    ownedNode: boolean
    baseUri: any

    // Owm methods of GXml-0.20.GXml.XNode

    // Has conflict: setNamespace(uri: string | null, prefix: string | null): boolean
    // Has conflict: getAttrs(): Gee.Map
    // Has conflict: getChildrenNodes(): Gee.BidirList
    // Has conflict: getDocument(): DomDocument
    // Has conflict: getParent(): DomNode
    // Has conflict: getTypeNode(): NodeType
    // Has conflict: getName(): string | null
    // Has conflict: getValue(): string | null
    // Has conflict: setValue(value: string | null): void
    // Has conflict: toString(): string | null
    getInternalNode(): any | null
    cloneNode(deep: boolean): DomNode

    // Own virtual methods of GXml-0.20.GXml.XNode

    setNamespace(uri: string | null, prefix: string | null): boolean
    getAttrs(): Gee.Map
    getChildrenNodes(): Gee.BidirList
    getDocument(): DomDocument
    getParent(): DomNode
    getTypeNode(): NodeType
    getName(): string | null
    getValue(): string | null
    setValue(value: string | null): void
    toString(): string | null

    // Class property signals of GXml-0.20.GXml.XNode

    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XNode extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XNode

    static name: string

    // Constructors of GXml-0.20.GXml.XNode

    constructor(config?: XNode.ConstructorProperties) 
    _init(config?: XNode.ConstructorProperties): void
    static toGnode(doc: XDocument, node: any | null, takeNode: boolean): DomNode
}

module XParser {

    // Constructor properties interface

    interface ConstructorProperties extends Parser.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface XParser extends Parser {

    // Own properties of GXml-0.20.GXml.XParser

    __gtype__: number

    // Owm methods of GXml-0.20.GXml.XParser

    readNode(node: DomNode): void
    readChildNodesStreamAsync(istream: Gio.InputStream, callback: Gio.AsyncReadyCallback | null): void
    readChildNodesStreamFinish(res: Gio.AsyncResult): void

    // Class property signals of GXml-0.20.GXml.XParser

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::backup", callback: (...args: any[]) => void): number
    on(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::backup", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::backup", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::backup", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (...args: any[]) => void): number
    on(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::indent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::indent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::cancellable", callback: (...args: any[]) => void): number
    on(sigName: "notify::cancellable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::cancellable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::cancellable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::cancellable", ...args: any[]): void
    connect(sigName: "notify::node", callback: (...args: any[]) => void): number
    on(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node", ...args: any[]): void
    connect(sigName: "notify::types", callback: (...args: any[]) => void): number
    on(sigName: "notify::types", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::types", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::types", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::types", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XParser extends GObject.Object {

    // Own properties of GXml-0.20.GXml.XParser

    static name: string

    // Constructors of GXml-0.20.GXml.XParser

    constructor(config?: XParser.ConstructorProperties) 
    constructor(node: DomNode) 
    static new(node: DomNode): XParser
    _init(config?: XParser.ConstructorProperties): void
}

module XProcessingInstruction {

    // Constructor properties interface

    interface ConstructorProperties extends DomProcessingInstruction.ConstructorProperties, XCharacterData.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XProcessingInstruction

        data?: string | null
    }

}

interface XProcessingInstruction extends DomProcessingInstruction {

    // Own properties of GXml-0.20.GXml.XProcessingInstruction

    data: string | null
    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Owm methods of GXml-0.20.GXml.XProcessingInstruction

    getData(): string | null

    // Overloads of getData

    getData(): string | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    setData(value: string | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.XProcessingInstruction

    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::target", callback: (...args: any[]) => void): number
    on(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XProcessingInstruction extends XCharacterData {

    // Own properties of GXml-0.20.GXml.XProcessingInstruction

    static name: string

    // Constructors of GXml-0.20.GXml.XProcessingInstruction

    constructor(config?: XProcessingInstruction.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XProcessingInstruction

    // Overloads of new

    static new(): XCharacterData
    static new(): XNonDocumentChildNode
    static new(): XChildNode
    _init(config?: XProcessingInstruction.ConstructorProperties): void
}

module XsdSchema {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdSchema

        elementDefinitions?: XsdListElements | null
        simpleTypeDefinitions?: XsdListSimpleTypes | null
        complexTypeDefinitions?: XsdListComplexTypes | null
    }

}

interface XsdSchema {

    // Own properties of GXml-0.20.GXml.XsdSchema

    elementDefinitions: XsdListElements
    simpleTypeDefinitions: XsdListSimpleTypes
    complexTypeDefinitions: XsdListComplexTypes
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdSchema

    getElementDefinitions(): XsdListElements
    setElementDefinitions(value: XsdListElements): void
    getSimpleTypeDefinitions(): XsdListSimpleTypes
    setSimpleTypeDefinitions(value: XsdListSimpleTypes): void
    getComplexTypeDefinitions(): XsdListComplexTypes
    setComplexTypeDefinitions(value: XsdListComplexTypes): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdSchema

    connect(sigName: "notify::element-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::element-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::element-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::element-definitions", ...args: any[]): void
    connect(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type-definitions", ...args: any[]): void
    connect(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type-definitions", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type-definitions", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdSchema extends Element {

    // Own properties of GXml-0.20.GXml.XsdSchema

    static name: string

    // Constructors of GXml-0.20.GXml.XsdSchema

    constructor(config?: XsdSchema.ConstructorProperties) 
    constructor() 
    static new(): XsdSchema

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdSchema.ConstructorProperties): void
}

module XsdSimpleType {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdSimpleType

        final?: string | null
        name?: string | null
        annotation?: XsdAnnotation | null
        list?: XsdTypeList | null
        union?: XsdTypeUnion | null
        restriction?: XsdTypeRestriction | null
    }

}

interface XsdSimpleType {

    // Own properties of GXml-0.20.GXml.XsdSimpleType

    final: string | null
    name: string | null
    annotation: XsdAnnotation
    list: XsdTypeList
    union: XsdTypeUnion
    restriction: XsdTypeRestriction
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdSimpleType

    getFinal(): string | null
    setFinal(value: string | null): void
    getName(): string | null
    setName(value: string | null): void
    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void
    getList(): XsdTypeList
    setList(value: XsdTypeList): void
    getUnion(): XsdTypeUnion
    setUnion(value: XsdTypeUnion): void
    getRestriction(): XsdTypeRestriction
    setRestriction(value: XsdTypeRestriction): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdSimpleType

    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::list", callback: (...args: any[]) => void): number
    on(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::list", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::list", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::list", ...args: any[]): void
    connect(sigName: "notify::union", callback: (...args: any[]) => void): number
    on(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::union", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::union", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::union", ...args: any[]): void
    connect(sigName: "notify::restriction", callback: (...args: any[]) => void): number
    on(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::restriction", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::restriction", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::restriction", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdSimpleType extends Element {

    // Own properties of GXml-0.20.GXml.XsdSimpleType

    static name: string

    // Constructors of GXml-0.20.GXml.XsdSimpleType

    constructor(config?: XsdSimpleType.ConstructorProperties) 
    constructor() 
    static new(): XsdSimpleType

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdSimpleType.ConstructorProperties): void
}

module XsdTypeDefinition {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdTypeDefinition

        annotation?: XsdAnnotation | null
    }

}

interface XsdTypeDefinition {

    // Own properties of GXml-0.20.GXml.XsdTypeDefinition

    annotation: XsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdTypeDefinition

    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeDefinition

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeDefinition extends Element {

    // Own properties of GXml-0.20.GXml.XsdTypeDefinition

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeDefinition

    constructor(config?: XsdTypeDefinition.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeDefinition

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdTypeDefinition.ConstructorProperties): void
}

module XsdTypeList {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeDefinition.ConstructorProperties {
    }

}

interface XsdTypeList {

    // Own properties of GXml-0.20.GXml.XsdTypeList

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeList

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeList extends XsdTypeDefinition {

    // Own properties of GXml-0.20.GXml.XsdTypeList

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeList

    constructor(config?: XsdTypeList.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeList

    // Overloads of new

    static new(): XsdTypeDefinition
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeList.ConstructorProperties): void
}

module XsdTypeUnion {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeDefinition.ConstructorProperties {
    }

}

interface XsdTypeUnion {

    // Own properties of GXml-0.20.GXml.XsdTypeUnion

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeUnion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeUnion extends XsdTypeDefinition {

    // Own properties of GXml-0.20.GXml.XsdTypeUnion

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeUnion

    constructor(config?: XsdTypeUnion.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeUnion

    // Overloads of new

    static new(): XsdTypeDefinition
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeUnion.ConstructorProperties): void
}

module XsdTypeRestriction {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeDefinition.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdTypeRestriction

        base?: string | null
        simpleType?: XsdSimpleType | null
        enumerations?: XsdListTypeRestrictionEnumerations | null
        whiteSpaces?: XsdListTypeRestrictionWhiteSpaces | null
    }

}

interface XsdTypeRestriction {

    // Own properties of GXml-0.20.GXml.XsdTypeRestriction

    base: string | null
    simpleType: XsdSimpleType
    enumerations: XsdListTypeRestrictionEnumerations
    whiteSpaces: XsdListTypeRestrictionWhiteSpaces
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdTypeRestriction

    getBase(): string | null
    setBase(value: string | null): void
    getSimpleType(): XsdSimpleType
    setSimpleType(value: XsdSimpleType): void
    getEnumerations(): XsdListTypeRestrictionEnumerations
    setEnumerations(value: XsdListTypeRestrictionEnumerations): void
    getWhiteSpaces(): XsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces(value: XsdListTypeRestrictionWhiteSpaces): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestriction

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::enumerations", callback: (...args: any[]) => void): number
    on(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::enumerations", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::enumerations", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::enumerations", ...args: any[]): void
    connect(sigName: "notify::white-spaces", callback: (...args: any[]) => void): number
    on(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::white-spaces", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::white-spaces", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::white-spaces", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestriction extends XsdTypeDefinition {

    // Own properties of GXml-0.20.GXml.XsdTypeRestriction

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestriction

    constructor(config?: XsdTypeRestriction.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestriction

    // Overloads of new

    static new(): XsdTypeDefinition
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestriction.ConstructorProperties): void
}

module XsdTypeRestrictionDef {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdTypeRestrictionDef

        annotation?: XsdAnnotation | null
    }

}

interface XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionDef

    annotation: XsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdTypeRestrictionDef

    getAnnotation(): XsdAnnotation
    setAnnotation(value: XsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionDef

    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionDef extends Element {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionDef

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionDef

    constructor(config?: XsdTypeRestrictionDef.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionDef

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionDef.ConstructorProperties): void
}

module XsdTypeRestrictionMinExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMinExclusive {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinExclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMinExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMinExclusive extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinExclusive

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMinExclusive

    constructor(config?: XsdTypeRestrictionMinExclusive.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMinExclusive

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMinExclusive.ConstructorProperties): void
}

module XsdTypeRestrictionMinInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMinInclusive {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinInclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMinInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMinInclusive extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinInclusive

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMinInclusive

    constructor(config?: XsdTypeRestrictionMinInclusive.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMinInclusive

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMinInclusive.ConstructorProperties): void
}

module XsdTypeRestrictionMaxExclusive {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMaxExclusive {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMaxExclusive extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusive

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusive

    constructor(config?: XsdTypeRestrictionMaxExclusive.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMaxExclusive

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMaxExclusive.ConstructorProperties): void
}

module XsdTypeRestrictionMaxInclusive {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMaxInclusive {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusive

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusive

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMaxInclusive extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusive

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusive

    constructor(config?: XsdTypeRestrictionMaxInclusive.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMaxInclusive

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMaxInclusive.ConstructorProperties): void
}

module XsdTypeRestrictionTotalDigits {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionTotalDigits {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionTotalDigits

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionTotalDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionTotalDigits extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionTotalDigits

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionTotalDigits

    constructor(config?: XsdTypeRestrictionTotalDigits.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionTotalDigits

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionTotalDigits.ConstructorProperties): void
}

module XsdTypeRestrictionFractionDigits {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionFractionDigits {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionFractionDigits

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionFractionDigits

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionFractionDigits extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionFractionDigits

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionFractionDigits

    constructor(config?: XsdTypeRestrictionFractionDigits.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionFractionDigits

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionFractionDigits.ConstructorProperties): void
}

module XsdTypeRestrictionLength {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionLength {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionLength extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionLength

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionLength

    constructor(config?: XsdTypeRestrictionLength.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionLength

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionLength.ConstructorProperties): void
}

module XsdTypeRestrictionMinLength {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMinLength {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMinLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMinLength extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinLength

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMinLength

    constructor(config?: XsdTypeRestrictionMinLength.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMinLength

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMinLength.ConstructorProperties): void
}

module XsdTypeRestrictionMaxLength {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionMaxLength {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxLength

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionMaxLength

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionMaxLength extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxLength

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionMaxLength

    constructor(config?: XsdTypeRestrictionMaxLength.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionMaxLength

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionMaxLength.ConstructorProperties): void
}

module XsdTypeRestrictionEnumeration {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

        value?: string | null
    }

}

interface XsdTypeRestrictionEnumeration {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

    value: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

    getValue(): string | null
    setValue(value: string | null): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionEnumeration extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionEnumeration

    constructor(config?: XsdTypeRestrictionEnumeration.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionEnumeration

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionEnumeration.ConstructorProperties): void
}

module XsdTypeRestrictionWhiteSpace {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

        fixed?: XsdTypeRestrictionWhiteSpaceFixed | null
        value?: string | null
    }

}

interface XsdTypeRestrictionWhiteSpace {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

    fixed: XsdTypeRestrictionWhiteSpaceFixed
    value: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

    getFixed(): XsdTypeRestrictionWhiteSpaceFixed
    setFixed(value: XsdTypeRestrictionWhiteSpaceFixed): void
    getValue(): string | null
    setValue(value: string | null): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionWhiteSpace extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpace

    constructor(config?: XsdTypeRestrictionWhiteSpace.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionWhiteSpace

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionWhiteSpace.ConstructorProperties): void
}

module XsdTypeRestrictionWhiteSpaceFixed {

    // Constructor properties interface

    interface ConstructorProperties extends Boolean.ConstructorProperties {
    }

}

interface XsdTypeRestrictionWhiteSpaceFixed {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixed

    __gtype__: number

    // Conflicting properties

    value: any

    // Conflicting methods

    getValue(): string | null

    // Overloads of getValue

    getValue(): string | null
    getValue(): string | null
    setValue(value: string | null): void

    // Overloads of setValue

    setValue(value: string | null): void
    setValue(value: string | null): void
    validateValue(val: string | null): boolean

    // Overloads of validateValue

    validateValue(val: string | null): boolean
    validateValue(val: string | null): boolean

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixed

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionWhiteSpaceFixed extends Boolean {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixed

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixed

    constructor(config?: XsdTypeRestrictionWhiteSpaceFixed.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionWhiteSpaceFixed

    // Overloads of new

    static new(): Boolean
    _init(config?: XsdTypeRestrictionWhiteSpaceFixed.ConstructorProperties): void
}

module XsdTypeRestrictionPattern {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionPattern {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionPattern

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionPattern

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionPattern extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionPattern

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionPattern

    constructor(config?: XsdTypeRestrictionPattern.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionPattern

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionPattern.ConstructorProperties): void
}

module XsdTypeRestrictionAssertion {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionAssertion {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionAssertion

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionAssertion

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionAssertion extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionAssertion

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionAssertion

    constructor(config?: XsdTypeRestrictionAssertion.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionAssertion

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionAssertion.ConstructorProperties): void
}

module XsdTypeRestrictionExplicitTimezone {

    // Constructor properties interface

    interface ConstructorProperties extends XsdTypeRestrictionDef.ConstructorProperties {
    }

}

interface XsdTypeRestrictionExplicitTimezone {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezone

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezone

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::annotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::annotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::annotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::annotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdTypeRestrictionExplicitTimezone extends XsdTypeRestrictionDef {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezone

    static name: string

    // Constructors of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezone

    constructor(config?: XsdTypeRestrictionExplicitTimezone.ConstructorProperties) 
    constructor() 
    static new(): XsdTypeRestrictionExplicitTimezone

    // Overloads of new

    static new(): XsdTypeRestrictionDef
    static new(): Element
    static new(): Node
    _init(config?: XsdTypeRestrictionExplicitTimezone.ConstructorProperties): void
}

module XsdComplexType {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseType.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdComplexType

        abstract?: boolean | null
        block?: string | null
        final?: string | null
        mixed?: boolean | null
        name?: string | null
        defaultAttributesApply?: boolean | null
        contentType?: XsdBaseContent | null
    }

}

interface XsdComplexType {

    // Own properties of GXml-0.20.GXml.XsdComplexType

    abstract: boolean
    block: string | null
    final: string | null
    mixed: boolean
    name: string | null
    defaultAttributesApply: boolean
    contentType: XsdBaseContent
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Own fields of GXml-0.20.GXml.XsdComplexType

    typeAttributes: XsdList
    groupAttributes: XsdList

    // Owm methods of GXml-0.20.GXml.XsdComplexType

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string | null
    setBlock(value: string | null): void
    getFinal(): string | null
    setFinal(value: string | null): void
    getMixed(): boolean
    setMixed(value: boolean): void
    getName(): string | null
    setName(value: string | null): void
    getDefaultAttributesApply(): boolean
    setDefaultAttributesApply(value: boolean): void
    getContentType(): XsdBaseContent
    setContentType(value: XsdBaseContent): void
    getTypeAttributes(): XsdList
    getGroupAttributes(): XsdList

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdComplexType

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::mixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::mixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::mixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::mixed", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): number
    on(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default-attributes-apply", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default-attributes-apply", ...args: any[]): void
    connect(sigName: "notify::content-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::content-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::content-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::content-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdComplexType extends XsdBaseType {

    // Own properties of GXml-0.20.GXml.XsdComplexType

    static name: string

    // Constructors of GXml-0.20.GXml.XsdComplexType

    constructor(config?: XsdComplexType.ConstructorProperties) 
    constructor() 
    static new(): XsdComplexType

    // Overloads of new

    static new(): XsdBaseType
    static new(): Element
    static new(): Node
    _init(config?: XsdComplexType.ConstructorProperties): void
}

module XsdExtension {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdExtension

        base?: string | null
    }

}

interface XsdExtension {

    // Own properties of GXml-0.20.GXml.XsdExtension

    base: string | null
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdExtension

    getBase(): string | null
    setBase(value: string | null): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdExtension

    connect(sigName: "notify::base", callback: (...args: any[]) => void): number
    on(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdExtension extends Element {

    // Own properties of GXml-0.20.GXml.XsdExtension

    static name: string

    // Constructors of GXml-0.20.GXml.XsdExtension

    constructor(config?: XsdExtension.ConstructorProperties) 
    constructor() 
    static new(): XsdExtension

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdExtension.ConstructorProperties): void
}

module XsdElement {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdElement

        abstract?: boolean | null
        block?: string | null
        "default"?: string | null
        final?: string | null
        fixed?: string | null
        form?: string | null
        maxOccurs?: string | null
        minOccurs?: string | null
        name?: string | null
        nillable?: boolean | null
        ref?: string | null
        substitutionGroup?: DomTokenList | null
        targetNamespace?: string | null
        objectType?: string | null
        anotation?: XsdAnnotation | null
        simpleType?: XsdSimpleType | null
        complexType?: XsdComplexType | null
    }

}

interface XsdElement {

    // Own properties of GXml-0.20.GXml.XsdElement

    abstract: boolean
    block: string | null
    "default": string | null
    final: string | null
    fixed: string | null
    form: string | null
    maxOccurs: string | null
    minOccurs: string | null
    name: string | null
    nillable: boolean
    // Has conflict: ref: string | null
    substitutionGroup: DomTokenList
    targetNamespace: string | null
    objectType: string | null
    anotation: XsdAnnotation
    simpleType: XsdSimpleType
    complexType: XsdComplexType
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdElement

    getAbstract(): boolean
    setAbstract(value: boolean): void
    getBlock(): string | null
    setBlock(value: string | null): void
    getDefault(): string | null
    setDefault(value: string | null): void
    getFinal(): string | null
    setFinal(value: string | null): void
    getFixed(): string | null
    setFixed(value: string | null): void
    getForm(): string | null
    setForm(value: string | null): void
    getMaxOccurs(): string | null
    setMaxOccurs(value: string | null): void
    getMinOccurs(): string | null
    setMinOccurs(value: string | null): void
    getName(): string | null
    setName(value: string | null): void
    getNillable(): boolean
    setNillable(value: boolean): void
    getRef(): string | null
    setRef(value: string | null): void
    getSubstitutionGroup(): DomTokenList
    setSubstitutionGroup(value: DomTokenList): void
    getTargetNamespace(): string | null
    setTargetNamespace(value: string | null): void
    getObjectType(): string | null
    setObjectType(value: string | null): void
    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void
    getSimpleType(): XsdSimpleType
    setSimpleType(value: XsdSimpleType): void
    getComplexType(): XsdComplexType
    setComplexType(value: XsdComplexType): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdElement

    connect(sigName: "notify::abstract", callback: (...args: any[]) => void): number
    on(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::abstract", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::abstract", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::abstract", ...args: any[]): void
    connect(sigName: "notify::block", callback: (...args: any[]) => void): number
    on(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::block", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::block", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::block", ...args: any[]): void
    connect(sigName: "notify::default", callback: (...args: any[]) => void): number
    on(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::default", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::default", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::default", ...args: any[]): void
    connect(sigName: "notify::final", callback: (...args: any[]) => void): number
    on(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::final", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::final", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::final", ...args: any[]): void
    connect(sigName: "notify::fixed", callback: (...args: any[]) => void): number
    on(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::fixed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::fixed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::fixed", ...args: any[]): void
    connect(sigName: "notify::form", callback: (...args: any[]) => void): number
    on(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::form", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::form", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::form", ...args: any[]): void
    connect(sigName: "notify::max-occurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::max-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::max-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::max-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::max-occurs", ...args: any[]): void
    connect(sigName: "notify::min-occurs", callback: (...args: any[]) => void): number
    on(sigName: "notify::min-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::min-occurs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::min-occurs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::min-occurs", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::nillable", callback: (...args: any[]) => void): number
    on(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::nillable", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::nillable", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::nillable", ...args: any[]): void
    connect(sigName: "notify::ref", callback: (...args: any[]) => void): number
    on(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::ref", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::ref", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::ref", ...args: any[]): void
    connect(sigName: "notify::substitution-group", callback: (...args: any[]) => void): number
    on(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::substitution-group", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::substitution-group", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::substitution-group", ...args: any[]): void
    connect(sigName: "notify::target-namespace", callback: (...args: any[]) => void): number
    on(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::target-namespace", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::target-namespace", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::target-namespace", ...args: any[]): void
    connect(sigName: "notify::object-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::object-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::object-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::object-type", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::simple-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::simple-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::simple-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::simple-type", ...args: any[]): void
    connect(sigName: "notify::complex-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::complex-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::complex-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::complex-type", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdElement extends Element {

    // Own properties of GXml-0.20.GXml.XsdElement

    static name: string

    // Constructors of GXml-0.20.GXml.XsdElement

    constructor(config?: XsdElement.ConstructorProperties) 
    constructor() 
    static new(): XsdElement

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdElement.ConstructorProperties): void
}

module XsdAnnotation {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {
    }

}

interface XsdAnnotation {

    // Own properties of GXml-0.20.GXml.XsdAnnotation

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdAnnotation

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdAnnotation extends Element {

    // Own properties of GXml-0.20.GXml.XsdAnnotation

    static name: string

    // Constructors of GXml-0.20.GXml.XsdAnnotation

    constructor(config?: XsdAnnotation.ConstructorProperties) 
    constructor() 
    static new(): XsdAnnotation

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdAnnotation.ConstructorProperties): void
}

module XsdBaseType {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdBaseType

        anotation?: XsdAnnotation | null
    }

}

interface XsdBaseType {

    // Own properties of GXml-0.20.GXml.XsdBaseType

    anotation: XsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdBaseType

    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdBaseType

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdBaseType extends Element {

    // Own properties of GXml-0.20.GXml.XsdBaseType

    static name: string

    // Constructors of GXml-0.20.GXml.XsdBaseType

    constructor(config?: XsdBaseType.ConstructorProperties) 
    constructor() 
    static new(): XsdBaseType

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdBaseType.ConstructorProperties): void
}

module XsdBaseContent {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdBaseContent

        anotation?: XsdAnnotation | null
    }

}

interface XsdBaseContent {

    // Own properties of GXml-0.20.GXml.XsdBaseContent

    anotation: XsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdBaseContent

    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdBaseContent

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdBaseContent extends Element {

    // Own properties of GXml-0.20.GXml.XsdBaseContent

    static name: string

    // Constructors of GXml-0.20.GXml.XsdBaseContent

    constructor(config?: XsdBaseContent.ConstructorProperties) 
    constructor() 
    static new(): XsdBaseContent

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdBaseContent.ConstructorProperties): void
}

module XsdSimpleContent {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseContent.ConstructorProperties {
    }

}

interface XsdSimpleContent {

    // Own properties of GXml-0.20.GXml.XsdSimpleContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdSimpleContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdSimpleContent extends XsdBaseContent {

    // Own properties of GXml-0.20.GXml.XsdSimpleContent

    static name: string

    // Constructors of GXml-0.20.GXml.XsdSimpleContent

    constructor(config?: XsdSimpleContent.ConstructorProperties) 
    constructor() 
    static new(): XsdSimpleContent

    // Overloads of new

    static new(): XsdBaseContent
    static new(): Element
    static new(): Node
    _init(config?: XsdSimpleContent.ConstructorProperties): void
}

module XsdComplexContent {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseContent.ConstructorProperties {
    }

}

interface XsdComplexContent {

    // Own properties of GXml-0.20.GXml.XsdComplexContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdComplexContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdComplexContent extends XsdBaseContent {

    // Own properties of GXml-0.20.GXml.XsdComplexContent

    static name: string

    // Constructors of GXml-0.20.GXml.XsdComplexContent

    constructor(config?: XsdComplexContent.ConstructorProperties) 
    constructor() 
    static new(): XsdComplexContent

    // Overloads of new

    static new(): XsdBaseContent
    static new(): Element
    static new(): Node
    _init(config?: XsdComplexContent.ConstructorProperties): void
}

module XsdOpenContent {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseContent.ConstructorProperties {
    }

}

interface XsdOpenContent {

    // Own properties of GXml-0.20.GXml.XsdOpenContent

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdOpenContent

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdOpenContent extends XsdBaseContent {

    // Own properties of GXml-0.20.GXml.XsdOpenContent

    static name: string

    // Constructors of GXml-0.20.GXml.XsdOpenContent

    constructor(config?: XsdOpenContent.ConstructorProperties) 
    constructor() 
    static new(): XsdOpenContent

    // Overloads of new

    static new(): XsdBaseContent
    static new(): Element
    static new(): Node
    _init(config?: XsdOpenContent.ConstructorProperties): void
}

module XsdBaseAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends Element.ConstructorProperties {

        // Own constructor properties of GXml-0.20.GXml.XsdBaseAttribute

        anotation?: XsdAnnotation | null
    }

}

interface XsdBaseAttribute {

    // Own properties of GXml-0.20.GXml.XsdBaseAttribute

    anotation: XsdAnnotation
    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Owm methods of GXml-0.20.GXml.XsdBaseAttribute

    getAnotation(): XsdAnnotation
    setAnotation(value: XsdAnnotation): void

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdBaseAttribute

    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdBaseAttribute extends Element {

    // Own properties of GXml-0.20.GXml.XsdBaseAttribute

    static name: string

    // Constructors of GXml-0.20.GXml.XsdBaseAttribute

    constructor(config?: XsdBaseAttribute.ConstructorProperties) 
    constructor() 
    static new(): XsdBaseAttribute

    // Overloads of new

    static new(): Element
    static new(): Node
    _init(config?: XsdBaseAttribute.ConstructorProperties): void
}

module XsdAttribute {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseAttribute.ConstructorProperties {
    }

}

interface XsdAttribute {

    // Own properties of GXml-0.20.GXml.XsdAttribute

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdAttribute

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdAttribute extends XsdBaseAttribute {

    // Own properties of GXml-0.20.GXml.XsdAttribute

    static name: string

    // Constructors of GXml-0.20.GXml.XsdAttribute

    constructor(config?: XsdAttribute.ConstructorProperties) 
    constructor() 
    static new(): XsdAttribute

    // Overloads of new

    static new(): XsdBaseAttribute
    static new(): Element
    static new(): Node
    _init(config?: XsdAttribute.ConstructorProperties): void
}

module XsdAttributeGroup {

    // Constructor properties interface

    interface ConstructorProperties extends XsdBaseAttribute.ConstructorProperties {
    }

}

interface XsdAttributeGroup {

    // Own properties of GXml-0.20.GXml.XsdAttributeGroup

    __gtype__: number

    // Conflicting properties

    namespaceUri: any
    prefix: any
    localName: any
    attributes: any
    nodeType: any
    baseUri: any
    childNodes: any

    // Conflicting methods

    lookupPrefix(nspace: string | null): string | null

    // Overloads of lookupPrefix

    lookupPrefix(nspace: string | null): string | null
    lookupPrefix(nspace: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null

    // Overloads of lookupNamespaceUri

    lookupNamespaceUri(prefix: string | null): string | null
    lookupNamespaceUri(prefix: string | null): string | null
    getAttribute(name: string | null): string | null
    getAttribute(name: string | null): string | null

    // Overloads of getAttribute

    getAttribute(name: string | null): string | null
    setAttribute(name: string | null, value: string | null): void
    setAttribute(name: string | null, val: string | null): boolean

    // Overloads of setAttribute

    setAttribute(name: string | null, value: string | null): void
    removeAttribute(name: string | null): void
    removeAttribute(name: string | null): boolean

    // Overloads of removeAttribute

    removeAttribute(name: string | null): void

    // Class property signals of GXml-0.20.GXml.XsdAttributeGroup

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::anotation", callback: (...args: any[]) => void): number
    on(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::anotation", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::anotation", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::anotation", ...args: any[]): void
    connect(sigName: "notify::parse-children", callback: (...args: any[]) => void): number
    on(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parse-children", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parse-children", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parse-children", ...args: any[]): void
    connect(sigName: "notify::unparsed", callback: (...args: any[]) => void): number
    on(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::unparsed", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::unparsed", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::unparsed", ...args: any[]): void
    connect(sigName: "notify::read-buffer", callback: (...args: any[]) => void): number
    on(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::read-buffer", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::read-buffer", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::read-buffer", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdAttributeGroup extends XsdBaseAttribute {

    // Own properties of GXml-0.20.GXml.XsdAttributeGroup

    static name: string

    // Constructors of GXml-0.20.GXml.XsdAttributeGroup

    constructor(config?: XsdAttributeGroup.ConstructorProperties) 
    constructor() 
    static new(): XsdAttributeGroup

    // Overloads of new

    static new(): XsdBaseAttribute
    static new(): Element
    static new(): Node
    _init(config?: XsdAttributeGroup.ConstructorProperties): void
}

module XsdList {

    // Constructor properties interface

    interface ConstructorProperties extends ArrayList.ConstructorProperties {
    }

}

interface XsdList {

    // Own properties of GXml-0.20.GXml.XsdList

    readonly length: number
    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Owm methods of GXml-0.20.GXml.XsdList

    getLength(): number

    // Overloads of getLength

    getLength(): number
    remove(index: number): void
    indexOf(element: DomElement): number

    // Conflicting methods

    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdList

    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdList extends ArrayList {

    // Own properties of GXml-0.20.GXml.XsdList

    static name: string

    // Constructors of GXml-0.20.GXml.XsdList

    constructor(config?: XsdList.ConstructorProperties) 
    constructor() 
    static new(): XsdList

    // Overloads of new

    static new(): ArrayList
    _init(config?: XsdList.ConstructorProperties): void
}

module XsdListElements {

    // Constructor properties interface

    interface ConstructorProperties extends XsdList.ConstructorProperties {
    }

}

interface XsdListElements {

    // Own properties of GXml-0.20.GXml.XsdListElements

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdListElements

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdListElements extends XsdList {

    // Own properties of GXml-0.20.GXml.XsdListElements

    static name: string

    // Constructors of GXml-0.20.GXml.XsdListElements

    constructor(config?: XsdListElements.ConstructorProperties) 
    constructor() 
    static new(): XsdListElements

    // Overloads of new

    static new(): XsdList
    static new(): ArrayList
    _init(config?: XsdListElements.ConstructorProperties): void
}

module XsdListSimpleTypes {

    // Constructor properties interface

    interface ConstructorProperties extends XsdList.ConstructorProperties {
    }

}

interface XsdListSimpleTypes {

    // Own properties of GXml-0.20.GXml.XsdListSimpleTypes

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdListSimpleTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdListSimpleTypes extends XsdList {

    // Own properties of GXml-0.20.GXml.XsdListSimpleTypes

    static name: string

    // Constructors of GXml-0.20.GXml.XsdListSimpleTypes

    constructor(config?: XsdListSimpleTypes.ConstructorProperties) 
    constructor() 
    static new(): XsdListSimpleTypes

    // Overloads of new

    static new(): XsdList
    static new(): ArrayList
    _init(config?: XsdListSimpleTypes.ConstructorProperties): void
}

module XsdListComplexTypes {

    // Constructor properties interface

    interface ConstructorProperties extends XsdList.ConstructorProperties {
    }

}

interface XsdListComplexTypes {

    // Own properties of GXml-0.20.GXml.XsdListComplexTypes

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdListComplexTypes

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdListComplexTypes extends XsdList {

    // Own properties of GXml-0.20.GXml.XsdListComplexTypes

    static name: string

    // Constructors of GXml-0.20.GXml.XsdListComplexTypes

    constructor(config?: XsdListComplexTypes.ConstructorProperties) 
    constructor() 
    static new(): XsdListComplexTypes

    // Overloads of new

    static new(): XsdList
    static new(): ArrayList
    _init(config?: XsdListComplexTypes.ConstructorProperties): void
}

module XsdListTypeRestrictionEnumerations {

    // Constructor properties interface

    interface ConstructorProperties extends XsdList.ConstructorProperties {
    }

}

interface XsdListTypeRestrictionEnumerations {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionEnumerations

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdListTypeRestrictionEnumerations

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdListTypeRestrictionEnumerations extends XsdList {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionEnumerations

    static name: string

    // Constructors of GXml-0.20.GXml.XsdListTypeRestrictionEnumerations

    constructor(config?: XsdListTypeRestrictionEnumerations.ConstructorProperties) 
    constructor() 
    static new(): XsdListTypeRestrictionEnumerations

    // Overloads of new

    static new(): XsdList
    static new(): ArrayList
    _init(config?: XsdListTypeRestrictionEnumerations.ConstructorProperties): void
}

module XsdListTypeRestrictionWhiteSpaces {

    // Constructor properties interface

    interface ConstructorProperties extends XsdList.ConstructorProperties {
    }

}

interface XsdListTypeRestrictionWhiteSpaces {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpaces

    __gtype__: number

    // Conflicting properties

    nodesIndex: any
    element: any
    itemsName: any

    // Conflicting methods

    getLength(): number

    // Overloads of getLength

    getLength(): number
    getLength(): number
    validateAppend(index: number, element: DomElement): boolean

    // Overloads of validateAppend

    validateAppend(index: number, element: DomElement): boolean
    validateAppend(index: number, element: DomElement): boolean
    clear(): void

    // Overloads of clear

    clear(): void
    clear(): void

    // Class property signals of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpaces

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::length", callback: (...args: any[]) => void): number
    on(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::length", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::length", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::length", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XsdListTypeRestrictionWhiteSpaces extends XsdList {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpaces

    static name: string

    // Constructors of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpaces

    constructor(config?: XsdListTypeRestrictionWhiteSpaces.ConstructorProperties) 
    constructor() 
    static new(): XsdListTypeRestrictionWhiteSpaces

    // Overloads of new

    static new(): XsdList
    static new(): ArrayList
    _init(config?: XsdListTypeRestrictionWhiteSpaces.ConstructorProperties): void
}

module XText {

    // Constructor properties interface

    interface ConstructorProperties extends DomText.ConstructorProperties, XCharacterData.ConstructorProperties {
    }

}

interface XText extends DomText {

    // Own properties of GXml-0.20.GXml.XText

    __gtype__: number

    // Conflicting properties

    baseUri: any

    // Conflicting methods

    getData(): string | null

    // Overloads of getData

    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     * @param key name of the key for that association
     * @returns the data if found,          or %NULL if no such data exists.
     */
    getData(key: string | null): any | null
    setData(value: string | null): void

    // Overloads of setData

    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     * @param key name of the key
     * @param data data to associate with that key
     */
    setData(key: string | null, data: any | null): void

    // Class property signals of GXml-0.20.GXml.XText

    connect(sigName: "notify::__gtype__", callback: (...args: any[]) => void): number
    on(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::__gtype__", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::__gtype__", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::__gtype__", ...args: any[]): void
    connect(sigName: "notify::str", callback: (...args: any[]) => void): number
    on(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::str", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::str", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::str", ...args: any[]): void
    connect(sigName: "notify::attrs", callback: (...args: any[]) => void): number
    on(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::attrs", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::attrs", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::attrs", ...args: any[]): void
    connect(sigName: "notify::children-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::children-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::children-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::children-nodes", ...args: any[]): void
    connect(sigName: "notify::document", callback: (...args: any[]) => void): number
    on(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::type-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::type-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::type-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::type-node", ...args: any[]): void
    connect(sigName: "notify::name", callback: (...args: any[]) => void): number
    on(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::value", callback: (...args: any[]) => void): number
    on(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::data", callback: (...args: any[]) => void): number
    on(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::data", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::data", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::data", ...args: any[]): void
    connect(sigName: "notify::node-type", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-type", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-type", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-type", ...args: any[]): void
    connect(sigName: "notify::node-name", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-name", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-name", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-name", ...args: any[]): void
    connect(sigName: "notify::base-uri", callback: (...args: any[]) => void): number
    on(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::base-uri", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::base-uri", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::base-uri", ...args: any[]): void
    connect(sigName: "notify::owner-document", callback: (...args: any[]) => void): number
    on(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::owner-document", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::owner-document", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::owner-document", ...args: any[]): void
    connect(sigName: "notify::parent-node", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-node", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-node", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-node", ...args: any[]): void
    connect(sigName: "notify::parent-element", callback: (...args: any[]) => void): number
    on(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::parent-element", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::parent-element", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::parent-element", ...args: any[]): void
    connect(sigName: "notify::child-nodes", callback: (...args: any[]) => void): number
    on(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::child-nodes", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::child-nodes", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::child-nodes", ...args: any[]): void
    connect(sigName: "notify::first-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::first-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::first-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::first-child", ...args: any[]): void
    connect(sigName: "notify::last-child", callback: (...args: any[]) => void): number
    on(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::last-child", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::last-child", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::last-child", ...args: any[]): void
    connect(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-sibling", ...args: any[]): void
    connect(sigName: "notify::next-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-sibling", ...args: any[]): void
    connect(sigName: "notify::node-value", callback: (...args: any[]) => void): number
    on(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::node-value", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::node-value", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::node-value", ...args: any[]): void
    connect(sigName: "notify::text-content", callback: (...args: any[]) => void): number
    on(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::text-content", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::text-content", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::text-content", ...args: any[]): void
    connect(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::previous-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::previous-element-sibling", ...args: any[]): void
    connect(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): number
    on(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::next-element-sibling", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::next-element-sibling", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

class XText extends XCharacterData {

    // Own properties of GXml-0.20.GXml.XText

    static name: string

    // Constructors of GXml-0.20.GXml.XText

    constructor(config?: XText.ConstructorProperties) 
    constructor(doc: XDocument, node: any | null) 
    static new(doc: XDocument, node: any | null): XText

    // Overloads of new

    static new(): XCharacterData
    static new(): XNonDocumentChildNode
    static new(): XChildNode
    _init(config?: XText.ConstructorProperties): void
}

interface ArrayListClass {
}

abstract class ArrayListClass {

    // Own properties of GXml-0.20.GXml.ArrayListClass

    static name: string
}

interface ArrayListPrivate {
}

class ArrayListPrivate {

    // Own properties of GXml-0.20.GXml.ArrayListPrivate

    static name: string
}

interface AttrClass {
}

abstract class AttrClass {

    // Own properties of GXml-0.20.GXml.AttrClass

    static name: string
}

interface AttrPrivate {
}

class AttrPrivate {

    // Own properties of GXml-0.20.GXml.AttrPrivate

    static name: string
}

interface BaseCollectionClass {

    // Own fields of GXml-0.20.GXml.BaseCollectionClass

    validateAppend: (self: BaseCollection, index: number, element: DomElement) => boolean
    clear: (self: BaseCollection) => void
}

abstract class BaseCollectionClass {

    // Own properties of GXml-0.20.GXml.BaseCollectionClass

    static name: string
}

interface BaseCollectionPrivate {
}

class BaseCollectionPrivate {

    // Own properties of GXml-0.20.GXml.BaseCollectionPrivate

    static name: string
}

interface CssSelectorClass {
}

abstract class CssSelectorClass {

    // Own properties of GXml-0.20.GXml.CssSelectorClass

    static name: string
}

interface CssSelectorPrivate {
}

class CssSelectorPrivate {

    // Own properties of GXml-0.20.GXml.CssSelectorPrivate

    static name: string
}

interface CssElementSelectorClass {
}

abstract class CssElementSelectorClass {

    // Own properties of GXml-0.20.GXml.CssElementSelectorClass

    static name: string
}

interface CssElementSelectorPrivate {
}

class CssElementSelectorPrivate {

    // Own properties of GXml-0.20.GXml.CssElementSelectorPrivate

    static name: string
}

interface CssAttributeSelectorClass {
}

abstract class CssAttributeSelectorClass {

    // Own properties of GXml-0.20.GXml.CssAttributeSelectorClass

    static name: string
}

interface CssAttributeSelectorPrivate {
}

class CssAttributeSelectorPrivate {

    // Own properties of GXml-0.20.GXml.CssAttributeSelectorPrivate

    static name: string
}

interface CssNotSelectorClass {
}

abstract class CssNotSelectorClass {

    // Own properties of GXml-0.20.GXml.CssNotSelectorClass

    static name: string
}

interface CssNotSelectorPrivate {
}

class CssNotSelectorPrivate {

    // Own properties of GXml-0.20.GXml.CssNotSelectorPrivate

    static name: string
}

interface CssSelectorParserClass {
}

abstract class CssSelectorParserClass {

    // Own properties of GXml-0.20.GXml.CssSelectorParserClass

    static name: string
}

interface CssSelectorParserPrivate {
}

class CssSelectorParserPrivate {

    // Own properties of GXml-0.20.GXml.CssSelectorParserPrivate

    static name: string
}

interface DocumentClass {
}

abstract class DocumentClass {

    // Own properties of GXml-0.20.GXml.DocumentClass

    static name: string
}

interface DocumentPrivate {
}

class DocumentPrivate {

    // Own properties of GXml-0.20.GXml.DocumentPrivate

    static name: string
}

interface ImplementationClass {
}

abstract class ImplementationClass {

    // Own properties of GXml-0.20.GXml.ImplementationClass

    static name: string
}

interface ImplementationPrivate {
}

class ImplementationPrivate {

    // Own properties of GXml-0.20.GXml.ImplementationPrivate

    static name: string
}

interface DocumentTypeClass {
}

abstract class DocumentTypeClass {

    // Own properties of GXml-0.20.GXml.DocumentTypeClass

    static name: string
}

interface DocumentTypePrivate {
}

class DocumentTypePrivate {

    // Own properties of GXml-0.20.GXml.DocumentTypePrivate

    static name: string
}

interface DocumentFragmentClass {
}

abstract class DocumentFragmentClass {

    // Own properties of GXml-0.20.GXml.DocumentFragmentClass

    static name: string
}

interface DocumentFragmentPrivate {
}

class DocumentFragmentPrivate {

    // Own properties of GXml-0.20.GXml.DocumentFragmentPrivate

    static name: string
}

interface DomNodeFilterClass {
}

abstract class DomNodeFilterClass {

    // Own properties of GXml-0.20.GXml.DomNodeFilterClass

    static name: string
}

interface DomNodeFilterPrivate {
}

class DomNodeFilterPrivate {

    // Own properties of GXml-0.20.GXml.DomNodeFilterPrivate

    static name: string
}

interface DomElementListClass {
}

abstract class DomElementListClass {

    // Own properties of GXml-0.20.GXml.DomElementListClass

    static name: string
}

interface DomElementListPrivate {
}

class DomElementListPrivate {

    // Own properties of GXml-0.20.GXml.DomElementListPrivate

    static name: string
}

interface DomEventInitClass {
}

abstract class DomEventInitClass {

    // Own properties of GXml-0.20.GXml.DomEventInitClass

    static name: string
}

interface DomEventInitPrivate {
}

class DomEventInitPrivate {

    // Own properties of GXml-0.20.GXml.DomEventInitPrivate

    static name: string
}

interface DomCustomEventInitClass {
}

abstract class DomCustomEventInitClass {

    // Own properties of GXml-0.20.GXml.DomCustomEventInitClass

    static name: string
}

interface DomCustomEventInitPrivate {
}

class DomCustomEventInitPrivate {

    // Own properties of GXml-0.20.GXml.DomCustomEventInitPrivate

    static name: string
}

interface DomTimeStampClass {
}

abstract class DomTimeStampClass {

    // Own properties of GXml-0.20.GXml.DomTimeStampClass

    static name: string
}

interface DomTimeStampPrivate {
}

class DomTimeStampPrivate {

    // Own properties of GXml-0.20.GXml.DomTimeStampPrivate

    static name: string
}

interface DomMutationObserverInitClass {
}

abstract class DomMutationObserverInitClass {

    // Own properties of GXml-0.20.GXml.DomMutationObserverInitClass

    static name: string
}

interface DomMutationObserverInitPrivate {
}

class DomMutationObserverInitPrivate {

    // Own properties of GXml-0.20.GXml.DomMutationObserverInitPrivate

    static name: string
}

interface DomErrorNameClass {
}

abstract class DomErrorNameClass {

    // Own properties of GXml-0.20.GXml.DomErrorNameClass

    static name: string
}

interface DomErrorNamePrivate {
}

class DomErrorNamePrivate {

    // Own properties of GXml-0.20.GXml.DomErrorNamePrivate

    static name: string
}

interface ElementClass {
}

abstract class ElementClass {

    // Own properties of GXml-0.20.GXml.ElementClass

    static name: string
}

interface ElementPrivate {
}

class ElementPrivate {

    // Own properties of GXml-0.20.GXml.ElementPrivate

    static name: string
}

interface ElementAttributesClass {
}

abstract class ElementAttributesClass {

    // Own properties of GXml-0.20.GXml.ElementAttributesClass

    static name: string
}

interface ElementAttributesPrivate {
}

class ElementAttributesPrivate {

    // Own properties of GXml-0.20.GXml.ElementAttributesPrivate

    static name: string
}

interface EnumerationClass {
}

abstract class EnumerationClass {

    // Own properties of GXml-0.20.GXml.EnumerationClass

    static name: string
}

interface EnumerationPrivate {
}

class EnumerationPrivate {

    // Own properties of GXml-0.20.GXml.EnumerationPrivate

    static name: string
}

interface EventClass {
}

abstract class EventClass {

    // Own properties of GXml-0.20.GXml.EventClass

    static name: string
}

interface EventPrivate {
}

class EventPrivate {

    // Own properties of GXml-0.20.GXml.EventPrivate

    static name: string
}

interface CustomEventClass {
}

abstract class CustomEventClass {

    // Own properties of GXml-0.20.GXml.CustomEventClass

    static name: string
}

interface CustomEventPrivate {
}

class CustomEventPrivate {

    // Own properties of GXml-0.20.GXml.CustomEventPrivate

    static name: string
}

interface HashMapClass {
}

abstract class HashMapClass {

    // Own properties of GXml-0.20.GXml.HashMapClass

    static name: string
}

interface HashMapPrivate {
}

class HashMapPrivate {

    // Own properties of GXml-0.20.GXml.HashMapPrivate

    static name: string
}

interface HashPairedMapClass {
}

abstract class HashPairedMapClass {

    // Own properties of GXml-0.20.GXml.HashPairedMapClass

    static name: string
}

interface HashPairedMapPrivate {
}

class HashPairedMapPrivate {

    // Own properties of GXml-0.20.GXml.HashPairedMapPrivate

    static name: string
}

interface HashThreeMapClass {
}

abstract class HashThreeMapClass {

    // Own properties of GXml-0.20.GXml.HashThreeMapClass

    static name: string
}

interface HashThreeMapPrivate {
}

class HashThreeMapPrivate {

    // Own properties of GXml-0.20.GXml.HashThreeMapPrivate

    static name: string
}

interface HTMLCollectionClass {
}

abstract class HTMLCollectionClass {

    // Own properties of GXml-0.20.GXml.HTMLCollectionClass

    static name: string
}

interface HTMLCollectionPrivate {
}

class HTMLCollectionPrivate {

    // Own properties of GXml-0.20.GXml.HTMLCollectionPrivate

    static name: string
}

interface HtmlDocumentClass {
}

abstract class HtmlDocumentClass {

    // Own properties of GXml-0.20.GXml.HtmlDocumentClass

    static name: string
}

interface HtmlDocumentPrivate {
}

class HtmlDocumentPrivate {

    // Own properties of GXml-0.20.GXml.HtmlDocumentPrivate

    static name: string
}

interface HtmlElementClass {
}

abstract class HtmlElementClass {

    // Own properties of GXml-0.20.GXml.HtmlElementClass

    static name: string
}

interface HtmlElementPrivate {
}

class HtmlElementPrivate {

    // Own properties of GXml-0.20.GXml.HtmlElementPrivate

    static name: string
}

interface LXPathObjectClass {
}

abstract class LXPathObjectClass {

    // Own properties of GXml-0.20.GXml.LXPathObjectClass

    static name: string
}

interface LXPathObjectPrivate {
}

class LXPathObjectPrivate {

    // Own properties of GXml-0.20.GXml.LXPathObjectPrivate

    static name: string
}

interface NodeClass {
}

abstract class NodeClass {

    // Own properties of GXml-0.20.GXml.NodeClass

    static name: string
}

interface NodePrivate {
}

class NodePrivate {

    // Own properties of GXml-0.20.GXml.NodePrivate

    static name: string
}

interface NodeListClass {
}

abstract class NodeListClass {

    // Own properties of GXml-0.20.GXml.NodeListClass

    static name: string
}

interface NodeListPrivate {
}

class NodeListPrivate {

    // Own properties of GXml-0.20.GXml.NodeListPrivate

    static name: string
}

interface NodeIteratorClass {
}

abstract class NodeIteratorClass {

    // Own properties of GXml-0.20.GXml.NodeIteratorClass

    static name: string
}

interface NodeIteratorPrivate {
}

class NodeIteratorPrivate {

    // Own properties of GXml-0.20.GXml.NodeIteratorPrivate

    static name: string
}

interface BasePropertyClass {

    // Own fields of GXml-0.20.GXml.BasePropertyClass

    validateValue: (self: BaseProperty, val: string | null) => boolean
}

abstract class BasePropertyClass {

    // Own properties of GXml-0.20.GXml.BasePropertyClass

    static name: string
}

interface BasePropertyPrivate {
}

class BasePropertyPrivate {

    // Own properties of GXml-0.20.GXml.BasePropertyPrivate

    static name: string
}

interface StringClass {
}

abstract class StringClass {

    // Own properties of GXml-0.20.GXml.StringClass

    static name: string
}

interface StringPrivate {
}

class StringPrivate {

    // Own properties of GXml-0.20.GXml.StringPrivate

    static name: string
}

interface ArrayStringClass {
}

abstract class ArrayStringClass {

    // Own properties of GXml-0.20.GXml.ArrayStringClass

    static name: string
}

interface ArrayStringPrivate {
}

class ArrayStringPrivate {

    // Own properties of GXml-0.20.GXml.ArrayStringPrivate

    static name: string
}

interface XsdArrayStringClass {
}

abstract class XsdArrayStringClass {

    // Own properties of GXml-0.20.GXml.XsdArrayStringClass

    static name: string
}

interface XsdArrayStringPrivate {
}

class XsdArrayStringPrivate {

    // Own properties of GXml-0.20.GXml.XsdArrayStringPrivate

    static name: string
}

interface DoubleClass {
}

abstract class DoubleClass {

    // Own properties of GXml-0.20.GXml.DoubleClass

    static name: string
}

interface DoublePrivate {
}

class DoublePrivate {

    // Own properties of GXml-0.20.GXml.DoublePrivate

    static name: string
}

interface FloatClass {
}

abstract class FloatClass {

    // Own properties of GXml-0.20.GXml.FloatClass

    static name: string
}

interface FloatPrivate {
}

class FloatPrivate {

    // Own properties of GXml-0.20.GXml.FloatPrivate

    static name: string
}

interface IntClass {
}

abstract class IntClass {

    // Own properties of GXml-0.20.GXml.IntClass

    static name: string
}

interface IntPrivate {
}

class IntPrivate {

    // Own properties of GXml-0.20.GXml.IntPrivate

    static name: string
}

interface BooleanClass {
}

abstract class BooleanClass {

    // Own properties of GXml-0.20.GXml.BooleanClass

    static name: string
}

interface BooleanPrivate {
}

class BooleanPrivate {

    // Own properties of GXml-0.20.GXml.BooleanPrivate

    static name: string
}

interface EnumClass {
}

abstract class EnumClass {

    // Own properties of GXml-0.20.GXml.EnumClass

    static name: string
}

interface EnumPrivate {
}

class EnumPrivate {

    // Own properties of GXml-0.20.GXml.EnumPrivate

    static name: string
}

interface DateClass {
}

abstract class DateClass {

    // Own properties of GXml-0.20.GXml.DateClass

    static name: string
}

interface DatePrivate {
}

class DatePrivate {

    // Own properties of GXml-0.20.GXml.DatePrivate

    static name: string
}

interface DateTimeClass {
}

abstract class DateTimeClass {

    // Own properties of GXml-0.20.GXml.DateTimeClass

    static name: string
}

interface DateTimePrivate {
}

class DateTimePrivate {

    // Own properties of GXml-0.20.GXml.DateTimePrivate

    static name: string
}

interface RangeClass {
}

abstract class RangeClass {

    // Own properties of GXml-0.20.GXml.RangeClass

    static name: string
}

interface RangePrivate {
}

class RangePrivate {

    // Own properties of GXml-0.20.GXml.RangePrivate

    static name: string
}

interface SettableTokenListClass {
}

abstract class SettableTokenListClass {

    // Own properties of GXml-0.20.GXml.SettableTokenListClass

    static name: string
}

interface SettableTokenListPrivate {
}

class SettableTokenListPrivate {

    // Own properties of GXml-0.20.GXml.SettableTokenListPrivate

    static name: string
}

interface StringRefClass {
}

abstract class StringRefClass {

    // Own properties of GXml-0.20.GXml.StringRefClass

    static name: string
}

interface StringRefPrivate {
}

class StringRefPrivate {

    // Own properties of GXml-0.20.GXml.StringRefPrivate

    static name: string
}

interface CharacterDataClass {
}

abstract class CharacterDataClass {

    // Own properties of GXml-0.20.GXml.CharacterDataClass

    static name: string
}

interface CharacterDataPrivate {
}

class CharacterDataPrivate {

    // Own properties of GXml-0.20.GXml.CharacterDataPrivate

    static name: string
}

interface TextClass {
}

abstract class TextClass {

    // Own properties of GXml-0.20.GXml.TextClass

    static name: string
}

interface TextPrivate {
}

class TextPrivate {

    // Own properties of GXml-0.20.GXml.TextPrivate

    static name: string
}

interface ProcessingInstructionClass {
}

abstract class ProcessingInstructionClass {

    // Own properties of GXml-0.20.GXml.ProcessingInstructionClass

    static name: string
}

interface ProcessingInstructionPrivate {
}

class ProcessingInstructionPrivate {

    // Own properties of GXml-0.20.GXml.ProcessingInstructionPrivate

    static name: string
}

interface CommentClass {
}

abstract class CommentClass {

    // Own properties of GXml-0.20.GXml.CommentClass

    static name: string
}

interface CommentPrivate {
}

class CommentPrivate {

    // Own properties of GXml-0.20.GXml.CommentPrivate

    static name: string
}

interface TokenListClass {
}

abstract class TokenListClass {

    // Own properties of GXml-0.20.GXml.TokenListClass

    static name: string
}

interface TokenListPrivate {
}

class TokenListPrivate {

    // Own properties of GXml-0.20.GXml.TokenListPrivate

    static name: string
}

interface TreeWalkerClass {
}

abstract class TreeWalkerClass {

    // Own properties of GXml-0.20.GXml.TreeWalkerClass

    static name: string
}

interface TreeWalkerPrivate {
}

class TreeWalkerPrivate {

    // Own properties of GXml-0.20.GXml.TreeWalkerPrivate

    static name: string
}

interface XAttributeClass {
}

abstract class XAttributeClass {

    // Own properties of GXml-0.20.GXml.XAttributeClass

    static name: string
}

interface XAttributePrivate {
}

class XAttributePrivate {

    // Own properties of GXml-0.20.GXml.XAttributePrivate

    static name: string
}

interface XCharacterDataClass {
}

abstract class XCharacterDataClass {

    // Own properties of GXml-0.20.GXml.XCharacterDataClass

    static name: string
}

interface XCharacterDataPrivate {
}

class XCharacterDataPrivate {

    // Own properties of GXml-0.20.GXml.XCharacterDataPrivate

    static name: string
}

interface XChildNodeClass {
}

abstract class XChildNodeClass {

    // Own properties of GXml-0.20.GXml.XChildNodeClass

    static name: string
}

interface XChildNodePrivate {
}

class XChildNodePrivate {

    // Own properties of GXml-0.20.GXml.XChildNodePrivate

    static name: string
}

interface XNonDocumentChildNodeClass {
}

abstract class XNonDocumentChildNodeClass {

    // Own properties of GXml-0.20.GXml.XNonDocumentChildNodeClass

    static name: string
}

interface XNonDocumentChildNodePrivate {
}

class XNonDocumentChildNodePrivate {

    // Own properties of GXml-0.20.GXml.XNonDocumentChildNodePrivate

    static name: string
}

interface XCommentClass {
}

abstract class XCommentClass {

    // Own properties of GXml-0.20.GXml.XCommentClass

    static name: string
}

interface XCommentPrivate {
}

class XCommentPrivate {

    // Own properties of GXml-0.20.GXml.XCommentPrivate

    static name: string
}

interface XDocumentClass {

    // Own fields of GXml-0.20.GXml.XDocumentClass

    save: (self: XDocument, cancellable: Gio.Cancellable | null) => boolean
    saveAs: (self: XDocument, f: Gio.File, cancellable: Gio.Cancellable | null) => boolean
}

abstract class XDocumentClass {

    // Own properties of GXml-0.20.GXml.XDocumentClass

    static name: string
}

interface XDocumentPrivate {
}

class XDocumentPrivate {

    // Own properties of GXml-0.20.GXml.XDocumentPrivate

    static name: string
}

interface XElementClass {
}

abstract class XElementClass {

    // Own properties of GXml-0.20.GXml.XElementClass

    static name: string
}

interface XElementPrivate {
}

class XElementPrivate {

    // Own properties of GXml-0.20.GXml.XElementPrivate

    static name: string
}

interface XHashMapAttrClass {
}

abstract class XHashMapAttrClass {

    // Own properties of GXml-0.20.GXml.XHashMapAttrClass

    static name: string
}

interface XHashMapAttrPrivate {
}

class XHashMapAttrPrivate {

    // Own properties of GXml-0.20.GXml.XHashMapAttrPrivate

    static name: string
}

interface XHashMapAttrEntryClass {
}

abstract class XHashMapAttrEntryClass {

    // Own properties of GXml-0.20.GXml.XHashMapAttrEntryClass

    static name: string
}

interface XHashMapAttrEntryPrivate {
}

class XHashMapAttrEntryPrivate {

    // Own properties of GXml-0.20.GXml.XHashMapAttrEntryPrivate

    static name: string
}

interface XHashMapAttrIteratorClass {
}

abstract class XHashMapAttrIteratorClass {

    // Own properties of GXml-0.20.GXml.XHashMapAttrIteratorClass

    static name: string
}

interface XHashMapAttrIteratorPrivate {
}

class XHashMapAttrIteratorPrivate {

    // Own properties of GXml-0.20.GXml.XHashMapAttrIteratorPrivate

    static name: string
}

interface XHtmlDocumentClass {
}

abstract class XHtmlDocumentClass {

    // Own properties of GXml-0.20.GXml.XHtmlDocumentClass

    static name: string
}

interface XHtmlDocumentPrivate {
}

class XHtmlDocumentPrivate {

    // Own properties of GXml-0.20.GXml.XHtmlDocumentPrivate

    static name: string
}

interface XListChildrenClass {
}

abstract class XListChildrenClass {

    // Own properties of GXml-0.20.GXml.XListChildrenClass

    static name: string
}

interface XListChildrenPrivate {
}

class XListChildrenPrivate {

    // Own properties of GXml-0.20.GXml.XListChildrenPrivate

    static name: string
}

interface XListChildrenIteratorClass {
}

abstract class XListChildrenIteratorClass {

    // Own properties of GXml-0.20.GXml.XListChildrenIteratorClass

    static name: string
}

interface XListChildrenIteratorPrivate {
}

class XListChildrenIteratorPrivate {

    // Own properties of GXml-0.20.GXml.XListChildrenIteratorPrivate

    static name: string
}

interface XNodeClass {

    // Own fields of GXml-0.20.GXml.XNodeClass

    setNamespace: (self: XNode, uri: string | null, prefix: string | null) => boolean
    toString: (self: XNode) => string | null
}

abstract class XNodeClass {

    // Own properties of GXml-0.20.GXml.XNodeClass

    static name: string
}

interface XNodePrivate {
}

class XNodePrivate {

    // Own properties of GXml-0.20.GXml.XNodePrivate

    static name: string
}

interface XParserClass {
}

abstract class XParserClass {

    // Own properties of GXml-0.20.GXml.XParserClass

    static name: string
}

interface XParserPrivate {
}

class XParserPrivate {

    // Own properties of GXml-0.20.GXml.XParserPrivate

    static name: string
}

interface XProcessingInstructionClass {
}

abstract class XProcessingInstructionClass {

    // Own properties of GXml-0.20.GXml.XProcessingInstructionClass

    static name: string
}

interface XProcessingInstructionPrivate {
}

class XProcessingInstructionPrivate {

    // Own properties of GXml-0.20.GXml.XProcessingInstructionPrivate

    static name: string
}

interface XsdSchemaClass {
}

abstract class XsdSchemaClass {

    // Own properties of GXml-0.20.GXml.XsdSchemaClass

    static name: string
}

interface XsdSchemaPrivate {
}

class XsdSchemaPrivate {

    // Own properties of GXml-0.20.GXml.XsdSchemaPrivate

    static name: string
}

interface XsdSimpleTypeClass {
}

abstract class XsdSimpleTypeClass {

    // Own properties of GXml-0.20.GXml.XsdSimpleTypeClass

    static name: string
}

interface XsdSimpleTypePrivate {
}

class XsdSimpleTypePrivate {

    // Own properties of GXml-0.20.GXml.XsdSimpleTypePrivate

    static name: string
}

interface XsdTypeDefinitionClass {
}

abstract class XsdTypeDefinitionClass {

    // Own properties of GXml-0.20.GXml.XsdTypeDefinitionClass

    static name: string
}

interface XsdTypeDefinitionPrivate {
}

class XsdTypeDefinitionPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeDefinitionPrivate

    static name: string
}

interface XsdTypeListClass {
}

abstract class XsdTypeListClass {

    // Own properties of GXml-0.20.GXml.XsdTypeListClass

    static name: string
}

interface XsdTypeListPrivate {
}

class XsdTypeListPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeListPrivate

    static name: string
}

interface XsdTypeUnionClass {
}

abstract class XsdTypeUnionClass {

    // Own properties of GXml-0.20.GXml.XsdTypeUnionClass

    static name: string
}

interface XsdTypeUnionPrivate {
}

class XsdTypeUnionPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeUnionPrivate

    static name: string
}

interface XsdTypeRestrictionClass {
}

abstract class XsdTypeRestrictionClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionClass

    static name: string
}

interface XsdTypeRestrictionPrivate {
}

class XsdTypeRestrictionPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionPrivate

    static name: string
}

interface XsdTypeRestrictionDefClass {
}

abstract class XsdTypeRestrictionDefClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionDefClass

    static name: string
}

interface XsdTypeRestrictionDefPrivate {
}

class XsdTypeRestrictionDefPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionDefPrivate

    static name: string
}

interface XsdTypeRestrictionMinExclusiveClass {
}

abstract class XsdTypeRestrictionMinExclusiveClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinExclusiveClass

    static name: string
}

interface XsdTypeRestrictionMinExclusivePrivate {
}

class XsdTypeRestrictionMinExclusivePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinExclusivePrivate

    static name: string
}

interface XsdTypeRestrictionMinInclusiveClass {
}

abstract class XsdTypeRestrictionMinInclusiveClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinInclusiveClass

    static name: string
}

interface XsdTypeRestrictionMinInclusivePrivate {
}

class XsdTypeRestrictionMinInclusivePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinInclusivePrivate

    static name: string
}

interface XsdTypeRestrictionMaxExclusiveClass {
}

abstract class XsdTypeRestrictionMaxExclusiveClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusiveClass

    static name: string
}

interface XsdTypeRestrictionMaxExclusivePrivate {
}

class XsdTypeRestrictionMaxExclusivePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxExclusivePrivate

    static name: string
}

interface XsdTypeRestrictionMaxInclusiveClass {
}

abstract class XsdTypeRestrictionMaxInclusiveClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusiveClass

    static name: string
}

interface XsdTypeRestrictionMaxInclusivePrivate {
}

class XsdTypeRestrictionMaxInclusivePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxInclusivePrivate

    static name: string
}

interface XsdTypeRestrictionTotalDigitsClass {
}

abstract class XsdTypeRestrictionTotalDigitsClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionTotalDigitsClass

    static name: string
}

interface XsdTypeRestrictionTotalDigitsPrivate {
}

class XsdTypeRestrictionTotalDigitsPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionTotalDigitsPrivate

    static name: string
}

interface XsdTypeRestrictionFractionDigitsClass {
}

abstract class XsdTypeRestrictionFractionDigitsClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionFractionDigitsClass

    static name: string
}

interface XsdTypeRestrictionFractionDigitsPrivate {
}

class XsdTypeRestrictionFractionDigitsPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionFractionDigitsPrivate

    static name: string
}

interface XsdTypeRestrictionLengthClass {
}

abstract class XsdTypeRestrictionLengthClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionLengthClass

    static name: string
}

interface XsdTypeRestrictionLengthPrivate {
}

class XsdTypeRestrictionLengthPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionLengthPrivate

    static name: string
}

interface XsdTypeRestrictionMinLengthClass {
}

abstract class XsdTypeRestrictionMinLengthClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinLengthClass

    static name: string
}

interface XsdTypeRestrictionMinLengthPrivate {
}

class XsdTypeRestrictionMinLengthPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMinLengthPrivate

    static name: string
}

interface XsdTypeRestrictionMaxLengthClass {
}

abstract class XsdTypeRestrictionMaxLengthClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxLengthClass

    static name: string
}

interface XsdTypeRestrictionMaxLengthPrivate {
}

class XsdTypeRestrictionMaxLengthPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionMaxLengthPrivate

    static name: string
}

interface XsdTypeRestrictionEnumerationClass {
}

abstract class XsdTypeRestrictionEnumerationClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionEnumerationClass

    static name: string
}

interface XsdTypeRestrictionEnumerationPrivate {
}

class XsdTypeRestrictionEnumerationPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionEnumerationPrivate

    static name: string
}

interface XsdTypeRestrictionWhiteSpaceClass {
}

abstract class XsdTypeRestrictionWhiteSpaceClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceClass

    static name: string
}

interface XsdTypeRestrictionWhiteSpacePrivate {
}

class XsdTypeRestrictionWhiteSpacePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpacePrivate

    static name: string
}

interface XsdTypeRestrictionWhiteSpaceFixedClass {
}

abstract class XsdTypeRestrictionWhiteSpaceFixedClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixedClass

    static name: string
}

interface XsdTypeRestrictionWhiteSpaceFixedPrivate {
}

class XsdTypeRestrictionWhiteSpaceFixedPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionWhiteSpaceFixedPrivate

    static name: string
}

interface XsdTypeRestrictionPatternClass {
}

abstract class XsdTypeRestrictionPatternClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionPatternClass

    static name: string
}

interface XsdTypeRestrictionPatternPrivate {
}

class XsdTypeRestrictionPatternPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionPatternPrivate

    static name: string
}

interface XsdTypeRestrictionAssertionClass {
}

abstract class XsdTypeRestrictionAssertionClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionAssertionClass

    static name: string
}

interface XsdTypeRestrictionAssertionPrivate {
}

class XsdTypeRestrictionAssertionPrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionAssertionPrivate

    static name: string
}

interface XsdTypeRestrictionExplicitTimezoneClass {
}

abstract class XsdTypeRestrictionExplicitTimezoneClass {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezoneClass

    static name: string
}

interface XsdTypeRestrictionExplicitTimezonePrivate {
}

class XsdTypeRestrictionExplicitTimezonePrivate {

    // Own properties of GXml-0.20.GXml.XsdTypeRestrictionExplicitTimezonePrivate

    static name: string
}

interface XsdComplexTypeClass {
}

abstract class XsdComplexTypeClass {

    // Own properties of GXml-0.20.GXml.XsdComplexTypeClass

    static name: string
}

interface XsdComplexTypePrivate {
}

class XsdComplexTypePrivate {

    // Own properties of GXml-0.20.GXml.XsdComplexTypePrivate

    static name: string
}

interface XsdExtensionClass {
}

abstract class XsdExtensionClass {

    // Own properties of GXml-0.20.GXml.XsdExtensionClass

    static name: string
}

interface XsdExtensionPrivate {
}

class XsdExtensionPrivate {

    // Own properties of GXml-0.20.GXml.XsdExtensionPrivate

    static name: string
}

interface XsdElementClass {
}

abstract class XsdElementClass {

    // Own properties of GXml-0.20.GXml.XsdElementClass

    static name: string
}

interface XsdElementPrivate {
}

class XsdElementPrivate {

    // Own properties of GXml-0.20.GXml.XsdElementPrivate

    static name: string
}

interface XsdAnnotationClass {
}

abstract class XsdAnnotationClass {

    // Own properties of GXml-0.20.GXml.XsdAnnotationClass

    static name: string
}

interface XsdAnnotationPrivate {
}

class XsdAnnotationPrivate {

    // Own properties of GXml-0.20.GXml.XsdAnnotationPrivate

    static name: string
}

interface XsdBaseTypeClass {
}

abstract class XsdBaseTypeClass {

    // Own properties of GXml-0.20.GXml.XsdBaseTypeClass

    static name: string
}

interface XsdBaseTypePrivate {
}

class XsdBaseTypePrivate {

    // Own properties of GXml-0.20.GXml.XsdBaseTypePrivate

    static name: string
}

interface XsdBaseContentClass {
}

abstract class XsdBaseContentClass {

    // Own properties of GXml-0.20.GXml.XsdBaseContentClass

    static name: string
}

interface XsdBaseContentPrivate {
}

class XsdBaseContentPrivate {

    // Own properties of GXml-0.20.GXml.XsdBaseContentPrivate

    static name: string
}

interface XsdSimpleContentClass {
}

abstract class XsdSimpleContentClass {

    // Own properties of GXml-0.20.GXml.XsdSimpleContentClass

    static name: string
}

interface XsdSimpleContentPrivate {
}

class XsdSimpleContentPrivate {

    // Own properties of GXml-0.20.GXml.XsdSimpleContentPrivate

    static name: string
}

interface XsdComplexContentClass {
}

abstract class XsdComplexContentClass {

    // Own properties of GXml-0.20.GXml.XsdComplexContentClass

    static name: string
}

interface XsdComplexContentPrivate {
}

class XsdComplexContentPrivate {

    // Own properties of GXml-0.20.GXml.XsdComplexContentPrivate

    static name: string
}

interface XsdOpenContentClass {
}

abstract class XsdOpenContentClass {

    // Own properties of GXml-0.20.GXml.XsdOpenContentClass

    static name: string
}

interface XsdOpenContentPrivate {
}

class XsdOpenContentPrivate {

    // Own properties of GXml-0.20.GXml.XsdOpenContentPrivate

    static name: string
}

interface XsdBaseAttributeClass {
}

abstract class XsdBaseAttributeClass {

    // Own properties of GXml-0.20.GXml.XsdBaseAttributeClass

    static name: string
}

interface XsdBaseAttributePrivate {
}

class XsdBaseAttributePrivate {

    // Own properties of GXml-0.20.GXml.XsdBaseAttributePrivate

    static name: string
}

interface XsdAttributeClass {
}

abstract class XsdAttributeClass {

    // Own properties of GXml-0.20.GXml.XsdAttributeClass

    static name: string
}

interface XsdAttributePrivate {
}

class XsdAttributePrivate {

    // Own properties of GXml-0.20.GXml.XsdAttributePrivate

    static name: string
}

interface XsdAttributeGroupClass {
}

abstract class XsdAttributeGroupClass {

    // Own properties of GXml-0.20.GXml.XsdAttributeGroupClass

    static name: string
}

interface XsdAttributeGroupPrivate {
}

class XsdAttributeGroupPrivate {

    // Own properties of GXml-0.20.GXml.XsdAttributeGroupPrivate

    static name: string
}

interface XsdListClass {
}

abstract class XsdListClass {

    // Own properties of GXml-0.20.GXml.XsdListClass

    static name: string
}

interface XsdListPrivate {
}

class XsdListPrivate {

    // Own properties of GXml-0.20.GXml.XsdListPrivate

    static name: string
}

interface XsdListElementsClass {
}

abstract class XsdListElementsClass {

    // Own properties of GXml-0.20.GXml.XsdListElementsClass

    static name: string
}

interface XsdListElementsPrivate {
}

class XsdListElementsPrivate {

    // Own properties of GXml-0.20.GXml.XsdListElementsPrivate

    static name: string
}

interface XsdListSimpleTypesClass {
}

abstract class XsdListSimpleTypesClass {

    // Own properties of GXml-0.20.GXml.XsdListSimpleTypesClass

    static name: string
}

interface XsdListSimpleTypesPrivate {
}

class XsdListSimpleTypesPrivate {

    // Own properties of GXml-0.20.GXml.XsdListSimpleTypesPrivate

    static name: string
}

interface XsdListComplexTypesClass {
}

abstract class XsdListComplexTypesClass {

    // Own properties of GXml-0.20.GXml.XsdListComplexTypesClass

    static name: string
}

interface XsdListComplexTypesPrivate {
}

class XsdListComplexTypesPrivate {

    // Own properties of GXml-0.20.GXml.XsdListComplexTypesPrivate

    static name: string
}

interface XsdListTypeRestrictionEnumerationsClass {
}

abstract class XsdListTypeRestrictionEnumerationsClass {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionEnumerationsClass

    static name: string
}

interface XsdListTypeRestrictionEnumerationsPrivate {
}

class XsdListTypeRestrictionEnumerationsPrivate {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionEnumerationsPrivate

    static name: string
}

interface XsdListTypeRestrictionWhiteSpacesClass {
}

abstract class XsdListTypeRestrictionWhiteSpacesClass {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpacesClass

    static name: string
}

interface XsdListTypeRestrictionWhiteSpacesPrivate {
}

class XsdListTypeRestrictionWhiteSpacesPrivate {

    // Own properties of GXml-0.20.GXml.XsdListTypeRestrictionWhiteSpacesPrivate

    static name: string
}

interface XTextClass {
}

abstract class XTextClass {

    // Own properties of GXml-0.20.GXml.XTextClass

    static name: string
}

interface XTextPrivate {
}

class XTextPrivate {

    // Own properties of GXml-0.20.GXml.XTextPrivate

    static name: string
}

interface CollectionIface {

    // Own fields of GXml-0.20.GXml.CollectionIface

    search: (self: Collection) => void
    getItem: (self: Collection, index: number) => DomElement | null
    append: (self: Collection, node: DomElement) => void
    initialize: (self: Collection, t: GObject.GType) => void
    createItem: (self: Collection) => DomElement | null
    validateAppend: (self: Collection, index: number, element: DomElement) => boolean
    clear: (self: Collection) => void
    getNodesIndex: (self: Collection) => GLib.Queue
    getElement: (self: Collection) => DomElement
    setElement: (self: Collection, value: DomElement) => void
    getItemsName: (self: Collection) => string | null
    getItemsType: (self: Collection) => GObject.GType
    setItemsType: (self: Collection, value: GObject.GType) => void
    getLength: (self: Collection) => number
}

abstract class CollectionIface {

    // Own properties of GXml-0.20.GXml.CollectionIface

    static name: string
}

interface ListIface {
}

abstract class ListIface {

    // Own properties of GXml-0.20.GXml.ListIface

    static name: string
}

interface MappeableElementIface {

    // Own fields of GXml-0.20.GXml.MappeableElementIface

    getMapKey: (self: MappeableElement) => string | null
}

abstract class MappeableElementIface {

    // Own properties of GXml-0.20.GXml.MappeableElementIface

    static name: string
}

interface MapIface {

    // Own fields of GXml-0.20.GXml.MapIface

    item: (self: Map, key: string | null) => DomElement | null
    hasKey: (self: Map, key: string | null) => boolean
    getAttributeKey: (self: Map) => string | null
    setAttributeKey: (self: Map, value: string | null) => void
    getKeysSet: (self: Map) => Gee.Set
}

abstract class MapIface {

    // Own properties of GXml-0.20.GXml.MapIface

    static name: string
}

interface MappeableElementPairKeyIface {

    // Own fields of GXml-0.20.GXml.MappeableElementPairKeyIface

    getMapPrimaryKey: (self: MappeableElementPairKey) => string | null
    getMapSecondaryKey: (self: MappeableElementPairKey) => string | null
}

abstract class MappeableElementPairKeyIface {

    // Own properties of GXml-0.20.GXml.MappeableElementPairKeyIface

    static name: string
}

interface PairedMapIface {

    // Own fields of GXml-0.20.GXml.PairedMapIface

    item: (self: PairedMap, primaryKey: string | null, secondaryKey: string | null) => DomElement | null
    hasPrimaryKey: (self: PairedMap, key: string | null) => boolean
    hasSecondaryKey: (self: PairedMap, pkey: string | null, key: string | null) => boolean
    secondaryKeysSet: (self: PairedMap, pkey: string | null) => Gee.Set
    getAttributePrimaryKey: (self: PairedMap) => string | null
    setAttributePrimaryKey: (self: PairedMap, value: string | null) => void
    getAttributeSecondaryKey: (self: PairedMap) => string | null
    setAttributeSecondaryKey: (self: PairedMap, value: string | null) => void
    getPrimaryKeysSet: (self: PairedMap) => Gee.Set
}

abstract class PairedMapIface {

    // Own properties of GXml-0.20.GXml.PairedMapIface

    static name: string
}

interface MappeableElementThreeKeyIface {

    // Own fields of GXml-0.20.GXml.MappeableElementThreeKeyIface

    getMapPkey: (self: MappeableElementThreeKey) => string | null
    getMapSkey: (self: MappeableElementThreeKey) => string | null
    getMapTkey: (self: MappeableElementThreeKey) => string | null
}

abstract class MappeableElementThreeKeyIface {

    // Own properties of GXml-0.20.GXml.MappeableElementThreeKeyIface

    static name: string
}

interface ThreeMapIface {

    // Own fields of GXml-0.20.GXml.ThreeMapIface

    item: (self: ThreeMap, primaryKey: string | null, secondaryKey: string | null, thirdKey: string | null) => DomElement | null
    hasPrimaryKey: (self: ThreeMap, key: string | null) => boolean
    hasSecondaryKey: (self: ThreeMap, pkey: string | null, key: string | null) => boolean
    hasThirdKey: (self: ThreeMap, pkey: string | null, skey: string | null, key: string | null) => boolean
    secondaryKeysSet: (self: ThreeMap, pkey: string | null) => Gee.Set
    thirdKeysSet: (self: ThreeMap, pkey: string | null, skey: string | null) => Gee.Set
    getAttributePrimaryKey: (self: ThreeMap) => string | null
    setAttributePrimaryKey: (self: ThreeMap, value: string | null) => void
    getAttributeSecondaryKey: (self: ThreeMap) => string | null
    setAttributeSecondaryKey: (self: ThreeMap, value: string | null) => void
    getAttributeThirdKey: (self: ThreeMap) => string | null
    setAttributeThirdKey: (self: ThreeMap, value: string | null) => void
    getPrimaryKeysSet: (self: ThreeMap) => Gee.Set
}

abstract class ThreeMapIface {

    // Own properties of GXml-0.20.GXml.ThreeMapIface

    static name: string
}

interface CollectionParentIface {

    // Own fields of GXml-0.20.GXml.CollectionParentIface

    getTypes: (self: CollectionParent) => GLib.HashTable
}

abstract class CollectionParentIface {

    // Own properties of GXml-0.20.GXml.CollectionParentIface

    static name: string
}

interface DomAttrIface {

    // Own fields of GXml-0.20.GXml.DomAttrIface

    getNamespaceUri: (self: DomAttr) => string | null
    getPrefix: (self: DomAttr) => string | null
    getLocalName: (self: DomAttr) => string | null
    getName: (self: DomAttr) => string | null
    getValue: (self: DomAttr) => string | null
    setValue: (self: DomAttr, value: string | null) => void
    getSpecified: (self: DomAttr) => boolean
}

abstract class DomAttrIface {

    // Own properties of GXml-0.20.GXml.DomAttrIface

    static name: string
}

interface DomCharacterDataIface {

    // Own fields of GXml-0.20.GXml.DomCharacterDataIface

    substringData: (self: DomCharacterData, offset: number, count: number) => string | null
    appendData: (self: DomCharacterData, data: string | null) => void
    insertData: (self: DomCharacterData, offset: number, data: string | null) => void
    deleteData: (self: DomCharacterData, offset: number, count: number) => void
    replaceData: (self: DomCharacterData, offset: number, count: number, data: string | null) => void
    getData: (self: DomCharacterData) => string | null
    setData: (self: DomCharacterData, value: string | null) => void
    getLength: (self: DomCharacterData) => number
}

abstract class DomCharacterDataIface {

    // Own properties of GXml-0.20.GXml.DomCharacterDataIface

    static name: string
}

interface DomTextIface {

    // Own fields of GXml-0.20.GXml.DomTextIface

    splitText: (self: DomText, offset: number) => DomText
    getWholeText: (self: DomText) => string | null
}

abstract class DomTextIface {

    // Own properties of GXml-0.20.GXml.DomTextIface

    static name: string
}

interface DomProcessingInstructionIface {

    // Own fields of GXml-0.20.GXml.DomProcessingInstructionIface

    getTarget: (self: DomProcessingInstruction) => string | null
}

abstract class DomProcessingInstructionIface {

    // Own properties of GXml-0.20.GXml.DomProcessingInstructionIface

    static name: string
}

interface DomCommentIface {
}

abstract class DomCommentIface {

    // Own properties of GXml-0.20.GXml.DomCommentIface

    static name: string
}

interface DomNonElementParentNodeIface {

    // Own fields of GXml-0.20.GXml.DomNonElementParentNodeIface

    getElementById: (self: DomNonElementParentNode, elementId: string | null) => DomElement | null
}

abstract class DomNonElementParentNodeIface {

    // Own properties of GXml-0.20.GXml.DomNonElementParentNodeIface

    static name: string
}

interface DomParentNodeIface {

    // Own fields of GXml-0.20.GXml.DomParentNodeIface

    querySelector: (self: DomParentNode, selectors: string | null) => DomElement | null
    querySelectorAll: (self: DomParentNode, selectors: string | null) => DomNodeList
    getElementsByPropertyValue: (self: DomParentNode, property: string | null, value: string | null) => DomElementList
    getChildren: (self: DomParentNode) => DomHTMLCollection
    getFirstElementChild: (self: DomParentNode) => DomElement | null
    getLastElementChild: (self: DomParentNode) => DomElement | null
    getChildElementCount: (self: DomParentNode) => number
}

abstract class DomParentNodeIface {

    // Own properties of GXml-0.20.GXml.DomParentNodeIface

    static name: string
}

interface DomNonDocumentTypeChildNodeIface {

    // Own fields of GXml-0.20.GXml.DomNonDocumentTypeChildNodeIface

    getPreviousElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
    getNextElementSibling: (self: DomNonDocumentTypeChildNode) => DomElement | null
}

abstract class DomNonDocumentTypeChildNodeIface {

    // Own properties of GXml-0.20.GXml.DomNonDocumentTypeChildNodeIface

    static name: string
}

interface DomChildNodeIface {

    // Own fields of GXml-0.20.GXml.DomChildNodeIface

    remove: (self: DomChildNode) => void
}

abstract class DomChildNodeIface {

    // Own properties of GXml-0.20.GXml.DomChildNodeIface

    static name: string
}

interface DomNodeListIface {

    // Own fields of GXml-0.20.GXml.DomNodeListIface

    item: (self: DomNodeList, index: number) => DomNode | null
    getLength: (self: DomNodeList) => number
}

abstract class DomNodeListIface {

    // Own properties of GXml-0.20.GXml.DomNodeListIface

    static name: string
}

interface DomHTMLCollectionIface {

    // Own fields of GXml-0.20.GXml.DomHTMLCollectionIface

    getElement: (self: DomHTMLCollection, index: number) => DomElement | null
    toArray: () => [ /* returnType */ DomElement[], /* resultLength1 */ number ]
    item: (self: DomHTMLCollection, index: number) => DomElement | null
    namedItem: (self: DomHTMLCollection, name: string | null) => DomElement | null
    getLength: (self: DomHTMLCollection) => number
}

abstract class DomHTMLCollectionIface {

    // Own properties of GXml-0.20.GXml.DomHTMLCollectionIface

    static name: string
}

interface DomNodeIteratorIface {

    // Own fields of GXml-0.20.GXml.DomNodeIteratorIface

    nextNode: (self: DomNodeIterator) => DomNode | null
    previousNode: (self: DomNodeIterator) => DomNode | null
    detach: (self: DomNodeIterator) => void
    getRoot: (self: DomNodeIterator) => DomNode
    getReferenceNode: (self: DomNodeIterator) => DomNode
    getPointerBeforeReferenceNode: (self: DomNodeIterator) => boolean
    getWhatToShow: (self: DomNodeIterator) => number
}

abstract class DomNodeIteratorIface {

    // Own properties of GXml-0.20.GXml.DomNodeIteratorIface

    static name: string
}

interface DomTreeWalkerIface {

    // Own fields of GXml-0.20.GXml.DomTreeWalkerIface

    parentNode: (self: DomTreeWalker) => DomNode | null
    firstChild: (self: DomTreeWalker) => DomNode | null
    lastChild: (self: DomTreeWalker) => DomNode | null
    previousSibling: (self: DomTreeWalker) => DomNode | null
    nextSibling: (self: DomTreeWalker) => DomNode | null
    previousNode: (self: DomTreeWalker) => DomNode | null
    nextNode: (self: DomTreeWalker) => DomNode | null
    getRoot: (self: DomTreeWalker) => DomNode
    getWhatToShow: (self: DomTreeWalker) => number
    getCurrentNode: (self: DomTreeWalker) => DomNode
}

abstract class DomTreeWalkerIface {

    // Own properties of GXml-0.20.GXml.DomTreeWalkerIface

    static name: string
}

interface DomNamedNodeMapIface {

    // Own fields of GXml-0.20.GXml.DomNamedNodeMapIface

    item: (self: DomNamedNodeMap, index: number) => DomNode | null
    getNamedItem: (self: DomNamedNodeMap, name: string | null) => DomNode | null
    setNamedItem: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    removeNamedItem: (self: DomNamedNodeMap, name: string | null) => DomNode | null
    removeNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string | null, localName: string | null) => DomNode | null
    getNamedItemNs: (self: DomNamedNodeMap, namespaceUri: string | null, localName: string | null) => DomNode | null
    setNamedItemNs: (self: DomNamedNodeMap, node: DomNode) => DomNode | null
    getLength: (self: DomNamedNodeMap) => number
}

abstract class DomNamedNodeMapIface {

    // Own properties of GXml-0.20.GXml.DomNamedNodeMapIface

    static name: string
}

interface DomTokenListIface {

    // Own fields of GXml-0.20.GXml.DomTokenListIface

    item: (self: DomTokenList, index: number) => string | null
    contains: (self: DomTokenList, token: string | null) => boolean
    add: (self: DomTokenList, tokens: string[]) => void
    remove: (self: DomTokenList, tokens: string[]) => void
    toggle: (self: DomTokenList, token: string | null, force: boolean, auto: boolean) => boolean
    toString: (self: DomTokenList) => string | null
    getLength: (self: DomTokenList) => number
}

abstract class DomTokenListIface {

    // Own properties of GXml-0.20.GXml.DomTokenListIface

    static name: string
}

interface DomSettableTokenListIface {

    // Own fields of GXml-0.20.GXml.DomSettableTokenListIface

    getValue: (self: DomSettableTokenList) => string | null
    setValue: (self: DomSettableTokenList, value: string | null) => void
}

abstract class DomSettableTokenListIface {

    // Own properties of GXml-0.20.GXml.DomSettableTokenListIface

    static name: string
}

interface DomDocumentIface {

    // Own fields of GXml-0.20.GXml.DomDocumentIface

    getElementsByTagName: (self: DomDocument, localName: string | null) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomDocument, namespace: string | null, localName: string | null) => DomHTMLCollection
    getElementsByClassName: (self: DomDocument, classNames: string | null) => DomHTMLCollection
    createElement: (self: DomDocument, localName: string | null) => DomElement
    createElementNs: (self: DomDocument, namespace: string | null, qualifiedName: string | null) => DomElement
    createDocumentFragment: (self: DomDocument) => DomDocumentFragment
    createTextNode: (self: DomDocument, data: string | null) => DomText
    createComment: (self: DomDocument, data: string | null) => DomComment
    createProcessingInstruction: (self: DomDocument, target: string | null, data: string | null) => DomProcessingInstruction
    importNode: (self: DomDocument, node: DomNode, deep: boolean) => DomNode
    adoptNode: (self: DomDocument, node: DomNode) => DomNode
    createEvent: (self: DomDocument, interface: string | null) => DomEvent
    createRange: (self: DomDocument) => DomRange
    createNodeIterator: (self: DomDocument, root: DomNode, whatToShow: number) => DomNodeIterator
    createTreeWalker: (self: DomDocument, root: DomNode, whatToShow: number) => DomTreeWalker
    writeFile: (self: DomDocument, file: Gio.File, cancellable: Gio.Cancellable | null) => void
    writeFileAsync: (self: DomDocument, file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (self: DomDocument, res: Gio.AsyncResult) => void
    writeStream: (self: DomDocument, stream: Gio.OutputStream, cancellable: Gio.Cancellable | null) => void
    writeStreamAsync: (self: DomDocument, stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (self: DomDocument, res: Gio.AsyncResult) => void
    createStream: (self: DomDocument) => Gio.InputStream
    createStreamAsync: (self: DomDocument, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (self: DomDocument, res: Gio.AsyncResult) => Gio.InputStream
    writeString: (self: DomDocument, cancellable: Gio.Cancellable | null) => string | null
    writeStringAsync: (self: DomDocument, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (self: DomDocument, res: Gio.AsyncResult) => string | null
    readFromFile: (self: DomDocument, file: Gio.File, cancellable: Gio.Cancellable | null) => void
    readFromFileAsync: (self: DomDocument, file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromFileFinish: (self: DomDocument, res: Gio.AsyncResult) => void
    readFromString: (self: DomDocument, str: string | null, cancellable: Gio.Cancellable | null) => void
    readFromStringAsync: (self: DomDocument, str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromStringFinish: (self: DomDocument, res: Gio.AsyncResult) => void
    readFromStream: (self: DomDocument, stream: Gio.InputStream, cancellable: Gio.Cancellable | null) => void
    readFromStreamAsync: (self: DomDocument, stream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromStreamFinish: (self: DomDocument, res: Gio.AsyncResult) => void
    getXmlParser: (self: DomDocument) => Parser
    setXmlParser: (self: DomDocument, parser: Parser) => void
    getImplementation: (self: DomDocument) => DomImplementation
    getUrl: (self: DomDocument) => string | null
    getDocumentUri: (self: DomDocument) => string | null
    getOrigin: (self: DomDocument) => string | null
    getCompatMode: (self: DomDocument) => string | null
    getCharacterSet: (self: DomDocument) => string | null
    getContentType: (self: DomDocument) => string | null
    getDoctype: (self: DomDocument) => DomDocumentType | null
    getDocumentElement: (self: DomDocument) => DomElement | null
}

abstract class DomDocumentIface {

    // Own properties of GXml-0.20.GXml.DomDocumentIface

    static name: string
}

interface DomXMLDocumentIface {
}

abstract class DomXMLDocumentIface {

    // Own properties of GXml-0.20.GXml.DomXMLDocumentIface

    static name: string
}

interface DomImplementationIface {

    // Own fields of GXml-0.20.GXml.DomImplementationIface

    createDocumentType: (self: DomImplementation, qualifiedName: string | null, publicId: string | null, systemId: string | null) => DomDocumentType
    createDocument: (self: DomImplementation, nspace: string | null, qualifiedName: string | null, doctype: DomDocumentType | null) => DomXMLDocument
    createHtmlDocument: (self: DomImplementation, title: string | null) => DomDocument
    hasFeature: (self: DomImplementation) => boolean
}

abstract class DomImplementationIface {

    // Own properties of GXml-0.20.GXml.DomImplementationIface

    static name: string
}

interface DomDocumentFragmentIface {
}

abstract class DomDocumentFragmentIface {

    // Own properties of GXml-0.20.GXml.DomDocumentFragmentIface

    static name: string
}

interface DomDocumentTypeIface {

    // Own fields of GXml-0.20.GXml.DomDocumentTypeIface

    getName: (self: DomDocumentType) => string | null
    getPublicId: (self: DomDocumentType) => string | null
    getSystemId: (self: DomDocumentType) => string | null
}

abstract class DomDocumentTypeIface {

    // Own properties of GXml-0.20.GXml.DomDocumentTypeIface

    static name: string
}

interface DomHtmlDocumentIface {

    // Own fields of GXml-0.20.GXml.DomHtmlDocumentIface

    readFromString: (self: DomHtmlDocument, str: string | null) => void
    readFromStringTolerant: (self: DomHtmlDocument, str: string | null) => void
    toHtml: (self: DomHtmlDocument) => string | null
}

abstract class DomHtmlDocumentIface {

    // Own properties of GXml-0.20.GXml.DomHtmlDocumentIface

    static name: string
}

interface DomElementIface {

    // Own fields of GXml-0.20.GXml.DomElementIface

    getAttribute: (self: DomElement, name: string | null) => string | null
    getAttributeNs: (self: DomElement, namespace: string | null, localName: string | null) => string | null
    setAttribute: (self: DomElement, name: string | null, value: string | null) => void
    setAttributeNs: (self: DomElement, namespace: string | null, name: string | null, value: string | null) => void
    removeAttribute: (self: DomElement, name: string | null) => void
    removeAttributeNs: (self: DomElement, namespace: string | null, localName: string | null) => void
    hasAttribute: (self: DomElement, name: string | null) => boolean
    hasAttributeNs: (self: DomElement, namespace: string | null, localName: string | null) => boolean
    getElementsByTagName: (self: DomElement, localName: string | null) => DomHTMLCollection
    getElementsByTagNameNs: (self: DomElement, namespace: string | null, localName: string | null) => DomHTMLCollection
    getElementsByClassName: (self: DomElement, classNames: string | null) => DomHTMLCollection
    matches: (self: DomElement, selectors: string | null) => boolean
    readFromUri: (self: DomElement, uri: string | null) => void
    readFromUriAsync: (self: DomElement, uri: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromUriFinish: (self: DomElement, res: Gio.AsyncResult) => void
    readFromFile: (self: DomElement, f: Gio.File, cancellable: Gio.Cancellable | null) => void
    readFromFileAsync: (self: DomElement, f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromFileFinish: (self: DomElement, res: Gio.AsyncResult) => void
    readFromStream: (self: DomElement, istream: Gio.InputStream, cancellable: Gio.Cancellable | null) => void
    readFromStreamAsync: (self: DomElement, istream: Gio.InputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromStreamFinish: (self: DomElement, res: Gio.AsyncResult) => void
    readFromString: (self: DomElement, str: string | null, cancellable: Gio.Cancellable | null) => void
    readFromStringAsync: (self: DomElement, str: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    readFromStringFinish: (self: DomElement, res: Gio.AsyncResult) => void
    writeString: (self: DomElement, cancellable: Gio.Cancellable | null) => string | null
    writeStringAsync: (self: DomElement, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (self: DomElement, res: Gio.AsyncResult) => string | null
    writeFile: (self: DomElement, f: Gio.File, cancellable: Gio.Cancellable | null) => void
    writeFileAsync: (self: DomElement, f: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (self: DomElement, res: Gio.AsyncResult) => void
    writeStream: (self: DomElement, stream: Gio.OutputStream) => void
    writeStreamAsync: (self: DomElement, stream: Gio.OutputStream, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (self: DomElement, res: Gio.AsyncResult) => void
    createStream: (self: DomElement) => Gio.InputStream
    createStreamAsync: (self: DomElement, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (self: DomElement, res: Gio.AsyncResult) => Gio.InputStream
    getNamespaceUri: (self: DomElement) => string | null
    getPrefix: (self: DomElement) => string | null
    getLocalName: (self: DomElement) => string | null
    getTagName: (self: DomElement) => string | null
    getId: (self: DomElement) => string | null
    setId: (self: DomElement, value: string | null) => void
    getClassName: (self: DomElement) => string | null
    setClassName: (self: DomElement, value: string | null) => void
    getClassList: (self: DomElement) => DomTokenList
    getAttributes: (self: DomElement) => DomNamedNodeMap
}

abstract class DomElementIface {

    // Own properties of GXml-0.20.GXml.DomElementIface

    static name: string
}

interface DomEventTargetIface {

    // Own fields of GXml-0.20.GXml.DomEventTargetIface

    addEventListener: (self: DomEventTarget, type: string | null, callback: DomEventListener | null, capture: boolean) => void
    removeEventListener: (self: DomEventTarget, type: string | null, callback: DomEventListener | null, capture: boolean) => void
    dispatchEvent: (self: DomEventTarget, event: DomEvent) => boolean
}

abstract class DomEventTargetIface {

    // Own properties of GXml-0.20.GXml.DomEventTargetIface

    static name: string
}

interface DomEventListenerIface {

    // Own fields of GXml-0.20.GXml.DomEventListenerIface

    handleEvent: (self: DomEventListener, event: DomEvent) => void
}

abstract class DomEventListenerIface {

    // Own properties of GXml-0.20.GXml.DomEventListenerIface

    static name: string
}

interface DomEventIface {

    // Own fields of GXml-0.20.GXml.DomEventIface

    stopPropagation: (self: DomEvent) => void
    stopImmediatePropagation: (self: DomEvent) => void
    preventDefault: (self: DomEvent) => void
    initEvent: (self: DomEvent, type: string | null, bubbles: boolean, cancelable: boolean) => void
    getEtype: (self: DomEvent) => string | null
    getEventTarget: (self: DomEvent) => DomEventTarget | null
    getCurrentTarget: (self: DomEvent) => DomEventTarget | null
    getBubbles: (self: DomEvent) => boolean
    getCancelable: (self: DomEvent) => boolean
    getIsTrusted: (self: DomEvent) => boolean
    getTimeStamp: (self: DomEvent) => DomTimeStamp
    getDefaultPrevented: (self: DomEvent) => boolean
    getEventPhase: (self: DomEvent) => DomEventPhase
}

abstract class DomEventIface {

    // Own properties of GXml-0.20.GXml.DomEventIface

    static name: string
}

interface DomCustomEventIface {

    // Own fields of GXml-0.20.GXml.DomCustomEventIface

    initCustomEvent: (self: DomCustomEvent, type: string | null, bubbles: boolean, cancelable: boolean, detail: any) => void
    getDetail: (self: DomCustomEvent) => /* result */ any
}

abstract class DomCustomEventIface {

    // Own properties of GXml-0.20.GXml.DomCustomEventIface

    static name: string
}

interface DomMutationObserverIface {

    // Own fields of GXml-0.20.GXml.DomMutationObserverIface

    observe: (self: DomMutationObserver, target: Node, options: DomMutationObserverInit) => void
    disconnect: (self: DomMutationObserver) => void
    takeRecords: (self: DomMutationObserver) => Gee.List
}

abstract class DomMutationObserverIface {

    // Own properties of GXml-0.20.GXml.DomMutationObserverIface

    static name: string
}

interface DomMutationRecordIface {

    // Own fields of GXml-0.20.GXml.DomMutationRecordIface

    getMtype: (self: DomMutationRecord) => string | null
    getTarget: (self: DomMutationRecord) => DomNode
    getAddedNodes: (self: DomMutationRecord) => DomNodeList
    setAddedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getRemovedNodes: (self: DomMutationRecord) => DomNodeList
    setRemovedNodes: (self: DomMutationRecord, value: DomNodeList) => void
    getPreviousSibling: (self: DomMutationRecord) => DomNode | null
    getNextSibling: (self: DomMutationRecord) => DomNode | null
    getAttributeName: (self: DomMutationRecord) => string | null
    getAttributeNamespace: (self: DomMutationRecord) => string | null
    getOldValue: (self: DomMutationRecord) => string | null
}

abstract class DomMutationRecordIface {

    // Own properties of GXml-0.20.GXml.DomMutationRecordIface

    static name: string
}

interface DomNodeIface {

    // Own fields of GXml-0.20.GXml.DomNodeIface

    hasChildNodes: (self: DomNode) => boolean
    normalize: (self: DomNode) => void
    isEqualNode: (self: DomNode, node: DomNode | null) => boolean
    compareDocumentPosition: (self: DomNode, other: DomNode) => DomNodeDocumentPosition
    contains: (self: DomNode, other: DomNode | null) => boolean
    lookupPrefix: (self: DomNode, nspace: string | null) => string | null
    lookupNamespaceUri: (self: DomNode, prefix: string | null) => string | null
    isDefaultNamespace: (self: DomNode, nspace: string | null) => boolean
    insertBefore: (self: DomNode, node: DomNode, child: DomNode | null) => DomNode
    appendChild: (self: DomNode, node: DomNode) => DomNode
    replaceChild: (self: DomNode, node: DomNode, child: DomNode) => DomNode
    removeChild: (self: DomNode, child: DomNode) => DomNode
    getNodeType: (self: DomNode) => DomNodeNodeType
    getNodeName: (self: DomNode) => string | null
    getBaseUri: (self: DomNode) => string | null
    getOwnerDocument: (self: DomNode) => DomDocument | null
    setOwnerDocument: (self: DomNode, value: DomDocument | null) => void
    getParentNode: (self: DomNode) => DomNode | null
    getParentElement: (self: DomNode) => DomElement | null
    getChildNodes: (self: DomNode) => DomNodeList
    getFirstChild: (self: DomNode) => DomNode | null
    getLastChild: (self: DomNode) => DomNode | null
    getPreviousSibling: (self: DomNode) => DomNode | null
    getNextSibling: (self: DomNode) => DomNode | null
    getNodeValue: (self: DomNode) => string | null
    setNodeValue: (self: DomNode, value: string | null) => void
    getTextContent: (self: DomNode) => string | null
    setTextContent: (self: DomNode, value: string | null) => void
}

abstract class DomNodeIface {

    // Own properties of GXml-0.20.GXml.DomNodeIface

    static name: string
}

interface DomRangeIface {

    // Own fields of GXml-0.20.GXml.DomRangeIface

    setStart: (self: DomRange, node: DomNode, offset: number) => void
    setEnd: (self: DomRange, node: DomNode, offset: number) => void
    setStartBefore: (self: DomRange, node: DomNode) => void
    setStartAfter: (self: DomRange, node: DomNode) => void
    setEndBefore: (self: DomRange, node: DomNode) => void
    setEndAfter: (self: DomRange, node: DomNode) => void
    collapse: (self: DomRange, toStart: boolean) => void
    selectNode: (self: DomRange, node: DomNode) => void
    selectNodeContents: (self: DomRange, node: DomNode) => void
    compareBoundaryPoints: (self: DomRange, how: DomRangeBoundaryPoints, sourceRange: DomRange) => number
    deleteContents: (self: DomRange) => void
    extractContents: (self: DomRange) => DomDocumentFragment | null
    cloneContents: (self: DomRange) => DomDocumentFragment | null
    insertNode: (self: DomRange, node: DomNode) => void
    surroundContents: (self: DomRange, newParent: DomNode) => void
    cloneRange: (self: DomRange) => DomRange
    detach: (self: DomRange) => void
    isPointInRange: (self: DomRange, node: DomNode, offset: number) => boolean
    comparePoint: (self: DomRange, node: DomNode, offset: number) => number
    intersectsNode: (self: DomRange, node: DomNode) => boolean
    toString: (self: DomRange) => string | null
    getStartContainer: (self: DomRange) => DomNode
    getStartOffset: (self: DomRange) => number
    getEndContainer: (self: DomRange) => DomNode
    getEndOffset: (self: DomRange) => number
    getCollapsed: (self: DomRange) => boolean
    getCommonAncestorContainer: (self: DomRange) => DomNode
}

abstract class DomRangeIface {

    // Own properties of GXml-0.20.GXml.DomRangeIface

    static name: string
}

interface IXsdSchemaIface {

    // Own fields of GXml-0.20.GXml.IXsdSchemaIface

    getElementDefinitions: (self: IXsdSchema) => IXsdListElements
    setElementDefinitions: (self: IXsdSchema, value: IXsdListElements) => void
    getSimpleTypeDefinitions: (self: IXsdSchema) => IXsdListSimpleTypes
    setSimpleTypeDefinitions: (self: IXsdSchema, value: IXsdListSimpleTypes) => void
    getComplexTypeDefinitions: (self: IXsdSchema) => IXsdListComplexTypes
    setComplexTypeDefinitions: (self: IXsdSchema, value: IXsdListComplexTypes) => void
}

abstract class IXsdSchemaIface {

    // Own properties of GXml-0.20.GXml.IXsdSchemaIface

    static name: string
}

interface IXsdBaseTypeIface {

    // Own fields of GXml-0.20.GXml.IXsdBaseTypeIface

    getAnotation: (self: IXsdBaseType) => IXsdAnnotation
    setAnotation: (self: IXsdBaseType, value: IXsdAnnotation) => void
}

abstract class IXsdBaseTypeIface {

    // Own properties of GXml-0.20.GXml.IXsdBaseTypeIface

    static name: string
}

interface IXsdSimpleTypeIface {

    // Own fields of GXml-0.20.GXml.IXsdSimpleTypeIface

    getFinal: (self: IXsdSimpleType) => string | null
    setFinal: (self: IXsdSimpleType, value: string | null) => void
    getId: (self: IXsdSimpleType) => string | null
    setId: (self: IXsdSimpleType, value: string | null) => void
    getName: (self: IXsdSimpleType) => string | null
    setName: (self: IXsdSimpleType, value: string | null) => void
    getAnnotation: (self: IXsdSimpleType) => IXsdAnnotation
    setAnnotation: (self: IXsdSimpleType, value: IXsdAnnotation) => void
    getList: (self: IXsdSimpleType) => IXsdTypeList
    setList: (self: IXsdSimpleType, value: IXsdTypeList) => void
    getUnion: (self: IXsdSimpleType) => IXsdTypeUnion
    setUnion: (self: IXsdSimpleType, value: IXsdTypeUnion) => void
    getRestriction: (self: IXsdSimpleType) => IXsdTypeRestriction
    setRestriction: (self: IXsdSimpleType, value: IXsdTypeRestriction) => void
}

abstract class IXsdSimpleTypeIface {

    // Own properties of GXml-0.20.GXml.IXsdSimpleTypeIface

    static name: string
}

interface IXsdTypeDefIface {
}

abstract class IXsdTypeDefIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeDefIface

    static name: string
}

interface IXsdTypeRestrictionIface {

    // Own fields of GXml-0.20.GXml.IXsdTypeRestrictionIface

    getBase: (self: IXsdTypeRestriction) => string | null
    setBase: (self: IXsdTypeRestriction, value: string | null) => void
    getId: (self: IXsdTypeRestriction) => string | null
    setId: (self: IXsdTypeRestriction, value: string | null) => void
    getSimpleType: (self: IXsdTypeRestriction) => IXsdSimpleType
    setSimpleType: (self: IXsdTypeRestriction, value: IXsdSimpleType) => void
    getEnumerations: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionEnumerations
    setEnumerations: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionEnumerations) => void
    getWhiteSpaces: (self: IXsdTypeRestriction) => IXsdListTypeRestrictionWhiteSpaces
    setWhiteSpaces: (self: IXsdTypeRestriction, value: IXsdListTypeRestrictionWhiteSpaces) => void
}

abstract class IXsdTypeRestrictionIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionIface

    static name: string
}

interface IXsdTypeListIface {
}

abstract class IXsdTypeListIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeListIface

    static name: string
}

interface IXsdTypeUnionIface {
}

abstract class IXsdTypeUnionIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeUnionIface

    static name: string
}

interface IXsdTypeRestrictionDefIface {

    // Own fields of GXml-0.20.GXml.IXsdTypeRestrictionDefIface

    getAnnotation: (self: IXsdTypeRestrictionDef) => IXsdAnnotation
    setAnnotation: (self: IXsdTypeRestrictionDef, value: IXsdAnnotation) => void
}

abstract class IXsdTypeRestrictionDefIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionDefIface

    static name: string
}

interface IXsdTypeRestrictionMinExclusiveIface {
}

abstract class IXsdTypeRestrictionMinExclusiveIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinExclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMinInclusiveIface {
}

abstract class IXsdTypeRestrictionMinInclusiveIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinInclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMaxExclusiveIface {
}

abstract class IXsdTypeRestrictionMaxExclusiveIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxExclusiveIface

    static name: string
}

interface IXsdTypeRestrictionMaxInclusiveIface {
}

abstract class IXsdTypeRestrictionMaxInclusiveIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxInclusiveIface

    static name: string
}

interface IXsdTypeRestrictionTotalDigitsIface {
}

abstract class IXsdTypeRestrictionTotalDigitsIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionTotalDigitsIface

    static name: string
}

interface IXsdTypeRestrictionFractionDigitsIface {
}

abstract class IXsdTypeRestrictionFractionDigitsIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionFractionDigitsIface

    static name: string
}

interface IXsdTypeRestrictionLengthIface {
}

abstract class IXsdTypeRestrictionLengthIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionLengthIface

    static name: string
}

interface IXsdTypeRestrictionMinLengthIface {
}

abstract class IXsdTypeRestrictionMinLengthIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMinLengthIface

    static name: string
}

interface IXsdTypeRestrictionMaxLengthIface {
}

abstract class IXsdTypeRestrictionMaxLengthIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionMaxLengthIface

    static name: string
}

interface IXsdTypeRestrictionEnumerationIface {

    // Own fields of GXml-0.20.GXml.IXsdTypeRestrictionEnumerationIface

    getId: (self: IXsdTypeRestrictionEnumeration) => string | null
    setId: (self: IXsdTypeRestrictionEnumeration, value: string | null) => void
    getValue: (self: IXsdTypeRestrictionEnumeration) => string | null
    setValue: (self: IXsdTypeRestrictionEnumeration, value: string | null) => void
}

abstract class IXsdTypeRestrictionEnumerationIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionEnumerationIface

    static name: string
}

interface IXsdTypeRestrictionWhiteSpaceIface {

    // Own fields of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpaceIface

    getFixed: (self: IXsdTypeRestrictionWhiteSpace) => boolean
    setFixed: (self: IXsdTypeRestrictionWhiteSpace, value: boolean) => void
    getId: (self: IXsdTypeRestrictionWhiteSpace) => string | null
    setId: (self: IXsdTypeRestrictionWhiteSpace, value: string | null) => void
    getValue: (self: IXsdTypeRestrictionWhiteSpace) => string | null
    setValue: (self: IXsdTypeRestrictionWhiteSpace, value: string | null) => void
}

abstract class IXsdTypeRestrictionWhiteSpaceIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionWhiteSpaceIface

    static name: string
}

interface IXsdTypeRestrictionPatternIface {
}

abstract class IXsdTypeRestrictionPatternIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionPatternIface

    static name: string
}

interface IXsdTypeRestrictionAssertionIface {
}

abstract class IXsdTypeRestrictionAssertionIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionAssertionIface

    static name: string
}

interface IXsdTypeRestrictionExplicitTimezoneIface {
}

abstract class IXsdTypeRestrictionExplicitTimezoneIface {

    // Own properties of GXml-0.20.GXml.IXsdTypeRestrictionExplicitTimezoneIface

    static name: string
}

interface IXsdComplexTypeIface {

    // Own fields of GXml-0.20.GXml.IXsdComplexTypeIface

    getAbstract: (self: IXsdComplexType) => boolean
    setAbstract: (self: IXsdComplexType, value: boolean) => void
    getBlock: (self: IXsdComplexType) => string | null
    setBlock: (self: IXsdComplexType, value: string | null) => void
    getFinal: (self: IXsdComplexType) => string | null
    setFinal: (self: IXsdComplexType, value: string | null) => void
    getMixed: (self: IXsdComplexType) => boolean
    setMixed: (self: IXsdComplexType, value: boolean) => void
    getName: (self: IXsdComplexType) => string | null
    setName: (self: IXsdComplexType, value: string | null) => void
    getDefaultAttributesApply: (self: IXsdComplexType) => boolean
    setDefaultAttributesApply: (self: IXsdComplexType, value: boolean) => void
    getContentType: (self: IXsdComplexType) => IXsdBaseContent
    setContentType: (self: IXsdComplexType, value: IXsdBaseContent) => void
    getTypeAttributes: (self: IXsdComplexType) => IXsdListAttributes
    getGroupAttributes: (self: IXsdComplexType) => IXsdListAttributesGroup
}

abstract class IXsdComplexTypeIface {

    // Own properties of GXml-0.20.GXml.IXsdComplexTypeIface

    static name: string
}

interface IXsdExtensionIface {

    // Own fields of GXml-0.20.GXml.IXsdExtensionIface

    getBase: (self: IXsdExtension) => string | null
    setBase: (self: IXsdExtension, value: string | null) => void
}

abstract class IXsdExtensionIface {

    // Own properties of GXml-0.20.GXml.IXsdExtensionIface

    static name: string
}

interface IXsdElementIface {

    // Own fields of GXml-0.20.GXml.IXsdElementIface

    getAbstract: (self: IXsdElement) => boolean
    setAbstract: (self: IXsdElement, value: boolean) => void
    getBlock: (self: IXsdElement) => string | null
    setBlock: (self: IXsdElement, value: string | null) => void
    getDefault: (self: IXsdElement) => string | null
    setDefault: (self: IXsdElement, value: string | null) => void
    getFinal: (self: IXsdElement) => string | null
    setFinal: (self: IXsdElement, value: string | null) => void
    getFixed: (self: IXsdElement) => string | null
    setFixed: (self: IXsdElement, value: string | null) => void
    getForm: (self: IXsdElement) => string | null
    setForm: (self: IXsdElement, value: string | null) => void
    getId: (self: IXsdElement) => string | null
    setId: (self: IXsdElement, value: string | null) => void
    getMaxOccurs: (self: IXsdElement) => string | null
    setMaxOccurs: (self: IXsdElement, value: string | null) => void
    getMinOccurs: (self: IXsdElement) => string | null
    setMinOccurs: (self: IXsdElement, value: string | null) => void
    getName: (self: IXsdElement) => string | null
    setName: (self: IXsdElement, value: string | null) => void
    getNillable: (self: IXsdElement) => boolean
    setNillable: (self: IXsdElement, value: boolean) => void
    getRef: (self: IXsdElement) => string | null
    setRef: (self: IXsdElement, value: string | null) => void
    getSubstitutionGroup: (self: IXsdElement) => DomTokenList
    setSubstitutionGroup: (self: IXsdElement, value: DomTokenList) => void
    getTargetNamespace: (self: IXsdElement) => string | null
    setTargetNamespace: (self: IXsdElement, value: string | null) => void
    getObjectType: (self: IXsdElement) => string | null
    setObjectType: (self: IXsdElement, value: string | null) => void
    getAnotation: (self: IXsdElement) => IXsdAnnotation
    setAnotation: (self: IXsdElement, value: IXsdAnnotation) => void
    getSimpleType: (self: IXsdElement) => IXsdSimpleType
    setSimpleType: (self: IXsdElement, value: IXsdSimpleType) => void
    getComplexType: (self: IXsdElement) => IXsdComplexType
    setComplexType: (self: IXsdElement, value: IXsdComplexType) => void
}

abstract class IXsdElementIface {

    // Own properties of GXml-0.20.GXml.IXsdElementIface

    static name: string
}

interface IXsdAnnotationIface {
}

abstract class IXsdAnnotationIface {

    // Own properties of GXml-0.20.GXml.IXsdAnnotationIface

    static name: string
}

interface IXsdBaseContentIface {

    // Own fields of GXml-0.20.GXml.IXsdBaseContentIface

    getAnotation: (self: IXsdBaseContent) => IXsdAnnotation
    setAnotation: (self: IXsdBaseContent, value: IXsdAnnotation) => void
}

abstract class IXsdBaseContentIface {

    // Own properties of GXml-0.20.GXml.IXsdBaseContentIface

    static name: string
}

interface IXsdSimpleContentIface {
}

abstract class IXsdSimpleContentIface {

    // Own properties of GXml-0.20.GXml.IXsdSimpleContentIface

    static name: string
}

interface IXsdComplexContentIface {
}

abstract class IXsdComplexContentIface {

    // Own properties of GXml-0.20.GXml.IXsdComplexContentIface

    static name: string
}

interface IXsdOpenContentIface {
}

abstract class IXsdOpenContentIface {

    // Own properties of GXml-0.20.GXml.IXsdOpenContentIface

    static name: string
}

interface IXsdBaseAttributeIface {

    // Own fields of GXml-0.20.GXml.IXsdBaseAttributeIface

    getAnotation: (self: IXsdBaseAttribute) => IXsdAnnotation
    setAnotation: (self: IXsdBaseAttribute, value: IXsdAnnotation) => void
}

abstract class IXsdBaseAttributeIface {

    // Own properties of GXml-0.20.GXml.IXsdBaseAttributeIface

    static name: string
}

interface IXsdAttributeIface {
}

abstract class IXsdAttributeIface {

    // Own properties of GXml-0.20.GXml.IXsdAttributeIface

    static name: string
}

interface IXsdAttributeGroupIface {
}

abstract class IXsdAttributeGroupIface {

    // Own properties of GXml-0.20.GXml.IXsdAttributeGroupIface

    static name: string
}

interface IXsdListIface {

    // Own fields of GXml-0.20.GXml.IXsdListIface

    getItem: (self: IXsdList, index: number) => DomElement | null
    append: (self: IXsdList, element: DomElement) => void
    remove: (self: IXsdList, index: number) => void
    indexOf: (self: IXsdList, element: DomElement) => number
    getElement: (self: IXsdList) => DomElement
    setElement: (self: IXsdList, value: DomElement) => void
    getItemsType: (self: IXsdList) => GObject.GType
    setItemsType: (self: IXsdList, value: GObject.GType) => void
    getItemsName: (self: IXsdList) => GObject.GType
    setItemsName: (self: IXsdList, value: GObject.GType) => void
    getLength: (self: IXsdList) => number
}

abstract class IXsdListIface {

    // Own properties of GXml-0.20.GXml.IXsdListIface

    static name: string
}

interface IXsdListElementsIface {
}

abstract class IXsdListElementsIface {

    // Own properties of GXml-0.20.GXml.IXsdListElementsIface

    static name: string
}

interface IXsdListSimpleTypesIface {
}

abstract class IXsdListSimpleTypesIface {

    // Own properties of GXml-0.20.GXml.IXsdListSimpleTypesIface

    static name: string
}

interface IXsdListComplexTypesIface {
}

abstract class IXsdListComplexTypesIface {

    // Own properties of GXml-0.20.GXml.IXsdListComplexTypesIface

    static name: string
}

interface IXsdListAttributesIface {
}

abstract class IXsdListAttributesIface {

    // Own properties of GXml-0.20.GXml.IXsdListAttributesIface

    static name: string
}

interface IXsdListAttributesGroupIface {
}

abstract class IXsdListAttributesGroupIface {

    // Own properties of GXml-0.20.GXml.IXsdListAttributesGroupIface

    static name: string
}

interface IXsdListTypeRestrictionEnumerationsIface {
}

abstract class IXsdListTypeRestrictionEnumerationsIface {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionEnumerationsIface

    static name: string
}

interface IXsdListTypeRestrictionWhiteSpacesIface {
}

abstract class IXsdListTypeRestrictionWhiteSpacesIface {

    // Own properties of GXml-0.20.GXml.IXsdListTypeRestrictionWhiteSpacesIface

    static name: string
}

interface ObjectIface {

    // Own fields of GXml-0.20.GXml.ObjectIface

    getPropertiesList: (self: Object) => GObject.ParamSpec[]
    findPropertyName: (self: Object, nick: string | null) => GObject.ParamSpec | null
    findObjectPropertyName: (self: Object, pname: string | null) => GObject.ParamSpec | null
    getPropertyElementList: (self: Object) => GObject.ParamSpec[]
    getPropertyString: (self: Object, prop: GObject.ParamSpec) => string | null
    getAttribute: (self: Object, name: string | null) => string | null
    findProperty: (self: Object, name: string | null) => Property | null
    setAttribute: (self: Object, name: string | null, val: string | null) => boolean
    getChild: (self: Object, name: string | null) => DomElement | null
    findElements: (self: Object, name: string | null) => DomElementList
    removeAttribute: (self: Object, name: string | null) => boolean
    setInstanceProperty: (self: Object, name: string | null) => boolean
    cleanPropertyElements: (self: Object, name: string | null) => void
}

abstract class ObjectIface {

    // Own properties of GXml-0.20.GXml.ObjectIface

    static name: string
}

interface ParserIface {

    // Own fields of GXml-0.20.GXml.ParserIface

    writeFile: (self: Parser, file: Gio.File) => void
    writeFileAsync: (self: Parser, file: Gio.File, callback: Gio.AsyncReadyCallback | null) => void
    writeFileFinish: (self: Parser, res: Gio.AsyncResult) => void
    writeString: (self: Parser) => string | null
    writeStringAsync: (self: Parser, callback: Gio.AsyncReadyCallback | null) => void
    writeStringFinish: (self: Parser, res: Gio.AsyncResult) => string | null
    writeStream: (self: Parser, stream: Gio.OutputStream) => void
    writeStreamAsync: (self: Parser, stream: Gio.OutputStream, callback: Gio.AsyncReadyCallback | null) => void
    writeStreamFinish: (self: Parser, res: Gio.AsyncResult) => void
    readFile: (self: Parser, file: Gio.File) => void
    readFileAsync: (self: Parser, file: Gio.File, callback: Gio.AsyncReadyCallback | null) => void
    readFileFinish: (self: Parser, res: Gio.AsyncResult) => void
    readStream: (self: Parser, stream: Gio.InputStream) => void
    readStreamAsync: (self: Parser, stream: Gio.InputStream, callback: Gio.AsyncReadyCallback | null) => void
    readStreamFinish: (self: Parser, res: Gio.AsyncResult) => void
    readString: (self: Parser, str: string | null) => void
    readStringAsync: (self: Parser, str: string | null, callback: Gio.AsyncReadyCallback | null) => void
    readStringFinish: (self: Parser, res: Gio.AsyncResult) => void
    createStream: (self: Parser) => Gio.InputStream
    createStreamAsync: (self: Parser, callback: Gio.AsyncReadyCallback | null) => void
    createStreamFinish: (self: Parser, res: Gio.AsyncResult) => Gio.InputStream
    readChildNodes: (self: Parser, parent: DomNode) => void
    readChildNodesAsync: (self: Parser, parent: DomNode, callback: Gio.AsyncReadyCallback | null) => void
    readChildNodesFinish: (self: Parser, res: Gio.AsyncResult) => void
    readChildNode: (self: Parser, parent: DomNode) => boolean
    readChildElement: (self: Parser, parent: DomNode) => boolean
    readElementProperty: (self: Parser, parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    addElementCollection: (self: Parser, parent: DomNode) => [ /* returnType */ boolean, /* element */ DomNode ]
    readChildNodesStream: (self: Parser, istream: Gio.InputStream) => void
    readChildNodesString: (self: Parser, str: string | null) => void
    readUnparsed: (self: Parser) => string | null
    moveNextNode: (self: Parser) => boolean
    currentIsEmptyElement: (self: Parser) => boolean
    currentIsElement: (self: Parser) => boolean
    currentIsDocument: (self: Parser) => boolean
    currentNodeName: (self: Parser) => string | null
    createElement: (self: Parser, parent: DomNode) => DomElement | null
    readElement: (self: Parser, element: DomElement) => void
    getBackup: (self: Parser) => boolean
    setBackup: (self: Parser, value: boolean) => void
    getIndent: (self: Parser) => boolean
    setIndent: (self: Parser, value: boolean) => void
    getCancellable: (self: Parser) => Gio.Cancellable | null
    setCancellable: (self: Parser, value: Gio.Cancellable | null) => void
    getNode: (self: Parser) => DomNode
    getTypes: (self: Parser) => GLib.HashTable
}

abstract class ParserIface {

    // Own properties of GXml-0.20.GXml.ParserIface

    static name: string
}

interface PropertyIface {

    // Own fields of GXml-0.20.GXml.PropertyIface

    validateValue: (self: Property, val: string | null) => boolean
    getValue: (self: Property) => string | null
    setValue: (self: Property, value: string | null) => void
}

abstract class PropertyIface {

    // Own properties of GXml-0.20.GXml.PropertyIface

    static name: string
}

interface XPathContextIface {

    // Own fields of GXml-0.20.GXml.XPathContextIface

    evaluate: (self: XPathContext, expression: string | null, resolver: Gee.Map | null) => XPathObject
}

abstract class XPathContextIface {

    // Own properties of GXml-0.20.GXml.XPathContextIface

    static name: string
}

interface XPathObjectIface {

    // Own fields of GXml-0.20.GXml.XPathObjectIface

    getObjectType: (self: XPathObject) => XPathObjectType
    getBooleanValue: (self: XPathObject) => boolean
    getStringValue: (self: XPathObject) => string | null
    getNumberValue: (self: XPathObject) => number
    getNodeset: (self: XPathObject) => DomHTMLCollection
}

abstract class XPathObjectIface {

    // Own properties of GXml-0.20.GXml.XPathObjectIface

    static name: string
}

}

export default GXml;