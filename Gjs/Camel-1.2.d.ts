/*
 * Type Definitions for Gjs (https://gjs.guide/)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * Camel-1.2
 */

import type * as Gjs from './Gjs';
import type libxml2 from './libxml2-2.0';
import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';

export namespace Camel {

/**
 * Authentication result codes used by #CamelService.
 */
enum AuthenticationResult {
    /**
     * An error occurred while authenticating.
     */
    ERROR,
    /**
     * Server accepted our authentication attempt.
     */
    ACCEPTED,
    /**
     * Server rejected our authentication attempt.
     */
    REJECTED,
}
enum CertTrust {
    UNKNOWN,
    NEVER,
    MARGINAL,
    FULLY,
    ULTIMATE,
    TEMPORARY,
}
enum CipherHash {
    DEFAULT,
    MD2,
    MD5,
    SHA1,
    SHA256,
    SHA384,
    SHA512,
    RIPEMD160,
    TIGER192,
    HAVAL5160,
}
enum CipherValidityEncrypt {
    NONE,
    WEAK,
    ENCRYPTED,
    STRONG,
}
enum CipherValidityMode {
    SIGN,
    ENCRYPT,
}
enum CipherValiditySign {
    NONE,
    GOOD,
    BAD,
    UNKNOWN,
    NEED_PUBLIC_KEY,
}
/**
 * Declares the compare type to use.
 */
enum CompareType {
    /**
     * compare case insensitively
     */
    INSENSITIVE,
    /**
     * compare case sensitively
     */
    SENSITIVE,
}
enum DBError {
    /**
     * database is corrupt
     */
    DB_ERROR_CORRUPT,
}
/**
 * An enum of all the known columns, which can be used for a quick column lookups.
 */
enum DBKnownColumnNames {
    /**
     * unknown column name
     */
    UNKNOWN,
    /**
     * attachment
     */
    ATTACHMENT,
    /**
     * bdata
     */
    BDATA,
    /**
     * cinfo
     */
    CINFO,
    /**
     * deleted
     */
    DELETED,
    /**
     * deleted_count
     */
    DELETED_COUNT,
    /**
     * dreceived
     */
    DRECEIVED,
    /**
     * dsent
     */
    DSENT,
    /**
     * flags
     */
    FLAGS,
    /**
     * folder_name
     */
    FOLDER_NAME,
    /**
     * followup_completed_on
     */
    FOLLOWUP_COMPLETED_ON,
    /**
     * followup_due_by
     */
    FOLLOWUP_DUE_BY,
    /**
     * followup_flag
     */
    FOLLOWUP_FLAG,
    /**
     * important
     */
    IMPORTANT,
    /**
     * jnd_count
     */
    JND_COUNT,
    /**
     * junk
     */
    JUNK,
    /**
     * junk_count
     */
    JUNK_COUNT,
    /**
     * labels
     */
    LABELS,
    /**
     * mail_cc
     */
    MAIL_CC,
    /**
     * mail_from
     */
    MAIL_FROM,
    /**
     * mail_to
     */
    MAIL_TO,
    /**
     * mlist
     */
    MLIST,
    /**
     * nextuid
     */
    NEXTUID,
    /**
     * part
     */
    PART,
    /**
     * preview
     */
    PREVIEW,
    /**
     * read
     */
    READ,
    /**
     * replied
     */
    REPLIED,
    /**
     * saved_count
     */
    SAVED_COUNT,
    /**
     * size
     */
    SIZE,
    /**
     * subject
     */
    SUBJECT,
    /**
     * time
     */
    TIME,
    /**
     * uid
     */
    UID,
    /**
     * unread_count
     */
    UNREAD_COUNT,
    /**
     * userheaders
     */
    USERHEADERS,
    /**
     * usertags
     */
    USERTAGS,
    /**
     * version
     */
    VERSION,
    /**
     * visible_count
     */
    VISIBLE_COUNT,
    /**
     * vuid
     */
    VUID,
}
enum Error {
    /**
     * a generic (fallback) error code
     */
    ERROR_GENERIC,
}
/**
 * Describes what headers to fetch when downloading message summaries.
 */
enum FetchHeadersType {
    /**
     * Fetch only basic headers (Date, From, To, Subject, etc.).
     */
    BASIC,
    /**
     * Fetch all basic headers and mailing list headers.
     */
    BASIC_AND_MAILING_LIST,
    /**
     * Fetch all available message headers.
     */
    ALL,
}
enum FetchType {
    /**
     * fetch old messages
     */
    OLD_MESSAGES,
    /**
     * fetch new messages
     */
    NEW_MESSAGES,
}
enum FolderError {
    /**
     * a generic error about invalid operation with the folder
     */
    INVALID,
    /**
     * the folder is in an invalid state
     */
    INVALID_STATE,
    /**
     * the folder is not empty
     */
    NON_EMPTY,
    /**
     * requested UID is not a UID
     */
    NON_UID,
    /**
     * insufficient permissions for the requested operation
     */
    INSUFFICIENT_PERMISSION,
    /**
     * the folder path is invalid
     */
    INVALID_PATH,
    /**
     * requested UID is invalid/cannot be found
     */
    INVALID_UID,
    /**
     * the folder's summary is invalid/broken
     */
    SUMMARY_INVALID,
}
enum HTMLParserState {
    DATA,
    ENT,
    ELEMENT,
    TAG,
    DTDENT,
    COMMENT0,
    COMMENT,
    ATTR0,
    ATTR,
    VAL0,
    VAL,
    VAL_ENT,
    EOD,
    EOF,
}
enum HeaderAddressType {
    NONE,
    NAME,
    GROUP,
}
/**
 * These are result codes used when passing messages through a junk filter.
 */
enum JunkStatus {
    /**
     * An error occurred while invoking the junk filter.
     */
    ERROR,
    /**
     * The junk filter could not determine whether the message is junk.
     */
    INCONCLUSIVE,
    /**
     * The junk filter believes the message is junk.
     */
    MESSAGE_IS_JUNK,
    /**
     * The junk filter believes the message is not junk.
     */
    MESSAGE_IS_NOT_JUNK,
}
enum LockType {
    READ,
    WRITE,
}
enum MemPoolFlags {
    /**
     * Allocate to native structure alignment
     */
    STRUCT,
    /**
     * Allocate to words - 16 bit alignment
     */
    WORD,
    /**
     * Allocate to bytes - 8 bit alignment
     */
    BYTE,
    /**
     * Which bits determine the alignment information
     */
    MASK,
}
enum MimeFilterBasicType {
    INVALID,
    BASE64_ENC,
    BASE64_DEC,
    QP_ENC,
    QP_DEC,
    UU_ENC,
    UU_DEC,
}
enum MimeFilterCRLFDirection {
    ENCODE,
    DECODE,
}
enum MimeFilterCRLFMode {
    DOTS,
    ONLY,
}
enum MimeFilterGZipMode {
    ZIP,
    UNZIP,
}
enum MimeFilterYencDirection {
    ENCODE,
    DECODE,
}
enum MimeParserState {
    INITIAL,
    PRE_FROM,
    FROM,
    HEADER,
    BODY,
    MULTIPART,
    MESSAGE,
    PART,
    END,
    EOF,
    PRE_FROM_END,
    FROM_END,
    HEADER_END,
    BODY_END,
    MULTIPART_END,
    MESSAGE_END,
}
/**
 * Methods for establishing an encrypted (or unencrypted) network connection.
 */
enum NetworkSecurityMethod {
    /**
     * Use an unencrypted network connection.
     */
    NONE,
    /**
     * Use SSL by connecting to an alternate port number.
     */
    SSL_ON_ALTERNATE_PORT,
    /**
     * Use SSL or TLS by connecting to the standard port and invoking
     *   STARTTLS before authenticating.  This is the recommended method.
     */
    STARTTLS_ON_STANDARD_PORT,
}
enum ProviderConfType {
    END,
    SECTION_START,
    SECTION_END,
    CHECKBOX,
    CHECKSPIN,
    ENTRY,
    LABEL,
    HIDDEN,
    OPTIONS,
    PLACEHOLDER,
}
enum ProviderType {
    STORE,
    TRANSPORT,
}
/**
 * Defines type of a #CamelSExpResult.
 */
enum SExpResultType {
    /**
     * type is a ptrarray, what it points to is implementation dependant
     */
    ARRAY_PTR,
    /**
     * type is a number
     */
    INT,
    /**
     * type is a pointer to a single string
     */
    STRING,
    /**
     * boolean type
     */
    BOOL,
    /**
     * time_t type
     */
    TIME,
    /**
     * unknown type
     */
    UNDEFINED,
}
/**
 * Defines type of a #CamelSExpTerm and partly also #CamelSExpSymbol
 */
enum SExpTermType {
    /**
     * integer literal
     */
    INT,
    /**
     * boolean literal
     */
    BOOL,
    /**
     * string literal
     */
    STRING,
    /**
     * time_t literal (number of seconds past the epoch)
     */
    TIME,
    /**
     * normal function, arguments are evaluated before calling
     */
    FUNC,
    /**
     * immediate function, raw terms are arguments
     */
    IFUNC,
    /**
     * variable reference
     */
    VAR,
}
enum SMIMESign {
    CLEARSIGN,
    ENVELOPED,
}
enum SaslAnonTraceType {
    EMAIL,
    OPAQUE,
    EMPTY,
}
/**
 * Connection status returned by camel_service_get_connection_status().
 */
enum ServiceConnectionStatus {
    /**
     * #CamelService is disconnected from a remote server.
     */
    DISCONNECTED,
    /**
     * #CamelService is connecting to a remote server.
     */
    CONNECTING,
    /**
     * #CamelService is connected to a remote server.
     */
    CONNECTED,
    /**
     * #CamelService is disconnecting from a remote server.
     */
    DISCONNECTING,
}
enum ServiceError {
    /**
     * a generic service error code
     */
    INVALID,
    /**
     * the URL for the service is invalid
     */
    URL_INVALID,
    /**
     * the service is unavailable
     */
    UNAVAILABLE,
    /**
     * failed to authenitcate
     */
    CANT_AUTHENTICATE,
    /**
     * the service is not connected
     */
    NOT_CONNECTED,
}
enum SessionAlertType {
    INFO,
    WARNING,
    ERROR,
}
/**
 * Determines the direction of a sort.
 */
enum SortType {
    /**
     * Sorting is in ascending order.
     */
    ASCENDING,
    /**
     * Sorting is in descending order.
     */
    DESCENDING,
}
enum StoreError {
    /**
     * an invalid store operation had been requested
     */
    INVALID,
    /**
     * requested operation cannot be performed with the given folder
     */
    NO_FOLDER,
}
enum StreamBufferMode {
    BUFFER,
    NONE,
    READ,
    WRITE,
    MODE,
}
/**
 * Describes a three-state value, which can be either Off, On or Inconsistent.
 */
enum ThreeState {
    /**
     * the three-state value is Off
     */
    OFF,
    /**
     * the three-state value is On
     */
    ON,
    /**
     * the three-state value is neither On, nor Off
     */
    INCONSISTENT,
}
/**
 * Declares time unit, which serves to interpret the time value,
 * like in #CamelOfflineSettings.
 */
enum TimeUnit {
    /**
     * days
     */
    DAYS,
    /**
     * weeks
     */
    WEEKS,
    /**
     * months
     */
    MONTHS,
    /**
     * years
     */
    YEARS,
}
enum TransferEncoding {
    ENCODING_DEFAULT,
    ENCODING_7BIT,
    ENCODING_8BIT,
    ENCODING_BASE64,
    ENCODING_QUOTEDPRINTABLE,
    ENCODING_BINARY,
    ENCODING_UUENCODE,
    NUM_ENCODINGS,
}
enum VTrashFolderType {
    TRASH,
    JUNK,
    LAST,
}
enum _search_match_t {
    EXACT,
    CONTAINS,
    WORD,
    STARTS,
    ENDS,
    SOUNDEX,
}
enum _search_t {
    ASIS,
    ENCODED,
    ADDRESS,
    ADDRESS_ENCODED,
    MLIST,
}
enum _search_word_t {
    SIMPLE,
    COMPLEX,
    TODO_8BIT,
}
enum BestencEncoding {
    TODO_7BIT,
    TODO_8BIT,
    BINARY,
    TEXT,
}
enum BestencRequired {
    GET_ENCODING,
    GET_CHARSET,
    LF_IS_CRLF,
    NO_FROM,
}
enum BlockFileFlags {
    BLOCK_FILE_SYNC,
}
enum BlockFlags {
    DIRTY,
    DETACHED,
}
enum FolderFlags {
    HAS_SUMMARY_CAPABILITY,
    FILTER_RECENT,
    HAS_BEEN_DELETED,
    IS_TRASH,
    IS_JUNK,
    FILTER_JUNK,
}
/**
 * These flags are abstractions.  It's up to the CamelProvider to give
 * them suitable interpretations.  Use #CAMEL_FOLDER_TYPE_MASK to isolate
 * the folder's type.
 */
enum FolderInfoFlags {
    /**
     * The folder cannot contain messages.
     */
    NOSELECT,
    /**
     * The folder cannot have child folders.
     */
    NOINFERIORS,
    /**
     * The folder has children (not yet fully implemented).
     */
    CHILDREN,
    /**
     * The folder does not have children (not yet fully implemented).
     */
    NOCHILDREN,
    /**
     * The folder is subscribed.
     */
    SUBSCRIBED,
    /**
     * The folder is virtual.  Messages cannot be copied or moved to
     *    virtual folders since they are only queries of other folders.
     */
    VIRTUAL,
    /**
     * The folder is a built-in "system" folder.  System folders
     *    cannot be renamed or deleted.
     */
    SYSTEM,
    /**
     * The folder is a virtual trash folder.  It cannot be copied to,
     *    and can only be moved to if in an existing folder.
     */
    VTRASH,
    /**
     * A folder being shared by someone else.
     */
    SHARED_TO_ME,
    /**
     * A folder being shared by the user.
     */
    SHARED_BY_ME,
    /**
     * The folder is a normal folder.
     */
    TYPE_NORMAL,
    /**
     * The folder is an inbox folder.
     */
    TYPE_INBOX,
    /**
     * The folder is an outbox folder.
     */
    TYPE_OUTBOX,
    /**
     * The folder shows deleted messages.
     */
    TYPE_TRASH,
    /**
     * The folder shows junk messages.
     */
    TYPE_JUNK,
    /**
     * The folder shows sent messages.
     */
    TYPE_SENT,
    /**
     * The folder contains contacts, instead of mail messages.
     */
    TYPE_CONTACTS,
    /**
     * The folder contains calendar events, instead of mail messages.
     */
    TYPE_EVENTS,
    /**
     * The folder contains memos, instead of mail messages.
     */
    TYPE_MEMOS,
    /**
     * The folder contains tasks, instead of mail messages.
     */
    TYPE_TASKS,
    /**
     * This folder contains all the messages. Used by RFC 6154.
     */
    TYPE_ALL,
    /**
     * This folder contains archived messages. Used by RFC 6154.
     */
    TYPE_ARCHIVE,
    /**
     * This folder contains drafts. Used by RFC 6154.
     */
    TYPE_DRAFTS,
    /**
     * The folder is read only.
     */
    READONLY,
    /**
     * The folder is write only.
     */
    WRITEONLY,
    /**
     * This folder contains flagged messages. Some clients call this "starred". Used by RFC 6154.
     */
    FLAGGED,
    /**
     * The last define bit of the flags. The #CamelProvider can use this and
     *    upper bits to store its own flags.
     */
    FLAGS_LAST,
}
enum FolderSummaryFlags {
    /**
     * There are changes in summary, which should be saved.
     */
    DIRTY,
    /**
     * Summary with this flag doesn't use DB for storing its content,
     *    it is always created on the fly.
     */
    IN_MEMORY_ONLY,
}
enum MessageFlags {
    ANSWERED,
    DELETED,
    DRAFT,
    FLAGGED,
    SEEN,
    ATTACHMENTS,
    ANSWERED_ALL,
    JUNK,
    SECURE,
    NOTJUNK,
    FORWARDED,
    FOLDER_FLAGGED,
    JUNK_LEARN,
    USER,
}
enum MimeFilterCanonFlags {
    CRLF,
    FROM,
    STRIP,
}
enum MimeFilterEnrichedFlags {
    NONE,
    IS_RICHTEXT,
}
/**
 * Flags for converting text/plain content into text/html.
 */
enum MimeFilterToHTMLFlags {
    /**
     * Enclose the content in &lt;pre&gt; ... &lt;/pre&gt; tags.
     *     Cannot be used together with %CAMEL_MIME_FILTER_TOHTML_DIV.
     */
    PRE,
    /**
     * Convert newline characters to &lt;br&gt; tags.
     */
    CONVERT_NL,
    /**
     * Convert space and tab characters to a non-breaking space (&amp;nbsp;).
     */
    CONVERT_SPACES,
    /**
     * Convert recognized URLs to &lt;a href="foo"&gt;foo&lt;/a&gt;.
     */
    CONVERT_URLS,
    /**
     * Color quoted lines (lines beginning with '&gt;').
     */
    MARK_CITATION,
    /**
     * Convert mailto: URLs to &lt;a href="mailto:foo"&gt;mailto:foo&lt;/a&gt;.
     */
    CONVERT_ADDRESSES,
    /**
     * Convert 8-bit characters to escaped hexdecimal (&amp;#nnn;).
     */
    ESCAPE_8BIT,
    /**
     * Prefix each line with "&gt; ".
     */
    CITE,
    /**
     * This flag is not used by #CamelMimeFilterToHTML.
     */
    PRESERVE_8BIT,
    /**
     * This flag is not used by #CamelMimeFilterToHTML.
     */
    FORMAT_FLOWED,
    /**
     * Group lines beginning with one or more '&gt;' characters in
     *     &lt;blockquote type="cite"&gt; ... &lt;/blockquote&gt; tags. The tags
     *     are nested according to the number of '&gt;' characters.
     */
    QUOTE_CITATION,
    /**
     * Enclose the paragraphs in &lt;div&gt; ... &lt;/div&gt; tags.
     *     Cannot be used together with %CAMEL_MIME_FILTER_TOHTML_PRE.
     */
    DIV,
    /**
     * Set in combination with %CAMEL_MIME_FILTER_TOHTML_CONVERT_SPACES,
     *     to keep tab characters. If not set, converts them into the spaces.
     */
    PRESERVE_TABS,
}
/**
 * These flags extend #GParamFlags.  Most of the time you will use them
 * in conjunction with g_object_class_install_property().
 */
enum ParamFlags {
    /**
     * The parameter is persistent, which means its value is saved to
     *     #CamelObject:state-filename during camel_object_state_write(),
     *     and restored during camel_object_state_read().
     */
    PARAM_PERSISTENT,
}
enum ProviderFlags {
    /**
     * Provider works with remote data.
     */
    IS_REMOTE,
    /**
     * Provider can be used as a backend for local folder tree folders.
     *   (Not just the opposite of #CAMEL_PROVIDER_IS_REMOTE.)
     */
    IS_LOCAL,
    /**
     * Provider appears in the folder tree but is not created by the
     *   mail component.
     */
    IS_EXTERNAL,
    /**
     * Mail arrives there, so it should be offered as an option in the
     *   mail config dialog.
     */
    IS_SOURCE,
    /**
     * Mail is stored there.  It will appear in the folder tree.
     */
    IS_STORAGE,
    /**
     * Provider supports SSL/TLS connections.
     */
    SUPPORTS_SSL,
    /**
     * Provider configuration first needs the license to be accepted.
     *   (No longer used.)
     */
    HAS_LICENSE,
    /**
     * Provider requests to not use the Sent folder when sending with it.
     */
    DISABLE_SENT_FOLDER,
    /**
     * Provider may use a real trash folder instead of a virtual folder.
     */
    ALLOW_REAL_TRASH_FOLDER,
    /**
     * Provider may use a real junk folder instead of a virtual folder.
     */
    ALLOW_REAL_JUNK_FOLDER,
    /**
     * Download limited set of emails instead of operating on full cache.
     */
    SUPPORTS_MOBILE_DEVICES,
    /**
     * Support to fetch messages in batch.
     */
    SUPPORTS_BATCH_FETCH,
    /**
     * Support to remove oldest downloaded messages to conserve space.
     */
    SUPPORTS_PURGE_MESSAGE_CACHE,
}
enum ProviderURLFlags {
    ALLOW_USER,
    ALLOW_AUTH,
    ALLOW_PASSWORD,
    ALLOW_HOST,
    ALLOW_PORT,
    ALLOW_PATH,
    NEED_USER,
    NEED_AUTH,
    NEED_PASSWORD,
    NEED_HOST,
    NEED_PORT,
    NEED_PATH,
    NEED_PATH_DIR,
    HIDDEN_USER,
    HIDDEN_AUTH,
    HIDDEN_PASSWORD,
    HIDDEN_HOST,
    HIDDEN_PORT,
    HIDDEN_PATH,
    FRAGMENT_IS_PATH,
    PATH_IS_ABSOLUTE,
}
/**
 * Flags used to camel_session_get_recipient_certificates_sync() call.
 */
enum RecipientCertificateFlags {
    /**
     * Retrieve S/MIME certificates; this cannot be used
     *    together with `CAMEL_RECIPIENT_CERTIFICATE_PGP`
     */
    SMIME,
    /**
     * Retrieve PGP keys; this cannot be used
     *    together with `CAMEL_RECIPIENT_CERTIFICATE_SMIME`.
     */
    PGP,
}
enum SMIMEDescribe {
    SIGNED,
    ENCRYPTED,
    CERTS,
    CRLS,
}
enum StoreFlags {
    VTRASH,
    VJUNK,
    PROXY,
    IS_MIGRATING,
    REAL_JUNK_FOLDER,
    CAN_EDIT_FOLDERS,
    USE_CACHE_DIR,
    CAN_DELETE_FOLDERS_AT_ONCE,
    SUPPORTS_INITIAL_SETUP,
}
/**
 * Open mode for folder.
 */
enum StoreGetFolderFlags {
    /**
     * no flags
     */
    NONE,
    /**
     * create the folder
     */
    CREATE,
    /**
     * deprecated, not honored
     */
    EXCL,
    /**
     * save the body index
     */
    BODY_INDEX,
    /**
     * a private folder that should not show up in
     *  unmatched, folder info's, etc.
     */
    PRIVATE,
}
enum StoreGetFolderInfoFlags {
    FAST,
    RECURSIVE,
    SUBSCRIBED,
    /**
     * Do not include virtual trash or junk folders.
     */
    NO_VIRTUAL,
    /**
     * Fetch only the subscription list. Clients should use this
     *   flag for requesting the list of folders available for
     *   subscription. Used in Exchange / IMAP connectors for public
     *   folder fetching.
     */
    SUBSCRIPTION_LIST,
    /**
     * Treat this call as a request to refresh the folder summary;
     *   for remote accounts it can be to re-fetch fresh folder
     *   content from the server and update the local cache.
     */
    REFRESH,
}
enum StoreInfoFlags {
    NOSELECT,
    NOINFERIORS,
    CHILDREN,
    NOCHILDREN,
    SUBSCRIBED,
    VIRTUAL,
    SYSTEM,
    VTRASH,
    SHARED_TO_ME,
    SHARED_BY_ME,
    TYPE_NORMAL,
    TYPE_INBOX,
    TYPE_OUTBOX,
    TYPE_TRASH,
    TYPE_JUNK,
    TYPE_SENT,
    TYPE_CONTACTS,
    TYPE_EVENTS,
    TYPE_MEMOS,
    TYPE_TASKS,
    TYPE_ALL,
    TYPE_ARCHIVE,
    TYPE_DRAFTS,
    READONLY,
    WRITEONLY,
    FLAGGED,
}
enum StorePermissionFlags {
    READ,
    WRITE,
}
enum URLFlags {
    PARAMS,
    AUTH,
}
enum UUDecodeState {
    INIT,
    BEGIN,
    END,
}
enum _search_flags_t {
    START,
    END,
    REGEX,
    ICASE,
    NEWLINE,
}
const AI_CANONNAME: number
const AI_NUMERICHOST: number
const BLOCK_SIZE: number
const BLOCK_SIZE_BITS: number
/**
 * Name of the photo-filename property which can be stored
 * on a #CamelCipherCertInfo.
 */
const CIPHER_CERT_INFO_PROPERTY_PHOTO_FILENAME: string
/**
 * A string containing a list of email addresses of all signers
 * including their alternative emails. Use camel_address_unformat()
 * to break them back into separate addresses. This can be set
 * only on the first signer of the first validity, even the addresses
 * can belong to a different signer.
 */
const CIPHER_CERT_INFO_PROPERTY_SIGNERS_ALT_EMAILS: string
const DB_FILE: string
const DB_FREE_CACHE_SIZE: number
const DB_IN_MEMORY_DB: string
const DB_IN_MEMORY_TABLE: string
const DB_IN_MEMORY_TABLE_LIMIT: number
const DB_SLEEP_INTERVAL: number
const DEBUG_IMAP: string
const DEBUG_IMAP_FOLDER: string
const DOT_LOCK_REFRESH: number
const EAI_ADDRFAMILY: number
const EAI_AGAIN: number
const EAI_BADFLAGS: number
const EAI_FAIL: number
const EAI_FAMILY: number
const EAI_MEMORY: number
const EAI_NODATA: number
const EAI_NONAME: number
const EAI_OVERFLOW: number
const EAI_SERVICE: number
const EAI_SOCKTYPE: number
const EAI_SYSTEM: number
/**
 * This environment variable configures where the camel
 * provider modules are loaded from.
 */
const EDS_CAMEL_PROVIDER_DIR: string
/**
 * The folder type bitshift value.
 */
const FOLDER_TYPE_BIT: number
/**
 * The folder type mask value.
 */
const FOLDER_TYPE_MASK: number
const FOLD_MAX_SIZE: number
const FOLD_SIZE: number
const INDEX_DELETED: number
const KEY_TABLE_MAX_KEY: number
const LOCK_DELAY: number
const LOCK_DOT_DELAY: number
const LOCK_DOT_RETRY: number
const LOCK_DOT_STALE: number
const LOCK_RETRY: number
const MESSAGE_DATE_CURRENT: number
const MESSAGE_SYSTEM_MASK: number
const MIME_YDECODE_STATE_BEGIN: number
const MIME_YDECODE_STATE_DECODE: number
const MIME_YDECODE_STATE_END: number
const MIME_YDECODE_STATE_EOLN: number
const MIME_YDECODE_STATE_ESCAPE: number
const MIME_YDECODE_STATE_INIT: number
const MIME_YDECODE_STATE_PART: number
const MIME_YENCODE_CRC_INIT: number
const MIME_YENCODE_STATE_INIT: number
const NI_DGRAM: number
const NI_NAMEREQD: number
const NI_NOFQDN: number
const NI_NUMERICHOST: number
const NI_NUMERICSERV: number
const O_BINARY: number
const RECIPIENT_TYPE_BCC: string
const RECIPIENT_TYPE_CC: string
const RECIPIENT_TYPE_RESENT_BCC: string
const RECIPIENT_TYPE_RESENT_CC: string
const RECIPIENT_TYPE_RESENT_TO: string
const RECIPIENT_TYPE_TO: string
/**
 * Can be used with camel_session_addressbook_contains_sync() as the book UID,
 * meaning to check in all configured address books.
 */
const SESSION_BOOK_UID_ANY: string
/**
 * Can be used with camel_session_addressbook_contains_sync() as the book UID,
 * meaning to check in all address books enabled for auto-completion.
 */
const SESSION_BOOK_UID_COMPLETION: string
/**
 * The folder store info type bitshift value.
 */
const STORE_INFO_FOLDER_TYPE_BIT: number
/**
 * The folder store info type mask value.
 */
const STORE_INFO_FOLDER_TYPE_MASK: number
const STORE_INFO_FOLDER_UNKNOWN: number
const STORE_SETUP_ARCHIVE_FOLDER: string
const STORE_SETUP_DRAFTS_FOLDER: string
const STORE_SETUP_SENT_FOLDER: string
const STORE_SETUP_TEMPLATES_FOLDER: string
const UNMATCHED_NAME: string
const URL_HIDE_ALL: number
const URL_PART_AUTH: number
const URL_PART_HIDDEN: number
const URL_PART_HOST: number
const URL_PART_NEED: number
const URL_PART_PASSWORD: number
const URL_PART_PATH: number
const URL_PART_PATH_DIR: number
const URL_PART_PORT: number
const URL_PART_USER: number
const UTILS_MAX_USER_HEADERS: number
const UUDECODE_STATE_MASK: number
const VJUNK_NAME: string
const VTRASH_NAME: string
function binding_bind_property(source: GObject.Object, source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
function binding_bind_property_full(source: GObject.Object, source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
function charset_best(in_: number[]): string | null
function charset_iso_to_windows(isocharset: string): string
function cipher_can_load_photos(): boolean
function cipher_canonical_to_stream(part: MimePart, flags: number, ostream: Stream, cancellable?: Gio.Cancellable | null): number
function cipher_certinfo_get_property(cert_info: CipherCertInfo, name: string): object | null
function cipher_certinfo_set_property(cert_info: CipherCertInfo, name: string, value?: object | null, value_clone?: CipherCloneFunc | null): void
function content_disposition_decode(in_: string): ContentDisposition
function content_transfer_encoding_decode(in_: string): string
function content_type_decode(in_: string): ContentType
function debug(mode: string): boolean
function debug_demangle_backtrace(bt?: GLib.String | null): /* bt */ GLib.String | null
function debug_end(): void
function debug_get_backtrace(): GLib.String | null
function debug_get_raw_backtrace(): GLib.String | null
function debug_init(): void
function debug_ref_unref_dump_backtraces(): void
function debug_ref_unref_push_backtrace(backtrace: GLib.String, object_ref_count: number): void
function debug_ref_unref_push_backtrace_for_object(_object?: object | null): void
function debug_start(mode: string): boolean
function enriched_to_html(in_: string, flags: MimeFilterEnrichedFlags): string
function error_quark(): GLib.Quark
function file_util_decode_fixed_int32(in_: object | null, dest: number): number
function file_util_decode_fixed_string(in_: object | null, str: string, len: number): number
function file_util_decode_gsize(in_: object | null, dest: number): number
function file_util_decode_off_t(in_: object | null, dest: number): number
function file_util_decode_string(in_: object | null, str: string): number
function file_util_decode_time_t(in_: object | null, dest: number): number
function file_util_decode_uint32(in_: object | null, dest: number): number
function file_util_encode_fixed_int32(out: object | null, value: number): number
function file_util_encode_fixed_string(out: object | null, str: string, len: number): number
function file_util_encode_gsize(out: object | null, value: number): number
function file_util_encode_off_t(out: object | null, value: number): number
function file_util_encode_string(out: object | null, str: string): number
function file_util_encode_time_t(out: object | null, value: number): number
function file_util_encode_uint32(out: object | null, value: number): number
function file_util_safe_filename(name: string): string
function file_util_savename(filename: string): string
function folder_error_quark(): GLib.Quark
function folder_info_build(folders: FolderInfo[], namespace_: string, separator: number, short_names: boolean): FolderInfo
function freeaddrinfo(host?: object | null): void
function getaddrinfo(name: string, service: string, hints?: object | null, cancellable?: Gio.Cancellable | null): object | null
function header_address_decode(in_: string, charset: string): HeaderAddress
function header_address_fold(in_: string, headerlen: number): string
function header_address_list_append(addrlistp: HeaderAddress[], addr: HeaderAddress): void
function header_address_list_append_list(addrlistp: HeaderAddress[], addrs: HeaderAddress[]): void
function header_address_list_clear(addrlistp: HeaderAddress[]): void
function header_address_list_encode(addrlist: HeaderAddress[]): string
function header_address_list_format(addrlist: HeaderAddress[]): string
function header_contentid_decode(in_: string): string
function header_decode_date(str: string, tz_offset: number): number
function header_decode_int(in_: string): number
function header_decode_string(in_: string, default_charset: string): string
function header_encode_phrase(in_: number): string
function header_encode_string(in_: number): string
function header_fold(in_: string, headerlen: number): string
function header_format_ctext(in_: string, default_charset: string): string
function header_format_date(date: number, tz_offset: number): string
function header_location_decode(in_: string): string
function header_mailbox_decode(in_: string, charset: string): HeaderAddress
function header_mime_decode(in_: string, maj: number, min: number): void
function header_msgid_decode(in_: string): string
function header_msgid_generate(domain?: string | null): string
function header_newsgroups_decode(in_: string): string[]
function header_param(params: object | null, name: string): string
function header_param_list_decode(in_?: string | null): object | null
function header_param_list_format(params?: object | null): string
function header_param_list_format_append(out: GLib.String, params?: object | null): void
function header_param_list_free(params?: object | null): void
function header_references_decode(in_: string): string[]
function header_set_param(paramsp: object | null, name: string, value: string): object | null
function header_token_decode(in_: string): string
function header_unfold(in_: string): string
function headers_dup_mailing_list(headers: NameValueArray): string | null
function host_idna_to_ascii(host?: string | null): string | null
function hostname_utils_requires_ascii(hostname: string): boolean
function iconv_charset_language(charset: string): string
function iconv_charset_name(charset: string): string
function iconv_locale_charset(): string
function iconv_locale_language(): string
function init(certdb_dir: string, nss_init: boolean): number
function localtime_with_offset(tt: number, tm: object | null, offset: number): void
function lock_dot(path: string): number
function lock_fcntl(fd: number, type: LockType): number
function lock_flock(fd: number, type: LockType): number
function lock_folder(path: string, fd: number, type: LockType): number
function lock_helper_lock(path: string): number
function lock_helper_unlock(lockid: number): number
function mktime_utc(tm?: object | null): number
function movemail(source: string, dest: string): number
function pointer_tracker_dump(): void
function pointer_tracker_track_with_info(ptr: object | null, info: string): void
function pointer_tracker_untrack(ptr?: object | null): void
function provider_get(protocol: string): Provider
function provider_init(): void
function provider_list(load: boolean): Provider[]
function provider_load(path: string): boolean
function provider_module_init(): void
function pstring_add(string: string | null, own: boolean): string | null
function pstring_contains(string?: string | null): boolean
function pstring_dump_stat(): void
function pstring_free(string?: string | null): void
function pstring_peek(string?: string | null): string | null
function pstring_strdup(string?: string | null): string | null
function quoted_decode_step(in_: Uint8Array, out: Uint8Array, saveme: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* saveme */ number[] ]
function quoted_encode_close(in_: Uint8Array, out: Uint8Array, save: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* save */ number[] ]
function quoted_encode_step(in_: Uint8Array, out: Uint8Array, save: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* save */ number[] ]
function read(fd: number, buf: string, n: number, cancellable?: Gio.Cancellable | null): number
function search_camel_header_soundex(header: string, match: string): boolean
function search_get_all_headers_decoded(message: MimeMessage): string
function search_get_default_charset_from_headers(headers: NameValueArray): string
function search_get_default_charset_from_message(message: MimeMessage): string
function search_get_header_decoded(header_name: string, header_value: string, default_charset?: string | null): string
function search_get_headers_decoded(headers: NameValueArray, default_charset?: string | null): string
function search_header_is_address(header_name: string): boolean
function search_header_match(value: string, match: string, how: _search_match_t, type: _search_t, default_charset: string): boolean
function search_words_free(words?: object | null): void
function search_words_simple(words?: object | null): object | null
function search_words_split(in_: number): object | null
function service_error_quark(): GLib.Quark
function shutdown(): void
function store_error_quark(): GLib.Quark
function store_info_name(summary: StoreSummary, info: StoreInfo): string
function store_info_path(summary: StoreSummary, info: StoreInfo): string
function store_info_set_string(summary: StoreSummary, info: StoreInfo, type: number, value: string): void
function strcase_equal(a?: object | null, b?: object | null): number
function strcase_hash(v?: object | null): number
function strdown(str: string): string
function string_is_all_ascii(str?: string | null): boolean
function strstrcase(haystack: string, needle: string): string
function system_flag(name: string): MessageFlags
function system_flag_get(flags: MessageFlags, name: string): boolean
function text_to_html(in_: string, flags: MimeFilterToHTMLFlags, color: number): string
function time_value_apply(src_time: number, unit: TimeUnit, value: number): number
function transfer_encoding_from_string(string: string): TransferEncoding
function transfer_encoding_to_string(encoding: TransferEncoding): string
function ucs2_utf8(ptr: string): string
function uid_cache_free_uids(uids: string[]): void
function unlock_dot(path: string): void
function unlock_fcntl(fd: number): void
function unlock_flock(fd: number): void
function unlock_folder(path: string, fd: number): void
function url_addrspec_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function url_addrspec_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function url_decode(part: string): void
function url_decode_path(path: string): string
function url_encode(part: string, escape_extra?: string | null): string
function url_file_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function url_file_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function url_web_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function url_web_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
function ustrstrcase(haystack: string, needle: string): string
function utf7_utf8(ptr: string): string
function utf8_getc(ptr: number): [ /* returnType */ number, /* ptr */ number ]
function utf8_getc_limit(ptr: number, end: number): [ /* returnType */ number, /* ptr */ number ]
function utf8_make_valid(text: string): string
function utf8_make_valid_len(text: string, text_len: number): string
function utf8_putc(ptr: number, c: number): /* ptr */ number
function utf8_ucs2(ptr: string): string
function utf8_utf7(ptr: string): string
function util_bdata_get_number(bdata_ptr: string, default_value: number): number
function util_bdata_get_string(bdata_ptr: string, default_value: string): string
function util_bdata_put_number(bdata_str: GLib.String, value: number): void
function util_bdata_put_string(bdata_str: GLib.String, value: string): void
function util_decode_user_header_setting(setting_value: string): [ /* out_display_name */ string | null, /* out_header_name */ string ]
function util_encode_user_header_setting(display_name: string | null, header_name: string): string
function util_fill_message_info_user_headers(info: MessageInfo, headers: NameValueArray): boolean
function util_get_directory_variants(main_path: string, replace_prefix: string, with_modules_dir: boolean): string[]
function utils_sanitize_ascii_domain_in_address(email_address: string | null, do_format: boolean): string | null
function utils_sanitize_ascii_domain_in_url(url: URL): boolean
function utils_sanitize_ascii_domain_in_url_str(url_str?: string | null): string | null
function uudecode_step(in_: Uint8Array, out: Uint8Array, save: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* save */ number[] ]
function uuencode_close(in_: Uint8Array, out: Uint8Array, uubuf: Uint8Array, save: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* uubuf */ Uint8Array, /* save */ number[] ]
function uuencode_step(in_: Uint8Array, out: Uint8Array, uubuf: Uint8Array, save: number[]): [ /* returnType */ number, /* out */ Uint8Array, /* uubuf */ Uint8Array, /* save */ number[] ]
function write(fd: number, buf: string, n: number, cancellable?: Gio.Cancellable | null): number
function ydecode_step(in_: Uint8Array): [ /* returnType */ number, /* out */ Uint8Array, /* state */ number, /* pcrc */ number, /* crc */ number ]
function yencode_close(in_: Uint8Array): [ /* returnType */ number, /* out */ Uint8Array, /* state */ number, /* pcrc */ number, /* crc */ number ]
function yencode_step(in_: Uint8Array): [ /* returnType */ number, /* out */ Uint8Array, /* state */ number, /* pcrc */ number, /* crc */ number ]
interface CipherCloneFunc {
    (value?: object | null): object | null
}
interface CopyFunc {
    (object?: object | null): object | null
}
/**
 * A collation callback function.
 */
interface DBCollate {
    (enc: object | null, length1: number, data1: object | null, length2: number, data2?: object | null): number
}
/**
 * A callback called for the SELECT statements. The items at the same index of `colvalues`
 * and `colnames` correspond to each other.
 */
interface DBSelectCB {
    (colvalues: string[], colnames: string[]): number
}
/**
 * A callback called for each found file in the cache, used
 * by camel_data_cache_foreach_remove(). The `filename` corresponds
 * to the result of camel_data_cache_get_filename().
 */
interface DataCacheRemoveFunc {
    (cdc: DataCache, filename: string): boolean
}
interface FilterPlaySoundFunc {
    (driver: FilterDriver, filename: string): void
}
interface FilterShellFunc {
    (driver: FilterDriver, argc: number, argv: string): void
}
interface FilterStatusFunc {
    (driver: FilterDriver, status: object | null, pc: number, desc: string): void
}
interface FilterSystemBeepFunc {
    (driver: FilterDriver): void
}
/**
 * A callback prototype for camel_vee_data_cache_foreach_message_info_data()
 */
interface ForeachInfoData {
    (mi_data: VeeMessageInfoData, subfolder: Folder): void
}
/**
 * Callback used to traverse parts of the `message` using camel_mime_message_foreach_part().
 */
interface ForeachPartFunc {
    (message: MimeMessage, part: MimePart, parent_part?: MimePart | null): boolean
}
interface IndexNorm {
    (index: Index, word: string): string
}
/**
 * This is the callback signature for camel_message_content_info_traverse().
 */
interface MessageContentInfoTraverseCallback {
    (ci: MessageContentInfo, depth: number): boolean
}
/**
 * Function used in camel_provider_auto_detect().
 */
interface ProviderAutoDetectFunc {
    (url: URL): number
}
/**
 * This is the callback signature for jobs submitted to the CamelSession
 * via camel_session_submit_job().  The `error` pointer is always non-%NULL,
 * so it's safe to dereference to check if a #GError has been set.
 */
interface SessionCallback {
    (session: Session, cancellable?: Gio.Cancellable | null): void
}
interface TextIndexFunc {
    (idx: TextIndex, word: string, buffer: string): void
}
interface UrlScanFunc {
    (in_: string, pos: string, inend: string, match: UrlMatch): boolean
}
class JunkFilter {
    /* Methods of Camel-1.2.Camel.JunkFilter */
    /**
     * Classifies `message` as junk, not junk or inconclusive.
     * 
     * If an error occurs, the function sets `error` and returns
     * %CAMEL_JUNK_STATUS_ERROR.
     */
    classify(message: MimeMessage, cancellable?: Gio.Cancellable | null): JunkStatus
    /**
     * Instructs `junk_filter` to classify `message` as junk.  If using an
     * adaptive junk filtering algorithm, explicitly marking `message` as
     * junk will influence the classification of future messages.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    learn_junk(message: MimeMessage, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Instructs `junk_filter` to classify `message` as not junk.  If using an
     * adaptive junk filtering algorithm, explicitly marking `message` as not
     * junk will influence the classification of future messages.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    learn_not_junk(message: MimeMessage, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Instructs `junk_filter` to flush any in-memory caches to disk, if
     * applicable.  When filtering many messages, delaying this step until
     * all messages have been classified can improve performance.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    synchronize(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.JunkFilter */
    /**
     * Classifies `message` as junk, not junk or inconclusive.
     * 
     * If an error occurs, the function sets `error` and returns
     * %CAMEL_JUNK_STATUS_ERROR.
     */
    vfunc_classify(message: MimeMessage, cancellable?: Gio.Cancellable | null): JunkStatus
    /**
     * Instructs `junk_filter` to classify `message` as junk.  If using an
     * adaptive junk filtering algorithm, explicitly marking `message` as
     * junk will influence the classification of future messages.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    vfunc_learn_junk(message: MimeMessage, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Instructs `junk_filter` to classify `message` as not junk.  If using an
     * adaptive junk filtering algorithm, explicitly marking `message` as not
     * junk will influence the classification of future messages.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    vfunc_learn_not_junk(message: MimeMessage, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Instructs `junk_filter` to flush any in-memory caches to disk, if
     * applicable.  When filtering many messages, delaying this step until
     * all messages have been classified can improve performance.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    vfunc_synchronize(cancellable?: Gio.Cancellable | null): boolean
    static name: string
}
interface NetworkService_ConstructProps extends Service_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.NetworkService */
    connectable?: Gio.SocketConnectable
}
class NetworkService {
    /* Properties of Camel-1.2.Camel.NetworkService */
    connectable: Gio.SocketConnectable
    readonly host_reachable: boolean
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Service */
    readonly parent: Object
    readonly priv: ServicePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.NetworkService */
    /**
     * Asynchronously attempts to determine whether or not the host described by
     * `service'`s #CamelNetworkService:connectable property can be reached, without
     * actually trying to connect to it.
     * 
     * For more details, see camel_network_service_can_reach_sync().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_network_service_can_reach_finish() to get the result of the
     * operation.
     */
    can_reach(cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_network_service_can_reach().
     */
    can_reach_finish(result: Gio.AsyncResult): boolean
    /**
     * Attempts to determine whether or not the host described by `service'`s
     * #CamelNetworkService:connectable property can be reached, without actually
     * trying to connect to it.
     * 
     * If `service` believes an attempt to connect will succeed, the function
     * returns %TRUE.  Otherwise the function returns %FALSE and sets `error`
     * to an appropriate error (such as %G_IO_ERROR_HOST_UNREACHABLE).
     * 
     * The function will also update the `service'`s
     * #CamelNetworkService:host-reachable property based on the result.
     */
    can_reach_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Attempts to establish a network connection to the server described by
     * `service,` using the preferred #CamelNetworkSettings:security-method to
     * secure the connection.  If a connection cannot be established, or the
     * connection attempt is cancelled, the function sets `error` and returns
     * %NULL.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): Gio.IOStream
    /**
     * Returns the default network port number for `service` and the security
     * method `method,` as defined in /etc/services.  For example, the default
     * port for unencrypted IMAP or encrypted IMAP using STARTTLS is 143, but
     * the default port for IMAP over SSL is 993.
     */
    get_default_port(method: NetworkSecurityMethod): number
    /**
     * Returns %TRUE if `service` believes that the host pointed to by
     * #CamelNetworkService:connectable can be reached.  This property
     * is updated automatically as network conditions change.
     */
    get_host_reachable(): boolean
    /**
     * Returns the standard network service name for `service` and the security
     * method `method,` as defined in /etc/services.  For example, the service
     * name for unencrypted IMAP or encrypted IMAP using STARTTLS is "imap",
     * but the service name for IMAP over SSL is "imaps".
     */
    get_service_name(method: NetworkSecurityMethod): string | null
    /**
     * Returns the socket endpoint for the network service to which `service`
     * is a client.
     * 
     * The returned #GSocketConnectable is referenced for thread-safety and
     * must be unreferenced with g_object_unref() when finished with it.
     */
    ref_connectable(): Gio.SocketConnectable
    /**
     * Sets the socket endpoint for the network service to which `service` is
     * a client.  If `connectable` is %NULL, a #GSocketConnectable is derived
     * from the `service'`s #CamelNetworkSettings.
     */
    set_connectable(connectable?: Gio.SocketConnectable | null): void
    /**
     * Creates a #GTlsClientConnection wrapping `base_stream,` which is
     * assumed to communicate with the server identified by `service'`s
     * #CamelNetworkService:connectable.
     * 
     * This should typically be called after issuing a STARTTLS command
     * to a server to initiate a Transport Layer Security handshake.
     */
    starttls(base_stream: Gio.IOStream): Gio.IOStream | null
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.NetworkService */
    /**
     * Attempts to establish a network connection to the server described by
     * `service,` using the preferred #CamelNetworkSettings:security-method to
     * secure the connection.  If a connection cannot be established, or the
     * connection attempt is cancelled, the function sets `error` and returns
     * %NULL.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): Gio.IOStream
    /* Function overloads */
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Returns the default network port number for `service` and the security
     * method `method,` as defined in /etc/services.  For example, the default
     * port for unencrypted IMAP or encrypted IMAP using STARTTLS is 143, but
     * the default port for IMAP over SSL is 993.
     */
    vfunc_get_default_port(method: NetworkSecurityMethod): number
    /**
     * Returns the standard network service name for `service` and the security
     * method `method,` as defined in /etc/services.  For example, the service
     * name for unencrypted IMAP or encrypted IMAP using STARTTLS is "imap",
     * but the service name for IMAP over SSL is "imaps".
     */
    vfunc_get_service_name(method: NetworkSecurityMethod): string | null
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connectable", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connectable", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::host-reachable", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host-reachable", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-status", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: NetworkService, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NetworkService_ConstructProps)
    _init (config?: NetworkService_ConstructProps): void
    static $gtype: GObject.Type
}
interface NetworkSettings_ConstructProps extends Settings_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.NetworkSettings */
    auth_mechanism?: string
    host?: string
    port?: number
    security_method?: NetworkSecurityMethod
    user?: string
}
class NetworkSettings {
    /* Properties of Camel-1.2.Camel.NetworkSettings */
    auth_mechanism: string
    host: string
    port: number
    security_method: NetworkSecurityMethod
    user: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.NetworkSettings */
    /**
     * Thread-safe variation of camel_network_settings_get_auth_mechanism().
     * Use this function when accessing `settings` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_auth_mechanism(): string | null
    /**
     * Thread-safe variation of camel_network_settings_get_host().
     * Use this function when accessing `settings` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_host(): string
    /**
     * Just like camel_network_settings_dup_host(), only makes sure that
     * the returned host name will be converted into its ASCII form in case
     * of IDNA value.
     */
    dup_host_ensure_ascii(): string
    /**
     * Thread-safe variation of camel_network_settings_get_user().
     * Use this function when accessing `settings` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_user(): string
    /**
     * Returns the mechanism name used to authenticate to a network service.
     * Often this refers to a SASL mechanism such as "LOGIN" or "GSSAPI".
     */
    get_auth_mechanism(): string | null
    /**
     * Returns the host name used to authenticate to a network service.
     */
    get_host(): string
    /**
     * Returns the port number used to authenticate to a network service.
     */
    get_port(): number
    /**
     * Returns the method used to establish a secure (or unsecure) network
     * connection.
     */
    get_security_method(): NetworkSecurityMethod
    /**
     * Returns the user name used to authenticate to a network service.
     */
    get_user(): string
    /**
     * Sets the mechanism name used to authenticate to a network service.
     * Often this refers to a SASL mechanism such as "LOGIN" or "GSSAPI".
     * The #CamelNetworkSettings:auth-mechanism property is automatically
     * stripped of leading and trailing whitespace.
     */
    set_auth_mechanism(auth_mechanism?: string | null): void
    /**
     * Sets the host name used to authenticate to a network service.  The
     * #CamelNetworkSettings:host property is automatically stripped of
     * leading and trailing whitespace.
     */
    set_host(host?: string | null): void
    /**
     * Sets the port number used to authenticate to a network service.
     */
    set_port(port: number): void
    /**
     * Sets the method used to establish a secure (or unsecure) network
     * connection.  Note that changing this setting has no effect on an
     * already-established network connection.
     */
    set_security_method(method: NetworkSecurityMethod): void
    /**
     * Sets the user name used to authenticate to a network service.  The
     * #CamelNetworkSettings:user property is automatically stripped of
     * leading and trailing whitespace.
     */
    set_user(user?: string | null): void
    /* Methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    equal(settings_b: Settings): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    vfunc_clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    vfunc_equal(settings_b: Settings): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auth-mechanism", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auth-mechanism", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::host", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::host", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::port", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::port", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::security-method", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::security-method", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user", callback: (($obj: NetworkSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NetworkSettings_ConstructProps)
    _init (config?: NetworkSettings_ConstructProps): void
    static $gtype: GObject.Type
}
interface Subscribable_ConstructProps extends Store_ConstructProps {
}
class Subscribable {
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Store */
    readonly parent: Service
    readonly priv: StorePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Subscribable */
    /**
     * Find out if a folder has been subscribed to.
     */
    folder_is_subscribed(folder_name: string): boolean
    /**
     * Emits the #CamelSubscribable::folder-subscribed signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_subscribed(folder_info: FolderInfo): void
    /**
     * Emits the #CamelSubscribable::folder-unsubscribed signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_unsubscribed(folder_info: FolderInfo): void
    /**
     * Asynchronously subscribes to the folder described by `folder_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_subscribable_subscribe_folder_finish() to get the result of
     * the operation.
     */
    subscribe_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_subscribable_subscribe_folder().
     */
    subscribe_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Subscribes to the folder described by `folder_name`.
     */
    subscribe_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously unsubscribes from the folder described by `folder_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_subscribable_unsubscribe_folder_finish() to get the result of
     * the operation.
     */
    unsubscribe_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_subscribable_unsubscribe_folder().
     */
    unsubscribe_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Unsubscribes from the folder described by `folder_name`.
     */
    unsubscribe_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    can_refresh_folder(info: FolderInfo): boolean
    /**
     * Asynchronously creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_create_folder_finish() to get the result of the operation.
     */
    create_folder(parent_name: string | null, folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_create_folder().
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes local data for the given `folder_name`. The folder should
     * be part of the opened folders.
     * 
     * It doesn't delete the folder in the store (server) as such.
     * Use camel_store_delete_folder(), or its synchronous variant,
     * if you want to do that instead.
     */
    delete_cached_folder(folder_name: string): void
    /**
     * Asynchronously deletes the folder described by `folder_name`.  The
     * folder must be empty.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_delete_folder_finish() to get the result of the operation.
     */
    delete_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_delete_folder().
     */
    delete_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Returns a #GPtrArray of all the opened folders for the `store`. The caller owns
     * both the array and the folder references, so to free the array use:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    dup_opened_folders(): Folder[]
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    get_can_auto_save_changes(): boolean
    get_db(): DB
    get_flags(): number
    /**
     * Asynchronously gets a specific folder object from `store` by name.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_get_folder_finish() to get the result of the operation.
     */
    get_folder(folder_name: string, flags: StoreGetFolderFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder().
     */
    get_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Asynchronously fetches information about the folder structure of `store,`
     * starting with `top`.  For details of the behavior, see
     * camel_store_get_folder_info_sync().
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_folder_info_finish() to get the result of
     * the operation.
     */
    get_folder_info(top: string | null, flags: StoreGetFolderInfoFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder_info().
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     */
    get_folder_info_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    get_folders_bag(): ObjectBag
    /**
     * Asynchronously gets the folder in `store` into which new mail is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_inbox_folder_finish() to get the result of
     * the operation.
     */
    get_inbox_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_inbox_folder().
     */
    get_inbox_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Asynchronously gets the folder in `store` into which junk is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_junk_folder_finish() to get the result of
     * the operation.
     */
    get_junk_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_junk_folder().
     */
    get_junk_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    get_permissions(): number
    /**
     * Asynchronously gets the folder in `store` into which trash is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_trash_folder_finish() to get the result of
     * the operation.
     */
    get_trash_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_trash_folder().
     */
    get_trash_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store` asynchronously.
     * 
     * When the operation is finished, `callback` will be called. You can then
     * call camel_store_initial_setup_finish() to get the result of the operation.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_initial_setup().
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     */
    initial_setup_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Checks the state of the current CamelDB used for the `store` and eventually
     * runs maintenance routines on it.
     */
    maybe_run_db_maintenance(): boolean
    /**
     * Asynchronously renames the folder described by `old_name` to `new_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_rename_folder_finish() to get the result of the operation.
     */
    rename_folder(old_name: string, new_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_rename_folder().
     */
    rename_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets flags for the `store,` a bit-or of #CamelStoreFlags.
     */
    set_flags(flags: number): void
    /**
     * Sets permissions for the `store,` a bit-or of #CamelStorePermissionFlags
     */
    set_permissions(permissions: number): void
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store asynchronously.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Subscribable */
    /**
     * Find out if a folder has been subscribed to.
     */
    vfunc_folder_is_subscribed(folder_name: string): boolean
    /**
     * Emits the #CamelSubscribable::folder-subscribed signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_subscribed(folder_info: FolderInfo): void
    /**
     * Emits the #CamelSubscribable::folder-unsubscribed signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_unsubscribed(folder_info: FolderInfo): void
    /**
     * Subscribes to the folder described by `folder_name`.
     */
    vfunc_subscribe_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Unsubscribes from the folder described by `folder_name`.
     */
    vfunc_unsubscribe_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    vfunc_can_refresh_folder(info: FolderInfo): boolean
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    vfunc_create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    vfunc_delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    vfunc_get_can_auto_save_changes(): boolean
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    vfunc_get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    vfunc_get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    vfunc_get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    vfunc_get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    vfunc_get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    vfunc_initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    vfunc_rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Subscribable */
    connect(sigName: "folder-subscribed", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-subscribed", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    emit(sigName: "folder-subscribed", object: FolderInfo): void
    connect(sigName: "folder-unsubscribed", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-unsubscribed", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    emit(sigName: "folder-unsubscribed", object: FolderInfo): void
    /* Signals of Camel-1.2.Camel.Store */
    connect(sigName: "folder-created", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-created", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    emit(sigName: "folder-created", object: FolderInfo): void
    connect(sigName: "folder-deleted", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-deleted", callback: (($obj: Subscribable, object: FolderInfo) => void)): number
    emit(sigName: "folder-deleted", object: FolderInfo): void
    /**
     * This signal indicates significant changes have occurred to
     * the folder hierarchy of `store,` and that previously fetched
     * #CamelFolderInfo data should be considered stale.
     * 
     * Applications should handle this signal by replacing cached
     * #CamelFolderInfo data for `store` with fresh data by way of
     * camel_store_get_folder_info().
     * 
     * More often than not this signal will be emitted as a result of
     * user preference changes rather than actual server-side changes.
     * For example, a user may change a preference that reveals a set
     * of folders previously hidden from view, or that alters whether
     * to augment the `store` with virtual Junk and Trash folders.
     */
    connect(sigName: "folder-info-stale", callback: (($obj: Subscribable) => void)): number
    connect_after(sigName: "folder-info-stale", callback: (($obj: Subscribable) => void)): number
    emit(sigName: "folder-info-stale"): void
    connect(sigName: "folder-opened", callback: (($obj: Subscribable, object: Folder) => void)): number
    connect_after(sigName: "folder-opened", callback: (($obj: Subscribable, object: Folder) => void)): number
    emit(sigName: "folder-opened", object: Folder): void
    connect(sigName: "folder-renamed", callback: (($obj: Subscribable, object: string, p0: FolderInfo) => void)): number
    connect_after(sigName: "folder-renamed", callback: (($obj: Subscribable, object: string, p0: FolderInfo) => void)): number
    emit(sigName: "folder-renamed", object: string, p0: FolderInfo): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connection-status", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Subscribable, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Subscribable_ConstructProps)
    _init (config?: Subscribable_ConstructProps): void
    static $gtype: GObject.Type
}
interface Address_ConstructProps extends GObject.Object_ConstructProps {
}
class Address {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    cat(source: Address): number
    /**
     * Copy the contents of one address into another.
     */
    copy(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    length(): number
    /**
     * Clone an existing address type.
     */
    new_clone(): Address
    /**
     * Remove an address by index, or all addresses.
     */
    remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    unformat(raw: string): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    vfunc_cat(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    vfunc_decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    vfunc_encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    vfunc_format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    vfunc_length(): number
    /**
     * Remove an address by index, or all addresses.
     */
    vfunc_remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    vfunc_unformat(raw: string): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Address, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Address, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Address_ConstructProps)
    _init (config?: Address_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Address
    static $gtype: GObject.Type
}
interface BlockFile_ConstructProps extends GObject.Object_ConstructProps {
}
class BlockFile {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.BlockFile */
    /**
     * Reattach a block that has been detached.
     */
    attach_block(bl: Block): void
    /**
     * Deletes existing block file.
     */
    delete(): number
    /**
     * Detatch a block from the block file's cache.  The block should
     * be unref'd or attached when finished with.  The block file will
     * perform no writes of this block or flushing of it if the cache
     * fills.
     */
    detach_block(bl: Block): void
    free_block(id: _block_t): number
    get_cache_limit(): number
    get_root(): BlockRoot
    get_root_block(): Block
    /**
     * Renames existing block file to a new `path`.
     */
    rename(path: string): number
    /**
     * Sets a new block cache limit for `bs`.
     */
    set_cache_limit(block_cache_limit: number): void
    /**
     * Sync all dirty blocks to disk, including the root block.
     */
    sync(): number
    /**
     * Flush a block to disk immediately.  The block will only
     * be flushed to disk if it is marked as dirty (touched).
     */
    sync_block(bl: Block): number
    /**
     * Mark a block as dirty.  The block will be written to disk if
     * it ever expires from the cache.
     */
    touch_block(bl: Block): void
    /**
     * Mark a block as unused.  If a block is used it will not be
     * written to disk, or flushed from memory.
     * 
     * If a block is detatched and this is the last reference, the
     * block will be freed.
     */
    unref_block(bl: Block): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.BlockFile */
    vfunc_init_root(): number
    vfunc_validate_root(): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: BlockFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: BlockFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: BlockFile_ConstructProps)
    _init (config?: BlockFile_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(path: string, flags: number, version: string, block_size: number): BlockFile
    static $gtype: GObject.Type
}
interface CertDB_ConstructProps extends GObject.Object_ConstructProps {
}
class CertDB {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.CertDB */
    clear(): void
    get_host(hostname: string, fingerprint: string): Cert | null
    /**
     * Gathers a list of known certificates. Each certificate in the returned #GSList
     * is referenced, thus unref it with camel_cert_unref() when done with it, the same
     * as free the list itself.
     */
    list_certs(): Cert[]
    load(): number
    /**
     * Puts a certificate to the database. In case there exists a certificate
     * with the same hostname and fingerprint, then it is replaced. This adds
     * its own reference on the `cert`.
     */
    put(cert: Cert): void
    /**
     * Removes a certificate identified by the `hostname` and `fingerprint`.
     */
    remove_host(hostname: string, fingerprint: string): void
    save(): number
    set_default(): void
    set_filename(filename: string): void
    touch(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.CertDB */
    vfunc_cert_load(istream?: object | null): Cert
    vfunc_cert_save(cert: Cert, ostream?: object | null): number
    vfunc_header_load(istream?: object | null): number
    vfunc_header_save(ostream?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: CertDB, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CertDB, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CertDB_ConstructProps)
    _init (config?: CertDB_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): CertDB
    /**
     * FIXME Document me!
     */
    static get_default(): CertDB
    static $gtype: GObject.Type
}
interface CipherContext_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.CipherContext */
    session?: Session
}
class CipherContext {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.CipherContext */
    /**
     * Asynchronously decrypts `ipart` into `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_decrypt_finish() to get the result of
     * the operation.
     */
    decrypt(ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_decrypt().
     */
    decrypt_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Decrypts `ipart` into `opart`.
     */
    decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Asynchronously encrypts (and optionally signs) the clear-text `ipart` and
     * writes the resulting cipher-text to `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_encrypt_finish() to get the result of
     * the operation.
     */
    encrypt(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_encrypt().
     */
    encrypt_finish(result: Gio.AsyncResult): boolean
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    get_session(): Session
    hash_to_id(hash: CipherHash): string
    id_to_hash(id: string): CipherHash
    /**
     * Asynchronously converts the (unsigned) part `ipart` into a new
     * self-contained MIME part `opart`.  This may be a multipart/signed part,
     * or a simple part for enveloped types.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_cipher_context_sign_finish() to get the result of the operation.
     */
    sign(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_sign().
     */
    sign_finish(result: Gio.AsyncResult): boolean
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously verifies the signature.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_verify_finish() to get the result of
     * the operation.
     */
    verify(ipart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_verify().
     */
    verify_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Verifies the signature.
     */
    verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.CipherContext */
    /**
     * Decrypts `ipart` into `opart`.
     */
    vfunc_decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    vfunc_encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    vfunc_hash_to_id(hash: CipherHash): string
    vfunc_id_to_hash(id: string): CipherHash
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    vfunc_sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Verifies the signature.
     */
    vfunc_verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: CipherContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: CipherContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: CipherContext_ConstructProps)
    _init (config?: CipherContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(session: Session): CipherContext
    static $gtype: GObject.Type
}
interface DB_ConstructProps extends GObject.Object_ConstructProps {
}
class DB {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.DB */
    /**
     * Ends an ongoing transaction by ignoring the changes.
     */
    abort_transaction(): number
    /**
     * Adds a statement to an ongoing transaction.
     */
    add_to_transaction(query: string): number
    /**
     * Begins transaction. End it with camel_db_end_transaction() or camel_db_abort_transaction().
     */
    begin_transaction(): number
    /**
     * Deletes the given folder from the 'folders' table and empties
     * its message info table.
     */
    clear_folder_summary(folder_name: string): number
    /**
     * Executes an SQLite command.
     */
    command(stmt: string): number
    /**
     * Counts how many deleted messages is stored in the given table.
     */
    count_deleted_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Counts how many junk messages is stored in the given table.
     */
    count_junk_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    count_junk_not_deleted_message_info(table_name: string, count: number): number
    /**
     * Executes a COUNT() query (like "SELECT COUNT(*) FROM table") and provides
     * the result of it as an unsigned 32-bit integer.
     */
    count_message_info(query: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Counts how many messages is stored in the given table.
     */
    count_total_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Counts how many unread messages is stored in the given table.
     */
    count_unread_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Counts how many visible (not deleted and not junk) messages is stored in the given table.
     */
    count_visible_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Counts how many visible (not deleted and not junk) and unread messages is stored in the given table.
     */
    count_visible_unread_message_info(table_name: string): [ /* returnType */ number, /* count */ number ]
    /**
     * Creates a 'folders' table, if it doesn't exist yet.
     */
    create_folders_table(): number
    /**
     * Deletes the given folder from the 'folders' table and also drops
     * its message info table.
     */
    delete_folder(folder_name: string): number
    /**
     * Deletes single mesage info in the given folder with
     * the given UID.
     */
    delete_uid(folder_name: string, uid: string): number
    /**
     * Deletes a list of message UIDs as one transaction.
     */
    delete_uids(folder_name: string, uids: string[]): number
    /**
     * Ends an ongoing transaction by committing the changes.
     */
    end_transaction(): number
    /**
     * A pair function for camel_db_start_in_memory_transactions(),
     * to commit the changes to `folder_name` and free the in-memory table.
     */
    flush_in_memory_transactions(folder_name: string): number
    get_filename(): string
    get_folder_deleted_uids(folder_name: string): string[] | null
    get_folder_junk_uids(folder_name: string): string[] | null
    /**
     * Fills hash with uid->GUINT_TO_POINTER (flag). Use camel_pstring_free()
     * to free the keys of the `hash`.
     */
    get_folder_uids(folder_name: string, sort_by: string | null, collate: string | null, hash: GLib.HashTable): number
    /**
     * Runs a `cdb` maintenance, which includes vacuum, if necessary.
     */
    maybe_run_maintenance(): boolean
    /**
     * Prepares message info table for the given folder.
     */
    prepare_message_info_table(folder_name: string): number
    /**
     * reads folder information for the given folder and stores it into the `record`.
     */
    read_folder_info_record(folder_name: string): [ /* returnType */ number, /* record */ FIRecord ]
    /**
     * Selects single message info for the given `uid` in folder `folder_name` and calls
     * the `callback` for it.
     */
    read_message_info_record_with_uid(folder_name: string, uid: string, callback: DBSelectCB): number
    /**
     * Reads all mesasge info records for the given folder and calls `callback` for them.
     */
    read_message_info_records(folder_name: string, callback: DBSelectCB): number
    /**
     * Renames tables for the `old_folder_name` to be used with `new_folder_name`.
     */
    rename_folder(old_folder_name: string, new_folder_name: string): number
    /**
     * Sets a version number for the given folder.
     */
    reset_folder_version(folder_name: string, reset_version: number): number
    /**
     * Executes a SELECT staement and calls the `callback` for each selected row.
     */
    select(stmt: string, callback: DBSelectCB): number
    /**
     * Defines a collation `collate,` which can be used in SQL (SQLite)
     * statement as a collation function. The `func` is called when
     * colation is used.
     */
    set_collate(col: string, collate: string, func: DBCollate): number
    /**
     * Creates an in-memory table for a batch transactions. Use camel_db_flush_in_memory_transactions()
     * to commit the changes and free the in-memory table.
     */
    start_in_memory_transactions(): number
    /**
     * Runs the list of commands as a single transaction.
     */
    transaction_command(qry_list: string[]): number
    /**
     * Write the `record` to the 'folders' table.
     */
    write_folder_info_record(record: FIRecord): number
    /**
     * Write the `record` to the message info table of the given folder.
     */
    write_message_info_record(folder_name: string, record: MIRecord): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: DB, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DB, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DB_ConstructProps)
    _init (config?: DB_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(filename: string): DB
    /**
     * Frees the `record` and all of its associated data.
     */
    static camel_mir_free(record?: MIRecord | null): void
    static error_quark(): GLib.Quark
    /**
     * Frees a string previosuly returned by camel_db_sqlize_string().
     */
    static free_sqlized_string(string?: string | null): void
    /**
     * Traverses column name from index `index` into an enum
     * #CamelDBKnownColumnNames value.  The `col_names` contains `ncols` columns.
     * First time this is called is created the `hash` from col_names indexes into
     * the enum, and this is reused for every other call.  The function expects
     * that column names are returned always in the same order.  When all rows
     * are read the `hash` table can be freed with g_hash_table_destroy().
     */
    static get_column_ident(hash: GLib.HashTable, index: number, col_names: string[]): [ /* returnType */ DBKnownColumnNames, /* hash */ GLib.HashTable ]
    static get_column_name(raw_name: string): string | null
    /**
     * Instructs sqlite to release its memory, if possible. This can be avoided
     * when CAMEL_SQLITE_FREE_CACHE environment variable is set.
     */
    static release_cache_memory(): void
    /**
     * Converts the `string` to be usable in the SQLite statements.
     */
    static sqlize_string(string: string): string
    static $gtype: GObject.Type
}
interface DataCache_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.DataCache */
    expire_enabled?: boolean
    path?: string
}
class DataCache {
    /* Properties of Camel-1.2.Camel.DataCache */
    expire_enabled: boolean
    path: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.DataCache */
    /**
     * Add a new item to the cache, returning a #GIOStream to the new item.
     * 
     * The key and the path combine to form a unique key used to store the item.
     * 
     * Potentially, expiry processing will be performed while this call is
     * executing.
     * 
     * The returned #GIOStream is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     */
    add(path: string, key: string): Gio.IOStream
    /**
     * Clear cache's content in `path`.
     */
    clear(path: string): void
    /**
     * Traverses the `cdc` sub-cache identified by `path` and calls `func` for each found file.
     * If the `func` returns %TRUE, then the file is removed, if %FALSE, it's kept in the cache.
     */
    foreach_remove(path: string, func: DataCacheRemoveFunc): void
    /**
     * Lookup an item in the cache.  If the item exists, a #GIOStream is returned
     * for the item.  The stream may be shared by multiple callers, so ensure the
     * stream is in a valid state through external locking.
     * 
     * The returned #GIOStream is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     */
    get(path: string, key: string): Gio.IOStream
    /**
     * Gets whether expire of cache data is enabled.
     * 
     * This is a complementary property for camel_data_cache_set_expire_age()
     * and camel_data_cache_set_expire_access(), which allows to disable expiry
     * without touching the two values. Having expire enabled, but not have set
     * any of the two times, still behaves like not having expiry enabled.
     */
    get_expire_enabled(): boolean
    /**
     * Lookup the filename for an item in the cache
     */
    get_filename(path: string, key: string): string
    /**
     * Returns the path to the data cache.
     */
    get_path(): string
    /**
     * Remove/expire a cache item.
     */
    remove(path: string, key: string): number
    /**
     * Set the cache expiration policy for access times.
     * 
     * Items in the cache which haven't been accessed for `when`
     * seconds may be expired at any time.  Items are expired in a lazy
     * manner, so it is indeterminate when the items will
     * physically be removed.
     * 
     * Note you can set both an age and an access limit.  The
     * age acts as a hard limit on cache entries.
     */
    set_expire_access(when: number): void
    /**
     * Set the cache expiration policy for aged entries.
     * 
     * Items in the cache older than `when` seconds may be
     * flushed at any time.  Items are expired in a lazy
     * manner, so it is indeterminate when the items will
     * physically be removed.
     * 
     * Note you can set both an age and an access limit.  The
     * age acts as a hard limit on cache entries.
     */
    set_expire_age(when: number): void
    /**
     * Sets whether expire of cache data is enabled.
     * 
     * This is a complementary property for camel_data_cache_set_expire_age()
     * and camel_data_cache_set_expire_access(), which allows to disable expiry
     * without touching the two values. Having expire enabled, but not have set
     * any of the two times, still behaves like not having expiry enabled.
     */
    set_expire_enabled(expire_enabled: boolean): void
    /**
     * Sets the path to the data cache.
     */
    set_path(path: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::expire-enabled", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expire-enabled", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: DataCache, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DataCache_ConstructProps)
    _init (config?: DataCache_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(path: string): DataCache
    static $gtype: GObject.Type
}
interface DataWrapper_ConstructProps extends GObject.Object_ConstructProps {
}
class DataWrapper {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_encoding(): TransferEncoding
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: DataWrapper, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: DataWrapper, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: DataWrapper_ConstructProps)
    _init (config?: DataWrapper_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): DataWrapper
    static $gtype: GObject.Type
}
interface FilterDriver_ConstructProps extends GObject.Object_ConstructProps {
}
class FilterDriver {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.FilterDriver */
    /**
     * Adds a new rule to set of rules to process by the filter driver.
     */
    add_rule(name: string, match: string, action: string): void
    /**
     * Filters a folder based on rules defined in the FilterDriver
     * object.
     */
    filter_folder(folder: Folder, cache: UIDCache, uids: string[] | null, remove: boolean, cancellable?: Gio.Cancellable | null): number
    /**
     * Filters an mbox file based on rules defined in the FilterDriver
     * object. Is more efficient as it doesn't need to open the folder
     * through Camel directly.
     */
    filter_mbox(mbox: string, original_source_url?: string | null, cancellable?: Gio.Cancellable | null): number
    /**
     * Filters a message based on rules defined in the FilterDriver
     * object. If the source folder (`source)` and the uid (`uid)` are
     * provided, the filter will operate on the CamelFolder (which in
     * certain cases is more efficient than using the default
     * camel_folder_append_message() function).
     */
    filter_message(message?: MimeMessage | null, info?: MessageInfo | null, uid?: string | null, source?: Folder | null, store_uid?: string | null, original_store_uid?: string | null, cancellable?: Gio.Cancellable | null): number
    /**
     * Flush all of the only-once filter actions.
     */
    flush(): void
    /**
     * Removes a rule by name, added by camel_filter_driver_add_rule().
     */
    remove_rule_by_name(name: string): boolean
    /**
     * Sets a default folder for the driver. The function adds
     * its own reference for the folder.
     */
    set_default_folder(def?: Folder | null): void
    /**
     * Sets a log file to use for logging.
     */
    set_logfile(logfile?: object | null): void
    /**
     * Sets a callback to call when a play of a sound is requested.
     */
    set_play_sound_func(func: FilterPlaySoundFunc): void
    /**
     * Sets a shell command callback, which is called when a shell command
     * execution is requested.
     */
    set_shell_func(func: FilterShellFunc): void
    /**
     * Sets a status callback, which is used to report progress/status.
     */
    set_status_func(func: FilterStatusFunc): void
    /**
     * Sets a callback to use for system beep.
     */
    set_system_beep_func(func: FilterSystemBeepFunc): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: FilterDriver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilterDriver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FilterDriver_ConstructProps)
    _init (config?: FilterDriver_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(session: Session): FilterDriver
    static $gtype: GObject.Type
}
interface FilterInputStream_ConstructProps extends Gio.FilterInputStream_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.FilterInputStream */
    filter?: MimeFilter
}
class FilterInputStream {
    /* Properties of Gio-2.0.Gio.FilterInputStream */
    close_base_stream: boolean
    /* Fields of Gio-2.0.Gio.FilterInputStream */
    readonly parent_instance: Gio.InputStream
    readonly base_stream: Gio.InputStream
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.FilterInputStream */
    /**
     * Gets the #CamelMimeFilter that is used by `filter_stream`.
     */
    get_filter(): MimeFilter
    /* Methods of Gio-2.0.Gio.FilterInputStream */
    /**
     * Gets the base stream for the filter stream.
     */
    get_base_stream(): Gio.InputStream
    /**
     * Returns whether the base stream will be closed when `stream` is
     * closed.
     */
    get_close_base_stream(): boolean
    /**
     * Sets whether the base stream will be closed when `stream` is closed.
     */
    set_close_base_stream(close_base: boolean): void
    /* Methods of Gio-2.0.Gio.InputStream */
    /**
     * Clears the pending flag on `stream`.
     */
    clear_pending(): void
    /**
     * Closes the stream, releasing resources related to it.
     * 
     * Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
     * Closing a stream multiple times will not return an error.
     * 
     * Streams will be automatically closed when the last reference
     * is dropped, but you might want to call this function to make sure
     * resources are released as early as possible.
     * 
     * Some streams might keep the backing store of the stream (e.g. a file descriptor)
     * open after the stream is closed. See the documentation for the individual
     * stream for details.
     * 
     * On failure the first error that happened will be reported, but the close
     * operation will finish as much as possible. A stream that failed to
     * close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
     * is important to check and report the error to the user.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     * Cancelling a close will still leave the stream closed, but some streams
     * can use a faster close that doesn't block to e.g. check errors.
     */
    close(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Requests an asynchronous closes of the stream, releasing resources related to it.
     * When the operation is finished `callback` will be called.
     * You can then call g_input_stream_close_finish() to get the result of the
     * operation.
     * 
     * For behaviour details see g_input_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads to implement
     * asynchronicity, so they are optional for inheriting classes. However, if you
     * override one you must override all.
     */
    close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes closing a stream asynchronously, started from g_input_stream_close_async().
     */
    close_finish(result: Gio.AsyncResult): boolean
    /**
     * Checks if an input stream has pending actions.
     */
    has_pending(): boolean
    /**
     * Checks if an input stream is closed.
     */
    is_closed(): boolean
    /**
     * Tries to read `count` bytes from the stream into the buffer starting at
     * `buffer`. Will block during this read.
     * 
     * If count is zero returns zero and does nothing. A value of `count`
     * larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes read into the buffer is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. near the end of a file. Zero is returned on end of file
     * (or if `count` is zero),  but never otherwise.
     * 
     * The returned `buffer` is not a nul-terminated string, it can contain nul bytes
     * at any position, and this function doesn't nul-terminate the `buffer`.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error -1 is returned and `error` is set accordingly.
     */
    read(cancellable?: Gio.Cancellable | null): [ /* returnType */ number, /* buffer */ Uint8Array ]
    /**
     * Tries to read `count` bytes from the stream into the buffer starting at
     * `buffer`. Will block during this read.
     * 
     * This function is similar to g_input_stream_read(), except it tries to
     * read as many bytes as requested, only stopping on an error or end of stream.
     * 
     * On a successful read of `count` bytes, or if we reached the end of the
     * stream,  %TRUE is returned, and `bytes_read` is set to the number of bytes
     * read into `buffer`.
     * 
     * If there is an error during the operation %FALSE is returned and `error`
     * is set to indicate the error status.
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_read` will be set to the number of bytes that were successfully
     * read before the error was encountered.  This functionality is only
     * available from C.  If you need it from another language then you must
     * write your own loop around g_input_stream_read().
     */
    read_all(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* buffer */ Uint8Array, /* bytes_read */ number ]
    /**
     * Request an asynchronous read of `count` bytes from the stream into the
     * buffer starting at `buffer`.
     * 
     * This is the asynchronous equivalent of g_input_stream_read_all().
     * 
     * Call g_input_stream_read_all_finish() to collect the result.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     */
    read_all_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): /* buffer */ Uint8Array
    /**
     * Finishes an asynchronous stream read operation started with
     * g_input_stream_read_all_async().
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_read` will be set to the number of bytes that were successfully
     * read before the error was encountered.  This functionality is only
     * available from C.  If you need it from another language then you must
     * write your own loop around g_input_stream_read_async().
     */
    read_all_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_read */ number ]
    /**
     * Request an asynchronous read of `count` bytes from the stream into the buffer
     * starting at `buffer`. When the operation is finished `callback` will be called.
     * You can then call g_input_stream_read_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed on `stream,` and will
     * result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes read into the buffer will be passed to the
     * callback. It is not an error if this is not the same as the requested size, as it
     * can happen e.g. near the end of a file, but generally we try to read
     * as many bytes as requested. Zero is returned on end of file
     * (or if `count` is zero),  but never otherwise.
     * 
     * Any outstanding i/o request with higher priority (lower numerical value) will
     * be executed before an outstanding request with lower priority. Default
     * priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads to implement
     * asynchronicity, so they are optional for inheriting classes. However, if you
     * override one you must override all.
     */
    read_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): /* buffer */ Uint8Array
    /**
     * Like g_input_stream_read(), this tries to read `count` bytes from
     * the stream in a blocking fashion. However, rather than reading into
     * a user-supplied buffer, this will create a new #GBytes containing
     * the data that was read. This may be easier to use from language
     * bindings.
     * 
     * If count is zero, returns a zero-length #GBytes and does nothing. A
     * value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, a new #GBytes is returned. It is not an error if the
     * size of this object is not the same as the requested size, as it
     * can happen e.g. near the end of a file. A zero-length #GBytes is
     * returned on end of file (or if `count` is zero), but never
     * otherwise.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error %NULL is returned and `error` is set accordingly.
     */
    read_bytes(count: number, cancellable?: Gio.Cancellable | null): GLib.Bytes
    /**
     * Request an asynchronous read of `count` bytes from the stream into a
     * new #GBytes. When the operation is finished `callback` will be
     * called. You can then call g_input_stream_read_bytes_finish() to get the
     * result of the operation.
     * 
     * During an async request no other sync and async calls are allowed
     * on `stream,` and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the new #GBytes will be passed to the callback. It is
     * not an error if this is smaller than the requested size, as it can
     * happen e.g. near the end of a file, but generally we try to read as
     * many bytes as requested. Zero is returned on end of file (or if
     * `count` is zero), but never otherwise.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     */
    read_bytes_async(count: number, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream read-into-#GBytes operation.
     */
    read_bytes_finish(result: Gio.AsyncResult): GLib.Bytes
    /**
     * Finishes an asynchronous stream read operation.
     */
    read_finish(result: Gio.AsyncResult): number
    /**
     * Sets `stream` to have actions pending. If the pending flag is
     * already set or `stream` is closed, it will return %FALSE and set
     * `error`.
     */
    set_pending(): boolean
    /**
     * Tries to skip `count` bytes from the stream. Will block during the operation.
     * 
     * This is identical to g_input_stream_read(), from a behaviour standpoint,
     * but the bytes that are skipped are not returned to the user. Some
     * streams have an implementation that is more efficient than reading the data.
     * 
     * This function is optional for inherited classes, as the default implementation
     * emulates it using read.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    skip(count: number, cancellable?: Gio.Cancellable | null): number
    /**
     * Request an asynchronous skip of `count` bytes from the stream.
     * When the operation is finished `callback` will be called.
     * You can then call g_input_stream_skip_finish() to get the result
     * of the operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes skipped will be passed to the callback.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. near the end of a file, but generally we try to skip
     * as many bytes as requested. Zero is returned on end of file
     * (or if `count` is zero), but never otherwise.
     * 
     * Any outstanding i/o request with higher priority (lower numerical value)
     * will be executed before an outstanding request with lower priority.
     * Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads to
     * implement asynchronicity, so they are optional for inheriting classes.
     * However, if you override one, you must override all.
     */
    skip_async(count: number, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream skip operation.
     */
    skip_finish(result: Gio.AsyncResult): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Gio-2.0.Gio.InputStream */
    /**
     * Requests an asynchronous closes of the stream, releasing resources related to it.
     * When the operation is finished `callback` will be called.
     * You can then call g_input_stream_close_finish() to get the result of the
     * operation.
     * 
     * For behaviour details see g_input_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads to implement
     * asynchronicity, so they are optional for inheriting classes. However, if you
     * override one you must override all.
     */
    vfunc_close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes closing a stream asynchronously, started from g_input_stream_close_async().
     */
    vfunc_close_finish(result: Gio.AsyncResult): boolean
    vfunc_close_fn(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Request an asynchronous read of `count` bytes from the stream into the buffer
     * starting at `buffer`. When the operation is finished `callback` will be called.
     * You can then call g_input_stream_read_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed on `stream,` and will
     * result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes read into the buffer will be passed to the
     * callback. It is not an error if this is not the same as the requested size, as it
     * can happen e.g. near the end of a file, but generally we try to read
     * as many bytes as requested. Zero is returned on end of file
     * (or if `count` is zero),  but never otherwise.
     * 
     * Any outstanding i/o request with higher priority (lower numerical value) will
     * be executed before an outstanding request with lower priority. Default
     * priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads to implement
     * asynchronicity, so they are optional for inheriting classes. However, if you
     * override one you must override all.
     */
    vfunc_read_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): /* buffer */ Uint8Array | null
    /**
     * Finishes an asynchronous stream read operation.
     */
    vfunc_read_finish(result: Gio.AsyncResult): number
    vfunc_read_fn(buffer: object | null, count: number, cancellable?: Gio.Cancellable | null): number
    /**
     * Tries to skip `count` bytes from the stream. Will block during the operation.
     * 
     * This is identical to g_input_stream_read(), from a behaviour standpoint,
     * but the bytes that are skipped are not returned to the user. Some
     * streams have an implementation that is more efficient than reading the data.
     * 
     * This function is optional for inherited classes, as the default implementation
     * emulates it using read.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_skip(count: number, cancellable?: Gio.Cancellable | null): number
    /**
     * Request an asynchronous skip of `count` bytes from the stream.
     * When the operation is finished `callback` will be called.
     * You can then call g_input_stream_skip_finish() to get the result
     * of the operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes skipped will be passed to the callback.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. near the end of a file, but generally we try to skip
     * as many bytes as requested. Zero is returned on end of file
     * (or if `count` is zero), but never otherwise.
     * 
     * Any outstanding i/o request with higher priority (lower numerical value)
     * will be executed before an outstanding request with lower priority.
     * Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads to
     * implement asynchronicity, so they are optional for inheriting classes.
     * However, if you override one, you must override all.
     */
    vfunc_skip_async(count: number, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream skip operation.
     */
    vfunc_skip_finish(result: Gio.AsyncResult): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: FilterInputStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilterInputStream, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::close-base-stream", callback: (($obj: FilterInputStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::close-base-stream", callback: (($obj: FilterInputStream, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FilterInputStream_ConstructProps)
    _init (config?: FilterInputStream_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(base_stream: Gio.InputStream, filter: MimeFilter): FilterInputStream
    static $gtype: GObject.Type
}
interface FilterOutputStream_ConstructProps extends Gio.FilterOutputStream_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.FilterOutputStream */
    filter?: MimeFilter
}
class FilterOutputStream {
    /* Fields of Gio-2.0.Gio.FilterOutputStream */
    readonly parent_instance: Gio.OutputStream
    readonly base_stream: Gio.OutputStream
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.FilterOutputStream */
    /**
     * Gets the #CamelMimeFilter that is used by `filter_stream`.
     */
    get_filter(): MimeFilter
    /* Methods of Gio-2.0.Gio.FilterOutputStream */
    /**
     * Gets the base stream for the filter stream.
     */
    get_base_stream(): Gio.OutputStream
    /**
     * Returns whether the base stream will be closed when `stream` is
     * closed.
     */
    get_close_base_stream(): boolean
    /**
     * Sets whether the base stream will be closed when `stream` is closed.
     */
    set_close_base_stream(close_base: boolean): void
    /* Methods of Gio-2.0.Gio.OutputStream */
    /**
     * Clears the pending flag on `stream`.
     */
    clear_pending(): void
    /**
     * Closes the stream, releasing resources related to it.
     * 
     * Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
     * Closing a stream multiple times will not return an error.
     * 
     * Closing a stream will automatically flush any outstanding buffers in the
     * stream.
     * 
     * Streams will be automatically closed when the last reference
     * is dropped, but you might want to call this function to make sure
     * resources are released as early as possible.
     * 
     * Some streams might keep the backing store of the stream (e.g. a file descriptor)
     * open after the stream is closed. See the documentation for the individual
     * stream for details.
     * 
     * On failure the first error that happened will be reported, but the close
     * operation will finish as much as possible. A stream that failed to
     * close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
     * is important to check and report the error to the user, otherwise
     * there might be a loss of data as all data might not be written.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     * Cancelling a close will still leave the stream closed, but there some streams
     * can use a faster close that doesn't block to e.g. check errors. On
     * cancellation (as with any error) there is no guarantee that all written
     * data will reach the target.
     */
    close(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Requests an asynchronous close of the stream, releasing resources
     * related to it. When the operation is finished `callback` will be
     * called. You can then call g_output_stream_close_finish() to get
     * the result of the operation.
     * 
     * For behaviour details see g_output_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     */
    close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Closes an output stream.
     */
    close_finish(result: Gio.AsyncResult): boolean
    /**
     * Forces a write of all user-space buffered data for the given
     * `stream`. Will block during the operation. Closing the stream will
     * implicitly cause a flush.
     * 
     * This function is optional for inherited classes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    flush(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces an asynchronous write of all user-space buffered data for
     * the given `stream`.
     * For behaviour details see g_output_stream_flush().
     * 
     * When the operation is finished `callback` will be
     * called. You can then call g_output_stream_flush_finish() to get the
     * result of the operation.
     */
    flush_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes flushing an output stream.
     */
    flush_finish(result: Gio.AsyncResult): boolean
    /**
     * Checks if an output stream has pending actions.
     */
    has_pending(): boolean
    /**
     * Checks if an output stream has already been closed.
     */
    is_closed(): boolean
    /**
     * Checks if an output stream is being closed. This can be
     * used inside e.g. a flush implementation to see if the
     * flush (or other i/o operation) is called from within
     * the closing operation.
     */
    is_closing(): boolean
    /**
     * Sets `stream` to have actions pending. If the pending flag is
     * already set or `stream` is closed, it will return %FALSE and set
     * `error`.
     */
    set_pending(): boolean
    /**
     * Splices an input stream into an output stream.
     */
    splice(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, cancellable?: Gio.Cancellable | null): number
    /**
     * Splices a stream asynchronously.
     * When the operation is finished `callback` will be called.
     * You can then call g_output_stream_splice_finish() to get the
     * result of the operation.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_splice().
     */
    splice_async(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream splice operation.
     */
    splice_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * If count is 0, returns 0 and does nothing. A value of `count`
     * larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `count` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error -1 is returned and `error` is set accordingly.
     */
    write(buffer: Uint8Array, cancellable?: Gio.Cancellable | null): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * This function is similar to g_output_stream_write(), except it tries to
     * write as many bytes as requested, only stopping on an error.
     * 
     * On a successful write of `count` bytes, %TRUE is returned, and `bytes_written`
     * is set to `count`.
     * 
     * If there is an error during the operation %FALSE is returned and `error`
     * is set to indicate the error status.
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write().
     */
    write_all(buffer: Uint8Array, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_all_finish() to get the result of the
     * operation.
     * 
     * This is the asynchronous version of g_output_stream_write_all().
     * 
     * Call g_output_stream_write_all_finish() to collect the result.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called.
     */
    write_all_async(buffer: Uint8Array, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream write operation started with
     * g_output_stream_write_all_async().
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write_async().
     */
    write_all_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK - if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write().
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called. See g_output_stream_write_bytes_async()
     * for a #GBytes version that will automatically hold a reference to
     * the contents (without copying) for the duration of the call.
     */
    write_async(buffer: Uint8Array, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * A wrapper function for g_output_stream_write() which takes a
     * #GBytes as input.  This can be more convenient for use by language
     * bindings or in other cases where the refcounted nature of #GBytes
     * is helpful over a bare pointer interface.
     * 
     * However, note that this function may still perform partial writes,
     * just like g_output_stream_write().  If that occurs, to continue
     * writing, you will need to create a new #GBytes containing just the
     * remaining bytes, using g_bytes_new_from_bytes(). Passing the same
     * #GBytes instance multiple times potentially can result in duplicated
     * data in the output stream.
     */
    write_bytes(bytes: GLib.Bytes, cancellable?: Gio.Cancellable | null): number
    /**
     * This function is similar to g_output_stream_write_async(), but
     * takes a #GBytes as input.  Due to the refcounted nature of #GBytes,
     * this allows the stream to avoid taking a copy of the data.
     * 
     * However, note that this function may still perform partial writes,
     * just like g_output_stream_write_async(). If that occurs, to continue
     * writing, you will need to create a new #GBytes containing just the
     * remaining bytes, using g_bytes_new_from_bytes(). Passing the same
     * #GBytes instance multiple times potentially can result in duplicated
     * data in the output stream.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write_bytes().
     */
    write_bytes_async(bytes: GLib.Bytes, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream write-from-#GBytes operation.
     */
    write_bytes_finish(result: Gio.AsyncResult): number
    /**
     * Finishes a stream write operation.
     */
    write_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * If `n_vectors` is 0 or the sum of all bytes in `vectors` is 0, returns 0 and
     * does nothing.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `n_vectors` is 0 or the sum of all bytes in `vectors` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * Some implementations of g_output_stream_writev() may have limitations on the
     * aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
     * are exceeded. For example, when writing to a local file on UNIX platforms,
     * the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
     */
    writev(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * This function is similar to g_output_stream_writev(), except it tries to
     * write as many bytes as requested, only stopping on an error.
     * 
     * On a successful write of all `n_vectors` vectors, %TRUE is returned, and
     * `bytes_written` is set to the sum of all the sizes of `vectors`.
     * 
     * If there is an error during the operation %FALSE is returned and `error`
     * is set to indicate the error status.
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C. If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write().
     * 
     * The content of the individual elements of `vectors` might be changed by this
     * function.
     */
    writev_all(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of the bytes contained in the `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_all_finish() to get the result of the
     * operation.
     * 
     * This is the asynchronous version of g_output_stream_writev_all().
     * 
     * Call g_output_stream_writev_all_finish() to collect the result.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called. The content of the individual elements
     * of `vectors` might be changed by this function.
     */
    writev_all_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream write operation started with
     * g_output_stream_writev_all_async().
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_writev_async().
     */
    writev_all_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of the bytes contained in `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK — if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_writev().
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called.
     */
    writev_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream writev operation.
     */
    writev_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Gio-2.0.Gio.OutputStream */
    /**
     * Requests an asynchronous close of the stream, releasing resources
     * related to it. When the operation is finished `callback` will be
     * called. You can then call g_output_stream_close_finish() to get
     * the result of the operation.
     * 
     * For behaviour details see g_output_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     */
    vfunc_close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Closes an output stream.
     */
    vfunc_close_finish(result: Gio.AsyncResult): boolean
    vfunc_close_fn(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces a write of all user-space buffered data for the given
     * `stream`. Will block during the operation. Closing the stream will
     * implicitly cause a flush.
     * 
     * This function is optional for inherited classes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces an asynchronous write of all user-space buffered data for
     * the given `stream`.
     * For behaviour details see g_output_stream_flush().
     * 
     * When the operation is finished `callback` will be
     * called. You can then call g_output_stream_flush_finish() to get the
     * result of the operation.
     */
    vfunc_flush_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes flushing an output stream.
     */
    vfunc_flush_finish(result: Gio.AsyncResult): boolean
    /**
     * Splices an input stream into an output stream.
     */
    vfunc_splice(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, cancellable?: Gio.Cancellable | null): number
    /**
     * Splices a stream asynchronously.
     * When the operation is finished `callback` will be called.
     * You can then call g_output_stream_splice_finish() to get the
     * result of the operation.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_splice().
     */
    vfunc_splice_async(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream splice operation.
     */
    vfunc_splice_finish(result: Gio.AsyncResult): number
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK - if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write().
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called. See g_output_stream_write_bytes_async()
     * for a #GBytes version that will automatically hold a reference to
     * the contents (without copying) for the duration of the call.
     */
    vfunc_write_async(buffer: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream write operation.
     */
    vfunc_write_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * If count is 0, returns 0 and does nothing. A value of `count`
     * larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `count` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error -1 is returned and `error` is set accordingly.
     */
    vfunc_write_fn(buffer: Uint8Array | null, cancellable?: Gio.Cancellable | null): number
    /**
     * Request an asynchronous write of the bytes contained in `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK — if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_writev().
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called.
     */
    vfunc_writev_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream writev operation.
     */
    vfunc_writev_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * If `n_vectors` is 0 or the sum of all bytes in `vectors` is 0, returns 0 and
     * does nothing.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `n_vectors` is 0 or the sum of all bytes in `vectors` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * Some implementations of g_output_stream_writev() may have limitations on the
     * aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
     * are exceeded. For example, when writing to a local file on UNIX platforms,
     * the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
     */
    vfunc_writev_fn(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: FilterOutputStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FilterOutputStream, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FilterOutputStream_ConstructProps)
    _init (config?: FilterOutputStream_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(base_stream: Gio.OutputStream, filter: MimeFilter): FilterOutputStream
    static $gtype: GObject.Type
}
interface Folder_ConstructProps extends Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Folder */
    /**
     * The folder's description.
     */
    description?: string
    /**
     * The folder's display name.
     */
    display_name?: string
    /**
     * The folder's fully qualified name.
     */
    full_name?: string
    /**
     * A #CamelThreeState persistent option of the folder,
     * which can override global option to mark messages
     * as seen after certain interval.
     */
    mark_seen?: ThreeState
    /**
     * Timeout in milliseconds for marking messages as seen.
     */
    mark_seen_timeout?: number
    /**
     * The #CamelStore to which the folder belongs.
     */
    parent_store?: Store
}
class Folder {
    /* Properties of Camel-1.2.Camel.Folder */
    /**
     * The folder's description.
     */
    description: string
    /**
     * The folder's display name.
     */
    display_name: string
    /**
     * The folder's fully qualified name.
     */
    full_name: string
    /**
     * A #CamelThreeState persistent option of the folder,
     * which can override global option to mark messages
     * as seen after certain interval.
     */
    mark_seen: ThreeState
    /**
     * Timeout in milliseconds for marking messages as seen.
     */
    mark_seen_timeout: number
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Object */
    readonly parent: GObject.Object
    readonly priv: ObjectPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder` asynchronously.  Only the flag and tag data
     * from `info` are used.  If `info` is %NULL, no flags or tags will be set.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_append_message_finish() to get the result of
     * the operation.
     */
    append_message(message: MimeMessage, info: MessageInfo | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_append_message_finish().
     */
    append_message_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Marks `folder` as deleted and performs any required cleanup.
     * 
     * This also emits the #CamelFolder::deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     */
    delete(): void
    /**
     * Thread-safe variation of camel_folder_get_description().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_description(): string
    /**
     * Thread-safe variation of camel_folder_get_display_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string
    /**
     * Thread-safe variation of camel_folder_get_full_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_full_name(): string
    /**
     * Asynchronously deletes messages which have been marked as "DELETED".
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_expunge_finish() to get the result of the operation.
     */
    expunge(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_expunge().
     */
    expunge_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the provided array and its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids when the provided
     * information was created explicitly by the corresponding get_ call.
     */
    free_deep(array: string[]): void
    /**
     * Frees the provided array but not its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids or free_summary when
     * the returned array needs to be freed but its contents come from
     * "static" information.
     */
    free_shallow(array: string[]): void
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    freeze(): void
    get_deleted_message_count(): number
    /**
     * Returns a description of the folder suitable for displaying to the user.
     */
    get_description(): string
    /**
     * Returns the display name for the folder.  The fully qualified name
     * can be obtained with camel_folder_get_full_name().
     */
    get_display_name(): string
    get_filename(uid: string): string
    get_flags(): number
    get_folder_summary(): FolderSummary
    get_frozen_count(): number
    /**
     * Returns the fully qualified name of the folder.
     */
    get_full_name(): string
    get_mark_seen(): ThreeState
    get_mark_seen_timeout(): number
    /**
     * Asynchronously gets the message corresponding to `message_uid` from `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_get_message_finish() to get the result of the operation.
     */
    get_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    get_message_count(): number
    /**
     * Finishes the operation started with camel_folder_get_message().
     */
    get_message_finish(result: Gio.AsyncResult): MimeMessage
    get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    get_message_user_flag(uid: string, name: string): boolean
    get_message_user_tag(uid: string, name: string): string
    get_parent_store(): object | null
    get_permanent_flags(): number
    /**
     * Asynchronously gets a list of known quotas for `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_get_quota_info_finish() to get the result of
     * the operation.
     */
    get_quota_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_get_quota_info().
     * Free the returned #CamelFolderQuotaInfo struct with
     * camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_finish(result: Gio.AsyncResult): FolderQuotaInfo
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    get_uncached_uids(uids: string[]): string[]
    get_unread_message_count(): number
    /**
     * Get whether or not the folder has a summary.
     */
    has_summary_capability(): boolean
    is_frozen(): boolean
    /**
     * Locks `folder`. Unlock it with camel_folder_unlock().
     */
    lock(): void
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_purge_message_cache_finish() to get the result of the
     * operation.
     */
    purge_message_cache(start_uid: string, end_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_purge_message_cache().
     */
    purge_message_cache_finish(result: Gio.AsyncResult): boolean
    /**
     * Delete the local cache of all messages between these uids.
     */
    purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously synchronizes a folder's summary with its backing store.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_refresh_info_finish() to get the result of the operation.
     */
    refresh_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_refresh_info().
     */
    refresh_info_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    rename(new_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    search_free(result: string[]): void
    /**
     * Sets a description of the folder suitable for displaying to the user.
     */
    set_description(description: string): void
    /**
     * Sets the display name for the folder.
     */
    set_display_name(display_name: string): void
    /**
     * Sets folder flags (bit-or of #CamelFolderFlags) for the `folder`.
     */
    set_flags(folder_flags: number): void
    /**
     * Sets the fully qualified name of the folder.
     */
    set_full_name(full_name: string): void
    /**
     * Sets whether folder locking (camel_folder_lock() and camel_folder_unlock())
     * should be used. When set to %FALSE, the two functions do nothing and simply
     * return.
     */
    set_lock_async(skip_folder_lock: boolean): void
    /**
     * Sets whether the messages in this `folder` should be marked
     * as seen automatically. An inconsistent state means to use
     * global option.
     */
    set_mark_seen(mark_seen: ThreeState): void
    /**
     * Sets the `timeout` in milliseconds for marking messages
     * as seen in this `folder`. Whether the timeout is used
     * depends on camel_folder_get_mark_seen().
     */
    set_mark_seen_timeout(timeout: number): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    set_message_flags(uid: string, mask: number, set: number): boolean
    set_message_user_flag(uid: string, name: string, value: boolean): void
    set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    sort_uids(uids: string[]): void
    /**
     * Synchronizes any changes that have been made to `folder` to its backing
     * store asynchronously, optionally expunging deleted messages as well.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Asynchronously ensure that a message identified by `message_uid` has been
     * synchronized in `folder` so that calling camel_folder_get_message() on it
     * later will work in offline mode.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_message_finish() to get the result of the
     * operation.
     */
    synchronize_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize_message().
     */
    synchronize_message_finish(result: Gio.AsyncResult): boolean
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets a #CamelFolderSummary of the folder. It consumes the `summary`.
     * 
     * This is supposed to be called only by the descendants of
     * the #CamelFolder and only at the construction time. Calling
     * this function twice yeilds to an error.
     */
    take_folder_summary(summary: FolderSummary): void
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    thaw(): void
    /**
     * Asynchronously copies or moves messages from one folder to another.
     * If the `source` or `destination` folders have the same parent store,
     * this may be more efficient than using camel_folder_append_message().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_transfer_messages_to_finish() to get the result of the
     * operation.
     */
    transfer_messages_to(message_uids: string[], destination: Folder, delete_originals: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_transfer_messages_to().
     */
    transfer_messages_to_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Unlocks `folder,` previously locked with camel_folder_lock().
     */
    unlock(): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    vfunc_append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    vfunc_changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    vfunc_cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    vfunc_count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    vfunc_delete_(): void
    vfunc_deleted(): void
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    vfunc_expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    vfunc_free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    vfunc_freeze(): void
    vfunc_get_filename(uid: string): string
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    vfunc_get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    vfunc_get_message_count(): number
    vfunc_get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    vfunc_get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    vfunc_get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    vfunc_get_message_user_flag(uid: string, name: string): boolean
    vfunc_get_message_user_tag(uid: string, name: string): string
    vfunc_get_permanent_flags(): number
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    vfunc_get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    vfunc_get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    vfunc_get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_get_uncached_uids(uids: string[]): string[]
    vfunc_has_search_capability(): boolean
    vfunc_is_frozen(): boolean
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    vfunc_prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     */
    vfunc_purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    vfunc_refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    vfunc_rename(new_name: string): void
    vfunc_renamed(old_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    vfunc_search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    vfunc_search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    vfunc_search_free(result: string[]): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    vfunc_set_message_flags(uid: string, mask: number, set: number): boolean
    vfunc_set_message_user_flag(uid: string, name: string, value: boolean): void
    vfunc_set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    vfunc_sort_uids(uids: string[]): void
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    vfunc_synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    vfunc_thaw(): void
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    vfunc_transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Folder */
    connect(sigName: "changed", callback: (($obj: Folder, changes: FolderChangeInfo) => void)): number
    connect_after(sigName: "changed", callback: (($obj: Folder, changes: FolderChangeInfo) => void)): number
    emit(sigName: "changed", changes: FolderChangeInfo): void
    connect(sigName: "deleted", callback: (($obj: Folder) => void)): number
    connect_after(sigName: "deleted", callback: (($obj: Folder) => void)): number
    emit(sigName: "deleted"): void
    connect(sigName: "renamed", callback: (($obj: Folder, old_name: string) => void)): number
    connect_after(sigName: "renamed", callback: (($obj: Folder, old_name: string) => void)): number
    emit(sigName: "renamed", old_name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::description", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::full-name", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::full-name", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen-timeout", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen-timeout", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Folder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Folder_ConstructProps)
    _init (config?: Folder_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static threaded_messages_dump(c: FolderThreadNode): number
    static $gtype: GObject.Type
}
interface FolderSearch_ConstructProps extends GObject.Object_ConstructProps {
}
class FolderSearch {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.FolderSearch */
    /**
     * Run a search.  Search must have had Folder already set on it, and
     * it must implement summaries.
     */
    count(expr: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Frees result of camel_folder_search_search() call.
     */
    free_result(result?: string[] | null): void
    get_current_message_info(): MessageInfo | null
    get_current_summary(): string[]
    get_folder(): Folder
    get_only_cached_messages(): boolean
    get_summary(): string[]
    get_summary_empty(): boolean
    /**
     * Run a search.  Search must have had Folder already set on it, and
     * it must implement summaries.
     */
    search(expr: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Set the index representing the contents of all messages
     * in this folder.  If this is not set, then the folder implementation
     * should sub-class the CamelFolderSearch and provide its own
     * body-contains function.
     */
    set_body_index(body_index?: Index | null): void
    /**
     * Sets, or unsets, the `info` as the currently processing #CamelMessageInfo.
     * The function adds its own reference to `info,` if not %NULL.
     */
    set_current_message_info(info?: MessageInfo | null): void
    /**
     * Set the folder attribute of the search. This can be used to perform a slow-search
     * when indexes and so forth are not available. Or for use by subclasses.
     */
    set_folder(folder: Folder): void
    /**
     * Sets whether only locally cached messages can be searched. The default
     * value is %FALSE, which means that when a message is required and it is
     * not available locally, then it is downloaded from the server, if possible.
     */
    set_only_cached_messages(only_cached_messages: boolean): void
    /**
     * Set the array of summary objects representing the span of the search.
     * 
     * If this is not set, then a subclass must provide the functions
     * for searching headers and for the match-all operator.
     */
    set_summary(summary: string[]): void
    /**
     * Sets, or unsets, the `info` as the currently processing #CamelMessageInfo.
     * Unlike camel_folder_search_set_current_message_info(), this function
     * assumes ownership of the `info,` if not %NULL.
     */
    take_current_message_info(info?: MessageInfo | null): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: FolderSearch, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FolderSearch, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FolderSearch_ConstructProps)
    _init (config?: FolderSearch_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): FolderSearch
    /**
     * Increases time `t` by the given number of months (or decreases, if
     * `months` is negative).
     */
    static util_add_months(t: number, months: number): number
    /**
     * Compares date portion of the two date-time values, first converted
     * into the local time zone. The returned value is like with strcmp().
     */
    static util_compare_date(datetime1: number, datetime2: number): number
    /**
     * Calculates a hash of the Message-ID header value `message_id`.
     */
    static util_hash_message_id(message_id: string, needs_decode: boolean): number
    /**
     * Implementation of 'make-time' function, which expects one argument,
     * a string or an integer, to be converted into time_t.
     */
    static util_make_time(argc: number, argv: SExpResult): number
    static $gtype: GObject.Type
}
interface FolderSummary_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.FolderSummary */
    /**
     * The #CamelFolder to which the folder summary belongs.
     */
    folder?: Folder
}
class FolderSummary {
    /* Properties of Camel-1.2.Camel.FolderSummary */
    /**
     * How many deleted infos is saved in a summary.
     */
    readonly deleted_count: number
    /**
     * How many junk infos is saved in a summary.
     */
    readonly junk_count: number
    /**
     * How many junk and not deleted infos is saved in a summary.
     */
    readonly junk_not_deleted_count: number
    /**
     * How many infos is saved in a summary.
     */
    readonly saved_count: number
    /**
     * How many unread infos is saved in a summary.
     */
    readonly unread_count: number
    /**
     * How many visible (not deleted and not junk) infos is saved in a summary.
     */
    readonly visible_count: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.FolderSummary */
    /**
     * Adds a new `info` record to the summary. If the `force_keep_uid` is %FALSE,
     * then a new uid is automatically re-assigned by calling
     * camel_folder_summary_next_uid_string(). It's an error to use
     * `force_keep_uid` when the `info` has none set.
     * 
     * The `summary` adds its own reference to `info,` if needed, and any
     * previously loaded info is replaced with the new one.
     */
    add(info: MessageInfo, force_keep_uid: boolean): void
    /**
     * Check if the uid is valid. This isn't very efficient, so it shouldn't be called iteratively.
     */
    check_uid(uid: string): boolean
    /**
     * Empty the summary contents.
     */
    clear(): boolean
    /**
     * Get the number of summary items stored in this summary.
     */
    count(): number
    /**
     * Retrieve a summary item by uid.
     * 
     * A referenced to the summary item is returned, which may be
     * ref'd or free'd as appropriate.
     */
    get(uid: string): MessageInfo | null
    /**
     * Obtain a copy of the summary array.  This is done atomically,
     * so cannot contain empty entries.
     * 
     * Free with camel_folder_summary_free_array()
     */
    get_array(): string[]
    /**
     * Returns an array of changed UID-s. A UID is considered changed
     * when its corresponding CamelMesageInfo is 'dirty' or when it has
     * set the #CAMEL_MESSAGE_FOLDER_FLAGGED flag.
     */
    get_changed(): string[]
    get_deleted_count(): number
    get_flags(): number
    get_folder(): object | null
    /**
     * Returns hash of current stored 'uids' in summary, where key is 'uid'
     * from the string pool, and value is 1. The returned pointer should
     * be freed with g_hash_table_destroy().
     * 
     * Note: When searching for values always use uids from the string pool.
     */
    get_hash(): GLib.HashTable
    get_index(): Index | null
    /**
     * Retrieve CamelMessageInfo::flags for a message info with UID `uid`.
     * This is much quicker than camel_folder_summary_get(), because it
     * doesn't require reading the message info from a disk.
     */
    get_info_flags(uid: string): number
    get_junk_count(): number
    get_junk_not_deleted_count(): number
    get_next_uid(): number
    get_saved_count(): number
    get_timestamp(): number
    get_unread_count(): number
    get_version(): number
    get_visible_count(): number
    /**
     * Loads a summary header for the `summary,` which corresponds to `folder_name`
     * provided by `store`.
     */
    header_load(store: object | null, folder_name: string): boolean
    /**
     * Saves summary header information into the disk. The function does
     * nothing, if the summary doesn't support save to disk.
     */
    header_save(): boolean
    /**
     * Create a new info record from a header.
     */
    info_new_from_headers(headers: NameValueArray): MessageInfo
    /**
     * Create a summary item from a message.
     */
    info_new_from_message(message: MimeMessage): MessageInfo
    /**
     * Create a new info record from a parser.  If the parser cannot
     * determine a uid, then none will be assigned.
     * 
     * If indexing is enabled, and the parser cannot determine a new uid, then
     * one is automatically assigned.
     * 
     * If indexing is enabled, then the content will be indexed based
     * on this new uid.  In this case, the message info MUST be
     * added using :add().
     * 
     * Once complete, the parser will be positioned at the end of
     * the message.
     */
    info_new_from_parser(parser: MimeParser): MessageInfo
    /**
     * Loads the summary from the disk. It also saves any pending
     * changes first.
     */
    load(): boolean
    /**
     * Locks `summary`. Unlock it with camel_folder_summary_unlock().
     */
    lock(): void
    /**
     * Generate a new unique uid value as an integer.  This
     * may be used to create a unique sequence of numbers.
     */
    next_uid(): number
    /**
     * Retrieve the next uid, but as a formatted string.
     */
    next_uid_string(): string
    peek_loaded(uid: string): MessageInfo | null
    /**
     * Loads all infos into memory, if they are not yet and ensures
     * they will not be freed in next couple minutes. Call this function
     * before any mass operation or when all message infos will be needed,
     * for better performance.
     */
    prepare_fetch_all(): void
    /**
     * Remove a specific `info` record from the summary.
     */
    remove(info: MessageInfo): boolean
    /**
     * Remove a specific info record from the summary, by `uid`.
     */
    remove_uid(uid: string): boolean
    /**
     * Remove a specific info record from the summary, by `uid`.
     */
    remove_uids(uids: string[]): boolean
    /**
     * Updates internal counts based on the flags in `info`.
     */
    replace_flags(info: MessageInfo): boolean
    /**
     * Saves the content of the `summary` to disk. It does nothing,
     * when the summary is not changed or when it doesn't support
     * permanent save.
     */
    save(): boolean
    /**
     * Sets flags of the `summary,` a bit-or of #CamelFolderSummaryFlags.
     */
    set_flags(flags: number): void
    /**
     * Set the index used to index body content.  If the index is %NULL, or
     * not set (the default), no indexing of body content will take place.
     */
    set_index(index?: Index | null): void
    /**
     * Set the next minimum uid available.  This can be used to
     * ensure new uid's do not clash with existing uid's.
     */
    set_next_uid(uid: number): void
    /**
     * Sets timestamp of the `summary,` provided by the descendants. This doesn't
     * change the 'dirty' flag of the `summary`.
     */
    set_timestamp(timestamp: number): void
    /**
     * Sets version of the `summary`.
     */
    set_version(version: number): void
    /**
     * Mark the summary as changed, so that a save will force it to be
     * written back to disk.
     */
    touch(): void
    /**
     * Unlocks `summary,` previously locked with camel_folder_summary_lock().
     */
    unlock(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.FolderSummary */
    /**
     * Retrieve a summary item by uid.
     * 
     * A referenced to the summary item is returned, which may be
     * ref'd or free'd as appropriate.
     */
    vfunc_message_info_from_uid(uid: string): MessageInfo | null
    /**
     * Create a new info record from a header.
     */
    vfunc_message_info_new_from_headers(headers: NameValueArray): MessageInfo
    /**
     * Create a summary item from a message.
     */
    vfunc_message_info_new_from_message(message: MimeMessage): MessageInfo
    /**
     * Create a new info record from a parser.  If the parser cannot
     * determine a uid, then none will be assigned.
     * 
     * If indexing is enabled, and the parser cannot determine a new uid, then
     * one is automatically assigned.
     * 
     * If indexing is enabled, then the content will be indexed based
     * on this new uid.  In this case, the message info MUST be
     * added using :add().
     * 
     * Once complete, the parser will be positioned at the end of
     * the message.
     */
    vfunc_message_info_new_from_parser(parser: MimeParser): MessageInfo
    /**
     * Retrieve the next uid, but as a formatted string.
     */
    vfunc_next_uid_string(): string
    vfunc_prepare_fetch_all(): void
    vfunc_summary_header_load(fir?: object | null): boolean
    vfunc_summary_header_save(): object | null
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.FolderSummary */
    connect(sigName: "changed", callback: (($obj: FolderSummary) => void)): number
    connect_after(sigName: "changed", callback: (($obj: FolderSummary) => void)): number
    emit(sigName: "changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::deleted-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deleted-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::junk-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::junk-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::junk-not-deleted-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::junk-not-deleted-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::saved-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::saved-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::unread-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unread-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible-count", callback: (($obj: FolderSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: FolderSummary_ConstructProps)
    _init (config?: FolderSummary_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(folder: Folder): FolderSummary
    /**
     * Free's array and its elements returned from camel_folder_summary_get_array().
     */
    static free_array(array: string[]): void
    static $gtype: GObject.Type
}
interface GpgContext_ConstructProps extends CipherContext_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.GpgContext */
    always_trust?: boolean
    prefer_inline?: boolean
}
class GpgContext {
    /* Properties of Camel-1.2.Camel.GpgContext */
    always_trust: boolean
    prefer_inline: boolean
    /* Fields of Camel-1.2.Camel.CipherContext */
    readonly parent: GObject.Object
    readonly priv: CipherContextPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.GpgContext */
    get_always_trust(): boolean
    get_prefer_inline(): boolean
    /**
     * Sets the `always_trust` flag on the gpg context which is used for
     * encryption.
     */
    set_always_trust(always_trust: boolean): void
    /**
     * Sets the `prefer_inline` flag on the gpg context.
     */
    set_prefer_inline(prefer_inline: boolean): void
    /* Methods of Camel-1.2.Camel.CipherContext */
    /**
     * Asynchronously decrypts `ipart` into `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_decrypt_finish() to get the result of
     * the operation.
     */
    decrypt(ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_decrypt().
     */
    decrypt_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Decrypts `ipart` into `opart`.
     */
    decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Asynchronously encrypts (and optionally signs) the clear-text `ipart` and
     * writes the resulting cipher-text to `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_encrypt_finish() to get the result of
     * the operation.
     */
    encrypt(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_encrypt().
     */
    encrypt_finish(result: Gio.AsyncResult): boolean
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    get_session(): Session
    hash_to_id(hash: CipherHash): string
    id_to_hash(id: string): CipherHash
    /**
     * Asynchronously converts the (unsigned) part `ipart` into a new
     * self-contained MIME part `opart`.  This may be a multipart/signed part,
     * or a simple part for enveloped types.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_cipher_context_sign_finish() to get the result of the operation.
     */
    sign(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_sign().
     */
    sign_finish(result: Gio.AsyncResult): boolean
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously verifies the signature.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_verify_finish() to get the result of
     * the operation.
     */
    verify(ipart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_verify().
     */
    verify_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Verifies the signature.
     */
    verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.CipherContext */
    /**
     * Decrypts `ipart` into `opart`.
     */
    vfunc_decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    vfunc_encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    vfunc_hash_to_id(hash: CipherHash): string
    vfunc_id_to_hash(id: string): CipherHash
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    vfunc_sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Verifies the signature.
     */
    vfunc_verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::always-trust", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::always-trust", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::prefer-inline", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefer-inline", callback: (($obj: GpgContext, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: GpgContext_ConstructProps)
    _init (config?: GpgContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(session: Session): GpgContext
    /* Function overloads */
    static new(session: Session): GpgContext
    static $gtype: GObject.Type
}
interface HTMLParser_ConstructProps extends GObject.Object_ConstructProps {
}
class HTMLParser {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.HTMLParser */
    attr(name: string): string
    /**
     * Provides parsed array of values and attributes. Both arrays are
     * owned by the `hp`.
     */
    attr_list(values?: string[] | null): [ /* returnType */ string[], /* values */ string[] | null ]
    left(lenp: number): string
    set_data(start: string, len: number, last: number): void
    step(datap: string, lenp: number): HTMLParserState
    tag(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: HTMLParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: HTMLParser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: HTMLParser_ConstructProps)
    _init (config?: HTMLParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): HTMLParser
    static $gtype: GObject.Type
}
interface Index_ConstructProps extends GObject.Object_ConstructProps {
}
class Index {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Index */
    add_name(name: string): IndexName | null
    compress(): number
    construct(path: string, flags: number): void
    delete(): number
    /**
     * Deletes the given `name` from `index`.
     */
    delete_name(name: string): void
    find(word: string): IndexCursor | null
    find_name(name: string): IndexCursor | null
    has_name(name: string): number
    rename(path: string): number
    set_normalize(func: IndexNorm): void
    sync(): number
    words(): IndexCursor | null
    write_name(idn: IndexName): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Index */
    vfunc_add_name(name: string): IndexName | null
    vfunc_compress(): number
    vfunc_delete_(): number
    /**
     * Deletes the given `name` from `index`.
     */
    vfunc_delete_name(name: string): void
    vfunc_find(word: string): IndexCursor | null
    vfunc_find_name(name: string): IndexCursor | null
    vfunc_has_name(name: string): number
    vfunc_rename(path: string): number
    vfunc_sync(): number
    vfunc_words(): IndexCursor | null
    vfunc_write_name(idn: IndexName): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Index, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Index, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Index_ConstructProps)
    _init (config?: Index_ConstructProps): void
    static $gtype: GObject.Type
}
interface IndexCursor_ConstructProps extends GObject.Object_ConstructProps {
}
class IndexCursor {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.IndexCursor */
    next(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.IndexCursor */
    vfunc_next(): string
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: IndexCursor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IndexCursor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IndexCursor_ConstructProps)
    _init (config?: IndexCursor_ConstructProps): void
    static $gtype: GObject.Type
}
interface IndexName_ConstructProps extends GObject.Object_ConstructProps {
}
class IndexName {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.IndexName */
    add_buffer(buffer: string, len: number): number
    add_word(word: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.IndexName */
    vfunc_add_buffer(buffer: string, len: number): number
    vfunc_add_word(word: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: IndexName, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: IndexName, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: IndexName_ConstructProps)
    _init (config?: IndexName_ConstructProps): void
    static $gtype: GObject.Type
}
interface InternetAddress_ConstructProps extends Address_ConstructProps {
}
class InternetAddress {
    /* Fields of Camel-1.2.Camel.Address */
    readonly parent: GObject.Object
    readonly priv: AddressPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.InternetAddress */
    /**
     * Add a new internet address to `addr`.
     */
    add(name: string, address: string): number
    /**
     * Ensures that all email address' domains will be ASCII encoded,
     * which means that any non-ASCII letters will be properly encoded.
     * This includes IDN (Internationalized Domain Names).
     */
    ensure_ascii_domains(): void
    /**
     * Find an address by address.
     */
    find_address(address: string): [ /* returnType */ number, /* namep */ string | null ]
    /**
     * Find address by real name.
     */
    find_name(name: string): [ /* returnType */ number, /* addressp */ string | null ]
    /**
     * Get the address at `index`.
     */
    get(index: number): [ /* returnType */ boolean, /* namep */ string | null, /* addressp */ string | null ]
    /**
     * Checks the addresses in `addr` for any suspicious characters in the domain
     * name and coverts those domains into their representation. In contrast to
     * camel_internet_address_ensure_ascii_domains(), this converts the domains
     * into ASCII only when needed, as returned by camel_hostname_utils_requires_ascii().
     */
    sanitize_ascii_domain(): boolean
    /* Methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    cat(source: Address): number
    /**
     * Copy the contents of one address into another.
     */
    copy(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    length(): number
    /**
     * Clone an existing address type.
     */
    new_clone(): Address
    /**
     * Remove an address by index, or all addresses.
     */
    remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    unformat(raw: string): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    vfunc_cat(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    vfunc_decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    vfunc_encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    vfunc_format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    vfunc_length(): number
    /**
     * Remove an address by index, or all addresses.
     */
    vfunc_remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    vfunc_unformat(raw: string): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: InternetAddress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: InternetAddress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: InternetAddress_ConstructProps)
    _init (config?: InternetAddress_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): InternetAddress
    /* Function overloads */
    static new(): InternetAddress
    /**
     * Encode a single address ready for internet usage.  Header folding
     * as per rfc822 is also performed, based on the length *`len`.  If `len`
     * is %NULL, then no folding will occur.
     * 
     * Note: The value at *`in` will be updated based on any linewrapping done
     */
    static encode_address(len: number | null, name: string, addr: string): string
    /**
     * Function to format a single address, suitable for display.
     */
    static format_address(name: string, addr: string): string
    static $gtype: GObject.Type
}
interface KeyFile_ConstructProps extends GObject.Object_ConstructProps {
}
class KeyFile {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.KeyFile */
    delete(): number
    /**
     * Read the next block of data from the key file.  Returns the number of
     * records.
     */
    read(start: _block_t, records?: _key_t[] | null): number
    rename(path: string): number
    /**
     * Write a new list of records to the key file.
     */
    write(parent: _block_t, records: _key_t[]): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: KeyFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: KeyFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: KeyFile_ConstructProps)
    _init (config?: KeyFile_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(path: string, flags: number, version: string): KeyFile
    static $gtype: GObject.Type
}
interface KeyTable_ConstructProps extends GObject.Object_ConstructProps {
}
class KeyTable {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.KeyTable */
    add(key: string, data: _block_t, flags: number): _key_t
    lookup(keyid: _key_t, key: string, flags: number): _block_t
    next(next: _key_t, keyp: string, flagsp: number, datap: _block_t): _key_t
    set_data(keyid: _key_t, data: _block_t): boolean
    set_flags(keyid: _key_t, flags: number, set: number): boolean
    sync(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: KeyTable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: KeyTable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: KeyTable_ConstructProps)
    _init (config?: KeyTable_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bs: BlockFile, root: _block_t): KeyTable
    static $gtype: GObject.Type
}
interface LocalSettings_ConstructProps extends StoreSettings_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.LocalSettings */
    filter_all?: boolean
    filter_junk?: boolean
    maildir_alt_flag_sep?: boolean
    path?: string
}
class LocalSettings {
    /* Properties of Camel-1.2.Camel.LocalSettings */
    filter_all: boolean
    filter_junk: boolean
    maildir_alt_flag_sep: boolean
    path: string
    /* Properties of Camel-1.2.Camel.StoreSettings */
    filter_inbox: boolean
    store_changes_interval: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.LocalSettings */
    /**
     * Thread-safe variation of camel_local_settings_get_path().
     * Use this function when accessing `settings` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_path(): string
    /**
     * Returns whether apply filters in all folders.
     */
    get_filter_all(): boolean
    /**
     * Returns whether to check new messages for junk.
     */
    get_filter_junk(): boolean
    /**
     * Returns, whether the Maildir provider should use alternative
     * flag separator in the file name. When %TRUE, uses an exclamation
     * mark (!), when %FALSE, uses the colon (:). The default
     * is %FALSE, to be consistent with the Maildir specification.
     * The flag separator is flipped on the Windows build.
     */
    get_maildir_alt_flag_sep(): boolean
    /**
     * Returns the file path to the root of the local mail store.
     */
    get_path(): string
    /**
     * Sets whether to apply filters in all folders.
     */
    set_filter_all(filter_all: boolean): void
    /**
     * Sets whether to check new messages for junk.
     */
    set_filter_junk(filter_junk: boolean): void
    /**
     * Sets whether Maildir should use alternative flag separator.
     * See camel_local_settings_get_maildir_alt_flag_sep() for more
     * information on what it means.
     * 
     * Note: Change to this setting takes effect only for newly created
     *     Maildir stores.
     */
    set_maildir_alt_flag_sep(maildir_alt_flag_sep: boolean): void
    /**
     * Sets the file path to the root of the local mail store.  Any
     * trailing directory separator characters will be stripped off
     * of the #CamelLocalSettings:path property.
     */
    set_path(path: string): void
    /* Methods of Camel-1.2.Camel.StoreSettings */
    /**
     * Returns whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    get_filter_inbox(): boolean
    /**
     * Returns the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    get_store_changes_interval(): number
    /**
     * Sets whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    set_filter_inbox(filter_inbox: boolean): void
    /**
     * Sets the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    set_store_changes_interval(interval: number): void
    /* Methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    equal(settings_b: Settings): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    vfunc_clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    vfunc_equal(settings_b: Settings): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filter-all", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-all", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filter-junk", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-junk", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::maildir-alt-flag-sep", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::maildir-alt-flag-sep", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::path", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filter-inbox", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-inbox", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::store-changes-interval", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::store-changes-interval", callback: (($obj: LocalSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: LocalSettings_ConstructProps)
    _init (config?: LocalSettings_ConstructProps): void
    static $gtype: GObject.Type
}
interface Medium_ConstructProps extends DataWrapper_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Medium */
    content?: DataWrapper
}
class Medium {
    /* Properties of Camel-1.2.Camel.Medium */
    content: DataWrapper
    /* Fields of Camel-1.2.Camel.DataWrapper */
    readonly parent: GObject.Object
    readonly priv: DataWrapperPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    set_header(name: string, value?: string | null): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_encoding(): TransferEncoding
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    vfunc_add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    vfunc_dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    vfunc_get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    vfunc_get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    vfunc_get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    vfunc_remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    vfunc_set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    vfunc_set_header(name: string, value?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Medium, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Medium, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content", callback: (($obj: Medium, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: Medium, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Medium_ConstructProps)
    _init (config?: Medium_ConstructProps): void
    static $gtype: GObject.Type
}
interface MessageInfo_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.MessageInfo */
    /**
     * Flag, whether the info is currently aborting notifications. It is used to avoid
     * unnecessary 'folder-flagged' and 'dirty' flags changes and also to avoid
     * associated folder's "changed" signal.
     * f
     */
    abort_notifications?: boolean
    /**
     * CC address of the associated message.
     */
    cc?: string
    /**
     * Received date of the associated message.
     */
    date_received?: number
    /**
     * Sent Date of the associated message.
     */
    date_sent?: number
    /**
     * Flag, whether the info is changed and requires save to disk.
     * Compare with CamelMessageInfo:folder-flagged
     */
    dirty?: boolean
    /**
     * Bit-or of #CamelMessageFlags.
     */
    flags?: MessageFlags
    /**
     * Flag, whether the info is changed and requires save to
     * the destination store/server. This is different from
     * the CamelMessageInfo:dirty, which takes care of the local
     * information only.
     */
    folder_flagged?: boolean
    /**
     * From address of the associated message.
     */
    from?: string
    /**
     * Headers of the associated message. Can be %NULL.
     */
    headers?: NameValueArray
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    message_id?: number
    /**
     * Mailing list address of the associated message.
     */
    mlist?: string
    /**
     * Body preview of the associated message. Can be %NULL.
     */
    preview?: string
    /**
     * Encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     */
    references?: object[]
    /**
     * Size of the associated message.
     */
    size?: number
    /**
     * Subject of the associated message.
     */
    subject?: string
    /**
     * The #CamelFolderSummary to which the message info belongs, or %NULL.
     * It can be set only during construction of the object.
     */
    summary?: FolderSummary
    /**
     * To address of the associated message.
     */
    to?: string
    /**
     * A unique ID of the message in its folder.
     */
    uid?: string
    /**
     * User flags for the associated message. Can be %NULL.
     * Unlike user-tags, which can contain various values, the user-flags
     * can only be set or not.
     */
    user_flags?: NamedFlags
    /**
     * User-defined headers of the associated message. Can be %NULL.
     */
    user_headers?: NameValueArray
    /**
     * User tags for the associated message. Can be %NULL.
     * Unlike user-flags, which can be set or not, the user-tags
     * can contain various values.
     */
    user_tags?: NameValueArray
}
class MessageInfo {
    /* Properties of Camel-1.2.Camel.MessageInfo */
    /**
     * Flag, whether the info is currently aborting notifications. It is used to avoid
     * unnecessary 'folder-flagged' and 'dirty' flags changes and also to avoid
     * associated folder's "changed" signal.
     * f
     */
    abort_notifications: boolean
    /**
     * CC address of the associated message.
     */
    cc: string
    /**
     * Received date of the associated message.
     */
    date_received: number
    /**
     * Sent Date of the associated message.
     */
    date_sent: number
    /**
     * Flag, whether the info is changed and requires save to disk.
     * Compare with CamelMessageInfo:folder-flagged
     */
    dirty: boolean
    /**
     * Bit-or of #CamelMessageFlags.
     */
    flags: MessageFlags
    /**
     * Flag, whether the info is changed and requires save to
     * the destination store/server. This is different from
     * the CamelMessageInfo:dirty, which takes care of the local
     * information only.
     */
    folder_flagged: boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` 'folder-flagged', regardless the `mi`
     * being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    readonly folder_flagged_stamp: number
    /**
     * From address of the associated message.
     */
    from: string
    /**
     * Headers of the associated message. Can be %NULL.
     */
    headers: NameValueArray
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    message_id: number
    /**
     * Mailing list address of the associated message.
     */
    mlist: string
    /**
     * Body preview of the associated message. Can be %NULL.
     */
    preview: string
    /**
     * Encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     */
    references: object[]
    /**
     * Size of the associated message.
     */
    size: number
    /**
     * Subject of the associated message.
     */
    subject: string
    /**
     * To address of the associated message.
     */
    to: string
    /**
     * A unique ID of the message in its folder.
     */
    uid: string
    /**
     * User flags for the associated message. Can be %NULL.
     * Unlike user-tags, which can contain various values, the user-flags
     * can only be set or not.
     */
    user_flags: NamedFlags
    /**
     * User-defined headers of the associated message. Can be %NULL.
     */
    user_headers: NameValueArray
    /**
     * User tags for the associated message. Can be %NULL.
     * Unlike user-flags, which can be set or not, the user-tags
     * can contain various values.
     */
    user_tags: NameValueArray
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    clone(assign_summary?: FolderSummary | null): MessageInfo
    /**
     * Dumps the mesasge info `mi` to stdout. This is meand for debugging
     * purposes only.
     */
    dump(): void
    /**
     * Duplicates array of headers for the `mi`.
     */
    dup_headers(): NameValueArray | null
    dup_preview(): string | null
    /**
     * Duplicates encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    dup_references(): number[] | null
    dup_user_flags(): NamedFlags | null
    dup_user_header(name: string): string | null
    dup_user_headers(): NameValueArray | null
    dup_user_tag(name: string): string | null
    dup_user_tags(): NameValueArray | null
    /**
     * Freezes all the notifications until the camel_message_info_thaw_notifications() is called.
     * This function can be called multiple times, where the last thaw will do the notifications.
     */
    freeze_notifications(): void
    get_abort_notifications(): boolean
    get_cc(): string
    get_date_received(): number
    get_date_sent(): number
    get_dirty(): boolean
    get_flags(): number
    /**
     * The folder flagged flag is used to mark the message infor as being changed
     * and this change should be propagated to the remote store (server). This is
     * different from the 'dirty' flag, which is set for local changes only. It
     * can happen that the 'folder-flagged' flag is set, but the 'dirty' flag not.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    get_folder_flagged(): boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` as 'folder-flagged', regardless
     * the `mi` being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    get_folder_flagged_stamp(): number
    get_from(): string
    get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    get_message_id(): number
    get_mlist(): string
    get_notifications_frozen(): boolean
    get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    get_references(): number[] | null
    get_size(): number
    get_subject(): string
    get_to(): string
    /**
     * Get the UID of the #mi.
     */
    get_uid(): string
    get_user_flag(name: string): boolean
    get_user_flags(): NamedFlags | null
    get_user_header(name: string): string | null
    get_user_headers(): NameValueArray | null
    get_user_tag(name: string): string | null
    get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    load(record: MIRecord, bdata_ptr: string): boolean
    /**
     * Get the UID of the #mi, duplicated on the Camel's string pool.
     * This is good for thread safety, though the UID should not change once set.
     */
    pooldup_uid(): string
    /**
     * Acquires a property lock, which is used to ensure thread safety
     * when properties are changing. Release the lock with
     * camel_message_info_property_unlock().
     * 
     * Note: Make sure the CamelFolderSummary lock is held before this lock,
     * if there will be called any 'set' function on the `mi,` to avoid deadlock
     * when the summary would be set as dirty while another thread might try
     * to read values from the `mi,` waiting for the property lock and holding
     * the summary lock at the same time.
     */
    property_lock(): void
    /**
     * Releases a property lock, previously acquired with
     * camel_message_info_property_lock().
     */
    property_unlock(): void
    ref_summary(): object | null
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    save(record: MIRecord, bdata_str: GLib.String): boolean
    /**
     * Marks the `mi` to abort any notifications, which means that it
     * will not influence 'dirty' and 'folder-flagged' flags in
     * the set/take functions, neither it will emit any GObject::notify
     * signals on change, nor associated folder's "changed" signal.
     */
    set_abort_notifications(abort_notifications: boolean): void
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_sent(date_sent: number): boolean
    /**
     * Marks the `mi` as dirty, which means a save to the local summary
     * is required.
     */
    set_dirty(dirty: boolean): void
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    set_flags(mask: number, set: number): boolean
    /**
     * Changes the folder-flagged flag to the `folder_flagged` value. See
     * camel_message_info_get_folder_flagged() for more information about
     * the use of this flag.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    set_folder_flagged(folder_flagged: boolean): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_to(to?: string | null): boolean
    /**
     * Changes UID of the `mi` to `uid`. If it changes, the 'dirty' flag
     * of the `mi` is set too, unless the `mi` is aborting notifications. This change
     * does not influence the 'folder-flagged' flag.
     */
    set_uid(uid: string): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_tags(user_tags?: NameValueArray | null): boolean
    /**
     * Reverses the call of the camel_message_info_freeze_notifications().
     * If this is the last freeze, then the associated folder is also notified
     * about the change, if any happened during the freeze.
     */
    thaw_notifications(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    vfunc_clone(assign_summary?: FolderSummary | null): MessageInfo
    vfunc_dup_user_flags(): NamedFlags | null
    vfunc_dup_user_tags(): NameValueArray | null
    vfunc_get_cc(): string
    vfunc_get_date_received(): number
    vfunc_get_date_sent(): number
    vfunc_get_flags(): number
    vfunc_get_from(): string
    vfunc_get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_message_id(): number
    vfunc_get_mlist(): string
    vfunc_get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_references(): number[] | null
    vfunc_get_size(): number
    vfunc_get_subject(): string
    vfunc_get_to(): string
    vfunc_get_user_flag(name: string): boolean
    vfunc_get_user_flags(): NamedFlags | null
    vfunc_get_user_header(name: string): string | null
    vfunc_get_user_headers(): NameValueArray | null
    vfunc_get_user_tag(name: string): string | null
    vfunc_get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    vfunc_load(record: MIRecord | null, bdata_ptr: string): boolean
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    vfunc_save(record: MIRecord | null, bdata_str: GLib.String): boolean
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_sent(date_sent: number): boolean
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    vfunc_set_flags(mask: number, set: number): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_to(to?: string | null): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_tags(user_tags?: NameValueArray | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abort-notifications", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abort-notifications", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cc", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cc", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-received", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-received", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-sent", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-sent", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dirty", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dirty", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged-stamp", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged-stamp", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::from", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::headers", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::headers", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::message-id", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-id", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mlist", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mlist", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::preview", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preview", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::references", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::references", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subject", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subject", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::to", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uid", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uid", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-flags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-flags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-headers", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-headers", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-tags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-tags", callback: (($obj: MessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MessageInfo_ConstructProps)
    _init (config?: MessageInfo_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(summary?: FolderSummary | null): MessageInfo
    static new_from_headers(summary: FolderSummary | null, headers: NameValueArray): MessageInfo
    static $gtype: GObject.Type
}
interface MessageInfoBase_ConstructProps extends MessageInfo_ConstructProps {
}
class MessageInfoBase {
    /* Properties of Camel-1.2.Camel.MessageInfo */
    /**
     * Flag, whether the info is currently aborting notifications. It is used to avoid
     * unnecessary 'folder-flagged' and 'dirty' flags changes and also to avoid
     * associated folder's "changed" signal.
     * f
     */
    abort_notifications: boolean
    /**
     * CC address of the associated message.
     */
    cc: string
    /**
     * Received date of the associated message.
     */
    date_received: number
    /**
     * Sent Date of the associated message.
     */
    date_sent: number
    /**
     * Flag, whether the info is changed and requires save to disk.
     * Compare with CamelMessageInfo:folder-flagged
     */
    dirty: boolean
    /**
     * Bit-or of #CamelMessageFlags.
     */
    flags: MessageFlags
    /**
     * Flag, whether the info is changed and requires save to
     * the destination store/server. This is different from
     * the CamelMessageInfo:dirty, which takes care of the local
     * information only.
     */
    folder_flagged: boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` 'folder-flagged', regardless the `mi`
     * being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    readonly folder_flagged_stamp: number
    /**
     * From address of the associated message.
     */
    from: string
    /**
     * Headers of the associated message. Can be %NULL.
     */
    headers: NameValueArray
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    message_id: number
    /**
     * Mailing list address of the associated message.
     */
    mlist: string
    /**
     * Body preview of the associated message. Can be %NULL.
     */
    preview: string
    /**
     * Encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     */
    references: object[]
    /**
     * Size of the associated message.
     */
    size: number
    /**
     * Subject of the associated message.
     */
    subject: string
    /**
     * To address of the associated message.
     */
    to: string
    /**
     * A unique ID of the message in its folder.
     */
    uid: string
    /**
     * User flags for the associated message. Can be %NULL.
     * Unlike user-tags, which can contain various values, the user-flags
     * can only be set or not.
     */
    user_flags: NamedFlags
    /**
     * User-defined headers of the associated message. Can be %NULL.
     */
    user_headers: NameValueArray
    /**
     * User tags for the associated message. Can be %NULL.
     * Unlike user-flags, which can be set or not, the user-tags
     * can contain various values.
     */
    user_tags: NameValueArray
    /* Fields of Camel-1.2.Camel.MessageInfo */
    readonly parent: GObject.Object
    readonly priv: MessageInfoPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    clone(assign_summary?: FolderSummary | null): MessageInfo
    /**
     * Dumps the mesasge info `mi` to stdout. This is meand for debugging
     * purposes only.
     */
    dump(): void
    /**
     * Duplicates array of headers for the `mi`.
     */
    dup_headers(): NameValueArray | null
    dup_preview(): string | null
    /**
     * Duplicates encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    dup_references(): number[] | null
    dup_user_flags(): NamedFlags | null
    dup_user_header(name: string): string | null
    dup_user_headers(): NameValueArray | null
    dup_user_tag(name: string): string | null
    dup_user_tags(): NameValueArray | null
    /**
     * Freezes all the notifications until the camel_message_info_thaw_notifications() is called.
     * This function can be called multiple times, where the last thaw will do the notifications.
     */
    freeze_notifications(): void
    get_abort_notifications(): boolean
    get_cc(): string
    get_date_received(): number
    get_date_sent(): number
    get_dirty(): boolean
    get_flags(): number
    /**
     * The folder flagged flag is used to mark the message infor as being changed
     * and this change should be propagated to the remote store (server). This is
     * different from the 'dirty' flag, which is set for local changes only. It
     * can happen that the 'folder-flagged' flag is set, but the 'dirty' flag not.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    get_folder_flagged(): boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` as 'folder-flagged', regardless
     * the `mi` being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    get_folder_flagged_stamp(): number
    get_from(): string
    get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    get_message_id(): number
    get_mlist(): string
    get_notifications_frozen(): boolean
    get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    get_references(): number[] | null
    get_size(): number
    get_subject(): string
    get_to(): string
    /**
     * Get the UID of the #mi.
     */
    get_uid(): string
    get_user_flag(name: string): boolean
    get_user_flags(): NamedFlags | null
    get_user_header(name: string): string | null
    get_user_headers(): NameValueArray | null
    get_user_tag(name: string): string | null
    get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    load(record: MIRecord, bdata_ptr: string): boolean
    /**
     * Get the UID of the #mi, duplicated on the Camel's string pool.
     * This is good for thread safety, though the UID should not change once set.
     */
    pooldup_uid(): string
    /**
     * Acquires a property lock, which is used to ensure thread safety
     * when properties are changing. Release the lock with
     * camel_message_info_property_unlock().
     * 
     * Note: Make sure the CamelFolderSummary lock is held before this lock,
     * if there will be called any 'set' function on the `mi,` to avoid deadlock
     * when the summary would be set as dirty while another thread might try
     * to read values from the `mi,` waiting for the property lock and holding
     * the summary lock at the same time.
     */
    property_lock(): void
    /**
     * Releases a property lock, previously acquired with
     * camel_message_info_property_lock().
     */
    property_unlock(): void
    ref_summary(): object | null
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    save(record: MIRecord, bdata_str: GLib.String): boolean
    /**
     * Marks the `mi` to abort any notifications, which means that it
     * will not influence 'dirty' and 'folder-flagged' flags in
     * the set/take functions, neither it will emit any GObject::notify
     * signals on change, nor associated folder's "changed" signal.
     */
    set_abort_notifications(abort_notifications: boolean): void
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_sent(date_sent: number): boolean
    /**
     * Marks the `mi` as dirty, which means a save to the local summary
     * is required.
     */
    set_dirty(dirty: boolean): void
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    set_flags(mask: number, set: number): boolean
    /**
     * Changes the folder-flagged flag to the `folder_flagged` value. See
     * camel_message_info_get_folder_flagged() for more information about
     * the use of this flag.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    set_folder_flagged(folder_flagged: boolean): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_to(to?: string | null): boolean
    /**
     * Changes UID of the `mi` to `uid`. If it changes, the 'dirty' flag
     * of the `mi` is set too, unless the `mi` is aborting notifications. This change
     * does not influence the 'folder-flagged' flag.
     */
    set_uid(uid: string): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_tags(user_tags?: NameValueArray | null): boolean
    /**
     * Reverses the call of the camel_message_info_freeze_notifications().
     * If this is the last freeze, then the associated folder is also notified
     * about the change, if any happened during the freeze.
     */
    thaw_notifications(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    vfunc_clone(assign_summary?: FolderSummary | null): MessageInfo
    vfunc_dup_user_flags(): NamedFlags | null
    vfunc_dup_user_tags(): NameValueArray | null
    vfunc_get_cc(): string
    vfunc_get_date_received(): number
    vfunc_get_date_sent(): number
    vfunc_get_flags(): number
    vfunc_get_from(): string
    vfunc_get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_message_id(): number
    vfunc_get_mlist(): string
    vfunc_get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_references(): number[] | null
    vfunc_get_size(): number
    vfunc_get_subject(): string
    vfunc_get_to(): string
    vfunc_get_user_flag(name: string): boolean
    vfunc_get_user_flags(): NamedFlags | null
    vfunc_get_user_header(name: string): string | null
    vfunc_get_user_headers(): NameValueArray | null
    vfunc_get_user_tag(name: string): string | null
    vfunc_get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    vfunc_load(record: MIRecord | null, bdata_ptr: string): boolean
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    vfunc_save(record: MIRecord | null, bdata_str: GLib.String): boolean
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_sent(date_sent: number): boolean
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    vfunc_set_flags(mask: number, set: number): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_to(to?: string | null): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_tags(user_tags?: NameValueArray | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abort-notifications", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abort-notifications", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cc", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cc", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-received", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-received", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-sent", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-sent", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dirty", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dirty", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged-stamp", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged-stamp", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::from", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::headers", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::headers", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::message-id", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-id", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mlist", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mlist", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::preview", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preview", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::references", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::references", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subject", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subject", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::to", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uid", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uid", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-flags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-flags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-headers", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-headers", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-tags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-tags", callback: (($obj: MessageInfoBase, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MessageInfoBase_ConstructProps)
    _init (config?: MessageInfoBase_ConstructProps): void
    static $gtype: GObject.Type
}
interface MimeFilter_ConstructProps extends GObject.Object_ConstructProps {
}
class MimeFilter {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilter_ConstructProps)
    _init (config?: MimeFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeFilter
    static $gtype: GObject.Type
}
interface MimeFilterBasic_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterBasic {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterBasic, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterBasic, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterBasic_ConstructProps)
    _init (config?: MimeFilterBasic_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(type: MimeFilterBasicType): MimeFilterBasic
    /* Function overloads */
    static new(): MimeFilterBasic
    static $gtype: GObject.Type
}
interface MimeFilterBestenc_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterBestenc {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilterBestenc */
    /**
     * Gets the best charset that can be used to contain this content.
     */
    get_best_charset(): string
    /**
     * Get the best encoding, given specific constraints, that can be used to
     * encode a stream of bytes.
     */
    get_best_encoding(required: BestencEncoding): TransferEncoding
    /**
     * Set the flags for subsequent operations.
     */
    set_flags(flags: number): void
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterBestenc, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterBestenc, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterBestenc_ConstructProps)
    _init (config?: MimeFilterBestenc_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(flags: number): MimeFilterBestenc
    /* Function overloads */
    static new(): MimeFilterBestenc
    static $gtype: GObject.Type
}
interface MimeFilterCRLF_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterCRLF {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilterCRLF */
    get_ensure_crlf_end(): boolean
    /**
     * When set to true, the filter will ensure that the output stream will
     * end with CRLF, in case it does not. The default is to not do that.
     * The option is used only when encoding the stream.
     */
    set_ensure_crlf_end(ensure_crlf_end: boolean): void
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterCRLF, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterCRLF, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterCRLF_ConstructProps)
    _init (config?: MimeFilterCRLF_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(direction: MimeFilterCRLFDirection, mode: MimeFilterCRLFMode): MimeFilterCRLF
    /* Function overloads */
    static new(): MimeFilterCRLF
    static $gtype: GObject.Type
}
interface MimeFilterCanon_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterCanon {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterCanon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterCanon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterCanon_ConstructProps)
    _init (config?: MimeFilterCanon_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(flags: MimeFilterCanonFlags): MimeFilterCanon
    /* Function overloads */
    static new(): MimeFilterCanon
    static $gtype: GObject.Type
}
interface MimeFilterCharset_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterCharset {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterCharset, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterCharset, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterCharset_ConstructProps)
    _init (config?: MimeFilterCharset_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(from_charset: string, to_charset: string): MimeFilterCharset
    /* Function overloads */
    static new(): MimeFilterCharset
    static $gtype: GObject.Type
}
interface MimeFilterEnriched_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterEnriched {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterEnriched, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterEnriched, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterEnriched_ConstructProps)
    _init (config?: MimeFilterEnriched_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(flags: MimeFilterEnrichedFlags): MimeFilterEnriched
    /* Function overloads */
    static new(): MimeFilterEnriched
    static $gtype: GObject.Type
}
interface MimeFilterFrom_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterFrom {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterFrom, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterFrom, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterFrom_ConstructProps)
    _init (config?: MimeFilterFrom_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeFilterFrom
    static $gtype: GObject.Type
}
interface MimeFilterGZip_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterGZip {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterGZip, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterGZip, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterGZip_ConstructProps)
    _init (config?: MimeFilterGZip_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(mode: MimeFilterGZipMode, level: number): MimeFilterGZip
    /* Function overloads */
    static new(): MimeFilterGZip
    static $gtype: GObject.Type
}
interface MimeFilterHTML_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterHTML {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterHTML, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterHTML, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterHTML_ConstructProps)
    _init (config?: MimeFilterHTML_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeFilterHTML
    static $gtype: GObject.Type
}
interface MimeFilterIndex_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterIndex {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilterIndex */
    /**
     * Set `index` on `filter`.
     */
    set_index(index: Index): void
    /**
     * Set the match name for any indexed words.
     */
    set_name(name: IndexName): void
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterIndex, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterIndex, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterIndex_ConstructProps)
    _init (config?: MimeFilterIndex_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(index: Index): MimeFilterIndex
    /* Function overloads */
    static new(): MimeFilterIndex
    static $gtype: GObject.Type
}
interface MimeFilterLinewrap_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterLinewrap {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterLinewrap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterLinewrap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterLinewrap_ConstructProps)
    _init (config?: MimeFilterLinewrap_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(preferred_len: number, max_len: number, indent_char: number, flags: number): MimeFilterLinewrap
    /* Function overloads */
    static new(): MimeFilterLinewrap
    static $gtype: GObject.Type
}
interface MimeFilterPgp_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterPgp {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterPgp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterPgp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterPgp_ConstructProps)
    _init (config?: MimeFilterPgp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeFilterPgp
    static $gtype: GObject.Type
}
interface MimeFilterProgress_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterProgress {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterProgress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterProgress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterProgress_ConstructProps)
    _init (config?: MimeFilterProgress_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(cancellable: Gio.Cancellable | null, total: number): MimeFilterProgress
    /* Function overloads */
    static new(): MimeFilterProgress
    static $gtype: GObject.Type
}
interface MimeFilterToHTML_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterToHTML {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterToHTML, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterToHTML, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterToHTML_ConstructProps)
    _init (config?: MimeFilterToHTML_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(flags: MimeFilterToHTMLFlags, color: number): MimeFilterToHTML
    /* Function overloads */
    static new(): MimeFilterToHTML
    static $gtype: GObject.Type
}
interface MimeFilterWindows_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterWindows {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilterWindows */
    /**
     * Get whether or not the textual content filtered by `filter` is
     * really in a Microsoft Windows charset rather than the claimed ISO
     * charset.
     */
    is_windows_charset(): boolean
    /**
     * Get the name of the actual charset used to encode the textual
     * content filtered by `filter` (it will either be the original
     * claimed_charset passed in at creation time or the Windows-CP125x
     * equivalent).
     */
    real_charset(): string
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterWindows, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterWindows, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterWindows_ConstructProps)
    _init (config?: MimeFilterWindows_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(claimed_charset: string): MimeFilterWindows
    /* Function overloads */
    static new(): MimeFilterWindows
    static $gtype: GObject.Type
}
interface MimeFilterYenc_ConstructProps extends MimeFilter_ConstructProps {
}
class MimeFilterYenc {
    /* Fields of Camel-1.2.Camel.MimeFilter */
    readonly parent: GObject.Object
    readonly priv: MimeFilterPrivate
    readonly outreal: string
    readonly outbuf: string
    readonly outptr: string
    readonly outsize: number
    readonly outpre: number
    readonly backbuf: string
    readonly backsize: number
    readonly backlen: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeFilterYenc */
    /**
     * Get the computed crc or (#guint32) -1 on fail.
     */
    get_crc(): number
    /**
     * Get the computed part crc or (#guint32) -1 on fail.
     */
    get_pcrc(): number
    /**
     * Sets the current crc32 value on the yEnc filter `yenc` to `crc`.
     */
    set_crc(crc: number): void
    /**
     * Sets the current state of the yencoder/ydecoder
     */
    set_state(state: number): void
    /* Methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Saves `data` to be used as prespace input data to the next call to
     * camel_mime_filter_filter() or camel_mime_filter_complete().
     * 
     * Note: New calls replace old data.
     */
    backup(data: Uint8Array): void
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    reset(): void
    /**
     * Ensure that `filter` has enough storage space to store `size` bytes
     * for filter output.
     */
    set_size(size: number, keep: number): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeFilter */
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out` and makes sure that all data is flushed to the
     * output buffer. This must be the last filtering call made, no
     * further calls to camel_mime_filter_filter() may be called on `filter`
     * until `filter` has been reset using camel_mime_filter_reset().
     */
    vfunc_complete(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Passes the input buffer, `in,` through `filter` and generates an
     * output buffer, `out`.
     */
    vfunc_filter(in_: Uint8Array, prespace: number): [ /* out */ Uint8Array, /* outprespace */ number ]
    /**
     * Resets the state on `filter` so that it may be used again.
     */
    vfunc_reset(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeFilterYenc, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeFilterYenc, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeFilterYenc_ConstructProps)
    _init (config?: MimeFilterYenc_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(direction: MimeFilterYencDirection): MimeFilterYenc
    /* Function overloads */
    static new(): MimeFilterYenc
    static $gtype: GObject.Type
}
interface MimeMessage_ConstructProps extends MimePart_ConstructProps {
}
class MimeMessage {
    /* Properties of Camel-1.2.Camel.MimePart */
    content_id: string
    content_md5: string
    description: string
    disposition: string
    /* Properties of Camel-1.2.Camel.Medium */
    content: DataWrapper
    /* Fields of Camel-1.2.Camel.MimePart */
    readonly parent: Medium
    readonly priv: MimePartPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeMessage */
    /**
     * Build an MBox from-line from `message`.
     */
    build_mbox_from(): string
    /**
     * Dump information about the mime message to stdout.
     * 
     * If body is TRUE, then dump body content of the message as well.
     */
    dump(body: number): void
    /**
     * Encode all message parts to a suitable transfer encoding for transport (7bit clean).
     */
    encode_8bit_parts(): void
    /**
     * Calls `callback` for each part of the `message,` including the message itself.
     * The traverse of the `message` parts can be stopped when the `callback`
     * returns %FALSE.
     */
    foreach_part(): void
    /**
     * Get the date and UTC offset of a message.
     * See camel_mime_message_set_date() for information about the `offset` format.
     */
    get_date(): [ /* returnType */ number, /* offset */ number ]
    /**
     * Get the received date and UTC offset of a message.
     * See camel_mime_message_set_date() for information about the `offset` format.
     */
    get_date_received(): [ /* returnType */ number, /* offset */ number ]
    /**
     * Get the from address of a message.
     */
    get_from(): InternetAddress | null
    /**
     * Get the message-id of a message.
     */
    get_message_id(): string | null
    /**
     * Get a MIME part by id from a message.
     */
    get_part_by_content_id(content_id: string): MimePart | null
    /**
     * Get the message recipients of a specified type.
     */
    get_recipients(type: string): InternetAddress | null
    /**
     * Get the Reply-To of a message.
     */
    get_reply_to(): InternetAddress | null
    /**
     * Get the UID of the source account of the message.
     */
    get_source(): string | null
    /**
     * Get the UTF-8 subject text of a message.
     */
    get_subject(): string | null
    /**
     * Find out if a message contains 8bit or binary encoded parts.
     */
    has_8bit_parts(): boolean
    /**
     * Returns whether message contains at least one attachment part.
     */
    has_attachment(): boolean
    /**
     * Re-encode all message parts to conform with the required encoding rules.
     * 
     * If `enctype` is #CAMEL_BESTENC_7BIT, then all parts will be re-encoded into
     * one of the 7bit transfer encodings. If `enctype` is #CAMEL_BESTENC_8BIT, all
     * parts will be re-encoded to either a 7bit encoding or, if the part is 8bit
     * text, allowed to stay 8bit. If `enctype` is #CAMEL_BESTENC_BINARY, then binary
     * parts will be encoded as binary and 8bit textual parts will be encoded as 8bit.
     */
    set_best_encoding(required: BestencRequired, enctype: BestencEncoding): void
    /**
     * Set the date on a message.
     * 
     * In most cases, this is used to set the current date:
     * 
     * ```c
     * camel_mime_message_set_date (message, CAMEL_MESSAGE_DATE_CURRENT, 0);
     * ```
     * 
     */
    set_date(date: number, offset: number): void
    /**
     * Set the from address of a message.
     */
    set_from(from?: InternetAddress | null): void
    /**
     * Set the message-id on a message.
     */
    set_message_id(message_id?: string | null): void
    /**
     * Set the recipients of a message.
     */
    set_recipients(type: string, recipients?: InternetAddress | null): void
    /**
     * Set the Reply-To of a message.
     */
    set_reply_to(reply_to?: InternetAddress | null): void
    /**
     * Set the UID of the source account of the message.
     */
    set_source(source_uid?: string | null): void
    /**
     * Set the subject text of a message.
     */
    set_subject(subject?: string | null): void
    /* Methods of Camel-1.2.Camel.MimePart */
    /**
     * Constructs the contnet of `mime_part` from the given mime parser.
     */
    construct_content_from_parser(mp: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs a MIME part from a parser.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_mime_part_construct_from_parser_finish() to get the result of
     * the operation.
     */
    construct_from_parser(parser: MimeParser, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_mime_part_construct_from_parser().
     */
    construct_from_parser_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs a MIME part from a parser.
     */
    construct_from_parser_sync(parser: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Get the disposition of the MIME part as a structure.
     * Returned pointer is owned by `mime_part`.
     */
    get_content_disposition(): ContentDisposition | null
    /**
     * Get the content-id field of a MIME part.
     */
    get_content_id(): string | null
    /**
     * Get the Content-Languages set on the MIME part.
     */
    get_content_languages(): string[] | null
    /**
     * Get the content-location field of a MIME part.
     */
    get_content_location(): string | null
    /**
     * Get the content-md5 field of the MIME part.
     */
    get_content_md5(): string | null
    /**
     * Get the Content-Type of a MIME part.
     */
    get_content_type(): ContentType | null
    /**
     * Get the description of the MIME part.
     */
    get_description(): string | null
    /**
     * Get the disposition of the MIME part.
     */
    get_disposition(): string | null
    /**
     * Get the Content-Transfer-Encoding of a MIME part.
     */
    get_encoding(): TransferEncoding
    /**
     * Get the filename of a MIME part.
     */
    get_filename(): string | null
    /**
     * Utility function used to set the content of a mime part object to
     * be the provided data. If `length` is 0, this routine can be used as
     * a way to remove old content (in which case `data` and `type` are
     * ignored and may be %NULL).
     */
    set_content(data: Uint8Array | null, type?: string | null): void
    /**
     * Set the content-id field on a MIME part.
     */
    set_content_id(contentid?: string | null): void
    /**
     * Set the Content-Languages field of a MIME part.
     */
    set_content_languages(content_languages?: string[] | null): void
    /**
     * Set the content-location field of the MIME part.
     */
    set_content_location(location?: string | null): void
    /**
     * Set the content-md5 field of the MIME part.
     */
    set_content_md5(md5sum?: string | null): void
    /**
     * Set the content-type on a MIME part.
     */
    set_content_type(content_type?: string | null): void
    /**
     * Set a description on the MIME part.
     */
    set_description(description: string): void
    /**
     * Set a disposition on the MIME part.
     */
    set_disposition(disposition?: string | null): void
    /**
     * Set the Content-Transfer-Encoding to use on a MIME part.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * Set the filename on a MIME part.
     */
    set_filename(filename?: string | null): void
    /* Methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    set_header(name: string, value?: string | null): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimePart */
    /**
     * Constructs a MIME part from a parser.
     */
    vfunc_construct_from_parser_sync(parser: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    vfunc_add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    vfunc_dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    vfunc_get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    vfunc_get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    vfunc_get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    vfunc_remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    vfunc_set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    vfunc_set_header(name: string, value?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content-id", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-id", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-md5", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-md5", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::disposition", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disposition", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: MimeMessage, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeMessage_ConstructProps)
    _init (config?: MimeMessage_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeMessage
    /* Function overloads */
    static new(): MimeMessage
    static new(): MimeMessage
    static $gtype: GObject.Type
}
interface MimeParser_ConstructProps extends GObject.Object_ConstructProps {
}
class MimeParser {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimeParser */
    /**
     * Get the content type defined in the current part.
     */
    content_type(): ContentType | null
    /**
     * Drop the last step call.  This should only be used
     * in conjunction with seeking of the stream as the
     * stream may be in an undefined state relative to the
     * state of the parser.
     * 
     * Use this call with care.
     */
    drop_step(): void
    /**
     * Get the list of the raw headers which are defined for the
     * current state of the parser.  These headers are valid
     * until the next call to camel_mime_parser_step(), or camel_mime_parser_drop_step().
     */
    dup_headers(): NameValueArray | null
    errno(): number
    /**
     * Add a filter that will be applied to any body content before it is passed
     * to the caller.  Filters may be pipelined to perform multi-pass operations
     * on the content, and are applied in the order they were added.
     * 
     * Note that filters are only applied to the body content of messages, and once
     * a filter has been set, all content returned by a camel_mime_parser_step()
     * with a state of CAMEL_MIME_PARSER_STATE_BODY will have passed through the
     * filter.
     */
    filter_add(mf: MimeFilter): number
    /**
     * Remove a processing filter from the pipeline.  There is no
     * restriction on the order the filters can be removed.
     */
    filter_remove(id: number): void
    /**
     * Get the last scanned "From " line, from a recently scanned from.
     * This should only be called in the CAMEL_MIME_PARSER_STATE_FROM state.  The
     * from line will include the closing \n found (if there was one).
     * 
     * The return value will remain valid while in the CAMEL_MIME_PARSER_STATE_FROM
     * state, or any deeper state.
     */
    from_line(): string | null
    /**
     * Lookup a header by name.
     */
    header(name: string, offset: number): string | null
    /**
     * Convenience function creates a #GMemoryInputStream from `bytes` and hands
     * it off to camel_mime_parser_init_with_input_stream().
     */
    init_with_bytes(bytes: GLib.Bytes): void
    /**
     * Initialise the scanner with an fd.  The scanner's offsets
     * will be relative to the current file position of the file
     * descriptor.  As a result, seekable descritors should
     * be seeked using the parser seek functions.
     */
    init_with_fd(fd: number): number
    /**
     * Initialize the scanner with `input_stream`.  The scanner's offsets will
     * be relative to the current file position of the stream.  As a result,
     * seekable streams should only be seeked using the parser seek function.
     */
    init_with_input_stream(input_stream: Gio.InputStream): void
    /**
     * Initialise the scanner with a source stream.  The scanner's
     * offsets will be relative to the current file position of
     * the stream.  As a result, seekable streams should only
     * be seeked using the parser seek function.
     */
    init_with_stream(stream: Stream): number
    /**
     * Retrieve the postface text for the current multipart.
     * Only returns valid data when the current state if
     * CAMEL_MIME_PARSER_STATE_MULTIPART_END.
     */
    postface(): string | null
    /**
     * Retrieve the preface text for the current multipart.
     * Can only be used when the state is CAMEL_MIME_PARSER_STATE_MULTIPART_END.
     */
    preface(): string | null
    /**
     * Pre-load a new parser state.  Used to post-parse multipart content
     * without headers.
     */
    push_state(newstate: MimeParserState, boundary: string): void
    /**
     * Read at most `len` bytes from the internal mime parser buffer.
     * 
     * Returns the address of the internal buffer in `databuffer,`
     * and the length of useful data.
     * 
     * `len` may be specified as %G_MAXSSIZE, in which case you will
     * get the full remainder of the buffer at each call.
     * 
     * Note that no parsing of the data read through this function
     * occurs, so no state changes occur, but the seek position
     * is updated appropriately.
     */
    read(len: number): [ /* returnType */ number, /* databuffer */ Uint8Array ]
    /**
     * Tell the scanner if it should scan "^From " lines or not.
     * 
     * If the scanner is scanning from lines, two additional
     * states CAMEL_MIME_PARSER_STATE_FROM and CAMEL_MIME_PARSER_STATE_FROM_END will be returned
     * to the caller during parsing.
     * 
     * This may also be preceeded by an optional
     * CAMEL_MIME_PARSER_STATE_PRE_FROM state which contains the scanned data
     * found before the From line is encountered.  See also
     * camel_mime_parser_scan_pre_from().
     */
    scan_from(scan_from: boolean): void
    /**
     * Tell the scanner whether we want to know abou the pre-from
     * data during a scan.  If we do, then we may get an additional
     * state CAMEL_MIME_PARSER_STATE_PRE_FROM which returns the specified data.
     */
    scan_pre_from(scan_pre_from: boolean): void
    /**
     * Reset the source position to a known value.
     * 
     * Note that if the source stream/descriptor was not
     * positioned at 0 to begin with, and an absolute seek
     * is specified (whence != SEEK_CUR), then the seek
     * position may not match the desired seek position.
     */
    seek(offset: number, whence: number): number
    set_header_regex(matchstr: string): number
    /**
     * Get the current parser state.
     */
    state(): MimeParserState
    /**
     * Parse the next part of the MIME message.  If camel_mime_parser_unstep()
     * has been called, then continue to return the same state
     * for that many calls.
     * 
     * If the step is CAMEL_MIME_PARSER_STATE_BODY then the databuffer and datalength
     * pointers will be setup to point to the internal data buffer
     * of the scanner and may be processed as required.  Any
     * filters will have already been applied to this data.
     * 
     * Refer to the state diagram elsewhere for a full listing of
     * the states an application is gauranteed to get from the
     * scanner.
     */
    step(databuffer?: Uint8Array | null): [ /* returnType */ MimeParserState, /* databuffer */ Uint8Array | null ]
    /**
     * Get the stream, if any, the parser has been initialised
     * with.  May be used to setup sub-streams, but should not
     * be read from directly (without saving and restoring
     * the seek position in between).
     */
    stream(): Stream | null
    /**
     * Return the current scanning offset.  The meaning of this
     * value will depend on the current state of the parser.
     * 
     * An incomplete listing of the states:
     * 
     * CAMEL_MIME_PARSER_STATE_INITIAL, The start of the current message.
     * CAMEL_MIME_PARSER_STATE_HEADER, CAMEL_MIME_PARSER_STATE_MESSAGE, CAMEL_MIME_PARSER_STATE_MULTIPART, the character
     * position immediately after the end of the header.
     * CAMEL_MIME_PARSER_STATE_BODY, Position within the message of the start
     * of the current data block.
     * CAMEL_MIME_PARSER_STATE_*_END, The position of the character starting
     * the next section of the scan (the last position + 1 of
     * the respective current state).
     */
    tell(): number
    /**
     * When parsing a multipart, this returns the start of the last
     * boundary.
     */
    tell_start_boundary(): number
    /**
     * If the parser is scanning From lines, then this returns
     * the position of the start of the From line.
     */
    tell_start_from(): number
    /**
     * Find out the position within the file of where the
     * headers started, this is cached by the parser
     * at the time.
     */
    tell_start_headers(): number
    /**
     * Cause the last step operation to repeat itself.  If this is
     * called repeated times, then the same step will be repeated
     * that many times.
     * 
     * Note that it is not possible to scan back using this function,
     * only to have a way of peeking the next state.
     */
    unstep(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimeParser */
    vfunc_content(): void
    vfunc_message(headers?: object | null): void
    vfunc_part(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimeParser, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimeParser, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimeParser_ConstructProps)
    _init (config?: MimeParser_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimeParser
    static $gtype: GObject.Type
}
interface MimePart_ConstructProps extends Medium_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.MimePart */
    content_id?: string
    content_md5?: string
    description?: string
    disposition?: string
}
class MimePart {
    /* Properties of Camel-1.2.Camel.MimePart */
    content_id: string
    content_md5: string
    description: string
    disposition: string
    /* Properties of Camel-1.2.Camel.Medium */
    content: DataWrapper
    /* Fields of Camel-1.2.Camel.Medium */
    readonly parent: DataWrapper
    readonly priv: MediumPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MimePart */
    /**
     * Constructs the contnet of `mime_part` from the given mime parser.
     */
    construct_content_from_parser(mp: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs a MIME part from a parser.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_mime_part_construct_from_parser_finish() to get the result of
     * the operation.
     */
    construct_from_parser(parser: MimeParser, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_mime_part_construct_from_parser().
     */
    construct_from_parser_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs a MIME part from a parser.
     */
    construct_from_parser_sync(parser: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Get the disposition of the MIME part as a structure.
     * Returned pointer is owned by `mime_part`.
     */
    get_content_disposition(): ContentDisposition | null
    /**
     * Get the content-id field of a MIME part.
     */
    get_content_id(): string | null
    /**
     * Get the Content-Languages set on the MIME part.
     */
    get_content_languages(): string[] | null
    /**
     * Get the content-location field of a MIME part.
     */
    get_content_location(): string | null
    /**
     * Get the content-md5 field of the MIME part.
     */
    get_content_md5(): string | null
    /**
     * Get the Content-Type of a MIME part.
     */
    get_content_type(): ContentType | null
    /**
     * Get the description of the MIME part.
     */
    get_description(): string | null
    /**
     * Get the disposition of the MIME part.
     */
    get_disposition(): string | null
    /**
     * Get the Content-Transfer-Encoding of a MIME part.
     */
    get_encoding(): TransferEncoding
    /**
     * Get the filename of a MIME part.
     */
    get_filename(): string | null
    /**
     * Utility function used to set the content of a mime part object to
     * be the provided data. If `length` is 0, this routine can be used as
     * a way to remove old content (in which case `data` and `type` are
     * ignored and may be %NULL).
     */
    set_content(data: Uint8Array | null, type?: string | null): void
    /**
     * Set the content-id field on a MIME part.
     */
    set_content_id(contentid?: string | null): void
    /**
     * Set the Content-Languages field of a MIME part.
     */
    set_content_languages(content_languages?: string[] | null): void
    /**
     * Set the content-location field of the MIME part.
     */
    set_content_location(location?: string | null): void
    /**
     * Set the content-md5 field of the MIME part.
     */
    set_content_md5(md5sum?: string | null): void
    /**
     * Set the content-type on a MIME part.
     */
    set_content_type(content_type?: string | null): void
    /**
     * Set a description on the MIME part.
     */
    set_description(description: string): void
    /**
     * Set a disposition on the MIME part.
     */
    set_disposition(disposition?: string | null): void
    /**
     * Set the Content-Transfer-Encoding to use on a MIME part.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * Set the filename on a MIME part.
     */
    set_filename(filename?: string | null): void
    /* Methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    set_header(name: string, value?: string | null): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MimePart */
    /**
     * Constructs a MIME part from a parser.
     */
    vfunc_construct_from_parser_sync(parser: MimeParser, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Medium */
    /**
     * Adds a header to a #CamelMedium.
     */
    vfunc_add_header(name: string, value: string): void
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_get_headers().
     */
    vfunc_dup_headers(): NameValueArray
    /**
     * Gets a data wrapper that represents the content of the medium,
     * without its headers.
     */
    vfunc_get_content(): DataWrapper | null
    /**
     * Gets the value of the named header in the medium, or %NULL if
     * it is unset. The caller should not modify or free the data.
     * 
     * If the header occurs more than once, only retrieve the first
     * instance of the header.  For multi-occuring headers, use
     * camel_medium_dup_headers() or camel_medium_get_headers().
     */
    vfunc_get_header(name: string): string | null
    /**
     * Gets an array of all header name/value pairs. The values will be
     * decoded to UTF-8 for any headers that are recognized by Camel.
     * See also camel_medium_dup_headers().
     */
    vfunc_get_headers(): NameValueArray
    /**
     * Removes the named header from the medium.  All occurances of the
     * header are removed.
     */
    vfunc_remove_header(name: string): void
    /**
     * Sets the content of `medium` to be `content`.
     */
    vfunc_set_content(content?: DataWrapper | null): void
    /**
     * Sets the value of a header.  Any other occurances of the header
     * will be removed.  Setting a %NULL header can be used to remove
     * the header also.
     */
    vfunc_set_header(name: string, value?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::content-id", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-id", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content-md5", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content-md5", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::disposition", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disposition", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::content", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::content", callback: (($obj: MimePart, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MimePart_ConstructProps)
    _init (config?: MimePart_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MimePart
    /* Function overloads */
    static new(): MimePart
    static $gtype: GObject.Type
}
interface Multipart_ConstructProps extends DataWrapper_ConstructProps {
}
class Multipart {
    /* Fields of Camel-1.2.Camel.DataWrapper */
    readonly parent: GObject.Object
    readonly priv: DataWrapperPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    construct_from_parser(parser: MimeParser): number
    get_boundary(): string
    get_number(): number
    get_part(index: number): MimePart | null
    /**
     * Returns the postface text for `multipart`.
     */
    get_postface(): string
    /**
     * Returns the preface text for `multipart`.
     */
    get_preface(): string
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    set_boundary(boundary?: string | null): void
    /**
     * Set the postface text for this multipart.  Will be written out after
     * the last boundary of the multipart, and ignored by any MIME mail
     * client.
     * 
     * Generally postface texts should not be sent with multipart messages.
     */
    set_postface(postface: string): void
    /**
     * Set the preface text for this multipart.  Will be written out infront
     * of the multipart.  This text should only include US-ASCII strings, and
     * be relatively short, and will be ignored by any MIME mail client.
     */
    set_preface(preface: string): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_encoding(): TransferEncoding
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    vfunc_add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    vfunc_construct_from_parser(parser: MimeParser): number
    vfunc_get_boundary(): string
    vfunc_get_number(): number
    vfunc_get_part(index: number): MimePart | null
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    vfunc_set_boundary(boundary?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Multipart, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Multipart, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Multipart_ConstructProps)
    _init (config?: Multipart_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Multipart
    /* Function overloads */
    static new(): Multipart
    static $gtype: GObject.Type
}
interface MultipartEncrypted_ConstructProps extends Multipart_ConstructProps {
}
class MultipartEncrypted {
    /* Fields of Camel-1.2.Camel.Multipart */
    readonly parent: DataWrapper
    readonly priv: MultipartPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    construct_from_parser(parser: MimeParser): number
    get_boundary(): string
    get_number(): number
    get_part(index: number): MimePart | null
    /**
     * Returns the postface text for `multipart`.
     */
    get_postface(): string
    /**
     * Returns the preface text for `multipart`.
     */
    get_preface(): string
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    set_boundary(boundary?: string | null): void
    /**
     * Set the postface text for this multipart.  Will be written out after
     * the last boundary of the multipart, and ignored by any MIME mail
     * client.
     * 
     * Generally postface texts should not be sent with multipart messages.
     */
    set_postface(postface: string): void
    /**
     * Set the preface text for this multipart.  Will be written out infront
     * of the multipart.  This text should only include US-ASCII strings, and
     * be relatively short, and will be ignored by any MIME mail client.
     */
    set_preface(preface: string): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_encoding(): TransferEncoding
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    vfunc_add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    vfunc_construct_from_parser(parser: MimeParser): number
    vfunc_get_boundary(): string
    vfunc_get_number(): number
    vfunc_get_part(index: number): MimePart | null
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    vfunc_set_boundary(boundary?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MultipartEncrypted, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MultipartEncrypted, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MultipartEncrypted_ConstructProps)
    _init (config?: MultipartEncrypted_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MultipartEncrypted
    /* Function overloads */
    static new(): MultipartEncrypted
    static new(): MultipartEncrypted
    static $gtype: GObject.Type
}
interface MultipartSigned_ConstructProps extends Multipart_ConstructProps {
}
class MultipartSigned {
    /* Fields of Camel-1.2.Camel.Multipart */
    readonly parent: DataWrapper
    readonly priv: MultipartPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.MultipartSigned */
    /**
     * Get the raw signed content stream of the multipart/signed MIME part
     * suitable for use with verification of the signature.
     */
    get_content_stream(): Stream
    /**
     * Explicits sets the raw signed content stream of the multipart/signed
     * MIME part.
     */
    set_content_stream(content_stream: Stream): void
    /**
     * Explicitly sets the signature part of `mps`.
     */
    set_signature(signature: MimePart): void
    /* Methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    construct_from_parser(parser: MimeParser): number
    get_boundary(): string
    get_number(): number
    get_part(index: number): MimePart | null
    /**
     * Returns the postface text for `multipart`.
     */
    get_postface(): string
    /**
     * Returns the preface text for `multipart`.
     */
    get_preface(): string
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    set_boundary(boundary?: string | null): void
    /**
     * Set the postface text for this multipart.  Will be written out after
     * the last boundary of the multipart, and ignored by any MIME mail
     * client.
     * 
     * Generally postface texts should not be sent with multipart messages.
     */
    set_postface(postface: string): void
    /**
     * Set the preface text for this multipart.  Will be written out infront
     * of the multipart.  This text should only include US-ASCII strings, and
     * be relatively short, and will be ignored by any MIME mail client.
     */
    set_preface(preface: string): void
    /* Methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Calculates decoded size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_decode_to_stream_sync() internally.
     */
    calculate_decoded_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Calculates size of the `data_wrapper` by saving it to a null-stream
     * and returns how many bytes had been written. It's using
     * camel_data_wrapper_write_to_stream_sync() internally.
     */
    calculate_size_sync(cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously constructs the content of `data_wrapper` from `input_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_input_stream_finish() to get the
     * result of the operation.
     */
    construct_from_input_stream(input_stream: Gio.InputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_input_stream().
     */
    construct_from_input_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously constructs the content of `data_wrapper` from the given
     * `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_construct_from_stream_finish() to get the result
     * of the operation.
     */
    construct_from_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_construct_from_stream().
     */
    construct_from_stream_finish(result: Gio.AsyncResult): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously writes the decoded data content to `output_stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_output_stream_finish() to get the result
     * of the operation.
     */
    decode_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_decode_to_output_stream().
     */
    decode_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the decoded data content to `stream`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_decode_to_stream_finish() to get the result of
     * the operation.
     */
    decode_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_decode_to_stream().
     */
    decode_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GByteArray being used to hold the contents of `data_wrapper`.
     * 
     * Note, it's up to the caller to use this in a thread-safe manner.
     */
    get_byte_array(): Uint8Array
    get_encoding(): TransferEncoding
    get_mime_type(): string
    get_mime_type_field(): ContentType | null
    is_offline(): boolean
    /**
     * Sets encoding (#CamelTransferEncoding) for the `data_wrapper`.
     * It doesn't re-encode the content, if the encoding changes.
     */
    set_encoding(encoding: TransferEncoding): void
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Sets whether the `data_wrapper` is "offline". It applies only to this
     * concrete instance. See camel_data_wrapper_is_offline().
     */
    set_offline(offline: boolean): void
    /**
     * Sets mime-type filed to be `mime_type` and consumes it, aka unlike
     * camel_data_wrapper_set_mime_type_field(), this doesn't add its own
     * reference to `mime_type`.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    take_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Asynchronously writes the content of `data_wrapper` to `output_stream` in
     * a machine-independent format appropriate for the data.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_output_stream_finish() to get the result
     * of the operation.
     */
    write_to_output_stream(output_stream: Gio.OutputStream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with
     * camel_data_wrapper_write_to_output_stream().
     */
    write_to_output_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Asynchronously writes the content of `data_wrapper` to `stream` in a
     * machine-independent format appropriate for the data.  It should be
     * possible to construct an equivalent data wrapper object later by
     * passing this stream to camel_data_wrapper_construct_from_stream().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_data_wrapper_write_to_stream_finish() to get the result of
     * the operation.
     */
    write_to_stream(stream: Stream, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_data_wrapper_write_to_stream().
     */
    write_to_stream_finish(result: Gio.AsyncResult): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Multipart */
    /**
     * Appends the part to the multipart object.
     */
    vfunc_add_part(part: MimePart): void
    /**
     * Construct a multipart from a parser.
     */
    vfunc_construct_from_parser(parser: MimeParser): number
    vfunc_get_boundary(): string
    vfunc_get_number(): number
    vfunc_get_part(index: number): MimePart | null
    /**
     * Sets the message boundary for `multipart` to `boundary`. This should
     * be a string which does not occur anywhere in any of `multipart'`s
     * subparts. If `boundary` is %NULL, a randomly-generated boundary will
     * be used.
     */
    vfunc_set_boundary(boundary?: string | null): void
    /* Virtual methods of Camel-1.2.Camel.DataWrapper */
    /**
     * Constructs the content of `data_wrapper` from `input_stream`.
     */
    vfunc_construct_from_input_stream_sync(input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Constructs the content of `data_wrapper` from the given `stream`.
     */
    vfunc_construct_from_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Writes the decoded data content to `output_stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the decoded data content to `stream`.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_decode_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    vfunc_get_mime_type(): string
    vfunc_get_mime_type_field(): ContentType | null
    vfunc_is_offline(): boolean
    /**
     * This sets the data wrapper's MIME type.
     * 
     * It might fail, but you won't know. It will allow you to set
     * Content-Type parameters on the data wrapper, which are meaningless.
     * You should not be allowed to change the MIME type of a data wrapper
     * that contains data, or at least, if you do, it should invalidate the
     * data.
     */
    vfunc_set_mime_type(mime_type: string): void
    /**
     * This sets the data wrapper's MIME type. It adds its own reference
     * to `mime_type,` if not %NULL.
     * 
     * It suffers from the same flaws as camel_data_wrapper_set_mime_type().
     */
    vfunc_set_mime_type_field(mime_type?: ContentType | null): void
    /**
     * Writes the content of `data_wrapper` to `output_stream` in a
     * machine-independent format appropriate for the data.
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `output_stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_output_stream_sync(output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the content of `data_wrapper` to `stream` in a machine-independent
     * format appropriate for the data.  It should be possible to construct an
     * equivalent data wrapper object later by passing this stream to
     * camel_data_wrapper_construct_from_stream_sync().
     * 
     * <note>
     *   <para>
     *     This function may block even if the given output stream does not.
     *     For example, the content may have to be fetched across a network
     *     before it can be written to `stream`.
     *   </para>
     * </note>
     */
    vfunc_write_to_stream_sync(stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: MultipartSigned, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: MultipartSigned, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: MultipartSigned_ConstructProps)
    _init (config?: MultipartSigned_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): MultipartSigned
    /* Function overloads */
    static new(): MultipartSigned
    static new(): MultipartSigned
    static $gtype: GObject.Type
}
interface NNTPAddress_ConstructProps extends Address_ConstructProps {
}
class NNTPAddress {
    /* Fields of Camel-1.2.Camel.Address */
    readonly parent: GObject.Object
    readonly priv: AddressPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.NNTPAddress */
    /**
     * Add a new nntp address to the address object.  Duplicates are not added twice.
     */
    add(name: string): number
    /**
     * Get the address at `index`.
     */
    get(index: number, namep: string): boolean
    /* Methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    cat(source: Address): number
    /**
     * Copy the contents of one address into another.
     */
    copy(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    length(): number
    /**
     * Clone an existing address type.
     */
    new_clone(): Address
    /**
     * Remove an address by index, or all addresses.
     */
    remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    unformat(raw: string): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Address */
    /**
     * Concatenate one address onto another. The addresses must
     * be of the same type.
     */
    vfunc_cat(source: Address): number
    /**
     * Construct a new address from a raw address field.
     */
    vfunc_decode(raw: string): number
    /**
     * Encode an address in a format suitable for a raw header.
     */
    vfunc_encode(): string
    /**
     * Format an address in a format suitable for display.
     */
    vfunc_format(): string
    /**
     * Get the number of addresses stored in the address `addr`.
     */
    vfunc_length(): number
    /**
     * Remove an address by index, or all addresses.
     */
    vfunc_remove(index: number): void
    /**
     * Attempt to convert a previously formatted and/or edited
     * address back into internal form.
     */
    vfunc_unformat(raw: string): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: NNTPAddress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NNTPAddress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NNTPAddress_ConstructProps)
    _init (config?: NNTPAddress_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NNTPAddress
    /* Function overloads */
    static new(): NNTPAddress
    static $gtype: GObject.Type
}
interface NullOutputStream_ConstructProps extends Gio.OutputStream_ConstructProps {
}
class NullOutputStream {
    /* Fields of Gio-2.0.Gio.OutputStream */
    readonly parent_instance: GObject.Object
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.NullOutputStream */
    /**
     * Gets the total number of bytes written to `null_stream`.
     */
    get_bytes_written(): number
    get_ends_with_crlf(): boolean
    /* Methods of Gio-2.0.Gio.OutputStream */
    /**
     * Clears the pending flag on `stream`.
     */
    clear_pending(): void
    /**
     * Closes the stream, releasing resources related to it.
     * 
     * Once the stream is closed, all other operations will return %G_IO_ERROR_CLOSED.
     * Closing a stream multiple times will not return an error.
     * 
     * Closing a stream will automatically flush any outstanding buffers in the
     * stream.
     * 
     * Streams will be automatically closed when the last reference
     * is dropped, but you might want to call this function to make sure
     * resources are released as early as possible.
     * 
     * Some streams might keep the backing store of the stream (e.g. a file descriptor)
     * open after the stream is closed. See the documentation for the individual
     * stream for details.
     * 
     * On failure the first error that happened will be reported, but the close
     * operation will finish as much as possible. A stream that failed to
     * close will still return %G_IO_ERROR_CLOSED for all operations. Still, it
     * is important to check and report the error to the user, otherwise
     * there might be a loss of data as all data might not be written.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     * Cancelling a close will still leave the stream closed, but there some streams
     * can use a faster close that doesn't block to e.g. check errors. On
     * cancellation (as with any error) there is no guarantee that all written
     * data will reach the target.
     */
    close(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Requests an asynchronous close of the stream, releasing resources
     * related to it. When the operation is finished `callback` will be
     * called. You can then call g_output_stream_close_finish() to get
     * the result of the operation.
     * 
     * For behaviour details see g_output_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     */
    close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Closes an output stream.
     */
    close_finish(result: Gio.AsyncResult): boolean
    /**
     * Forces a write of all user-space buffered data for the given
     * `stream`. Will block during the operation. Closing the stream will
     * implicitly cause a flush.
     * 
     * This function is optional for inherited classes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    flush(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces an asynchronous write of all user-space buffered data for
     * the given `stream`.
     * For behaviour details see g_output_stream_flush().
     * 
     * When the operation is finished `callback` will be
     * called. You can then call g_output_stream_flush_finish() to get the
     * result of the operation.
     */
    flush_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes flushing an output stream.
     */
    flush_finish(result: Gio.AsyncResult): boolean
    /**
     * Checks if an output stream has pending actions.
     */
    has_pending(): boolean
    /**
     * Checks if an output stream has already been closed.
     */
    is_closed(): boolean
    /**
     * Checks if an output stream is being closed. This can be
     * used inside e.g. a flush implementation to see if the
     * flush (or other i/o operation) is called from within
     * the closing operation.
     */
    is_closing(): boolean
    /**
     * Sets `stream` to have actions pending. If the pending flag is
     * already set or `stream` is closed, it will return %FALSE and set
     * `error`.
     */
    set_pending(): boolean
    /**
     * Splices an input stream into an output stream.
     */
    splice(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, cancellable?: Gio.Cancellable | null): number
    /**
     * Splices a stream asynchronously.
     * When the operation is finished `callback` will be called.
     * You can then call g_output_stream_splice_finish() to get the
     * result of the operation.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_splice().
     */
    splice_async(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream splice operation.
     */
    splice_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * If count is 0, returns 0 and does nothing. A value of `count`
     * larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `count` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error -1 is returned and `error` is set accordingly.
     */
    write(buffer: Uint8Array, cancellable?: Gio.Cancellable | null): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * This function is similar to g_output_stream_write(), except it tries to
     * write as many bytes as requested, only stopping on an error.
     * 
     * On a successful write of `count` bytes, %TRUE is returned, and `bytes_written`
     * is set to `count`.
     * 
     * If there is an error during the operation %FALSE is returned and `error`
     * is set to indicate the error status.
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write().
     */
    write_all(buffer: Uint8Array, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_all_finish() to get the result of the
     * operation.
     * 
     * This is the asynchronous version of g_output_stream_write_all().
     * 
     * Call g_output_stream_write_all_finish() to collect the result.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called.
     */
    write_all_async(buffer: Uint8Array, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream write operation started with
     * g_output_stream_write_all_async().
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write_async().
     */
    write_all_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK - if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write().
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called. See g_output_stream_write_bytes_async()
     * for a #GBytes version that will automatically hold a reference to
     * the contents (without copying) for the duration of the call.
     */
    write_async(buffer: Uint8Array, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * A wrapper function for g_output_stream_write() which takes a
     * #GBytes as input.  This can be more convenient for use by language
     * bindings or in other cases where the refcounted nature of #GBytes
     * is helpful over a bare pointer interface.
     * 
     * However, note that this function may still perform partial writes,
     * just like g_output_stream_write().  If that occurs, to continue
     * writing, you will need to create a new #GBytes containing just the
     * remaining bytes, using g_bytes_new_from_bytes(). Passing the same
     * #GBytes instance multiple times potentially can result in duplicated
     * data in the output stream.
     */
    write_bytes(bytes: GLib.Bytes, cancellable?: Gio.Cancellable | null): number
    /**
     * This function is similar to g_output_stream_write_async(), but
     * takes a #GBytes as input.  Due to the refcounted nature of #GBytes,
     * this allows the stream to avoid taking a copy of the data.
     * 
     * However, note that this function may still perform partial writes,
     * just like g_output_stream_write_async(). If that occurs, to continue
     * writing, you will need to create a new #GBytes containing just the
     * remaining bytes, using g_bytes_new_from_bytes(). Passing the same
     * #GBytes instance multiple times potentially can result in duplicated
     * data in the output stream.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write_bytes().
     */
    write_bytes_async(bytes: GLib.Bytes, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream write-from-#GBytes operation.
     */
    write_bytes_finish(result: Gio.AsyncResult): number
    /**
     * Finishes a stream write operation.
     */
    write_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * If `n_vectors` is 0 or the sum of all bytes in `vectors` is 0, returns 0 and
     * does nothing.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `n_vectors` is 0 or the sum of all bytes in `vectors` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * Some implementations of g_output_stream_writev() may have limitations on the
     * aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
     * are exceeded. For example, when writing to a local file on UNIX platforms,
     * the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
     */
    writev(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * This function is similar to g_output_stream_writev(), except it tries to
     * write as many bytes as requested, only stopping on an error.
     * 
     * On a successful write of all `n_vectors` vectors, %TRUE is returned, and
     * `bytes_written` is set to the sum of all the sizes of `vectors`.
     * 
     * If there is an error during the operation %FALSE is returned and `error`
     * is set to indicate the error status.
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C. If you need it from another
     * language then you must write your own loop around
     * g_output_stream_write().
     * 
     * The content of the individual elements of `vectors` might be changed by this
     * function.
     */
    writev_all(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of the bytes contained in the `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_all_finish() to get the result of the
     * operation.
     * 
     * This is the asynchronous version of g_output_stream_writev_all().
     * 
     * Call g_output_stream_writev_all_finish() to collect the result.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called. The content of the individual elements
     * of `vectors` might be changed by this function.
     */
    writev_all_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream write operation started with
     * g_output_stream_writev_all_async().
     * 
     * As a special exception to the normal conventions for functions that
     * use #GError, if this function returns %FALSE (and sets `error)` then
     * `bytes_written` will be set to the number of bytes that were
     * successfully written before the error was encountered.  This
     * functionality is only available from C.  If you need it from another
     * language then you must write your own loop around
     * g_output_stream_writev_async().
     */
    writev_all_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Request an asynchronous write of the bytes contained in `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK — if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_writev().
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called.
     */
    writev_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream writev operation.
     */
    writev_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Gio-2.0.Gio.OutputStream */
    /**
     * Requests an asynchronous close of the stream, releasing resources
     * related to it. When the operation is finished `callback` will be
     * called. You can then call g_output_stream_close_finish() to get
     * the result of the operation.
     * 
     * For behaviour details see g_output_stream_close().
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     */
    vfunc_close_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Closes an output stream.
     */
    vfunc_close_finish(result: Gio.AsyncResult): boolean
    vfunc_close_fn(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces a write of all user-space buffered data for the given
     * `stream`. Will block during the operation. Closing the stream will
     * implicitly cause a flush.
     * 
     * This function is optional for inherited classes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Forces an asynchronous write of all user-space buffered data for
     * the given `stream`.
     * For behaviour details see g_output_stream_flush().
     * 
     * When the operation is finished `callback` will be
     * called. You can then call g_output_stream_flush_finish() to get the
     * result of the operation.
     */
    vfunc_flush_async(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes flushing an output stream.
     */
    vfunc_flush_finish(result: Gio.AsyncResult): boolean
    /**
     * Splices an input stream into an output stream.
     */
    vfunc_splice(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, cancellable?: Gio.Cancellable | null): number
    /**
     * Splices a stream asynchronously.
     * When the operation is finished `callback` will be called.
     * You can then call g_output_stream_splice_finish() to get the
     * result of the operation.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_splice().
     */
    vfunc_splice_async(source: Gio.InputStream, flags: Gio.OutputStreamSpliceFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous stream splice operation.
     */
    vfunc_splice_finish(result: Gio.AsyncResult): number
    /**
     * Request an asynchronous write of `count` bytes from `buffer` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_write_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * A value of `count` larger than %G_MAXSSIZE will cause a
     * %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK - if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_write().
     * 
     * Note that no copy of `buffer` will be made, so it must stay valid
     * until `callback` is called. See g_output_stream_write_bytes_async()
     * for a #GBytes version that will automatically hold a reference to
     * the contents (without copying) for the duration of the call.
     */
    vfunc_write_async(buffer: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream write operation.
     */
    vfunc_write_finish(result: Gio.AsyncResult): number
    /**
     * Tries to write `count` bytes from `buffer` into the stream. Will block
     * during the operation.
     * 
     * If count is 0, returns 0 and does nothing. A value of `count`
     * larger than %G_MAXSSIZE will cause a %G_IO_ERROR_INVALID_ARGUMENT error.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `count` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * On error -1 is returned and `error` is set accordingly.
     */
    vfunc_write_fn(buffer: Uint8Array | null, cancellable?: Gio.Cancellable | null): number
    /**
     * Request an asynchronous write of the bytes contained in `n_vectors` `vectors` into
     * the stream. When the operation is finished `callback` will be called.
     * You can then call g_output_stream_writev_finish() to get the result of the
     * operation.
     * 
     * During an async request no other sync and async calls are allowed,
     * and will result in %G_IO_ERROR_PENDING errors.
     * 
     * On success, the number of bytes written will be passed to the
     * `callback`. It is not an error if this is not the same as the
     * requested size, as it can happen e.g. on a partial I/O error,
     * but generally we try to write as many bytes as requested.
     * 
     * You are guaranteed that this method will never fail with
     * %G_IO_ERROR_WOULD_BLOCK — if `stream` can't accept more data, the
     * method will just wait until this changes.
     * 
     * Any outstanding I/O request with higher priority (lower numerical
     * value) will be executed before an outstanding request with lower
     * priority. Default priority is %G_PRIORITY_DEFAULT.
     * 
     * The asynchronous methods have a default fallback that uses threads
     * to implement asynchronicity, so they are optional for inheriting
     * classes. However, if you override one you must override all.
     * 
     * For the synchronous, blocking version of this function, see
     * g_output_stream_writev().
     * 
     * Note that no copy of `vectors` will be made, so it must stay valid
     * until `callback` is called.
     */
    vfunc_writev_async(vectors: Gio.OutputVector[], io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes a stream writev operation.
     */
    vfunc_writev_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /**
     * Tries to write the bytes contained in the `n_vectors` `vectors` into the
     * stream. Will block during the operation.
     * 
     * If `n_vectors` is 0 or the sum of all bytes in `vectors` is 0, returns 0 and
     * does nothing.
     * 
     * On success, the number of bytes written to the stream is returned.
     * It is not an error if this is not the same as the requested size, as it
     * can happen e.g. on a partial I/O error, or if there is not enough
     * storage in the stream. All writes block until at least one byte
     * is written or an error occurs; 0 is never returned (unless
     * `n_vectors` is 0 or the sum of all bytes in `vectors` is 0).
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     * 
     * Some implementations of g_output_stream_writev() may have limitations on the
     * aggregate buffer size, and will return %G_IO_ERROR_INVALID_ARGUMENT if these
     * are exceeded. For example, when writing to a local file on UNIX platforms,
     * the aggregate buffer size must not exceed %G_MAXSSIZE bytes.
     */
    vfunc_writev_fn(vectors: Gio.OutputVector[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* bytes_written */ number | null ]
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: NullOutputStream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: NullOutputStream, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: NullOutputStream_ConstructProps)
    _init (config?: NullOutputStream_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): NullOutputStream
    static $gtype: GObject.Type
}
interface Object_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename?: string
}
class Object {
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::state-filename", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Object_ConstructProps)
    _init (config?: Object_ConstructProps): void
    static $gtype: GObject.Type
}
interface OfflineFolder_ConstructProps extends Folder_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.OfflineFolder */
    offline_sync?: ThreeState
}
class OfflineFolder {
    /* Properties of Camel-1.2.Camel.OfflineFolder */
    offline_sync: ThreeState
    /* Properties of Camel-1.2.Camel.Folder */
    /**
     * The folder's description.
     */
    description: string
    /**
     * The folder's display name.
     */
    display_name: string
    /**
     * The folder's fully qualified name.
     */
    full_name: string
    /**
     * A #CamelThreeState persistent option of the folder,
     * which can override global option to mark messages
     * as seen after certain interval.
     */
    mark_seen: ThreeState
    /**
     * Timeout in milliseconds for marking messages as seen.
     */
    mark_seen_timeout: number
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Folder */
    readonly parent: Object
    readonly priv: FolderPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.OfflineFolder */
    /**
     * Checks whether the `folder` can run downsync according to its
     * settings (camel_offline_folder_get_offline_sync()) and to
     * the parent's #CamelOfflineStore settings (camel_offline_settings_get_stay_synchronized()).
     */
    can_downsync(): boolean
    /**
     * Synchronizes messages in `folder` described by the search `expression` to
     * the local machine asynchronously for offline availability.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_offline_folder_downsync_finish() to get the result of the
     * operation.
     */
    downsync(expression: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_offline_folder_downsync().
     */
    downsync_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes messages in `folder` described by the search `expression` to
     * the local machine for offline availability.
     */
    downsync_sync(expression?: string | null, cancellable?: Gio.Cancellable | null): boolean
    get_offline_sync(): ThreeState
    /**
     * The %CAMEL_THREE_STATE_INCONSISTENT means what the parent store has set.
     */
    set_offline_sync(offline_sync: ThreeState): void
    /* Methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder` asynchronously.  Only the flag and tag data
     * from `info` are used.  If `info` is %NULL, no flags or tags will be set.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_append_message_finish() to get the result of
     * the operation.
     */
    append_message(message: MimeMessage, info: MessageInfo | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_append_message_finish().
     */
    append_message_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Marks `folder` as deleted and performs any required cleanup.
     * 
     * This also emits the #CamelFolder::deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     */
    delete(): void
    /**
     * Thread-safe variation of camel_folder_get_description().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_description(): string
    /**
     * Thread-safe variation of camel_folder_get_display_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string
    /**
     * Thread-safe variation of camel_folder_get_full_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_full_name(): string
    /**
     * Asynchronously deletes messages which have been marked as "DELETED".
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_expunge_finish() to get the result of the operation.
     */
    expunge(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_expunge().
     */
    expunge_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the provided array and its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids when the provided
     * information was created explicitly by the corresponding get_ call.
     */
    free_deep(array: string[]): void
    /**
     * Frees the provided array but not its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids or free_summary when
     * the returned array needs to be freed but its contents come from
     * "static" information.
     */
    free_shallow(array: string[]): void
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    freeze(): void
    get_deleted_message_count(): number
    /**
     * Returns a description of the folder suitable for displaying to the user.
     */
    get_description(): string
    /**
     * Returns the display name for the folder.  The fully qualified name
     * can be obtained with camel_folder_get_full_name().
     */
    get_display_name(): string
    get_filename(uid: string): string
    get_flags(): number
    get_folder_summary(): FolderSummary
    get_frozen_count(): number
    /**
     * Returns the fully qualified name of the folder.
     */
    get_full_name(): string
    get_mark_seen(): ThreeState
    get_mark_seen_timeout(): number
    /**
     * Asynchronously gets the message corresponding to `message_uid` from `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_get_message_finish() to get the result of the operation.
     */
    get_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    get_message_count(): number
    /**
     * Finishes the operation started with camel_folder_get_message().
     */
    get_message_finish(result: Gio.AsyncResult): MimeMessage
    get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    get_message_user_flag(uid: string, name: string): boolean
    get_message_user_tag(uid: string, name: string): string
    get_parent_store(): object | null
    get_permanent_flags(): number
    /**
     * Asynchronously gets a list of known quotas for `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_get_quota_info_finish() to get the result of
     * the operation.
     */
    get_quota_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_get_quota_info().
     * Free the returned #CamelFolderQuotaInfo struct with
     * camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_finish(result: Gio.AsyncResult): FolderQuotaInfo
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    get_uncached_uids(uids: string[]): string[]
    get_unread_message_count(): number
    /**
     * Get whether or not the folder has a summary.
     */
    has_summary_capability(): boolean
    is_frozen(): boolean
    /**
     * Locks `folder`. Unlock it with camel_folder_unlock().
     */
    lock(): void
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_purge_message_cache_finish() to get the result of the
     * operation.
     */
    purge_message_cache(start_uid: string, end_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_purge_message_cache().
     */
    purge_message_cache_finish(result: Gio.AsyncResult): boolean
    /**
     * Delete the local cache of all messages between these uids.
     */
    purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously synchronizes a folder's summary with its backing store.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_refresh_info_finish() to get the result of the operation.
     */
    refresh_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_refresh_info().
     */
    refresh_info_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    rename(new_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    search_free(result: string[]): void
    /**
     * Sets a description of the folder suitable for displaying to the user.
     */
    set_description(description: string): void
    /**
     * Sets the display name for the folder.
     */
    set_display_name(display_name: string): void
    /**
     * Sets folder flags (bit-or of #CamelFolderFlags) for the `folder`.
     */
    set_flags(folder_flags: number): void
    /**
     * Sets the fully qualified name of the folder.
     */
    set_full_name(full_name: string): void
    /**
     * Sets whether folder locking (camel_folder_lock() and camel_folder_unlock())
     * should be used. When set to %FALSE, the two functions do nothing and simply
     * return.
     */
    set_lock_async(skip_folder_lock: boolean): void
    /**
     * Sets whether the messages in this `folder` should be marked
     * as seen automatically. An inconsistent state means to use
     * global option.
     */
    set_mark_seen(mark_seen: ThreeState): void
    /**
     * Sets the `timeout` in milliseconds for marking messages
     * as seen in this `folder`. Whether the timeout is used
     * depends on camel_folder_get_mark_seen().
     */
    set_mark_seen_timeout(timeout: number): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    set_message_flags(uid: string, mask: number, set: number): boolean
    set_message_user_flag(uid: string, name: string, value: boolean): void
    set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    sort_uids(uids: string[]): void
    /**
     * Synchronizes any changes that have been made to `folder` to its backing
     * store asynchronously, optionally expunging deleted messages as well.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Asynchronously ensure that a message identified by `message_uid` has been
     * synchronized in `folder` so that calling camel_folder_get_message() on it
     * later will work in offline mode.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_message_finish() to get the result of the
     * operation.
     */
    synchronize_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize_message().
     */
    synchronize_message_finish(result: Gio.AsyncResult): boolean
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets a #CamelFolderSummary of the folder. It consumes the `summary`.
     * 
     * This is supposed to be called only by the descendants of
     * the #CamelFolder and only at the construction time. Calling
     * this function twice yeilds to an error.
     */
    take_folder_summary(summary: FolderSummary): void
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    thaw(): void
    /**
     * Asynchronously copies or moves messages from one folder to another.
     * If the `source` or `destination` folders have the same parent store,
     * this may be more efficient than using camel_folder_append_message().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_transfer_messages_to_finish() to get the result of the
     * operation.
     */
    transfer_messages_to(message_uids: string[], destination: Folder, delete_originals: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_transfer_messages_to().
     */
    transfer_messages_to_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Unlocks `folder,` previously locked with camel_folder_lock().
     */
    unlock(): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.OfflineFolder */
    /**
     * Synchronizes messages in `folder` described by the search `expression` to
     * the local machine for offline availability.
     */
    vfunc_downsync_sync(expression?: string | null, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    vfunc_append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    vfunc_changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    vfunc_cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    vfunc_count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    vfunc_delete_(): void
    vfunc_deleted(): void
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    vfunc_expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    vfunc_free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    vfunc_freeze(): void
    vfunc_get_filename(uid: string): string
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    vfunc_get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    vfunc_get_message_count(): number
    vfunc_get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    vfunc_get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    vfunc_get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    vfunc_get_message_user_flag(uid: string, name: string): boolean
    vfunc_get_message_user_tag(uid: string, name: string): string
    vfunc_get_permanent_flags(): number
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    vfunc_get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    vfunc_get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    vfunc_get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_get_uncached_uids(uids: string[]): string[]
    vfunc_has_search_capability(): boolean
    vfunc_is_frozen(): boolean
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    vfunc_prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     */
    vfunc_purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    vfunc_refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    vfunc_rename(new_name: string): void
    vfunc_renamed(old_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    vfunc_search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    vfunc_search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    vfunc_search_free(result: string[]): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    vfunc_set_message_flags(uid: string, mask: number, set: number): boolean
    vfunc_set_message_user_flag(uid: string, name: string, value: boolean): void
    vfunc_set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    vfunc_sort_uids(uids: string[]): void
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    vfunc_synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    vfunc_thaw(): void
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    vfunc_transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Folder */
    connect(sigName: "changed", callback: (($obj: OfflineFolder, changes: FolderChangeInfo) => void)): number
    connect_after(sigName: "changed", callback: (($obj: OfflineFolder, changes: FolderChangeInfo) => void)): number
    emit(sigName: "changed", changes: FolderChangeInfo): void
    connect(sigName: "deleted", callback: (($obj: OfflineFolder) => void)): number
    connect_after(sigName: "deleted", callback: (($obj: OfflineFolder) => void)): number
    emit(sigName: "deleted"): void
    connect(sigName: "renamed", callback: (($obj: OfflineFolder, old_name: string) => void)): number
    connect_after(sigName: "renamed", callback: (($obj: OfflineFolder, old_name: string) => void)): number
    emit(sigName: "renamed", old_name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::offline-sync", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::offline-sync", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::full-name", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::full-name", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen-timeout", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen-timeout", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: OfflineFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: OfflineFolder_ConstructProps)
    _init (config?: OfflineFolder_ConstructProps): void
    static $gtype: GObject.Type
}
interface OfflineSettings_ConstructProps extends StoreSettings_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.OfflineSettings */
    limit_by_age?: boolean
    limit_unit?: TimeUnit
    limit_value?: number
    stay_synchronized?: boolean
}
class OfflineSettings {
    /* Properties of Camel-1.2.Camel.OfflineSettings */
    limit_by_age: boolean
    limit_unit: TimeUnit
    limit_value: number
    stay_synchronized: boolean
    /* Properties of Camel-1.2.Camel.StoreSettings */
    filter_inbox: boolean
    store_changes_interval: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.OfflineSettings */
    get_limit_by_age(): boolean
    get_limit_unit(): TimeUnit
    get_limit_value(): number
    /**
     * Returns whether to synchronize the local cache with the remote server
     * before switching to offline mode, so the store's content can still be
     * read while offline.
     */
    get_stay_synchronized(): boolean
    /**
     * Returns the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    get_store_changes_interval(): number
    /**
     * Set whether the messages to download for offline should be limited
     * by age. If set to %TRUE, then messages older than 'limit-value'
     * will not be downloaded automatically.
     */
    set_limit_by_age(limit_by_age: boolean): void
    /**
     * Set the limit unit to use when interpreting 'limit-value'.
     */
    set_limit_unit(limit_unit: TimeUnit): void
    /**
     * Set the limit, in 'limit-unit', to use when 'limit-by-age' is set to %TRUE.
     */
    set_limit_value(limit_value: boolean): void
    /**
     * Sets whether to synchronize the local cache with the remote server before
     * switching to offline mode, so the store's content can still be read while
     * offline.
     */
    set_stay_synchronized(stay_synchronized: boolean): void
    /**
     * Sets the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    set_store_changes_interval(interval: number): void
    /* Methods of Camel-1.2.Camel.StoreSettings */
    /**
     * Returns whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    get_filter_inbox(): boolean
    /**
     * Sets whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    set_filter_inbox(filter_inbox: boolean): void
    /**
     * Sets the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    set_store_changes_interval(interval: number): void
    /* Methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    equal(settings_b: Settings): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    vfunc_clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    vfunc_equal(settings_b: Settings): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::limit-by-age", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit-by-age", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::limit-unit", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit-unit", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::limit-value", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::limit-value", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::stay-synchronized", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stay-synchronized", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::filter-inbox", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-inbox", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::store-changes-interval", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::store-changes-interval", callback: (($obj: OfflineSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: OfflineSettings_ConstructProps)
    _init (config?: OfflineSettings_ConstructProps): void
    static $gtype: GObject.Type
}
interface OfflineStore_ConstructProps extends Store_ConstructProps {
}
class OfflineStore {
    /* Properties of Camel-1.2.Camel.OfflineStore */
    readonly online: boolean
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Store */
    readonly parent: Service
    readonly priv: StorePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.OfflineStore */
    /**
     * Returns a #GPtrArray of #CamelFolder objects which should be checked
     * for offline synchronization. Free the returned pointer with the below
     * calls, when no longer needed:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    dup_downsync_folders(): Folder[]
    /**
     * Returns %TRUE if `store` is online.
     */
    get_online(): boolean
    /**
     * Downloads messages for offline, when setup to do so and when
     * the host is reachable.
     */
    prepare_for_offline_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Check whether the `store` requires synchronization for offline usage.
     * This is not blocking, it only checks settings on the store and its
     * currently opened folders.
     * 
     * Returns %TRUE if the `store` requires synchronization for offline usage
     */
    requires_downsync(): boolean
    /**
     * An asynchronous variant of camel_offline_store_set_online_sync().
     * Call camel_offline_store_set_online_finish() from within the `callback`.
     */
    set_online(online: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_offline_store_set_online().
     */
    set_online_finish(result: Gio.AsyncResult): boolean
    /**
     * Sets the online/offline state of `store` according to `online`.
     */
    set_online_sync(online: boolean, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    can_refresh_folder(info: FolderInfo): boolean
    /**
     * Asynchronously creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_create_folder_finish() to get the result of the operation.
     */
    create_folder(parent_name: string | null, folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_create_folder().
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes local data for the given `folder_name`. The folder should
     * be part of the opened folders.
     * 
     * It doesn't delete the folder in the store (server) as such.
     * Use camel_store_delete_folder(), or its synchronous variant,
     * if you want to do that instead.
     */
    delete_cached_folder(folder_name: string): void
    /**
     * Asynchronously deletes the folder described by `folder_name`.  The
     * folder must be empty.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_delete_folder_finish() to get the result of the operation.
     */
    delete_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_delete_folder().
     */
    delete_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Returns a #GPtrArray of all the opened folders for the `store`. The caller owns
     * both the array and the folder references, so to free the array use:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    dup_opened_folders(): Folder[]
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    get_can_auto_save_changes(): boolean
    get_db(): DB
    get_flags(): number
    /**
     * Asynchronously gets a specific folder object from `store` by name.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_get_folder_finish() to get the result of the operation.
     */
    get_folder(folder_name: string, flags: StoreGetFolderFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder().
     */
    get_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Asynchronously fetches information about the folder structure of `store,`
     * starting with `top`.  For details of the behavior, see
     * camel_store_get_folder_info_sync().
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_folder_info_finish() to get the result of
     * the operation.
     */
    get_folder_info(top: string | null, flags: StoreGetFolderInfoFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder_info().
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     */
    get_folder_info_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    get_folders_bag(): ObjectBag
    /**
     * Asynchronously gets the folder in `store` into which new mail is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_inbox_folder_finish() to get the result of
     * the operation.
     */
    get_inbox_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_inbox_folder().
     */
    get_inbox_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Asynchronously gets the folder in `store` into which junk is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_junk_folder_finish() to get the result of
     * the operation.
     */
    get_junk_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_junk_folder().
     */
    get_junk_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    get_permissions(): number
    /**
     * Asynchronously gets the folder in `store` into which trash is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_trash_folder_finish() to get the result of
     * the operation.
     */
    get_trash_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_trash_folder().
     */
    get_trash_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store` asynchronously.
     * 
     * When the operation is finished, `callback` will be called. You can then
     * call camel_store_initial_setup_finish() to get the result of the operation.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_initial_setup().
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     */
    initial_setup_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Checks the state of the current CamelDB used for the `store` and eventually
     * runs maintenance routines on it.
     */
    maybe_run_db_maintenance(): boolean
    /**
     * Asynchronously renames the folder described by `old_name` to `new_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_rename_folder_finish() to get the result of the operation.
     */
    rename_folder(old_name: string, new_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_rename_folder().
     */
    rename_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets flags for the `store,` a bit-or of #CamelStoreFlags.
     */
    set_flags(flags: number): void
    /**
     * Sets permissions for the `store,` a bit-or of #CamelStorePermissionFlags
     */
    set_permissions(permissions: number): void
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store asynchronously.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Initable */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.OfflineStore */
    /**
     * Returns a #GPtrArray of #CamelFolder objects which should be checked
     * for offline synchronization. Free the returned pointer with the below
     * calls, when no longer needed:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    vfunc_dup_downsync_folders(): Folder[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    vfunc_can_refresh_folder(info: FolderInfo): boolean
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    vfunc_create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    vfunc_delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    vfunc_get_can_auto_save_changes(): boolean
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    vfunc_get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    vfunc_get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    vfunc_get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    vfunc_get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    vfunc_get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    vfunc_initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    vfunc_rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Store */
    connect(sigName: "folder-created", callback: (($obj: OfflineStore, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-created", callback: (($obj: OfflineStore, object: FolderInfo) => void)): number
    emit(sigName: "folder-created", object: FolderInfo): void
    connect(sigName: "folder-deleted", callback: (($obj: OfflineStore, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-deleted", callback: (($obj: OfflineStore, object: FolderInfo) => void)): number
    emit(sigName: "folder-deleted", object: FolderInfo): void
    /**
     * This signal indicates significant changes have occurred to
     * the folder hierarchy of `store,` and that previously fetched
     * #CamelFolderInfo data should be considered stale.
     * 
     * Applications should handle this signal by replacing cached
     * #CamelFolderInfo data for `store` with fresh data by way of
     * camel_store_get_folder_info().
     * 
     * More often than not this signal will be emitted as a result of
     * user preference changes rather than actual server-side changes.
     * For example, a user may change a preference that reveals a set
     * of folders previously hidden from view, or that alters whether
     * to augment the `store` with virtual Junk and Trash folders.
     */
    connect(sigName: "folder-info-stale", callback: (($obj: OfflineStore) => void)): number
    connect_after(sigName: "folder-info-stale", callback: (($obj: OfflineStore) => void)): number
    emit(sigName: "folder-info-stale"): void
    connect(sigName: "folder-opened", callback: (($obj: OfflineStore, object: Folder) => void)): number
    connect_after(sigName: "folder-opened", callback: (($obj: OfflineStore, object: Folder) => void)): number
    emit(sigName: "folder-opened", object: Folder): void
    connect(sigName: "folder-renamed", callback: (($obj: OfflineStore, object: string, p0: FolderInfo) => void)): number
    connect_after(sigName: "folder-renamed", callback: (($obj: OfflineStore, object: string, p0: FolderInfo) => void)): number
    emit(sigName: "folder-renamed", object: string, p0: FolderInfo): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::online", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::online", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-status", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: OfflineStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: OfflineStore_ConstructProps)
    _init (config?: OfflineStore_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Helper function for constructing #GInitable object. This is
     * similar to g_object_newv() but also initializes the object
     * and returns %NULL, setting an error on failure.
     */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface Operation_ConstructProps extends Gio.Cancellable_ConstructProps {
}
class Operation {
    /* Fields of Gio-2.0.Gio.Cancellable */
    readonly parent_instance: GObject.Object
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Gio-2.0.Gio.Cancellable */
    /**
     * Will set `cancellable` to cancelled, and will emit the
     * #GCancellable::cancelled signal. (However, see the warning about
     * race conditions in the documentation for that signal if you are
     * planning to connect to it.)
     * 
     * This function is thread-safe. In other words, you can safely call
     * it from a thread other than the one running the operation that was
     * passed the `cancellable`.
     * 
     * If `cancellable` is %NULL, this function returns immediately for convenience.
     * 
     * The convention within GIO is that cancelling an asynchronous
     * operation causes it to complete asynchronously. That is, if you
     * cancel the operation from the same thread in which it is running,
     * then the operation's #GAsyncReadyCallback will not be invoked until
     * the application returns to the main loop.
     */
    cancel(): void
    /**
     * Convenience function to connect to the #GCancellable::cancelled
     * signal. Also handles the race condition that may happen
     * if the cancellable is cancelled right before connecting.
     * 
     * `callback` is called at most once, either directly at the
     * time of the connect if `cancellable` is already cancelled,
     * or when `cancellable` is cancelled in some thread.
     * 
     * `data_destroy_func` will be called when the handler is
     * disconnected, or immediately if the cancellable is already
     * cancelled.
     * 
     * See #GCancellable::cancelled for details on how to use this.
     * 
     * Since GLib 2.40, the lock protecting `cancellable` is not held when
     * `callback` is invoked.  This lifts a restriction in place for
     * earlier GLib versions which now makes it easier to write cleanup
     * code that unconditionally invokes e.g. g_cancellable_cancel().
     */
    connect(callback: GObject.Callback): number
    /**
     * Disconnects a handler from a cancellable instance similar to
     * g_signal_handler_disconnect().  Additionally, in the event that a
     * signal handler is currently running, this call will block until the
     * handler has finished.  Calling this function from a
     * #GCancellable::cancelled signal handler will therefore result in a
     * deadlock.
     * 
     * This avoids a race condition where a thread cancels at the
     * same time as the cancellable operation is finished and the
     * signal handler is removed. See #GCancellable::cancelled for
     * details on how to use this.
     * 
     * If `cancellable` is %NULL or `handler_id` is `0` this function does
     * nothing.
     */
    disconnect(handler_id: number): void
    /**
     * Gets the file descriptor for a cancellable job. This can be used to
     * implement cancellable operations on Unix systems. The returned fd will
     * turn readable when `cancellable` is cancelled.
     * 
     * You are not supposed to read from the fd yourself, just check for
     * readable status. Reading to unset the readable status is done
     * with g_cancellable_reset().
     * 
     * After a successful return from this function, you should use
     * g_cancellable_release_fd() to free up resources allocated for
     * the returned file descriptor.
     * 
     * See also g_cancellable_make_pollfd().
     */
    get_fd(): number
    /**
     * Checks if a cancellable job has been cancelled.
     */
    is_cancelled(): boolean
    /**
     * Creates a #GPollFD corresponding to `cancellable;` this can be passed
     * to g_poll() and used to poll for cancellation. This is useful both
     * for unix systems without a native poll and for portability to
     * windows.
     * 
     * When this function returns %TRUE, you should use
     * g_cancellable_release_fd() to free up resources allocated for the
     * `pollfd`. After a %FALSE return, do not call g_cancellable_release_fd().
     * 
     * If this function returns %FALSE, either no `cancellable` was given or
     * resource limits prevent this function from allocating the necessary
     * structures for polling. (On Linux, you will likely have reached
     * the maximum number of file descriptors.) The suggested way to handle
     * these cases is to ignore the `cancellable`.
     * 
     * You are not supposed to read from the fd yourself, just check for
     * readable status. Reading to unset the readable status is done
     * with g_cancellable_reset().
     */
    make_pollfd(pollfd: GLib.PollFD): boolean
    /**
     * Pops `cancellable` off the cancellable stack (verifying that `cancellable`
     * is on the top of the stack).
     */
    pop_current(): void
    /**
     * Pushes `cancellable` onto the cancellable stack. The current
     * cancellable can then be received using g_cancellable_get_current().
     * 
     * This is useful when implementing cancellable operations in
     * code that does not allow you to pass down the cancellable object.
     * 
     * This is typically called automatically by e.g. #GFile operations,
     * so you rarely have to call this yourself.
     */
    push_current(): void
    /**
     * Releases a resources previously allocated by g_cancellable_get_fd()
     * or g_cancellable_make_pollfd().
     * 
     * For compatibility reasons with older releases, calling this function
     * is not strictly required, the resources will be automatically freed
     * when the `cancellable` is finalized. However, the `cancellable` will
     * block scarce file descriptors until it is finalized if this function
     * is not called. This can cause the application to run out of file
     * descriptors when many #GCancellables are used at the same time.
     */
    release_fd(): void
    /**
     * Resets `cancellable` to its uncancelled state.
     * 
     * If cancellable is currently in use by any cancellable operation
     * then the behavior of this function is undefined.
     * 
     * Note that it is generally not a good idea to reuse an existing
     * cancellable for more operations after it has been cancelled once,
     * as this function might tempt you to do. The recommended practice
     * is to drop the reference to a cancellable after cancelling it,
     * and let it die with the outstanding async operations. You should
     * create a fresh cancellable for further async operations.
     */
    reset(): void
    /**
     * If the `cancellable` is cancelled, sets the error to notify
     * that the operation was cancelled.
     */
    set_error_if_cancelled(): boolean
    /**
     * Creates a source that triggers if `cancellable` is cancelled and
     * calls its callback of type #GCancellableSourceFunc. This is
     * primarily useful for attaching to another (non-cancellable) source
     * with g_source_add_child_source() to add cancellability to it.
     * 
     * For convenience, you can call this with a %NULL #GCancellable,
     * in which case the source will never trigger.
     * 
     * The new #GSource will hold a reference to the #GCancellable.
     */
    source_new(): GLib.Source
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Operation */
    vfunc_status(what: string, pc: number): void
    /* Virtual methods of Gio-2.0.Gio.Cancellable */
    vfunc_cancelled(): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Operation */
    connect(sigName: "pop-message", callback: (($obj: Operation) => void)): number
    connect_after(sigName: "pop-message", callback: (($obj: Operation) => void)): number
    emit(sigName: "pop-message"): void
    connect(sigName: "progress", callback: (($obj: Operation, object: number) => void)): number
    connect_after(sigName: "progress", callback: (($obj: Operation, object: number) => void)): number
    emit(sigName: "progress", object: number): void
    connect(sigName: "push-message", callback: (($obj: Operation, object: string) => void)): number
    connect_after(sigName: "push-message", callback: (($obj: Operation, object: string) => void)): number
    emit(sigName: "push-message", object: string): void
    connect(sigName: "status", callback: (($obj: Operation, object: string, p0: number) => void)): number
    connect_after(sigName: "status", callback: (($obj: Operation, object: string, p0: number) => void)): number
    emit(sigName: "status", object: string, p0: number): void
    /* Signals of Gio-2.0.Gio.Cancellable */
    /**
     * Emitted when the operation has been cancelled.
     * 
     * Can be used by implementations of cancellable operations. If the
     * operation is cancelled from another thread, the signal will be
     * emitted in the thread that cancelled the operation, not the
     * thread that is running the operation.
     * 
     * Note that disconnecting from this signal (or any signal) in a
     * multi-threaded program is prone to race conditions. For instance
     * it is possible that a signal handler may be invoked even after
     * a call to g_signal_handler_disconnect() for that handler has
     * already returned.
     * 
     * There is also a problem when cancellation happens right before
     * connecting to the signal. If this happens the signal will
     * unexpectedly not be emitted, and checking before connecting to
     * the signal leaves a race condition where this is still happening.
     * 
     * In order to make it safe and easy to connect handlers there
     * are two helper functions: g_cancellable_connect() and
     * g_cancellable_disconnect() which protect against problems
     * like this.
     * 
     * An example of how to us this:
     * 
     * ```c
     *     // Make sure we don't do unnecessary work if already cancelled
     *     if (g_cancellable_set_error_if_cancelled (cancellable, error))
     *       return;
     * 
     *     // Set up all the data needed to be able to handle cancellation
     *     // of the operation
     *     my_data = my_data_new (...);
     * 
     *     id = 0;
     *     if (cancellable)
     *       id = g_cancellable_connect (cancellable,
     *     			      G_CALLBACK (cancelled_handler)
     *     			      data, NULL);
     * 
     *     // cancellable operation here...
     * 
     *     g_cancellable_disconnect (cancellable, id);
     * 
     *     // cancelled_handler is never called after this, it is now safe
     *     // to free the data
     *     my_data_free (my_data);
     * ```
     * 
     * 
     * Note that the cancelled signal is emitted in the thread that
     * the user cancelled from, which may be the main thread. So, the
     * cancellable signal should not do something that can block.
     */
    connect(sigName: "cancelled", callback: (($obj: Operation) => void)): number
    connect_after(sigName: "cancelled", callback: (($obj: Operation) => void)): number
    emit(sigName: "cancelled"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Operation, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Operation, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Operation_ConstructProps)
    _init (config?: Operation_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): Operation
    static new_proxy(cancellable?: Gio.Cancellable | null): Operation
    /**
     * Cancel all outstanding operations.
     */
    static cancel_all(): void
    /**
     * Pops the most recently pushed message.
     * 
     * This function only works if `cancellable` is a #CamelOperation cast as a
     * #GCancellable.  If `cancellable` is a plain #GCancellable or %NULL, the
     * function does nothing and returns silently.
     */
    static pop_message(cancellable?: Gio.Cancellable | null): void
    /**
     * Report progress on the current operation.  `percent` reports the current
     * percentage of completion, which should be in the range of 0 to 100.
     * 
     * This function only works if `cancellable` is a #CamelOperation cast as a
     * #GCancellable.  If `cancellable` is a plain #GCancellable or %NULL, the
     * function does nothing and returns silently.
     */
    static progress(cancellable: Gio.Cancellable | null, percent: number): void
    static $gtype: GObject.Type
}
interface PartitionTable_ConstructProps extends GObject.Object_ConstructProps {
}
class PartitionTable {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.PartitionTable */
    add(key: string, keyid: _key_t): number
    lookup(key: string): _key_t
    remove(key: string): boolean
    sync(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: PartitionTable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: PartitionTable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: PartitionTable_ConstructProps)
    _init (config?: PartitionTable_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(bs: BlockFile, root: _block_t): PartitionTable
    static $gtype: GObject.Type
}
interface SExp_ConstructProps extends GObject.Object_ConstructProps {
}
class SExp {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.SExp */
    /**
     * Adds a variable named `name` to the given `scope,` set to the given `value`.
     */
    add_variable(scope: number, name: string, value: SExpTerm): void
    error(): string | null
    evaluate_occur_times(start: number, end: number): boolean
    /**
     * Prepares to scan a file.
     */
    input_file(fd: number): void
    /**
     * Prepares to scan a text buffer.
     */
    input_text(text: string, len: number): void
    parse(): number
    /**
     * Revoes a symbol from a scope.
     */
    remove_symbol(scope: number, name: string): void
    /**
     * Frees the `result` and its internal data. Does nothing,
     * when the `result` is %NULL.
     */
    result_free(result?: SExpResult | null): void
    /**
     * Frees an array of results.
     */
    resultv_free(argv: SExpResult[]): void
    /**
     * sets the current scope for the scanner.
     */
    set_scope(scope: number): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SExp, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SExp, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SExp_ConstructProps)
    _init (config?: SExp_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): SExp
    /**
     * Encode a bool into an s-expression `string`.  Bools are
     * encoded using #t #f syntax.
     */
    static encode_bool(string: GLib.String, v_bool: boolean): void
    /**
     * Add a c string `v_string` to the s-expression stored in
     * the gstring `s`.  Quotes are added, and special characters
     * are escaped appropriately.
     */
    static encode_string(string: GLib.String, v_string: string): void
    /**
     * Converts a search expression to an SQL 'WHERE' part statement,
     * without the 'WHERE' keyword.
     */
    static to_sql_sexp(sexp: string): string | null
    static $gtype: GObject.Type
}
interface SMIMEContext_ConstructProps extends CipherContext_ConstructProps {
}
class SMIMEContext {
    /* Fields of Camel-1.2.Camel.CipherContext */
    readonly parent: GObject.Object
    readonly priv: CipherContextPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.SMIMEContext */
    describe_part(part?: object | null): number
    set_encrypt_key(use: boolean, key: string): void
    set_sign_mode(type: SMIMESign): void
    /* Methods of Camel-1.2.Camel.CipherContext */
    /**
     * Asynchronously decrypts `ipart` into `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_decrypt_finish() to get the result of
     * the operation.
     */
    decrypt(ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_decrypt().
     */
    decrypt_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Decrypts `ipart` into `opart`.
     */
    decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Asynchronously encrypts (and optionally signs) the clear-text `ipart` and
     * writes the resulting cipher-text to `opart`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_encrypt_finish() to get the result of
     * the operation.
     */
    encrypt(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_encrypt().
     */
    encrypt_finish(result: Gio.AsyncResult): boolean
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    get_session(): Session
    hash_to_id(hash: CipherHash): string
    id_to_hash(id: string): CipherHash
    /**
     * Asynchronously converts the (unsigned) part `ipart` into a new
     * self-contained MIME part `opart`.  This may be a multipart/signed part,
     * or a simple part for enveloped types.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_cipher_context_sign_finish() to get the result of the operation.
     */
    sign(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_sign().
     */
    sign_finish(result: Gio.AsyncResult): boolean
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously verifies the signature.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_cipher_context_verify_finish() to get the result of
     * the operation.
     */
    verify(ipart: MimePart, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_cipher_context_verify().
     */
    verify_finish(result: Gio.AsyncResult): CipherValidity
    /**
     * Verifies the signature.
     */
    verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.CipherContext */
    /**
     * Decrypts `ipart` into `opart`.
     */
    vfunc_decrypt_sync(ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /**
     * Encrypts (and optionally signs) the clear-text `ipart` and writes the
     * resulting cipher-text to `opart`.
     */
    vfunc_encrypt_sync(userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    vfunc_hash_to_id(hash: CipherHash): string
    vfunc_id_to_hash(id: string): CipherHash
    /**
     * Converts the (unsigned) part `ipart` into a new self-contained MIME
     * part `opart`.  This may be a multipart/signed part, or a simple part
     * for enveloped types.
     */
    vfunc_sign_sync(userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Verifies the signature.
     */
    vfunc_verify_sync(ipart: MimePart, cancellable?: Gio.Cancellable | null): CipherValidity
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SMIMEContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SMIMEContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SMIMEContext_ConstructProps)
    _init (config?: SMIMEContext_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(session: Session): SMIMEContext
    /* Function overloads */
    static new(session: Session): SMIMEContext
    static $gtype: GObject.Type
}
interface Sasl_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Sasl */
    authenticated?: boolean
    mechanism?: string
    service?: Service
    service_name?: string
}
class Sasl {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Sasl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Sasl, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: Sasl, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: Sasl, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Sasl_ConstructProps)
    _init (config?: Sasl_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(service_name: string, mechanism: string, service: Service): Sasl
    static authtype(mechanism: string): ServiceAuthType | null
    static authtype_list(include_plain: boolean): ServiceAuthType[]
    /**
     * Checks whether exists a #CamelSasl method for the `mechanism` and
     * whether it derives from #CamelSaslXOAuth2. Such mechanisms are
     * also treated as XOAUTH2, even their real name is different.
     */
    static is_xoauth2_alias(mechanism?: string | null): boolean
    static $gtype: GObject.Type
}
interface SaslAnonymous_ConstructProps extends Sasl_ConstructProps {
}
class SaslAnonymous {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslAnonymous, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslAnonymous, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslAnonymous, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslAnonymous, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslAnonymous_ConstructProps)
    _init (config?: SaslAnonymous_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(type: SaslAnonTraceType, trace_info: string): SaslAnonymous
    /* Function overloads */
    static new(service_name: string, mechanism: string, service: Service): SaslAnonymous
    static $gtype: GObject.Type
}
interface SaslCramMd5_ConstructProps extends Sasl_ConstructProps {
}
class SaslCramMd5 {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslCramMd5, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslCramMd5, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslCramMd5, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslCramMd5, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslCramMd5_ConstructProps)
    _init (config?: SaslCramMd5_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslDigestMd5_ConstructProps extends Sasl_ConstructProps {
}
class SaslDigestMd5 {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslDigestMd5, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslDigestMd5, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslDigestMd5, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslDigestMd5, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslDigestMd5_ConstructProps)
    _init (config?: SaslDigestMd5_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslGssapi_ConstructProps extends Sasl_ConstructProps {
}
class SaslGssapi {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.SaslGssapi */
    /**
     * Set host and user to use, instead of those in CamelService's settings.
     * It's both or none, aka either set both, or the settings values are used.
     * This is used to not require CamelService instance at all.
     */
    override_host_and_user(override_host?: string | null, override_user?: string | null): void
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslGssapi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslGssapi, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslGssapi, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslGssapi, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslGssapi_ConstructProps)
    _init (config?: SaslGssapi_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static is_available(): boolean
    static $gtype: GObject.Type
}
interface SaslLogin_ConstructProps extends Sasl_ConstructProps {
}
class SaslLogin {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslLogin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslLogin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslLogin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslLogin, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslLogin_ConstructProps)
    _init (config?: SaslLogin_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslNTLM_ConstructProps extends Sasl_ConstructProps {
}
class SaslNTLM {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslNTLM, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslNTLM, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslNTLM, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslNTLM, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslNTLM_ConstructProps)
    _init (config?: SaslNTLM_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslPOPB4SMTP_ConstructProps extends Sasl_ConstructProps {
}
class SaslPOPB4SMTP {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslPOPB4SMTP, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslPOPB4SMTP, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslPOPB4SMTP, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslPOPB4SMTP, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslPOPB4SMTP_ConstructProps)
    _init (config?: SaslPOPB4SMTP_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslPlain_ConstructProps extends Sasl_ConstructProps {
}
class SaslPlain {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslPlain, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslPlain, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslPlain, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslPlain, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslPlain_ConstructProps)
    _init (config?: SaslPlain_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslXOAuth2_ConstructProps extends Sasl_ConstructProps {
}
class SaslXOAuth2 {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.Sasl */
    readonly parent: GObject.Object
    readonly priv: SaslPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslXOAuth2, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslXOAuth2, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslXOAuth2_ConstructProps)
    _init (config?: SaslXOAuth2_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslXOAuth2Google_ConstructProps extends SaslXOAuth2_ConstructProps {
}
class SaslXOAuth2Google {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.SaslXOAuth2 */
    readonly parent: Sasl
    readonly priv: SaslXOAuth2Private
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslXOAuth2Google, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslXOAuth2Google, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Google, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Google, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslXOAuth2Google_ConstructProps)
    _init (config?: SaslXOAuth2Google_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslXOAuth2Outlook_ConstructProps extends SaslXOAuth2_ConstructProps {
}
class SaslXOAuth2Outlook {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.SaslXOAuth2 */
    readonly parent: Sasl
    readonly priv: SaslXOAuth2Private
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslXOAuth2Outlook, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslXOAuth2Outlook, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Outlook, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Outlook, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslXOAuth2Outlook_ConstructProps)
    _init (config?: SaslXOAuth2Outlook_ConstructProps): void
    static $gtype: GObject.Type
}
interface SaslXOAuth2Yahoo_ConstructProps extends SaslXOAuth2_ConstructProps {
}
class SaslXOAuth2Yahoo {
    /* Properties of Camel-1.2.Camel.Sasl */
    authenticated: boolean
    /* Fields of Camel-1.2.Camel.SaslXOAuth2 */
    readonly parent: Sasl
    readonly priv: SaslXOAuth2Private
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, asynchronously generate the initial SASL message
     * to send to the server.  (This will be %NULL if the client doesn't
     * initiate the exchange.)  Otherwise, `token` is a challenge from the
     * server, and the asynchronous result is the response.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_challenge_finish() to get the result of the operation.
     */
    challenge(token: Uint8Array | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * As with camel_sasl_challenge(), but the challenge `token` and the
     * response are both base64-encoded.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_sasl_challenge_base64_finish() to get the result of
     * the operation.
     */
    challenge_base64(token: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_challenge_base64().
     */
    challenge_base64_finish(result: Gio.AsyncResult): string
    /**
     * As with camel_sasl_challenge_sync(), but the challenge `token` and the
     * response are both base64-encoded.
     */
    challenge_base64_sync(token: string, cancellable?: Gio.Cancellable | null): string
    /**
     * Finishes the operation started with camel_sasl_challenge().  Free the
     * returned #GByteArray with g_byte_array_free().
     */
    challenge_finish(result: Gio.AsyncResult): Uint8Array | null
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    get_authenticated(): boolean
    get_mechanism(): string
    get_service(): Service
    get_service_name(): string
    set_authenticated(authenticated: boolean): void
    /**
     * Asynchronously determine whether `sasl` can be used for password-less
     * authentication, for example single-sign-on using system credentials.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_sasl_try_empty_password_finish() to get the result of the
     * operation.
     */
    try_empty_password(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_sasl_try_empty_password().
     */
    try_empty_password_finish(result: Gio.AsyncResult): boolean
    try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Sasl */
    /**
     * If `token` is %NULL, generate the initial SASL message to send to
     * the server.  (This will be %NULL if the client doesn't initiate the
     * exchange.)  Otherwise, `token` is a challenge from the server, and
     * the return value is the response.
     * 
     * Free the returned #GByteArray with g_byte_array_free().
     */
    vfunc_challenge_sync(token?: Uint8Array | null, cancellable?: Gio.Cancellable | null): Uint8Array | null
    vfunc_try_empty_password_sync(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: SaslXOAuth2Yahoo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: SaslXOAuth2Yahoo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Yahoo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::authenticated", callback: (($obj: SaslXOAuth2Yahoo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: SaslXOAuth2Yahoo_ConstructProps)
    _init (config?: SaslXOAuth2Yahoo_ConstructProps): void
    static $gtype: GObject.Type
}
interface Service_ConstructProps extends Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Service */
    display_name?: string
    password?: string
    provider?: Provider
    proxy_resolver?: Gio.ProxyResolver
    session?: Session
    settings?: Settings
    uid?: string
}
class Service {
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Object */
    readonly parent: GObject.Object
    readonly priv: ObjectPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Initable */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connection-status", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Service_ConstructProps)
    _init (config?: Service_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Helper function for constructing #GInitable object. This is
     * similar to g_object_newv() but also initializes the object
     * and returns %NULL, setting an error on failure.
     */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface Session_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Session */
    junk_filter?: JunkFilter
    network_monitor?: Gio.NetworkMonitor
    online?: boolean
    user_cache_dir?: string
    user_data_dir?: string
}
class Session {
    /* Properties of Camel-1.2.Camel.Session */
    junk_filter: JunkFilter
    readonly main_context: GLib.MainContext
    network_monitor: Gio.NetworkMonitor
    online: boolean
    user_cache_dir: string
    user_data_dir: string
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Session */
    /**
     * Instantiates a new #CamelService for `session`.  The `uid` identifies the
     * service for future lookup.  The `protocol` indicates which #CamelProvider
     * holds the #GType of the #CamelService subclass to instantiate.  The `type`
     * explicitly designates the service as a #CamelStore or #CamelTransport.
     * 
     * If the given `uid` has already been added, the existing #CamelService
     * with that `uid` is returned regardless of whether it agrees with the
     * given `protocol` and `type`.
     * 
     * If no #CamelProvider is available to handle the given `protocol,` or
     * if the #CamelProvider does not specify a valid #GType for `type,` the
     * function sets `error` and returns %NULL.
     * 
     * The returned #CamelService is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     */
    add_service(uid: string, protocol: string, type: ProviderType): Service
    /**
     * Look up in an address book `book_uid` for an address `email_address`
     * and returns whether any such contact exists.
     * 
     * The `book_uid` can be either one of the special constants
     * %CAMEL_SESSION_BOOK_UID_ANY or %CAMEL_SESSION_BOOK_UID_COMPLETION,
     * or it can be a UID of a configured address book.
     * 
     * The `email_address` can contain multiple addresses, then the function
     * checks whether any of the given addresses is in the address book.
     */
    addressbook_contains_sync(book_uid: string, email_address: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously authenticates `service,` which may involve repeated calls
     * to camel_service_authenticate() or camel_service_authenticate_sync().
     * A #CamelSession subclass is largely responsible for implementing this,
     * and should handle things like user prompts and secure password storage.
     * These issues are out-of-scope for Camel.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_session_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(service: Service, mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_session_authenticate().
     * 
     * If an error occurred, or if authentication was aborted, the function
     * sets `error` and returns %FALSE.
     */
    authenticate_finish(result: Gio.AsyncResult): boolean
    /**
     * Authenticates `service,` which may involve repeated calls to
     * camel_service_authenticate() or camel_service_authenticate_sync().
     * A #CamelSession subclass is largely responsible for implementing this,
     * and should handle things like user prompts and secure password storage.
     * These issues are out-of-scope for Camel.
     * 
     * If an error occurs, or if authentication is aborted, the function sets
     * `error` and returns %FALSE.
     */
    authenticate_sync(service: Service, mechanism?: string | null, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This function is used by a #CamelService to tell the application
     * that the authentication information it provided via
     * camel_session_get_password() was rejected by the service. If the
     * application was caching this information, it should stop,
     * and if the service asks for it again, it should ask the user.
     * 
     * `service` and `item` identify the rejected authentication information,
     * as with camel_session_get_password().
     */
    forget_password(service: Service, item: string): boolean
    /**
     * Asynchronously forwards `message` in `folder` to the email address(s)
     * given by `address`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_session_forward_to_finish() to get the result of the
     * operation.
     */
    forward_to(folder: Folder, message: MimeMessage, address: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_session_forward_to().
     * 
     * If an error occurred, the function sets `error` and returns %FALSE.
     */
    forward_to_finish(result: Gio.AsyncResult): boolean
    /**
     * Forwards `message` in `folder` to the email address(es) given by `address`.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    forward_to_sync(folder: Folder, message: MimeMessage, address: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * The optional `for_folder` can be used to determine which filters
     * to add and which not.
     */
    get_filter_driver(type: string, for_folder?: Folder | null): FilterDriver
    /**
     * Returns the #CamelJunkFilter instance used to classify messages as
     * junk or not junk during filtering.
     * 
     * Note that #CamelJunkFilter itself is just an interface.  The application
     * must implement the interface and install a #CamelJunkFilter instance for
     * junk filtering to take place.
     */
    get_junk_filter(): JunkFilter | null
    get_junk_headers(): GLib.HashTable
    /**
     * Obtains the OAuth 2.0 access token for `service` along with its expiry
     * in seconds from the current time (or 0 if unknown).
     * 
     * Free the returned access token with g_free() when no longer needed.
     */
    get_oauth2_access_token_sync(service: Service, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_access_token */ string | null, /* out_expires_in */ number | null ]
    get_online(): boolean
    /**
     * This function is used by a #CamelService to ask the application and
     * the user for a password or other authentication data.
     * 
     * `service` and `item` together uniquely identify the piece of data the
     * caller is concerned with.
     * 
     * `prompt` is a question to ask the user (if the application doesn't
     * already have the answer cached). If %CAMEL_SESSION_PASSWORD_SECRET
     * is set, the user's input will not be echoed back.
     * 
     * If %CAMEL_SESSION_PASSWORD_STATIC is set, it means the password returned
     * will be stored statically by the caller automatically, for the current
     * session.
     * 
     * The authenticator should set `error` to %G_IO_ERROR_CANCELLED if
     * the user did not provide the information. The caller must g_free()
     * the information returned when it is done with it.
     */
    get_password(service: Service, prompt: string, item: string, flags: number): string
    /**
     * Searches for S/MIME certificates or PGP keys for the given `recipients,`
     * which are returned as base64 encoded strings in `out_certificates`.
     * This is used when encrypting messages. The `flags` influence what
     * the `out_certificates` will contain. The order of items in `out_certificates`
     * should match the order of items in `recipients,` with %NULL data for those
     * which could not be found.
     * 
     * The function should return failure only if some fatal error happened.
     * It's not an error when certificates for some, or all, recipients
     * could not be found.
     * 
     * This method is optional and the default implementation returns %TRUE
     * and sets the `out_certificates` to %NULL. It's the only exception
     * when the length of `recipients` and `out_certificates` can differ.
     * In all other cases the length of the two should match.
     * 
     * The `out_certificates` will be freed with g_slist_free_full (certificates, g_free);
     * when done with it.
     */
    get_recipient_certificates_sync(flags: number, recipients: string[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_certificates */ string[] ]
    /**
     * Returns the base directory under which to store user-specific mail cache.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific mail data.
     */
    get_user_data_dir(): string
    /**
     * Adds a function to be called whenever there are no higher priority events
     * pending.  If `function` returns %FALSE it is automatically removed from the
     * list of event sources and will not be called again.
     * 
     * This internally creates a main loop source using g_idle_source_new()
     * and attaches it to `session'`s own #CamelSession:main-context using
     * g_source_attach().
     * 
     * The `priority` is typically in the range between %G_PRIORITY_DEFAULT_IDLE
     * and %G_PRIORITY_HIGH_IDLE.
     */
    idle_add(priority: number, function_: GLib.SourceFunc): number
    /**
     * Returns a list of all #CamelService objects previously added using
     * camel_session_add_service().
     * 
     * The services returned in the list are referenced for thread-safety.
     * They must each be unreferenced with g_object_unref() when finished
     * with them.  Free the returned list itself with g_list_free().
     * 
     * An easy way to free the list property in one step is as follows:
     * 
     * |[
     *   g_list_free_full (list, g_object_unref);
     * ```
     * 
     */
    list_services(): Service[]
    /**
     * Looks up for the `name` in address books.
     */
    lookup_addressbook(name: string): boolean
    /**
     * Returns the #GMainContext on which event sources for `session` are to
     * be attached.
     */
    ref_main_context(): GLib.MainContext
    /**
     * References a #GNetworkMonitor instance, which had been previously set
     * by camel_session_set_network_monitor(). If none is set, then the default
     * #GNetworkMonitor is returned, as provided by g_network_monitor_get_default().
     * The returned pointer is referenced for thread safety, unref it with
     * g_object_unref() when no longer needed.
     */
    ref_network_monitor(): Gio.NetworkMonitor
    /**
     * Looks up a #CamelService by its unique identifier string.  The service
     * must have been previously added using camel_session_add_service().
     * 
     * The returned #CamelService is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_service(uid: string): Service | null
    /**
     * Looks up a #CamelService by trying to match its #CamelURL against the
     * given `url` and then checking that the object is of the desired `type`.
     * The service must have been previously added using
     * camel_session_add_service().
     * 
     * The returned #CamelService is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     * 
     * Note this function is significantly slower than camel_session_ref_service().
     */
    ref_service_by_url(url: URL, type: ProviderType): Service | null
    /**
     * Removes a #CamelService previously added by camel_session_add_service().
     */
    remove_service(service: Service): void
    /**
     * Removes all #CamelService instances added by camel_session_add_service().
     * 
     * This can be useful during application shutdown to ensure all #CamelService
     * instances are freed properly, especially since #CamelSession instances are
     * prone to reference cycles.
     */
    remove_services(): void
    /**
     * Installs the #CamelJunkFilter instance used to classify messages as
     * junk or not junk during filtering.
     * 
     * Note that #CamelJunkFilter itself is just an interface.  The application
     * must implement the interface and install a #CamelJunkFilter instance for
     * junk filtering to take place.
     */
    set_junk_filter(junk_filter?: JunkFilter | null): void
    set_junk_headers(headers: string[], values: string[]): void
    /**
     * Sets a network monitor instance for the `session`. This can be used
     * to override which #GNetworkMonitor should be used to check network
     * availability and whether a server is reachable.
     */
    set_network_monitor(network_monitor?: Gio.NetworkMonitor | null): void
    /**
     * Sets the online status of `session` to `online`.
     */
    set_online(online: boolean): void
    /**
     * This function provides a simple mechanism for providers to initiate
     * low-priority background jobs.  Jobs can be submitted from any thread,
     * but execution of the jobs is always as follows:
     * 
     * 1) The #CamelSession:job-started signal is emitted from the thread
     *    in which `session` was created.  This is typically the same thread
     *    that hosts the global default #GMainContext, or "main" thread.
     * 
     * 2) The `callback` function is invoked from a different thread where
     *    it's safe to call synchronous functions.
     * 
     * 3) Once `callback` has returned, the #CamelSesson:job-finished signal
     *    is emitted from the same thread as #CamelSession:job-started was
     *    emitted.
     * 
     * 4) Finally if a `notify` function was provided, it is invoked and
     *    passed `user_data` so that `user_data` can be freed.
     */
    submit_job(description: string, callback: SessionCallback): void
    /**
     * Prompts the user whether to accept `certificate` for `service`.  The
     * set of flags given in `errors` indicate why the `certificate` failed
     * validation.
     * 
     * If an error occurs during prompting or if the user declines to respond,
     * the function returns #CAMEL_CERT_TRUST_UNKNOWN and the certificate will
     * be rejected.
     */
    trust_prompt(service: Service, certificate: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags): CertTrust
    /**
     * Emits a #CamelSession:user_alert signal from an idle source on the main
     * loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * The purpose of the signal is to propagate a server-issued alert message
     * from `service` to a user interface.  The `type` hints at the nature of the
     * alert message.
     */
    user_alert(service: Service, type: SessionAlertType, message: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Session */
    /**
     * Instantiates a new #CamelService for `session`.  The `uid` identifies the
     * service for future lookup.  The `protocol` indicates which #CamelProvider
     * holds the #GType of the #CamelService subclass to instantiate.  The `type`
     * explicitly designates the service as a #CamelStore or #CamelTransport.
     * 
     * If the given `uid` has already been added, the existing #CamelService
     * with that `uid` is returned regardless of whether it agrees with the
     * given `protocol` and `type`.
     * 
     * If no #CamelProvider is available to handle the given `protocol,` or
     * if the #CamelProvider does not specify a valid #GType for `type,` the
     * function sets `error` and returns %NULL.
     * 
     * The returned #CamelService is referenced for thread-safety and must be
     * unreferenced with g_object_unref() when finished with it.
     */
    vfunc_add_service(uid: string, protocol: string, type: ProviderType): Service
    /**
     * Look up in an address book `book_uid` for an address `email_address`
     * and returns whether any such contact exists.
     * 
     * The `book_uid` can be either one of the special constants
     * %CAMEL_SESSION_BOOK_UID_ANY or %CAMEL_SESSION_BOOK_UID_COMPLETION,
     * or it can be a UID of a configured address book.
     * 
     * The `email_address` can contain multiple addresses, then the function
     * checks whether any of the given addresses is in the address book.
     */
    vfunc_addressbook_contains_sync(book_uid: string, email_address: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Authenticates `service,` which may involve repeated calls to
     * camel_service_authenticate() or camel_service_authenticate_sync().
     * A #CamelSession subclass is largely responsible for implementing this,
     * and should handle things like user prompts and secure password storage.
     * These issues are out-of-scope for Camel.
     * 
     * If an error occurs, or if authentication is aborted, the function sets
     * `error` and returns %FALSE.
     */
    vfunc_authenticate_sync(service: Service, mechanism?: string | null, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This function is used by a #CamelService to tell the application
     * that the authentication information it provided via
     * camel_session_get_password() was rejected by the service. If the
     * application was caching this information, it should stop,
     * and if the service asks for it again, it should ask the user.
     * 
     * `service` and `item` identify the rejected authentication information,
     * as with camel_session_get_password().
     */
    vfunc_forget_password(service: Service, item: string): boolean
    /**
     * Forwards `message` in `folder` to the email address(es) given by `address`.
     * 
     * If an error occurs, the function sets `error` and returns %FALSE.
     */
    vfunc_forward_to_sync(folder: Folder, message: MimeMessage, address: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * The optional `for_folder` can be used to determine which filters
     * to add and which not.
     */
    vfunc_get_filter_driver(type: string, for_folder?: Folder | null): FilterDriver
    /**
     * Obtains the OAuth 2.0 access token for `service` along with its expiry
     * in seconds from the current time (or 0 if unknown).
     * 
     * Free the returned access token with g_free() when no longer needed.
     */
    vfunc_get_oauth2_access_token_sync(service: Service, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_access_token */ string | null, /* out_expires_in */ number | null ]
    /**
     * This function is used by a #CamelService to ask the application and
     * the user for a password or other authentication data.
     * 
     * `service` and `item` together uniquely identify the piece of data the
     * caller is concerned with.
     * 
     * `prompt` is a question to ask the user (if the application doesn't
     * already have the answer cached). If %CAMEL_SESSION_PASSWORD_SECRET
     * is set, the user's input will not be echoed back.
     * 
     * If %CAMEL_SESSION_PASSWORD_STATIC is set, it means the password returned
     * will be stored statically by the caller automatically, for the current
     * session.
     * 
     * The authenticator should set `error` to %G_IO_ERROR_CANCELLED if
     * the user did not provide the information. The caller must g_free()
     * the information returned when it is done with it.
     */
    vfunc_get_password(service: Service, prompt: string, item: string, flags: number): string
    /**
     * Searches for S/MIME certificates or PGP keys for the given `recipients,`
     * which are returned as base64 encoded strings in `out_certificates`.
     * This is used when encrypting messages. The `flags` influence what
     * the `out_certificates` will contain. The order of items in `out_certificates`
     * should match the order of items in `recipients,` with %NULL data for those
     * which could not be found.
     * 
     * The function should return failure only if some fatal error happened.
     * It's not an error when certificates for some, or all, recipients
     * could not be found.
     * 
     * This method is optional and the default implementation returns %TRUE
     * and sets the `out_certificates` to %NULL. It's the only exception
     * when the length of `recipients` and `out_certificates` can differ.
     * In all other cases the length of the two should match.
     * 
     * The `out_certificates` will be freed with g_slist_free_full (certificates, g_free);
     * when done with it.
     */
    vfunc_get_recipient_certificates_sync(flags: number, recipients: string[], cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_certificates */ string[] ]
    vfunc_job_finished(cancellable: Gio.Cancellable | null, error: GLib.Error): void
    vfunc_job_started(cancellable?: Gio.Cancellable | null): void
    /**
     * Looks up for the `name` in address books.
     */
    vfunc_lookup_addressbook(name: string): boolean
    /**
     * Removes a #CamelService previously added by camel_session_add_service().
     */
    vfunc_remove_service(service: Service): void
    /**
     * Prompts the user whether to accept `certificate` for `service`.  The
     * set of flags given in `errors` indicate why the `certificate` failed
     * validation.
     * 
     * If an error occurs during prompting or if the user declines to respond,
     * the function returns #CAMEL_CERT_TRUST_UNKNOWN and the certificate will
     * be rejected.
     */
    vfunc_trust_prompt(service: Service, certificate: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags): CertTrust
    /**
     * Emits a #CamelSession:user_alert signal from an idle source on the main
     * loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * The purpose of the signal is to propagate a server-issued alert message
     * from `service` to a user interface.  The `type` hints at the nature of the
     * alert message.
     */
    vfunc_user_alert(service: Service, type: SessionAlertType, message: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Session */
    connect(sigName: "job-finished", callback: (($obj: Session, object: Gio.Cancellable | null, p0: GLib.Error) => void)): number
    connect_after(sigName: "job-finished", callback: (($obj: Session, object: Gio.Cancellable | null, p0: GLib.Error) => void)): number
    emit(sigName: "job-finished", object: Gio.Cancellable | null, p0: GLib.Error): void
    connect(sigName: "job-started", callback: (($obj: Session, object?: Gio.Cancellable | null) => void)): number
    connect_after(sigName: "job-started", callback: (($obj: Session, object?: Gio.Cancellable | null) => void)): number
    emit(sigName: "job-started", object?: Gio.Cancellable | null): void
    /**
     * This purpose of this signal is to propagate a server-issued alert
     * message from `service` to a user interface.  The `type` hints at the
     * severity of the alert message.
     */
    connect(sigName: "user-alert", callback: (($obj: Session, service: Service, type: SessionAlertType, message: string) => void)): number
    connect_after(sigName: "user-alert", callback: (($obj: Session, service: Service, type: SessionAlertType, message: string) => void)): number
    emit(sigName: "user-alert", service: Service, type: SessionAlertType, message: string): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::junk-filter", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::junk-filter", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::main-context", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::main-context", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::network-monitor", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::network-monitor", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::online", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::online", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-cache-dir", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-cache-dir", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-data-dir", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-data-dir", callback: (($obj: Session, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Session_ConstructProps)
    _init (config?: Session_ConstructProps): void
    static $gtype: GObject.Type
}
interface Settings_ConstructProps extends GObject.Object_ConstructProps {
}
class Settings {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    equal(settings_b: Settings): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    vfunc_clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    vfunc_equal(settings_b: Settings): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Settings_ConstructProps)
    _init (config?: Settings_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Returns an array of #GParamSpec for properties of `class` which are
     * considered to be settings.  By default all properties are considered
     * to be settings, but subclasses may wish to exclude certain properties.
     * Free the returned array with g_free().
     */
    static list_settings(settings_class: Settings | Function | GObject.Type, n_settings: number): GObject.ParamSpec
    static $gtype: GObject.Type
}
interface Store_ConstructProps extends Service_ConstructProps {
}
class Store {
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Service */
    readonly parent: Object
    readonly priv: ServicePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    can_refresh_folder(info: FolderInfo): boolean
    /**
     * Asynchronously creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_create_folder_finish() to get the result of the operation.
     */
    create_folder(parent_name: string | null, folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_create_folder().
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes local data for the given `folder_name`. The folder should
     * be part of the opened folders.
     * 
     * It doesn't delete the folder in the store (server) as such.
     * Use camel_store_delete_folder(), or its synchronous variant,
     * if you want to do that instead.
     */
    delete_cached_folder(folder_name: string): void
    /**
     * Asynchronously deletes the folder described by `folder_name`.  The
     * folder must be empty.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_delete_folder_finish() to get the result of the operation.
     */
    delete_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_delete_folder().
     */
    delete_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Returns a #GPtrArray of all the opened folders for the `store`. The caller owns
     * both the array and the folder references, so to free the array use:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    dup_opened_folders(): Folder[]
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    get_can_auto_save_changes(): boolean
    get_db(): DB
    get_flags(): number
    /**
     * Asynchronously gets a specific folder object from `store` by name.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_get_folder_finish() to get the result of the operation.
     */
    get_folder(folder_name: string, flags: StoreGetFolderFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder().
     */
    get_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Asynchronously fetches information about the folder structure of `store,`
     * starting with `top`.  For details of the behavior, see
     * camel_store_get_folder_info_sync().
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_folder_info_finish() to get the result of
     * the operation.
     */
    get_folder_info(top: string | null, flags: StoreGetFolderInfoFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder_info().
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     */
    get_folder_info_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    get_folders_bag(): ObjectBag
    /**
     * Asynchronously gets the folder in `store` into which new mail is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_inbox_folder_finish() to get the result of
     * the operation.
     */
    get_inbox_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_inbox_folder().
     */
    get_inbox_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Asynchronously gets the folder in `store` into which junk is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_junk_folder_finish() to get the result of
     * the operation.
     */
    get_junk_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_junk_folder().
     */
    get_junk_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    get_permissions(): number
    /**
     * Asynchronously gets the folder in `store` into which trash is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_trash_folder_finish() to get the result of
     * the operation.
     */
    get_trash_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_trash_folder().
     */
    get_trash_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store` asynchronously.
     * 
     * When the operation is finished, `callback` will be called. You can then
     * call camel_store_initial_setup_finish() to get the result of the operation.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_initial_setup().
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     */
    initial_setup_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Checks the state of the current CamelDB used for the `store` and eventually
     * runs maintenance routines on it.
     */
    maybe_run_db_maintenance(): boolean
    /**
     * Asynchronously renames the folder described by `old_name` to `new_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_rename_folder_finish() to get the result of the operation.
     */
    rename_folder(old_name: string, new_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_rename_folder().
     */
    rename_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets flags for the `store,` a bit-or of #CamelStoreFlags.
     */
    set_flags(flags: number): void
    /**
     * Sets permissions for the `store,` a bit-or of #CamelStorePermissionFlags
     */
    set_permissions(permissions: number): void
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store asynchronously.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Initable */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    vfunc_can_refresh_folder(info: FolderInfo): boolean
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    vfunc_create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    vfunc_delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    vfunc_get_can_auto_save_changes(): boolean
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    vfunc_get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    vfunc_get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    vfunc_get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    vfunc_get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    vfunc_get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    vfunc_initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    vfunc_rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Store */
    connect(sigName: "folder-created", callback: (($obj: Store, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-created", callback: (($obj: Store, object: FolderInfo) => void)): number
    emit(sigName: "folder-created", object: FolderInfo): void
    connect(sigName: "folder-deleted", callback: (($obj: Store, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-deleted", callback: (($obj: Store, object: FolderInfo) => void)): number
    emit(sigName: "folder-deleted", object: FolderInfo): void
    /**
     * This signal indicates significant changes have occurred to
     * the folder hierarchy of `store,` and that previously fetched
     * #CamelFolderInfo data should be considered stale.
     * 
     * Applications should handle this signal by replacing cached
     * #CamelFolderInfo data for `store` with fresh data by way of
     * camel_store_get_folder_info().
     * 
     * More often than not this signal will be emitted as a result of
     * user preference changes rather than actual server-side changes.
     * For example, a user may change a preference that reveals a set
     * of folders previously hidden from view, or that alters whether
     * to augment the `store` with virtual Junk and Trash folders.
     */
    connect(sigName: "folder-info-stale", callback: (($obj: Store) => void)): number
    connect_after(sigName: "folder-info-stale", callback: (($obj: Store) => void)): number
    emit(sigName: "folder-info-stale"): void
    connect(sigName: "folder-opened", callback: (($obj: Store, object: Folder) => void)): number
    connect_after(sigName: "folder-opened", callback: (($obj: Store, object: Folder) => void)): number
    emit(sigName: "folder-opened", object: Folder): void
    connect(sigName: "folder-renamed", callback: (($obj: Store, object: string, p0: FolderInfo) => void)): number
    connect_after(sigName: "folder-renamed", callback: (($obj: Store, object: string, p0: FolderInfo) => void)): number
    emit(sigName: "folder-renamed", object: string, p0: FolderInfo): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connection-status", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Store, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Store_ConstructProps)
    _init (config?: Store_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Helper function for constructing #GInitable object. This is
     * similar to g_object_newv() but also initializes the object
     * and returns %NULL, setting an error on failure.
     */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface StoreSettings_ConstructProps extends Settings_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.StoreSettings */
    filter_inbox?: boolean
    store_changes_interval?: number
}
class StoreSettings {
    /* Properties of Camel-1.2.Camel.StoreSettings */
    filter_inbox: boolean
    store_changes_interval: number
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StoreSettings */
    /**
     * Returns whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    get_filter_inbox(): boolean
    /**
     * Returns the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    get_store_changes_interval(): number
    /**
     * Sets whether to automatically apply filters to newly arrived messages
     * in the store's Inbox folder (assuming it has an Inbox folder).
     */
    set_filter_inbox(filter_inbox: boolean): void
    /**
     * Sets the interval, in seconds, for the changes in the folder being
     * saved automatically. 0 means immediately, while -1 means turning off
     * automatic folder change saving.
     */
    set_store_changes_interval(interval: number): void
    /* Methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    equal(settings_b: Settings): boolean
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Settings */
    /**
     * Creates a copy of `settings,` such that passing `settings` and the
     * copied instance to camel_settings_equal() would return %TRUE.
     * 
     * By default, this creates a new settings instance with the same #GType
     * as `settings,` and copies all #GObject property values from `settings`
     * to the new instance.
     */
    vfunc_clone(): Settings
    /**
     * Returns %TRUE if `settings_a` and `settings_b` are equal.
     * 
     * By default, equality requires both instances to have the same #GType
     * with the same set of #GObject properties, and each property value in
     * `settings_a` is equal to the corresponding value in `settings_b`.
     */
    vfunc_equal(settings_b: Settings): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::filter-inbox", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::filter-inbox", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::store-changes-interval", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::store-changes-interval", callback: (($obj: StoreSettings, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StoreSettings_ConstructProps)
    _init (config?: StoreSettings_ConstructProps): void
    static $gtype: GObject.Type
}
interface StoreSummary_ConstructProps extends GObject.Object_ConstructProps {
}
class StoreSummary {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StoreSummary */
    /**
     * The `info` record should have been generated by calling one of the
     * info_new_*() functions, as it will be free'd based on the summary
     * class.  And MUST NOT be allocated directly using malloc.
     */
    add(info: StoreInfo): void
    /**
     * Obtain a copy of the summary array.  This is done atomically,
     * so cannot contain empty entries.
     * 
     * It must be freed using camel_store_summary_array_free().
     */
    array(): StoreInfo[]
    /**
     * Free the folder summary array.
     */
    array_free(array: StoreInfo[]): void
    /**
     * Connects listeners for count changes on `folder_summary` to keep
     * CamelStoreInfo.total and CamelStoreInfo.unread in sync transparently.
     * The `folder_summary` is stored in `summary` as `path`. Use
     * camel_store_summary_disconnect_folder_summary() to disconnect from
     * listening.
     */
    connect_folder_summary(path: string, folder_summary: FolderSummary): boolean
    /**
     * Get the number of summary items stored in this summary.
     */
    count(): number
    /**
     * Diconnects count change listeners previously connected
     * by camel_store_summary_connect_folder_summary().
     */
    disconnect_folder_summary(folder_summary: FolderSummary): boolean
    /**
     * Unref and potentially free `info,` and all associated memory.
     */
    info_unref(info: StoreInfo): void
    /**
     * Load the summary off disk.
     */
    load(): number
    /**
     * Remove a specific `info` record from the summary.
     */
    remove(info: StoreInfo): void
    /**
     * Remove a specific info record from the summary, by `path`.
     */
    remove_path(path: string): void
    /**
     * Writes the summary to disk.  The summary is only written if changes
     * have occurred.
     */
    save(): number
    /**
     * Set the filename where the summary will be loaded to/saved from.
     */
    set_filename(filename: string): void
    /**
     * Sorts the array of the folders using the `compare_func`.
     */
    sort(compare_func: GLib.CompareDataFunc): void
    /**
     * Mark the summary as changed, so that a save will force it to be
     * written back to disk.
     */
    touch(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.StoreSummary */
    vfunc_store_info_free(info: StoreInfo): void
    vfunc_store_info_save(file: object | null, info: StoreInfo): number
    vfunc_store_info_set_string(info: StoreInfo, type: number, value: string): void
    vfunc_summary_header_load(file?: object | null): number
    vfunc_summary_header_save(file?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StoreSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StoreSummary, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StoreSummary_ConstructProps)
    _init (config?: StoreSummary_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StoreSummary
    static $gtype: GObject.Type
}
interface Stream_ConstructProps extends GObject.Object_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.Stream */
    base_stream?: Gio.IOStream
}
class Stream {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Stream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Stream, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: Stream, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: Stream, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Stream_ConstructProps)
    _init (config?: Stream_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(base_stream: Gio.IOStream): Stream
    static $gtype: GObject.Type
}
interface StreamBuffer_ConstructProps extends Stream_ConstructProps {
}
class StreamBuffer {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamBuffer */
    /**
     * Discards any cached data in the `sbf`. The next read reads
     * from the stream.
     */
    discard_cache(): void
    /**
     * Read a line of characters up to the next newline character or
     * `max-1` characters.
     * 
     * If the newline character is encountered, then it will be
     * included in the buffer `buf`.  The buffer will be %NULL terminated.
     */
    gets(buf: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * This function reads a complete newline-terminated line from the stream
     * and returns it in allocated memory. The trailing newline (and carriage
     * return if any) are not included in the returned string.
     */
    read_line(cancellable?: Gio.Cancellable | null): string | null
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamBuffer */
    vfunc_init(stream: Stream, mode: StreamBufferMode): void
    vfunc_init_vbuf(stream: Stream, mode: StreamBufferMode, buf: string, size: number): void
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamBuffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamBuffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamBuffer, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamBuffer_ConstructProps)
    _init (config?: StreamBuffer_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(stream: Stream, mode: StreamBufferMode): StreamBuffer
    /* Function overloads */
    static new(base_stream: Gio.IOStream): StreamBuffer
    static $gtype: GObject.Type
}
interface StreamFilter_ConstructProps extends Stream_ConstructProps {
}
class StreamFilter {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamFilter */
    /**
     * Add a new #CamelMimeFilter to execute during the processing of this
     * stream.  Each filter added is processed after the previous one.
     * 
     * Note that a filter should only be added to a single stream
     * at a time, otherwise unpredictable results may occur.
     */
    add(filter: MimeFilter): number
    get_source(): Stream
    /**
     * Remove a processing filter from the stream by id.
     */
    remove(id: number): void
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamFilter */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamFilter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamFilter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamFilter, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamFilter_ConstructProps)
    _init (config?: StreamFilter_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(source: Stream): StreamFilter
    /* Function overloads */
    static new(base_stream: Gio.IOStream): StreamFilter
    static $gtype: GObject.Type
}
interface StreamFs_ConstructProps extends Stream_ConstructProps {
}
class StreamFs {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamFs */
    get_fd(): number
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamFs */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamFs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamFs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamFs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamFs, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamFs_ConstructProps)
    _init (config?: StreamFs_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new_with_fd(fd: number): StreamFs
    static new_with_name(name: string, flags: number, mode: number): StreamFs
    static $gtype: GObject.Type
}
interface StreamMem_ConstructProps extends Stream_ConstructProps {
}
class StreamMem {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamMem */
    get_byte_array(): Uint8Array
    /**
     * Set `buffer` to be the backing data to the existing #CamelStreamMem, `mem`.
     * 
     * Note: `buffer` will be copied into an internal #GByteArray structure
     * and so may have resource implications to consider.
     */
    set_buffer(buffer: Uint8Array): void
    /**
     * Set `buffer` to be the backing data to the existing #CamelStreamMem, `mem`.
     * 
     * Note: `mem` will not take ownership of `buffer` and so will need to
     * be freed separately from `mem`.
     */
    set_byte_array(buffer: Uint8Array): void
    /**
     * Mark the memory stream as secure.  At the very least this means the
     * data in the buffer will be cleared when the buffer is finalized.
     * This only applies to buffers owned by the stream.
     */
    set_secure(): void
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamMem */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamMem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamMem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamMem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamMem, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamMem_ConstructProps)
    _init (config?: StreamMem_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StreamMem
    /* Function overloads */
    static new(base_stream: Gio.IOStream): StreamMem
    static new_with_buffer(buffer: Uint8Array): StreamMem
    static new_with_byte_array(buffer: Uint8Array): StreamMem
    static $gtype: GObject.Type
}
interface StreamNull_ConstructProps extends Stream_ConstructProps {
}
class StreamNull {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamNull */
    get_bytes_written(): number
    get_ends_with_crlf(): boolean
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamNull */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamNull, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamNull, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamNull, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamNull, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamNull_ConstructProps)
    _init (config?: StreamNull_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StreamNull
    /* Function overloads */
    static new(base_stream: Gio.IOStream): StreamNull
    static $gtype: GObject.Type
}
interface StreamProcess_ConstructProps extends Stream_ConstructProps {
}
class StreamProcess {
    /* Properties of Camel-1.2.Camel.Stream */
    base_stream: Gio.IOStream
    /* Fields of Camel-1.2.Camel.Stream */
    readonly parent: GObject.Object
    readonly priv: StreamPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.StreamProcess */
    connect(command: string, env: string): number
    /* Methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Returns the #GIOStream for `stream`.  This is only valid if `stream` was
     * created with camel_stream_new().  For all other #CamelStream subclasses
     * this function returns %NULL.
     * 
     * The returned #GIOStream is referenced for thread-safety and should be
     * unreferenced with g_object_unref() when finished with it.
     */
    ref_base_stream(): Gio.IOStream | null
    /**
     * Replaces the #GIOStream passed to camel_stream_new() with `base_stream`.
     * The new `base_stream` should wrap the original #GIOStream, such as when
     * adding Transport Layer Security after issuing a STARTTLS command.
     */
    set_base_stream(base_stream: Gio.IOStream): void
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Writes the string to the stream.
     */
    write_string(string: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Write all of a stream (until eos) into another stream, in a
     * blocking fashion.
     */
    write_to_stream(output_stream: Stream, cancellable?: Gio.Cancellable | null): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Seekable */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.StreamProcess */
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Stream */
    /**
     * Closes the stream.
     */
    vfunc_close(cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if there are bytes left to read on the `stream` object.
     */
    vfunc_eos(): boolean
    /**
     * Flushes any buffered data to the stream's backing store.  Only
     * meaningful for writable streams.
     */
    vfunc_flush(cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to read up to `n` bytes from `stream` into `buffer`.
     */
    vfunc_read(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Attempts to write up to `n` bytes of `buffer` into `stream`.
     */
    vfunc_write(buffer: number[], cancellable?: Gio.Cancellable | null): number
    /**
     * Tests if the stream supports the #GSeekableIface.
     */
    vfunc_can_seek(): boolean
    /**
     * Tests if the length of the stream can be adjusted with
     * g_seekable_truncate().
     */
    vfunc_can_truncate(): boolean
    /**
     * Seeks in the stream by the given `offset,` modified by `type`.
     * 
     * Attempting to seek past the end of the stream will have different
     * results depending on if the stream is fixed-sized or resizable.  If
     * the stream is resizable then seeking past the end and then writing
     * will result in zeros filling the empty space.  Seeking past the end
     * of a resizable stream and reading will result in EOF.  Seeking past
     * the end of a fixed-sized stream will fail.
     * 
     * Any operation that would result in a negative offset will fail.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
     */
    vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Tells the current position within the stream.
     */
    vfunc_tell(): number
    /**
     * Sets the length of the stream to `offset`. If the stream was previously
     * larger than `offset,` the extra data is discarded. If the stream was
     * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
     * 
     * If `cancellable` is not %NULL, then the operation can be cancelled by
     * triggering the cancellable object from another thread. If the operation
     * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
     * operation was partially finished when the operation was cancelled the
     * partial result will be returned, without an error.
     */
    vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: StreamProcess, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: StreamProcess, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::base-stream", callback: (($obj: StreamProcess, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::base-stream", callback: (($obj: StreamProcess, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: StreamProcess_ConstructProps)
    _init (config?: StreamProcess_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): StreamProcess
    /* Function overloads */
    static new(base_stream: Gio.IOStream): StreamProcess
    static $gtype: GObject.Type
}
interface TextIndex_ConstructProps extends Index_ConstructProps {
}
class TextIndex {
    /* Fields of Camel-1.2.Camel.Index */
    readonly parent: GObject.Object
    readonly priv: IndexPrivate
    readonly path: string
    readonly version: number
    readonly flags: number
    readonly state: number
    readonly normalize: IndexNorm
    readonly normalize_data: object
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.TextIndex */
    dump(): void
    info(): void
    validate(): void
    /* Methods of Camel-1.2.Camel.Index */
    add_name(name: string): IndexName | null
    compress(): number
    construct(path: string, flags: number): void
    delete(): number
    /**
     * Deletes the given `name` from `index`.
     */
    delete_name(name: string): void
    find(word: string): IndexCursor | null
    find_name(name: string): IndexCursor | null
    has_name(name: string): number
    rename(path: string): number
    set_normalize(func: IndexNorm): void
    sync(): number
    words(): IndexCursor | null
    write_name(idn: IndexName): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.Index */
    vfunc_add_name(name: string): IndexName | null
    vfunc_compress(): number
    vfunc_delete_(): number
    /**
     * Deletes the given `name` from `index`.
     */
    vfunc_delete_name(name: string): void
    vfunc_find(word: string): IndexCursor | null
    vfunc_find_name(name: string): IndexCursor | null
    vfunc_has_name(name: string): number
    vfunc_rename(path: string): number
    vfunc_sync(): number
    vfunc_words(): IndexCursor | null
    vfunc_write_name(idn: IndexName): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: TextIndex, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextIndex, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextIndex_ConstructProps)
    _init (config?: TextIndex_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(path: string, flags: number): TextIndex
    static check(path: string): number
    static remove(old: string): number
    static rename(old: string, new_: string): number
    static $gtype: GObject.Type
}
interface TextIndexCursor_ConstructProps extends IndexCursor_ConstructProps {
}
class TextIndexCursor {
    /* Fields of Camel-1.2.Camel.IndexCursor */
    readonly parent: GObject.Object
    readonly priv: IndexCursorPrivate
    readonly index: Index
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.IndexCursor */
    next(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.IndexCursor */
    vfunc_next(): string
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: TextIndexCursor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextIndexCursor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextIndexCursor_ConstructProps)
    _init (config?: TextIndexCursor_ConstructProps): void
    static $gtype: GObject.Type
}
interface TextIndexKeyCursor_ConstructProps extends IndexCursor_ConstructProps {
}
class TextIndexKeyCursor {
    /* Fields of Camel-1.2.Camel.IndexCursor */
    readonly parent: GObject.Object
    readonly priv: IndexCursorPrivate
    readonly index: Index
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.IndexCursor */
    next(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.IndexCursor */
    vfunc_next(): string
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: TextIndexKeyCursor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextIndexKeyCursor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextIndexKeyCursor_ConstructProps)
    _init (config?: TextIndexKeyCursor_ConstructProps): void
    static $gtype: GObject.Type
}
interface TextIndexName_ConstructProps extends IndexName_ConstructProps {
}
class TextIndexName {
    /* Fields of Camel-1.2.Camel.IndexName */
    readonly parent: GObject.Object
    readonly priv: IndexNamePrivate
    readonly index: Index
    readonly name: string
    readonly buffer: Uint8Array
    readonly words: GLib.HashTable
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.IndexName */
    add_buffer(buffer: string, len: number): number
    add_word(word: string): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.IndexName */
    vfunc_add_buffer(buffer: string, len: number): number
    vfunc_add_word(word: string): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: TextIndexName, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: TextIndexName, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: TextIndexName_ConstructProps)
    _init (config?: TextIndexName_ConstructProps): void
    static $gtype: GObject.Type
}
interface Transport_ConstructProps extends Service_ConstructProps {
}
class Transport {
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Service */
    readonly parent: Object
    readonly priv: ServicePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.Transport */
    /**
     * Sends the message asynchronously to the given recipients, regardless of
     * the contents of `message`.  If the message contains a "Bcc" header, the
     * transport is responsible for stripping it.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_transport_send_to_finish() to get the result of the operation.
     */
    send_to(message: MimeMessage, from: Address, recipients: Address, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_transport_send_to().
     */
    send_to_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* out_sent_message_saved */ boolean ]
    /**
     * Sends the message to the given recipients, regardless of the contents
     * of `message`.  If the message contains a "Bcc" header, the transport
     * is responsible for stripping it.
     */
    send_to_sync(message: MimeMessage, from: Address, recipients: Address, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_sent_message_saved */ boolean ]
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Initable */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Transport */
    /**
     * Sends the message to the given recipients, regardless of the contents
     * of `message`.  If the message contains a "Bcc" header, the transport
     * is responsible for stripping it.
     */
    vfunc_send_to_sync(message: MimeMessage, from: Address, recipients: Address, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_sent_message_saved */ boolean ]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::connection-status", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: Transport, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: Transport_ConstructProps)
    _init (config?: Transport_ConstructProps): void
    /* Static methods and pseudo-constructors */
    /**
     * Helper function for constructing #GInitable object. This is
     * similar to g_object_newv() but also initializes the object
     * and returns %NULL, setting an error on failure.
     */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface VTrashFolder_ConstructProps extends VeeFolder_ConstructProps {
}
class VTrashFolder {
    /* Properties of Camel-1.2.Camel.VeeFolder */
    auto_update: boolean
    /* Properties of Camel-1.2.Camel.Folder */
    /**
     * The folder's description.
     */
    description: string
    /**
     * The folder's display name.
     */
    display_name: string
    /**
     * The folder's fully qualified name.
     */
    full_name: string
    /**
     * A #CamelThreeState persistent option of the folder,
     * which can override global option to mark messages
     * as seen after certain interval.
     */
    mark_seen: ThreeState
    /**
     * Timeout in milliseconds for marking messages as seen.
     */
    mark_seen_timeout: number
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.VeeFolder */
    readonly parent: Folder
    readonly priv: VeeFolderPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VTrashFolder */
    get_folder_type(): VTrashFolderType
    /* Methods of Camel-1.2.Camel.VeeFolder */
    /**
     * Adds `subfolder` as a source folder to `vfolder`.
     */
    add_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Adds the `mi_data` to the `vfolder`. The `changes` can be
     * updated with the made change and later used to notify others
     * with camel_folder_changed() on the `vfolder`. This can be used
     * only for the Unmatched folder.
     */
    add_vuid(mi_data?: object | null, changes?: FolderChangeInfo | null): void
    /**
     * Initializes internal structures of the `vf`. This is meant to be
     * called by the descendants of #CamelVeeFolder.
     */
    construct(flags: number): void
    get_auto_update(): boolean
    get_expression(): string
    get_flags(): number
    /**
     * Find the real folder (and message info UID) for the given `vinfo`.
     * When the `realuid` is not %NULL and it's set, then use g_free() to
     * free it, when no longer needed.
     */
    get_location(vinfo: VeeMessageInfo): [ /* returnType */ Folder, /* realuid */ string | null ]
    get_vee_uid_folder(vee_message_uid: string): Folder | null
    /**
     * The next `subfolder-'`s 'changed' event will be silently ignored. This
     * is usually used in virtual folders when the change was done in them,
     * but it is neither vTrash nor vJunk folder. Doing this avoids unnecessary
     * removals of messages which don't satisfy search criteria anymore,
     * which could be done on asynchronous delivery of folder's 'changed' signal.
     * These ignored changes are accumulated and used on folder refresh.
     */
    ignore_next_changed_event(subfolder: Folder): void
    /**
     * Propagate any skipped changes into the `vf`. The skipped changes are used to not
     * hide the messages from the search folder unexpectedly. The function does nothing
     * when there are no changes to be propagated.
     */
    propagate_skipped_changes(): void
    /**
     * Rebuild the folder `subfolder,` if it should be.
     */
    rebuild_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Returns a #GList of all folders of this `vfolder,` which
     * are used to populate it. These are in no particular order.
     * 
     * Free the returned #GList with
     * g_list_free_full (folders, g_object_unref);
     * when no longer needed.
     */
    ref_folders(): Folder[]
    /**
     * Removed the source folder, `subfolder,` from the virtual folder, `vfolder`.
     */
    remove_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Make sure the next `subfolder-'`s 'changed' event will not be silently ignored.
     * This is a counter-part function of camel_vee_folder_ignore_next_changed_event(),
     * when there was expected a change, which did not happen, to take back the previous
     * ignore event request.
     */
    remove_from_ignore_changed_event(subfolder: Folder): void
    /**
     * Removes given `mi_data` from the `vfolder`. The `changes` can be
     * updated with the made change and later used to notify others
     * with camel_folder_changed() on the `vfolder`. This can be used
     * only for the Unmatched folder.
     */
    remove_vuid(mi_data?: object | null, changes?: FolderChangeInfo | null): void
    /**
     * Sets whether the `vfolder` can automatically update when of its
     * subfolders changes.
     */
    set_auto_update(auto_update: boolean): void
    /**
     * Sets an SExp expression to be used for this `vfolder`
     */
    set_expression(expression: string): void
    /**
     * Set the whole list of folder sources on a vee folder.
     */
    set_folders(folders: Folder[], cancellable?: Gio.Cancellable | null): void
    /* Methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder` asynchronously.  Only the flag and tag data
     * from `info` are used.  If `info` is %NULL, no flags or tags will be set.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_append_message_finish() to get the result of
     * the operation.
     */
    append_message(message: MimeMessage, info: MessageInfo | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_append_message_finish().
     */
    append_message_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Marks `folder` as deleted and performs any required cleanup.
     * 
     * This also emits the #CamelFolder::deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     */
    delete(): void
    /**
     * Thread-safe variation of camel_folder_get_description().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_description(): string
    /**
     * Thread-safe variation of camel_folder_get_display_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string
    /**
     * Thread-safe variation of camel_folder_get_full_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_full_name(): string
    /**
     * Asynchronously deletes messages which have been marked as "DELETED".
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_expunge_finish() to get the result of the operation.
     */
    expunge(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_expunge().
     */
    expunge_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the provided array and its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids when the provided
     * information was created explicitly by the corresponding get_ call.
     */
    free_deep(array: string[]): void
    /**
     * Frees the provided array but not its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids or free_summary when
     * the returned array needs to be freed but its contents come from
     * "static" information.
     */
    free_shallow(array: string[]): void
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    freeze(): void
    get_deleted_message_count(): number
    /**
     * Returns a description of the folder suitable for displaying to the user.
     */
    get_description(): string
    /**
     * Returns the display name for the folder.  The fully qualified name
     * can be obtained with camel_folder_get_full_name().
     */
    get_display_name(): string
    get_filename(uid: string): string
    get_folder_summary(): FolderSummary
    get_frozen_count(): number
    /**
     * Returns the fully qualified name of the folder.
     */
    get_full_name(): string
    get_mark_seen(): ThreeState
    get_mark_seen_timeout(): number
    /**
     * Asynchronously gets the message corresponding to `message_uid` from `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_get_message_finish() to get the result of the operation.
     */
    get_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    get_message_count(): number
    /**
     * Finishes the operation started with camel_folder_get_message().
     */
    get_message_finish(result: Gio.AsyncResult): MimeMessage
    get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    get_message_user_flag(uid: string, name: string): boolean
    get_message_user_tag(uid: string, name: string): string
    get_parent_store(): object | null
    get_permanent_flags(): number
    /**
     * Asynchronously gets a list of known quotas for `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_get_quota_info_finish() to get the result of
     * the operation.
     */
    get_quota_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_get_quota_info().
     * Free the returned #CamelFolderQuotaInfo struct with
     * camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_finish(result: Gio.AsyncResult): FolderQuotaInfo
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    get_uncached_uids(uids: string[]): string[]
    get_unread_message_count(): number
    /**
     * Get whether or not the folder has a summary.
     */
    has_summary_capability(): boolean
    is_frozen(): boolean
    /**
     * Locks `folder`. Unlock it with camel_folder_unlock().
     */
    lock(): void
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_purge_message_cache_finish() to get the result of the
     * operation.
     */
    purge_message_cache(start_uid: string, end_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_purge_message_cache().
     */
    purge_message_cache_finish(result: Gio.AsyncResult): boolean
    /**
     * Delete the local cache of all messages between these uids.
     */
    purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously synchronizes a folder's summary with its backing store.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_refresh_info_finish() to get the result of the operation.
     */
    refresh_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_refresh_info().
     */
    refresh_info_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    rename(new_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    search_free(result: string[]): void
    /**
     * Sets a description of the folder suitable for displaying to the user.
     */
    set_description(description: string): void
    /**
     * Sets the display name for the folder.
     */
    set_display_name(display_name: string): void
    /**
     * Sets folder flags (bit-or of #CamelFolderFlags) for the `folder`.
     */
    set_flags(folder_flags: number): void
    /**
     * Sets the fully qualified name of the folder.
     */
    set_full_name(full_name: string): void
    /**
     * Sets whether folder locking (camel_folder_lock() and camel_folder_unlock())
     * should be used. When set to %FALSE, the two functions do nothing and simply
     * return.
     */
    set_lock_async(skip_folder_lock: boolean): void
    /**
     * Sets whether the messages in this `folder` should be marked
     * as seen automatically. An inconsistent state means to use
     * global option.
     */
    set_mark_seen(mark_seen: ThreeState): void
    /**
     * Sets the `timeout` in milliseconds for marking messages
     * as seen in this `folder`. Whether the timeout is used
     * depends on camel_folder_get_mark_seen().
     */
    set_mark_seen_timeout(timeout: number): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    set_message_flags(uid: string, mask: number, set: number): boolean
    set_message_user_flag(uid: string, name: string, value: boolean): void
    set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    sort_uids(uids: string[]): void
    /**
     * Synchronizes any changes that have been made to `folder` to its backing
     * store asynchronously, optionally expunging deleted messages as well.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Asynchronously ensure that a message identified by `message_uid` has been
     * synchronized in `folder` so that calling camel_folder_get_message() on it
     * later will work in offline mode.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_message_finish() to get the result of the
     * operation.
     */
    synchronize_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize_message().
     */
    synchronize_message_finish(result: Gio.AsyncResult): boolean
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets a #CamelFolderSummary of the folder. It consumes the `summary`.
     * 
     * This is supposed to be called only by the descendants of
     * the #CamelFolder and only at the construction time. Calling
     * this function twice yeilds to an error.
     */
    take_folder_summary(summary: FolderSummary): void
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    thaw(): void
    /**
     * Asynchronously copies or moves messages from one folder to another.
     * If the `source` or `destination` folders have the same parent store,
     * this may be more efficient than using camel_folder_append_message().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_transfer_messages_to_finish() to get the result of the
     * operation.
     */
    transfer_messages_to(message_uids: string[], destination: Folder, delete_originals: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_transfer_messages_to().
     */
    transfer_messages_to_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Unlocks `folder,` previously locked with camel_folder_lock().
     */
    unlock(): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.VeeFolder */
    /**
     * Adds `subfolder` as a source folder to `vfolder`.
     */
    vfunc_add_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    vfunc_folder_changed(subfolder: Folder, changes: FolderChangeInfo): void
    /**
     * Rebuild the folder `subfolder,` if it should be.
     */
    vfunc_rebuild_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Removed the source folder, `subfolder,` from the virtual folder, `vfolder`.
     */
    vfunc_remove_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Sets an SExp expression to be used for this `vfolder`
     */
    vfunc_set_expression(expression: string): void
    /* Virtual methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    vfunc_append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    vfunc_changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    vfunc_cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    vfunc_count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    vfunc_delete_(): void
    vfunc_deleted(): void
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    vfunc_expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    vfunc_free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    vfunc_freeze(): void
    vfunc_get_filename(uid: string): string
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    vfunc_get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    vfunc_get_message_count(): number
    vfunc_get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    vfunc_get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    vfunc_get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    vfunc_get_message_user_flag(uid: string, name: string): boolean
    vfunc_get_message_user_tag(uid: string, name: string): string
    vfunc_get_permanent_flags(): number
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    vfunc_get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    vfunc_get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    vfunc_get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_get_uncached_uids(uids: string[]): string[]
    vfunc_has_search_capability(): boolean
    vfunc_is_frozen(): boolean
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    vfunc_prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     */
    vfunc_purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    vfunc_refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    vfunc_rename(new_name: string): void
    vfunc_renamed(old_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    vfunc_search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    vfunc_search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    vfunc_search_free(result: string[]): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    vfunc_set_message_flags(uid: string, mask: number, set: number): boolean
    vfunc_set_message_user_flag(uid: string, name: string, value: boolean): void
    vfunc_set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    vfunc_sort_uids(uids: string[]): void
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    vfunc_synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    vfunc_thaw(): void
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    vfunc_transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Folder */
    connect(sigName: "changed", callback: (($obj: VTrashFolder, changes: FolderChangeInfo) => void)): number
    connect_after(sigName: "changed", callback: (($obj: VTrashFolder, changes: FolderChangeInfo) => void)): number
    emit(sigName: "changed", changes: FolderChangeInfo): void
    connect(sigName: "deleted", callback: (($obj: VTrashFolder) => void)): number
    connect_after(sigName: "deleted", callback: (($obj: VTrashFolder) => void)): number
    emit(sigName: "deleted"): void
    connect(sigName: "renamed", callback: (($obj: VTrashFolder, old_name: string) => void)): number
    connect_after(sigName: "renamed", callback: (($obj: VTrashFolder, old_name: string) => void)): number
    emit(sigName: "renamed", old_name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-update", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-update", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::full-name", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::full-name", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen-timeout", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen-timeout", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: VTrashFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VTrashFolder_ConstructProps)
    _init (config?: VTrashFolder_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(parent_store: Store, type: VTrashFolderType): VTrashFolder
    /* Function overloads */
    static new(parent_store: Store, full: string, flags: number): VTrashFolder
    static $gtype: GObject.Type
}
interface VeeDataCache_ConstructProps extends GObject.Object_ConstructProps {
}
class VeeDataCache {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeDataCache */
    /**
     * Adds the `subfolder` to the `data_cache` to be tracked by it. The `subfolder`
     * is referenced for later use. The function does nothing when the `subfolder`
     * is already in the `data_cache`. The subfolders can be removed with
     * camel_vee_data_cache_remove_subfolder().
     */
    add_subfolder(subfolder: Folder): void
    /**
     * Returns whether data_cache contains given `orig_message_uid` for the given `folder`.
     * Unlike camel_vee_data_cache_get_message_info_data(), this only
     * returns %FALSE if not, while camel_vee_data_cache_get_message_info_data()
     * auto-adds it to data_cache.
     */
    contains_message_info_data(folder: Folder, orig_message_uid: string): boolean
    /**
     * Calls the `func` for each message info data from the given `fromfolder`
     */
    foreach_message_info_data(fromfolder: Folder, func: ForeachInfoData): void
    /**
     * Returns a referenced #CamelVeeMessageInfoData referencing the given `folder`
     * and `orig_message_uid`. If it's not part of the `data_cache,` then it is
     * created and auto-added. Use camel_vee_data_cache_contains_message_info_data()
     * when you only want to check the existence, without adding it to the `data_cache`.
     */
    get_message_info_data(folder: Folder, orig_message_uid: string): VeeMessageInfoData
    get_message_info_data_by_vuid(vee_message_uid: string): VeeMessageInfoData | null
    /**
     * Returns a #CamelVeeSubfolderData for the given `folder`.
     */
    get_subfolder_data(folder: Folder): VeeSubfolderData
    /**
     * Removes given `mi_data` from the `data_cache`.
     */
    remove_message_info_data(mi_data: VeeMessageInfoData): void
    /**
     * Removes given `subfolder` from the `data_cache,` which had been
     * previously added with camel_vee_data_cache_add_subfolder().
     * The function does nothing, when the `subfolder` is not part
     * of the `data_cache`.
     */
    remove_subfolder(subfolder: Folder): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeDataCache, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeDataCache, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeDataCache_ConstructProps)
    _init (config?: VeeDataCache_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): VeeDataCache
    static $gtype: GObject.Type
}
interface VeeFolder_ConstructProps extends Folder_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.VeeFolder */
    auto_update?: boolean
}
class VeeFolder {
    /* Properties of Camel-1.2.Camel.VeeFolder */
    auto_update: boolean
    /* Properties of Camel-1.2.Camel.Folder */
    /**
     * The folder's description.
     */
    description: string
    /**
     * The folder's display name.
     */
    display_name: string
    /**
     * The folder's fully qualified name.
     */
    full_name: string
    /**
     * A #CamelThreeState persistent option of the folder,
     * which can override global option to mark messages
     * as seen after certain interval.
     */
    mark_seen: ThreeState
    /**
     * Timeout in milliseconds for marking messages as seen.
     */
    mark_seen_timeout: number
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Folder */
    readonly parent: Object
    readonly priv: FolderPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeFolder */
    /**
     * Adds `subfolder` as a source folder to `vfolder`.
     */
    add_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Adds the `mi_data` to the `vfolder`. The `changes` can be
     * updated with the made change and later used to notify others
     * with camel_folder_changed() on the `vfolder`. This can be used
     * only for the Unmatched folder.
     */
    add_vuid(mi_data?: object | null, changes?: FolderChangeInfo | null): void
    /**
     * Initializes internal structures of the `vf`. This is meant to be
     * called by the descendants of #CamelVeeFolder.
     */
    construct(flags: number): void
    get_auto_update(): boolean
    get_expression(): string
    get_flags(): number
    /**
     * Find the real folder (and message info UID) for the given `vinfo`.
     * When the `realuid` is not %NULL and it's set, then use g_free() to
     * free it, when no longer needed.
     */
    get_location(vinfo: VeeMessageInfo): [ /* returnType */ Folder, /* realuid */ string | null ]
    get_vee_uid_folder(vee_message_uid: string): Folder | null
    /**
     * The next `subfolder-'`s 'changed' event will be silently ignored. This
     * is usually used in virtual folders when the change was done in them,
     * but it is neither vTrash nor vJunk folder. Doing this avoids unnecessary
     * removals of messages which don't satisfy search criteria anymore,
     * which could be done on asynchronous delivery of folder's 'changed' signal.
     * These ignored changes are accumulated and used on folder refresh.
     */
    ignore_next_changed_event(subfolder: Folder): void
    /**
     * Propagate any skipped changes into the `vf`. The skipped changes are used to not
     * hide the messages from the search folder unexpectedly. The function does nothing
     * when there are no changes to be propagated.
     */
    propagate_skipped_changes(): void
    /**
     * Rebuild the folder `subfolder,` if it should be.
     */
    rebuild_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Returns a #GList of all folders of this `vfolder,` which
     * are used to populate it. These are in no particular order.
     * 
     * Free the returned #GList with
     * g_list_free_full (folders, g_object_unref);
     * when no longer needed.
     */
    ref_folders(): Folder[]
    /**
     * Removed the source folder, `subfolder,` from the virtual folder, `vfolder`.
     */
    remove_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Make sure the next `subfolder-'`s 'changed' event will not be silently ignored.
     * This is a counter-part function of camel_vee_folder_ignore_next_changed_event(),
     * when there was expected a change, which did not happen, to take back the previous
     * ignore event request.
     */
    remove_from_ignore_changed_event(subfolder: Folder): void
    /**
     * Removes given `mi_data` from the `vfolder`. The `changes` can be
     * updated with the made change and later used to notify others
     * with camel_folder_changed() on the `vfolder`. This can be used
     * only for the Unmatched folder.
     */
    remove_vuid(mi_data?: object | null, changes?: FolderChangeInfo | null): void
    /**
     * Sets whether the `vfolder` can automatically update when of its
     * subfolders changes.
     */
    set_auto_update(auto_update: boolean): void
    /**
     * Sets an SExp expression to be used for this `vfolder`
     */
    set_expression(expression: string): void
    /**
     * Set the whole list of folder sources on a vee folder.
     */
    set_folders(folders: Folder[], cancellable?: Gio.Cancellable | null): void
    /* Methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder` asynchronously.  Only the flag and tag data
     * from `info` are used.  If `info` is %NULL, no flags or tags will be set.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_append_message_finish() to get the result of
     * the operation.
     */
    append_message(message: MimeMessage, info: MessageInfo | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_append_message_finish().
     */
    append_message_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    /**
     * Marks `folder` as deleted and performs any required cleanup.
     * 
     * This also emits the #CamelFolder::deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     */
    delete(): void
    /**
     * Thread-safe variation of camel_folder_get_description().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_description(): string
    /**
     * Thread-safe variation of camel_folder_get_display_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string
    /**
     * Thread-safe variation of camel_folder_get_full_name().
     * Use this function when accessing `folder` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_full_name(): string
    /**
     * Asynchronously deletes messages which have been marked as "DELETED".
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_expunge_finish() to get the result of the operation.
     */
    expunge(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_expunge().
     */
    expunge_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the provided array and its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids when the provided
     * information was created explicitly by the corresponding get_ call.
     */
    free_deep(array: string[]): void
    /**
     * Frees the provided array but not its contents. Used by #CamelFolder
     * subclasses as an implementation for free_uids or free_summary when
     * the returned array needs to be freed but its contents come from
     * "static" information.
     */
    free_shallow(array: string[]): void
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    freeze(): void
    get_deleted_message_count(): number
    /**
     * Returns a description of the folder suitable for displaying to the user.
     */
    get_description(): string
    /**
     * Returns the display name for the folder.  The fully qualified name
     * can be obtained with camel_folder_get_full_name().
     */
    get_display_name(): string
    get_filename(uid: string): string
    get_folder_summary(): FolderSummary
    get_frozen_count(): number
    /**
     * Returns the fully qualified name of the folder.
     */
    get_full_name(): string
    get_mark_seen(): ThreeState
    get_mark_seen_timeout(): number
    /**
     * Asynchronously gets the message corresponding to `message_uid` from `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_get_message_finish() to get the result of the operation.
     */
    get_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    get_message_count(): number
    /**
     * Finishes the operation started with camel_folder_get_message().
     */
    get_message_finish(result: Gio.AsyncResult): MimeMessage
    get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    get_message_user_flag(uid: string, name: string): boolean
    get_message_user_tag(uid: string, name: string): string
    get_parent_store(): object | null
    get_permanent_flags(): number
    /**
     * Asynchronously gets a list of known quotas for `folder`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_folder_get_quota_info_finish() to get the result of
     * the operation.
     */
    get_quota_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_get_quota_info().
     * Free the returned #CamelFolderQuotaInfo struct with
     * camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_finish(result: Gio.AsyncResult): FolderQuotaInfo
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    get_uncached_uids(uids: string[]): string[]
    get_unread_message_count(): number
    /**
     * Get whether or not the folder has a summary.
     */
    has_summary_capability(): boolean
    is_frozen(): boolean
    /**
     * Locks `folder`. Unlock it with camel_folder_unlock().
     */
    lock(): void
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_purge_message_cache_finish() to get the result of the
     * operation.
     */
    purge_message_cache(start_uid: string, end_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_purge_message_cache().
     */
    purge_message_cache_finish(result: Gio.AsyncResult): boolean
    /**
     * Delete the local cache of all messages between these uids.
     */
    purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Asynchronously synchronizes a folder's summary with its backing store.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_refresh_info_finish() to get the result of the operation.
     */
    refresh_info(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_refresh_info().
     */
    refresh_info_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    rename(new_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    search_free(result: string[]): void
    /**
     * Sets a description of the folder suitable for displaying to the user.
     */
    set_description(description: string): void
    /**
     * Sets the display name for the folder.
     */
    set_display_name(display_name: string): void
    /**
     * Sets folder flags (bit-or of #CamelFolderFlags) for the `folder`.
     */
    set_flags(folder_flags: number): void
    /**
     * Sets the fully qualified name of the folder.
     */
    set_full_name(full_name: string): void
    /**
     * Sets whether folder locking (camel_folder_lock() and camel_folder_unlock())
     * should be used. When set to %FALSE, the two functions do nothing and simply
     * return.
     */
    set_lock_async(skip_folder_lock: boolean): void
    /**
     * Sets whether the messages in this `folder` should be marked
     * as seen automatically. An inconsistent state means to use
     * global option.
     */
    set_mark_seen(mark_seen: ThreeState): void
    /**
     * Sets the `timeout` in milliseconds for marking messages
     * as seen in this `folder`. Whether the timeout is used
     * depends on camel_folder_get_mark_seen().
     */
    set_mark_seen_timeout(timeout: number): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    set_message_flags(uid: string, mask: number, set: number): boolean
    set_message_user_flag(uid: string, name: string, value: boolean): void
    set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    sort_uids(uids: string[]): void
    /**
     * Synchronizes any changes that have been made to `folder` to its backing
     * store asynchronously, optionally expunging deleted messages as well.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Asynchronously ensure that a message identified by `message_uid` has been
     * synchronized in `folder` so that calling camel_folder_get_message() on it
     * later will work in offline mode.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_synchronize_message_finish() to get the result of the
     * operation.
     */
    synchronize_message(message_uid: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_synchronize_message().
     */
    synchronize_message_finish(result: Gio.AsyncResult): boolean
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets a #CamelFolderSummary of the folder. It consumes the `summary`.
     * 
     * This is supposed to be called only by the descendants of
     * the #CamelFolder and only at the construction time. Calling
     * this function twice yeilds to an error.
     */
    take_folder_summary(summary: FolderSummary): void
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    thaw(): void
    /**
     * Asynchronously copies or moves messages from one folder to another.
     * If the `source` or `destination` folders have the same parent store,
     * this may be more efficient than using camel_folder_append_message().
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_folder_transfer_messages_to_finish() to get the result of the
     * operation.
     */
    transfer_messages_to(message_uids: string[], destination: Folder, delete_originals: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_folder_transfer_messages_to().
     */
    transfer_messages_to_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /**
     * Unlocks `folder,` previously locked with camel_folder_lock().
     */
    unlock(): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.VeeFolder */
    /**
     * Adds `subfolder` as a source folder to `vfolder`.
     */
    vfunc_add_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    vfunc_folder_changed(subfolder: Folder, changes: FolderChangeInfo): void
    /**
     * Rebuild the folder `subfolder,` if it should be.
     */
    vfunc_rebuild_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Removed the source folder, `subfolder,` from the virtual folder, `vfolder`.
     */
    vfunc_remove_folder(subfolder: Folder, cancellable?: Gio.Cancellable | null): void
    /**
     * Sets an SExp expression to be used for this `vfolder`
     */
    vfunc_set_expression(expression: string): void
    /* Virtual methods of Camel-1.2.Camel.Folder */
    /**
     * Appends `message` to `folder`.  Only the flag and tag data from `info`
     * are used.  If `info` is %NULL, no flags or tags will be set.
     */
    vfunc_append_message_sync(message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* appended_uid */ string | null ]
    /**
     * Emits the #CamelFolder::changed signal from an idle source on the
     * main loop.  The idle source's priority is #G_PRIORITY_LOW.
     */
    vfunc_changed(changes: FolderChangeInfo): void
    /**
     * Compares two uids. The return value meaning is the same as in any other compare function.
     * 
     * Note that the default compare function expects a decimal number at the beginning of a uid,
     * thus if provider uses different uid values, then it should subclass this function.
     */
    vfunc_cmp_uids(uid1: string, uid2: string): number
    /**
     * Searches the folder for count of messages matching the given search expression.
     */
    vfunc_count_by_expression(expression: string, cancellable?: Gio.Cancellable | null): number
    vfunc_delete_(): void
    vfunc_deleted(): void
    /**
     * Deletes messages which have been marked as "DELETED".
     */
    vfunc_expunge_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Frees the summary array returned by camel_folder_get_summary().
     */
    vfunc_free_summary(array: MessageInfo[]): void
    /**
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_free_uids(array: string[]): void
    /**
     * Freezes the folder so that a series of operation can be performed
     * without "folder_changed" signals being emitted.  When the folder is
     * later thawed with camel_folder_thaw(), the suppressed signals will
     * be emitted.
     */
    vfunc_freeze(): void
    vfunc_get_filename(uid: string): string
    /**
     * Gets the message corresponding to `message_uid` from the `folder` cache,
     * if available locally. This should not do any network I/O, only check
     * if message is already downloaded and return it quickly, not being
     * blocked by the folder's lock. Returning NULL is not considered as
     * an error, it just means that the message is still to-be-downloaded.
     * 
     * Note: This function is called automatically within camel_folder_get_message_sync().
     */
    vfunc_get_message_cached(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage | null
    vfunc_get_message_count(): number
    vfunc_get_message_flags(uid: string): number
    /**
     * Retrieve the #CamelMessageInfo for the specified `uid`.
     */
    vfunc_get_message_info(uid: string): MessageInfo | null
    /**
     * Gets the message corresponding to `message_uid` from `folder`.
     */
    vfunc_get_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): MimeMessage
    vfunc_get_message_user_flag(uid: string, name: string): boolean
    vfunc_get_message_user_tag(uid: string, name: string): string
    vfunc_get_permanent_flags(): number
    /**
     * Gets a list of known quotas for `folder`.  Free the returned
     * #CamelFolderQuotaInfo struct with camel_folder_quota_info_free().
     * 
     * If quotas are not supported for `folder,` the function returns %NULL
     * and sets `error` to #G_IO_ERROR_NOT_SUPPORTED.
     */
    vfunc_get_quota_info_sync(cancellable?: Gio.Cancellable | null): FolderQuotaInfo
    /**
     * This returns the summary information for the folder. This array
     * should not be modified, and must be freed with
     * camel_folder_free_summary().
     */
    vfunc_get_summary(): string[]
    /**
     * Get the list of UIDs available in a folder. This routine is useful
     * for finding what messages are available when the folder does not
     * support summaries. The returned array should not be modified, and
     * must be freed by passing it to camel_folder_free_uids().
     */
    vfunc_get_uids(): string[]
    /**
     * Returns the known-uncached uids from a list of uids. It may return uids
     * which are locally cached but should never filter out a uid which is not
     * locally cached. Free the result by called camel_folder_free_uids().
     * Frees the array of UIDs returned by camel_folder_get_uids().
     */
    vfunc_get_uncached_uids(uids: string[]): string[]
    vfunc_has_search_capability(): boolean
    vfunc_is_frozen(): boolean
    /**
     * Lets the `folder` know that it should refresh its content
     * the next time from fresh. This is useful for remote accounts,
     * to fully re-check the folder content against the server.
     */
    vfunc_prepare_content_refresh(): void
    /**
     * Delete the local cache of all messages between these uids.
     */
    vfunc_purge_message_cache_sync(start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes a folder's summary with its backing store.
     */
    vfunc_refresh_info_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Marks `folder` as renamed.
     * 
     * This also emits the #CamelFolder::renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * NOTE: This is an internal function used by camel stores, no locking
     * is performed on the folder.
     */
    vfunc_rename(new_name: string): void
    vfunc_renamed(old_name: string): void
    /**
     * Searches the folder for messages matching the given search expression.
     */
    vfunc_search_by_expression(expression: string, cancellable?: Gio.Cancellable | null): string[]
    /**
     * Search a subset of uid's for an expression match.
     */
    vfunc_search_by_uids(expression: string, uids: string[], cancellable?: Gio.Cancellable | null): string[]
    /**
     * Free the result of a search as gotten by camel_folder_search_by_expression()
     * or camel_folder_search_by_uids().
     */
    vfunc_search_free(result: string[]): void
    /**
     * Sets those flags specified by `mask` to the values specified by `set`
     * on the indicated message. (This may or may not persist after the
     * folder or store is closed. See camel_folder_get_permanent_flags())
     * 
     * E.g. to set the deleted flag and clear the draft flag, use
     * camel_folder_set_message_flags (folder, uid, CAMEL_MESSAGE_DELETED|CAMEL_MESSAGE_DRAFT, CAMEL_MESSAGE_DELETED);
     */
    vfunc_set_message_flags(uid: string, mask: number, set: number): boolean
    vfunc_set_message_user_flag(uid: string, name: string, value: boolean): void
    vfunc_set_message_user_tag(uid: string, name: string, value: string): void
    /**
     * Sorts the array of UIDs.
     */
    vfunc_sort_uids(uids: string[]): void
    /**
     * Ensure that a message identified by `message_uid` has been synchronized in
     * `folder` so that calling camel_folder_get_message() on it later will work
     * in offline mode.
     */
    vfunc_synchronize_message_sync(message_uid: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `folder` to its
     * backing store, optionally expunging deleted messages as well.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thaws the folder and emits any pending folder_changed
     * signals.
     */
    vfunc_thaw(): void
    /**
     * Copies or moves messages from one folder to another.  If the
     * `source` and `destination` folders have the same parent_store, this
     * may be more efficient than using camel_folder_append_message_sync().
     */
    vfunc_transfer_messages_to_sync(message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Folder */
    connect(sigName: "changed", callback: (($obj: VeeFolder, changes: FolderChangeInfo) => void)): number
    connect_after(sigName: "changed", callback: (($obj: VeeFolder, changes: FolderChangeInfo) => void)): number
    emit(sigName: "changed", changes: FolderChangeInfo): void
    connect(sigName: "deleted", callback: (($obj: VeeFolder) => void)): number
    connect_after(sigName: "deleted", callback: (($obj: VeeFolder) => void)): number
    emit(sigName: "deleted"): void
    connect(sigName: "renamed", callback: (($obj: VeeFolder, old_name: string) => void)): number
    connect_after(sigName: "renamed", callback: (($obj: VeeFolder, old_name: string) => void)): number
    emit(sigName: "renamed", old_name: string): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::auto-update", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-update", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::description", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::full-name", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::full-name", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mark-seen-timeout", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-seen-timeout", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: VeeFolder, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeFolder_ConstructProps)
    _init (config?: VeeFolder_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(parent_store: Store, full: string, flags: number): VeeFolder
    static $gtype: GObject.Type
}
interface VeeMessageInfo_ConstructProps extends MessageInfo_ConstructProps {
}
class VeeMessageInfo {
    /* Properties of Camel-1.2.Camel.MessageInfo */
    /**
     * Flag, whether the info is currently aborting notifications. It is used to avoid
     * unnecessary 'folder-flagged' and 'dirty' flags changes and also to avoid
     * associated folder's "changed" signal.
     * f
     */
    abort_notifications: boolean
    /**
     * CC address of the associated message.
     */
    cc: string
    /**
     * Received date of the associated message.
     */
    date_received: number
    /**
     * Sent Date of the associated message.
     */
    date_sent: number
    /**
     * Flag, whether the info is changed and requires save to disk.
     * Compare with CamelMessageInfo:folder-flagged
     */
    dirty: boolean
    /**
     * Bit-or of #CamelMessageFlags.
     */
    flags: MessageFlags
    /**
     * Flag, whether the info is changed and requires save to
     * the destination store/server. This is different from
     * the CamelMessageInfo:dirty, which takes care of the local
     * information only.
     */
    folder_flagged: boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` 'folder-flagged', regardless the `mi`
     * being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    readonly folder_flagged_stamp: number
    /**
     * From address of the associated message.
     */
    from: string
    /**
     * Headers of the associated message. Can be %NULL.
     */
    headers: NameValueArray
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    message_id: number
    /**
     * Mailing list address of the associated message.
     */
    mlist: string
    /**
     * Body preview of the associated message. Can be %NULL.
     */
    preview: string
    /**
     * Encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     */
    references: object[]
    /**
     * Size of the associated message.
     */
    size: number
    /**
     * Subject of the associated message.
     */
    subject: string
    /**
     * To address of the associated message.
     */
    to: string
    /**
     * A unique ID of the message in its folder.
     */
    uid: string
    /**
     * User flags for the associated message. Can be %NULL.
     * Unlike user-tags, which can contain various values, the user-flags
     * can only be set or not.
     */
    user_flags: NamedFlags
    /**
     * User-defined headers of the associated message. Can be %NULL.
     */
    user_headers: NameValueArray
    /**
     * User tags for the associated message. Can be %NULL.
     * Unlike user-flags, which can be set or not, the user-tags
     * can contain various values.
     */
    user_tags: NameValueArray
    /* Fields of Camel-1.2.Camel.MessageInfo */
    readonly parent: GObject.Object
    readonly priv: MessageInfoPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeMessageInfo */
    get_original_folder(): Folder
    get_original_summary(): FolderSummary
    /* Methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    clone(assign_summary?: FolderSummary | null): MessageInfo
    /**
     * Dumps the mesasge info `mi` to stdout. This is meand for debugging
     * purposes only.
     */
    dump(): void
    /**
     * Duplicates array of headers for the `mi`.
     */
    dup_headers(): NameValueArray | null
    dup_preview(): string | null
    /**
     * Duplicates encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    dup_references(): number[] | null
    dup_user_flags(): NamedFlags | null
    dup_user_header(name: string): string | null
    dup_user_headers(): NameValueArray | null
    dup_user_tag(name: string): string | null
    dup_user_tags(): NameValueArray | null
    /**
     * Freezes all the notifications until the camel_message_info_thaw_notifications() is called.
     * This function can be called multiple times, where the last thaw will do the notifications.
     */
    freeze_notifications(): void
    get_abort_notifications(): boolean
    get_cc(): string
    get_date_received(): number
    get_date_sent(): number
    get_dirty(): boolean
    get_flags(): number
    /**
     * The folder flagged flag is used to mark the message infor as being changed
     * and this change should be propagated to the remote store (server). This is
     * different from the 'dirty' flag, which is set for local changes only. It
     * can happen that the 'folder-flagged' flag is set, but the 'dirty' flag not.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    get_folder_flagged(): boolean
    /**
     * The 'folder-flagged-stamp' is a stamp of the 'folder-flagged' flag. This stamp
     * changes whenever anything would mark the `mi` as 'folder-flagged', regardless
     * the `mi` being already 'folder-flagged'. It can be used to recognize changes
     * on the 'folder-flagged' flag during the time.
     */
    get_folder_flagged_stamp(): number
    get_from(): string
    get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    get_message_id(): number
    get_mlist(): string
    get_notifications_frozen(): boolean
    get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    get_references(): number[] | null
    get_size(): number
    get_subject(): string
    get_to(): string
    /**
     * Get the UID of the #mi.
     */
    get_uid(): string
    get_user_flag(name: string): boolean
    get_user_flags(): NamedFlags | null
    get_user_header(name: string): string | null
    get_user_headers(): NameValueArray | null
    get_user_tag(name: string): string | null
    get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    load(record: MIRecord, bdata_ptr: string): boolean
    /**
     * Get the UID of the #mi, duplicated on the Camel's string pool.
     * This is good for thread safety, though the UID should not change once set.
     */
    pooldup_uid(): string
    /**
     * Acquires a property lock, which is used to ensure thread safety
     * when properties are changing. Release the lock with
     * camel_message_info_property_unlock().
     * 
     * Note: Make sure the CamelFolderSummary lock is held before this lock,
     * if there will be called any 'set' function on the `mi,` to avoid deadlock
     * when the summary would be set as dirty while another thread might try
     * to read values from the `mi,` waiting for the property lock and holding
     * the summary lock at the same time.
     */
    property_lock(): void
    /**
     * Releases a property lock, previously acquired with
     * camel_message_info_property_lock().
     */
    property_unlock(): void
    ref_summary(): object | null
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    save(record: MIRecord, bdata_str: GLib.String): boolean
    /**
     * Marks the `mi` to abort any notifications, which means that it
     * will not influence 'dirty' and 'folder-flagged' flags in
     * the set/take functions, neither it will emit any GObject::notify
     * signals on change, nor associated folder's "changed" signal.
     */
    set_abort_notifications(abort_notifications: boolean): void
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_date_sent(date_sent: number): boolean
    /**
     * Marks the `mi` as dirty, which means a save to the local summary
     * is required.
     */
    set_dirty(dirty: boolean): void
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    set_flags(mask: number, set: number): boolean
    /**
     * Changes the folder-flagged flag to the `folder_flagged` value. See
     * camel_message_info_get_folder_flagged() for more information about
     * the use of this flag.
     * 
     * This is only a convenient wrapper around CAMEL_MESSAGE_FOLDER_FLAGGED flag,
     * for better readiness of the code.
     */
    set_folder_flagged(folder_flagged: boolean): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    set_to(to?: string | null): boolean
    /**
     * Changes UID of the `mi` to `uid`. If it changes, the 'dirty' flag
     * of the `mi` is set too, unless the `mi` is aborting notifications. This change
     * does not influence the 'folder-flagged' flag.
     */
    set_uid(uid: string): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    take_user_tags(user_tags?: NameValueArray | null): boolean
    /**
     * Reverses the call of the camel_message_info_freeze_notifications().
     * If this is the last freeze, then the associated folder is also notified
     * about the change, if any happened during the freeze.
     */
    thaw_notifications(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.MessageInfo */
    /**
     * Clones the `mi` as a new #CamelMessageInfo and eventually assigns
     * a new #CamelFolderSummary to it. If it's not set, then the same
     * summary as the one with `mi` is used.
     */
    vfunc_clone(assign_summary?: FolderSummary | null): MessageInfo
    vfunc_dup_user_flags(): NamedFlags | null
    vfunc_dup_user_tags(): NameValueArray | null
    vfunc_get_cc(): string
    vfunc_get_date_received(): number
    vfunc_get_date_sent(): number
    vfunc_get_flags(): number
    vfunc_get_from(): string
    vfunc_get_headers(): NameValueArray | null
    /**
     * Encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_message_id(): number
    vfunc_get_mlist(): string
    vfunc_get_preview(): string | null
    /**
     * Gets encoded In-Reply-To and References headers of the associated
     * message as an array of guint64 numbers, partial MD5 sums. Each value
     * can be cast to #CamelSummaryMessageID.
     */
    vfunc_get_references(): number[] | null
    vfunc_get_size(): number
    vfunc_get_subject(): string
    vfunc_get_to(): string
    vfunc_get_user_flag(name: string): boolean
    vfunc_get_user_flags(): NamedFlags | null
    vfunc_get_user_header(name: string): string | null
    vfunc_get_user_headers(): NameValueArray | null
    vfunc_get_user_tag(name: string): string | null
    vfunc_get_user_tags(): NameValueArray | null
    /**
     * Load content of `mi` from the data stored in `record`. The `bdata_ptr` points
     * to the current position of the record->bdata, where the read can continue.
     * Use helper functions camel_util_bdata_get_number() and camel_util_bdata_get_string()
     * to read data from it and also move forward the *bdata_ptr.
     * 
     * After successful load of the `mi,` the 'dirty' flag is unset.
     */
    vfunc_load(record: MIRecord | null, bdata_ptr: string): boolean
    /**
     * Save the `mi` content to the message info record `record`. It can populate all
     * but the record->bdata value, which is set fro mthe `bdata_str`. Use helper functions
     * camel_util_bdata_put_number() and camel_util_bdata_put_string() to put data into the `bdata_str`.
     */
    vfunc_save(record: MIRecord | null, bdata_str: GLib.String): boolean
    /**
     * Sets CC from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_cc(cc?: string | null): boolean
    /**
     * Sets received date (the Received header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_received(date_received: number): boolean
    /**
     * Sets sent date (the Date header) of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_date_sent(date_sent: number): boolean
    /**
     * Change the state of the flags on the `mi`. Both `mask` and `set` are bit-or
     * of #CamelMessageFlags.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary. In case
     * the CAMEL_MESSAGE_FOLDER_FLAGGED flag would be set and the `mi` is
     * not aborting notifications, the 'folder-flagged-stamp' changes too.
     */
    vfunc_set_flags(mask: number, set: number): boolean
    /**
     * Sets From from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_from(from?: string | null): boolean
    /**
     * Sets encoded Message-ID of the associated message as a guint64 number,
     * partial MD5 sum. The value can be cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_message_id(message_id: number): boolean
    /**
     * Sets mesage list address from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_mlist(mlist?: string | null): boolean
    /**
     * Set `preview` as the body preview of the associated message. Use %NULL or an empty
     * string to unset the value.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_preview(preview?: string | null): boolean
    /**
     * Sets size of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_size(size: number): boolean
    /**
     * Sets Subject from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_subject(subject?: string | null): boolean
    /**
     * Sets To from the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     */
    vfunc_set_to(to?: string | null): boolean
    /**
     * Change `state` of the flag named `name`. Unlike user tags, user flags
     * can only be set or unset, while the user tags can contain certain values.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_flag(name: string, state: boolean): boolean
    /**
     * Set `value` for a single user-defined message header of the associated message.
     * When the `value` is %NULL, the header `name` is removed from the user-defined
     * headers.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     */
    vfunc_set_user_header(name: string, value?: string | null): boolean
    /**
     * Set user tag `name` to `value,` or remove it, if `value` is %NULL.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     */
    vfunc_set_user_tag(name: string, value?: string | null): boolean
    /**
     * Takes headers of the associated message.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes encoded In-Reply-To and References headers of the associated message
     * as an array of guint64 numbers, partial MD5 sums. Each value can be
     * cast to #CamelSummaryMessageID.
     * 
     * This property is considered static, in a meaning that it should
     * not change during the life-time of the `mi,` the same as it doesn't
     * change in the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is not emitted
     * folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `references` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_references(references?: number[] | null): boolean
    /**
     * Takes all the `user_flags,` which replaces any current user flags on the `mi`.
     * The passed-in `user_flags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_flags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_flags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_flags(user_flags?: NamedFlags | null): boolean
    /**
     * Takes user-defined message headers of the associated message.
     * 
     * If the `mi` changed, the 'dirty' flag is set automatically, unless the `mi` is
     * aborting notifications. There is not emitted folder's "changed" signal for this `mi`.
     * 
     * Note that it's not safe to use the `headers` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_headers(headers?: NameValueArray | null): boolean
    /**
     * Takes all the `user_tags,` which replaces any current user tags on the `mi`.
     * The passed-in `user_tags` is consumed by the `mi,` which becomes an owner
     * of it. The caller should not change `user_tags` afterwards.
     * 
     * If the `mi` changed, the 'dirty' flag and the 'folder-flagged' flag are
     * set automatically, unless the `mi` is aborting notifications. There is also emitted
     * folder's "changed" signal for this `mi,` if necessary.
     * 
     * Note that it's not safe to use the `user_tags` after the call to this function,
     * because it can be freed due to no change.
     */
    vfunc_take_user_tags(user_tags?: NameValueArray | null): boolean
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::abort-notifications", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::abort-notifications", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::cc", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cc", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-received", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-received", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::date-sent", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::date-sent", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::dirty", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dirty", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::flags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::folder-flagged-stamp", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::folder-flagged-stamp", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::from", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::from", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::headers", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::headers", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::message-id", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-id", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::mlist", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mlist", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::preview", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::preview", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::references", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::references", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::size", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::size", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::subject", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subject", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::to", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::to", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::uid", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uid", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-flags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-flags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-headers", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-headers", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::user-tags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::user-tags", callback: (($obj: VeeMessageInfo, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeMessageInfo_ConstructProps)
    _init (config?: VeeMessageInfo_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(summary: FolderSummary, original_summary: FolderSummary, vuid: string): VeeMessageInfo
    /* Function overloads */
    static new(summary?: FolderSummary | null): VeeMessageInfo
    static $gtype: GObject.Type
}
interface VeeMessageInfoData_ConstructProps extends GObject.Object_ConstructProps {
}
class VeeMessageInfoData {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeMessageInfoData */
    get_orig_message_uid(): string
    get_subfolder_data(): VeeSubfolderData
    get_vee_message_uid(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeMessageInfoData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeMessageInfoData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeMessageInfoData_ConstructProps)
    _init (config?: VeeMessageInfoData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(subfolder_data: VeeSubfolderData, orig_message_uid: string): VeeMessageInfoData
    static $gtype: GObject.Type
}
interface VeeStore_ConstructProps extends Store_ConstructProps {
    /* Constructor properties of Camel-1.2.Camel.VeeStore */
    unmatched_enabled?: boolean
}
class VeeStore {
    /* Properties of Camel-1.2.Camel.VeeStore */
    unmatched_enabled: boolean
    /* Properties of Camel-1.2.Camel.Service */
    readonly connection_status: ServiceConnectionStatus
    display_name: string
    password: string
    proxy_resolver: Gio.ProxyResolver
    settings: Settings
    /* Properties of Camel-1.2.Camel.Object */
    /**
     * The file in which to store persistent property values for this
     * instance.
     */
    state_filename: string
    /* Fields of Camel-1.2.Camel.Store */
    readonly parent: Service
    readonly priv: StorePrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeStore */
    get_unmatched_enabled(): boolean
    get_unmatched_folder(): object | null
    get_vee_data_cache(): VeeFolder
    /**
     * This is a counter part of camel_vee_store_note_subfolder_used(). Once
     * the `subfolder` is claimed to be not used by all folders its message infos
     * are removed from the Unmatched folder.
     */
    note_subfolder_unused(subfolder: Folder, unused_by: VeeFolder): void
    /**
     * Notes that the `subfolder` is used by `used_by` folder, which
     * is used to determine what folders will be included in
     * the Unmatched folders.
     */
    note_subfolder_used(subfolder: Folder, used_by: VeeFolder): void
    /**
     * A counter part of camel_vee_store_note_vuid_used(). Once the `unused_by`
     * claims the `mi_data` is not used by it anymore, and neither any other
     * virtual folder is using it, then the Unmatched folder will have it added.
     */
    note_vuid_unused(mi_data: VeeMessageInfoData, unused_by: VeeFolder): void
    /**
     * Notes the `mi_data` is used by the `used_by` virtual folder, which
     * removes it from the Unmatched folder, if not used anywhere else.
     */
    note_vuid_used(mi_data: VeeMessageInfoData, used_by: VeeFolder): void
    /**
     * Let's the `vstore` know to rebuild the Unmatched folder. This is done
     * as a separate job, when the `cancellable` is %NULL, otherwise it's run
     * synchronously.
     */
    rebuild_unmatched_folder(cancellable?: Gio.Cancellable | null): void
    /**
     * Sets whether the Unmatched folder processing is enabled.
     */
    set_unmatched_enabled(is_enabled: boolean): void
    /* Methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    can_refresh_folder(info: FolderInfo): boolean
    /**
     * Asynchronously creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_create_folder_finish() to get the result of the operation.
     */
    create_folder(parent_name: string | null, folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_create_folder().
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes local data for the given `folder_name`. The folder should
     * be part of the opened folders.
     * 
     * It doesn't delete the folder in the store (server) as such.
     * Use camel_store_delete_folder(), or its synchronous variant,
     * if you want to do that instead.
     */
    delete_cached_folder(folder_name: string): void
    /**
     * Asynchronously deletes the folder described by `folder_name`.  The
     * folder must be empty.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_delete_folder_finish() to get the result of the operation.
     */
    delete_folder(folder_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_delete_folder().
     */
    delete_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Returns a #GPtrArray of all the opened folders for the `store`. The caller owns
     * both the array and the folder references, so to free the array use:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    dup_opened_folders(): Folder[]
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    get_can_auto_save_changes(): boolean
    get_db(): DB
    get_flags(): number
    /**
     * Asynchronously gets a specific folder object from `store` by name.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_get_folder_finish() to get the result of the operation.
     */
    get_folder(folder_name: string, flags: StoreGetFolderFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder().
     */
    get_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Asynchronously fetches information about the folder structure of `store,`
     * starting with `top`.  For details of the behavior, see
     * camel_store_get_folder_info_sync().
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_folder_info_finish() to get the result of
     * the operation.
     */
    get_folder_info(top: string | null, flags: StoreGetFolderInfoFlags, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_folder_info().
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     */
    get_folder_info_finish(result: Gio.AsyncResult): FolderInfo | null
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    get_folders_bag(): ObjectBag
    /**
     * Asynchronously gets the folder in `store` into which new mail is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_inbox_folder_finish() to get the result of
     * the operation.
     */
    get_inbox_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_inbox_folder().
     */
    get_inbox_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Asynchronously gets the folder in `store` into which junk is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_junk_folder_finish() to get the result of
     * the operation.
     */
    get_junk_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_junk_folder().
     */
    get_junk_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    get_permissions(): number
    /**
     * Asynchronously gets the folder in `store` into which trash is delivered.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_store_get_trash_folder_finish() to get the result of
     * the operation.
     */
    get_trash_folder(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_get_trash_folder().
     */
    get_trash_folder_finish(result: Gio.AsyncResult): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store` asynchronously.
     * 
     * When the operation is finished, `callback` will be called. You can then
     * call camel_store_initial_setup_finish() to get the result of the operation.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_initial_setup().
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     */
    initial_setup_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Checks the state of the current CamelDB used for the `store` and eventually
     * runs maintenance routines on it.
     */
    maybe_run_db_maintenance(): boolean
    /**
     * Asynchronously renames the folder described by `old_name` to `new_name`.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_rename_folder_finish() to get the result of the operation.
     */
    rename_folder(old_name: string, new_name: string, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_rename_folder().
     */
    rename_folder_finish(result: Gio.AsyncResult): boolean
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Sets flags for the `store,` a bit-or of #CamelStoreFlags.
     */
    set_flags(flags: number): void
    /**
     * Sets permissions for the `store,` a bit-or of #CamelStorePermissionFlags
     */
    set_permissions(permissions: number): void
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store asynchronously.
     * 
     * When the operation is finished, `callback` will be called.  You can then
     * call camel_store_synchronize_finish() to get the result of the operation.
     */
    synchronize(expunge: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_store_synchronize().
     */
    synchronize_finish(result: Gio.AsyncResult): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /* Methods of Camel-1.2.Camel.Service */
    /**
     * Asynchronously attempts to authenticate `service` using `mechanism` and,
     * if necessary, `service'`s #CamelService:password property.  The function
     * makes only ONE attempt at authentication and does not loop.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_authenticate_finish() to get the result of
     * the operation.
     */
    authenticate(mechanism: string | null, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_authenticate().
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     */
    authenticate_finish(result: Gio.AsyncResult): AuthenticationResult
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Asynchronously connects `service` to a remote server using the information
     * in its #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     * 
     * If any disconnect operations are in progress when this function is
     * called, they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_connect_finish() to get the result of the
     * operation.
     */
    connect(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_connect().
     */
    connect_finish(result: Gio.AsyncResult): boolean
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_disconnect_finish() to get the result of the
     * operation.
     */
    disconnect(clean: boolean, io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_disconnect().
     */
    disconnect_finish(result: Gio.AsyncResult): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Thread-safe variation of camel_service_get_display_name().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_display_name(): string | null
    /**
     * Thread-safe variation of camel_service_get_password().
     * Use this function when accessing `service` from multiple threads.
     * 
     * The returned string should be freed with g_free() when no longer needed.
     */
    dup_password(): string
    /**
     * Returns the connection status for `service`.
     */
    get_connection_status(): ServiceConnectionStatus
    /**
     * Returns the display name for `service,` or %NULL if `service` has not
     * been given a display name.  The display name is intended for use in
     * a user interface and should generally be given a user-defined name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    get_display_name(): string | null
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    get_name(brief: boolean): string
    /**
     * Returns the password for `service`.  Some SASL mechanisms use this
     * when attempting to authenticate.
     */
    get_password(): string
    /**
     * Gets the #CamelProvider associated with the service.
     */
    get_provider(): Provider
    /**
     * Gets the unique identifier string associated with the service.
     */
    get_uid(): string
    /**
     * Returns the base directory under which to store cache data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_cache_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_cache_dir(): string
    /**
     * Returns the base directory under which to store user-specific data
     * for `service`.  The directory is formed by appending the directory
     * returned by camel_session_get_user_data_dir() with the service's
     * #CamelService:uid value.
     */
    get_user_data_dir(): string
    /**
     * Performs any necessary file migrations for `service`.  This should be
     * called after installing or configuring the `service'`s #CamelSettings,
     * since it requires building a URL string for `service`.
     */
    migrate_files(): void
    /**
     * Returns a new #CamelURL representing `service`.
     * Free the returned #CamelURL with camel_url_free().
     */
    new_camel_url(): URL
    /**
     * Asynchronously obtains a list of authentication types supported by
     * `service`.
     * 
     * When the operation is finished, `callback` will be called.  You can
     * then call camel_service_query_auth_types_finish() to get the result
     * of the operation.
     */
    query_auth_types(io_priority: number, cancellable?: Gio.Cancellable | null, callback?: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes the operation started with camel_service_query_auth_types().
     * Free the returned list with g_list_free().
     */
    query_auth_types_finish(result: Gio.AsyncResult): ServiceAuthType[]
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Adds `task` to a queue of waiting tasks with the same source object.
     * Queued tasks execute one at a time in the order they were added.  When
     * `task` reaches the front of the queue, it will be dispatched by invoking
     * `task_func` in a separate thread.  If `task` is cancelled while queued,
     * it will complete immediately with an appropriate error.
     * 
     * This is primarily intended for use by #CamelStore, #CamelTransport and
     * #CamelFolder to achieve ordered invocation of synchronous class methods.
     */
    queue_task(task: Gio.Task, task_func: Gio.TaskThreadFunc): void
    /**
     * Returns the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     * 
     * The returned #GProxyResolver is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_proxy_resolver(): Gio.ProxyResolver | null
    /**
     * Returns the #CamelSession associated with the service.
     * 
     * The returned #CamelSession is referenced for thread-safety.  Unreference
     * the #CamelSession with g_object_unref() when finished with it.
     */
    ref_session(): Session
    /**
     * Returns the #CamelSettings instance associated with the service.
     * 
     * The returned #CamelSettings is referenced for thread-safety and must
     * be unreferenced with g_object_unref() when finished with it.
     */
    ref_settings(): Settings
    /**
     * Assigns a UTF-8 display name to `service`.  The display name is intended
     * for use in a user interface and should generally be given a user-defined
     * name.
     * 
     * Compare this with camel_service_get_name(), which returns a built-in
     * description of the type of service (IMAP, SMTP, etc.).
     */
    set_display_name(display_name?: string | null): void
    /**
     * Sets the password for `service`.  Use this function to cache the password
     * in memory after obtaining it through camel_session_get_password().  Some
     * SASL mechanisms use this when attempting to authenticate.
     */
    set_password(password: string): void
    /**
     * Sets the #GProxyResolver for `service`.  If an application needs to
     * override this, it should do so prior to calling functions on `service`
     * that may require a network connection.
     */
    set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void
    /**
     * Associates a new #CamelSettings instance with the service.
     * The `settings` instance must match the settings type defined in
     * #CamelServiceClass.  If `settings` is %NULL, a new #CamelSettings
     * instance of the appropriate type is created with all properties
     * set to defaults.
     */
    set_settings(settings?: Settings | null): void
    /* Methods of Camel-1.2.Camel.Object */
    /**
     * Returns the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    get_state_filename(): string
    /**
     * Sets the name of the file in which persistent property values for
     * `object` are stored.  The file is used by camel_object_state_write()
     * and camel_object_state_read() to save and restore object state.
     */
    set_state_filename(state_filename: string): void
    /**
     * Read persistent object state from #CamelObject:state-filename.
     */
    state_read(): number
    /**
     * Write persistent object state #CamelObject:state-filename.
     */
    state_write(): number
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Methods of Gio-2.0.Gio.Initable */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.VeeStore */
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Store */
    /**
     * Returns if this folder (param info) should be checked for new mail or not.
     * It should not look into sub infos (info->child) or next infos, it should
     * return value only for the actual folder info.
     * Default behavior is that all Inbox folders are intended to be refreshed.
     */
    vfunc_can_refresh_folder(info: FolderInfo): boolean
    /**
     * Creates a new folder as a child of an existing folder.
     * `parent_name` can be %NULL to create a new top-level folder.
     * The returned #CamelFolderInfo struct should be freed with
     * camel_folder_info_free().
     */
    vfunc_create_folder_sync(parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Deletes the folder described by `folder_name`.  The folder must be empty.
     */
    vfunc_delete_folder_sync(folder_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Emits the #CamelStore::folder-created signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_created(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-deleted signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_deleted(folder_info: FolderInfo): void
    /**
     * Emits the #CamelStore::folder-info-stale signal from an idle source
     * on the main loop.  The idle source's priority is #G_PRIORITY_LOW.
     * 
     * See the #CamelStore::folder-info-stale documentation for details on
     * when to use this signal.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_info_stale(): void
    /**
     * Emits the #CamelStore::folder-opened signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_opened(folder: Folder): void
    /**
     * Emits the #CamelStore::folder-renamed signal from an idle source on
     * the main loop.  The idle source's priority is #G_PRIORITY_HIGH_IDLE.
     * 
     * This function is only intended for Camel providers.
     */
    vfunc_folder_renamed(old_name: string, folder_info: FolderInfo): void
    /**
     * Returns whether there can be done automatic save of folder changes.
     * Default is TRUE. The descendants can overwrite it with CamelStoreClass::get_can_auto_save_changes().
     */
    vfunc_get_can_auto_save_changes(): boolean
    /**
     * This fetches information about the folder structure of `store,`
     * starting with `top,` and returns a tree of #CamelFolderInfo
     * structures. If `flags` includes %CAMEL_STORE_FOLDER_INFO_SUBSCRIBED,
     * only subscribed folders will be listed.   If the store doesn't support
     * subscriptions, then it will list all folders.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_RECURSIVE, the returned tree will include
     * all levels of hierarchy below `top`. If not, it will only include
     * the immediate subfolders of `top`. If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_FAST, the unread_message_count fields of
     * some or all of the structures may be set to -1, if the store cannot
     * determine that information quickly.  If `flags` includes
     * %CAMEL_STORE_FOLDER_INFO_NO_VIRTUAL, don't include special virtual
     * folders (such as vTrash or vJunk).
     * 
     * The returned #CamelFolderInfo tree should be freed with
     * camel_folder_info_free().
     * 
     * The CAMEL_STORE_FOLDER_INFO_FAST flag should be considered
     * deprecated; most backends will behave the same whether it is
     * supplied or not.  The only guaranteed way to get updated folder
     * counts is to both open the folder and invoke camel_folder_refresh_info() it.
     */
    vfunc_get_folder_info_sync(top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null): FolderInfo | null
    /**
     * Gets a specific folder object from `store` by name.
     */
    vfunc_get_folder_sync(folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which new mail is delivered.
     */
    vfunc_get_inbox_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which junk is delivered.
     */
    vfunc_get_junk_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Gets the folder in `store` into which trash is delivered.
     */
    vfunc_get_trash_folder_sync(cancellable?: Gio.Cancellable | null): Folder | null
    /**
     * Runs initial setup for the `store`. It's meant to preset some
     * values the first time the account connects to the server after
     * it had been created. The function should return %TRUE even if
     * it didn't populate anything. The default implementation does
     * just that.
     * 
     * The save_setup result, if not %NULL, should be freed using
     * g_hash_table_destroy(). It's not an error to have it %NULL,
     * it only means the `store` doesn't have anything to save.
     * Both the key and the value in the hash are newly allocated
     * UTF-8 strings, owned by the hash table.
     * 
     * The `store` advertises support of this function by including
     * CAMEL_STORE_SUPPORTS_INITIAL_SETUP in CamelStore::flags.
     */
    vfunc_initial_setup_sync(cancellable?: Gio.Cancellable | null): [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    /**
     * Renames the folder described by `old_name` to `new_name`.
     */
    vfunc_rename_folder_sync(old_name: string, new_name: string, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Synchronizes any changes that have been made to `store` and its folders
     * with the real store.
     */
    vfunc_synchronize_sync(expunge: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Service */
    /**
     * Attempts to authenticate `service` using `mechanism` and, if necessary,
     * `service'`s #CamelService:password property.  The function makes only
     * ONE attempt at authentication and does not loop.
     * 
     * If the authentication attempt completed and the server accepted the
     * credentials, the function returns #CAMEL_AUTHENTICATION_ACCEPTED.
     * 
     * If the authentication attempt completed but the server rejected the
     * credentials, the function returns #CAMEL_AUTHENTICATION_REJECTED.
     * 
     * If the authentication attempt failed to complete due to a network
     * communication issue or some other mishap, the function sets `error`
     * and returns #CAMEL_AUTHENTICATION_ERROR.
     * 
     * Generally this function should only be called from a #CamelSession
     * subclass in order to implement its own authentication loop.
     */
    vfunc_authenticate_sync(mechanism?: string | null, cancellable?: Gio.Cancellable | null): AuthenticationResult
    /**
     * Connects `service` to a remote server using the information in its
     * #CamelService:settings instance.
     * 
     * If a connect operation is already in progress when this function is
     * called, its results will be reflected in this connect operation.
     */
    vfunc_connect_sync(cancellable?: Gio.Cancellable | null): boolean
    /**
     * Disconnect from the service. If `clean` is %FALSE, it should not
     * try to do any synchronizing or other cleanup of the connection.
     * 
     * If a disconnect operation is already in progress when this function is
     * called, its results will be reflected in this disconnect operation.
     * 
     * If any connect operations are in progress when this function is called,
     * they will be cancelled.
     */
    vfunc_disconnect_sync(clean: boolean, cancellable?: Gio.Cancellable | null): boolean
    /**
     * This gets the name of the service in a "friendly" (suitable for
     * humans) form. If `brief` is %TRUE, this should be a brief description
     * such as for use in the folder tree. If `brief` is %FALSE, it should
     * be a more complete and mostly unambiguous description.
     */
    vfunc_get_name(brief: boolean): string
    /**
     * Obtains a list of authentication types supported by `service`.
     * Free the returned list with g_list_free().
     */
    vfunc_query_auth_types_sync(cancellable?: Gio.Cancellable | null): ServiceAuthType[]
    /**
     * Initializes the object implementing the interface.
     * 
     * This method is intended for language bindings. If writing in C,
     * g_initable_new() should typically be used instead.
     * 
     * The object must be initialized before any real use after initial
     * construction, either with this function or g_async_initable_init_async().
     * 
     * Implementations may also support cancellation. If `cancellable` is not %NULL,
     * then initialization can be cancelled by triggering the cancellable object
     * from another thread. If the operation was cancelled, the error
     * %G_IO_ERROR_CANCELLED will be returned. If `cancellable` is not %NULL and
     * the object doesn't support cancellable initialization the error
     * %G_IO_ERROR_NOT_SUPPORTED will be returned.
     * 
     * If the object is not initialized, or initialization returns with an
     * error, then all operations on the object except g_object_ref() and
     * g_object_unref() are considered to be invalid, and have undefined
     * behaviour. See the [introduction][ginitable] for more details.
     * 
     * Callers should not assume that a class which implements #GInitable can be
     * initialized multiple times, unless the class explicitly documents itself as
     * supporting this. Generally, a class’ implementation of init() can assume
     * (and assert) that it will only be called once. Previously, this documentation
     * recommended all #GInitable implementations should be idempotent; that
     * recommendation was relaxed in GLib 2.54.
     * 
     * If a class explicitly supports being initialized multiple times, it is
     * recommended that the method is idempotent: multiple calls with the same
     * arguments should return the same results. Only the first call initializes
     * the object; further calls return the result of the first call.
     * 
     * One reason why a class might need to support idempotent initialization is if
     * it is designed to be used via the singleton pattern, with a
     * #GObjectClass.constructor that sometimes returns an existing instance.
     * In this pattern, a caller would expect to be able to call g_initable_init()
     * on the result of g_object_new(), regardless of whether it is in fact a new
     * instance.
     */
    vfunc_init(cancellable?: Gio.Cancellable | null): boolean
    /* Virtual methods of Camel-1.2.Camel.Object */
    vfunc_state_read(fp?: object | null): number
    vfunc_state_write(fp?: object | null): number
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.Store */
    connect(sigName: "folder-created", callback: (($obj: VeeStore, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-created", callback: (($obj: VeeStore, object: FolderInfo) => void)): number
    emit(sigName: "folder-created", object: FolderInfo): void
    connect(sigName: "folder-deleted", callback: (($obj: VeeStore, object: FolderInfo) => void)): number
    connect_after(sigName: "folder-deleted", callback: (($obj: VeeStore, object: FolderInfo) => void)): number
    emit(sigName: "folder-deleted", object: FolderInfo): void
    /**
     * This signal indicates significant changes have occurred to
     * the folder hierarchy of `store,` and that previously fetched
     * #CamelFolderInfo data should be considered stale.
     * 
     * Applications should handle this signal by replacing cached
     * #CamelFolderInfo data for `store` with fresh data by way of
     * camel_store_get_folder_info().
     * 
     * More often than not this signal will be emitted as a result of
     * user preference changes rather than actual server-side changes.
     * For example, a user may change a preference that reveals a set
     * of folders previously hidden from view, or that alters whether
     * to augment the `store` with virtual Junk and Trash folders.
     */
    connect(sigName: "folder-info-stale", callback: (($obj: VeeStore) => void)): number
    connect_after(sigName: "folder-info-stale", callback: (($obj: VeeStore) => void)): number
    emit(sigName: "folder-info-stale"): void
    connect(sigName: "folder-opened", callback: (($obj: VeeStore, object: Folder) => void)): number
    connect_after(sigName: "folder-opened", callback: (($obj: VeeStore, object: Folder) => void)): number
    emit(sigName: "folder-opened", object: Folder): void
    connect(sigName: "folder-renamed", callback: (($obj: VeeStore, object: string, p0: FolderInfo) => void)): number
    connect_after(sigName: "folder-renamed", callback: (($obj: VeeStore, object: string, p0: FolderInfo) => void)): number
    emit(sigName: "folder-renamed", object: string, p0: FolderInfo): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::unmatched-enabled", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unmatched-enabled", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::connection-status", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::connection-status", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::display-name", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::password", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::password", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::proxy-resolver", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proxy-resolver", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::settings", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settings", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::state-filename", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::state-filename", callback: (($obj: VeeStore, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeStore_ConstructProps)
    _init (config?: VeeStore_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(): VeeStore
    /**
     * Helper function for constructing #GInitable object. This is
     * similar to g_object_newv() but also initializes the object
     * and returns %NULL, setting an error on failure.
     */
    static newv(object_type: GObject.Type, parameters: GObject.Parameter[], cancellable?: Gio.Cancellable | null): GObject.Object
    static $gtype: GObject.Type
}
interface VeeSubfolderData_ConstructProps extends GObject.Object_ConstructProps {
}
class VeeSubfolderData {
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeSubfolderData */
    get_folder(): Folder
    get_folder_id(): string
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeSubfolderData, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeSubfolderData, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeSubfolderData_ConstructProps)
    _init (config?: VeeSubfolderData_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(folder: Folder): VeeSubfolderData
    static $gtype: GObject.Type
}
interface VeeSummary_ConstructProps extends FolderSummary_ConstructProps {
}
class VeeSummary {
    /* Properties of Camel-1.2.Camel.FolderSummary */
    /**
     * How many deleted infos is saved in a summary.
     */
    readonly deleted_count: number
    /**
     * How many junk infos is saved in a summary.
     */
    readonly junk_count: number
    /**
     * How many junk and not deleted infos is saved in a summary.
     */
    readonly junk_not_deleted_count: number
    /**
     * How many infos is saved in a summary.
     */
    readonly saved_count: number
    /**
     * How many unread infos is saved in a summary.
     */
    readonly unread_count: number
    /**
     * How many visible (not deleted and not junk) infos is saved in a summary.
     */
    readonly visible_count: number
    /* Fields of Camel-1.2.Camel.FolderSummary */
    readonly parent: GObject.Object
    readonly priv: FolderSummaryPrivate
    /* Fields of GObject-2.0.GObject.Object */
    readonly g_type_instance: GObject.TypeInstance
    /* Methods of Camel-1.2.Camel.VeeSummary */
    /**
     * Unref returned pointer with g_object_unref()
     */
    add(mi_data: VeeMessageInfoData): VeeMessageInfo
    /**
     * Returns a hash table of all virtual message info UID-s known to the `summary`.
     * The key of the hash table is the virtual message info UID, the value is
     * only the number 1.
     */
    get_uids_for_subfolder(subfolder: Folder): GLib.HashTable
    /**
     * Removes the given `vuid` of the `subfolder` from the `summary`.
     */
    remove(vuid: string, subfolder: Folder): void
    /**
     * Makes sure `summary` flags on `uid` corresponds to those
     * in the subfolder of vee-folder, and updates internal counts
     * on `summary` as well.
     */
    replace_flags(uid: string): void
    /* Methods of Camel-1.2.Camel.FolderSummary */
    /**
     * Adds a new `info` record to the summary. If the `force_keep_uid` is %FALSE,
     * then a new uid is automatically re-assigned by calling
     * camel_folder_summary_next_uid_string(). It's an error to use
     * `force_keep_uid` when the `info` has none set.
     * 
     * The `summary` adds its own reference to `info,` if needed, and any
     * previously loaded info is replaced with the new one.
     */
    add(info: MessageInfo, force_keep_uid: boolean): void
    /**
     * Check if the uid is valid. This isn't very efficient, so it shouldn't be called iteratively.
     */
    check_uid(uid: string): boolean
    /**
     * Empty the summary contents.
     */
    clear(): boolean
    /**
     * Get the number of summary items stored in this summary.
     */
    count(): number
    /**
     * Retrieve a summary item by uid.
     * 
     * A referenced to the summary item is returned, which may be
     * ref'd or free'd as appropriate.
     */
    get(uid: string): MessageInfo | null
    /**
     * Obtain a copy of the summary array.  This is done atomically,
     * so cannot contain empty entries.
     * 
     * Free with camel_folder_summary_free_array()
     */
    get_array(): string[]
    /**
     * Returns an array of changed UID-s. A UID is considered changed
     * when its corresponding CamelMesageInfo is 'dirty' or when it has
     * set the #CAMEL_MESSAGE_FOLDER_FLAGGED flag.
     */
    get_changed(): string[]
    get_deleted_count(): number
    get_flags(): number
    get_folder(): object | null
    /**
     * Returns hash of current stored 'uids' in summary, where key is 'uid'
     * from the string pool, and value is 1. The returned pointer should
     * be freed with g_hash_table_destroy().
     * 
     * Note: When searching for values always use uids from the string pool.
     */
    get_hash(): GLib.HashTable
    get_index(): Index | null
    /**
     * Retrieve CamelMessageInfo::flags for a message info with UID `uid`.
     * This is much quicker than camel_folder_summary_get(), because it
     * doesn't require reading the message info from a disk.
     */
    get_info_flags(uid: string): number
    get_junk_count(): number
    get_junk_not_deleted_count(): number
    get_next_uid(): number
    get_saved_count(): number
    get_timestamp(): number
    get_unread_count(): number
    get_version(): number
    get_visible_count(): number
    /**
     * Loads a summary header for the `summary,` which corresponds to `folder_name`
     * provided by `store`.
     */
    header_load(store: object | null, folder_name: string): boolean
    /**
     * Saves summary header information into the disk. The function does
     * nothing, if the summary doesn't support save to disk.
     */
    header_save(): boolean
    /**
     * Create a new info record from a header.
     */
    info_new_from_headers(headers: NameValueArray): MessageInfo
    /**
     * Create a summary item from a message.
     */
    info_new_from_message(message: MimeMessage): MessageInfo
    /**
     * Create a new info record from a parser.  If the parser cannot
     * determine a uid, then none will be assigned.
     * 
     * If indexing is enabled, and the parser cannot determine a new uid, then
     * one is automatically assigned.
     * 
     * If indexing is enabled, then the content will be indexed based
     * on this new uid.  In this case, the message info MUST be
     * added using :add().
     * 
     * Once complete, the parser will be positioned at the end of
     * the message.
     */
    info_new_from_parser(parser: MimeParser): MessageInfo
    /**
     * Loads the summary from the disk. It also saves any pending
     * changes first.
     */
    load(): boolean
    /**
     * Locks `summary`. Unlock it with camel_folder_summary_unlock().
     */
    lock(): void
    /**
     * Generate a new unique uid value as an integer.  This
     * may be used to create a unique sequence of numbers.
     */
    next_uid(): number
    /**
     * Retrieve the next uid, but as a formatted string.
     */
    next_uid_string(): string
    peek_loaded(uid: string): MessageInfo | null
    /**
     * Loads all infos into memory, if they are not yet and ensures
     * they will not be freed in next couple minutes. Call this function
     * before any mass operation or when all message infos will be needed,
     * for better performance.
     */
    prepare_fetch_all(): void
    /**
     * Remove a specific `info` record from the summary.
     */
    remove(info: MessageInfo): boolean
    /**
     * Remove a specific info record from the summary, by `uid`.
     */
    remove_uid(uid: string): boolean
    /**
     * Remove a specific info record from the summary, by `uid`.
     */
    remove_uids(uids: string[]): boolean
    /**
     * Updates internal counts based on the flags in `info`.
     */
    replace_flags(info: MessageInfo): boolean
    /**
     * Saves the content of the `summary` to disk. It does nothing,
     * when the summary is not changed or when it doesn't support
     * permanent save.
     */
    save(): boolean
    /**
     * Sets flags of the `summary,` a bit-or of #CamelFolderSummaryFlags.
     */
    set_flags(flags: number): void
    /**
     * Set the index used to index body content.  If the index is %NULL, or
     * not set (the default), no indexing of body content will take place.
     */
    set_index(index?: Index | null): void
    /**
     * Set the next minimum uid available.  This can be used to
     * ensure new uid's do not clash with existing uid's.
     */
    set_next_uid(uid: number): void
    /**
     * Sets timestamp of the `summary,` provided by the descendants. This doesn't
     * change the 'dirty' flag of the `summary`.
     */
    set_timestamp(timestamp: number): void
    /**
     * Sets version of the `summary`.
     */
    set_version(version: number): void
    /**
     * Mark the summary as changed, so that a save will force it to be
     * written back to disk.
     */
    touch(): void
    /**
     * Unlocks `summary,` previously locked with camel_folder_summary_lock().
     */
    unlock(): void
    /* Methods of GObject-2.0.GObject.Object */
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target`.
     * 
     * Whenever the `source_property` is changed the `target_property` is
     * updated using the same value. For instance:
     * 
     * 
     * ```c
     *   g_object_bind_property (action, "active", widget, "sensitive", 0);
     * ```
     * 
     * 
     * Will result in the "sensitive" property of the widget #GObject instance to be
     * updated with the same value of the "active" property of the action #GObject
     * instance.
     * 
     * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
     * if `target_property` on `target` changes then the `source_property` on `source`
     * will be updated as well.
     * 
     * The binding will automatically be removed when either the `source` or the
     * `target` instances are finalized. To remove the binding without affecting the
     * `source` and the `target` you can just call g_object_unref() on the returned
     * #GBinding instance.
     * 
     * Removing the binding by calling g_object_unref() on it must only be done if
     * the binding, `source` and `target` are only used from a single thread and it
     * is clear that both `source` and `target` outlive the binding. Especially it
     * is not safe to rely on this if the binding, `source` or `target` can be
     * finalized from different threads. Keep another reference to the binding and
     * use g_binding_unbind() instead to be on the safe side.
     * 
     * A #GObject can have multiple bindings.
     */
    bind_property(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags): GObject.Binding
    /**
     * Creates a binding between `source_property` on `source` and `target_property`
     * on `target,` allowing you to set the transformation functions to be used by
     * the binding.
     * 
     * This function is the language bindings friendly version of
     * g_object_bind_property_full(), using #GClosures instead of
     * function pointers.
     */
    bind_property_full(source_property: string, target: GObject.Object, target_property: string, flags: GObject.BindingFlags, transform_to: Function, transform_from: Function): GObject.Binding
    /**
     * This function is intended for #GObject implementations to re-enforce
     * a [floating][floating-ref] object reference. Doing this is seldom
     * required: all #GInitiallyUnowneds are created with a floating reference
     * which usually just needs to be sunken by calling g_object_ref_sink().
     */
    force_floating(): void
    /**
     * Increases the freeze count on `object`. If the freeze count is
     * non-zero, the emission of "notify" signals on `object` is
     * stopped. The signals are queued until the freeze count is decreased
     * to zero. Duplicate notifications are squashed so that at most one
     * #GObject::notify signal is emitted for each property modified while the
     * object is frozen.
     * 
     * This is necessary for accessors that modify multiple properties to prevent
     * premature notification while the object is still being modified.
     */
    freeze_notify(): void
    /**
     * Gets a named field from the objects table of associations (see g_object_set_data()).
     */
    get_data(key: string): object | null
    /**
     * Gets a property of an object.
     * 
     * The `value` can be:
     * 
     *  - an empty #GValue initialized by %G_VALUE_INIT, which will be
     *    automatically initialized with the expected type of the property
     *    (since GLib 2.60)
     *  - a #GValue initialized with the expected type of the property
     *  - a #GValue initialized with a type to which the expected type
     *    of the property can be transformed
     * 
     * In general, a copy is made of the property contents and the caller is
     * responsible for freeing the memory by calling g_value_unset().
     * 
     * Note that g_object_get_property() is really intended for language
     * bindings, g_object_get() is much more convenient for C programming.
     */
    get_property(property_name: string, value: any): void
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata().
     */
    get_qdata(quark: GLib.Quark): object | null
    /**
     * Gets `n_properties` properties for an `object`.
     * Obtained properties will be set to `values`. All properties must be valid.
     * Warnings will be emitted and undefined behaviour may result if invalid
     * properties are passed in.
     */
    getv(names: string[], values: any[]): void
    /**
     * Checks whether `object` has a [floating][floating-ref] reference.
     */
    is_floating(): boolean
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    notify(property_name: string): void
    /**
     * Emits a "notify" signal for the property specified by `pspec` on `object`.
     * 
     * This function omits the property name lookup, hence it is faster than
     * g_object_notify().
     * 
     * One way to avoid using g_object_notify() from within the
     * class that registered the properties, and using g_object_notify_by_pspec()
     * instead, is to store the GParamSpec used with
     * g_object_class_install_property() inside a static array, e.g.:
     * 
     * 
     * ```c
     *   enum
     *   {
     *     PROP_0,
     *     PROP_FOO,
     *     PROP_LAST
     *   };
     * 
     *   static GParamSpec *properties[PROP_LAST];
     * 
     *   static void
     *   my_object_class_init (MyObjectClass *klass)
     *   {
     *     properties[PROP_FOO] = g_param_spec_int ("foo", "Foo", "The foo",
     *                                              0, 100,
     *                                              50,
     *                                              G_PARAM_READWRITE);
     *     g_object_class_install_property (gobject_class,
     *                                      PROP_FOO,
     *                                      properties[PROP_FOO]);
     *   }
     * ```
     * 
     * 
     * and then notify a change on the "foo" property with:
     * 
     * 
     * ```c
     *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
     * ```
     * 
     */
    notify_by_pspec(pspec: GObject.ParamSpec): void
    /**
     * Increases the reference count of `object`.
     * 
     * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
     * of `object` will be propagated to the return type (using the GCC typeof()
     * extension), so any casting the caller needs to do on the return type must be
     * explicit.
     */
    ref(): GObject.Object
    /**
     * Increase the reference count of `object,` and possibly remove the
     * [floating][floating-ref] reference, if `object` has a floating reference.
     * 
     * In other words, if the object is floating, then this call "assumes
     * ownership" of the floating reference, converting it to a normal
     * reference by clearing the floating flag while leaving the reference
     * count unchanged.  If the object is not floating, then this call
     * adds a new normal reference increasing the reference count by one.
     * 
     * Since GLib 2.56, the type of `object` will be propagated to the return type
     * under the same conditions as for g_object_ref().
     */
    ref_sink(): GObject.Object
    /**
     * Releases all references to other objects. This can be used to break
     * reference cycles.
     * 
     * This function should only be called from object system implementations.
     */
    run_dispose(): void
    /**
     * Each object carries around a table of associations from
     * strings to pointers.  This function lets you set an association.
     * 
     * If the object already had an association with that name,
     * the old association will be destroyed.
     * 
     * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
     * This means a copy of `key` is kept permanently (even after `object` has been
     * finalized) — so it is recommended to only use a small, bounded set of values
     * for `key` in your program, to avoid the #GQuark storage growing unbounded.
     */
    set_data(key: string, data?: object | null): void
    /**
     * Sets a property on an object.
     */
    set_property(property_name: string, value: any): void
    /**
     * Remove a specified datum from the object's data associations,
     * without invoking the association's destroy handler.
     */
    steal_data(key: string): object | null
    /**
     * This function gets back user data pointers stored via
     * g_object_set_qdata() and removes the `data` from object
     * without invoking its destroy() function (if any was
     * set).
     * Usually, calling this function is only required to update
     * user data pointers with a destroy notifier, for example:
     * 
     * ```c
     * void
     * object_add_to_user_list (GObject     *object,
     *                          const gchar *new_string)
     * {
     *   // the quark, naming the object data
     *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
     *   // retrieve the old string list
     *   GList *list = g_object_steal_qdata (object, quark_string_list);
     * 
     *   // prepend new string
     *   list = g_list_prepend (list, g_strdup (new_string));
     *   // this changed 'list', so we need to set it again
     *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
     * }
     * static void
     * free_string_list (gpointer data)
     * {
     *   GList *node, *list = data;
     * 
     *   for (node = list; node; node = node->next)
     *     g_free (node->data);
     *   g_list_free (list);
     * }
     * ```
     * 
     * Using g_object_get_qdata() in the above example, instead of
     * g_object_steal_qdata() would have left the destroy function set,
     * and thus the partial string list would have been freed upon
     * g_object_set_qdata_full().
     */
    steal_qdata(quark: GLib.Quark): object | null
    /**
     * Reverts the effect of a previous call to
     * g_object_freeze_notify(). The freeze count is decreased on `object`
     * and when it reaches zero, queued "notify" signals are emitted.
     * 
     * Duplicate notifications for each property are squashed so that at most one
     * #GObject::notify signal is emitted for each property, in the reverse order
     * in which they have been queued.
     * 
     * It is an error to call this function when the freeze count is zero.
     */
    thaw_notify(): void
    /**
     * Decreases the reference count of `object`. When its reference count
     * drops to 0, the object is finalized (i.e. its memory is freed).
     * 
     * If the pointer to the #GObject may be reused in future (for example, if it is
     * an instance variable of another object), it is recommended to clear the
     * pointer to %NULL rather than retain a dangling pointer to a potentially
     * invalid #GObject instance. Use g_clear_object() for this.
     */
    unref(): void
    /**
     * This function essentially limits the life time of the `closure` to
     * the life time of the object. That is, when the object is finalized,
     * the `closure` is invalidated by calling g_closure_invalidate() on
     * it, in order to prevent invocations of the closure with a finalized
     * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
     * added as marshal guards to the `closure,` to ensure that an extra
     * reference count is held on `object` during invocation of the
     * `closure`.  Usually, this function will be called on closures that
     * use this `object` as closure data.
     */
    watch_closure(closure: Function): void
    /* Virtual methods of Camel-1.2.Camel.FolderSummary */
    /**
     * Retrieve a summary item by uid.
     * 
     * A referenced to the summary item is returned, which may be
     * ref'd or free'd as appropriate.
     */
    vfunc_message_info_from_uid(uid: string): MessageInfo | null
    /**
     * Create a new info record from a header.
     */
    vfunc_message_info_new_from_headers(headers: NameValueArray): MessageInfo
    /**
     * Create a summary item from a message.
     */
    vfunc_message_info_new_from_message(message: MimeMessage): MessageInfo
    /**
     * Create a new info record from a parser.  If the parser cannot
     * determine a uid, then none will be assigned.
     * 
     * If indexing is enabled, and the parser cannot determine a new uid, then
     * one is automatically assigned.
     * 
     * If indexing is enabled, then the content will be indexed based
     * on this new uid.  In this case, the message info MUST be
     * added using :add().
     * 
     * Once complete, the parser will be positioned at the end of
     * the message.
     */
    vfunc_message_info_new_from_parser(parser: MimeParser): MessageInfo
    /**
     * Retrieve the next uid, but as a formatted string.
     */
    vfunc_next_uid_string(): string
    vfunc_prepare_fetch_all(): void
    vfunc_summary_header_load(fir?: object | null): boolean
    vfunc_summary_header_save(): object | null
    /* Virtual methods of GObject-2.0.GObject.Object */
    vfunc_constructed(): void
    vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void
    vfunc_dispose(): void
    vfunc_finalize(): void
    vfunc_get_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /**
     * Emits a "notify" signal for the property `property_name` on `object`.
     * 
     * When possible, eg. when signaling a property change from within the class
     * that registered the property, you should use g_object_notify_by_pspec()
     * instead.
     * 
     * Note that emission of the notify signal may be blocked with
     * g_object_freeze_notify(). In this case, the signal emissions are queued
     * and will be emitted (in reverse order) when g_object_thaw_notify() is
     * called.
     */
    vfunc_notify(pspec: GObject.ParamSpec): void
    vfunc_set_property(property_id: number, value: any, pspec: GObject.ParamSpec): void
    /* Signals of Camel-1.2.Camel.FolderSummary */
    connect(sigName: "changed", callback: (($obj: VeeSummary) => void)): number
    connect_after(sigName: "changed", callback: (($obj: VeeSummary) => void)): number
    emit(sigName: "changed"): void
    /* Signals of GObject-2.0.GObject.Object */
    /**
     * The notify signal is emitted on an object when one of its properties has
     * its value set through g_object_set_property(), g_object_set(), et al.
     * 
     * Note that getting this signal doesn’t itself guarantee that the value of
     * the property has actually changed. When it is emitted is determined by the
     * derived GObject class. If the implementor did not create the property with
     * %G_PARAM_EXPLICIT_NOTIFY, then any call to g_object_set_property() results
     * in ::notify being emitted, even if the new value is the same as the old.
     * If they did pass %G_PARAM_EXPLICIT_NOTIFY, then this signal is emitted only
     * when they explicitly call g_object_notify() or g_object_notify_by_pspec(),
     * and common practice is to do that only when the value has actually changed.
     * 
     * This signal is typically used to obtain change notification for a
     * single property, by specifying the property name as a detail in the
     * g_signal_connect() call, like this:
     * 
     * 
     * ```c
     * g_signal_connect (text_view->buffer, "notify::paste-target-list",
     *                   G_CALLBACK (gtk_text_view_target_list_notify),
     *                   text_view)
     * ```
     * 
     * 
     * It is important to note that you must use
     * [canonical parameter names][canonical-parameter-names] as
     * detail strings for the notify signal.
     */
    connect(sigName: "notify", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify", pspec: GObject.ParamSpec): void
    connect(sigName: "notify::deleted-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deleted-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::junk-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::junk-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::junk-not-deleted-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::junk-not-deleted-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::saved-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::saved-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::unread-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unread-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: "notify::visible-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible-count", callback: (($obj: VeeSummary, pspec: GObject.ParamSpec) => void)): number
    connect(sigName: string, callback: any): number
    connect_after(sigName: string, callback: any): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
    static name: string
    constructor (config?: VeeSummary_ConstructProps)
    _init (config?: VeeSummary_ConstructProps): void
    /* Static methods and pseudo-constructors */
    static new(parent: Folder): VeeSummary
    /* Function overloads */
    static new(folder: Folder): VeeSummary
    static $gtype: GObject.Type
}
abstract class AddressClass {
    /* Fields of Camel-1.2.Camel.AddressClass */
    readonly parent_class: GObject.ObjectClass
    readonly length: (addr: Address) => number
    readonly decode: (addr: Address, raw: string) => number
    readonly encode: (addr: Address) => string
    readonly unformat: (addr: Address, raw: string) => number
    readonly format: (addr: Address) => string
    readonly cat: (dest: Address, source: Address) => number
    readonly remove: (addr: Address, index: number) => void
    readonly reserved: object[]
    static name: string
}
class AddressPrivate {
    static name: string
}
class AsyncClosure {
    static name: string
}
class Block {
    /* Fields of Camel-1.2.Camel.Block */
    readonly id: _block_t
    readonly flags: BlockFlags
    readonly refcount: number
    readonly align00: number
    readonly data: Uint8Array
    static name: string
}
abstract class BlockFileClass {
    /* Fields of Camel-1.2.Camel.BlockFileClass */
    readonly parent_class: GObject.ObjectClass
    readonly validate_root: (bs: BlockFile) => number
    readonly init_root: (bs: BlockFile) => number
    readonly reserved: object[]
    static name: string
}
class BlockFilePrivate {
    static name: string
}
class BlockRoot {
    /* Fields of Camel-1.2.Camel.BlockRoot */
    readonly version: number[]
    readonly flags: number
    readonly block_size: number
    readonly free: _block_t
    readonly last: _block_t
    static name: string
}
class Cert {
    /* Fields of Camel-1.2.Camel.Cert */
    readonly refcount: number
    readonly issuer: string
    readonly subject: string
    readonly hostname: string
    readonly fingerprint: string
    readonly trust: CertTrust
    readonly rawcert: GLib.Bytes
    /* Methods of Camel-1.2.Camel.Cert */
    load_cert_file(): boolean
    ref(): Cert
    save_cert_file(der_data: Uint8Array): boolean
    unref(): void
    static name: string
    static new(): Cert
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): Cert
}
abstract class CertDBClass {
    /* Fields of Camel-1.2.Camel.CertDBClass */
    readonly parent_class: GObject.ObjectClass
    readonly header_load: (certdb: CertDB, istream?: object | null) => number
    readonly header_save: (certdb: CertDB, ostream?: object | null) => number
    readonly cert_load: (certdb: CertDB, istream?: object | null) => Cert
    readonly cert_save: (certdb: CertDB, cert: Cert, ostream?: object | null) => number
    readonly reserved: object[]
    static name: string
}
class CertDBPrivate {
    static name: string
}
class Charset {
    /* Fields of Camel-1.2.Camel.Charset */
    readonly mask: number
    readonly level: number
    /* Methods of Camel-1.2.Camel.Charset */
    best_name(): string
    init(): void
    /**
     * Processes more input text with the `cc`.
     */
    step(in_: number[]): void
    static name: string
    /* Static methods and pseudo-constructors */
    /**
     * Finds the minimum charset for this string NULL means US-ASCII.
     */
    static best(in_: number[]): string | null
    static iso_to_windows(isocharset: string): string
}
class CipherCertInfo {
    /* Fields of Camel-1.2.Camel.CipherCertInfo */
    readonly name: string
    readonly email: string
    readonly cert_data: object
    readonly cert_data_free: GLib.DestroyNotify
    readonly cert_data_clone: CipherCloneFunc
    readonly properties: object[]
    static name: string
}
class CipherCertInfoProperty {
    /* Fields of Camel-1.2.Camel.CipherCertInfoProperty */
    readonly name: string
    readonly value: object
    readonly value_free: GLib.DestroyNotify
    readonly value_clone: CipherCloneFunc
    static name: string
}
abstract class CipherContextClass {
    /* Fields of Camel-1.2.Camel.CipherContextClass */
    readonly parent_class: GObject.ObjectClass
    readonly sign_protocol: string
    readonly encrypt_protocol: string
    readonly key_protocol: string
    readonly id_to_hash: (context: CipherContext, id: string) => CipherHash
    readonly hash_to_id: (context: CipherContext, hash: CipherHash) => string
    readonly sign_sync: (context: CipherContext, userid: string, hash: CipherHash, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null) => boolean
    readonly verify_sync: (context: CipherContext, ipart: MimePart, cancellable?: Gio.Cancellable | null) => CipherValidity
    readonly encrypt_sync: (context: CipherContext, userid: string | null, recipients: string[], ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null) => boolean
    readonly decrypt_sync: (context: CipherContext, ipart: MimePart, opart: MimePart, cancellable?: Gio.Cancellable | null) => CipherValidity
    readonly reserved: object[]
    static name: string
}
class CipherContextPrivate {
    static name: string
}
class CipherValidity {
    /* Fields of Camel-1.2.Camel.CipherValidity */
    readonly children: GLib.Queue
    readonly sign: object
    readonly encrypt: object
    /* Methods of Camel-1.2.Camel.CipherValidity */
    /**
     * Add a cert info to the signer or encrypter info.
     */
    add_certinfo(mode: CipherValidityMode, name: string, email: string): number
    /**
     * Add a cert info to the signer or encrypter info, with extended data set.
     */
    add_certinfo_ex(mode: CipherValidityMode, name: string, email: string, cert_data?: object | null, cert_data_clone?: CipherCloneFunc | null): number
    clear(): void
    clone(): CipherValidity
    /**
     * Calculate a conglomerate validity based on wrapping one secure part inside
     * another one.
     */
    envelope(valid: CipherValidity): void
    free(): void
    /**
     * Gets a named property `name` value for the given `info_index` of the `mode` validity part.
     */
    get_certinfo_property(mode: CipherValidityMode, info_index: number, name: string): object | null
    get_description(): string
    get_valid(): boolean
    init(): void
    /**
     * Sets a named property `name` value `value` for the given `info_index`
     * of the `mode` validity part. If the `value` is %NULL, then the property
     * is removed. With a non-%NULL `value` also `value_free` and `value_clone`
     * functions cannot be %NULL.
     */
    set_certinfo_property(mode: CipherValidityMode, info_index: number, name: string, value?: object | null, value_clone?: CipherCloneFunc | null): void
    set_description(description: string): void
    set_valid(valid: boolean): void
    static name: string
    static new(): CipherValidity
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): CipherValidity
}
class ContentDisposition {
    /* Fields of Camel-1.2.Camel.ContentDisposition */
    readonly disposition: string
    readonly params: object
    readonly refcount: number
    /* Methods of Camel-1.2.Camel.ContentDisposition */
    format(): string
    is_attachment(content_type: ContentType): boolean
    is_attachment_ex(content_type: ContentType, parent_content_type: ContentType): boolean
    ref(): ContentDisposition
    unref(): void
    static name: string
    static new(): ContentDisposition
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): ContentDisposition
    static decode(in_: string): ContentDisposition
}
class ContentType {
    /* Fields of Camel-1.2.Camel.ContentType */
    readonly type: string
    readonly subtype: string
    readonly params: object
    readonly refcount: number
    /* Methods of Camel-1.2.Camel.ContentType */
    dump(): void
    format(): string
    /**
     * The subtype of "*" will match any subtype.  If `ct` is %NULL, then
     * it will match the type "text/plain".
     */
    is(type: string, subtype: string): boolean
    /**
     * Searches the params on s #CamelContentType for a param named `name`
     * and gets the value.
     */
    param(name: string): string
    /**
     * Refs the content type.
     */
    ref(): ContentType
    /**
     * Set a parameter on `content_type`.
     */
    set_param(name: string, value: string): void
    simple(): string
    /**
     * Unrefs, and potentially frees, the content type.
     */
    unref(): void
    static name: string
    static new(type: string, subtype: string): ContentType
    constructor(type: string, subtype: string)
    /* Static methods and pseudo-constructors */
    static new(type: string, subtype: string): ContentType
    static decode(in_: string): ContentType
}
abstract class DBClass {
    static name: string
}
class DBPrivate {
    static name: string
}
abstract class DataCacheClass {
    /* Fields of Camel-1.2.Camel.DataCacheClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class DataCachePrivate {
    static name: string
}
abstract class DataWrapperClass {
    /* Fields of Camel-1.2.Camel.DataWrapperClass */
    readonly parent_class: GObject.ObjectClass
    readonly set_mime_type: (data_wrapper: DataWrapper, mime_type: string) => void
    readonly get_mime_type: (data_wrapper: DataWrapper) => string
    readonly get_mime_type_field: (data_wrapper: DataWrapper) => ContentType | null
    readonly set_mime_type_field: (data_wrapper: DataWrapper, mime_type?: ContentType | null) => void
    readonly is_offline: (data_wrapper: DataWrapper) => boolean
    readonly write_to_stream_sync: (data_wrapper: DataWrapper, stream: Stream, cancellable?: Gio.Cancellable | null) => number
    readonly decode_to_stream_sync: (data_wrapper: DataWrapper, stream: Stream, cancellable?: Gio.Cancellable | null) => number
    readonly construct_from_stream_sync: (data_wrapper: DataWrapper, stream: Stream, cancellable?: Gio.Cancellable | null) => boolean
    readonly write_to_output_stream_sync: (data_wrapper: DataWrapper, output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => number
    readonly decode_to_output_stream_sync: (data_wrapper: DataWrapper, output_stream: Gio.OutputStream, cancellable?: Gio.Cancellable | null) => number
    readonly construct_from_input_stream_sync: (data_wrapper: DataWrapper, input_stream: Gio.InputStream, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved: object[]
    static name: string
}
class DataWrapperPrivate {
    static name: string
}
class FIRecord {
    /* Fields of Camel-1.2.Camel.FIRecord */
    /**
     * name of the folder
     */
    readonly folder_name: string
    /**
     * version of the saved information
     */
    readonly version: number
    /**
     * folder flags
     */
    readonly flags: number
    /**
     * next free uid
     */
    readonly nextuid: number
    /**
     * timestamp of the summary
     */
    readonly timestamp: number
    /**
     * count of all messages
     */
    readonly saved_count: number
    /**
     * count of unread messages
     */
    readonly unread_count: number
    /**
     * count of deleted messages
     */
    readonly deleted_count: number
    /**
     * count of junk messages
     */
    readonly junk_count: number
    /**
     * count of visible (not deleted and not junk) messages
     */
    readonly visible_count: number
    /**
     * count of junk and not deleted messages
     */
    readonly jnd_count: number
    /**
     * custom data of the #CamelFolderSummary descendants
     */
    readonly bdata: string
    static name: string
}
abstract class FilterDriverClass {
    /* Fields of Camel-1.2.Camel.FilterDriverClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class FilterDriverPrivate {
    static name: string
}
abstract class FilterInputStreamClass {
    /* Fields of Camel-1.2.Camel.FilterInputStreamClass */
    readonly parent_class: Gio.FilterInputStreamClass
    readonly reserved: object[]
    static name: string
}
class FilterInputStreamPrivate {
    static name: string
}
abstract class FilterOutputStreamClass {
    /* Fields of Camel-1.2.Camel.FilterOutputStreamClass */
    readonly parent_class: Gio.FilterOutputStreamClass
    readonly reserved: object[]
    static name: string
}
class FilterOutputStreamPrivate {
    static name: string
}
class FolderChangeInfo {
    /* Fields of Camel-1.2.Camel.FolderChangeInfo */
    readonly uid_added: object[]
    readonly uid_removed: object[]
    readonly uid_changed: object[]
    readonly uid_recent: object[]
    /* Methods of Camel-1.2.Camel.FolderChangeInfo */
    /**
     * Add a source uid for generating a changeset.
     */
    add_source(uid: string): void
    /**
     * Add a list of source uid's for generating a changeset.
     */
    add_source_list(list: string[]): void
    /**
     * Add a new uid to the changeinfo.
     */
    add_uid(uid: string): void
    /**
     * Add a uid from the updated list, used to generate a changeset diff.
     */
    add_update(uid: string): void
    /**
     * Add a list of uid's from the updated list.
     */
    add_update_list(list: string[]): void
    /**
     * Compare the source uid set to the updated uid set and generate the
     * differences into the added and removed lists.
     */
    build_diff(): void
    /**
     * Concatenate one change info onto antoher. Can be used to copy them
     * too.
     */
    cat(src: FolderChangeInfo): void
    /**
     * Add a uid to the changed uid list.
     */
    change_uid(uid: string): void
    /**
     * Gets whether or not there have been any changes.
     */
    changed(): boolean
    /**
     * Empty out the change info; called after changes have been
     * processed.
     */
    clear(): void
    /**
     * Creates a copy of the `src`.
     */
    copy(): FolderChangeInfo
    /**
     * Free memory associated with the folder change info lists.
     */
    free(): void
    /**
     * Returns an array of added messages UIDs. The returned array, the same as its content,
     * is owned by the `info`.
     */
    get_added_uids(): string[]
    /**
     * Returns an array of changed messages UIDs. The returned array, the same as its content,
     * is owned by the `info`.
     */
    get_changed_uids(): string[]
    /**
     * Returns an array of recent messages UIDs. The returned array, the same as its content,
     * is owned by the `info`.
     */
    get_recent_uids(): string[]
    /**
     * Returns an array of removed messages UIDs. The returned array, the same as its content,
     * is owned by the `info`.
     */
    get_removed_uids(): string[]
    /**
     * Add a recent uid to the changedinfo.
     * This will also add the uid to the uid_filter array for potential
     * filtering
     */
    recent_uid(uid: string): void
    /**
     * Add a uid to the removed uid list.
     */
    remove_uid(uid: string): void
    static name: string
    static new(): FolderChangeInfo
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): FolderChangeInfo
}
class FolderChangeInfoPrivate {
    static name: string
}
abstract class FolderClass {
    /* Fields of Camel-1.2.Camel.FolderClass */
    readonly parent_class: ObjectClass
    readonly get_message_count: (folder: Folder) => number
    readonly get_permanent_flags: (folder: Folder) => number
    readonly get_message_flags: (folder: Folder, uid: string) => number
    readonly set_message_flags: (folder: Folder, uid: string, mask: number, set: number) => boolean
    readonly get_message_user_flag: (folder: Folder, uid: string, name: string) => boolean
    readonly set_message_user_flag: (folder: Folder, uid: string, name: string, value: boolean) => void
    readonly get_message_user_tag: (folder: Folder, uid: string, name: string) => string
    readonly set_message_user_tag: (folder: Folder, uid: string, name: string, value: string) => void
    readonly get_uids: (folder: Folder) => string[]
    readonly free_uids: (folder: Folder, array: string[]) => void
    readonly cmp_uids: (folder: Folder, uid1: string, uid2: string) => number
    readonly sort_uids: (folder: Folder, uids: string[]) => void
    readonly get_summary: (folder: Folder) => string[]
    readonly free_summary: (folder: Folder, array: MessageInfo[]) => void
    readonly has_search_capability: (folder: Folder) => boolean
    readonly search_by_expression: (folder: Folder, expression: string, cancellable?: Gio.Cancellable | null) => string[]
    readonly search_by_uids: (folder: Folder, expression: string, uids: string[], cancellable?: Gio.Cancellable | null) => string[]
    readonly search_free: (folder: Folder, result: string[]) => void
    readonly get_message_info: (folder: Folder, uid: string) => MessageInfo | null
    readonly delete_: (folder: Folder) => void
    readonly rename: (folder: Folder, new_name: string) => void
    readonly freeze: (folder: Folder) => void
    readonly thaw: (folder: Folder) => void
    readonly is_frozen: (folder: Folder) => boolean
    readonly count_by_expression: (folder: Folder, expression: string, cancellable?: Gio.Cancellable | null) => number
    readonly get_uncached_uids: (folder: Folder, uids: string[]) => string[]
    readonly get_filename: (folder: Folder, uid: string) => string
    readonly get_message_cached: (folder: Folder, message_uid: string, cancellable?: Gio.Cancellable | null) => MimeMessage | null
    readonly append_message_sync: (folder: Folder, message: MimeMessage, info?: MessageInfo | null, cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* appended_uid */ string | null ]
    readonly expunge_sync: (folder: Folder, cancellable?: Gio.Cancellable | null) => boolean
    readonly get_message_sync: (folder: Folder, message_uid: string, cancellable?: Gio.Cancellable | null) => MimeMessage
    readonly get_quota_info_sync: (folder: Folder, cancellable?: Gio.Cancellable | null) => FolderQuotaInfo
    readonly purge_message_cache_sync: (folder: Folder, start_uid: string, end_uid: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly refresh_info_sync: (folder: Folder, cancellable?: Gio.Cancellable | null) => boolean
    readonly synchronize_sync: (folder: Folder, expunge: boolean, cancellable?: Gio.Cancellable | null) => boolean
    readonly synchronize_message_sync: (folder: Folder, message_uid: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly transfer_messages_to_sync: (source: Folder, message_uids: string[], destination: Folder, delete_originals: boolean, cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* transferred_uids */ string[] | null ]
    readonly prepare_content_refresh: (folder: Folder) => void
    readonly reserved_methods: object[]
    readonly changed: (folder: Folder, changes: FolderChangeInfo) => void
    readonly deleted: (folder: Folder) => void
    readonly renamed: (folder: Folder, old_name: string) => void
    readonly reserved_signals: object[]
    static name: string
}
class FolderInfo {
    /* Fields of Camel-1.2.Camel.FolderInfo */
    readonly next: object
    readonly parent: object
    readonly child: object
    readonly full_name: string
    readonly display_name: string
    readonly flags: FolderInfoFlags
    readonly unread: number
    readonly total: number
    /* Methods of Camel-1.2.Camel.FolderInfo */
    /**
     * Clones `fi` recursively.
     */
    clone(): FolderInfo
    /**
     * Frees `fi`.
     */
    free(): void
    static name: string
    static new(): FolderInfo
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): FolderInfo
    /**
     * This takes an array of folders and attaches them together according
     * to the hierarchy described by their full_names and `separator`. If
     * `namespace_` is non-%NULL, then it will be ignored as a full_name
     * prefix, for purposes of comparison. If necessary,
     * camel_folder_info_build() will create additional #CamelFolderInfo with
     * %NULL urls to fill in gaps in the tree. The value of `short_names`
     * is used in constructing the names of these intermediate folders.
     */
    static build(folders: FolderInfo[], namespace_: string, separator: number, short_names: boolean): FolderInfo
}
class FolderPrivate {
    static name: string
}
class FolderQuotaInfo {
    /* Fields of Camel-1.2.Camel.FolderQuotaInfo */
    /**
     * name, aka identification, of the quota type
     */
    readonly name: string
    /**
     * how many bytes is currently in use
     */
    readonly used: number
    /**
     * what is the maximum quota to use
     */
    readonly total: number
    /**
     * a reference to a follwing #CamelFolderQuotaInfo
     */
    readonly next: object
    /* Methods of Camel-1.2.Camel.FolderQuotaInfo */
    /**
     * Makes a copy of the given info and all next-s.
     */
    clone(): FolderQuotaInfo
    /**
     * Frees this and all next objects.
     */
    free(): void
    static name: string
    static new(name: string, used: number, total: number): FolderQuotaInfo
    constructor(name: string, used: number, total: number)
    /* Static methods and pseudo-constructors */
    static new(name: string, used: number, total: number): FolderQuotaInfo
}
abstract class FolderSearchClass {
    /* Fields of Camel-1.2.Camel.FolderSearchClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class FolderSearchPrivate {
    static name: string
}
abstract class FolderSummaryClass {
    /* Fields of Camel-1.2.Camel.FolderSummaryClass */
    readonly parent_class: GObject.ObjectClass
    readonly message_info_type: GObject.Type
    readonly collate: string
    readonly sort_by: string
    readonly summary_header_load: (summary: FolderSummary, fir?: object | null) => boolean
    readonly summary_header_save: (summary: FolderSummary) => object | null
    readonly message_info_new_from_headers: (summary: FolderSummary, headers: NameValueArray) => MessageInfo
    readonly message_info_new_from_parser: (summary: FolderSummary, parser: MimeParser) => MessageInfo
    readonly message_info_new_from_message: (summary: FolderSummary, message: MimeMessage) => MessageInfo
    readonly message_info_from_uid: (summary: FolderSummary, uid: string) => MessageInfo | null
    readonly next_uid_string: (summary: FolderSummary) => string
    readonly prepare_fetch_all: (summary: FolderSummary) => void
    readonly reserved: object[]
    static name: string
}
class FolderSummaryPrivate {
    static name: string
}
class FolderThread {
    /* Fields of Camel-1.2.Camel.FolderThread */
    readonly refcount: number
    readonly subject: number
    readonly tree: object
    readonly node_chunks: MemChunk
    readonly folder: Folder
    readonly summary: object[]
    /* Methods of Camel-1.2.Camel.FolderThread */
    /**
     * Adds new `uids` into the threaded tree.
     */
    apply(uids: string[]): void
    /**
     * Increase the reference of `thread`
     */
    ref(): FolderThread
    /**
     * Free all memory associated with the thread descriptor `thread`.
     */
    unref(): void
    static name: string
    static new(folder: Folder, uids: string[], thread_subject: boolean): FolderThread
    constructor(folder: Folder, uids: string[], thread_subject: boolean)
    /* Static methods and pseudo-constructors */
    static new(folder: Folder, uids: string[], thread_subject: boolean): FolderThread
}
class FolderThreadNode {
    /* Fields of Camel-1.2.Camel.FolderThreadNode */
    readonly next: object
    readonly parent: object
    readonly child: object
    readonly message: MessageInfo
    readonly root_subject: string
    readonly order: number
    readonly re: number
    static name: string
}
abstract class GpgContextClass {
    /* Fields of Camel-1.2.Camel.GpgContextClass */
    readonly parent_class: CipherContextClass
    readonly reserved: object[]
    static name: string
}
class GpgContextPrivate {
    static name: string
}
abstract class HTMLParserClass {
    /* Fields of Camel-1.2.Camel.HTMLParserClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class HTMLParserPrivate {
    static name: string
}
class HeaderAddress {
    /* Fields of Camel-1.2.Camel.HeaderAddress */
    readonly next: object
    readonly type: HeaderAddressType
    readonly name: string
    readonly refcount: number
    /* Methods of Camel-1.2.Camel.HeaderAddress */
    add_member(member: HeaderAddress): void
    ref(): HeaderAddress
    set_addr(addr: string): void
    /**
     * TODO: Document me.
     */
    set_members(group: HeaderAddress[]): void
    set_name(name: string): void
    unref(): void
    static name: string
    static new(): HeaderAddress
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): HeaderAddress
    static new_group(name: string): HeaderAddress
    static new_name(name: string, addr: string): HeaderAddress
    static decode(in_: string, charset: string): HeaderAddress
    static fold(in_: string, headerlen: number): string
    /**
     * TODO: Document me.
     */
    static list_append(addrlistp: HeaderAddress[], addr: HeaderAddress): void
    /**
     * TODO: Document me.
     */
    static list_append_list(addrlistp: HeaderAddress[], addrs: HeaderAddress[]): void
    /**
     * TODO: Document me.
     */
    static list_clear(addrlistp: HeaderAddress[]): void
    /**
     * TODO: Document me.
     */
    static list_encode(addrlist: HeaderAddress[]): string
    /**
     * TODO: Document me.
     */
    static list_format(addrlist: HeaderAddress[]): string
}
class HeaderParam {
    /* Fields of Camel-1.2.Camel.HeaderParam */
    readonly next: object
    readonly name: string
    readonly value: string
    static name: string
    /* Static methods and pseudo-constructors */
    static list_decode(in_?: string | null): object | null
    static list_format(params?: object | null): string
    static list_format_append(out: GLib.String, params?: object | null): void
    /**
     * Free the list of params.
     */
    static list_free(params?: object | null): void
}
abstract class IndexClass {
    /* Fields of Camel-1.2.Camel.IndexClass */
    readonly parent_class: GObject.ObjectClass
    readonly sync: (index: Index) => number
    readonly compress: (index: Index) => number
    readonly delete_: (index: Index) => number
    readonly rename: (index: Index, path: string) => number
    readonly has_name: (index: Index, name: string) => number
    readonly add_name: (index: Index, name: string) => IndexName | null
    readonly write_name: (index: Index, idn: IndexName) => number
    readonly find_name: (index: Index, name: string) => IndexCursor | null
    readonly delete_name: (index: Index, name: string) => void
    readonly find: (index: Index, word: string) => IndexCursor | null
    readonly words: (index: Index) => IndexCursor | null
    static name: string
}
abstract class IndexCursorClass {
    /* Fields of Camel-1.2.Camel.IndexCursorClass */
    readonly parent: GObject.ObjectClass
    readonly next: (idc: IndexCursor) => string
    readonly reserved: object[]
    static name: string
}
class IndexCursorPrivate {
    static name: string
}
abstract class IndexNameClass {
    /* Fields of Camel-1.2.Camel.IndexNameClass */
    readonly parent: GObject.ObjectClass
    readonly add_word: (name: IndexName, word: string) => void
    readonly add_buffer: (name: IndexName, buffer: string, len: number) => number
    static name: string
}
class IndexNamePrivate {
    static name: string
}
class IndexPrivate {
    static name: string
}
abstract class InternetAddressClass {
    /* Fields of Camel-1.2.Camel.InternetAddressClass */
    readonly parent_class: AddressClass
    readonly reserved: object[]
    static name: string
}
class InternetAddressPrivate {
    static name: string
}
abstract class JunkFilterInterface {
    /* Fields of Camel-1.2.Camel.JunkFilterInterface */
    readonly parent_interface: GObject.TypeInterface
    readonly classify: (junk_filter: JunkFilter, message: MimeMessage, cancellable?: Gio.Cancellable | null) => JunkStatus
    readonly learn_junk: (junk_filter: JunkFilter, message: MimeMessage, cancellable?: Gio.Cancellable | null) => boolean
    readonly learn_not_junk: (junk_filter: JunkFilter, message: MimeMessage, cancellable?: Gio.Cancellable | null) => boolean
    readonly synchronize: (junk_filter: JunkFilter, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved: object[]
    static name: string
}
class KeyBlock {
    /* Fields of Camel-1.2.Camel.KeyBlock */
    readonly next: _block_t
    readonly used: number
    static name: string
}
abstract class KeyFileClass {
    /* Fields of Camel-1.2.Camel.KeyFileClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class KeyFilePrivate {
    static name: string
}
class KeyRootBlock {
    /* Fields of Camel-1.2.Camel.KeyRootBlock */
    readonly first: _block_t
    readonly last: _block_t
    readonly free: _key_t
    static name: string
}
abstract class KeyTableClass {
    /* Fields of Camel-1.2.Camel.KeyTableClass */
    readonly parent: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class KeyTablePrivate {
    static name: string
}
abstract class LocalSettingsClass {
    static name: string
}
class LocalSettingsPrivate {
    static name: string
}
class MIRecord {
    /* Fields of Camel-1.2.Camel.MIRecord */
    /**
     * Message UID
     */
    readonly uid: string
    /**
     * Camel Message info flags
     */
    readonly flags: number
    /**
     * unused
     */
    readonly msg_type: number
    /**
     * whether the message info requires upload to the server; it corresponds to #CAMEL_MESSAGE_FOLDER_FLAGGED
     */
    readonly dirty: number
    /**
     * boolean read status
     */
    readonly read: boolean
    /**
     * boolean deleted status
     */
    readonly deleted: boolean
    /**
     * boolean replied status
     */
    readonly replied: boolean
    /**
     * boolean important status
     */
    readonly important: boolean
    /**
     * boolean junk status
     */
    readonly junk: boolean
    /**
     * boolean attachment status
     */
    readonly attachment: boolean
    /**
     * size of the mail
     */
    readonly size: number
    /**
     * date sent
     */
    readonly dsent: number
    /**
     * date received
     */
    readonly dreceived: number
    /**
     * subject of the mail
     */
    readonly subject: string
    /**
     * sender
     */
    readonly from: string
    /**
     * recipient
     */
    readonly to: string
    /**
     * CC members
     */
    readonly cc: string
    /**
     * message list headers
     */
    readonly mlist: string
    /**
     * followup flag / also can be queried to see for followup or not
     */
    readonly followup_flag: string
    /**
     * completed date, can be used to see if completed
     */
    readonly followup_completed_on: string
    /**
     * to see the due by date
     */
    readonly followup_due_by: string
    /**
     * part / references / thread id
     */
    readonly part: string
    /**
     * labels of mails also called as userflags
     */
    readonly labels: string
    /**
     * composite string of user tags
     */
    readonly usertags: string
    /**
     * content info string - composite string
     */
    readonly cinfo: string
    /**
     * provider specific data
     */
    readonly bdata: string
    /**
     * value for user-defined message headers; Since: 3.42
     */
    readonly userheaders: string
    /**
     * message body preview; Since: 3.42
     */
    readonly preview: string
    static name: string
}
abstract class MediumClass {
    /* Fields of Camel-1.2.Camel.MediumClass */
    readonly parent_class: DataWrapperClass
    readonly add_header: (medium: Medium, name: string, value: string) => void
    readonly set_header: (medium: Medium, name: string, value?: string | null) => void
    readonly remove_header: (medium: Medium, name: string) => void
    readonly get_header: (medium: Medium, name: string) => string | null
    readonly dup_headers: (medium: Medium) => NameValueArray
    readonly get_headers: (medium: Medium) => NameValueArray
    readonly get_content: (medium: Medium) => DataWrapper | null
    readonly set_content: (medium: Medium, content?: DataWrapper | null) => void
    readonly reserved: object[]
    static name: string
}
class MediumPrivate {
    static name: string
}
class MemChunk {
    static name: string
}
class MemPool {
    static name: string
}
class MessageContentInfo {
    /* Fields of Camel-1.2.Camel.MessageContentInfo */
    readonly next: MessageContentInfo
    readonly childs: MessageContentInfo
    readonly parent: MessageContentInfo
    readonly type: ContentType
    readonly disposition: ContentDisposition
    readonly id: string
    readonly description: string
    readonly encoding: string
    readonly size: number
    /* Methods of Camel-1.2.Camel.MessageContentInfo */
    copy(): MessageContentInfo | null
    dump(depth: number): void
    /**
     * Recursively frees the content info `ci,` and all associated memory.
     */
    free(): void
    /**
     * Calls the `func` for each #CamelMessageContentInfo, including the top one.
     * The `func` can return %TRUE to continue processing or %FALSE to stop it.
     */
    traverse(func: MessageContentInfoTraverseCallback): boolean
    static name: string
    static new(): MessageContentInfo
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): MessageContentInfo
    static new_from_headers(headers: NameValueArray): MessageContentInfo
    static new_from_message(mime_part: MimePart): MessageContentInfo
    static new_from_parser(parser: MimeParser): MessageContentInfo
}
abstract class MessageInfoBaseClass {
    /* Fields of Camel-1.2.Camel.MessageInfoBaseClass */
    readonly parent_class: MessageInfoClass
    readonly reserved: object[]
    static name: string
}
class MessageInfoBasePrivate {
    static name: string
}
abstract class MessageInfoClass {
    /* Fields of Camel-1.2.Camel.MessageInfoClass */
    readonly parent_class: GObject.ObjectClass
    readonly clone: (mi: MessageInfo, assign_summary?: FolderSummary | null) => MessageInfo
    readonly load: (mi: MessageInfo, record: MIRecord | null, bdata_ptr: string) => boolean
    readonly save: (mi: MessageInfo, record: MIRecord | null, bdata_str: GLib.String) => boolean
    readonly get_flags: (mi: MessageInfo) => number
    readonly set_flags: (mi: MessageInfo, mask: number, set: number) => boolean
    readonly get_user_flag: (mi: MessageInfo, name: string) => boolean
    readonly set_user_flag: (mi: MessageInfo, name: string, state: boolean) => boolean
    readonly get_user_flags: (mi: MessageInfo) => NamedFlags | null
    readonly dup_user_flags: (mi: MessageInfo) => NamedFlags | null
    readonly take_user_flags: (mi: MessageInfo, user_flags?: NamedFlags | null) => boolean
    readonly get_user_tag: (mi: MessageInfo, name: string) => string | null
    readonly set_user_tag: (mi: MessageInfo, name: string, value?: string | null) => boolean
    readonly get_user_tags: (mi: MessageInfo) => NameValueArray | null
    readonly dup_user_tags: (mi: MessageInfo) => NameValueArray | null
    readonly take_user_tags: (mi: MessageInfo, user_tags?: NameValueArray | null) => boolean
    readonly get_subject: (mi: MessageInfo) => string
    readonly set_subject: (mi: MessageInfo, subject?: string | null) => boolean
    readonly get_from: (mi: MessageInfo) => string
    readonly set_from: (mi: MessageInfo, from?: string | null) => boolean
    readonly get_to: (mi: MessageInfo) => string
    readonly set_to: (mi: MessageInfo, to?: string | null) => boolean
    readonly get_cc: (mi: MessageInfo) => string
    readonly set_cc: (mi: MessageInfo, cc?: string | null) => boolean
    readonly get_mlist: (mi: MessageInfo) => string
    readonly set_mlist: (mi: MessageInfo, mlist?: string | null) => boolean
    readonly get_size: (mi: MessageInfo) => number
    readonly set_size: (mi: MessageInfo, size: number) => boolean
    readonly get_date_sent: (mi: MessageInfo) => number
    readonly set_date_sent: (mi: MessageInfo, date_sent: number) => boolean
    readonly get_date_received: (mi: MessageInfo) => number
    readonly set_date_received: (mi: MessageInfo, date_received: number) => boolean
    readonly get_message_id: (mi: MessageInfo) => number
    readonly set_message_id: (mi: MessageInfo, message_id: number) => boolean
    readonly get_references: (mi: MessageInfo) => number[] | null
    readonly take_references: (mi: MessageInfo, references?: number[] | null) => boolean
    readonly get_headers: (mi: MessageInfo) => NameValueArray | null
    readonly take_headers: (mi: MessageInfo, headers?: NameValueArray | null) => boolean
    readonly get_user_header: (mi: MessageInfo, name: string) => string | null
    readonly set_user_header: (mi: MessageInfo, name: string, value?: string | null) => boolean
    readonly get_user_headers: (mi: MessageInfo) => NameValueArray | null
    readonly take_user_headers: (mi: MessageInfo, headers?: NameValueArray | null) => boolean
    readonly get_preview: (mi: MessageInfo) => string | null
    readonly set_preview: (mi: MessageInfo, preview?: string | null) => boolean
    readonly reserved: object[]
    static name: string
}
class MessageInfoPrivate {
    static name: string
}
abstract class MimeFilterBasicClass {
    /* Fields of Camel-1.2.Camel.MimeFilterBasicClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterBasicPrivate {
    static name: string
}
abstract class MimeFilterBestencClass {
    /* Fields of Camel-1.2.Camel.MimeFilterBestencClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterBestencPrivate {
    static name: string
}
abstract class MimeFilterCRLFClass {
    /* Fields of Camel-1.2.Camel.MimeFilterCRLFClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterCRLFPrivate {
    static name: string
}
abstract class MimeFilterCanonClass {
    /* Fields of Camel-1.2.Camel.MimeFilterCanonClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterCanonPrivate {
    static name: string
}
abstract class MimeFilterCharsetClass {
    /* Fields of Camel-1.2.Camel.MimeFilterCharsetClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterCharsetPrivate {
    static name: string
}
abstract class MimeFilterClass {
    /* Fields of Camel-1.2.Camel.MimeFilterClass */
    readonly parent_class: GObject.ObjectClass
    readonly filter: (filter: MimeFilter, in_: Uint8Array, prespace: number) => [ /* out */ Uint8Array, /* outprespace */ number ]
    readonly complete: (filter: MimeFilter, in_: Uint8Array, prespace: number) => [ /* out */ Uint8Array, /* outprespace */ number ]
    readonly reset: (filter: MimeFilter) => void
    readonly reserved: object[]
    static name: string
}
abstract class MimeFilterEnrichedClass {
    /* Fields of Camel-1.2.Camel.MimeFilterEnrichedClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterEnrichedPrivate {
    static name: string
}
abstract class MimeFilterFromClass {
    /* Fields of Camel-1.2.Camel.MimeFilterFromClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterFromPrivate {
    static name: string
}
abstract class MimeFilterGZipClass {
    /* Fields of Camel-1.2.Camel.MimeFilterGZipClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterGZipPrivate {
    static name: string
}
abstract class MimeFilterHTMLClass {
    /* Fields of Camel-1.2.Camel.MimeFilterHTMLClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterHTMLPrivate {
    static name: string
}
abstract class MimeFilterIndexClass {
    /* Fields of Camel-1.2.Camel.MimeFilterIndexClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterIndexPrivate {
    static name: string
}
abstract class MimeFilterLinewrapClass {
    /* Fields of Camel-1.2.Camel.MimeFilterLinewrapClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterLinewrapPrivate {
    static name: string
}
abstract class MimeFilterPgpClass {
    /* Fields of Camel-1.2.Camel.MimeFilterPgpClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterPgpPrivate {
    static name: string
}
class MimeFilterPrivate {
    static name: string
}
abstract class MimeFilterProgressClass {
    /* Fields of Camel-1.2.Camel.MimeFilterProgressClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterProgressPrivate {
    static name: string
}
abstract class MimeFilterToHTMLClass {
    /* Fields of Camel-1.2.Camel.MimeFilterToHTMLClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterToHTMLPrivate {
    static name: string
}
abstract class MimeFilterWindowsClass {
    /* Fields of Camel-1.2.Camel.MimeFilterWindowsClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterWindowsPrivate {
    static name: string
}
abstract class MimeFilterYencClass {
    /* Fields of Camel-1.2.Camel.MimeFilterYencClass */
    readonly parent_class: MimeFilterClass
    readonly reserved: object[]
    static name: string
}
class MimeFilterYencPrivate {
    static name: string
}
abstract class MimeMessageClass {
    /* Fields of Camel-1.2.Camel.MimeMessageClass */
    readonly parent_class: MimePartClass
    readonly reserved: object[]
    static name: string
}
class MimeMessagePrivate {
    static name: string
}
abstract class MimeParserClass {
    /* Fields of Camel-1.2.Camel.MimeParserClass */
    readonly parent_class: GObject.ObjectClass
    readonly message: (parser: MimeParser, headers?: object | null) => void
    readonly part: (parser: MimeParser) => void
    readonly content: (parser: MimeParser) => void
    readonly reserved: object[]
    static name: string
}
class MimeParserPrivate {
    static name: string
}
abstract class MimePartClass {
    /* Fields of Camel-1.2.Camel.MimePartClass */
    readonly parent_class: MediumClass
    readonly construct_from_parser_sync: (mime_part: MimePart, parser: MimeParser, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved: object[]
    static name: string
}
class MimePartPrivate {
    static name: string
}
class Msg {
    /* Fields of Camel-1.2.Camel.Msg */
    /**
     * a #CamelMsgPort this #CamelMsg belongs to
     */
    readonly reply_port: MsgPort
    static name: string
}
class MsgPort {
    static name: string
}
abstract class MultipartClass {
    /* Fields of Camel-1.2.Camel.MultipartClass */
    readonly parent_class: DataWrapperClass
    readonly add_part: (multipart: Multipart, part: MimePart) => void
    readonly get_part: (multipart: Multipart, index: number) => MimePart | null
    readonly get_number: (multipart: Multipart) => number
    readonly get_boundary: (multipart: Multipart) => string
    readonly set_boundary: (multipart: Multipart, boundary?: string | null) => void
    readonly construct_from_parser: (multipart: Multipart, parser: MimeParser) => number
    readonly reserved: object[]
    static name: string
}
abstract class MultipartEncryptedClass {
    /* Fields of Camel-1.2.Camel.MultipartEncryptedClass */
    readonly parent_class: MultipartClass
    readonly reserved: object[]
    static name: string
}
class MultipartEncryptedPrivate {
    static name: string
}
class MultipartPrivate {
    static name: string
}
abstract class MultipartSignedClass {
    /* Fields of Camel-1.2.Camel.MultipartSignedClass */
    readonly parent_class: MultipartClass
    readonly reserved: object[]
    static name: string
}
class MultipartSignedPrivate {
    static name: string
}
abstract class NNTPAddressClass {
    /* Fields of Camel-1.2.Camel.NNTPAddressClass */
    readonly parent_class: AddressClass
    readonly reserved: object[]
    static name: string
}
class NNTPAddressPrivate {
    static name: string
}
class NameValueArray {
    /* Methods of Camel-1.2.Camel.NameValueArray */
    /**
     * Appends a new element of the name `name` and the value `value`
     * at the end of `array`.
     * 
     * See: camel_name_value_array_set_named
     */
    append(name: string, value: string): void
    /**
     * Removes all elements of the `array`.
     */
    clear(): void
    /**
     * Creates a new copy of the `array`. The returned pointer should be freed
     * with camel_name_value_array_free() when no longer needed.
     */
    copy(): NameValueArray
    /**
     * Compares content of the two #CamelNameValueArray and returns whether
     * they equal. Note this is an expensive operation for large arrays.
     */
    equal(array_b: NameValueArray | null, compare_type: CompareType): boolean
    /**
     * Frees the `array,` previously allocated by camel_name_value_array_new(),
     * camel_name_value_array_new_sized() or camel_name_value_array_copy().
     * If the `array` is %NULL, then does nothing.
     */
    free(): void
    /**
     * Returns the name and the value of the element at index `index`. Either
     * of the `out_name` and `out_value` can be %NULL, to not return that part.
     */
    get(index: number): [ /* returnType */ boolean, /* out_name */ string | null, /* out_value */ string | null ]
    get_length(): number
    /**
     * Returns the name of the element at index `index`.
     */
    get_name(index: number): string | null
    /**
     * Returns the value of the first element named `name,` or %NULL when there
     * is no element of such `name` in the `array`. The `compare_type` determines
     * how to compare the names.
     */
    get_named(compare_type: CompareType, name: string): string | null
    /**
     * Returns the value of the element at index `index`.
     */
    get_value(index: number): string | null
    /**
     * Removes element at index `index`.
     */
    remove(index: number): boolean
    /**
     * Removes elements of the `array` with the given `name`.
     * The `compare_type` determines hot to compare the names.
     * If the `all_occurrences` is set to %TRUE, then every elements with the `name`
     * are removed, otherwise only the first occurrence is removed.
     */
    remove_named(compare_type: CompareType, name: string, all_occurrences: boolean): number
    /**
     * Sets both the `name` and the `value` of the element at index `index`.
     */
    set(index: number, name: string, value: string): boolean
    /**
     * Sets the `name` of the element at index `index`.
     */
    set_name(index: number, name: string): boolean
    /**
     * Finds an element named `name` and sets its value to `value,` or appends
     * a new element, in case no such named element exists in the `array` yet.
     * In case there are more elements named with `name` only the first
     * occurrence is changed. The `compare_type` determines how to compare
     * the names.
     */
    set_named(compare_type: CompareType, name: string, value: string): boolean
    /**
     * Sets the `value` of the element at index `index`.
     */
    set_value(index: number, value: string): boolean
    static name: string
    static new(): NameValueArray
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): NameValueArray
    static new_sized(reserve_size: number): NameValueArray
}
class NamedFlags {
    /* Methods of Camel-1.2.Camel.NamedFlags */
    /**
     * Removes all the elements of the array.
     */
    clear(): void
    contains(name: string): boolean
    /**
     * Creates a copy of the `named_flags` and returns it.
     */
    copy(): NamedFlags
    /**
     * Compares content of the two #CamelNamedFlags and returns whether
     * they equal. Note this is an expensive operation for large sets.
     */
    equal(named_flags_b?: NamedFlags | null): boolean
    /**
     * Frees memory associated iwth the `named_flags`. Does nothing,
     * if `named_flags` is %NULL.
     */
    free(): void
    get(index: number): string | null
    get_length(): number
    /**
     * Inserts a flag named `name` into the `named_flags,` if it is not included
     * already (comparing case sensitively), or does nothing otherwise.
     */
    insert(name: string): boolean
    /**
     * Removes a flag named `name` from the `named_flags`.
     */
    remove(name: string): boolean
    static name: string
    static new(): NamedFlags
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): NamedFlags
    static new_sized(reserve_size: number): NamedFlags
}
abstract class NetworkServiceInterface {
    /* Fields of Camel-1.2.Camel.NetworkServiceInterface */
    readonly parent_interface: GObject.TypeInterface
    readonly get_service_name: (service: NetworkService, method: NetworkSecurityMethod) => string | null
    readonly get_default_port: (service: NetworkService, method: NetworkSecurityMethod) => number
    readonly connect_sync: (service: NetworkService, cancellable?: Gio.Cancellable | null) => Gio.IOStream
    readonly reserved: object[]
    static name: string
}
abstract class NetworkSettingsInterface {
    /* Fields of Camel-1.2.Camel.NetworkSettingsInterface */
    readonly parent_interface: GObject.TypeInterface
    readonly reserved: object[]
    static name: string
}
abstract class NullOutputStreamClass {
    /* Fields of Camel-1.2.Camel.NullOutputStreamClass */
    readonly parent_class: Gio.OutputStreamClass
    readonly reserved: object[]
    static name: string
}
class NullOutputStreamPrivate {
    static name: string
}
class ObjectBag {
    /* Methods of Camel-1.2.Camel.ObjectBag */
    /**
     * Aborts a key reservation.
     */
    abort(key?: object | null): void
    /**
     * Adds `object` to `bag`.  The `key` MUST have been previously reserved using
     * camel_object_bag_reserve().
     */
    add(key?: object | null, object?: object | null): void
    /**
     * Frees `bag`.  As a precaution, the function will emit a warning to standard
     * error and return without freeing `bag` if `bag` still has reserved keys.
     */
    destroy(): void
    /**
     * Lookup an object by `key`.  If the key is currently reserved, the function
     * will block until another thread commits or aborts the reservation.  The
     * caller owns the reference to the returned object.  Use g_object_unref ()
     * to unreference it.
     */
    get(key?: object | null): object | null
    /**
     * Returns a #GPtrArray of all the objects in the bag.  The caller owns
     * both the array and the object references, so to free the array use:
     * 
     * |[
     *     g_ptr_array_foreach (array, (GFunc) g_object_unref, NULL);
     *     g_ptr_array_free (array, TRUE);
     * ```
     * 
     */
    list(): GObject.Object[]
    /**
     * Returns the object for `key` in `bag,` ignoring any reservations.  If it
     * isn't committed, then it isn't considered.  This should only be used
     * where reliable transactional-based state is not required.
     * 
     * Unlink other "peek" operations, the caller owns the returned object
     * reference.  Use g_object_unref () to unreference it.
     */
    peek(key?: object | null): object | null
    /**
     * Changes the key for `object` to `new_key,` atomically.
     * 
     * It is considered a programming error if `object` is not found in `bag`.
     * In such case the function will emit a terminal warning and return.
     */
    rekey(object?: object | null, new_key?: object | null): void
    /**
     * Removes `object` from `bag`.
     */
    remove(object?: object | null): void
    /**
     * Reserves `key` in `bag`.  If `key` is already reserved in another thread,
     * then wait until the reservation has been committed.
     * 
     * After reserving `key,` you either get a reference to the object
     * corresponding to `key` (similar to camel_object_bag_get()) or you get
     * %NULL, signifying that you MUST call either camel_object_bag_add() or
     * camel_object_bag_abort().
     */
    reserve(key?: object | null): object | null
    static name: string
}
abstract class ObjectClass {
    /* Fields of Camel-1.2.Camel.ObjectClass */
    readonly parent_class: GObject.ObjectClass
    readonly state_read: (object: Object, fp?: object | null) => number
    readonly state_write: (object: Object, fp?: object | null) => number
    readonly reserved: object[]
    static name: string
}
class ObjectPrivate {
    static name: string
}
abstract class OfflineFolderClass {
    /* Fields of Camel-1.2.Camel.OfflineFolderClass */
    readonly parent_class: FolderClass
    readonly downsync_sync: (folder: OfflineFolder, expression?: string | null, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved: object[]
    static name: string
}
class OfflineFolderPrivate {
    static name: string
}
abstract class OfflineSettingsClass {
    /* Fields of Camel-1.2.Camel.OfflineSettingsClass */
    readonly parent_class: StoreSettingsClass
    readonly reserved: object[]
    static name: string
}
class OfflineSettingsPrivate {
    static name: string
}
abstract class OfflineStoreClass {
    /* Fields of Camel-1.2.Camel.OfflineStoreClass */
    readonly parent_class: StoreClass
    readonly dup_downsync_folders: (store: OfflineStore) => Folder[]
    readonly reserved: object[]
    static name: string
}
class OfflineStorePrivate {
    static name: string
}
abstract class OperationClass {
    /* Fields of Camel-1.2.Camel.OperationClass */
    readonly parent_class: Gio.CancellableClass
    readonly status: (operation: Operation, what: string, pc: number) => void
    readonly reserved: object[]
    static name: string
}
class OperationPrivate {
    static name: string
}
class PartitionKey {
    /* Fields of Camel-1.2.Camel.PartitionKey */
    readonly hashid: _hash_t
    readonly keyid: _key_t
    static name: string
}
class PartitionKeyBlock {
    /* Fields of Camel-1.2.Camel.PartitionKeyBlock */
    readonly used: number
    readonly keys: object[]
    static name: string
}
class PartitionMap {
    /* Fields of Camel-1.2.Camel.PartitionMap */
    readonly hashid: _hash_t
    readonly blockid: _block_t
    static name: string
}
class PartitionMapBlock {
    /* Fields of Camel-1.2.Camel.PartitionMapBlock */
    readonly next: _block_t
    readonly used: number
    readonly partition: object[]
    static name: string
}
abstract class PartitionTableClass {
    /* Fields of Camel-1.2.Camel.PartitionTableClass */
    readonly parent: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class PartitionTablePrivate {
    static name: string
}
class Provider {
    /* Fields of Camel-1.2.Camel.Provider */
    readonly protocol: string
    readonly name: string
    readonly description: string
    readonly domain: string
    readonly flags: ProviderFlags
    readonly url_flags: ProviderURLFlags
    readonly extra_conf: ProviderConfEntry
    readonly port_entries: ProviderPortEntry
    readonly auto_detect: ProviderAutoDetectFunc
    readonly object_types: GObject.Type[]
    readonly authtypes: object[]
    readonly url_hash: GLib.HashFunc
    readonly url_equal: GLib.EqualFunc
    readonly translation_domain: string
    readonly priv: object
    /* Methods of Camel-1.2.Camel.Provider */
    /**
     * Registers a provider.
     */
    register(): void
    static name: string
    /* Static methods and pseudo-constructors */
    /**
     * Returns the registered #CamelProvider for `protocol,` loading it
     * from disk if necessary.  If no #CamelProvider can be found for
     * `protocol,` or the provider module fails to load, the function
     * sets `error` and returns %NULL.
     * 
     * The returned #CamelProvider is owned by Camel and should not be
     * modified or freed.
     */
    static get(protocol: string): Provider
    /**
     * Initialize the Camel provider system by reading in the .urls
     * files in the provider directory and creating a hash table mapping
     * URLs to module names.
     * 
     * A .urls file has the same initial prefix as the shared library it
     * correspond to, and consists of a series of lines containing the URL
     * protocols that that library handles.
     * 
     * TODO: This should be pathed?
     * TODO: This should be plugin-d?
     */
    static init(): void
    /**
     * This returns a list of available providers. If `load` is %TRUE, it will
     * first load in all available providers that haven't yet been loaded.
     * 
     * Free the returned list with g_list_free().  The #CamelProvider structs
     * in the list are owned by Camel and should not be modified or freed.
     */
    static list(load: boolean): Provider[]
    /**
     * Loads the provider at `path,` and calls its initialization function,
     * passing `session` as an argument. The provider should then register
     * itself with `session`.
     */
    static load(path: string): boolean
}
class ProviderConfEntry {
    /* Fields of Camel-1.2.Camel.ProviderConfEntry */
    readonly type: ProviderConfType
    readonly name: string
    readonly depname: string
    readonly text: string
    readonly value: string
    static name: string
}
class ProviderModule {
    /* Fields of Camel-1.2.Camel.ProviderModule */
    readonly path: string
    readonly types: object[]
    readonly loaded: number
    static name: string
    /* Static methods and pseudo-constructors */
    static init(): void
}
class ProviderPortEntry {
    /* Fields of Camel-1.2.Camel.ProviderPortEntry */
    /**
     * port number
     */
    readonly port: number
    /**
     * human description of the port
     */
    readonly desc: string
    /**
     * a boolean whether the port is used together with TLS/SSL
     */
    readonly is_ssl: boolean
    static name: string
}
abstract class SExpClass {
    /* Fields of Camel-1.2.Camel.SExpClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class SExpPrivate {
    static name: string
}
class SExpResult {
    /* Fields of Camel-1.2.Camel.SExpResult */
    /**
     * a #CamelSExpResultType, defining the `value` type
     */
    readonly type: SExpResultType
    /**
     * a boolean whether the occuring times are used
     */
    readonly time_generator: boolean
    /**
     * start time
     */
    readonly occuring_start: number
    /**
     * end time
     */
    readonly occuring_end: number
    static name: string
}
class SExpSymbol {
    /* Fields of Camel-1.2.Camel.SExpSymbol */
    /**
     * a type of the symbol, either CAMEL_SEXP_TERM_FUNC or CAMEL_SEXP_TERM_VAR
     */
    readonly type: number
    /**
     * name of the symbol
     */
    readonly name: string
    /**
     * user data for the callback
     * `f`.func: a #CamelSExpFunc callback
     * `f`.ifunc: a #CamelSExpIFunc callback
     */
    readonly data: object
    static name: string
}
class SExpTerm {
    /* Fields of Camel-1.2.Camel.SExpTerm */
    /**
     * a type of the term; one of #CamelSExpTermType
     */
    readonly type: SExpTermType
    static name: string
}
abstract class SMIMEContextClass {
    /* Fields of Camel-1.2.Camel.SMIMEContextClass */
    readonly parent_class: CipherContextClass
    readonly reserved: object[]
    static name: string
}
class SMIMEContextPrivate {
    static name: string
}
abstract class SaslAnonymousClass {
    /* Fields of Camel-1.2.Camel.SaslAnonymousClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslAnonymousPrivate {
    static name: string
}
abstract class SaslClass {
    /* Fields of Camel-1.2.Camel.SaslClass */
    readonly parent_class: GObject.ObjectClass
    readonly auth_type: ServiceAuthType
    readonly try_empty_password_sync: (sasl: Sasl, cancellable?: Gio.Cancellable | null) => boolean
    readonly challenge_sync: (sasl: Sasl, token?: Uint8Array | null, cancellable?: Gio.Cancellable | null) => Uint8Array | null
    readonly reserved: object[]
    static name: string
}
abstract class SaslCramMd5Class {
    /* Fields of Camel-1.2.Camel.SaslCramMd5Class */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslCramMd5Private {
    static name: string
}
abstract class SaslDigestMd5Class {
    /* Fields of Camel-1.2.Camel.SaslDigestMd5Class */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslDigestMd5Private {
    static name: string
}
abstract class SaslGssapiClass {
    /* Fields of Camel-1.2.Camel.SaslGssapiClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslGssapiPrivate {
    static name: string
}
abstract class SaslLoginClass {
    /* Fields of Camel-1.2.Camel.SaslLoginClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslLoginPrivate {
    static name: string
}
abstract class SaslNTLMClass {
    /* Fields of Camel-1.2.Camel.SaslNTLMClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslNTLMPrivate {
    static name: string
}
abstract class SaslPOPB4SMTPClass {
    /* Fields of Camel-1.2.Camel.SaslPOPB4SMTPClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslPOPB4SMTPPrivate {
    static name: string
}
abstract class SaslPlainClass {
    /* Fields of Camel-1.2.Camel.SaslPlainClass */
    readonly parent_class: SaslClass
    readonly reserved: object[]
    static name: string
}
class SaslPlainPrivate {
    static name: string
}
class SaslPrivate {
    static name: string
}
abstract class SaslXOAuth2Class {
    /* Fields of Camel-1.2.Camel.SaslXOAuth2Class */
    readonly parent_class: SaslClass
    static name: string
}
abstract class SaslXOAuth2GoogleClass {
    /* Fields of Camel-1.2.Camel.SaslXOAuth2GoogleClass */
    readonly parent_class: SaslXOAuth2Class
    static name: string
}
class SaslXOAuth2GooglePrivate {
    static name: string
}
abstract class SaslXOAuth2OutlookClass {
    /* Fields of Camel-1.2.Camel.SaslXOAuth2OutlookClass */
    readonly parent_class: SaslXOAuth2Class
    static name: string
}
class SaslXOAuth2OutlookPrivate {
    static name: string
}
class SaslXOAuth2Private {
    static name: string
}
abstract class SaslXOAuth2YahooClass {
    /* Fields of Camel-1.2.Camel.SaslXOAuth2YahooClass */
    readonly parent_class: SaslXOAuth2Class
    static name: string
}
class SaslXOAuth2YahooPrivate {
    static name: string
}
class ServiceAuthType {
    /* Fields of Camel-1.2.Camel.ServiceAuthType */
    readonly name: string
    readonly description: string
    readonly authproto: string
    readonly need_password: boolean
    /* Methods of Camel-1.2.Camel.ServiceAuthType */
    /**
     * Copies the `service_auth_type` struct.
     * Does nothing and returns the given object in reality, needed for the introspection.
     */
    copy(): ServiceAuthType
    /**
     * Frees the `service_auth_type` struct.
     * Does nothing in reality, needed for the introspection.
     */
    free(): void
    static name: string
}
abstract class ServiceClass {
    /* Fields of Camel-1.2.Camel.ServiceClass */
    readonly parent_class: ObjectClass
    readonly settings_type: GObject.Type
    readonly get_name: (service: Service, brief: boolean) => string
    readonly connect_sync: (service: Service, cancellable?: Gio.Cancellable | null) => boolean
    readonly disconnect_sync: (service: Service, clean: boolean, cancellable?: Gio.Cancellable | null) => boolean
    readonly authenticate_sync: (service: Service, mechanism?: string | null, cancellable?: Gio.Cancellable | null) => AuthenticationResult
    readonly query_auth_types_sync: (service: Service, cancellable?: Gio.Cancellable | null) => ServiceAuthType[]
    readonly reserved: object[]
    static name: string
}
class ServicePrivate {
    static name: string
}
abstract class SessionClass {
    /* Fields of Camel-1.2.Camel.SessionClass */
    readonly parent_class: GObject.ObjectClass
    readonly add_service: (session: Session, uid: string, protocol: string, type: ProviderType) => Service
    readonly remove_service: (session: Session, service: Service) => void
    readonly get_password: (session: Session, service: Service, prompt: string, item: string, flags: number) => string
    readonly forget_password: (session: Session, service: Service, item: string) => boolean
    readonly trust_prompt: (session: Session, service: Service, certificate: Gio.TlsCertificate, errors: Gio.TlsCertificateFlags) => CertTrust
    readonly get_filter_driver: (session: Session, type: string, for_folder?: Folder | null) => FilterDriver
    readonly lookup_addressbook: (session: Session, name: string) => boolean
    readonly authenticate_sync: (session: Session, service: Service, mechanism?: string | null, cancellable?: Gio.Cancellable | null) => boolean
    readonly forward_to_sync: (session: Session, folder: Folder, message: MimeMessage, address: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly get_oauth2_access_token_sync: (session: Session, service: Service, cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* out_access_token */ string | null, /* out_expires_in */ number | null ]
    readonly get_recipient_certificates_sync: (session: Session, flags: number, recipients: string[], cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* out_certificates */ string[] ]
    readonly addressbook_contains_sync: (session: Session, book_uid: string, email_address: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved_methods: object[]
    readonly job_started: (session: Session, cancellable?: Gio.Cancellable | null) => void
    readonly job_finished: (session: Session, cancellable: Gio.Cancellable | null, error: GLib.Error) => void
    readonly user_alert: (session: Session, service: Service, type: SessionAlertType, message: string) => void
    readonly reserved_signals: object[]
    static name: string
}
class SessionPrivate {
    static name: string
}
abstract class SettingsClass {
    /* Fields of Camel-1.2.Camel.SettingsClass */
    readonly parent_class: GObject.ObjectClass
    readonly clone: (settings: Settings) => Settings
    readonly equal: (settings_a: Settings, settings_b: Settings) => boolean
    readonly reserved: object[]
    /* Methods of Camel-1.2.Camel.SettingsClass */
    /**
     * Returns an array of #GParamSpec for properties of `class` which are
     * considered to be settings.  By default all properties are considered
     * to be settings, but subclasses may wish to exclude certain properties.
     * Free the returned array with g_free().
     */
    static list_settings(settings_class: Settings | Function | GObject.Type, n_settings: number): GObject.ParamSpec
    static name: string
}
class SettingsPrivate {
    static name: string
}
abstract class StoreClass {
    /* Fields of Camel-1.2.Camel.StoreClass */
    readonly parent_class: ServiceClass
    readonly hash_folder_name: GLib.HashFunc
    readonly equal_folder_name: GLib.EqualFunc
    readonly can_refresh_folder: (store: Store, info: FolderInfo) => boolean
    readonly get_folder_sync: (store: Store, folder_name: string, flags: StoreGetFolderFlags, cancellable?: Gio.Cancellable | null) => Folder | null
    readonly get_folder_info_sync: (store: Store, top: string | null, flags: StoreGetFolderInfoFlags, cancellable?: Gio.Cancellable | null) => FolderInfo | null
    readonly get_inbox_folder_sync: (store: Store, cancellable?: Gio.Cancellable | null) => Folder | null
    readonly get_junk_folder_sync: (store: Store, cancellable?: Gio.Cancellable | null) => Folder | null
    readonly get_trash_folder_sync: (store: Store, cancellable?: Gio.Cancellable | null) => Folder | null
    readonly create_folder_sync: (store: Store, parent_name: string | null, folder_name: string, cancellable?: Gio.Cancellable | null) => FolderInfo | null
    readonly delete_folder_sync: (store: Store, folder_name: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly rename_folder_sync: (store: Store, old_name: string, new_name: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly synchronize_sync: (store: Store, expunge: boolean, cancellable?: Gio.Cancellable | null) => boolean
    readonly initial_setup_sync: (store: Store, cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* out_save_setup */ GLib.HashTable ]
    readonly get_can_auto_save_changes: (store: Store) => boolean
    readonly reserved_methods: object[]
    readonly folder_created: (store: Store, folder_info: FolderInfo) => void
    readonly folder_deleted: (store: Store, folder_info: FolderInfo) => void
    readonly folder_opened: (store: Store, folder: Folder) => void
    readonly folder_renamed: (store: Store, old_name: string, folder_info: FolderInfo) => void
    readonly folder_info_stale: (store: Store) => void
    readonly reserved_signals: object[]
    static name: string
}
class StoreInfo {
    /* Fields of Camel-1.2.Camel.StoreInfo */
    readonly refcount: number
    readonly path: string
    readonly flags: number
    readonly unread: number
    readonly total: number
    /* Static methods and pseudo-constructors */
    /**
     * Returns the last segment of the path string from `info`.
     */
    static name(summary: StoreSummary, info: StoreInfo): string
    /**
     * Returns the path string from `info`.
     */
    static path(summary: StoreSummary, info: StoreInfo): string
    /**
     * Set a specific string on the `info`.
     */
    static set_string(summary: StoreSummary, info: StoreInfo, type: number, value: string): void
}
class StorePrivate {
    static name: string
}
abstract class StoreSettingsClass {
    /* Fields of Camel-1.2.Camel.StoreSettingsClass */
    readonly parent_class: SettingsClass
    readonly reserved: object[]
    static name: string
}
class StoreSettingsPrivate {
    static name: string
}
abstract class StoreSummaryClass {
    /* Fields of Camel-1.2.Camel.StoreSummaryClass */
    readonly parent_class: GObject.ObjectClass
    readonly store_info_size: number
    readonly summary_header_load: (summary: StoreSummary, file?: object | null) => number
    readonly summary_header_save: (summary: StoreSummary, file?: object | null) => number
    readonly store_info_save: (summary: StoreSummary, file: object | null, info: StoreInfo) => number
    readonly store_info_free: (summary: StoreSummary, info: StoreInfo) => void
    readonly store_info_set_string: (summary: StoreSummary, info: StoreInfo, type: number, value: string) => void
    readonly reserved: object[]
    static name: string
}
class StoreSummaryPrivate {
    static name: string
}
abstract class StreamBufferClass {
    /* Fields of Camel-1.2.Camel.StreamBufferClass */
    readonly parent_class: StreamClass
    readonly init: (stream_buffer: StreamBuffer, stream: Stream, mode: StreamBufferMode) => void
    readonly init_vbuf: (stream_buffer: StreamBuffer, stream: Stream, mode: StreamBufferMode, buf: string, size: number) => void
    readonly reserved: object[]
    static name: string
}
class StreamBufferPrivate {
    static name: string
}
abstract class StreamClass {
    /* Fields of Camel-1.2.Camel.StreamClass */
    readonly parent_class: GObject.ObjectClass
    readonly read: (stream: Stream, buffer: number[], cancellable?: Gio.Cancellable | null) => number
    readonly write: (stream: Stream, buffer: number[], cancellable?: Gio.Cancellable | null) => number
    readonly close: (stream: Stream, cancellable?: Gio.Cancellable | null) => number
    readonly flush: (stream: Stream, cancellable?: Gio.Cancellable | null) => number
    readonly eos: (stream: Stream) => boolean
    readonly reserved: object[]
    static name: string
}
abstract class StreamFilterClass {
    /* Fields of Camel-1.2.Camel.StreamFilterClass */
    readonly parent_class: StreamClass
    readonly reserved: object[]
    static name: string
}
class StreamFilterPrivate {
    static name: string
}
abstract class StreamFsClass {
    /* Fields of Camel-1.2.Camel.StreamFsClass */
    readonly parent_class: StreamClass
    readonly reserved: object[]
    static name: string
}
class StreamFsPrivate {
    static name: string
}
abstract class StreamMemClass {
    /* Fields of Camel-1.2.Camel.StreamMemClass */
    readonly parent_class: StreamClass
    readonly reserved: object[]
    static name: string
}
class StreamMemPrivate {
    static name: string
}
abstract class StreamNullClass {
    /* Fields of Camel-1.2.Camel.StreamNullClass */
    readonly parent_class: StreamClass
    readonly reserved: object[]
    static name: string
}
class StreamNullPrivate {
    static name: string
}
class StreamPrivate {
    static name: string
}
abstract class StreamProcessClass {
    /* Fields of Camel-1.2.Camel.StreamProcessClass */
    readonly parent_class: StreamClass
    readonly reserved: object[]
    static name: string
}
class StreamProcessPrivate {
    static name: string
}
abstract class SubscribableInterface {
    /* Fields of Camel-1.2.Camel.SubscribableInterface */
    readonly parent_interface: GObject.TypeInterface
    readonly folder_is_subscribed: (subscribable: Subscribable, folder_name: string) => boolean
    readonly subscribe_folder_sync: (subscribable: Subscribable, folder_name: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly unsubscribe_folder_sync: (subscribable: Subscribable, folder_name: string, cancellable?: Gio.Cancellable | null) => boolean
    readonly reserved_methods: object[]
    readonly folder_subscribed: (subscribable: Subscribable, folder_info: FolderInfo) => void
    readonly folder_unsubscribed: (subscribable: Subscribable, folder_info: FolderInfo) => void
    readonly reserved_signals: object[]
    static name: string
}
class SummaryMessageID {
    static name: string
}
abstract class TextIndexClass {
    /* Fields of Camel-1.2.Camel.TextIndexClass */
    readonly parent_class: IndexClass
    readonly reserved: object[]
    static name: string
}
abstract class TextIndexCursorClass {
    /* Fields of Camel-1.2.Camel.TextIndexCursorClass */
    readonly parent_class: IndexCursorClass
    readonly reserved: object[]
    static name: string
}
class TextIndexCursorPrivate {
    static name: string
}
abstract class TextIndexKeyCursorClass {
    /* Fields of Camel-1.2.Camel.TextIndexKeyCursorClass */
    readonly parent_class: IndexCursorClass
    readonly reserved: object[]
    static name: string
}
class TextIndexKeyCursorPrivate {
    static name: string
}
abstract class TextIndexNameClass {
    /* Fields of Camel-1.2.Camel.TextIndexNameClass */
    readonly parent_class: IndexNameClass
    readonly reserved: object[]
    static name: string
}
class TextIndexNamePrivate {
    static name: string
}
class TextIndexPrivate {
    static name: string
}
abstract class TransportClass {
    /* Fields of Camel-1.2.Camel.TransportClass */
    readonly parent_class: ServiceClass
    readonly send_to_sync: (transport: Transport, message: MimeMessage, from: Address, recipients: Address, cancellable?: Gio.Cancellable | null) => [ /* returnType */ boolean, /* out_sent_message_saved */ boolean ]
    readonly reserved: object[]
    static name: string
}
class TransportPrivate {
    static name: string
}
class Trie {
    static name: string
}
class UIDCache {
    /* Fields of Camel-1.2.Camel.UIDCache */
    readonly filename: string
    readonly uids: GLib.HashTable
    readonly level: number
    readonly expired: number
    readonly size: number
    readonly fd: number
    /* Methods of Camel-1.2.Camel.UIDCache */
    /**
     * Destroys `cache` and frees its data.
     */
    destroy(): void
    /**
     * Returns an array of UIDs from `uids` that are not in `cache,` and
     * removes UIDs from `cache` that aren't in `uids`.
     */
    get_new_uids(uids: string[]): string[]
    /**
     * Attempts to save `cache` back to disk.
     */
    save(): boolean
    /**
     * Marks a uid for saving.
     */
    save_uid(uid: string): void
    static name: string
    /* Static methods and pseudo-constructors */
    /**
     * Frees the array of UIDs.
     */
    static free_uids(uids: string[]): void
}
class URL {
    /* Fields of Camel-1.2.Camel.URL */
    readonly protocol: string
    readonly user: string
    readonly authmech: string
    readonly host: string
    readonly port: number
    readonly path: string
    readonly params: GLib.Data
    readonly query: string
    readonly fragment: string
    /* Methods of Camel-1.2.Camel.URL */
    /**
     * Copy a #CamelURL.
     */
    copy(): URL
    equal(u2: URL): boolean
    /**
     * Frees `url`.
     */
    free(): void
    /**
     * Get the value of the specified param on the URL.
     */
    get_param(name: string): string | null
    hash(): number
    /**
     * Parses `url_string` relative to `base`.
     */
    new_with_base(url_string: string): URL
    /**
     * Set the authmech of a #CamelURL.
     */
    set_authmech(authmech: string): void
    /**
     * Set the fragment of a #CamelURL.
     */
    set_fragment(fragment: string): void
    /**
     * Set the hostname of a #CamelURL.
     */
    set_host(host: string): void
    /**
     * Set a param on the #CamelURL.
     */
    set_param(name: string, value: string): void
    /**
     * Set the path component of a #CamelURL.
     */
    set_path(path: string): void
    /**
     * Set the port on a #CamelURL.
     */
    set_port(port: number): void
    /**
     * Set the protocol of a #CamelURL.
     */
    set_protocol(protocol: string): void
    /**
     * Set the query of a #CamelURL.
     */
    set_query(query: string): void
    /**
     * Set the user of a #CamelURL.
     */
    set_user(user: string): void
    /**
     * Flatten a #CamelURL into a string.
     */
    to_string(flags: URLFlags): string
    static name: string
    static new(url_string: string): URL
    constructor(url_string: string)
    /* Static methods and pseudo-constructors */
    static new(url_string: string): URL
    static addrspec_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
    static addrspec_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
    /**
     * &percnt;-decodes the passed-in URL *in place*. The decoded version is
     * never longer than the encoded version, so there does not need to
     * be any additional space at the end of the string.
     */
    static decode(part: string): void
    static decode_path(path: string): string
    /**
     * This &percnt;-encodes the given URL part and returns the escaped version
     * in allocated memory, which the caller must free when it is done.
     */
    static encode(part: string, escape_extra?: string | null): string
    static file_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
    static file_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
    static web_end(in_: string, pos: string, inend: string, match: UrlMatch): boolean
    static web_start(in_: string, pos: string, inend: string, match: UrlMatch): boolean
}
class UrlMatch {
    /* Fields of Camel-1.2.Camel.UrlMatch */
    readonly pattern: string
    readonly prefix: string
    readonly um_so: number
    readonly um_eo: number
    static name: string
}
class UrlPattern {
    /* Fields of Camel-1.2.Camel.UrlPattern */
    readonly pattern: string
    readonly prefix: string
    readonly start: UrlScanFunc
    readonly end: UrlScanFunc
    static name: string
}
class UrlScanner {
    static name: string
}
abstract class VTrashFolderClass {
    /* Fields of Camel-1.2.Camel.VTrashFolderClass */
    readonly parent_class: VeeFolderClass
    readonly reserved: object[]
    static name: string
}
class VTrashFolderPrivate {
    static name: string
}
abstract class VeeDataCacheClass {
    /* Fields of Camel-1.2.Camel.VeeDataCacheClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class VeeDataCachePrivate {
    static name: string
}
abstract class VeeFolderClass {
    /* Fields of Camel-1.2.Camel.VeeFolderClass */
    readonly parent_class: FolderClass
    readonly add_folder: (vfolder: VeeFolder, subfolder: Folder, cancellable?: Gio.Cancellable | null) => void
    readonly remove_folder: (vfolder: VeeFolder, subfolder: Folder, cancellable?: Gio.Cancellable | null) => void
    readonly rebuild_folder: (vfolder: VeeFolder, subfolder: Folder, cancellable?: Gio.Cancellable | null) => void
    readonly set_expression: (vfolder: VeeFolder, expression: string) => void
    readonly folder_changed: (vfolder: VeeFolder, subfolder: Folder, changes: FolderChangeInfo) => void
    readonly reserved: object[]
    static name: string
}
class VeeFolderPrivate {
    static name: string
}
abstract class VeeMessageInfoClass {
    /* Fields of Camel-1.2.Camel.VeeMessageInfoClass */
    readonly parent_class: MessageInfoClass
    readonly reserved: object[]
    static name: string
}
abstract class VeeMessageInfoDataClass {
    /* Fields of Camel-1.2.Camel.VeeMessageInfoDataClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class VeeMessageInfoDataPrivate {
    static name: string
}
class VeeMessageInfoPrivate {
    static name: string
}
abstract class VeeStoreClass {
    /* Fields of Camel-1.2.Camel.VeeStoreClass */
    readonly parent_class: StoreClass
    readonly reserved: object[]
    static name: string
}
class VeeStorePrivate {
    static name: string
}
abstract class VeeSubfolderDataClass {
    /* Fields of Camel-1.2.Camel.VeeSubfolderDataClass */
    readonly parent_class: GObject.ObjectClass
    readonly reserved: object[]
    static name: string
}
class VeeSubfolderDataPrivate {
    static name: string
}
abstract class VeeSummaryClass {
    /* Fields of Camel-1.2.Camel.VeeSummaryClass */
    readonly parent_class: FolderSummaryClass
    readonly reserved: object[]
    static name: string
}
class VeeSummaryPrivate {
    static name: string
}
class WeakRefGroup {
    /* Methods of Camel-1.2.Camel.WeakRefGroup */
    get(): object | null
    /**
     * Increases a reference count of the `group`.
     */
    ref(): WeakRefGroup
    /**
     * Sets the `object` as the object help by this `group`. If
     * the `object` is %NULL, then unsets any previously set.
     */
    set(object?: object | null): void
    /**
     * Decreases a reference count of the `group`. The `group` is
     * freed when the reference count reaches zero.
     */
    unref(): void
    static name: string
    static new(): WeakRefGroup
    constructor()
    /* Static methods and pseudo-constructors */
    static new(): WeakRefGroup
}
class _KeyKey {
    /* Fields of Camel-1.2.Camel._KeyKey */
    readonly data: _block_t
    readonly offset: number
    readonly flags: number
    static name: string
}
class _LockHelperMsg {
    /* Fields of Camel-1.2.Camel._LockHelperMsg */
    readonly magic: number
    readonly seq: number
    readonly id: number
    readonly data: number
    static name: string
}
class __search_word {
    /* Fields of Camel-1.2.Camel.__search_word */
    readonly type: _search_word_t
    readonly word: string
    static name: string
}
class __search_words {
    /* Fields of Camel-1.2.Camel.__search_words */
    readonly len: number
    readonly type: _search_word_t
    readonly words: object
    static name: string
}
class _encrypt {
    /* Fields of Camel-1.2.Camel._encrypt */
    readonly status: CipherValidityEncrypt
    readonly description: string
    readonly encrypters: GLib.Queue
    static name: string
}
class _sign {
    /* Fields of Camel-1.2.Camel._sign */
    readonly status: CipherValiditySign
    readonly description: string
    readonly signers: GLib.Queue
    static name: string
}
    type _block_t = number
    type _hash_t = number
    type _key_t = number
}
export default Camel;