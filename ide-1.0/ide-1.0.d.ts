
/*
 * Type Definitions for Gjs (https://gjs.guide/)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in `ts-for-gir` or create a bug report on https://github.com/gjsify/ts-for-gir
 */

import './ide-1.0-ambient.d.ts';
import './ide-1.0-import.d.ts';
/**
 * Ide-1.0
 */

import type Template from '@girs/template-1.0';
import type Gio from '@girs/gio-2.0';
import type GObject from '@girs/gobject-2.0';
import type GLib from '@girs/glib-2.0';
import type Peas from '@girs/peas-1.0';
import type GModule from '@girs/gmodule-2.0';
import type GIRepository from '@girs/girepository-2.0';
import type Json from '@girs/json-1.0';
import type GtkSource from '@girs/gtksource-3.0';
import type Gtk from '@girs/gtk-3.0';
import type xlib from '@girs/xlib-2.0';
import type Gdk from '@girs/gdk-3.0';
import type cairo from '@girs/cairo-1.0';
import type Pango from '@girs/pango-1.0';
import type HarfBuzz from '@girs/harfbuzz-0.0';
import type freetype2 from '@girs/freetype2-2.0';
import type GdkPixbuf from '@girs/gdkpixbuf-2.0';
import type Atk from '@girs/atk-1.0';
import type Dazzle from '@girs/dazzle-1.0';

export namespace Ide {

enum ApplicationMode {
    PRIMARY,
    WORKER,
    TOOL,
    TESTS,
}
enum BufferLineChange {
    NONE,
    ADDED,
    CHANGED,
    DELETED,
}
enum BuildLogStream {
    STDOUT,
    STDERR,
}
enum CursorType {
    COLUMN,
    SELECT,
    MATCH,
}
enum DeviceError {
    DEVICE,
}
enum DiagnosticSeverity {
    IGNORED,
    NOTE,
    DEPRECATED,
    WARNING,
    ERROR,
    FATAL,
}
enum DoapError {
    FORMAT,
}
enum HighlightResult {
    STOP,
    CONTINUE,
}
enum IndentStyle {
    SPACES,
    TABS,
}
/**
 * %IDE_LAYOUT_GRID_SPLIT_LEFT:
 * %IDE_LAYOUT_GRID_SPLIT_RIGHT:
 * %IDE_LAYOUT_GRID_SPLIT_MOVE_LEFT:
 * %IDE_LAYOUT_GRID_SPLIT_MOVE_RIGHT:
 */
enum LayoutGridSplit {
    LEFT,
    RIGHT,
    MOVE_LEFT,
    MOVE_RIGHT,
}
enum RuntimeError {
    RUNTIME,
}
/**
 * The type of keyboard mode.
 */
enum SourceViewModeType {
    TRANSIENT,
    PERMANENT,
    MODAL,
}
/**
 * The type of movement.
 * 
 * Some of these movements may be modified by using the modify-repeat action.
 * First adjust the repeat and then perform the "movement" action.
 */
enum SourceViewMovement {
    /**
     * move to previous character in the file.
     *   This includes line breaks.
     */
    PREVIOUS_OFFSET,
    /**
     * move to next character in the file.
     *   This includes line breaks.
     */
    NEXT_OFFSET,
    /**
     * move to nth character in line. Use a repeat to
     *   specify the target character within the line.
     */
    NTH_CHAR,
    /**
     * move to previous character in line.
     */
    PREVIOUS_CHAR,
    /**
     * move to next character in line.
     */
    NEXT_CHAR,
    /**
     * move to line offset of zero.
     */
    FIRST_CHAR,
    /**
     * move to first non-whitespace character in line.
     */
    FIRST_NONSPACE_CHAR,
    /**
     * move to the middle character in the line.
     */
    MIDDLE_CHAR,
    /**
     * move to the last character in the line. this can be
     *   inclusve or exclusive. inclusive is equivalent to %IDE_SOURCE_VIEW_MOVEMENT_LINE_END.
     */
    LAST_CHAR,
    /**
     * move to beginning of next word.
     */
    NEXT_WORD_START,
    NEXT_FULL_WORD_START,
    /**
     * move to the next sub-word start, similar
     *   to the default in GtkTextView. This includes the underline character as a word break,
     *   as is common in Emacs.
     */
    NEXT_SUB_WORD_START,
    /**
     * move to the previous sub-wird start,
     *   similar to the default in GtkTextView. This includes the underline character as a
     *   word break, as is common in Emacs.
     */
    PREVIOUS_SUB_WORD_START,
    /**
     * move to beginning of previous word.
     */
    PREVIOUS_WORD_START,
    PREVIOUS_FULL_WORD_START,
    /**
     * move to end of previous word.
     */
    PREVIOUS_WORD_END,
    PREVIOUS_FULL_WORD_END,
    /**
     * move to end of next word.
     */
    NEXT_WORD_END,
    NEXT_FULL_WORD_END,
    /**
     * move to beginning of sentance.
     */
    SENTENCE_START,
    /**
     * move to end of sentance.
     */
    SENTENCE_END,
    /**
     * move to start of paragraph.
     */
    PARAGRAPH_START,
    /**
     * move to end of paragraph.
     */
    PARAGRAPH_END,
    /**
     * move to previous line, keeping line offset if possible.
     */
    PREVIOUS_LINE,
    /**
     * move to next line, keeping line offset if possible.
     */
    NEXT_LINE,
    /**
     * move to first line in file, line offset of zero.
     */
    FIRST_LINE,
    /**
     * move to nth line, line offset of zero. use repeat to
     *   select the given line number.
     */
    NTH_LINE,
    /**
     * move to last line in file, with line offset of zero.
     */
    LAST_LINE,
    /**
     * move to line based on percentage. Use repeat to
     *   specify the percentage, 0 to 100.
     */
    LINE_PERCENTAGE,
    /**
     * special selection to select all line characters up to the
     *   cursor position. special care will be taken if the line is blank to select only the blank
     *   space if any. otherwise, the line break will be selected.
     */
    LINE_CHARS,
    /**
     * This will move you to the location of the newline at the
     *   end of the current line. It does not support exclusive will not select the newline, while
     *   inclusive will select the newline.
     */
    LINE_END,
    /**
     * move half a page up.
     */
    HALF_PAGE_UP,
    /**
     * move half a page down.
     */
    HALF_PAGE_DOWN,
    /**
     * move half a page left.
     */
    HALF_PAGE_LEFT,
    /**
     * move half a page right.
     */
    HALF_PAGE_RIGHT,
    /**
     * move a full page up.
     */
    PAGE_UP,
    /**
     * move a full page up, but extend to whole line.
     */
    PAGE_UP_LINES,
    /**
     * move a full page down.
     */
    PAGE_DOWN,
    /**
     * move a full page down, but extend to whole line.
     */
    PAGE_DOWN_LINES,
    /**
     * move to viewport up by visible line, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_UP,
    /**
     * move to viewport down by visible line, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_DOWN,
    /**
     * move to viewport left by visible char, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_LEFT,
    /**
     * move to viewport right by visible char, adjusting cursor
     *   to stay on screen if necessary.
     */
    SCREEN_RIGHT,
    /**
     * move to the top of the screen.
     */
    SCREEN_TOP,
    /**
     * move to the middle of the screen.
     */
    SCREEN_MIDDLE,
    /**
     * move to the bottom of the screen.
     */
    SCREEN_BOTTOM,
    /**
     * move to match of brace, bracket, comment.
     */
    MATCH_SPECIAL,
    /**
     * scroll until insert cursor or [count]th line is at screen top.
     */
    SCROLL_SCREEN_TOP,
    /**
     * scroll until insert cursor or [count]th line is at screen center.
     */
    SCROLL_SCREEN_CENTER,
    /**
     * scroll until insert cursor or [count]th line is at screen bottom.
     */
    SCROLL_SCREEN_BOTTOM,
    /**
     * scroll until insert cursor or [count]th char is at screen left.
     */
    SCROLL_SCREEN_LEFT,
    /**
     * scroll until insert cursor or [count]th char is at screen right.
     */
    SCROLL_SCREEN_RIGHT,
    PREVIOUS_UNMATCHED_BRACE,
    NEXT_UNMATCHED_BRACE,
    PREVIOUS_UNMATCHED_PAREN,
    NEXT_UNMATCHED_PAREN,
    NEXT_MATCH_MODIFIER,
    PREVIOUS_MATCH_MODIFIER,
    /**
     * move to the next matching char according to f and t in vim.
     */
    NEXT_MATCH_SEARCH_CHAR,
    /**
     * move to the previous matching char according to F and T in vim.
     */
    PREVIOUS_MATCH_SEARCH_CHAR,
}
/**
 * The style of theatric.
 */
enum SourceViewTheatric {
    /**
     * expand from selection location.
     */
    EXPAND,
    /**
     * shrink from selection location.
     */
    SHRINK,
}
enum SymbolKind {
    NONE,
    ARRAY,
    BOOLEAN,
    CLASS,
    CONSTANT,
    CONSTRUCTOR,
    ENUM,
    ENUM_VALUE,
    FIELD,
    FILE,
    FUNCTION,
    HEADER,
    INTERFACE,
    METHOD,
    MODULE,
    NAMESPACE,
    NUMBER,
    PACKAGE,
    PROPERTY,
    SCALAR,
    STRING,
    STRUCT,
    UNION,
    VARIABLE,
    KEYWORD,
    UI_ATTRIBUTES,
    UI_CHILD,
    UI_ITEM,
    UI_MENU,
    UI_MENU_ATTRIBUTE,
    UI_OBJECT,
    UI_PACKING,
    UI_PROPERTY,
    UI_SECTION,
    UI_SIGNAL,
    UI_STYLE,
    UI_STYLE_CLASS,
    UI_SUBMENU,
    UI_TEMPLATE,
    XML_ATTRIBUTE,
    XML_DECLARATION,
    XML_ELEMENT,
    XML_COMMENT,
    XML_CDATA,
}
enum ThreadPoolKind {
    COMPILER,
    INDEXER,
    LAST,
}
enum TransferError {
    UNKNOWN,
    CONNECTION_IS_METERED,
}
/**
 * Error codes returned by #IdeUri methods.
 */
enum UriError {
    MISC,
    BAD_SCHEME,
    BAD_USER,
    BAD_PASSWORD,
    BAD_AUTH_PARAMS,
    BAD_HOST,
    BAD_PORT,
    BAD_PATH,
    BAD_QUERY,
    BAD_FRAGMENT,
}
enum VcsConfigType {
    FULL_NAME,
    EMAIL,
}
enum BufferLineFlags {
    NONE,
    ADDED,
    CHANGED,
    DELETED,
    ERROR,
    WARNING,
    NOTE,
}
enum BuildPhase {
    NONE,
    PREPARE,
    DOWNLOADS,
    DEPENDENCIES,
    AUTOGEN,
    CONFIGURE,
    BUILD,
    INSTALL,
    EXPORT,
    FINAL,
    BEFORE,
    AFTER,
    FINISHED,
    FAILED,
}
enum SymbolFlags {
    NONE,
    IS_STATIC,
    IS_MEMBER,
    IS_DEPRECATED,
}
/**
 * Flags that control how a URI string is parsed (or re-parsed).
 * @bitfield 
 */
enum UriParseFlags {
    /**
     * Parse the URI strictly according to the RFC
     *     3986 grammar.
     */
    STRICT,
    /**
     * Parse the URI according to the HTML5 web
     *     address parsing rules.
     */
    HTML5,
    /**
     * Disallow Internationalized URIs; return an
     *     error if the URI contains non-ASCII characters
     */
    NO_IRI,
    /**
     * Split the userinfo into user and password,
     *     separated by ':'.
     */
    PASSWORD,
    /**
     * Split the userinfo into user/password and
     *     parameters, separated by ';'.
     */
    AUTH_PARAMS,
    /**
     * Do not parse the host as a DNS host/IP address.
     *     (Eg, for smb URIs with NetBIOS hostnames).
     */
    NON_DNS,
    /**
     * Decode even reserved %<!-- -->encoded
     *     characters in the URI (unless this would result in non-UTF8
     *     strings). Using this flag means that you cannot reliably
     *     convert the parsed URI back to string form with
     *     ide_uri_to_string().
     */
    DECODED,
    /**
     * Return an error if non-UTF8 characters are
     *     encountered in the URI.
     */
    UTF8_ONLY,
}
enum UriToStringFlags {
    AUTH_PARAMS,
    FRAGMENT,
}
enum WorkbenchOpenFlags {
    NONE,
    BACKGROUND,
}
const BUFFER_LINE_FLAGS_DIAGNOSTICS_MASK: number
const BUILD_PHASE_MASK: number
const BUILD_PHASE_WHENCE_MASK: number
const ENABLE_TRACE: number
const FILE_SETTINGS_EXTENSION_POINT: string | null
const LANGSERV_COMPLETION_PROVIDER_PRIORITY: number
const PREFERENCES_PERSPECTIVE_PRIORITY: number
const RECENT_PROJECTS_BOOKMARK_FILENAME: string | null
const RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX: string | null
const RECENT_PROJECTS_GROUP: string | null
const RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX: string | null
/**
 * Asynchronously creates a new #IdeBuildSystem instance using the registered
 * #GIOExtensionPoint system. Each extension point will be tried asynchronously
 * by priority until one has been found that supports `project_file`.
 * 
 * If no build system could be found, then ide_build_system_new_finish() will
 * return %NULL.
 * @param context #IdeBuildSystem
 * @param project_file A #GFile containing the directory or project file.
 * @param build_system_hint A hint for the build system to use
 * @param cancellable A #GCancellable
 * @param callback A callback to execute upon completion
 */
function build_system_new_async<Z = unknown>(context: Context, project_file: Gio.File, build_system_hint: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<Z> | null): void

// Overloads of build_system_new_async

/**
 * Promisified version of {@link build_system_new_async}
 * 
 * Asynchronously creates a new #IdeBuildSystem instance using the registered
 * #GIOExtensionPoint system. Each extension point will be tried asynchronously
 * by priority until one has been found that supports `project_file`.
 * 
 * If no build system could be found, then ide_build_system_new_finish() will
 * return %NULL.
 * @param context #IdeBuildSystem
 * @param project_file A #GFile containing the directory or project file.
 * @param build_system_hint A hint for the build system to use
 * @param cancellable A #GCancellable
 * @returns A Promise of: An #IdeBuildSystem if successful; otherwise   %NULL and @error is set.
 */
function build_system_new_async<Z = unknown>(context: Context, project_file: Gio.File, build_system_hint: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise<BuildSystem>
/**
 * Complete an asynchronous call to ide_build_system_new_async().
 * @param result 
 * @returns An #IdeBuildSystem if successful; otherwise   %NULL and @error is set.
 */
function build_system_new_finish(result: Gio.AsyncResult): BuildSystem
function build_utils_color_codes_filtering(txt: string | null): string | null
function completion_provider_context_current_word(context: GtkSource.CompletionContext): string | null
function completion_provider_context_in_comment(context: GtkSource.CompletionContext): boolean
function completion_provider_context_in_comment_or_string(context: GtkSource.CompletionContext): boolean
function device_error_quark(): GLib.Quark
function diagnostic_severity_to_string(severity: DiagnosticSeverity): string | null
function doap_error_quark(): GLib.Quark
function flatpak_get_app_path(path: string | null): string | null
/**
 * This is just like g_task_return_boolean() except that it enforces
 * that the current stack return to the main context before dispatching
 * the callback.
 * @param task 
 * @param value 
 */
function g_task_return_boolean_from_main(task: Gio.Task, value: boolean): void
/**
 * Like g_task_return_error() but ensures we return to the main loop before
 * dispatching the result.
 * @param task A #GTask
 * @param error A #GError.
 */
function g_task_return_error_from_main(task: Gio.Task, error: GLib.Error): void
function g_task_return_int_from_main(task: Gio.Task, value: number): void
function g_task_return_pointer_from_main(task: Gio.Task, value: any | null, notify: GLib.DestroyNotify): void
function get_program_name(): string | null
function get_resource(): Gio.Resource
function get_system_arch(): string | null
function get_system_page_size(): number
function get_system_type(): string | null
function gettext(message: string | null): string | null
function icons_get_resource(): Gio.Resource
/**
 * This function checks to see if the application is running within
 * a flatpak. This might be useful for cases where you need to perform
 * a different command when you are in the bundled flatpak version.
 */
function is_flatpak(): boolean
function langserv_decode_completion_kind(kind: number): SymbolKind
function langserv_decode_symbol_kind(kind: number): SymbolKind
function language_format_header(language: GtkSource.Language, header: string | null): string | null
function log_get_verbosity(): number
/**
 * Increases the amount of logging that will occur. By default, only
 * warning and above will be displayed.
 * 
 * Calling this once will cause G_LOG_LEVEL_MESSAGE to be displayed.
 * Calling this twice will cause G_LOG_LEVEL_INFO to be displayed.
 * Calling this thrice will cause G_LOG_LEVEL_DEBUG to be displayed.
 * Calling this four times will cause IDE_LOG_LEVEL_TRACE to be displayed.
 * 
 * Note that many DEBUG and TRACE level log messages are only compiled into
 * debug builds, and therefore will not be available in release builds.
 * 
 * This method is meant to be called for every -v provided on the command
 * line.
 * 
 * Calling this method more than four times is acceptable.
 */
function log_increase_verbosity(): void
/**
 * Initializes the logging subsystem.
 * @param stdout_ Indicates logging should be written to stdout.
 * @param filename An optional file in which to store logs.
 */
function log_init(stdout_: boolean, filename: string | null): void
function log_set_verbosity(level: number): void
/**
 * Cleans up after the logging subsystem.
 */
function log_shutdown(): void
/**
 * This function will collapse a path that starts with the users home
 * directory into a shorthand notation using ~/ for the home directory.
 * 
 * If the path does not have the home directory as a prefix, it will
 * simply return a copy of `path`.
 * @param path 
 * @returns A new path, possibly collapsed.
 */
function path_collapse(path: string | null): string | null
/**
 * This function will expand various "shell-like" features of the provided
 * path using the POSIX wordexp(3) function. Command substitution will
 * not be enabled, but path features such as ~user will be expanded.
 * @param path 
 * @returns A newly allocated string containing the   expansion. A copy of the input string upon failure to expand.
 */
function path_expand(path: string | null): string | null
function runtime_error_quark(): GLib.Quark
function set_program_name(program_name: string | null): void
function source_style_scheme_apply_style(style_scheme: GtkSource.StyleScheme, style: string | null, tag: Gtk.TextTag): boolean
function symbol_kind_get_icon_name(kind: SymbolKind): string | null
/**
 * Runs the callback on the thread pool thread.
 * @param kind the threadpool kind to use.
 * @param func A function to call in the worker thread.
 */
function thread_pool_push(kind: ThreadPoolKind, func: ThreadFunc): void
/**
 * This pushes a task to be executed on a worker thread based on the task kind as denoted by
 * `kind`. Some tasks will be placed on special work queues or throttled based on priority.
 * @param kind The task kind.
 * @param task A #GTask to execute.
 * @param func The thread worker to execute for `task`.
 */
function thread_pool_push_task(kind: ThreadPoolKind, task: Gio.Task, func: Gio.TaskThreadFunc): void
function uri_build(scheme: string | null, userinfo: string | null, host: string | null, port: string | null, path: string | null, query: string | null, fragment: string | null): string | null
function uri_error_quark(): GLib.Quark
/**
 * Utility function for parsing "network" URIs. This extracts just the
 * scheme, host, and port from `uri_string`. All three out parameters
 * are mandatory.
 * @param uri_string a string containing a network URI
 * @param flags flags for parsing `uri_string`
 * @returns %TRUE on success, %FALSE on failure.
 */
function uri_parse_host(uri_string: string | null, flags: UriParseFlags): [ /* returnType */ boolean, /* scheme */ string | null, /* host */ string | null, /* port */ number ]
/**
 * Many URI schemes include one or more attribute/value pairs
 * as part of the URI value. This method can be used to parse them
 * into a hash table.
 * 
 * The `params` string is assumed to still be %<!-- -->-encoded, but
 * the returned values will be fully decoded. (Thus it is possible
 * that the returned values may contain '=' or `separator,` if the
 * value was encoded in the input.) Invalid %<!-- -->-encoding is
 * treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
 * (However, if `params` is the path or query string from a #IdeUri that
 * was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
 * does not contain any invalid encoding.)
 * @param params a string containing "attribute=value" parameters
 * @param length the length of `params,` or -1 if it is NUL-terminated
 * @param separator the separator character between parameters.   (usually ';', but sometimes '&')
 * @param case_insensitive whether to match parameter names case-insensitively
 * @returns a hash table of attribute/value pairs. Both names and values will be fully-decoded. If @params cannot be parsed (eg, it contains two @separator characters in a row), then %NULL is returned.
 */
function uri_parse_params(params: string | null, length: number, separator: number, case_insensitive: boolean): GLib.HashTable
/**
 * Parses `uri_string` more-or-less according to the generic grammar of
 * RFC 3986 ("more" if `strict` is %TRUE, "less" if %FALSE), and
 * outputs the pieces into the provided variables. This is a low-level
 * method that does not do any pre- or post-processing of `uri_string,`
 * and is "garbage in, garbage out"; it just splits `uri_string` into
 * pieces at the appropriate punctuation characters (consuming
 * delimiters as appropriate), and returns the pieces. Components that
 * are not present in `uri_string` will be set to %NULL (but note that
 * the path is always present, though it may be an empty string).
 * @param uri_string a string containing a relative or absolute URI
 * @param strict whether to parse `uri_string` strictly
 */
function uri_split(uri_string: string | null, strict: boolean): [ /* scheme */ string | null, /* userinfo */ string | null, /* host */ string | null, /* port */ string | null, /* path */ string | null, /* query */ string | null, /* fragment */ string | null ]
function vcs_new_async<Z = unknown>(context: Context, io_priority: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<Z> | null): void

// Overloads of vcs_new_async

/**
 * Promisified version of {@link vcs_new_async}
 * 
 * 
 * @param context 
 * @param io_priority 
 * @param cancellable 
 * @returns A Promise of: An #IdeVcs.
 */
function vcs_new_async<Z = unknown>(context: Context, io_priority: number, cancellable: Gio.Cancellable | null): globalThis.Promise<Vcs>
/**
 * Completes a call to ide_vcs_new_async().
 * @param result 
 * @returns An #IdeVcs.
 */
function vcs_new_finish(result: Gio.AsyncResult): Vcs
function vcs_register_ignored(pattern: string | null): void
function vcs_uri_is_valid(uri_string: string | null): boolean
/**
 * Gets the workbench `widget` is associated with, if any.
 * 
 * If no workbench is associated, NULL is returned.
 * @param widget 
 * @returns An #IdeWorkbench
 */
function widget_get_workbench(widget: Gtk.Widget): Workbench | null
/**
 * Calls `handler` when the #IdeContext has been set for `widget`.
 * @param widget A #GtkWidget
 * @param handler A callback to handle the context
 */
function widget_set_context_handler(widget: Gtk.Widget, handler: WidgetContextHandler): void
interface BuildLogObserver {
    (log_stream: BuildLogStream, message: string | null, message_len: number): void
}
interface ExtensionSetAdapterForeachFunc {
    (set: ExtensionSetAdapter, plugin_info: Peas.PluginInfo, extension: Peas.Extension): void
}
interface HighlightCallback {
    (begin: Gtk.TextIter, end: Gtk.TextIter, style_name: string | null): HighlightResult
}
interface RunHandler {
    (self: RunManager, runner: Runner): void
}
interface ThreadFunc {
    (): void
}
interface WidgetContextHandler {
    (widget: Gtk.Widget, context: Context): void
}
module ApplicationAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ApplicationAddin {

    // Owm methods of Ide-1.0.Ide.ApplicationAddin

    /**
     * This interface method is called when the application is started or
     * the plugin has just been activated.
     * 
     * Use this to setup code in your plugin that needs to be loaded once
     * per application process.
     * @param application An #IdeApplication.
     */
    load(application: Application): void
    /**
     * This inteface method is called when the application is shutting down
     * or the plugin has been unloaded.
     * 
     * Use this function to cleanup after anything setup in ide_application_addin_load().
     * @param application An #IdeApplication.
     */
    unload(application: Application): void

    // Own virtual methods of Ide-1.0.Ide.ApplicationAddin

    /**
     * This interface method is called when the application is started or
     * the plugin has just been activated.
     * 
     * Use this to setup code in your plugin that needs to be loaded once
     * per application process.
     * @virtual 
     * @param application An #IdeApplication.
     */
    vfunc_load(application: Application): void
    /**
     * This inteface method is called when the application is shutting down
     * or the plugin has been unloaded.
     * 
     * Use this function to cleanup after anything setup in ide_application_addin_load().
     * @virtual 
     * @param application An #IdeApplication.
     */
    vfunc_unload(application: Application): void

    // Class property signals of Ide-1.0.Ide.ApplicationAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ApplicationAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ApplicationAddin

    static name: string
    static $gtype: GObject.GType<ApplicationAddin>

    // Constructors of Ide-1.0.Ide.ApplicationAddin

    constructor(config?: ApplicationAddin.ConstructorProperties) 
    _init(config?: ApplicationAddin.ConstructorProperties): void
}

module ApplicationTool {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ApplicationTool {

    // Owm methods of Ide-1.0.Ide.ApplicationTool

    /**
     * Asynchronously runs an application tool. This is typically done on the
     * command line using the `ide` command.
     * @param arguments_ argv for the command
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to execute upon completion
     */
    run_async(arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of run_async

    /**
     * Promisified version of {@link run_async}
     * 
     * Asynchronously runs an application tool. This is typically done on the
     * command line using the `ide` command.
     * @param arguments_ argv for the command
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of the result of {@link run_async}
     */
    run_async(arguments_: string[], cancellable: Gio.Cancellable | null): globalThis.Promise<number>
    run_finish(result: Gio.AsyncResult): number

    // Own virtual methods of Ide-1.0.Ide.ApplicationTool

    /**
     * Asynchronously runs an application tool. This is typically done on the
     * command line using the `ide` command.
     * @virtual 
     * @param arguments_ argv for the command
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to execute upon completion
     */
    vfunc_run_async(arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_run_finish(result: Gio.AsyncResult): number

    // Class property signals of Ide-1.0.Ide.ApplicationTool

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ApplicationTool extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ApplicationTool

    static name: string
    static $gtype: GObject.GType<ApplicationTool>

    // Constructors of Ide-1.0.Ide.ApplicationTool

    constructor(config?: ApplicationTool.ConstructorProperties) 
    _init(config?: ApplicationTool.ConstructorProperties): void
}

module BuildPipelineAddin {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildPipelineAddin extends Object {

    // Owm methods of Ide-1.0.Ide.BuildPipelineAddin

    load(pipeline: BuildPipeline): void
    /**
     * This function will track the stage_id that was returned from
     * ide_build_pipeline_connect() or similar functions. Doing so results in
     * the stage being automatically disconnected when the addin is unloaded.
     * 
     * This means that many #IdeBuildPipelineAddin implementations do not need
     * an unload vfunc if they track all registered stages.
     * 
     * You should not mix this function with manual pipeline disconnections.
     * While it should work, that is not yet guaranteed.
     * @param stage_id a stage id returned from ide_build_pipeline_connect()
     */
    track(stage_id: number): void
    unload(pipeline: BuildPipeline): void

    // Own virtual methods of Ide-1.0.Ide.BuildPipelineAddin

    vfunc_load(pipeline: BuildPipeline): void
    vfunc_unload(pipeline: BuildPipeline): void

    // Class property signals of Ide-1.0.Ide.BuildPipelineAddin

    connect(sigName: "notify::context", callback: (($obj: BuildPipelineAddin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildPipelineAddin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildPipelineAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildPipelineAddin

    static name: string
    static $gtype: GObject.GType<BuildPipelineAddin>

    // Constructors of Ide-1.0.Ide.BuildPipelineAddin

    constructor(config?: BuildPipelineAddin.ConstructorProperties) 
    _init(config?: BuildPipelineAddin.ConstructorProperties): void
}

module BuildSystem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildSystem

        context?: Context | null
        project_file?: Gio.File | null
    }

}

interface BuildSystem extends Object {

    // Own properties of Ide-1.0.Ide.BuildSystem

    readonly context: Context
    readonly project_file: Gio.File

    // Owm methods of Ide-1.0.Ide.BuildSystem

    get_build_flags_async(file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_build_flags_async

    /**
     * Promisified version of {@link get_build_flags_async}
     * 
     * 
     * @param file 
     * @param cancellable 
     * @returns A Promise of the result of {@link get_build_flags_async}
     */
    get_build_flags_async(file: File, cancellable: Gio.Cancellable | null): globalThis.Promise<string[]>
    get_build_flags_finish(result: Gio.AsyncResult): string[]
    get_build_targets_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_build_targets_async

    /**
     * Promisified version of {@link get_build_targets_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of: An array   of #IdeBuildTarget or %NULL and @error is set.
     */
    get_build_targets_async(cancellable: Gio.Cancellable | null): globalThis.Promise<BuildTarget[]>
    get_build_targets_finish(result: Gio.AsyncResult): BuildTarget[]
    get_builddir(configuration: Configuration): string | null
    get_display_name(): string | null
    get_id(): string | null
    get_priority(): number

    // Own virtual methods of Ide-1.0.Ide.BuildSystem

    vfunc_get_build_flags_async(file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_get_build_flags_finish(result: Gio.AsyncResult): string[]
    vfunc_get_build_targets_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_get_build_targets_finish(result: Gio.AsyncResult): BuildTarget[]
    vfunc_get_builddir(configuration: Configuration): string | null
    vfunc_get_display_name(): string | null
    vfunc_get_id(): string | null
    vfunc_get_priority(): number

    // Class property signals of Ide-1.0.Ide.BuildSystem

    connect(sigName: "notify::context", callback: (($obj: BuildSystem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildSystem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::project-file", callback: (($obj: BuildSystem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::project-file", callback: (($obj: BuildSystem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildSystem extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildSystem

    static name: string
    static $gtype: GObject.GType<BuildSystem>

    // Constructors of Ide-1.0.Ide.BuildSystem

    constructor(config?: BuildSystem.ConstructorProperties) 
    _init(config?: BuildSystem.ConstructorProperties): void
    /**
     * Asynchronously creates a new #IdeBuildSystem instance using the registered
     * #GIOExtensionPoint system. Each extension point will be tried asynchronously
     * by priority until one has been found that supports `project_file`.
     * 
     * If no build system could be found, then ide_build_system_new_finish() will
     * return %NULL.
     * @param context #IdeBuildSystem
     * @param project_file A #GFile containing the directory or project file.
     * @param build_system_hint A hint for the build system to use
     * @param cancellable A #GCancellable
     * @param callback A callback to execute upon completion
     */
    static new_async(context: Context, project_file: Gio.File, build_system_hint: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<BuildSystem> | null): void
    // Has conflict: static new_finish(result: Gio.AsyncResult): BuildSystem

    // Overloads of new_finish

    static new_finish(result: Gio.AsyncResult): Object
}

module BuildSystemDiscovery {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface BuildSystemDiscovery {

    // Owm methods of Ide-1.0.Ide.BuildSystemDiscovery

    /**
     * This virtual method can be used to try to discover the build system to use for
     * a particular project. This might be used in cases like Flatpak where the build
     * system can be determined from the .json manifest rather than auto-discovery
     * by locating project files.
     * @param project_file A #GFile containing the project file (a directory)
     * @param cancellable A #GCancellable or %NULL
     * @returns The hint for the build system, which should match what   the build system returns from ide_build_system_get_id().
     */
    discover(project_file: Gio.File, cancellable: Gio.Cancellable | null): [ /* returnType */ string | null, /* priority */ number ]

    // Own virtual methods of Ide-1.0.Ide.BuildSystemDiscovery

    /**
     * This virtual method can be used to try to discover the build system to use for
     * a particular project. This might be used in cases like Flatpak where the build
     * system can be determined from the .json manifest rather than auto-discovery
     * by locating project files.
     * @virtual 
     * @param project_file A #GFile containing the project file (a directory)
     * @param cancellable A #GCancellable or %NULL
     * @returns The hint for the build system, which should match what   the build system returns from ide_build_system_get_id().
     */
    vfunc_discover(project_file: Gio.File, cancellable: Gio.Cancellable | null): [ /* returnType */ string | null, /* priority */ number ]

    // Class property signals of Ide-1.0.Ide.BuildSystemDiscovery

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildSystemDiscovery extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildSystemDiscovery

    static name: string
    static $gtype: GObject.GType<BuildSystemDiscovery>

    // Constructors of Ide-1.0.Ide.BuildSystemDiscovery

    constructor(config?: BuildSystemDiscovery.ConstructorProperties) 
    _init(config?: BuildSystemDiscovery.ConstructorProperties): void
}

module BuildTarget {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildTarget extends Object {

    // Owm methods of Ide-1.0.Ide.BuildTarget

    get_install_directory(): Gio.File | null
    get_name(): string | null

    // Own virtual methods of Ide-1.0.Ide.BuildTarget

    vfunc_get_install_directory(): Gio.File | null
    vfunc_get_name(): string | null

    // Class property signals of Ide-1.0.Ide.BuildTarget

    connect(sigName: "notify::context", callback: (($obj: BuildTarget, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildTarget, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildTarget extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildTarget

    static name: string
    static $gtype: GObject.GType<BuildTarget>

    // Constructors of Ide-1.0.Ide.BuildTarget

    constructor(config?: BuildTarget.ConstructorProperties) 
    _init(config?: BuildTarget.ConstructorProperties): void
}

module CompletionProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface CompletionProvider extends GtkSource.CompletionProvider {

    // Owm methods of Ide-1.0.Ide.CompletionProvider

    load(context: Context): void

    // Own virtual methods of Ide-1.0.Ide.CompletionProvider

    vfunc_load(context: Context): void

    // Class property signals of Ide-1.0.Ide.CompletionProvider

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class CompletionProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionProvider

    static name: string
    static $gtype: GObject.GType<CompletionProvider>

    // Constructors of Ide-1.0.Ide.CompletionProvider

    constructor(config?: CompletionProvider.ConstructorProperties) 
    _init(config?: CompletionProvider.ConstructorProperties): void
    static context_current_word(context: GtkSource.CompletionContext): string | null
    static context_in_comment(context: GtkSource.CompletionContext): boolean
    static context_in_comment_or_string(context: GtkSource.CompletionContext): boolean
}

module ConfigurationProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ConfigurationProvider {

    // Owm methods of Ide-1.0.Ide.ConfigurationProvider

    load_async(manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of load_async

    /**
     * Promisified version of {@link load_async}
     * 
     * 
     * @param manager 
     * @param cancellable 
     * @returns A Promise of the result of {@link load_async}
     */
    load_async(manager: ConfigurationManager, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    load_finish(result: Gio.AsyncResult): boolean
    save_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_async

    /**
     * Promisified version of {@link save_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link save_async}
     */
    save_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    save_finish(result: Gio.AsyncResult): boolean
    unload(manager: ConfigurationManager): void

    // Own virtual methods of Ide-1.0.Ide.ConfigurationProvider

    vfunc_load_async(manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_load_finish(result: Gio.AsyncResult): boolean
    vfunc_save_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_save_finish(result: Gio.AsyncResult): boolean
    vfunc_unload(manager: ConfigurationManager): void

    // Class property signals of Ide-1.0.Ide.ConfigurationProvider

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ConfigurationProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ConfigurationProvider

    static name: string
    static $gtype: GObject.GType<ConfigurationProvider>

    // Constructors of Ide-1.0.Ide.ConfigurationProvider

    constructor(config?: ConfigurationProvider.ConstructorProperties) 
    _init(config?: ConfigurationProvider.ConstructorProperties): void
}

module DeviceProvider {

    // Signal callback interfaces

    /**
     * Signal callback interface for `device-added`
     */
    interface DeviceAddedSignalCallback {
        ($obj: DeviceProvider, object: Device): void
    }

    /**
     * Signal callback interface for `device-removed`
     */
    interface DeviceRemovedSignalCallback {
        ($obj: DeviceProvider, object: Device): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DeviceProvider

        context?: Context | null
    }

}

interface DeviceProvider extends Object {

    // Own properties of Ide-1.0.Ide.DeviceProvider

    readonly context: Context
    readonly settled: boolean

    // Owm methods of Ide-1.0.Ide.DeviceProvider

    emit_device_added(device: Device): void
    emit_device_removed(device: Device): void
    /**
     * Retrieves a list of devices currently managed by `provider`.
     * @returns A #GPtrArray of  #IdeDevice instances.
     */
    get_devices(): Device[]
    get_settled(): boolean

    // Own virtual methods of Ide-1.0.Ide.DeviceProvider

    /**
     * Retrieves a list of devices currently managed by `provider`.
     * @virtual 
     * @returns A #GPtrArray of  #IdeDevice instances.
     */
    vfunc_get_devices(): Device[]
    vfunc_get_settled(): boolean

    // Own signals of Ide-1.0.Ide.DeviceProvider

    connect(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback): number
    connect_after(sigName: "device-added", callback: DeviceProvider.DeviceAddedSignalCallback): number
    emit(sigName: "device-added", object: Device, ...args: any[]): void
    connect(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback): number
    connect_after(sigName: "device-removed", callback: DeviceProvider.DeviceRemovedSignalCallback): number
    emit(sigName: "device-removed", object: Device, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DeviceProvider

    connect(sigName: "notify::context", callback: (($obj: DeviceProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DeviceProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::settled", callback: (($obj: DeviceProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settled", callback: (($obj: DeviceProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DeviceProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DeviceProvider

    static name: string
    static $gtype: GObject.GType<DeviceProvider>

    // Constructors of Ide-1.0.Ide.DeviceProvider

    constructor(config?: DeviceProvider.ConstructorProperties) 
    _init(config?: DeviceProvider.ConstructorProperties): void
}

module DiagnosticProvider {

    // Signal callback interfaces

    /**
     * Signal callback interface for `invalidated`
     */
    interface InvalidatedSignalCallback {
        ($obj: DiagnosticProvider): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface DiagnosticProvider extends Object {

    // Owm methods of Ide-1.0.Ide.DiagnosticProvider

    diagnose_async(file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of diagnose_async

    /**
     * Promisified version of {@link diagnose_async}
     * 
     * 
     * @param file 
     * @param buffer 
     * @param cancellable 
     * @returns A Promise of: #IdeDiagnostics or %NULL and @error is set.
     */
    diagnose_async(file: File, buffer: Buffer, cancellable: Gio.Cancellable | null): globalThis.Promise<Diagnostics | null>
    /**
     * Completes an asynchronous call to ide_diagnostic_provider_diagnose_async().
     * @param result 
     * @returns #IdeDiagnostics or %NULL and @error is set.
     */
    diagnose_finish(result: Gio.AsyncResult): Diagnostics | null
    emit_invalidated(): void
    load(): void

    // Own virtual methods of Ide-1.0.Ide.DiagnosticProvider

    vfunc_diagnose_async(file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes an asynchronous call to ide_diagnostic_provider_diagnose_async().
     * @virtual 
     * @param result 
     * @returns #IdeDiagnostics or %NULL and @error is set.
     */
    vfunc_diagnose_finish(result: Gio.AsyncResult): Diagnostics | null
    vfunc_load(): void

    // Own signals of Ide-1.0.Ide.DiagnosticProvider

    connect(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback): number
    connect_after(sigName: "invalidated", callback: DiagnosticProvider.InvalidatedSignalCallback): number
    emit(sigName: "invalidated", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DiagnosticProvider

    connect(sigName: "notify::context", callback: (($obj: DiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DiagnosticProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DiagnosticProvider

    static name: string
    static $gtype: GObject.GType<DiagnosticProvider>

    // Constructors of Ide-1.0.Ide.DiagnosticProvider

    constructor(config?: DiagnosticProvider.ConstructorProperties) 
    _init(config?: DiagnosticProvider.ConstructorProperties): void
}

module EditorViewAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface EditorViewAddin {

    // Own virtual methods of Ide-1.0.Ide.EditorViewAddin

    vfunc_language_changed(language_id: string | null): void
    vfunc_load(view: EditorView): void
    vfunc_load_source_view(source_view: SourceView): void
    vfunc_unload(view: EditorView): void
    vfunc_unload_source_view(source_view: SourceView): void

    // Class property signals of Ide-1.0.Ide.EditorViewAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class EditorViewAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.EditorViewAddin

    static name: string
    static $gtype: GObject.GType<EditorViewAddin>

    // Constructors of Ide-1.0.Ide.EditorViewAddin

    constructor(config?: EditorViewAddin.ConstructorProperties) 
    _init(config?: EditorViewAddin.ConstructorProperties): void
}

module Formatter {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Formatter {

    // Owm methods of Ide-1.0.Ide.Formatter

    format_async(buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of format_async

    /**
     * Promisified version of {@link format_async}
     * 
     * 
     * @param buffer 
     * @param options 
     * @param cancellable 
     * @returns A Promise of the result of {@link format_async}
     */
    format_async(buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    format_finish(result: Gio.AsyncResult): boolean
    format_range_async(buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of format_range_async

    /**
     * Promisified version of {@link format_range_async}
     * 
     * 
     * @param buffer 
     * @param options 
     * @param begin 
     * @param end 
     * @param cancellable 
     * @returns A Promise of the result of {@link format_range_async}
     */
    format_range_async(buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    format_range_finish(result: Gio.AsyncResult): boolean
    load(): void

    // Own virtual methods of Ide-1.0.Ide.Formatter

    vfunc_format_async(buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_format_finish(result: Gio.AsyncResult): boolean
    vfunc_format_range_async(buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_format_range_finish(result: Gio.AsyncResult): boolean
    vfunc_load(): void

    // Class property signals of Ide-1.0.Ide.Formatter

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Formatter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Formatter

    static name: string
    static $gtype: GObject.GType<Formatter>

    // Constructors of Ide-1.0.Ide.Formatter

    constructor(config?: Formatter.ConstructorProperties) 
    _init(config?: Formatter.ConstructorProperties): void
}

module GenesisAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface GenesisAddin {

    // Own properties of Ide-1.0.Ide.GenesisAddin

    readonly is_ready: boolean

    // Owm methods of Ide-1.0.Ide.GenesisAddin

    get_icon_name(): string | null
    get_label(): string | null
    get_next_label(): string | null
    get_priority(): number
    get_title(): string | null
    get_widget(): Gtk.Widget
    run_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of run_async

    /**
     * Promisified version of {@link run_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link run_async}
     */
    run_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    run_finish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.GenesisAddin

    vfunc_get_icon_name(): string | null
    vfunc_get_label(): string | null
    vfunc_get_next_label(): string | null
    vfunc_get_priority(): number
    vfunc_get_title(): string | null
    vfunc_get_widget(): Gtk.Widget
    vfunc_run_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_run_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.GenesisAddin

    connect(sigName: "notify::is-ready", callback: (($obj: GenesisAddin, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-ready", callback: (($obj: GenesisAddin, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-ready", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class GenesisAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.GenesisAddin

    static name: string
    static $gtype: GObject.GType<GenesisAddin>

    // Constructors of Ide-1.0.Ide.GenesisAddin

    constructor(config?: GenesisAddin.ConstructorProperties) 
    _init(config?: GenesisAddin.ConstructorProperties): void
}

module Highlighter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Highlighter

        context?: Context | null
    }

}

interface Highlighter extends Object {

    // Own properties of Ide-1.0.Ide.Highlighter

    readonly context: Context

    // Owm methods of Ide-1.0.Ide.Highlighter

    load(): void
    /**
     * Incrementally processes more of the buffer for highlighting.  If `callback`
     * returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
     * return, having set `location` to the current position of processing.
     * 
     * If processing the entire range was successful, then `location` should be set
     * to `range_end`.
     * @param callback A callback to apply a given style.
     * @param range_begin The beginning of the range to update.
     * @param range_end The end of the range to update.
     */
    update(callback: HighlightCallback, range_begin: Gtk.TextIter, range_end: Gtk.TextIter): /* location */ Gtk.TextIter

    // Own virtual methods of Ide-1.0.Ide.Highlighter

    vfunc_load(): void
    vfunc_set_engine(engine: HighlightEngine): void
    /**
     * Incrementally processes more of the buffer for highlighting.  If `callback`
     * returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
     * return, having set `location` to the current position of processing.
     * 
     * If processing the entire range was successful, then `location` should be set
     * to `range_end`.
     * @virtual 
     * @param callback A callback to apply a given style.
     * @param range_begin The beginning of the range to update.
     * @param range_end The end of the range to update.
     */
    vfunc_update(callback: HighlightCallback, range_begin: Gtk.TextIter, range_end: Gtk.TextIter): /* location */ Gtk.TextIter

    // Class property signals of Ide-1.0.Ide.Highlighter

    connect(sigName: "notify::context", callback: (($obj: Highlighter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Highlighter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Highlighter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Highlighter

    static name: string
    static $gtype: GObject.GType<Highlighter>

    // Constructors of Ide-1.0.Ide.Highlighter

    constructor(config?: Highlighter.ConstructorProperties) 
    _init(config?: Highlighter.ConstructorProperties): void
}

module Indenter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Indenter extends Object {

    // Owm methods of Ide-1.0.Ide.Indenter

    /**
     * This function performs an indentation for the key press activated by `event`.
     * The implementation is free to move the `begin` and `end` iters to swallow
     * adjacent content. The result, a string, is the contents that will replace
     * the content inbetween `begin` and `end`.
     * 
     * `cursor_offset` may be set to jump the cursor starting from `end`. Negative
     * values are allowed.
     * @param text_view A #GtkTextView
     * @param begin A #GtkTextIter for the beginning region of text to replace.
     * @param end A #GtkTextIter for the end region of text to replace.
     * @param event The #GdkEventKey that triggered the event.
     * @returns A string containing the replacement text, or %NULL.
     */
    format(text_view: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey): [ /* returnType */ string | null, /* cursor_offset */ number ]
    /**
     * Determines if `event` should trigger an indentation request. If %TRUE is
     * returned then ide_indenter_format() will be called.
     * @param event a #GdkEventKey
     * @returns %TRUE if @event should trigger an indentation request.
     */
    is_trigger(event: Gdk.EventKey): boolean

    // Own virtual methods of Ide-1.0.Ide.Indenter

    /**
     * This function performs an indentation for the key press activated by `event`.
     * The implementation is free to move the `begin` and `end` iters to swallow
     * adjacent content. The result, a string, is the contents that will replace
     * the content inbetween `begin` and `end`.
     * 
     * `cursor_offset` may be set to jump the cursor starting from `end`. Negative
     * values are allowed.
     * @virtual 
     * @param text_view A #GtkTextView
     * @param begin A #GtkTextIter for the beginning region of text to replace.
     * @param end A #GtkTextIter for the end region of text to replace.
     * @param event The #GdkEventKey that triggered the event.
     * @returns A string containing the replacement text, or %NULL.
     */
    vfunc_format(text_view: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey): [ /* returnType */ string | null, /* cursor_offset */ number ]
    /**
     * Determines if `event` should trigger an indentation request. If %TRUE is
     * returned then ide_indenter_format() will be called.
     * @virtual 
     * @param event a #GdkEventKey
     * @returns %TRUE if @event should trigger an indentation request.
     */
    vfunc_is_trigger(event: Gdk.EventKey): boolean

    // Class property signals of Ide-1.0.Ide.Indenter

    connect(sigName: "notify::context", callback: (($obj: Indenter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Indenter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Indenter extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Indenter

    static name: string
    static $gtype: GObject.GType<Indenter>

    // Constructors of Ide-1.0.Ide.Indenter

    constructor(config?: Indenter.ConstructorProperties) 
    _init(config?: Indenter.ConstructorProperties): void
}

module LayoutStackAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface LayoutStackAddin {

    // Owm methods of Ide-1.0.Ide.LayoutStackAddin

    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should load itself.
     * A new instance of the plugin is created for every #IdeLayoutStack
     * that is created in Builder.
     * @param stack An #IdeLayoutStack
     */
    load(stack: LayoutStack): void
    /**
     * This virtual method is called whenever the active view changes
     * in the #IdeLayoutView. Plugins may want to alter what controls
     * are displayed on the stack based on the current view.
     * @param view An #IdeLayoutView or %NULL.
     */
    set_view(view: LayoutView | null): void
    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should unload itself.
     * It should revert anything performed via ide_layout_stack_addin_load().
     * @param stack An #IdeLayoutStack
     */
    unload(stack: LayoutStack): void

    // Own virtual methods of Ide-1.0.Ide.LayoutStackAddin

    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should load itself.
     * A new instance of the plugin is created for every #IdeLayoutStack
     * that is created in Builder.
     * @virtual 
     * @param stack An #IdeLayoutStack
     */
    vfunc_load(stack: LayoutStack): void
    /**
     * This virtual method is called whenever the active view changes
     * in the #IdeLayoutView. Plugins may want to alter what controls
     * are displayed on the stack based on the current view.
     * @virtual 
     * @param view An #IdeLayoutView or %NULL.
     */
    vfunc_set_view(view: LayoutView | null): void
    /**
     * This function should be implemented by #IdeLayoutStackAddin plugins
     * in #IdeLayoutStackAddinInterface.
     * 
     * This virtual method is called when the plugin should unload itself.
     * It should revert anything performed via ide_layout_stack_addin_load().
     * @virtual 
     * @param stack An #IdeLayoutStack
     */
    vfunc_unload(stack: LayoutStack): void

    // Class property signals of Ide-1.0.Ide.LayoutStackAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LayoutStackAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.LayoutStackAddin

    static name: string
    static $gtype: GObject.GType<LayoutStackAddin>

    // Constructors of Ide-1.0.Ide.LayoutStackAddin

    constructor(config?: LayoutStackAddin.ConstructorProperties) 
    _init(config?: LayoutStackAddin.ConstructorProperties): void
}

module Perspective {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Perspective {

    // Owm methods of Ide-1.0.Ide.Perspective

    /**
     * This interface method is called when the workbench would like to shutdown.
     * If the perspective needs to focus and ask the user a question, this is the place
     * to do so. You may run a #GtkDialog using gtk_dialog_run() or simply focus your
     * perspective and return %FALSE.
     * @returns %TRUE to allow the workbench to continue shutting down.
     */
    agree_to_shutdown(): boolean
    /**
     * Gets the accelerator to use to jump to the perspective. The workbench will
     * register this accelerator on behalf of the perspective.
     * @returns A newly allocated string or %NULL.
     */
    get_accelerator(): string | null
    /**
     * This interface method should retrieve a #GActionGroup associated with the
     * perspective, if necessary. The #GActionGroup will automatically be
     * registered with the "perspective" action prefix while the perspective is
     * active. A perspective is "active" when it is currently displayed in the
     * workbench.
     * @returns A #GActionGroup or %NULL.
     */
    get_actions(): Gio.ActionGroup | null
    /**
     * This interface methods retrieves the icon name to use when displaying the
     * perspective selection sidebar.
     * 
     * If you implement an "icon-name" property, the icon may change at runtime.
     * @returns A newly allcoated string that contains the icon-name   to use for the perspective.
     */
    get_icon_name(): string | null
    /**
     * This interface method is used to identify the perspective. It should be a short
     * internal name, such as "editor" which should not be translated. Internally, the
     * default implementation of this method will return the name of the instances #GType.
     * 
     * The identifier must be alpha-numeric only (a-z A-Z 0-9).
     * 
     * This value should be unique per workspace.
     * @returns A string identifier for the perspective.
     */
    get_id(): string | null
    /**
     * This interface method returns %TRUE if the interface needs attention.
     * 
     * One such use of this would be to indicate that contents within a perspective have
     * changed since the user last focused the perspective. This should also be implemented
     * with a boolean property named "needs-attention". If you call g_object_notify() (or one
     * of its variants), the notifcation visual will be rendered with your icon.
     * @returns %TRUE if the perspective needs attention.
     */
    get_needs_attention(): boolean
    get_priority(): number
    /**
     * This interface method gets the title of the perspective. This is used for tooltips
     * in the perspective selector and potentially other UI components.
     * @returns A string which will not be modified or freed.
     */
    get_title(): string | null
    /**
     * This interface method should return a #GtkWidget suitable for being embedded as the
     * titlebar for the application. If you return %NULL from this method, a suitable titlebar
     * will be created for you.
     * 
     * You may use #IdeHeaderBar for a base implementation to save you the trouble of
     * creating a titlebar similar to other perspectives in Builder.
     * @returns A #GtkWidget or %NULL.
     */
    get_titlebar(): Gtk.Widget | null
    /**
     * If %TRUE, the perspective can be used before loading a project.
     */
    is_early(): boolean
    /**
     * This interface method is used to notify the perspective that it is going into
     * fullscreen mode. The #IdeWorkbench will notify the perspective before it is displayed.
     * @param fullscreen If fullscreen mode should be activated.
     */
    set_fullscreen(fullscreen: boolean): void
    /**
     * This interface method is used to iterate all #IdeLayoutView's that are descendents of `self`.
     * @param callback A #GtkCallback.
     */
    views_foreach(callback: Gtk.Callback): void

    // Own virtual methods of Ide-1.0.Ide.Perspective

    /**
     * This interface method is called when the workbench would like to shutdown.
     * If the perspective needs to focus and ask the user a question, this is the place
     * to do so. You may run a #GtkDialog using gtk_dialog_run() or simply focus your
     * perspective and return %FALSE.
     * @virtual 
     * @returns %TRUE to allow the workbench to continue shutting down.
     */
    vfunc_agree_to_shutdown(): boolean
    /**
     * Gets the accelerator to use to jump to the perspective. The workbench will
     * register this accelerator on behalf of the perspective.
     * @virtual 
     * @returns A newly allocated string or %NULL.
     */
    vfunc_get_accelerator(): string | null
    /**
     * This interface method should retrieve a #GActionGroup associated with the
     * perspective, if necessary. The #GActionGroup will automatically be
     * registered with the "perspective" action prefix while the perspective is
     * active. A perspective is "active" when it is currently displayed in the
     * workbench.
     * @virtual 
     * @returns A #GActionGroup or %NULL.
     */
    vfunc_get_actions(): Gio.ActionGroup | null
    /**
     * This interface methods retrieves the icon name to use when displaying the
     * perspective selection sidebar.
     * 
     * If you implement an "icon-name" property, the icon may change at runtime.
     * @virtual 
     * @returns A newly allcoated string that contains the icon-name   to use for the perspective.
     */
    vfunc_get_icon_name(): string | null
    /**
     * This interface method is used to identify the perspective. It should be a short
     * internal name, such as "editor" which should not be translated. Internally, the
     * default implementation of this method will return the name of the instances #GType.
     * 
     * The identifier must be alpha-numeric only (a-z A-Z 0-9).
     * 
     * This value should be unique per workspace.
     * @virtual 
     * @returns A string identifier for the perspective.
     */
    vfunc_get_id(): string | null
    /**
     * This interface method returns %TRUE if the interface needs attention.
     * 
     * One such use of this would be to indicate that contents within a perspective have
     * changed since the user last focused the perspective. This should also be implemented
     * with a boolean property named "needs-attention". If you call g_object_notify() (or one
     * of its variants), the notifcation visual will be rendered with your icon.
     * @virtual 
     * @returns %TRUE if the perspective needs attention.
     */
    vfunc_get_needs_attention(): boolean
    vfunc_get_priority(): number
    /**
     * This interface method gets the title of the perspective. This is used for tooltips
     * in the perspective selector and potentially other UI components.
     * @virtual 
     * @returns A string which will not be modified or freed.
     */
    vfunc_get_title(): string | null
    /**
     * This interface method should return a #GtkWidget suitable for being embedded as the
     * titlebar for the application. If you return %NULL from this method, a suitable titlebar
     * will be created for you.
     * 
     * You may use #IdeHeaderBar for a base implementation to save you the trouble of
     * creating a titlebar similar to other perspectives in Builder.
     * @virtual 
     * @returns A #GtkWidget or %NULL.
     */
    vfunc_get_titlebar(): Gtk.Widget | null
    /**
     * If %TRUE, the perspective can be used before loading a project.
     * @virtual 
     */
    vfunc_is_early(): boolean
    /**
     * This interface method is used to notify the perspective that it is going into
     * fullscreen mode. The #IdeWorkbench will notify the perspective before it is displayed.
     * @virtual 
     * @param fullscreen If fullscreen mode should be activated.
     */
    vfunc_set_fullscreen(fullscreen: boolean): void
    /**
     * This interface method is used to iterate all #IdeLayoutView's that are descendents of `self`.
     * @virtual 
     * @param callback A #GtkCallback.
     */
    vfunc_views_foreach(callback: Gtk.Callback): void

    // Class property signals of Ide-1.0.Ide.Perspective

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Perspective extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Perspective

    static name: string
    static $gtype: GObject.GType<Perspective>

    // Constructors of Ide-1.0.Ide.Perspective

    constructor(config?: Perspective.ConstructorProperties) 
    _init(config?: Perspective.ConstructorProperties): void
}

module PreferencesAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface PreferencesAddin {

    // Owm methods of Ide-1.0.Ide.PreferencesAddin

    /**
     * This interface method is called when a preferences addin is initialized. It could be
     * initialized from multiple preferences implementations, so consumers should use the
     * #DzlPreferences interface to add their preferences controls to the container.
     * 
     * Such implementations might include a preferences dialog window, or a preferences
     * widget which could be rendered as a perspective.
     * @param preferences The preferences container implementation.
     */
    load(preferences: Dazzle.Preferences): void
    /**
     * This interface method is called when the preferences addin should remove all controls
     * added to `preferences`. This could happen during desctruction of `preferences,` or when
     * the plugin is unloaded.
     * @param preferences The preferences container implementation.
     */
    unload(preferences: Dazzle.Preferences): void

    // Own virtual methods of Ide-1.0.Ide.PreferencesAddin

    /**
     * This interface method is called when a preferences addin is initialized. It could be
     * initialized from multiple preferences implementations, so consumers should use the
     * #DzlPreferences interface to add their preferences controls to the container.
     * 
     * Such implementations might include a preferences dialog window, or a preferences
     * widget which could be rendered as a perspective.
     * @virtual 
     * @param preferences The preferences container implementation.
     */
    vfunc_load(preferences: Dazzle.Preferences): void
    /**
     * This interface method is called when the preferences addin should remove all controls
     * added to `preferences`. This could happen during desctruction of `preferences,` or when
     * the plugin is unloaded.
     * @virtual 
     * @param preferences The preferences container implementation.
     */
    vfunc_unload(preferences: Dazzle.Preferences): void

    // Class property signals of Ide-1.0.Ide.PreferencesAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class PreferencesAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.PreferencesAddin

    static name: string
    static $gtype: GObject.GType<PreferencesAddin>

    // Constructors of Ide-1.0.Ide.PreferencesAddin

    constructor(config?: PreferencesAddin.ConstructorProperties) 
    _init(config?: PreferencesAddin.ConstructorProperties): void
}

module ProjectMiner {

    // Signal callback interfaces

    /**
     * Signal callback interface for `discovered`
     */
    interface DiscoveredSignalCallback {
        ($obj: ProjectMiner, project_info: ProjectInfo): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ProjectMiner {

    // Owm methods of Ide-1.0.Ide.ProjectMiner

    emit_discovered(project_info: ProjectInfo): void
    mine_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of mine_async

    /**
     * Promisified version of {@link mine_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link mine_async}
     */
    mine_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    mine_finish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.ProjectMiner

    vfunc_discovered(project_info: ProjectInfo): void
    vfunc_mine_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_mine_finish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.ProjectMiner

    connect(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback): number
    connect_after(sigName: "discovered", callback: ProjectMiner.DiscoveredSignalCallback): number
    emit(sigName: "discovered", project_info: ProjectInfo, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ProjectMiner

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectMiner extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectMiner

    static name: string
    static $gtype: GObject.GType<ProjectMiner>

    // Constructors of Ide-1.0.Ide.ProjectMiner

    constructor(config?: ProjectMiner.ConstructorProperties) 
    _init(config?: ProjectMiner.ConstructorProperties): void
}

module ProjectTemplate {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface ProjectTemplate {

    // Owm methods of Ide-1.0.Ide.ProjectTemplate

    /**
     * Asynchronously requests expansion of the template.
     * 
     * This may involve creating files and directories on disk as well as
     * expanding files based on the contents of `params`.
     * 
     * It is expected that this method is only called once on an #IdeProjectTemplate.
     * @param params A hashtable of template parameters.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback the callback for the asynchronous operation.
     */
    expand_async(params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of expand_async

    /**
     * Promisified version of {@link expand_async}
     * 
     * Asynchronously requests expansion of the template.
     * 
     * This may involve creating files and directories on disk as well as
     * expanding files based on the contents of `params`.
     * 
     * It is expected that this method is only called once on an #IdeProjectTemplate.
     * @param params A hashtable of template parameters.
     * @param cancellable A #GCancellable or %NULL.
     * @returns A Promise of the result of {@link expand_async}
     */
    expand_async(params: GLib.HashTable, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    expand_finish(result: Gio.AsyncResult): boolean
    get_description(): string | null
    get_icon_name(): string | null
    get_id(): string | null
    /**
     * Gets the list of languages that this template can support when generating
     * the project.
     * @returns A newly allocated, NULL terminated list of   supported languages.
     */
    get_languages(): string[]
    get_name(): string | null
    /**
     * Get's the configuration widget for the template if there is one.
     * @returns A #GtkWidget.
     */
    get_widget(): Gtk.Widget

    // Own virtual methods of Ide-1.0.Ide.ProjectTemplate

    /**
     * Asynchronously requests expansion of the template.
     * 
     * This may involve creating files and directories on disk as well as
     * expanding files based on the contents of `params`.
     * 
     * It is expected that this method is only called once on an #IdeProjectTemplate.
     * @virtual 
     * @param params A hashtable of template parameters.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback the callback for the asynchronous operation.
     */
    vfunc_expand_async(params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_expand_finish(result: Gio.AsyncResult): boolean
    vfunc_get_description(): string | null
    vfunc_get_icon_name(): string | null
    vfunc_get_id(): string | null
    /**
     * Gets the list of languages that this template can support when generating
     * the project.
     * @virtual 
     * @returns A newly allocated, NULL terminated list of   supported languages.
     */
    vfunc_get_languages(): string[]
    vfunc_get_name(): string | null
    /**
     * Get's the configuration widget for the template if there is one.
     * @virtual 
     * @returns A #GtkWidget.
     */
    vfunc_get_widget(): Gtk.Widget

    // Class property signals of Ide-1.0.Ide.ProjectTemplate

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectTemplate extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectTemplate

    static name: string
    static $gtype: GObject.GType<ProjectTemplate>

    // Constructors of Ide-1.0.Ide.ProjectTemplate

    constructor(config?: ProjectTemplate.ConstructorProperties) 
    _init(config?: ProjectTemplate.ConstructorProperties): void
}

module RenameProvider {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.RenameProvider

        buffer?: Buffer | null
    }

}

interface RenameProvider extends Object {

    // Own properties of Ide-1.0.Ide.RenameProvider

    buffer: Buffer

    // Owm methods of Ide-1.0.Ide.RenameProvider

    load(): void
    /**
     * This requests the provider to determine the edits that must be made to the
     * project to perform the renaming of a symbol found at `location`.
     * 
     * Use ide_rename_provider_rename_finish() to get the results.
     * @param location An #IdeSourceLocation
     * @param new_name The replacement name for the symbol
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to complete the request
     */
    rename_async(location: SourceLocation, new_name: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of rename_async

    /**
     * Promisified version of {@link rename_async}
     * 
     * This requests the provider to determine the edits that must be made to the
     * project to perform the renaming of a symbol found at `location`.
     * 
     * Use ide_rename_provider_rename_finish() to get the results.
     * @param location An #IdeSourceLocation
     * @param new_name The replacement name for the symbol
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of: %TRUE if successful and @edits is set. Otherwise %FALSE and @error is set.
     */
    rename_async(location: SourceLocation, new_name: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise</* edits */ ProjectEdit[] | null>
    /**
     * Completes a request to ide_rename_provider_rename_async().
     * 
     * You can use the resulting #GPtrArray of #IdeProjectEdit instances to edit the project
     * to complete the symbol rename.
     * @param result A #GAsyncResult
     * @returns %TRUE if successful and @edits is set. Otherwise %FALSE and @error is set.
     */
    rename_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]

    // Own virtual methods of Ide-1.0.Ide.RenameProvider

    vfunc_load(): void
    /**
     * This requests the provider to determine the edits that must be made to the
     * project to perform the renaming of a symbol found at `location`.
     * 
     * Use ide_rename_provider_rename_finish() to get the results.
     * @virtual 
     * @param location An #IdeSourceLocation
     * @param new_name The replacement name for the symbol
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to complete the request
     */
    vfunc_rename_async(location: SourceLocation, new_name: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes a request to ide_rename_provider_rename_async().
     * 
     * You can use the resulting #GPtrArray of #IdeProjectEdit instances to edit the project
     * to complete the symbol rename.
     * @virtual 
     * @param result A #GAsyncResult
     * @returns %TRUE if successful and @edits is set. Otherwise %FALSE and @error is set.
     */
    vfunc_rename_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]

    // Class property signals of Ide-1.0.Ide.RenameProvider

    connect(sigName: "notify::buffer", callback: (($obj: RenameProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: RenameProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: RenameProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: RenameProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RenameProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RenameProvider

    static name: string
    static $gtype: GObject.GType<RenameProvider>

    // Constructors of Ide-1.0.Ide.RenameProvider

    constructor(config?: RenameProvider.ConstructorProperties) 
    _init(config?: RenameProvider.ConstructorProperties): void
}

module RunnerAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface RunnerAddin {

    // Owm methods of Ide-1.0.Ide.RunnerAddin

    load(runner: Runner): void
    posthook_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of posthook_async

    /**
     * Promisified version of {@link posthook_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link posthook_async}
     */
    posthook_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    posthook_finish(result: Gio.AsyncResult): boolean
    prehook_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of prehook_async

    /**
     * Promisified version of {@link prehook_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link prehook_async}
     */
    prehook_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    prehook_finish(result: Gio.AsyncResult): boolean
    unload(runner: Runner): void

    // Own virtual methods of Ide-1.0.Ide.RunnerAddin

    vfunc_load(runner: Runner): void
    vfunc_posthook_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_posthook_finish(result: Gio.AsyncResult): boolean
    vfunc_prehook_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_prehook_finish(result: Gio.AsyncResult): boolean
    vfunc_unload(runner: Runner): void

    // Class property signals of Ide-1.0.Ide.RunnerAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RunnerAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RunnerAddin

    static name: string
    static $gtype: GObject.GType<RunnerAddin>

    // Constructors of Ide-1.0.Ide.RunnerAddin

    constructor(config?: RunnerAddin.ConstructorProperties) 
    _init(config?: RunnerAddin.ConstructorProperties): void
}

module RuntimeProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface RuntimeProvider {

    // Owm methods of Ide-1.0.Ide.RuntimeProvider

    can_install(runtime_id: string | null): boolean
    install_async(runtime_id: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of install_async

    /**
     * Promisified version of {@link install_async}
     * 
     * 
     * @param runtime_id 
     * @param cancellable 
     * @returns A Promise of the result of {@link install_async}
     */
    install_async(runtime_id: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    install_finish(result: Gio.AsyncResult): boolean
    load(manager: RuntimeManager): void
    unload(manager: RuntimeManager): void

    // Own virtual methods of Ide-1.0.Ide.RuntimeProvider

    vfunc_can_install(runtime_id: string | null): boolean
    vfunc_install_async(runtime_id: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_install_finish(result: Gio.AsyncResult): boolean
    vfunc_load(manager: RuntimeManager): void
    vfunc_unload(manager: RuntimeManager): void

    // Class property signals of Ide-1.0.Ide.RuntimeProvider

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RuntimeProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RuntimeProvider

    static name: string
    static $gtype: GObject.GType<RuntimeProvider>

    // Constructors of Ide-1.0.Ide.RuntimeProvider

    constructor(config?: RuntimeProvider.ConstructorProperties) 
    _init(config?: RuntimeProvider.ConstructorProperties): void
}

module SearchProvider {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SearchProvider extends Object {

    // Owm methods of Ide-1.0.Ide.SearchProvider

    activate(row: Gtk.Widget, result: SearchResult): void
    /**
     * Create a row to display the search result.
     * @param result A #IdeSearchResult.
     * @returns A #GtkWidget.
     */
    create_row(result: SearchResult): Gtk.Widget
    get_prefix(): string
    get_priority(): number
    get_verb(): string | null
    populate(context: SearchContext, search_terms: string | null, max_results: number, cancellable: Gio.Cancellable | null): void

    // Own virtual methods of Ide-1.0.Ide.SearchProvider

    vfunc_activate(row: Gtk.Widget, result: SearchResult): void
    /**
     * Create a row to display the search result.
     * @virtual 
     * @param result A #IdeSearchResult.
     * @returns A #GtkWidget.
     */
    vfunc_create_row(result: SearchResult): Gtk.Widget
    vfunc_get_prefix(): string
    vfunc_get_priority(): number
    vfunc_get_verb(): string | null
    vfunc_populate(context: SearchContext, search_terms: string | null, max_results: number, cancellable: Gio.Cancellable | null): void

    // Class property signals of Ide-1.0.Ide.SearchProvider

    connect(sigName: "notify::context", callback: (($obj: SearchProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SearchProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SearchProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SearchProvider

    static name: string
    static $gtype: GObject.GType<SearchProvider>

    // Constructors of Ide-1.0.Ide.SearchProvider

    constructor(config?: SearchProvider.ConstructorProperties) 
    _init(config?: SearchProvider.ConstructorProperties): void
}

module Service {

    // Signal callback interfaces

    /**
     * Signal callback interface for `context-loaded`
     */
    interface ContextLoadedSignalCallback {
        ($obj: Service): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Service extends Object {

    // Owm methods of Ide-1.0.Ide.Service

    get_name(): string | null
    start(): void
    stop(): void

    // Own virtual methods of Ide-1.0.Ide.Service

    vfunc_context_loaded(): void
    vfunc_get_name(): string | null
    vfunc_start(): void
    vfunc_stop(): void

    // Own signals of Ide-1.0.Ide.Service

    connect(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback): number
    connect_after(sigName: "context-loaded", callback: Service.ContextLoadedSignalCallback): number
    emit(sigName: "context-loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Service

    connect(sigName: "notify::context", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Service, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Service extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Service

    static name: string
    static $gtype: GObject.GType<Service>

    // Constructors of Ide-1.0.Ide.Service

    constructor(config?: Service.ConstructorProperties) 
    _init(config?: Service.ConstructorProperties): void
}

module Subprocess {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Subprocess {

    // Owm methods of Ide-1.0.Ide.Subprocess

    check_exit_status(): boolean
    communicate(stdin_buf: GLib.Bytes, cancellable: Gio.Cancellable | null, stdout_buf: GLib.Bytes, stderr_buf: GLib.Bytes): boolean
    /**
     * Asynchronously communicates with the the child process.
     * 
     * There is no need to call ide_subprocess_wait() on the process if using
     * this asynchronous operation as it will internally wait for the child
     * to exit or be signaled.
     * 
     * Ensure you've set the proper flags to ensure that you can write to stdin
     * or read from stderr/stdout as necessary.
     * @param stdin_buf A #GBytes to send to stdin or %NULL
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to complete the request
     */
    communicate_async(stdin_buf: GLib.Bytes | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of communicate_async

    /**
     * Promisified version of {@link communicate_async}
     * 
     * Asynchronously communicates with the the child process.
     * 
     * There is no need to call ide_subprocess_wait() on the process if using
     * this asynchronous operation as it will internally wait for the child
     * to exit or be signaled.
     * 
     * Ensure you've set the proper flags to ensure that you can write to stdin
     * or read from stderr/stdout as necessary.
     * @param stdin_buf A #GBytes to send to stdin or %NULL
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of: %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicate_async(stdin_buf: GLib.Bytes | null, cancellable: Gio.Cancellable | null): globalThis.Promise<[ /* stdout_buf */ GLib.Bytes, /* stderr_buf */ GLib.Bytes ]>
    /**
     * Finishes a request to ide_subprocess_communicate_async().
     * @param result A #GAsyncResult
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicate_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdout_buf */ GLib.Bytes, /* stderr_buf */ GLib.Bytes ]
    /**
     * This process acts identical to g_subprocess_communicate_utf8().
     * @param stdin_buf input to deliver to the subprocesses stdin stream
     * @param cancellable an optional #GCancellable
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicate_utf8(stdin_buf: string | null, cancellable: Gio.Cancellable | null): [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
    communicate_utf8_async(stdin_buf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of communicate_utf8_async

    /**
     * Promisified version of {@link communicate_utf8_async}
     * 
     * 
     * @param stdin_buf The data to send to stdin or %NULL
     * @param cancellable 
     * @returns A Promise of: %TRUE if successful; otherwise %FALSE and @error is set.
     */
    communicate_utf8_async(stdin_buf: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise<[ /* stdout_buf */ string | null, /* stderr_buf */ string | null ]>
    communicate_utf8_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
    force_exit(): void
    get_exit_status(): number
    get_identifier(): string | null
    get_if_exited(): boolean
    get_if_signaled(): boolean
    get_status(): number
    get_stderr_pipe(): Gio.InputStream
    get_stdin_pipe(): Gio.OutputStream
    get_stdout_pipe(): Gio.InputStream
    get_successful(): boolean
    get_term_sig(): number
    send_signal(signal_num: number): void
    wait(cancellable: Gio.Cancellable | null): boolean
    wait_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of wait_async

    /**
     * Promisified version of {@link wait_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link wait_async}
     */
    wait_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    wait_check(cancellable: Gio.Cancellable | null): boolean
    wait_check_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of wait_check_async

    /**
     * Promisified version of {@link wait_check_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link wait_check_async}
     */
    wait_check_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    wait_check_finish(result: Gio.AsyncResult): boolean
    wait_finish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.Subprocess

    vfunc_communicate(stdin_buf: GLib.Bytes, cancellable: Gio.Cancellable | null, stdout_buf: GLib.Bytes, stderr_buf: GLib.Bytes): boolean
    /**
     * Asynchronously communicates with the the child process.
     * 
     * There is no need to call ide_subprocess_wait() on the process if using
     * this asynchronous operation as it will internally wait for the child
     * to exit or be signaled.
     * 
     * Ensure you've set the proper flags to ensure that you can write to stdin
     * or read from stderr/stdout as necessary.
     * @virtual 
     * @param stdin_buf A #GBytes to send to stdin or %NULL
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to complete the request
     */
    vfunc_communicate_async(stdin_buf: GLib.Bytes | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Finishes a request to ide_subprocess_communicate_async().
     * @virtual 
     * @param result A #GAsyncResult
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    vfunc_communicate_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdout_buf */ GLib.Bytes, /* stderr_buf */ GLib.Bytes ]
    /**
     * This process acts identical to g_subprocess_communicate_utf8().
     * @virtual 
     * @param stdin_buf input to deliver to the subprocesses stdin stream
     * @param cancellable an optional #GCancellable
     * @returns %TRUE if successful; otherwise %FALSE and @error is set.
     */
    vfunc_communicate_utf8(stdin_buf: string | null, cancellable: Gio.Cancellable | null): [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
    vfunc_communicate_utf8_async(stdin_buf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_communicate_utf8_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
    vfunc_force_exit(): void
    vfunc_get_exit_status(): number
    vfunc_get_identifier(): string | null
    vfunc_get_if_exited(): boolean
    vfunc_get_if_signaled(): boolean
    vfunc_get_status(): number
    vfunc_get_stderr_pipe(): Gio.InputStream
    vfunc_get_stdin_pipe(): Gio.OutputStream
    vfunc_get_stdout_pipe(): Gio.InputStream
    vfunc_get_successful(): boolean
    vfunc_get_term_sig(): number
    vfunc_send_signal(signal_num: number): void
    vfunc_wait(cancellable: Gio.Cancellable | null): boolean
    vfunc_wait_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_wait_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.Subprocess

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Subprocess extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Subprocess

    static name: string
    static $gtype: GObject.GType<Subprocess>

    // Constructors of Ide-1.0.Ide.Subprocess

    constructor(config?: Subprocess.ConstructorProperties) 
    _init(config?: Subprocess.ConstructorProperties): void
}

module SymbolResolver {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface SymbolResolver extends Object {

    // Owm methods of Ide-1.0.Ide.SymbolResolver

    find_references_async(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of find_references_async

    /**
     * Promisified version of {@link find_references_async}
     * 
     * 
     * @param location 
     * @param cancellable 
     * @returns A Promise of: A #GPtrArray   of #IdeSourceRange if successful; otherwise %NULL and @error is set.
     */
    find_references_async(location: SourceLocation, cancellable: Gio.Cancellable | null): globalThis.Promise<SourceRange[]>
    /**
     * Completes an asynchronous request to ide_symbol_resolver_find_references_async().
     * @param result a #GAsyncResult
     * @returns A #GPtrArray   of #IdeSourceRange if successful; otherwise %NULL and @error is set.
     */
    find_references_finish(result: Gio.AsyncResult): SourceRange[]
    /**
     * Asynchronously fetch an up to date symbol tree for `file`.
     * @param file A #GFile
     * @param buffer A #IdeBuffer or %NULL
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a callback to execute upon completion
     */
    get_symbol_tree_async(file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_symbol_tree_async

    /**
     * Promisified version of {@link get_symbol_tree_async}
     * 
     * Asynchronously fetch an up to date symbol tree for `file`.
     * @param file A #GFile
     * @param buffer A #IdeBuffer or %NULL
     * @param cancellable a #GCancellable or %NULL.
     * @returns A Promise of: An #IdeSymbolTree; otherwise %NULL and @error is set.
     */
    get_symbol_tree_async(file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null): globalThis.Promise<SymbolTree | null>
    /**
     * Completes an asynchronous request to get the symbol tree for the requested file.
     * @param result 
     * @returns An #IdeSymbolTree; otherwise %NULL and @error is set.
     */
    get_symbol_tree_finish(result: Gio.AsyncResult): SymbolTree | null
    load(): void
    /**
     * Asynchronously requests that `self` determine the symbol existing at the source location
     * denoted by `self`. `callback` should call ide_symbol_resolver_lookup_symbol_finish() to
     * retrieve the result.
     * @param location An #IdeSourceLocation.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback A callback to execute upon completion.
     */
    lookup_symbol_async(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of lookup_symbol_async

    /**
     * Promisified version of {@link lookup_symbol_async}
     * 
     * Asynchronously requests that `self` determine the symbol existing at the source location
     * denoted by `self`. `callback` should call ide_symbol_resolver_lookup_symbol_finish() to
     * retrieve the result.
     * @param location An #IdeSourceLocation.
     * @param cancellable A #GCancellable or %NULL.
     * @returns A Promise of: An #IdeSymbol if successful; otherwise %NULL.
     */
    lookup_symbol_async(location: SourceLocation, cancellable: Gio.Cancellable | null): globalThis.Promise<Symbol | null>
    /**
     * Completes an asynchronous call to lookup a symbol using
     * ide_symbol_resolver_lookup_symbol_async().
     * @param result A #GAsyncResult provided to the callback.
     * @returns An #IdeSymbol if successful; otherwise %NULL.
     */
    lookup_symbol_finish(result: Gio.AsyncResult): Symbol | null

    // Own virtual methods of Ide-1.0.Ide.SymbolResolver

    vfunc_find_references_async(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes an asynchronous request to ide_symbol_resolver_find_references_async().
     * @virtual 
     * @param result a #GAsyncResult
     * @returns A #GPtrArray   of #IdeSourceRange if successful; otherwise %NULL and @error is set.
     */
    vfunc_find_references_finish(result: Gio.AsyncResult): SourceRange[]
    /**
     * Asynchronously fetch an up to date symbol tree for `file`.
     * @virtual 
     * @param file A #GFile
     * @param buffer A #IdeBuffer or %NULL
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a callback to execute upon completion
     */
    vfunc_get_symbol_tree_async(file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes an asynchronous request to get the symbol tree for the requested file.
     * @virtual 
     * @param result 
     * @returns An #IdeSymbolTree; otherwise %NULL and @error is set.
     */
    vfunc_get_symbol_tree_finish(result: Gio.AsyncResult): SymbolTree | null
    vfunc_load(): void
    /**
     * Asynchronously requests that `self` determine the symbol existing at the source location
     * denoted by `self`. `callback` should call ide_symbol_resolver_lookup_symbol_finish() to
     * retrieve the result.
     * @virtual 
     * @param location An #IdeSourceLocation.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback A callback to execute upon completion.
     */
    vfunc_lookup_symbol_async(location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes an asynchronous call to lookup a symbol using
     * ide_symbol_resolver_lookup_symbol_async().
     * @virtual 
     * @param result A #GAsyncResult provided to the callback.
     * @returns An #IdeSymbol if successful; otherwise %NULL.
     */
    vfunc_lookup_symbol_finish(result: Gio.AsyncResult): Symbol | null

    // Class property signals of Ide-1.0.Ide.SymbolResolver

    connect(sigName: "notify::context", callback: (($obj: SymbolResolver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SymbolResolver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SymbolResolver extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SymbolResolver

    static name: string
    static $gtype: GObject.GType<SymbolResolver>

    // Constructors of Ide-1.0.Ide.SymbolResolver

    constructor(config?: SymbolResolver.ConstructorProperties) 
    _init(config?: SymbolResolver.ConstructorProperties): void
}

module SymbolTree {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SymbolTree {

    // Owm methods of Ide-1.0.Ide.SymbolTree

    /**
     * Get the number of children of `node`. If `node` is NULL, the root node
     * is assumed.
     * @param node An #IdeSymbolNode or %NULL.
     * @returns An unsigned integer containing the number of children.
     */
    get_n_children(node: SymbolNode | null): number
    /**
     * Gets the `nth` child node of `node`.
     * @param node an #IdeSymboNode
     * @param nth the nth child to retrieve.
     * @returns A #IdeSymbolNode or %NULL.
     */
    get_nth_child(node: SymbolNode | null, nth: number): SymbolNode | null

    // Own virtual methods of Ide-1.0.Ide.SymbolTree

    /**
     * Get the number of children of `node`. If `node` is NULL, the root node
     * is assumed.
     * @virtual 
     * @param node An #IdeSymbolNode or %NULL.
     * @returns An unsigned integer containing the number of children.
     */
    vfunc_get_n_children(node: SymbolNode | null): number
    /**
     * Gets the `nth` child node of `node`.
     * @virtual 
     * @param node an #IdeSymboNode
     * @param nth the nth child to retrieve.
     * @returns A #IdeSymbolNode or %NULL.
     */
    vfunc_get_nth_child(node: SymbolNode | null, nth: number): SymbolNode | null

    // Class property signals of Ide-1.0.Ide.SymbolTree

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SymbolTree extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SymbolTree

    static name: string
    static $gtype: GObject.GType<SymbolTree>

    // Constructors of Ide-1.0.Ide.SymbolTree

    constructor(config?: SymbolTree.ConstructorProperties) 
    _init(config?: SymbolTree.ConstructorProperties): void
}

module TagsBuilder {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface TagsBuilder {

    // Owm methods of Ide-1.0.Ide.TagsBuilder

    build_async(directory_or_file: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of build_async

    /**
     * Promisified version of {@link build_async}
     * 
     * 
     * @param directory_or_file 
     * @param recursive 
     * @param cancellable 
     * @returns A Promise of the result of {@link build_async}
     */
    build_async(directory_or_file: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    build_finish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.TagsBuilder

    vfunc_build_async(directory_or_file: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_build_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.TagsBuilder

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TagsBuilder extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TagsBuilder

    static name: string
    static $gtype: GObject.GType<TagsBuilder>

    // Constructors of Ide-1.0.Ide.TagsBuilder

    constructor(config?: TagsBuilder.ConstructorProperties) 
    _init(config?: TagsBuilder.ConstructorProperties): void
}

module TemplateProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface TemplateProvider {

    // Owm methods of Ide-1.0.Ide.TemplateProvider

    /**
     * Gets a list of templates for this provider.
     * 
     * Plugins should implement this interface to feed #IdeProjectTemplate's into
     * the project creation workflow.
     * @returns A #GList of   #IdeProjectTemplate instances.
     */
    get_project_templates(): ProjectTemplate[]

    // Own virtual methods of Ide-1.0.Ide.TemplateProvider

    /**
     * Gets a list of templates for this provider.
     * 
     * Plugins should implement this interface to feed #IdeProjectTemplate's into
     * the project creation workflow.
     * @virtual 
     * @returns A #GList of   #IdeProjectTemplate instances.
     */
    vfunc_get_project_templates(): ProjectTemplate[]

    // Class property signals of Ide-1.0.Ide.TemplateProvider

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TemplateProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TemplateProvider

    static name: string
    static $gtype: GObject.GType<TemplateProvider>

    // Constructors of Ide-1.0.Ide.TemplateProvider

    constructor(config?: TemplateProvider.ConstructorProperties) 
    _init(config?: TemplateProvider.ConstructorProperties): void
}

module Vcs {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: Vcs): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Vcs

        context?: Context | null
    }

}

interface Vcs extends Object {

    // Own properties of Ide-1.0.Ide.Vcs

    readonly branch_name: string | null
    readonly context: Context
    readonly working_directory: Gio.File

    // Owm methods of Ide-1.0.Ide.Vcs

    emit_changed(): void
    /**
     * Retrieves the name of the branch in the current working directory.
     * @returns A string containing the branch name.
     */
    get_branch_name(): string | null
    /**
     * Gets an #IdeBufferChangeMonitor for the buffer provided. If the #IdeVcs implementation does not
     * support change monitoring, or cannot for the current file, then %NULL is returned.
     * @param buffer 
     * @returns An #IdeBufferChangeMonitor or %NULL.
     */
    get_buffer_change_monitor(buffer: Buffer): BufferChangeMonitor | null
    /**
     * Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
     * support access to configuration, then %NULL is returned.
     * @returns An #IdeVcsConfig or %NULL.
     */
    get_config(): VcsConfig | null
    get_priority(): number
    /**
     * Retrieves the working directory for the context. This is the root of where
     * the project files exist.
     * @returns A #GFile.
     */
    get_working_directory(): Gio.File
    is_ignored(file: Gio.File): boolean

    // Own virtual methods of Ide-1.0.Ide.Vcs

    vfunc_changed(): void
    /**
     * Retrieves the name of the branch in the current working directory.
     * @virtual 
     * @returns A string containing the branch name.
     */
    vfunc_get_branch_name(): string | null
    /**
     * Gets an #IdeBufferChangeMonitor for the buffer provided. If the #IdeVcs implementation does not
     * support change monitoring, or cannot for the current file, then %NULL is returned.
     * @virtual 
     * @param buffer 
     * @returns An #IdeBufferChangeMonitor or %NULL.
     */
    vfunc_get_buffer_change_monitor(buffer: Buffer): BufferChangeMonitor | null
    /**
     * Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
     * support access to configuration, then %NULL is returned.
     * @virtual 
     * @returns An #IdeVcsConfig or %NULL.
     */
    vfunc_get_config(): VcsConfig | null
    vfunc_get_priority(): number
    /**
     * Retrieves the working directory for the context. This is the root of where
     * the project files exist.
     * @virtual 
     * @returns A #GFile.
     */
    vfunc_get_working_directory(): Gio.File
    vfunc_is_ignored(file: Gio.File): boolean

    // Own signals of Ide-1.0.Ide.Vcs

    connect(sigName: "changed", callback: Vcs.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: Vcs.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Vcs

    connect(sigName: "notify::branch-name", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::branch-name", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::branch-name", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::working-directory", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::working-directory", callback: (($obj: Vcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::working-directory", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Vcs extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Vcs

    static name: string
    static $gtype: GObject.GType<Vcs>

    // Constructors of Ide-1.0.Ide.Vcs

    constructor(config?: Vcs.ConstructorProperties) 
    _init(config?: Vcs.ConstructorProperties): void
    static new_async(context: Context, io_priority: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<Vcs> | null): void
    // Has conflict: static new_finish(result: Gio.AsyncResult): Vcs

    // Overloads of new_finish

    static new_finish(result: Gio.AsyncResult): Object
    static register_ignored(pattern: string | null): void
}

module VcsConfig {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface VcsConfig {

    // Owm methods of Ide-1.0.Ide.VcsConfig

    get_config(type: VcsConfigType, value: any): void
    set_config(type: VcsConfigType, value: any): void

    // Own virtual methods of Ide-1.0.Ide.VcsConfig

    vfunc_get_config(type: VcsConfigType, value: any): void
    vfunc_set_config(type: VcsConfigType, value: any): void

    // Class property signals of Ide-1.0.Ide.VcsConfig

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class VcsConfig extends GObject.Object {

    // Own properties of Ide-1.0.Ide.VcsConfig

    static name: string
    static $gtype: GObject.GType<VcsConfig>

    // Constructors of Ide-1.0.Ide.VcsConfig

    constructor(config?: VcsConfig.ConstructorProperties) 
    _init(config?: VcsConfig.ConstructorProperties): void
}

module VcsInitializer {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface VcsInitializer {

    // Owm methods of Ide-1.0.Ide.VcsInitializer

    get_title(): string | null
    initialize_async(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of initialize_async

    /**
     * Promisified version of {@link initialize_async}
     * 
     * 
     * @param file 
     * @param cancellable 
     * @returns A Promise of the result of {@link initialize_async}
     */
    initialize_async(file: Gio.File, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    initialize_finish(result: Gio.AsyncResult): boolean

    // Own virtual methods of Ide-1.0.Ide.VcsInitializer

    vfunc_get_title(): string | null
    vfunc_initialize_async(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_initialize_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.VcsInitializer

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class VcsInitializer extends GObject.Object {

    // Own properties of Ide-1.0.Ide.VcsInitializer

    static name: string
    static $gtype: GObject.GType<VcsInitializer>

    // Constructors of Ide-1.0.Ide.VcsInitializer

    constructor(config?: VcsInitializer.ConstructorProperties) 
    _init(config?: VcsInitializer.ConstructorProperties): void
}

module WorkbenchAddin {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface WorkbenchAddin {

    // Owm methods of Ide-1.0.Ide.WorkbenchAddin

    /**
     * This interface method indicates if the workbench addin can load the content
     * found at `uri`. If so, `priority` should be set to an integer priority
     * indicating how important it is for this addin to load `uri`.
     * 
     * The lowest integer value wins. However, a load fails, the next addin which
     * returned %TRUE from this method will be consulted.
     * @param uri An #IdeUri.
     * @param content_type A content-type or %NULL.
     * @returns %TRUE if @self and open @uri.
     */
    can_open(uri: Uri, content_type: string | null): [ /* returnType */ boolean, /* priority */ number ]
    /**
     * Gets the identifier for this workbench addin. By default this is the
     * name of the classes GType (such as "MyObject").
     * 
     * This can be used as the hint to various open operations in IdeWorkbench
     * to prefer a given loader.
     * @returns a newly allocated string.
     */
    get_id(): string | null
    /**
     * This interface method is called to load `self`. Addin implementations should add any
     * required UI or actions to `workbench` here. You should remove anything you've added
     * in ide_workbench_addin_unload(), as that will be called when your plugin is deactivated
     * or the workbench is in the destruction process.
     * @param workbench An #IdeWorkbench
     */
    load(workbench: Workbench): void
    open_async(uri: Uri, content_type: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of open_async

    /**
     * Promisified version of {@link open_async}
     * 
     * 
     * @param uri 
     * @param content_type 
     * @param flags 
     * @param cancellable 
     * @returns A Promise of the result of {@link open_async}
     */
    open_async(uri: Uri, content_type: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    open_finish(result: Gio.AsyncResult): boolean
    /**
     * This function is called when the workbench changes the perspective.
     * 
     * Addins that wish to add buttons to the header bar may want to show or
     * hide the widgets in this vfunc.
     * @param perspective An #IdePerspective
     */
    perspective_set(perspective: Perspective): void
    /**
     * This interface method should cleanup after anything added to `workbench` in
     * ide_workbench_addin_load().
     * 
     * This might be called when a plugin is deactivated, or the workbench is in the
     * destruction process.
     * @param workbench An #IdeWorkbench
     */
    unload(workbench: Workbench): void

    // Own virtual methods of Ide-1.0.Ide.WorkbenchAddin

    /**
     * This interface method indicates if the workbench addin can load the content
     * found at `uri`. If so, `priority` should be set to an integer priority
     * indicating how important it is for this addin to load `uri`.
     * 
     * The lowest integer value wins. However, a load fails, the next addin which
     * returned %TRUE from this method will be consulted.
     * @virtual 
     * @param uri An #IdeUri.
     * @param content_type A content-type or %NULL.
     * @returns %TRUE if @self and open @uri.
     */
    vfunc_can_open(uri: Uri, content_type: string | null): [ /* returnType */ boolean, /* priority */ number ]
    /**
     * Gets the identifier for this workbench addin. By default this is the
     * name of the classes GType (such as "MyObject").
     * 
     * This can be used as the hint to various open operations in IdeWorkbench
     * to prefer a given loader.
     * @virtual 
     * @returns a newly allocated string.
     */
    vfunc_get_id(): string | null
    /**
     * This interface method is called to load `self`. Addin implementations should add any
     * required UI or actions to `workbench` here. You should remove anything you've added
     * in ide_workbench_addin_unload(), as that will be called when your plugin is deactivated
     * or the workbench is in the destruction process.
     * @virtual 
     * @param workbench An #IdeWorkbench
     */
    vfunc_load(workbench: Workbench): void
    vfunc_open_async(uri: Uri, content_type: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_open_finish(result: Gio.AsyncResult): boolean
    /**
     * This function is called when the workbench changes the perspective.
     * 
     * Addins that wish to add buttons to the header bar may want to show or
     * hide the widgets in this vfunc.
     * @virtual 
     * @param perspective An #IdePerspective
     */
    vfunc_perspective_set(perspective: Perspective): void
    /**
     * This interface method should cleanup after anything added to `workbench` in
     * ide_workbench_addin_load().
     * 
     * This might be called when a plugin is deactivated, or the workbench is in the
     * destruction process.
     * @virtual 
     * @param workbench An #IdeWorkbench
     */
    vfunc_unload(workbench: Workbench): void

    // Class property signals of Ide-1.0.Ide.WorkbenchAddin

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class WorkbenchAddin extends GObject.Object {

    // Own properties of Ide-1.0.Ide.WorkbenchAddin

    static name: string
    static $gtype: GObject.GType<WorkbenchAddin>

    // Constructors of Ide-1.0.Ide.WorkbenchAddin

    constructor(config?: WorkbenchAddin.ConstructorProperties) 
    _init(config?: WorkbenchAddin.ConstructorProperties): void
}

module Worker {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface Worker {

    // Owm methods of Ide-1.0.Ide.Worker

    /**
     * Creates a new proxy to be connected to the subprocess peer on the other
     * end of `connection`.
     * @param connection A #GDBusConnection connected to the worker process.
     * @returns A #GDBusProxy or %NULL.
     */
    create_proxy(connection: Gio.DBusConnection): Gio.DBusProxy
    register_service(connection: Gio.DBusConnection): void

    // Own virtual methods of Ide-1.0.Ide.Worker

    /**
     * Creates a new proxy to be connected to the subprocess peer on the other
     * end of `connection`.
     * @virtual 
     * @param connection A #GDBusConnection connected to the worker process.
     * @returns A #GDBusProxy or %NULL.
     */
    vfunc_create_proxy(connection: Gio.DBusConnection): Gio.DBusProxy
    vfunc_register_service(connection: Gio.DBusConnection): void

    // Class property signals of Ide-1.0.Ide.Worker

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Worker extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Worker

    static name: string
    static $gtype: GObject.GType<Worker>

    // Constructors of Ide-1.0.Ide.Worker

    constructor(config?: Worker.ConstructorProperties) 
    _init(config?: Worker.ConstructorProperties): void
}

module Application {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.ActionMap.ConstructorProperties, Dazzle.Application.ConstructorProperties {
    }

}

interface Application extends Gio.ActionGroup, Gio.ActionMap {

    // Owm methods of Ide-1.0.Ide.Application

    add_reaper(reaper: Dazzle.DirectoryReaper): void
    get_keybindings_mode(): string | null
    get_mode(): ApplicationMode
    /**
     * This method will retreive an #IdeRecentProjects for the application that
     * represents recent and discover projects on the system. The first time
     * the #IdeRecentProjects is loaded, discovery of projects will occur. There
     * is no need to call ide_recent_projects_discover_async().
     * 
     * If you would like to display a spinner while discovery is in process, simply
     * connect to the #IdeRecentProjects:busy: property notification.
     * @returns An #IdeRecentProjects.
     */
    get_recent_projects(): RecentProjects
    /**
     * Gets the startup time of the application.
     * @returns A #GDateTime.
     */
    get_started_at(): GLib.DateTime
    /**
     * Asynchronously requests a #GDBusProxy to a service provided in a worker
     * process. The worker should be an #IdeWorker implemented by the plugin named
     * `plugin_name`. The #IdeWorker is responsible for created both the service
     * registered on the bus and the proxy to it.
     * 
     * The #IdeApplication is responsible for spawning a subprocess for the worker.
     * 
     * `callback` should call ide_application_get_worker_finish() with the result
     * provided to retrieve the result.
     * @param plugin_name The name of the plugin.
     * @param cancellable A #GCancellable or %NULL.
     * @param callback A #GAsyncReadyCallback or %NULL.
     */
    get_worker_async(plugin_name: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_worker_async

    /**
     * Promisified version of {@link get_worker_async}
     * 
     * Asynchronously requests a #GDBusProxy to a service provided in a worker
     * process. The worker should be an #IdeWorker implemented by the plugin named
     * `plugin_name`. The #IdeWorker is responsible for created both the service
     * registered on the bus and the proxy to it.
     * 
     * The #IdeApplication is responsible for spawning a subprocess for the worker.
     * 
     * `callback` should call ide_application_get_worker_finish() with the result
     * provided to retrieve the result.
     * @param plugin_name The name of the plugin.
     * @param cancellable A #GCancellable or %NULL.
     * @returns A Promise of: A #GDBusProxy or %NULL.
     */
    get_worker_async(plugin_name: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise<Gio.DBusProxy>
    /**
     * Completes an asynchronous request to get a proxy to a worker process.
     * @param result A #GAsyncResult
     * @returns A #GDBusProxy or %NULL.
     */
    get_worker_finish(result: Gio.AsyncResult): Gio.DBusProxy
    open_project(file: Gio.File): boolean
    show_projects_window(): void

    // Class property signals of Ide-1.0.Ide.Application

    connect(sigName: "notify::menu-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::menu-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::menu-manager", ...args: any[]): void
    connect(sigName: "notify::shortcut-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shortcut-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::shortcut-manager", ...args: any[]): void
    connect(sigName: "notify::theme-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::theme-manager", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::theme-manager", ...args: any[]): void
    connect(sigName: "notify::active-window", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-window", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active-window", ...args: any[]): void
    connect(sigName: "notify::app-menu", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-menu", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-menu", ...args: any[]): void
    connect(sigName: "notify::menubar", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::menubar", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::menubar", ...args: any[]): void
    connect(sigName: "notify::register-session", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::register-session", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::register-session", ...args: any[]): void
    connect(sigName: "notify::screensaver-active", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screensaver-active", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::screensaver-active", ...args: any[]): void
    connect(sigName: "notify::action-group", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-group", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::action-group", ...args: any[]): void
    connect(sigName: "notify::application-id", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::application-id", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::application-id", ...args: any[]): void
    connect(sigName: "notify::flags", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::inactivity-timeout", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inactivity-timeout", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::inactivity-timeout", ...args: any[]): void
    connect(sigName: "notify::is-busy", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-busy", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-busy", ...args: any[]): void
    connect(sigName: "notify::is-registered", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-registered", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-registered", ...args: any[]): void
    connect(sigName: "notify::is-remote", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-remote", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-remote", ...args: any[]): void
    connect(sigName: "notify::resource-base-path", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resource-base-path", callback: (($obj: Application, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resource-base-path", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Application extends Dazzle.Application {

    // Own properties of Ide-1.0.Ide.Application

    static name: string
    static $gtype: GObject.GType<Application>

    // Constructors of Ide-1.0.Ide.Application

    constructor(config?: Application.ConstructorProperties) 
    constructor() 
    static new(): Application

    // Overloads of new

    static new(application_id: string | null, flags: Gio.ApplicationFlags): Dazzle.Application
    /**
     * Creates a new #GtkApplication instance.
     * 
     * When using #GtkApplication, it is not necessary to call gtk_init()
     * manually. It is called as soon as the application gets registered as
     * the primary instance.
     * 
     * Concretely, gtk_init() is called in the default handler for the
     * #GApplication::startup signal. Therefore, #GtkApplication subclasses should
     * chain up in their #GApplication::startup handler before using any GTK+ API.
     * 
     * Note that commandline arguments are not passed to gtk_init().
     * All GTK+ functionality that is available via commandline arguments
     * can also be achieved by setting suitable environment variables
     * such as `G_DEBUG`, so this should not be a big
     * problem. If you absolutely must support GTK+ commandline arguments,
     * you can explicitly call gtk_init() before creating the application
     * instance.
     * 
     * If non-%NULL, the application ID must be valid.  See
     * g_application_id_is_valid().
     * 
     * If no application ID is given then some features (most notably application
     * uniqueness) will be disabled. A null application ID is only allowed with
     * GTK+ 3.6 or later.
     * @constructor 
     * @param application_id The application ID.
     * @param flags the application flags
     * @returns a new #GtkApplication instance
     */
    static new(application_id: string | null, flags: Gio.ApplicationFlags): Gtk.Application
    /**
     * Creates a new #GApplication instance.
     * 
     * If non-%NULL, the application id must be valid.  See
     * g_application_id_is_valid().
     * 
     * If no application ID is given then some features of #GApplication
     * (most notably application uniqueness) will be disabled.
     * @constructor 
     * @param application_id the application id
     * @param flags the application flags
     * @returns a new #GApplication instance
     */
    static new(application_id: string | null, flags: Gio.ApplicationFlags): Gio.Application
    _init(config?: Application.ConstructorProperties): void
    /**
     * This function returns the thread-id of the main thread for the applicaiton.
     * This is only really useful to determine if you are in the main UI thread.
     * This is used by IDE_IS_MAIN_THREAD for assertion checks.
     * @returns A #GThread
     */
    static get_main_thread(): GLib.Thread
}

module BackForwardItem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BackForwardItem

        mark?: Gtk.TextMark | null
        /**
         * The #IdeBackForwardItem:uri property contains the location for the
         * back/forward item.
         * 
         * This might be a uri to a file, including a line number.
         * 
         * #IdeWorkbenchAddin can hook how these are loaded, by implementing the
         * IdeWorkbenchAddin::can_open() vfunc and associated functions.
         */
        uri?: Uri | null
    }

}

interface BackForwardItem {

    // Own properties of Ide-1.0.Ide.BackForwardItem

    mark: Gtk.TextMark
    /**
     * The #IdeBackForwardItem:uri property contains the location for the
     * back/forward item.
     * 
     * This might be a uri to a file, including a line number.
     * 
     * #IdeWorkbenchAddin can hook how these are loaded, by implementing the
     * IdeWorkbenchAddin::can_open() vfunc and associated functions.
     */
    readonly uri: Uri

    // Owm methods of Ide-1.0.Ide.BackForwardItem

    chain(other: BackForwardItem): boolean
    /**
     * Gets the text mark or %NULL.
     * @returns A #GtkTextMark or %NULL.
     */
    get_mark(): Gtk.TextMark
    /**
     * Gets the uri for the #IdeBackForwardItem.
     * @returns An #IdeUri or %NULL.
     */
    get_uri(): Uri | null

    // Class property signals of Ide-1.0.Ide.BackForwardItem

    connect(sigName: "notify::mark", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::mark", ...args: any[]): void
    connect(sigName: "notify::uri", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::uri", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::uri", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BackForwardItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BackForwardItem extends Object {

    // Own properties of Ide-1.0.Ide.BackForwardItem

    static name: string
    static $gtype: GObject.GType<BackForwardItem>

    // Constructors of Ide-1.0.Ide.BackForwardItem

    constructor(config?: BackForwardItem.ConstructorProperties) 
    constructor(context: Context, uri: Uri, mark: Gtk.TextMark) 
    static new(context: Context, uri: Uri, mark: Gtk.TextMark): BackForwardItem
    _init(config?: BackForwardItem.ConstructorProperties): void
}

module BackForwardList {

    // Signal callback interfaces

    /**
     * Signal callback interface for `navigate-to`
     */
    interface NavigateToSignalCallback {
        ($obj: BackForwardList, object: BackForwardItem): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface BackForwardList {

    // Own properties of Ide-1.0.Ide.BackForwardList

    readonly can_go_backward: boolean
    readonly can_go_forward: boolean
    readonly current_item: BackForwardItem

    // Owm methods of Ide-1.0.Ide.BackForwardList

    /**
     * Branches `self` into a newly created #IdeBackForwardList.
     * 
     * This can be used independently and then merged back into a global
     * #IdeBackForwardList. This can be useful in situations where you have
     * multiple sets of editors.
     * @returns An #IdeBackForwardList
     */
    branch(): BackForwardList
    get_can_go_backward(): boolean
    get_can_go_forward(): boolean
    /**
     * Retrieves the current #IdeBackForwardItem or %NULL if no items have been
     * added to the #IdeBackForwardList.
     * @returns An #IdeBackForwardItem or %NULL.
     */
    get_current_item(): BackForwardItem | null
    go_backward(): void
    go_forward(): void
    merge(branch: BackForwardList): void
    push(item: BackForwardItem): void

    // Own signals of Ide-1.0.Ide.BackForwardList

    connect(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback): number
    connect_after(sigName: "navigate-to", callback: BackForwardList.NavigateToSignalCallback): number
    emit(sigName: "navigate-to", object: BackForwardItem, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BackForwardList

    connect(sigName: "notify::can-go-backward", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-go-backward", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-go-backward", ...args: any[]): void
    connect(sigName: "notify::can-go-forward", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-go-forward", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-go-forward", ...args: any[]): void
    connect(sigName: "notify::current-item", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-item", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::current-item", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BackForwardList, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BackForwardList extends Object {

    // Own properties of Ide-1.0.Ide.BackForwardList

    static name: string
    static $gtype: GObject.GType<BackForwardList>

    // Constructors of Ide-1.0.Ide.BackForwardList

    constructor(config?: BackForwardList.ConstructorProperties) 
    _init(config?: BackForwardList.ConstructorProperties): void
}

module Buffer {

    // Signal callback interfaces

    /**
     * Signal callback interface for `cursor-moved`
     */
    interface CursorMovedSignalCallback {
        ($obj: Buffer, location: Gtk.TextIter): void
    }

    /**
     * Signal callback interface for `destroy`
     */
    interface DestroySignalCallback {
        ($obj: Buffer): void
    }

    /**
     * Signal callback interface for `line-flags-changed`
     */
    interface LineFlagsChangedSignalCallback {
        ($obj: Buffer): void
    }

    /**
     * Signal callback interface for `loaded`
     */
    interface LoadedSignalCallback {
        ($obj: Buffer): void
    }

    /**
     * Signal callback interface for `saved`
     */
    interface SavedSignalCallback {
        ($obj: Buffer): void
    }

    /**
     * Signal callback interface for `symbol-resolver-loaded`
     */
    interface SymbolResolverLoadedSignalCallback {
        ($obj: Buffer): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.Buffer.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Buffer

        context?: Context | null
        file?: File | null
        highlight_diagnostics?: boolean | null
        style_scheme_name?: string | null
        title?: string | null
    }

}

interface Buffer {

    // Own properties of Ide-1.0.Ide.Buffer

    readonly busy: boolean
    readonly changed_on_volume: boolean
    readonly context: Context
    file: File
    readonly has_diagnostics: boolean
    highlight_diagnostics: boolean
    readonly read_only: boolean
    style_scheme_name: string | null
    title: string | null

    // Conflicting properties

    priv: any & Gtk.TextBufferPrivate

    // Own fields of Ide-1.0.Ide.Buffer

    parent_instance: GtkSource.Buffer & Gtk.TextBuffer & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.Buffer

    /**
     * Update the #IdeBuffer:read-only property and the corresponding
     * modification time (mtime).
     */
    check_for_volume_change(): void
    format_selection_async(options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of format_selection_async

    /**
     * Promisified version of {@link format_selection_async}
     * 
     * 
     * @param options 
     * @param cancellable 
     * @returns A Promise of the result of {@link format_selection_async}
     */
    format_selection_async(options: FormatterOptions, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    format_selection_finish(result: Gio.AsyncResult): boolean
    /**
     * Gets the #IdeBuffer:busy property.
     * Return whether the buffer is performing background work or not.
     * @returns %TRUE if the #IdeBuffer is performing background work. Otherwise %FALSE.
     */
    get_busy(): boolean
    get_change_count(): number
    /**
     * Gets if the file backing the buffer has changed on the underlying storage.
     * 
     * Use ide_buffer_manager_load_file_async() to reload the buffer.
     * @returns %TRUE if the file has changed.
     */
    get_changed_on_volume(): boolean
    /**
     * Gets the contents of the buffer as GBytes.
     * 
     * By using this function to get the bytes, you allow #IdeBuffer to avoid calculating the buffer
     * text unnecessarily, potentially saving on allocations.
     * 
     * Additionally, this allows the buffer to update the state in #IdeUnsavedFiles if the content
     * is out of sync.
     * @returns A #GBytes containing the buffer content.
     */
    get_content(): GLib.Bytes
    /**
     * Gets the #IdeBuffer:context property. This is the #IdeContext that owns the buffer.
     * @returns An #IdeContext.
     */
    get_context(): Context
    /**
     * Gets the first diagnostic that overlaps the position
     * @param iter a #GtkTextIter.
     * @returns An #IdeDiagnostic or %NULL.
     */
    get_diagnostic_at_iter(iter: Gtk.TextIter): Diagnostic | null
    /**
     * Gets the underlying file behind the buffer.
     * @returns An #IdeFile.
     */
    get_file(): File
    /**
     * Gets the #IdeBuffer:highlight-diagnostics property.
     * Return whether the diagnostic warnings and errors should be highlighted.
     * @returns %TRUE if diagnostics are highlighted. Otherwise %FALSE.
     */
    get_highlight_diagnostics(): boolean
    /**
     * Gets the location of the insert mark as an #IdeSourceLocation.
     * @returns An #IdeSourceLocation
     */
    get_insert_location(): SourceLocation
    /**
     * Fill `iter` with the position designated by `location`.
     * @param location a #IdeSourceLocation.
     */
    get_iter_at_source_location(location: SourceLocation): /* iter */ Gtk.TextIter
    /**
     * Gets the location of the iter as an #IdeSourceLocation.
     * @param iter 
     * @returns An #IdeSourceLocation
     */
    get_iter_location(iter: Gtk.TextIter): SourceLocation
    /**
     * Return the flags set for the #IdeBuffer `line` number.
     * (diagnostics and errors messages, line changed or added, notes)
     * @param line a buffer line number.
     * @returns An #IdeBufferLineFlags struct.
     */
    get_line_flags(line: number): BufferLineFlags
    /**
     * Gets the #IdeBuffer:read-only property. This property indicate if the underlying file is read only or not.
     * @returns %TRUE if the #IdeBuffer is read only. Otherwise %FALSE.
     */
    get_read_only(): boolean
    /**
     * Gets the #IdeRenameProvider for this buffer, or %NULL.
     * @returns An #IdeRenameProvider or %NULL if there   is no #IdeRenameProvider that can statisfy the buffer.
     */
    get_rename_provider(): RenameProvider | null
    /**
     * This function acts like gtk_text_buffer_get_selection_bounds() except that it always
     * places the location of the insert mark at `insert` and the location of the selection
     * mark at `selection`.
     * 
     * Calling gtk_text_iter_order() with the results of this function would be equivalent
     * to calling gtk_text_buffer_get_selection_bounds().
     */
    get_selection_bounds(): [ /* insert */ Gtk.TextIter, /* selection */ Gtk.TextIter ]

    // Overloads of get_selection_bounds

    /**
     * Returns %TRUE if some text is selected; places the bounds
     * of the selection in `start` and `end` (if the selection has length 0,
     * then `start` and `end` are filled in with the same value).
     * `start` and `end` will be in ascending order. If `start` and `end` are
     * NULL, then they are not filled in, but the return value still indicates
     * whether text is selected.
     * @returns whether the selection has nonzero length
     */
    get_selection_bounds(): [ /* returnType */ boolean, /* start */ Gtk.TextIter, /* end */ Gtk.TextIter ]
    get_spell_checking(): boolean
    /**
     * Gets the #IdeBuffer:style-scheme-name property.
     * This property contains the current style scheme used by the buffer.
     * @returns A string containing the name of the currently used style scheme.
     */
    get_style_scheme_name(): string | null
    /**
     * Asynchronously get a possible symbol at `location`.
     * @param location a #GtkTextIter indicating a position to search for a symbol.
     * @param cancellable A #GCancellable.
     * @param callback A #GAsyncReadyCallback.
     */
    get_symbol_at_location_async(location: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_symbol_at_location_async

    /**
     * Promisified version of {@link get_symbol_at_location_async}
     * 
     * Asynchronously get a possible symbol at `location`.
     * @param location a #GtkTextIter indicating a position to search for a symbol.
     * @param cancellable A #GCancellable.
     * @returns A Promise of: An #IdeSymbol or %NULL.
     */
    get_symbol_at_location_async(location: Gtk.TextIter, cancellable: Gio.Cancellable | null): globalThis.Promise<Symbol>
    /**
     * Completes an asynchronous request to locate a symbol at a location.
     * @param result A #GAsyncResult.
     * @returns An #IdeSymbol or %NULL.
     */
    get_symbol_at_location_finish(result: Gio.AsyncResult): Symbol
    /**
     * Gets the symbol resolver for the buffer based on the current language.
     * @returns An #IdeSymbolResolver or %NULL.
     */
    get_symbol_resolver(): SymbolResolver | null
    /**
     * Gets the #IdeBuffer:title property. This property contains a title for the buffer suitable
     * for display.
     * @returns A string containing the buffer title.
     */
    get_title(): string | null
    get_uri(): string | null
    /**
     * Gets the word found under the position denoted by `iter`.
     * @param iter A #GtkTextIter.
     * @returns A newly allocated string.
     */
    get_word_at_iter(iter: Gtk.TextIter): string | null
    hold(): void
    /**
     * Force the #IdeBuffer to rebuild the highlight.
     */
    rehighlight(): void
    release(): void
    /**
     * Sets the underlying file to use when saving and loading `self` to and from storage.
     * @param file An #IdeFile.
     */
    set_file(file: File): void
    /**
     * Sets the #IdeBuffer:highlight-diagnostics property.
     * Sets whether the diagnostic warnings and errors should be highlighted.
     * @param highlight_diagnostics Whether to highlight the diagnostics or not.
     */
    set_highlight_diagnostics(highlight_diagnostics: boolean): void
    set_spell_checking(enable: boolean): void
    /**
     * Sets the #IdeBuffer:style-scheme-name property.
     * Sets the style scheme to be used by this buffer.
     * @param style_scheme_name A string containing the name of the style scheme to use.
     */
    set_style_scheme_name(style_scheme_name: string | null): void
    sync_to_unsaved_files(): void
    /**
     * Trim trailing whitespaces from the buffer.
     */
    trim_trailing_whitespace(): void

    // Own virtual methods of Ide-1.0.Ide.Buffer

    vfunc_cursor_moved(location: Gtk.TextIter): void

    // Own signals of Ide-1.0.Ide.Buffer

    connect(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback): number
    connect_after(sigName: "cursor-moved", callback: Buffer.CursorMovedSignalCallback): number
    emit(sigName: "cursor-moved", location: Gtk.TextIter, ...args: any[]): void
    connect(sigName: "destroy", callback: Buffer.DestroySignalCallback): number
    connect_after(sigName: "destroy", callback: Buffer.DestroySignalCallback): number
    emit(sigName: "destroy", ...args: any[]): void
    connect(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback): number
    connect_after(sigName: "line-flags-changed", callback: Buffer.LineFlagsChangedSignalCallback): number
    emit(sigName: "line-flags-changed", ...args: any[]): void
    connect(sigName: "loaded", callback: Buffer.LoadedSignalCallback): number
    connect_after(sigName: "loaded", callback: Buffer.LoadedSignalCallback): number
    emit(sigName: "loaded", ...args: any[]): void
    connect(sigName: "saved", callback: Buffer.SavedSignalCallback): number
    connect_after(sigName: "saved", callback: Buffer.SavedSignalCallback): number
    emit(sigName: "saved", ...args: any[]): void
    connect(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback): number
    connect_after(sigName: "symbol-resolver-loaded", callback: Buffer.SymbolResolverLoadedSignalCallback): number
    emit(sigName: "symbol-resolver-loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Buffer

    connect(sigName: "notify::busy", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::changed-on-volume", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::changed-on-volume", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::changed-on-volume", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::file", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::has-diagnostics", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-diagnostics", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-diagnostics", ...args: any[]): void
    connect(sigName: "notify::highlight-diagnostics", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-diagnostics", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlight-diagnostics", ...args: any[]): void
    connect(sigName: "notify::read-only", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::read-only", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::read-only", ...args: any[]): void
    connect(sigName: "notify::style-scheme-name", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-scheme-name", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style-scheme-name", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::can-redo", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-redo", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-redo", ...args: any[]): void
    connect(sigName: "notify::can-undo", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-undo", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-undo", ...args: any[]): void
    connect(sigName: "notify::highlight-matching-brackets", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-matching-brackets", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlight-matching-brackets", ...args: any[]): void
    connect(sigName: "notify::highlight-syntax", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-syntax", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlight-syntax", ...args: any[]): void
    connect(sigName: "notify::implicit-trailing-newline", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::implicit-trailing-newline", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::implicit-trailing-newline", ...args: any[]): void
    connect(sigName: "notify::language", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::max-undo-levels", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-undo-levels", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::max-undo-levels", ...args: any[]): void
    connect(sigName: "notify::style-scheme", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style-scheme", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style-scheme", ...args: any[]): void
    connect(sigName: "notify::undo-manager", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::undo-manager", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::undo-manager", ...args: any[]): void
    connect(sigName: "notify::copy-target-list", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::copy-target-list", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::copy-target-list", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-position", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::has-selection", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-selection", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-selection", ...args: any[]): void
    connect(sigName: "notify::paste-target-list", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::paste-target-list", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::paste-target-list", ...args: any[]): void
    connect(sigName: "notify::tag-table", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tag-table", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tag-table", ...args: any[]): void
    connect(sigName: "notify::text", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: Buffer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Buffer extends GtkSource.Buffer {

    // Own properties of Ide-1.0.Ide.Buffer

    static name: string
    static $gtype: GObject.GType<Buffer>

    // Constructors of Ide-1.0.Ide.Buffer

    constructor(config?: Buffer.ConstructorProperties) 
    _init(config?: Buffer.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

module BufferChangeMonitor {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: BufferChangeMonitor): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BufferChangeMonitor

        buffer?: Buffer | null
    }

}

interface BufferChangeMonitor {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitor

    readonly buffer: Buffer

    // Own fields of Ide-1.0.Ide.BufferChangeMonitor

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.BufferChangeMonitor

    emit_changed(): void
    get_change(iter: Gtk.TextIter): BufferLineChange
    reload(): void

    // Own virtual methods of Ide-1.0.Ide.BufferChangeMonitor

    vfunc_get_change(iter: Gtk.TextIter): BufferLineChange
    vfunc_reload(): void
    vfunc_set_buffer(buffer: Buffer): void

    // Own signals of Ide-1.0.Ide.BufferChangeMonitor

    connect(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: BufferChangeMonitor.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BufferChangeMonitor

    connect(sigName: "notify::buffer", callback: (($obj: BufferChangeMonitor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: BufferChangeMonitor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BufferChangeMonitor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BufferChangeMonitor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BufferChangeMonitor extends Object {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitor

    static name: string
    static $gtype: GObject.GType<BufferChangeMonitor>

    // Constructors of Ide-1.0.Ide.BufferChangeMonitor

    constructor(config?: BufferChangeMonitor.ConstructorProperties) 
    _init(config?: BufferChangeMonitor.ConstructorProperties): void
}

module BufferManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `buffer-focus-enter`
     */
    interface BufferFocusEnterSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-focus-leave`
     */
    interface BufferFocusLeaveSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-loaded`
     */
    interface BufferLoadedSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-saved`
     */
    interface BufferSavedSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }

    /**
     * Signal callback interface for `buffer-unloaded`
     */
    interface BufferUnloadedSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }

    /**
     * Signal callback interface for `create-buffer`
     */
    interface CreateBufferSignalCallback {
        ($obj: BufferManager, file: File): Buffer | null
    }

    /**
     * Signal callback interface for `load-buffer`
     */
    interface LoadBufferSignalCallback {
        ($obj: BufferManager, buffer: Buffer, create_new_view: boolean): void
    }

    /**
     * Signal callback interface for `save-buffer`
     */
    interface SaveBufferSignalCallback {
        ($obj: BufferManager, buffer: Buffer): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BufferManager

        auto_save?: boolean | null
        auto_save_timeout?: number | null
        focus_buffer?: Buffer | null
        minimum_word_size?: number | null
    }

}

interface BufferManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.BufferManager

    auto_save: boolean
    auto_save_timeout: number
    focus_buffer: Buffer
    minimum_word_size: number

    // Owm methods of Ide-1.0.Ide.BufferManager

    /**
     * Asynchronously requests that all of `edits` are applied to the buffers
     * in the project. If the buffer has not been loaded for a particular edit,
     * it will be loaded.
     * @param edits An #GPtrArray of #IdeProjectEdit
     * @param cancellable A #GCancellable or %NULL
     * @param callback the callback to complete the request
     */
    apply_edits_async(edits: ProjectEdit[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of apply_edits_async

    /**
     * Promisified version of {@link apply_edits_async}
     * 
     * Asynchronously requests that all of `edits` are applied to the buffers
     * in the project. If the buffer has not been loaded for a particular edit,
     * it will be loaded.
     * @param edits An #GPtrArray of #IdeProjectEdit
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of the result of {@link apply_edits_async}
     */
    apply_edits_async(edits: ProjectEdit[], cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    apply_edits_finish(result: Gio.AsyncResult): boolean
    /**
     * Creates a new #IdeBuffer that does not yet have a backing file attached to it. Interfaces
     * should perform a save-as operation to save the file to a real file.
     * 
     * ide_file_get_file() will return %NULL to denote this type of buffer.
     * @returns A newly created #IdeBuffer
     */
    create_temporary_buffer(): Buffer
    /**
     * Gets the buffer for a given file. If it has not yet been loaded, %NULL is
     * returned.
     * @param file A #GFile.
     * @returns An #IdeBuffer or %NULL.
     */
    find_buffer(file: Gio.File): Buffer | null
    /**
     * Returns a newly allocated #GPtrArray of all the buffers managed by the #IdeBufferManager
     * instance.
     * 
     * Buffers are generally not added to the buffer list until they have been loaded.
     * @returns A #GPtrArray of buffers.
     */
    get_buffers(): Buffer[]
    /**
     * Gets the #IdeBufferManager:focus-buffer property. This is the buffer behind
     * the current selected view.
     * @returns An #IdeBuffer or %NULL.
     */
    get_focus_buffer(): Buffer
    /**
     * Gets the #IdeBufferManager:max-file-size property. This contains the maximum file size in bytes
     * that a file may be to be loaded by the #IdeBufferManager.
     * 
     * If zero, no size limits will be enforced.
     * @returns A #gsize in bytes or zero.
     */
    get_max_file_size(): number
    get_n_buffers(): number
    /**
     * Gets the #GtkSourceCompletionWords completion provider that will complete
     * words using the loaded documents.
     * @returns A #GtkSourceCompletionWords
     */
    get_word_completion(): GtkSource.CompletionWords
    /**
     * Checks to see if the buffer manager has the file loaded.
     * @param file An #IdeFile.
     * @returns %TRUE if @file is loaded.
     */
    has_file(file: Gio.File): boolean
    /**
     * Asynchronously requests that the file represented by `file` is loaded. If the file is already
     * loaded, the previously loaded version of the file will be returned, asynchronously.
     * 
     * Before loading the file, #IdeBufferManager will check the file size to help protect itself
     * from the user accidentally loading very large files. You can change the maximum size of file
     * that will be loaded with the #IdeBufferManager:max-file-size property.
     * 
     * See ide_buffer_manager_load_file_finish() for how to complete this asynchronous request.
     * @param file 
     * @param force_reload 
     * @param flags 
     * @param cancellable 
     * @param callback 
     */
    load_file_async(file: File, force_reload: boolean, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): /* progress */ Progress | null

    // Overloads of load_file_async

    /**
     * Promisified version of {@link load_file_async}
     * 
     * Asynchronously requests that the file represented by `file` is loaded. If the file is already
     * loaded, the previously loaded version of the file will be returned, asynchronously.
     * 
     * Before loading the file, #IdeBufferManager will check the file size to help protect itself
     * from the user accidentally loading very large files. You can change the maximum size of file
     * that will be loaded with the #IdeBufferManager:max-file-size property.
     * 
     * See ide_buffer_manager_load_file_finish() for how to complete this asynchronous request.
     * @param file 
     * @param force_reload 
     * @param flags 
     * @param cancellable 
     * @returns A Promise of: An #IdeBuffer if successful; otherwise %NULL and @error is set.
     */
    load_file_async(file: File, force_reload: boolean, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null): globalThis.Promise<Buffer>
    /**
     * Completes an asynchronous request to load a file via ide_buffer_manager_load_file_async().
     * If the buffer was already loaded, this function will return a reference to the previous buffer
     * with its reference count incremented by one.
     * @param result 
     * @returns An #IdeBuffer if successful; otherwise %NULL and @error is set.
     */
    load_file_finish(result: Gio.AsyncResult): Buffer
    save_all_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_all_async

    /**
     * Promisified version of {@link save_all_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link save_all_async}
     */
    save_all_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    save_all_finish(result: Gio.AsyncResult): boolean
    /**
     * This function asynchronously requests that a buffer be saved to the storage represented by
     * `file`. `buffer` should be a previously loaded buffer owned by `self,` such as one loaded with
     * ide_buffer_manager_load_file_async().
     * 
     * Call ide_buffer_manager_save_file_finish() to complete this asynchronous request.
     * @param buffer 
     * @param file 
     * @param progress 
     * @param cancellable 
     * @param callback 
     */
    save_file_async(buffer: Buffer, file: File, progress: Progress, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_file_async

    /**
     * Promisified version of {@link save_file_async}
     * 
     * This function asynchronously requests that a buffer be saved to the storage represented by
     * `file`. `buffer` should be a previously loaded buffer owned by `self,` such as one loaded with
     * ide_buffer_manager_load_file_async().
     * 
     * Call ide_buffer_manager_save_file_finish() to complete this asynchronous request.
     * @param buffer 
     * @param file 
     * @param progress 
     * @param cancellable 
     * @returns A Promise of: %TRUE if successful %FALSE upon failure and @error is set.
     */
    save_file_async(buffer: Buffer, file: File, progress: Progress, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    /**
     * This function completes an asynchronous request to save a buffer to storage using
     * ide_buffer_manager_save_file_async(). Upon failure, %FALSE is returned and `error` is set.
     * @param result 
     * @returns %TRUE if successful %FALSE upon failure and @error is set.
     */
    save_file_finish(result: Gio.AsyncResult): boolean
    set_focus_buffer(buffer: Buffer): void
    /**
     * Sets the maximum file size in bytes, that will be loaded by the #IdeBufferManager.
     * @param max_file_size The maximum file size in bytes, or zero for no limit.
     */
    set_max_file_size(max_file_size: number): void

    // Own signals of Ide-1.0.Ide.BufferManager

    connect(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback): number
    connect_after(sigName: "buffer-focus-enter", callback: BufferManager.BufferFocusEnterSignalCallback): number
    emit(sigName: "buffer-focus-enter", buffer: Buffer, ...args: any[]): void
    connect(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback): number
    connect_after(sigName: "buffer-focus-leave", callback: BufferManager.BufferFocusLeaveSignalCallback): number
    emit(sigName: "buffer-focus-leave", buffer: Buffer, ...args: any[]): void
    connect(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback): number
    connect_after(sigName: "buffer-loaded", callback: BufferManager.BufferLoadedSignalCallback): number
    emit(sigName: "buffer-loaded", buffer: Buffer, ...args: any[]): void
    connect(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback): number
    connect_after(sigName: "buffer-saved", callback: BufferManager.BufferSavedSignalCallback): number
    emit(sigName: "buffer-saved", buffer: Buffer, ...args: any[]): void
    connect(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback): number
    connect_after(sigName: "buffer-unloaded", callback: BufferManager.BufferUnloadedSignalCallback): number
    emit(sigName: "buffer-unloaded", buffer: Buffer, ...args: any[]): void
    connect(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback): number
    connect_after(sigName: "create-buffer", callback: BufferManager.CreateBufferSignalCallback): number
    emit(sigName: "create-buffer", file: File, ...args: any[]): void
    connect(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback): number
    connect_after(sigName: "load-buffer", callback: BufferManager.LoadBufferSignalCallback): number
    emit(sigName: "load-buffer", buffer: Buffer, create_new_view: boolean, ...args: any[]): void
    connect(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback): number
    connect_after(sigName: "save-buffer", callback: BufferManager.SaveBufferSignalCallback): number
    emit(sigName: "save-buffer", buffer: Buffer, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BufferManager

    connect(sigName: "notify::auto-save", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-save", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::auto-save", ...args: any[]): void
    connect(sigName: "notify::auto-save-timeout", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-save-timeout", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::auto-save-timeout", ...args: any[]): void
    connect(sigName: "notify::focus-buffer", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-buffer", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-buffer", ...args: any[]): void
    connect(sigName: "notify::minimum-word-size", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-word-size", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::minimum-word-size", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BufferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BufferManager extends Object {

    // Own properties of Ide-1.0.Ide.BufferManager

    static name: string
    static $gtype: GObject.GType<BufferManager>

    // Constructors of Ide-1.0.Ide.BufferManager

    constructor(config?: BufferManager.ConstructorProperties) 
    _init(config?: BufferManager.ConstructorProperties): void
}

module BuildManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `build-failed`
     */
    interface BuildFailedSignalCallback {
        ($obj: BuildManager, pipeline: BuildPipeline): void
    }

    /**
     * Signal callback interface for `build-finished`
     */
    interface BuildFinishedSignalCallback {
        ($obj: BuildManager, pipeline: BuildPipeline): void
    }

    /**
     * Signal callback interface for `build-started`
     */
    interface BuildStartedSignalCallback {
        ($obj: BuildManager, pipeline: BuildPipeline): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.Initable.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface BuildManager extends Gio.ActionGroup, Gio.Initable {

    // Own properties of Ide-1.0.Ide.BuildManager

    /**
     * The "busy" property indicates if there is currently a build
     * executing. This can be bound to UI elements to display to the
     * user that a build is active (and therefore other builds cannot
     * be activated at the moment).
     */
    readonly busy: boolean
    /**
     * Gets if the build manager can queue a build request.
     * 
     * This might be false if the required runtime is not available or other
     * errors in setting up the build pipeline.
     */
    readonly can_build: boolean
    /**
     * The "has-diagnostics" property indicates that there have been
     * diagnostics found during the last execution of the build pipeline.
     */
    readonly has_diagnostics: boolean
    /**
     * The "last-build-time" property contains a #GDateTime of the time
     * the last build request was submitted.
     */
    readonly last_build_time: GLib.DateTime
    /**
     * The "message" property contains a string message describing
     * the current state of the build process. This may be bound to
     * UI elements to notify the user of the buid progress.
     */
    readonly message: string | null
    readonly pipeline: BuildPipeline
    /**
     * The "running-time" property can be bound by UI elements that
     * want to track how long the current build has taken. g_object_notify()
     * is called on a regular interval during the build so that the UI
     * elements may automatically update.
     * 
     * The value of this property is a #GTimeSpan, which are 64-bit signed
     * integers with microsecond precision. See %G_USEC_PER_SEC for a constant
     * to tranform this to seconds.
     */
    readonly running_time: number

    // Owm methods of Ide-1.0.Ide.BuildManager

    /**
     * This function will cancel any in-flight builds.
     * 
     * You may also activate this using the "cancel" #GAction provided
     * by the #GActionGroup interface.
     */
    cancel(): void
    clean_async(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of clean_async

    /**
     * Promisified version of {@link clean_async}
     * 
     * 
     * @param phase 
     * @param cancellable 
     * @returns A Promise of the result of {@link clean_async}
     */
    clean_async(phase: BuildPhase, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    clean_finish(result: Gio.AsyncResult): boolean
    /**
     * This function will request that `phase` is completed in the underlying
     * build pipeline and execute a build. Upon completion, `callback` will be
     * executed and it can determine the success or failure of the operation
     * using ide_build_manager_execute_finish().
     * @param phase An #IdeBuildPhase or 0
     * @param cancellable A #GCancellable or %NULL
     * @param callback A callback to execute upon completion
     */
    execute_async(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of execute_async

    /**
     * Promisified version of {@link execute_async}
     * 
     * This function will request that `phase` is completed in the underlying
     * build pipeline and execute a build. Upon completion, `callback` will be
     * executed and it can determine the success or failure of the operation
     * using ide_build_manager_execute_finish().
     * @param phase An #IdeBuildPhase or 0
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of: %TRUE if successful, otherwise %FALSE and @error is set.
     */
    execute_async(phase: BuildPhase, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    /**
     * Completes a request to ide_build_manager_execute_async().
     * @param result A #GAsyncResult
     * @returns %TRUE if successful, otherwise %FALSE and @error is set.
     */
    execute_finish(result: Gio.AsyncResult): boolean
    /**
     * Gets if the #IdeBuildManager is currently busy building the
     * project.
     * 
     * See #IdeBuildManager:busy for more information.
     */
    get_busy(): boolean
    get_can_build(): boolean
    /**
     * This function returns a #GDateTime of the last build request. If
     * there has not yet been a build request, this will return %NULL.
     * 
     * See #IdeBuildManager:last-build-time for more information.
     * @returns A #GDateTime or %NULL.
     */
    get_last_build_time(): GLib.DateTime | null
    /**
     * This function returns the current build message as a string.
     * 
     * See #IdeBuildManager:message for more information.
     * @returns A string containing the build message or %NULL
     */
    get_message(): string | null
    /**
     * This function gets the current build pipeline. The pipeline will be
     * reloaded as build configurations change.
     * @returns An #IdeBuildPipeline.
     */
    get_pipeline(): BuildPipeline | null
    /**
     * Gets the amount of elapsed time of the current build as a
     * #GTimeSpan.
     * @returns A #GTimeSpan containing the elapsed time of the build.
     */
    get_running_time(): GLib.TimeSpan
    rebuild_async(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of rebuild_async

    /**
     * Promisified version of {@link rebuild_async}
     * 
     * 
     * @param phase 
     * @param cancellable 
     * @returns A Promise of the result of {@link rebuild_async}
     */
    rebuild_async(phase: BuildPhase, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    rebuild_finish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.BuildManager

    connect(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback): number
    connect_after(sigName: "build-failed", callback: BuildManager.BuildFailedSignalCallback): number
    emit(sigName: "build-failed", pipeline: BuildPipeline, ...args: any[]): void
    connect(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback): number
    connect_after(sigName: "build-finished", callback: BuildManager.BuildFinishedSignalCallback): number
    emit(sigName: "build-finished", pipeline: BuildPipeline, ...args: any[]): void
    connect(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback): number
    connect_after(sigName: "build-started", callback: BuildManager.BuildStartedSignalCallback): number
    emit(sigName: "build-started", pipeline: BuildPipeline, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildManager

    connect(sigName: "notify::busy", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::can-build", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-build", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-build", ...args: any[]): void
    connect(sigName: "notify::has-diagnostics", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-diagnostics", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-diagnostics", ...args: any[]): void
    connect(sigName: "notify::last-build-time", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-build-time", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::last-build-time", ...args: any[]): void
    connect(sigName: "notify::message", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: "notify::pipeline", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pipeline", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pipeline", ...args: any[]): void
    connect(sigName: "notify::running-time", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::running-time", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::running-time", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildManager extends Object {

    // Own properties of Ide-1.0.Ide.BuildManager

    static name: string
    static $gtype: GObject.GType<BuildManager>

    // Constructors of Ide-1.0.Ide.BuildManager

    constructor(config?: BuildManager.ConstructorProperties) 
    _init(config?: BuildManager.ConstructorProperties): void
}

module BuildPipeline {

    // Signal callback interfaces

    /**
     * Signal callback interface for `diagnostic`
     */
    interface DiagnosticSignalCallback {
        ($obj: BuildPipeline, diagnostic: Diagnostic): void
    }

    /**
     * Signal callback interface for `finished`
     */
    interface FinishedSignalCallback {
        ($obj: BuildPipeline, failed: boolean): void
    }

    /**
     * Signal callback interface for `started`
     */
    interface StartedSignalCallback {
        ($obj: BuildPipeline, phase: BuildPhase): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildPipeline

        /**
         * Gets the "busy" property. If %TRUE, the pipeline is busy executing.
         */
        busy?: boolean | null
        /**
         * The configuration to use for the build pipeline.
         */
        configuration?: Configuration | null
    }

}

interface BuildPipeline extends Gio.Initable {

    // Own properties of Ide-1.0.Ide.BuildPipeline

    /**
     * Gets the "busy" property. If %TRUE, the pipeline is busy executing.
     */
    busy: boolean
    /**
     * The configuration to use for the build pipeline.
     */
    readonly configuration: Configuration
    readonly message: string | null
    /**
     * The current build phase during execution of the pipeline.
     */
    readonly phase: BuildPhase

    // Owm methods of Ide-1.0.Ide.BuildPipeline

    /**
     * This can be used to add a regex that will extract errors from
     * standard output. This is similar to the "errorformat" feature
     * of vim to extract warnings from standard output.
     * 
     * The regex should used named capture groups to pass information
     * to the extraction process.
     * 
     * Supported group names are:
     * 
     *  • filename (a string path)
     *  • line (an integer)
     *  • column (an integer)
     *  • level (a string)
     *  • message (a string)
     * 
     * For example, to extract warnings from GCC you might do something
     * like the following:
     * 
     *   "(?<filename>[a-zA-Z0-9\\-\\.\\/]+):"
     *   "(?<line>\\d+):"
     *   "(?<column>\\d+): "
     *   "(?<level>[\\w\\s]+): "
     *   "(?<message>.*)"
     * 
     * To remove the regex, use the ide_build_pipeline_remove_error_format()
     * function with the resulting format id returned from this function.
     * 
     * The resulting format id will be > 0 if successful.
     * @param regex A regex to be compiled
     * @param flags 
     * @returns an error format id that may be passed to   ide_build_pipeline_remove_error_format().
     */
    add_error_format(regex: string | null, flags: GLib.RegexCompileFlags): number
    add_log_observer(observer: BuildLogObserver): number
    clean_async(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of clean_async

    /**
     * Promisified version of {@link clean_async}
     * 
     * 
     * @param phase 
     * @param cancellable 
     * @returns A Promise of the result of {@link clean_async}
     */
    clean_async(phase: BuildPhase, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    clean_finish(result: Gio.AsyncResult): boolean
    /**
     * Insert `stage` into the pipeline as part of the phase denoted by `phase`.
     * 
     * If priority is non-zero, it will be used to sort the stage among other
     * stages that are part of the same phase.
     * @param phase An #IdeBuildPhase
     * @param priority an optional priority for sorting within the phase
     * @param stage An #IdeBuildStage
     * @returns A stage_id that may be passed to ide_build_pipeline_disconnect().
     */
    connect(phase: BuildPhase, priority: number, stage: BuildStage): number
    /**
     * This creates a new stage that will spawn a process using `launcher` and log
     * the output of stdin/stdout.
     * 
     * It is a programmer error to modify `launcher` after passing it to this
     * function.
     * @param phase An #IdeBuildPhase
     * @param priority an optional priority for sorting within the phase
     * @param launcher An #IdeSubprocessLauncher
     * @returns A stage_id that may be passed to ide_build_pipeline_remove().
     */
    connect_launcher(phase: BuildPhase, priority: number, launcher: SubprocessLauncher): number
    /**
     * This is a convenience function to create a new #IdeSubprocessLauncher
     * using the configuration and runtime associated with the pipeline.
     * @returns An #IdeSubprocessLauncher.
     */
    create_launcher(): SubprocessLauncher
    /**
     * This removes the stage matching `stage_id`. You are returned a `stage_id` when
     * inserting a stage with functions such as ide_build_pipeline_connect()
     * or ide_build_pipeline_connect_launcher().
     * 
     * Plugins should use this function to remove their stages when the plugin
     * is unloading.
     * @param stage_id An identifier returned from adding a stage
     */
    disconnect(stage_id: number): void
    emit_diagnostic(diagnostic: Diagnostic): void
    /**
     * Asynchronously starts the build pipeline.
     * 
     * Any phase that has been invalidated up to the requested phase
     * will be executed until a stage has failed.
     * 
     * Upon completion, `callback` will be executed and should call
     * ide_build_pipeline_execute_finish() to get the status of the
     * operation.
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to execute upon completion
     */
    execute_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of execute_async

    /**
     * Promisified version of {@link execute_async}
     * 
     * Asynchronously starts the build pipeline.
     * 
     * Any phase that has been invalidated up to the requested phase
     * will be executed until a stage has failed.
     * 
     * Upon completion, `callback` will be executed and should call
     * ide_build_pipeline_execute_finish() to get the status of the
     * operation.
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of: %TRUE if successful; otherwise %FALSE and @error is set.
     */
    execute_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    execute_finish(result: Gio.AsyncResult): boolean
    /**
     * This function will call `stage_callback` for every #IdeBuildStage registered
     * in the pipeline.
     * @param stage_callback A callback for each #IdePipelineStage
     */
    foreach_stage(stage_callback: GLib.Func): void
    /**
     * Gets the "builddir" to be used for the build process. This is generally
     * the location that build systems will use for out-of-tree builds.
     * @returns the path of the build directory
     */
    get_builddir(): string | null
    get_busy(): boolean
    /**
     * Gets the #IdeConfiguration to use for the pipeline.
     * @returns An #IdeConfiguration
     */
    get_configuration(): Configuration
    /**
     * Gets the current message for the build pipeline. This can be
     * shown to users in UI elements to signify progress in the
     * build.
     * @returns A string representing the   current stage of the build, or %NULL.
     */
    get_message(): string | null
    /**
     * Gets the "srcdir" of the project. This is equivalent to the
     * IdeVcs:working-directory property as a string.
     * @returns the path of the source directory
     */
    get_srcdir(): string | null
    /**
     * Gets the stage matching the identifier `stage_id` as returned from
     * ide_build_pipeline_connect().
     * @param stage_id the identfier of the stage
     * @returns An #IdeBuildStage or %NULL if the   stage could not be found.
     */
    get_stage_by_id(stage_id: number): BuildStage | null
    /**
     * Invalidates the phases matching `phases` flags.
     * 
     * If the requested phases include the phases invalidated here, the next
     * execution of the pipeline will execute thse phases.
     * 
     * This should be used by plugins to ensure a particular phase is re-executed
     * upon discovering its state is no longer valid. Such an example might be
     * invalidating the %IDE_BUILD_PHASE_AUTOGEN phase when the an autotools
     * projects autogen.sh file has been changed.
     * @param phases The phases to invalidate
     */
    invalidate_phase(phases: BuildPhase): void
    rebuild_async(phase: BuildPhase, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of rebuild_async

    /**
     * Promisified version of {@link rebuild_async}
     * 
     * 
     * @param phase 
     * @param cancellable 
     * @returns A Promise of the result of {@link rebuild_async}
     */
    rebuild_async(phase: BuildPhase, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    rebuild_finish(result: Gio.AsyncResult): boolean
    /**
     * Removes an error format that was registered with
     * ide_build_pipeline_add_error_format().
     * @param error_format_id an identifier for the error format.
     * @returns %TRUE if the error format was removed.
     */
    remove_error_format(error_format_id: number): boolean
    remove_log_observer(observer_id: number): boolean
    /**
     * Requests that the next execution of the pipeline will build up to `phase`
     * including all stages that were previously invalidated.
     * @param phase An #IdeBuildPhase
     * @returns %TRUE if a stage is known to require execution.
     */
    request_phase(phase: BuildPhase): boolean

    // Own signals of Ide-1.0.Ide.BuildPipeline

    connect(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback): number
    connect_after(sigName: "diagnostic", callback: BuildPipeline.DiagnosticSignalCallback): number
    emit(sigName: "diagnostic", diagnostic: Diagnostic, ...args: any[]): void
    connect(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback): number
    connect_after(sigName: "finished", callback: BuildPipeline.FinishedSignalCallback): number
    emit(sigName: "finished", failed: boolean, ...args: any[]): void
    connect(sigName: "started", callback: BuildPipeline.StartedSignalCallback): number
    connect_after(sigName: "started", callback: BuildPipeline.StartedSignalCallback): number
    emit(sigName: "started", phase: BuildPhase, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildPipeline

    connect(sigName: "notify::busy", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::configuration", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::configuration", ...args: any[]): void
    connect(sigName: "notify::message", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: "notify::phase", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::phase", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::phase", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildPipeline, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * The #IdeBuildPipeline is responsible for managing the build process
 * for Builder. It consists of multiple build "phases" (see #IdeBuildPhase
 * for the individual phases). An #IdeBuildStage can be attached with
 * a priority to each phase and is the primary mechanism that plugins
 * use to perform their operations in the proper ordering.
 * 
 * For example, the flatpak plugin provides its download stage as part of the
 * %IDE_BUILD_PHASE_DOWNLOAD phase. The autotools plugin provides stages to
 * phases such as %IDE_BUILD_PHASE_AUTOGEN, %IDE_BUILD_PHASE_CONFIGURE,
 * %IDE_BUILD_PHASE_BUILD, and %IDE_BUILD_PHASE_INSTALL.
 * 
 * If you want ensure a particular phase is performed as part of a build,
 * then fall ide_build_pipeline_request_phase() with the phase you are
 * interested in seeing complete successfully.
 * 
 * If your plugin has discovered that something has changed that invalidates a
 * given phase, use ide_build_pipeline_invalidate_phase() to ensure that the
 * phase is re-executed the next time a requested phase of higher precidence
 * is requested.
 * 
 * It can be useful to perform operations before or after a given stage (but
 * still be executed as part of that stage) so the %IDE_BUILD_PHASE_BEFORE and
 * %IDE_BUILD_PHASE_AFTER flags may be xor'd with the requested phase.  If more
 * precise ordering is required, you may use the priority parameter to order
 * the operation with regards to other stages in that phase.
 * 
 * Transient stages may be added to the pipeline and they will be removed after
 * the ide_build_pipeline_execute_async() operation has completed successfully
 * or has failed. You can mark a stage as trandient with
 * ide_build_stage_set_transient(). This may be useful to perform operations
 * such as an "export tarball" stage which should only run once as determined
 * by the user requesting a "make dist" style operation.
 * @class 
 */
class BuildPipeline extends Object {

    // Own properties of Ide-1.0.Ide.BuildPipeline

    static name: string
    static $gtype: GObject.GType<BuildPipeline>

    // Constructors of Ide-1.0.Ide.BuildPipeline

    constructor(config?: BuildPipeline.ConstructorProperties) 
    _init(config?: BuildPipeline.ConstructorProperties): void
}

module BuildStage {

    // Signal callback interfaces

    /**
     * Signal callback interface for `chain`
     */
    interface ChainSignalCallback {
        ($obj: BuildStage, object: BuildStage): boolean
    }

    /**
     * Signal callback interface for `query`
     */
    interface QuerySignalCallback {
        ($obj: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): void
    }

    /**
     * Signal callback interface for `reap`
     */
    interface ReapSignalCallback {
        ($obj: BuildStage, reaper: Dazzle.DirectoryReaper): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStage

        /**
         * Most build systems will preserve stderr for the processes they call, such
         * as gcc, clang, and others. However, if your build system redirects all
         * output to stdout, you may need to set this property to %TRUE to ensure
         * that Builder will extract errors from stdout.
         * 
         * One such example is Ninja.
         */
        check_stdout?: boolean | null
        /**
         * The "completed" property is set to %TRUE after the pipeline has
         * completed processing the stage. When the pipeline invalidates
         * phases, completed may be reset to %FALSE.
         */
        completed?: boolean | null
        /**
         * If the build stage is disabled. This allows you to have a stage that is
         * attached but will not be activated during execution.
         * 
         * You may enable it later and then re-execute the pipeline.
         * 
         * If the stage is both transient and disabled, it will not be removed during
         * the transient cleanup phase.
         */
        disabled?: boolean | null
        /**
         * The name of the build stage. This is only used by UI to view
         * the build pipeline.
         */
        name?: string | null
        /**
         * The "stdout-path" property allows a build stage to redirect its log
         * messages to a stdout file. Instead of passing stdout along to the
         * build pipeline, they will be redirected to this file.
         * 
         * For safety reasons, the contents are first redirected to a temporary
         * file and will be redirected to the stdout-path location after the
         * build stage has completed executing.
         */
        stdout_path?: string | null
        /**
         * If the build stage is transient.
         * 
         * A transient build stage is removed after the completion of
         * ide_build_pipeline_execute_async(). This can be a convenient
         * way to add a temporary item to a build pipeline that should
         * be immediately discarded.
         */
        transient?: boolean | null
    }

}

interface BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStage

    /**
     * Most build systems will preserve stderr for the processes they call, such
     * as gcc, clang, and others. However, if your build system redirects all
     * output to stdout, you may need to set this property to %TRUE to ensure
     * that Builder will extract errors from stdout.
     * 
     * One such example is Ninja.
     */
    check_stdout: boolean
    /**
     * The "completed" property is set to %TRUE after the pipeline has
     * completed processing the stage. When the pipeline invalidates
     * phases, completed may be reset to %FALSE.
     */
    completed: boolean
    /**
     * If the build stage is disabled. This allows you to have a stage that is
     * attached but will not be activated during execution.
     * 
     * You may enable it later and then re-execute the pipeline.
     * 
     * If the stage is both transient and disabled, it will not be removed during
     * the transient cleanup phase.
     */
    disabled: boolean
    /**
     * The name of the build stage. This is only used by UI to view
     * the build pipeline.
     */
    name: string | null
    /**
     * The "stdout-path" property allows a build stage to redirect its log
     * messages to a stdout file. Instead of passing stdout along to the
     * build pipeline, they will be redirected to this file.
     * 
     * For safety reasons, the contents are first redirected to a temporary
     * file and will be redirected to the stdout-path location after the
     * build stage has completed executing.
     */
    stdout_path: string | null
    /**
     * If the build stage is transient.
     * 
     * A transient build stage is removed after the completion of
     * ide_build_pipeline_execute_async(). This can be a convenient
     * way to add a temporary item to a build pipeline that should
     * be immediately discarded.
     */
    transient: boolean

    // Own fields of Ide-1.0.Ide.BuildStage

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.BuildStage

    chain(next: BuildStage): boolean
    clean_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of clean_async

    /**
     * Promisified version of {@link clean_async}
     * 
     * 
     * @param pipeline 
     * @param cancellable 
     * @returns A Promise of the result of {@link clean_async}
     */
    clean_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    clean_finish(result: Gio.AsyncResult): boolean
    emit_reap(reaper: Dazzle.DirectoryReaper): void
    execute_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of execute_async

    /**
     * Promisified version of {@link execute_async}
     * 
     * 
     * @param pipeline 
     * @param cancellable 
     * @returns A Promise of the result of {@link execute_async}
     */
    execute_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    execute_finish(result: Gio.AsyncResult): boolean
    get_check_stdout(): boolean
    get_completed(): boolean
    get_disabled(): boolean
    get_name(): string | null
    get_stdout_path(): string | null
    get_transient(): boolean
    log(stream: BuildLogStream, message: string | null, message_len: number): void
    /**
     * This function will begin logging `subprocess` by reading from the
     * stdout and stderr streams of the subprocess. You must have created
     * the subprocess with %G_SUBPROCESS_FLAGS_STDERR_PIPE and
     * %G_SUBPROCESS_FLAGS_STDOUT_PIPE so that the streams may be read.
     * @param subprocess An #IdeSubprocess
     */
    log_subprocess(subprocess: Subprocess): void
    pause(): void
    set_check_stdout(check_stdout: boolean): void
    set_completed(completed: boolean): void
    set_disabled(disabled: boolean): void
    /**
     * Sets the log observer to handle calls to the various stage logging
     * functions. This will be set by the pipeline to mux logs from all
     * stages into a unified build log.
     * 
     * Plugins that need to handle logging from a build stage should set
     * an observer on the pipeline so that log distribution may be fanned
     * out to all observers.
     * @param observer The observer for the log entries
     */
    set_log_observer(observer: BuildLogObserver): void
    set_name(name: string | null): void
    set_stdout_path(path: string | null): void
    set_transient(transient: boolean): void
    unpause(): void

    // Own virtual methods of Ide-1.0.Ide.BuildStage

    vfunc_chain(next: BuildStage): boolean
    vfunc_clean_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_clean_finish(result: Gio.AsyncResult): boolean
    vfunc_execute(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): boolean
    vfunc_execute_async(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_execute_finish(result: Gio.AsyncResult): boolean
    vfunc_query(pipeline: BuildPipeline, cancellable: Gio.Cancellable | null): void
    vfunc_reap(reaper: Dazzle.DirectoryReaper): void

    // Own signals of Ide-1.0.Ide.BuildStage

    connect(sigName: "chain", callback: BuildStage.ChainSignalCallback): number
    connect_after(sigName: "chain", callback: BuildStage.ChainSignalCallback): number
    emit(sigName: "chain", object: BuildStage, ...args: any[]): void
    connect(sigName: "query", callback: BuildStage.QuerySignalCallback): number
    connect_after(sigName: "query", callback: BuildStage.QuerySignalCallback): number
    emit(sigName: "query", pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, ...args: any[]): void
    connect(sigName: "reap", callback: BuildStage.ReapSignalCallback): number
    connect_after(sigName: "reap", callback: BuildStage.ReapSignalCallback): number
    emit(sigName: "reap", reaper: Dazzle.DirectoryReaper, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.BuildStage

    connect(sigName: "notify::check-stdout", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::check-stdout", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stdout-path", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transient", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildStage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildStage extends Object {

    // Own properties of Ide-1.0.Ide.BuildStage

    static name: string
    static $gtype: GObject.GType<BuildStage>

    // Constructors of Ide-1.0.Ide.BuildStage

    constructor(config?: BuildStage.ConstructorProperties) 
    _init(config?: BuildStage.ConstructorProperties): void
}

module BuildStageLauncher {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStageLauncher

        clean_launcher?: SubprocessLauncher | null
        ignore_exit_status?: boolean | null
        launcher?: SubprocessLauncher | null
    }

}

interface BuildStageLauncher {

    // Own properties of Ide-1.0.Ide.BuildStageLauncher

    clean_launcher: SubprocessLauncher
    ignore_exit_status: boolean
    launcher: SubprocessLauncher

    // Own fields of Ide-1.0.Ide.BuildStageLauncher

    parent_instance: BuildStage & Object & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.BuildStageLauncher

    get_clean_launcher(): SubprocessLauncher | null
    /**
     * Gets the "ignore-exit-status" property.
     * 
     * If set to %TRUE, a non-zero exit status from the subprocess will not cause
     * the build stage to fail.
     */
    get_ignore_exit_status(): boolean
    get_launcher(): SubprocessLauncher
    set_clean_launcher(clean_launcher: SubprocessLauncher): void
    /**
     * Sets the "ignore-exit-status" property.
     * 
     * If set to %TRUE, a non-zero exit status from the subprocess will not cause
     * the build stage to fail.
     * @param ignore_exit_status 
     */
    set_ignore_exit_status(ignore_exit_status: boolean): void
    set_launcher(launcher: SubprocessLauncher): void

    // Class property signals of Ide-1.0.Ide.BuildStageLauncher

    connect(sigName: "notify::clean-launcher", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clean-launcher", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::clean-launcher", ...args: any[]): void
    connect(sigName: "notify::ignore-exit-status", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-exit-status", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::ignore-exit-status", ...args: any[]): void
    connect(sigName: "notify::launcher", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::launcher", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::launcher", ...args: any[]): void
    connect(sigName: "notify::check-stdout", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::check-stdout", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stdout-path", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transient", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildStageLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildStageLauncher extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageLauncher

    static name: string
    static $gtype: GObject.GType<BuildStageLauncher>

    // Constructors of Ide-1.0.Ide.BuildStageLauncher

    constructor(config?: BuildStageLauncher.ConstructorProperties) 
    /**
     * Creates a new #IdeBuildStageLauncher that can be attached to an
     * #IdeBuildPipeline.
     * @constructor 
     * @param context An #IdeContext
     * @param launcher An #IdeSubprocessLauncher or %NULL
     * @returns An #IdeBuildStageLauncher
     */
    constructor(context: Context, launcher: SubprocessLauncher | null) 
    /**
     * Creates a new #IdeBuildStageLauncher that can be attached to an
     * #IdeBuildPipeline.
     * @constructor 
     * @param context An #IdeContext
     * @param launcher An #IdeSubprocessLauncher or %NULL
     * @returns An #IdeBuildStageLauncher
     */
    static new(context: Context, launcher: SubprocessLauncher | null): BuildStageLauncher
    _init(config?: BuildStageLauncher.ConstructorProperties): void
}

module BuildStageMkdirs {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {
    }

}

interface BuildStageMkdirs {

    // Own fields of Ide-1.0.Ide.BuildStageMkdirs

    parent_instance: BuildStage & Object & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.BuildStageMkdirs

    add_path(path: string | null, with_parents: boolean, mode: number): void

    // Class property signals of Ide-1.0.Ide.BuildStageMkdirs

    connect(sigName: "notify::check-stdout", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::check-stdout", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stdout-path", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transient", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildStageMkdirs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildStageMkdirs extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageMkdirs

    static name: string
    static $gtype: GObject.GType<BuildStageMkdirs>

    // Constructors of Ide-1.0.Ide.BuildStageMkdirs

    constructor(config?: BuildStageMkdirs.ConstructorProperties) 
    constructor(context: Context) 
    static new(context: Context): BuildStageMkdirs
    _init(config?: BuildStageMkdirs.ConstructorProperties): void
}

module BuildStageTransfer {

    // Constructor properties interface

    interface ConstructorProperties extends BuildStage.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildStageTransfer

        disable_when_metered?: boolean | null
        transfer?: Transfer | null
    }

}

interface BuildStageTransfer {

    // Own properties of Ide-1.0.Ide.BuildStageTransfer

    disable_when_metered: boolean
    readonly transfer: Transfer

    // Conflicting properties

    parent_instance: Object & GObject.Object & GObject.Object

    // Class property signals of Ide-1.0.Ide.BuildStageTransfer

    connect(sigName: "notify::disable-when-metered", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disable-when-metered", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disable-when-metered", ...args: any[]): void
    connect(sigName: "notify::transfer", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transfer", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::check-stdout", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::check-stdout", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::check-stdout", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::disabled", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disabled", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disabled", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::stdout-path", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::stdout-path", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::stdout-path", ...args: any[]): void
    connect(sigName: "notify::transient", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transient", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transient", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildStageTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildStageTransfer extends BuildStage {

    // Own properties of Ide-1.0.Ide.BuildStageTransfer

    static name: string
    static $gtype: GObject.GType<BuildStageTransfer>

    // Constructors of Ide-1.0.Ide.BuildStageTransfer

    constructor(config?: BuildStageTransfer.ConstructorProperties) 
    constructor(context: Context, transfer: Transfer) 
    static new(context: Context, transfer: Transfer): BuildStageTransfer
    _init(config?: BuildStageTransfer.ConstructorProperties): void
}

module BuildconfigConfiguration {

    // Constructor properties interface

    interface ConstructorProperties extends Configuration.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.BuildconfigConfiguration

        postbuild?: string[] | null
        prebuild?: string[] | null
    }

}

interface BuildconfigConfiguration {

    // Own properties of Ide-1.0.Ide.BuildconfigConfiguration

    postbuild: string[]
    prebuild: string[]

    // Conflicting properties

    parent_instance: Object & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.BuildconfigConfiguration

    get_postbuild(): string[]
    get_prebuild(): string[]
    set_postbuild(postbuild: string | null): void
    set_prebuild(prebuild: string | null): void

    // Class property signals of Ide-1.0.Ide.BuildconfigConfiguration

    connect(sigName: "notify::postbuild", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::postbuild", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::postbuild", ...args: any[]): void
    connect(sigName: "notify::prebuild", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prebuild", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::prebuild", ...args: any[]): void
    connect(sigName: "notify::app-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-id", ...args: any[]): void
    connect(sigName: "notify::build-commands", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::build-commands", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::build-commands", ...args: any[]): void
    connect(sigName: "notify::config-opts", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config-opts", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::config-opts", ...args: any[]): void
    connect(sigName: "notify::debug", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::debug", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::debug", ...args: any[]): void
    connect(sigName: "notify::device", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::device", ...args: any[]): void
    connect(sigName: "notify::device-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::device-id", ...args: any[]): void
    connect(sigName: "notify::dirty", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dirty", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::dirty", ...args: any[]): void
    connect(sigName: "notify::display-name", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::environ", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::parallelism", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parallelism", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parallelism", ...args: any[]): void
    connect(sigName: "notify::post-install-commands", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::post-install-commands", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::post-install-commands", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::ready", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::ready", ...args: any[]): void
    connect(sigName: "notify::runtime", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runtime", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::runtime", ...args: any[]): void
    connect(sigName: "notify::runtime-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runtime-id", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::runtime-id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: BuildconfigConfiguration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildconfigConfiguration extends Configuration {

    // Own properties of Ide-1.0.Ide.BuildconfigConfiguration

    static name: string
    static $gtype: GObject.GType<BuildconfigConfiguration>

    // Constructors of Ide-1.0.Ide.BuildconfigConfiguration

    constructor(config?: BuildconfigConfiguration.ConstructorProperties) 
    _init(config?: BuildconfigConfiguration.ConstructorProperties): void
}

module BuildconfigConfigurationProvider {

    // Constructor properties interface

    interface ConstructorProperties extends ConfigurationProvider.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface BuildconfigConfigurationProvider extends ConfigurationProvider {

    // Owm methods of Ide-1.0.Ide.BuildconfigConfigurationProvider

    track_config(config: BuildconfigConfiguration): void

    // Class property signals of Ide-1.0.Ide.BuildconfigConfigurationProvider

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class BuildconfigConfigurationProvider extends GObject.Object {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationProvider

    static name: string
    static $gtype: GObject.GType<BuildconfigConfigurationProvider>

    // Constructors of Ide-1.0.Ide.BuildconfigConfigurationProvider

    constructor(config?: BuildconfigConfigurationProvider.ConstructorProperties) 
    _init(config?: BuildconfigConfigurationProvider.ConstructorProperties): void
}

module CompletionItem {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface CompletionItem {

    // Own fields of Ide-1.0.Ide.CompletionItem

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.CompletionItem

    match(query: string | null, casefold: string | null): boolean
    set_priority(priority: number): void

    // Own virtual methods of Ide-1.0.Ide.CompletionItem

    vfunc_match(query: string | null, casefold: string | null): boolean

    // Class property signals of Ide-1.0.Ide.CompletionItem

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class CompletionItem extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionItem

    static name: string
    static $gtype: GObject.GType<CompletionItem>

    // Constructors of Ide-1.0.Ide.CompletionItem

    constructor(config?: CompletionItem.ConstructorProperties) 
    constructor() 
    static new(): CompletionItem
    _init(config?: CompletionItem.ConstructorProperties): void
    static fuzzy_highlight(haystack: string | null, casefold_query: string | null): string | null
    /**
     * This helper function can do a fuzzy match for you giving a haystack and
     * casefolded needle. Casefold your needle using g_utf8_casefold() before
     * running the query against a batch of #IdeCompletionItem for the best performance.
     * 
     * score will be set with the score of the match upon success. Otherwise,
     * it will be set to zero.
     * @param haystack the string to be searched.
     * @param casefold_needle A g_utf8_casefold() version of the needle.
     * @returns %TRUE if @haystack matched @casefold_needle, otherwise %FALSE.
     */
    static fuzzy_match(haystack: string | null, casefold_needle: string | null): [ /* returnType */ boolean, /* priority */ number ]
}

module CompletionResults {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.CompletionResults

        query?: string | null
    }

}

interface CompletionResults {

    // Own properties of Ide-1.0.Ide.CompletionResults

    readonly query: string | null

    // Own fields of Ide-1.0.Ide.CompletionResults

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.CompletionResults

    get_query(): string | null
    get_size(): number
    invalidate_sort(): void
    present(provider: GtkSource.CompletionProvider, context: GtkSource.CompletionContext): void
    replay(query: string | null): boolean
    take_proposal(proposal: CompletionItem): void

    // Own virtual methods of Ide-1.0.Ide.CompletionResults

    vfunc_compare(left: CompletionItem, right: CompletionItem): number

    // Class property signals of Ide-1.0.Ide.CompletionResults

    connect(sigName: "notify::query", callback: (($obj: CompletionResults, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::query", callback: (($obj: CompletionResults, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::query", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class CompletionResults extends GObject.Object {

    // Own properties of Ide-1.0.Ide.CompletionResults

    static name: string
    static $gtype: GObject.GType<CompletionResults>

    // Constructors of Ide-1.0.Ide.CompletionResults

    constructor(config?: CompletionResults.ConstructorProperties) 
    constructor(query: string | null) 
    static new(query: string | null): CompletionResults
    _init(config?: CompletionResults.ConstructorProperties): void
}

module CompletionWords {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, GtkSource.CompletionWords.ConstructorProperties {
    }

}

interface CompletionWords extends GtkSource.CompletionProvider {

    // Class property signals of Ide-1.0.Ide.CompletionWords

    connect(sigName: "notify::activation", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activation", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::activation", ...args: any[]): void
    connect(sigName: "notify::icon", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::interactive-delay", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interactive-delay", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::interactive-delay", ...args: any[]): void
    connect(sigName: "notify::minimum-word-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::minimum-word-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::minimum-word-size", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::priority", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::priority", ...args: any[]): void
    connect(sigName: "notify::proposals-batch-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::proposals-batch-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::proposals-batch-size", ...args: any[]): void
    connect(sigName: "notify::scan-batch-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scan-batch-size", callback: (($obj: CompletionWords, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scan-batch-size", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class CompletionWords extends GtkSource.CompletionWords {

    // Own properties of Ide-1.0.Ide.CompletionWords

    static name: string
    static $gtype: GObject.GType<CompletionWords>

    // Constructors of Ide-1.0.Ide.CompletionWords

    constructor(config?: CompletionWords.ConstructorProperties) 
    _init(config?: CompletionWords.ConstructorProperties): void
}

module Configuration {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: Configuration): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Configuration

        app_id?: string | null
        build_commands?: string[] | null
        config_opts?: string | null
        debug?: boolean | null
        device?: Device | null
        device_id?: string | null
        dirty?: boolean | null
        display_name?: string | null
        id?: string | null
        parallelism?: number | null
        post_install_commands?: string[] | null
        prefix?: string | null
        runtime?: Runtime | null
        runtime_id?: string | null
    }

}

interface Configuration {

    // Own properties of Ide-1.0.Ide.Configuration

    app_id: string | null
    build_commands: string[]
    config_opts: string | null
    debug: boolean
    device: Device
    device_id: string | null
    dirty: boolean
    display_name: string | null
    readonly environ: string[]
    readonly id: string | null
    parallelism: number
    post_install_commands: string[]
    prefix: string | null
    readonly ready: boolean
    runtime: Runtime
    runtime_id: string | null

    // Own fields of Ide-1.0.Ide.Configuration

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.Configuration

    /**
     * Copies the configuration into a new configuration.
     * @returns An #IdeConfiguration.
     */
    duplicate(): Configuration
    /**
     * Gets the application ID for the configuration.
     * @returns A string.
     */
    get_app_id(): string | null
    get_build_commands(): string[]
    get_config_opts(): string | null
    get_debug(): boolean
    /**
     * Gets the device for the configuration.
     * @returns An #IdeDevice.
     */
    get_device(): Device | null
    get_device_id(): string | null
    get_dirty(): boolean
    get_display_name(): string | null
    /**
     * Gets the environment to use when spawning processes.
     * @returns An array of key=value environment variables.
     */
    get_environ(): string[]
    get_environment(): Environment
    get_id(): string | null
    get_internal_boolean(key: string | null): boolean
    get_internal_int(key: string | null): number
    get_internal_int64(key: string | null): number
    /**
     * Gets the value associated with `key` if it is a #GObject.
     * @param key The key to get
     * @returns A #GObject or %NULL.
     */
    get_internal_object(key: string | null): GObject.Object | null
    get_internal_string(key: string | null): string | null
    get_internal_strv(key: string | null): string[]
    get_parallelism(): number
    get_post_install_commands(): string[]
    get_prefix(): string | null
    /**
     * Determines if the configuration is ready for use. That means that the
     * build device can be accessed and the runtime is loaded. This may change
     * at runtime as devices and runtimes are added or removed.
     * @returns %TRUE if the configuration is ready for use.
     */
    get_ready(): boolean
    /**
     * Gets the runtime for the configuration.
     * @returns An #IdeRuntime
     */
    get_runtime(): Runtime | null
    get_runtime_id(): string | null
    /**
     * This returns a sequence number for the configuration. This is useful
     * for build systems that want to clear the "dirty" bit on the configuration
     * so that they need not bootstrap a second time. This should be done by
     * checking the sequence number before executing the bootstrap, and only
     * cleared if the sequence number matches after performing the bootstrap.
     * This indicates no changes have been made to the configuration in the
     * mean time.
     * @returns A monotonic sequence number.
     */
    get_sequence(): number
    getenv(key: string | null): string | null
    set_app_id(app_id: string | null): void
    set_build_commands(build_commands: string | null): void
    set_config_opts(config_opts: string | null): void
    set_debug(debug: boolean): void
    set_device(device: Device): void
    set_device_id(device_id: string | null): void
    set_dirty(dirty: boolean): void
    set_display_name(display_name: string | null): void
    set_environment(environment: Environment): void
    set_internal_boolean(key: string | null, value: boolean): void
    set_internal_int(key: string | null, value: number): void
    set_internal_int64(key: string | null, value: number): void
    /**
     * Sets the value for `key` to `instance`.
     * @param key the key to set
     * @param instance A #GObject or %NULL
     */
    set_internal_object(key: string | null, instance: GObject.Object | null): void
    set_internal_string(key: string | null, value: string | null): void
    set_internal_strv(key: string | null, value: string | null): void
    set_parallelism(parallelism: number): void
    set_post_install_commands(post_install_commands: string | null): void
    set_prefix(prefix: string | null): void
    set_runtime(runtime: Runtime): void
    set_runtime_id(runtime_id: string | null): void
    setenv(key: string | null, value: string | null): void
    /**
     * Makes a snapshot of the configuration that can be used by build processes
     * to build the project without synchronizing with other threads.
     * @returns A newly allocated #IdeConfiguration.
     */
    snapshot(): Configuration
    supports_device(device: Device): boolean
    supports_runtime(runtime: Runtime): boolean

    // Own virtual methods of Ide-1.0.Ide.Configuration

    /**
     * Gets the device for the configuration.
     * @virtual 
     * @returns An #IdeDevice.
     */
    vfunc_get_device(): Device | null
    /**
     * Gets the runtime for the configuration.
     * @virtual 
     * @returns An #IdeRuntime
     */
    vfunc_get_runtime(): Runtime | null
    vfunc_set_device(device: Device): void
    vfunc_set_runtime(runtime: Runtime): void
    vfunc_supports_device(device: Device): boolean
    vfunc_supports_runtime(runtime: Runtime): boolean

    // Own signals of Ide-1.0.Ide.Configuration

    connect(sigName: "changed", callback: Configuration.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: Configuration.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Configuration

    connect(sigName: "notify::app-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-id", ...args: any[]): void
    connect(sigName: "notify::build-commands", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::build-commands", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::build-commands", ...args: any[]): void
    connect(sigName: "notify::config-opts", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::config-opts", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::config-opts", ...args: any[]): void
    connect(sigName: "notify::debug", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::debug", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::debug", ...args: any[]): void
    connect(sigName: "notify::device", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::device", ...args: any[]): void
    connect(sigName: "notify::device-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::device-id", ...args: any[]): void
    connect(sigName: "notify::dirty", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::dirty", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::dirty", ...args: any[]): void
    connect(sigName: "notify::display-name", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::environ", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::parallelism", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parallelism", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parallelism", ...args: any[]): void
    connect(sigName: "notify::post-install-commands", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::post-install-commands", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::post-install-commands", ...args: any[]): void
    connect(sigName: "notify::prefix", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::prefix", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::prefix", ...args: any[]): void
    connect(sigName: "notify::ready", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ready", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::ready", ...args: any[]): void
    connect(sigName: "notify::runtime", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runtime", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::runtime", ...args: any[]): void
    connect(sigName: "notify::runtime-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runtime-id", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::runtime-id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Configuration, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Configuration extends Object {

    // Own properties of Ide-1.0.Ide.Configuration

    static name: string
    static $gtype: GObject.GType<Configuration>

    // Constructors of Ide-1.0.Ide.Configuration

    constructor(config?: Configuration.ConstructorProperties) 
    constructor(context: Context, id: string | null, device_id: string | null, runtime_id: string | null) 
    static new(context: Context, id: string | null, device_id: string | null, runtime_id: string | null): Configuration
    _init(config?: Configuration.ConstructorProperties): void
}

module ConfigurationManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `invalidate`
     */
    interface InvalidateSignalCallback {
        ($obj: ConfigurationManager): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ConfigurationManager

        current?: Configuration | null
    }

}

interface ConfigurationManager extends Gio.AsyncInitable, Gio.ListModel {

    // Own properties of Ide-1.0.Ide.ConfigurationManager

    current: Configuration
    readonly current_display_name: string | null

    // Owm methods of Ide-1.0.Ide.ConfigurationManager

    add(configuration: Configuration): void
    /**
     * Gets the #IdeConfiguration by id. See ide_configuration_get_id().
     * @param id The string identifier of the configuration
     * @returns An #IdeConfiguration or %NULL if   the configuration could not be found.
     */
    get_configuration(id: string | null): Configuration | null
    /**
     * Gets the current configuration to use for building.
     * 
     * Many systems allow you to pass a configuration in instead of relying on the
     * default configuration. This gets the default configuration that various
     * background items might use, such as tags builders which need to discover
     * settings.
     * @returns An #IdeConfiguration
     */
    get_current(): Configuration
    remove(configuration: Configuration): void
    save_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_async

    /**
     * Promisified version of {@link save_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link save_async}
     */
    save_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    save_finish(result: Gio.AsyncResult): boolean
    set_current(configuration: Configuration): void

    // Own signals of Ide-1.0.Ide.ConfigurationManager

    connect(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback): number
    connect_after(sigName: "invalidate", callback: ConfigurationManager.InvalidateSignalCallback): number
    emit(sigName: "invalidate", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ConfigurationManager

    connect(sigName: "notify::current", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::current", ...args: any[]): void
    connect(sigName: "notify::current-display-name", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::current-display-name", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::current-display-name", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ConfigurationManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ConfigurationManager extends Object {

    // Own properties of Ide-1.0.Ide.ConfigurationManager

    static name: string
    static $gtype: GObject.GType<ConfigurationManager>

    // Constructors of Ide-1.0.Ide.ConfigurationManager

    constructor(config?: ConfigurationManager.ConstructorProperties) 
    _init(config?: ConfigurationManager.ConstructorProperties): void
}

module Context {

    // Signal callback interfaces

    /**
     * Signal callback interface for `loaded`
     */
    interface LoadedSignalCallback {
        ($obj: Context): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Context

        project_file?: Gio.File | null
        root_build_dir?: string | null
        snippets_manager?: SourceSnippetsManager | null
    }

}

interface Context extends Gio.AsyncInitable {

    // Own properties of Ide-1.0.Ide.Context

    readonly back_forward_list: BackForwardList
    readonly buffer_manager: BufferManager
    readonly build_system: BuildSystem
    readonly configuration_manager: ConfigurationManager
    readonly device_manager: DeviceManager
    readonly project: Project
    readonly project_file: Gio.File
    root_build_dir: string | null
    readonly runtime_manager: RuntimeManager
    readonly search_engine: SearchEngine
    snippets_manager: SourceSnippetsManager
    readonly unsaved_files: UnsavedFiles
    readonly vcs: Vcs

    // Owm methods of Ide-1.0.Ide.Context

    /**
     * Retrieves the global back forward list for the #IdeContext.
     * 
     * Consumers of this should branch the #IdeBackForwardList and merge them
     * when their document stack is closed.
     * 
     * See ide_back_forward_list_branch() and ide_back_forward_list_merge() for
     * more information.
     * @returns An #IdeBackForwardList.
     */
    get_back_forward_list(): BackForwardList
    /**
     * Gets the #IdeContext:buffer-manager property. The buffer manager is responsible for loading
     * and saving buffers (files) within the #IdeContext. It provides a convenient place for scripts
     * to hook into the load and save process.
     * @returns An #IdeBufferManager.
     */
    get_buffer_manager(): BufferManager
    get_build_manager(): BuildManager
    /**
     * Fetches the "build-system" property of `context`.
     * @returns An #IdeBuildSystem.
     */
    get_build_system(): BuildSystem
    /**
     * Gets the #IdeConfigurationManager for the context.
     * 
     * The configuration manager is responsible for loading and saving
     * configurations. Configurations consist of information about how to
     * perform a particular build. Such information includes the target
     * #IdeDevice, the #IdeRuntime to use, and various other build options.
     * @returns An #IdeConfigurationManager.
     */
    get_configuration_manager(): ConfigurationManager
    /**
     * Retrieves the "device-manager" property. The device manager is responsible
     * for connecting and disconnecting to physical or virtual devices within
     * LibIDE.
     * @returns An #IdeDeviceManager.
     */
    get_device_manager(): DeviceManager
    /**
     * Gets the #IdeDiagnosticsManager for the context.
     * @returns An #IdeDiagnosticsManager.
     */
    get_diagnostics_manager(): DiagnosticsManager
    /**
     * Retrieves the #IdeProject for the context.
     * @returns An #IdeContext.
     */
    get_project(): Project
    /**
     * Retrieves a #GFile containing the project file that was used to load
     * the context.
     * @returns A #GFile.
     */
    get_project_file(): Gio.File
    /**
     * Gets the IdeContext:recent-manager property. The recent manager is a GtkRecentManager instance
     * that should be used for the workbench.
     * @returns A #GtkRecentManager.
     */
    get_recent_manager(): Gtk.RecentManager
    /**
     * Retrieves the "root-build-dir" for the context. This is the root directory
     * that will contain builds made for various devices.
     * @returns A string containing the "root-build-dir" property.
     */
    get_root_build_dir(): string | null
    /**
     * Gets the #IdeRunManager for the context. This manager object simplifies
     * the process of running an #IdeBuildTarget from the build system. Primarily,
     * it enforces that only a single target may be run at a time, since that is
     * what the UI will expect.
     * @returns An #IdeRunManager.
     */
    get_run_manager(): RunManager
    /**
     * Gets the #IdeRuntimeManager for the LibIDE context.
     * 
     * The runtime manager provies access to #IdeRuntime instances via the
     * #GListModel interface. These can provide support for building projects
     * in various runtimes such as xdg-app.
     * @returns An #IdeRuntimeManager.
     */
    get_runtime_manager(): RuntimeManager
    /**
     * Retrieves the search engine for the context.
     * @returns An #IdeSearchEngine.
     */
    get_search_engine(): SearchEngine
    /**
     * Retrieves a service matching `service_type`. If no match was found, a type
     * implementing the requested service type will be returned. If no matching
     * service type could be found, then an instance of the service will be
     * created, started, and returned.
     * @param service_type A #GType of the service desired.
     * @returns An #IdeService or %NULL.
     */
    get_service_typed(service_type: GObject.GType): Service | null
    /**
     * Gets an #IdeSettings representing the given #GSettingsSchema.
     * 
     * relative_path will be used to apply multiple layers of settings. Project settings will be
     * applied to first, followed by global settings.
     * @param schema_id 
     * @param relative_path 
     * @returns An #IdeSettings.
     */
    get_settings(schema_id: string | null, relative_path: string | null): Settings
    /**
     * Gets the #IdeContext:snippets-manager property.
     * @returns An #IdeSourceSnippetsManager.
     */
    get_snippets_manager(): SourceSnippetsManager
    /**
     * Gets the #IdeTransferManager for the context.
     * @returns An #IdeTransferManager.
     */
    get_transfer_manager(): TransferManager
    /**
     * Returns the unsaved files for the #IdeContext. These are the contents of
     * open buffers in the IDE.
     * @returns An #IdeUnsavedFiles.
     */
    get_unsaved_files(): UnsavedFiles
    /**
     * Retrieves the #IdeVcs used to load the project. If no version control system
     * could be found, this will return an #IdeDirectoryVcs.
     * @returns An #IdeVcs.
     */
    get_vcs(): Vcs
    /**
     * Puts a hold on the #IdeContext, preventing the context from being unloaded
     * until a call to ide_context_release().
     * 
     * If ide_context_unload_async() is called while a hold is in progress, the
     * unload will be delayed until ide_context_release() has been called the
     * same number of times as ide_context_hold().
     */
    hold(): void
    /**
     * Adds a hold on `self` for the lifetime of `instance`.
     * @param instance A #GObject instance
     */
    hold_for_object(instance: GObject.Object): void
    /**
     * Releases a hold on the context previously created with ide_context_hold().
     * 
     * If a pending unload of the context has been requested, it will be dispatched
     * once the hold count reaches zero.
     */
    release(): void
    restore_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of restore_async

    /**
     * Promisified version of {@link restore_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link restore_async}
     */
    restore_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    restore_finish(result: Gio.AsyncResult): boolean
    /**
     * Sets the "root-build-dir" property. This is the root directory that will
     * be used when building projects for projects that support building out of
     * tree.
     * @param root_build_dir the path to the root build directory.
     */
    set_root_build_dir(root_build_dir: string | null): void
    /**
     * This function attempts to unload various components in the #IdeContext. This
     * should be called before you dispose the context. Unsaved buffers will be
     * persisted to the drafts directory.  More operations may be added in the
     * future.
     * 
     * If there is a hold on the #IdeContext, created by ide_context_hold(), then
     * the unload request will be delayed until the appropriate number of calls to
     * ide_context_release() have been called.
     * @param cancellable 
     * @param callback 
     */
    unload_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of unload_async

    /**
     * Promisified version of {@link unload_async}
     * 
     * This function attempts to unload various components in the #IdeContext. This
     * should be called before you dispose the context. Unsaved buffers will be
     * persisted to the drafts directory.  More operations may be added in the
     * future.
     * 
     * If there is a hold on the #IdeContext, created by ide_context_hold(), then
     * the unload request will be delayed until the appropriate number of calls to
     * ide_context_release() have been called.
     * @param cancellable 
     * @returns A Promise of the result of {@link unload_async}
     */
    unload_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    unload_finish(result: Gio.AsyncResult): boolean

    // Own signals of Ide-1.0.Ide.Context

    connect(sigName: "loaded", callback: Context.LoadedSignalCallback): number
    connect_after(sigName: "loaded", callback: Context.LoadedSignalCallback): number
    emit(sigName: "loaded", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Context

    connect(sigName: "notify::back-forward-list", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::back-forward-list", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::back-forward-list", ...args: any[]): void
    connect(sigName: "notify::buffer-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer-manager", ...args: any[]): void
    connect(sigName: "notify::build-system", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::build-system", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::build-system", ...args: any[]): void
    connect(sigName: "notify::configuration-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::configuration-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::configuration-manager", ...args: any[]): void
    connect(sigName: "notify::device-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::device-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::device-manager", ...args: any[]): void
    connect(sigName: "notify::project", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::project", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::project", ...args: any[]): void
    connect(sigName: "notify::project-file", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::project-file", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: "notify::root-build-dir", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root-build-dir", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::root-build-dir", ...args: any[]): void
    connect(sigName: "notify::runtime-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::runtime-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::runtime-manager", ...args: any[]): void
    connect(sigName: "notify::search-engine", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-engine", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::search-engine", ...args: any[]): void
    connect(sigName: "notify::snippets-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snippets-manager", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::snippets-manager", ...args: any[]): void
    connect(sigName: "notify::unsaved-files", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::unsaved-files", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::unsaved-files", ...args: any[]): void
    connect(sigName: "notify::vcs", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vcs", callback: (($obj: Context, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vcs", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Context extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Context

    static name: string
    static $gtype: GObject.GType<Context>

    // Constructors of Ide-1.0.Ide.Context

    constructor(config?: Context.ConstructorProperties) 
    static new_finish(result: Gio.AsyncResult): Context
    _init(config?: Context.ConstructorProperties): void
    static new_async(project_file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<Context> | null): void
}

module Cursor {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Cursor

        ide_source_view?: SourceView | null
    }

}

interface Cursor {

    // Own properties of Ide-1.0.Ide.Cursor

    ide_source_view: SourceView

    // Owm methods of Ide-1.0.Ide.Cursor

    add_cursor(type: number): void
    insert_text(text: string | null, len: number): void
    is_enabled(): boolean
    remove_cursors(): void

    // Class property signals of Ide-1.0.Ide.Cursor

    connect(sigName: "notify::ide-source-view", callback: (($obj: Cursor, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ide-source-view", callback: (($obj: Cursor, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::ide-source-view", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Cursor extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Cursor

    static name: string
    static $gtype: GObject.GType<Cursor>

    // Constructors of Ide-1.0.Ide.Cursor

    constructor(config?: Cursor.ConstructorProperties) 
    _init(config?: Cursor.ConstructorProperties): void
}

module Device {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Device

        display_name?: string | null
        id?: string | null
    }

}

interface Device {

    // Own properties of Ide-1.0.Ide.Device

    display_name: string | null
    id: string | null
    readonly system_type: string | null

    // Own fields of Ide-1.0.Ide.Device

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.Device

    /**
     * This function returns the name of the device. If no name has been set, then
     * %NULL is returned.
     * 
     * In some cases, this value wont be available until additional information
     * has been probed from the device.
     * @returns A string containing the display name for the device.
     */
    get_display_name(): string | null
    /**
     * Retrieves the "id" property of the #IdeDevice. This is generally not a
     * user friendly name as it is often a guid.
     * @returns A unique identifier for the device.
     */
    get_id(): string | null
    /**
     * This is the description of the system we are building for. Commonly, this
     * is referred to as a "system_type". A combination of the machine architecture
     * such as x86_64, the operating system, and the libc.
     * 
     * "x86_64-linux-gnu" might be one such system.
     * @returns A string containing the system type.
     */
    get_system_type(): string | null
    prepare_configuration(configuration: Configuration): void
    set_display_name(display_name: string | null): void
    set_id(id: string | null): void

    // Own virtual methods of Ide-1.0.Ide.Device

    /**
     * This is the description of the system we are building for. Commonly, this
     * is referred to as a "system_type". A combination of the machine architecture
     * such as x86_64, the operating system, and the libc.
     * 
     * "x86_64-linux-gnu" might be one such system.
     * @virtual 
     * @returns A string containing the system type.
     */
    vfunc_get_system_type(): string | null
    vfunc_prepare_configuration(configuration: Configuration): void

    // Class property signals of Ide-1.0.Ide.Device

    connect(sigName: "notify::display-name", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::system-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-type", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::system-type", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Device, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Device extends Object {

    // Own properties of Ide-1.0.Ide.Device

    static name: string
    static $gtype: GObject.GType<Device>

    // Constructors of Ide-1.0.Ide.Device

    constructor(config?: Device.ConstructorProperties) 
    _init(config?: Device.ConstructorProperties): void
}

module DeviceManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `device-added`
     */
    interface DeviceAddedSignalCallback {
        ($obj: DeviceManager, object: DeviceProvider, p0: Device): void
    }

    /**
     * Signal callback interface for `device-removed`
     */
    interface DeviceRemovedSignalCallback {
        ($obj: DeviceManager, object: DeviceProvider, p0: Device): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DeviceManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.DeviceManager

    readonly settled: boolean

    // Owm methods of Ide-1.0.Ide.DeviceManager

    add_provider(provider: DeviceProvider): void
    /**
     * Fetches the first device that matches the device identifier `device_id`.
     * @param device_id The device identifier string.
     * @returns An #IdeDevice or %NULL.
     */
    get_device(device_id: string | null): Device
    /**
     * Retrieves all of the devices that are registered with the #IdeDeviceManager.
     * @returns An array of devices   registered with the #IdeManager.
     */
    get_devices(): Device[]
    get_settled(): boolean
    remove_provider(provider: DeviceProvider): void

    // Own signals of Ide-1.0.Ide.DeviceManager

    connect(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback): number
    connect_after(sigName: "device-added", callback: DeviceManager.DeviceAddedSignalCallback): number
    emit(sigName: "device-added", object: DeviceProvider, p0: Device, ...args: any[]): void
    connect(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback): number
    connect_after(sigName: "device-removed", callback: DeviceManager.DeviceRemovedSignalCallback): number
    emit(sigName: "device-removed", object: DeviceProvider, p0: Device, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DeviceManager

    connect(sigName: "notify::settled", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settled", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DeviceManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DeviceManager extends Object {

    // Own properties of Ide-1.0.Ide.DeviceManager

    static name: string
    static $gtype: GObject.GType<DeviceManager>

    // Constructors of Ide-1.0.Ide.DeviceManager

    constructor(config?: DeviceManager.ConstructorProperties) 
    _init(config?: DeviceManager.ConstructorProperties): void
}

module DiagnosticsManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: DiagnosticsManager): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DiagnosticsManager extends Gio.Initable {

    // Own properties of Ide-1.0.Ide.DiagnosticsManager

    readonly busy: boolean

    // Owm methods of Ide-1.0.Ide.DiagnosticsManager

    /**
     * Gets if the diagnostics manager is currently executing a diagnosis.
     * @returns %TRUE if the #IdeDiagnosticsManager is busy diagnosing.
     */
    get_busy(): boolean
    /**
     * This function collects all of the diagnostics that have been collected
     * for `file` and returns them as a new #IdeDiagnostics to the caller.
     * 
     * The #IdeDiagnostics structure will contain zero items if there are
     * no diagnostics discovered. Therefore, this function will never return
     * a %NULL value.
     * @param file A #GFile to retrieve diagnostics for
     * @returns A new #IdeDiagnostics.
     */
    get_diagnostics_for_file(file: Gio.File): Diagnostics
    get_sequence_for_file(file: Gio.File): number
    update_group_by_file(buffer: Buffer, new_file: Gio.File): void

    // Own signals of Ide-1.0.Ide.DiagnosticsManager

    connect(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: DiagnosticsManager.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.DiagnosticsManager

    connect(sigName: "notify::busy", callback: (($obj: DiagnosticsManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: (($obj: DiagnosticsManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: DiagnosticsManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DiagnosticsManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DiagnosticsManager extends Object {

    // Own properties of Ide-1.0.Ide.DiagnosticsManager

    static name: string
    static $gtype: GObject.GType<DiagnosticsManager>

    // Constructors of Ide-1.0.Ide.DiagnosticsManager

    constructor(config?: DiagnosticsManager.ConstructorProperties) 
    _init(config?: DiagnosticsManager.ConstructorProperties): void
}

module DirectoryBuildSystem {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, BuildSystem.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DirectoryBuildSystem

        project_file?: Gio.File | null
    }

}

interface DirectoryBuildSystem extends Gio.AsyncInitable, BuildSystem {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystem

    readonly project_file: Gio.File

    // Class property signals of Ide-1.0.Ide.DirectoryBuildSystem

    connect(sigName: "notify::project-file", callback: (($obj: DirectoryBuildSystem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::project-file", callback: (($obj: DirectoryBuildSystem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::project-file", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: DirectoryBuildSystem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DirectoryBuildSystem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DirectoryBuildSystem extends Object {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystem

    static name: string
    static $gtype: GObject.GType<DirectoryBuildSystem>

    // Constructors of Ide-1.0.Ide.DirectoryBuildSystem

    constructor(config?: DirectoryBuildSystem.ConstructorProperties) 
    _init(config?: DirectoryBuildSystem.ConstructorProperties): void
}

module DirectoryVcs {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.AsyncInitable.ConstructorProperties, Vcs.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface DirectoryVcs extends Gio.AsyncInitable, Vcs {

    // Class property signals of Ide-1.0.Ide.DirectoryVcs

    connect(sigName: "notify::context", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::branch-name", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::branch-name", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::branch-name", ...args: any[]): void
    connect(sigName: "notify::working-directory", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::working-directory", callback: (($obj: DirectoryVcs, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::working-directory", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DirectoryVcs extends Object {

    // Own properties of Ide-1.0.Ide.DirectoryVcs

    static name: string
    static $gtype: GObject.GType<DirectoryVcs>

    // Constructors of Ide-1.0.Ide.DirectoryVcs

    constructor(config?: DirectoryVcs.ConstructorProperties) 
    _init(config?: DirectoryVcs.ConstructorProperties): void
}

module Doap {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Doap

        bug_database?: string | null
        category?: string | null
        description?: string | null
        download_page?: string | null
        homepage?: string | null
        languages?: string | null
        name?: string | null
        shortdesc?: string | null
    }

}

interface Doap {

    // Own properties of Ide-1.0.Ide.Doap

    bug_database: string | null
    category: string | null
    description: string | null
    download_page: string | null
    homepage: string | null
    languages: string | null
    name: string | null
    shortdesc: string | null

    // Owm methods of Ide-1.0.Ide.Doap

    get_bug_database(): string | null
    get_category(): string | null
    get_description(): string | null
    get_download_page(): string | null
    get_homepage(): string | null
    get_languages(): string[]
    get_maintainers(): DoapPerson[]
    get_name(): string | null
    get_shortdesc(): string | null
    load_from_data(data: string | null, length: number): boolean
    load_from_file(file: Gio.File, cancellable: Gio.Cancellable | null): boolean

    // Class property signals of Ide-1.0.Ide.Doap

    connect(sigName: "notify::bug-database", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bug-database", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::bug-database", ...args: any[]): void
    connect(sigName: "notify::category", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::category", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::category", ...args: any[]): void
    connect(sigName: "notify::description", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::download-page", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::download-page", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::download-page", ...args: any[]): void
    connect(sigName: "notify::homepage", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homepage", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homepage", ...args: any[]): void
    connect(sigName: "notify::languages", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::languages", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::languages", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::shortdesc", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shortdesc", callback: (($obj: Doap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::shortdesc", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Doap extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Doap

    static name: string
    static $gtype: GObject.GType<Doap>

    // Constructors of Ide-1.0.Ide.Doap

    constructor(config?: Doap.ConstructorProperties) 
    constructor() 
    static new(): Doap
    _init(config?: Doap.ConstructorProperties): void
}

module DoapPerson {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.DoapPerson

        email?: string | null
        name?: string | null
    }

}

interface DoapPerson {

    // Own properties of Ide-1.0.Ide.DoapPerson

    email: string | null
    name: string | null

    // Owm methods of Ide-1.0.Ide.DoapPerson

    get_email(): string | null
    get_name(): string | null
    set_email(email: string | null): void
    set_name(name: string | null): void

    // Class property signals of Ide-1.0.Ide.DoapPerson

    connect(sigName: "notify::email", callback: (($obj: DoapPerson, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::email", callback: (($obj: DoapPerson, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::email", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: DoapPerson, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: DoapPerson, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class DoapPerson extends GObject.Object {

    // Own properties of Ide-1.0.Ide.DoapPerson

    static name: string
    static $gtype: GObject.GType<DoapPerson>

    // Constructors of Ide-1.0.Ide.DoapPerson

    constructor(config?: DoapPerson.ConstructorProperties) 
    constructor() 
    static new(): DoapPerson
    _init(config?: DoapPerson.ConstructorProperties): void
}

module EditorPerspective {

    // Signal callback interfaces

    /**
     * Signal callback interface for `view-added`
     */
    interface ViewAddedSignalCallback {
        ($obj: EditorPerspective, object: Gtk.Widget): void
    }

    /**
     * Signal callback interface for `view-removed`
     */
    interface ViewRemovedSignalCallback {
        ($obj: EditorPerspective, object: Gtk.Widget): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Dock.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Perspective.ConstructorProperties, Dazzle.DockOverlay.ConstructorProperties {
    }

}

interface EditorPerspective extends Atk.ImplementorIface, Dazzle.Dock, Dazzle.DockItem, Gtk.Buildable, Perspective {

    // Own properties of Ide-1.0.Ide.EditorPerspective

    readonly active_view: Gtk.Widget

    // Conflicting properties

    parent_instance: Gtk.EventBox & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.EditorPerspective

    focus_buffer_in_current_stack(buffer: Buffer): void
    focus_location(location: SourceLocation): void
    get_active_view(): Gtk.Widget | null
    get_bottom_edge(): Gtk.Widget
    /**
     * Gets the center widget for the editor perspective.
     * @returns A #GtkWidget or %NULL.
     */
    get_center_widget(): Gtk.Widget | null
    /**
     * Gets the #IdeLayout widget for the editor perspective.
     * @returns A #IdeLayout or %NULL.
     */
    get_layout(): Layout | null
    get_left_edge(): Gtk.Widget
    /**
     * self: an #IdeEditorPerspective.
     * position: a #GtkPositionType.
     * @param position 
     * @returns A #DzlDockOverlayEdge
     */
    get_overlay_edge(position: Gtk.PositionType): Dazzle.DockOverlayEdge
    get_right_edge(): Gtk.Widget
    get_top_edge(): Gtk.Widget
    show_spellchecker(source_view: SourceView): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    get_child_visible(child: Dazzle.DockItem): boolean

    // Overloads of get_child_visible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    get_parent(): Dazzle.DockItem | null

    // Overloads of get_parent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    set_child_visible(child: Dazzle.DockItem, child_visible: boolean): void

    // Overloads of set_child_visible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void

    // Own signals of Ide-1.0.Ide.EditorPerspective

    connect(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback): number
    connect_after(sigName: "view-added", callback: EditorPerspective.ViewAddedSignalCallback): number
    emit(sigName: "view-added", object: Gtk.Widget, ...args: any[]): void
    connect(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback): number
    connect_after(sigName: "view-removed", callback: EditorPerspective.ViewRemovedSignalCallback): number
    emit(sigName: "view-removed", object: Gtk.Widget, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.EditorPerspective

    connect(sigName: "notify::active-view", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-view", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::above-child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::above-child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::above-child", ...args: any[]): void
    connect(sigName: "notify::visible-window", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible-window", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible-window", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::manager", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager", callback: (($obj: EditorPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::manager", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class EditorPerspective extends Dazzle.DockOverlay {

    // Own properties of Ide-1.0.Ide.EditorPerspective

    static name: string
    static $gtype: GObject.GType<EditorPerspective>

    // Constructors of Ide-1.0.Ide.EditorPerspective

    constructor(config?: EditorPerspective.ConstructorProperties) 
    _init(config?: EditorPerspective.ConstructorProperties): void
}

module EditorView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        ($obj: EditorView, object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, LayoutView.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.EditorView

        document?: Buffer | null
    }

}

interface EditorView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.EditorView

    readonly document: Buffer

    // Conflicting properties

    parent_instance: Gtk.Box & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.EditorView

    get_active_source_view(): SourceView
    get_document(): Buffer

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.EditorView

    connect(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback): number
    connect_after(sigName: "request-documentation", callback: EditorView.RequestDocumentationSignalCallback): number
    emit(sigName: "request-documentation", object: string | null, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.EditorView

    connect(sigName: "notify::document", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::document", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::document", ...args: any[]): void
    connect(sigName: "notify::can-split", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-split", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-split", ...args: any[]): void
    connect(sigName: "notify::modified", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modified", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::modified", ...args: any[]): void
    connect(sigName: "notify::special-title", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::special-title", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::special-title", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: EditorView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class EditorView extends LayoutView {

    // Own properties of Ide-1.0.Ide.EditorView

    static name: string
    static $gtype: GObject.GType<EditorView>

    // Constructors of Ide-1.0.Ide.EditorView

    constructor(config?: EditorView.ConstructorProperties) 
    _init(config?: EditorView.ConstructorProperties): void
}

module Environment {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: Environment): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface Environment extends Gio.ListModel {

    // Owm methods of Ide-1.0.Ide.Environment

    append(variable: EnvironmentVariable): void
    /**
     * Copies the contents of #IdeEnvironment into a newly allocated #IdeEnvironment.
     * @returns An #IdeEnvironment.
     */
    copy(): Environment
    /**
     * Gets the environment as a set of key=value pairs, suitable for use
     * in various GLib process functions.
     * @returns A newly allocated string array.
     */
    get_environ(): string[]
    getenv(key: string | null): string | null
    remove(variable: EnvironmentVariable): void
    setenv(key: string | null, value: string | null): void

    // Own signals of Ide-1.0.Ide.Environment

    connect(sigName: "changed", callback: Environment.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: Environment.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Environment

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Environment extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Environment

    static name: string
    static $gtype: GObject.GType<Environment>

    // Constructors of Ide-1.0.Ide.Environment

    constructor(config?: Environment.ConstructorProperties) 
    constructor() 
    static new(): Environment
    _init(config?: Environment.ConstructorProperties): void
}

module EnvironmentVariable {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.EnvironmentVariable

        key?: string | null
        value?: string | null
    }

}

interface EnvironmentVariable {

    // Own properties of Ide-1.0.Ide.EnvironmentVariable

    key: string | null
    value: string | null

    // Owm methods of Ide-1.0.Ide.EnvironmentVariable

    get_key(): string | null
    get_value(): string | null
    set_key(key: string | null): void
    set_value(value: string | null): void

    // Class property signals of Ide-1.0.Ide.EnvironmentVariable

    connect(sigName: "notify::key", callback: (($obj: EnvironmentVariable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: EnvironmentVariable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (($obj: EnvironmentVariable, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: EnvironmentVariable, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class EnvironmentVariable extends GObject.Object {

    // Own properties of Ide-1.0.Ide.EnvironmentVariable

    static name: string
    static $gtype: GObject.GType<EnvironmentVariable>

    // Constructors of Ide-1.0.Ide.EnvironmentVariable

    constructor(config?: EnvironmentVariable.ConstructorProperties) 
    constructor(key: string | null, value: string | null) 
    static new(key: string | null, value: string | null): EnvironmentVariable
    _init(config?: EnvironmentVariable.ConstructorProperties): void
}

module ExtensionAdapter {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ExtensionAdapter

        engine?: Peas.Engine | null
        interface_type?: GObject.GType | null
        key?: string | null
        value?: string | null
    }

}

interface ExtensionAdapter {

    // Own properties of Ide-1.0.Ide.ExtensionAdapter

    readonly engine: Peas.Engine
    readonly extension: GObject.Object
    readonly interface_type: GObject.GType
    key: string | null
    value: string | null

    // Owm methods of Ide-1.0.Ide.ExtensionAdapter

    /**
     * Gets the #IdeExtensionAdapter:engine property.
     * @returns A #PeasEngine.
     */
    get_engine(): Peas.Engine
    /**
     * Gets the extension object managed by the adapter.
     * @returns A #GObject or %NULL.
     */
    get_extension(): GObject.Object
    get_interface_type(): GObject.GType
    get_key(): string | null
    get_value(): string | null
    set_key(key: string | null): void
    set_value(value: string | null): void

    // Class property signals of Ide-1.0.Ide.ExtensionAdapter

    connect(sigName: "notify::engine", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::engine", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::engine", ...args: any[]): void
    connect(sigName: "notify::extension", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::extension", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::extension", ...args: any[]): void
    connect(sigName: "notify::interface-type", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-type", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::interface-type", ...args: any[]): void
    connect(sigName: "notify::key", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ExtensionAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ExtensionAdapter extends Object {

    // Own properties of Ide-1.0.Ide.ExtensionAdapter

    static name: string
    static $gtype: GObject.GType<ExtensionAdapter>

    // Constructors of Ide-1.0.Ide.ExtensionAdapter

    constructor(config?: ExtensionAdapter.ConstructorProperties) 
    /**
     * Creates a new #IdeExtensionAdapter.
     * 
     * The #IdeExtensionAdapter object can be used to wrap an extension that might need to change
     * at runtime based on various changing parameters. For example, it can watch the loading and
     * unloading of plugins and reload the #IdeExtensionAdapter:extension property.
     * 
     * Additionally, it can match a specific plugin based on the `value` provided.
     * 
     * This uses #IdeExtensionPoint to create the extension implementation, which means that
     * extension points that are disabled (such as from the plugins GSettings) will be ignored.
     * As such, if one plugin that is higher priority than another, but is disabled, will be
     * ignored and the secondary plugin will be used.
     * @constructor 
     * @param context An #IdeContext.
     * @param engine A #PeasEngine or %NULL.
     * @param interface_type The #GType of the interface to be implemented.
     * @param key The key for matching extensions from plugin info external data.
     * @param value The value to use when matching keys.
     * @returns A newly created #IdeExtensionAdapter.
     */
    constructor(context: Context, engine: Peas.Engine | null, interface_type: GObject.GType, key: string | null, value: string | null) 
    /**
     * Creates a new #IdeExtensionAdapter.
     * 
     * The #IdeExtensionAdapter object can be used to wrap an extension that might need to change
     * at runtime based on various changing parameters. For example, it can watch the loading and
     * unloading of plugins and reload the #IdeExtensionAdapter:extension property.
     * 
     * Additionally, it can match a specific plugin based on the `value` provided.
     * 
     * This uses #IdeExtensionPoint to create the extension implementation, which means that
     * extension points that are disabled (such as from the plugins GSettings) will be ignored.
     * As such, if one plugin that is higher priority than another, but is disabled, will be
     * ignored and the secondary plugin will be used.
     * @constructor 
     * @param context An #IdeContext.
     * @param engine A #PeasEngine or %NULL.
     * @param interface_type The #GType of the interface to be implemented.
     * @param key The key for matching extensions from plugin info external data.
     * @param value The value to use when matching keys.
     * @returns A newly created #IdeExtensionAdapter.
     */
    static new(context: Context, engine: Peas.Engine | null, interface_type: GObject.GType, key: string | null, value: string | null): ExtensionAdapter
    _init(config?: ExtensionAdapter.ConstructorProperties): void
}

module ExtensionSetAdapter {

    // Signal callback interfaces

    /**
     * Signal callback interface for `extension-added`
     */
    interface ExtensionAddedSignalCallback {
        ($obj: ExtensionSetAdapter, object: Peas.PluginInfo, p0: GObject.Object): void
    }

    /**
     * Signal callback interface for `extension-removed`
     */
    interface ExtensionRemovedSignalCallback {
        ($obj: ExtensionSetAdapter, object: Peas.PluginInfo, p0: GObject.Object): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ExtensionSetAdapter

        engine?: Peas.Engine | null
        interface_type?: GObject.GType | null
        key?: string | null
        value?: string | null
    }

}

interface ExtensionSetAdapter {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapter

    readonly engine: Peas.Engine
    readonly interface_type: GObject.GType
    key: string | null
    value: string | null

    // Owm methods of Ide-1.0.Ide.ExtensionSetAdapter

    /**
     * Calls `foreach_func` for every extension loaded by the extension set.
     * @param foreach_func A callback
     */
    foreach(foreach_func: ExtensionSetAdapterForeachFunc): void
    /**
     * Gets the #IdeExtensionSetAdapter:engine property.
     * @returns A #PeasEngine.
     */
    get_engine(): Peas.Engine
    get_interface_type(): GObject.GType
    get_key(): string | null
    get_n_extensions(): number
    get_value(): string | null
    set_key(key: string | null): void
    set_value(value: string | null): void

    // Own signals of Ide-1.0.Ide.ExtensionSetAdapter

    connect(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback): number
    connect_after(sigName: "extension-added", callback: ExtensionSetAdapter.ExtensionAddedSignalCallback): number
    emit(sigName: "extension-added", object: Peas.PluginInfo, p0: GObject.Object, ...args: any[]): void
    connect(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback): number
    connect_after(sigName: "extension-removed", callback: ExtensionSetAdapter.ExtensionRemovedSignalCallback): number
    emit(sigName: "extension-removed", object: Peas.PluginInfo, p0: GObject.Object, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.ExtensionSetAdapter

    connect(sigName: "notify::engine", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::engine", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::engine", ...args: any[]): void
    connect(sigName: "notify::interface-type", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::interface-type", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::interface-type", ...args: any[]): void
    connect(sigName: "notify::key", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::key", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::key", ...args: any[]): void
    connect(sigName: "notify::value", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::value", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::value", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ExtensionSetAdapter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ExtensionSetAdapter extends Object {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapter

    static name: string
    static $gtype: GObject.GType<ExtensionSetAdapter>

    // Constructors of Ide-1.0.Ide.ExtensionSetAdapter

    constructor(config?: ExtensionSetAdapter.ConstructorProperties) 
    constructor(context: Context, engine: Peas.Engine, interface_type: GObject.GType, key: string | null, value: string | null) 
    static new(context: Context, engine: Peas.Engine, interface_type: GObject.GType, key: string | null, value: string | null): ExtensionSetAdapter
    _init(config?: ExtensionSetAdapter.ConstructorProperties): void
}

module File {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.File

        file?: Gio.File | null
        path?: string | null
        temporary_id?: number | null
    }

}

interface File {

    // Own properties of Ide-1.0.Ide.File

    readonly file: Gio.File
    readonly is_temporary: boolean
    readonly language: GtkSource.Language
    readonly path: string | null
    readonly temporary_id: number

    // Owm methods of Ide-1.0.Ide.File

    compare(b: File): number
    equal(other: File): boolean
    find_other_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of find_other_async

    /**
     * Promisified version of {@link find_other_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of: An #IdeFIle or %NULL.
     */
    find_other_async(cancellable: Gio.Cancellable | null): globalThis.Promise<File | null>
    /**
     * Completes an asynchronous call to ide_file_find_other_async(). This function
     * will try to find a matching file for languages where this exists. Such cases
     * include C and C++ where a .c or .cpp file may have a .h or .hh header. Additional
     * suffixes are implemented including (.c, .cc, .cpp, .cxx, .h, .hh, .hpp, and .hxx).
     * 
     * Returns an #IdeFile if successful, otherwise %NULL and `error` is set.
     * @param result 
     * @returns An #IdeFIle or %NULL.
     */
    find_other_finish(result: Gio.AsyncResult): File | null
    /**
     * Retrieves the underlying #GFile represented by `self`.
     * @returns A #GFile.
     */
    get_file(): Gio.File
    get_is_temporary(): boolean
    /**
     * Retrieves the #GtkSourceLanguage that was discovered for the file.
     * @returns A #GtkSourceLanguage or %NULL.
     */
    get_language(): GtkSource.Language | null
    get_language_id(): string | null
    get_path(): string | null
    /**
     * Gets the #IdeFile:temporary-id property for the file.
     * 
     * Temporary files have unique identifiers associated with them so that we can
     * display names such as "unsaved file 1" and know that it will not collide with
     * another temporary file.
     * 
     * Files that are not temporary, will return zero.
     * @returns A positive integer greater than zero if the file is a temporary file.
     */
    get_temporary_id(): number
    hash(): number
    load_settings_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of load_settings_async

    /**
     * Promisified version of {@link load_settings_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of: An #IdeFileSettings or %NULL upon failure and   @error is set.
     */
    load_settings_async(cancellable: Gio.Cancellable | null): globalThis.Promise<FileSettings>
    load_settings_finish(result: Gio.AsyncResult): FileSettings

    // Class property signals of Ide-1.0.Ide.File

    connect(sigName: "notify::file", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::is-temporary", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-temporary", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-temporary", ...args: any[]): void
    connect(sigName: "notify::language", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::path", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::path", ...args: any[]): void
    connect(sigName: "notify::temporary-id", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::temporary-id", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::temporary-id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: File, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class File extends Object {

    // Own properties of Ide-1.0.Ide.File

    static name: string
    static $gtype: GObject.GType<File>

    // Constructors of Ide-1.0.Ide.File

    constructor(config?: File.ConstructorProperties) 
    /**
     * Creates a new file.
     * @constructor 
     * @param context An #IdeContext or %NULL.
     * @param file a #GFile.
     * @returns An #IdeFile.
     */
    constructor(context: Context | null, file: Gio.File) 
    /**
     * Creates a new file.
     * @constructor 
     * @param context An #IdeContext or %NULL.
     * @param file a #GFile.
     * @returns An #IdeFile.
     */
    static new(context: Context | null, file: Gio.File): File
    static new_for_path(context: Context, path: string | null): File
    _init(config?: File.ConstructorProperties): void
}

module FileSettings {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.FileSettings

        encoding?: string | null
        encoding_set?: boolean | null
        file?: File | null
        indent_style?: IndentStyle | null
        indent_style_set?: boolean | null
        indent_width?: number | null
        indent_width_set?: boolean | null
        insert_trailing_newline?: boolean | null
        insert_trailing_newline_set?: boolean | null
        newline_type?: GtkSource.NewlineType | null
        newline_type_set?: boolean | null
        overwrite_braces?: boolean | null
        overwrite_braces_set?: boolean | null
        right_margin_position?: number | null
        right_margin_position_set?: boolean | null
        settled?: boolean | null
        show_right_margin?: boolean | null
        show_right_margin_set?: boolean | null
        tab_width?: number | null
        tab_width_set?: boolean | null
        trim_trailing_whitespace?: boolean | null
        trim_trailing_whitespace_set?: boolean | null
    }

}

interface FileSettings {

    // Own properties of Ide-1.0.Ide.FileSettings

    encoding: string | null
    encoding_set: boolean
    readonly file: File
    indent_style: IndentStyle
    indent_style_set: boolean
    indent_width: number
    indent_width_set: boolean
    insert_trailing_newline: boolean
    insert_trailing_newline_set: boolean
    newline_type: GtkSource.NewlineType
    newline_type_set: boolean
    overwrite_braces: boolean
    overwrite_braces_set: boolean
    right_margin_position: number
    right_margin_position_set: boolean
    settled: boolean
    show_right_margin: boolean
    show_right_margin_set: boolean
    tab_width: number
    tab_width_set: boolean
    trim_trailing_whitespace: boolean
    trim_trailing_whitespace_set: boolean

    // Own fields of Ide-1.0.Ide.FileSettings

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.FileSettings

    /**
     * Retrieves the underlying file that `self` refers to.
     * 
     * This may be used by #IdeFileSettings implementations to discover additional
     * information about the settings. For example, a modeline parser might load
     * some portion of the file looking for modelines. An editorconfig
     * implementation might look for ".editorconfig" files.
     * @returns An #IdeFile.
     */
    get_file(): File
    /**
     * Gets the #IdeFileSettings:settled property.
     * 
     * This property is %TRUE when all of the children file settings have completed loading.
     * 
     * Some file setting implementations require that various I/O be performed on disk in
     * the background. This property will change to %TRUE when all of the settings have
     * been loaded.
     * 
     * Normally, this is not a problem, since the editor will respond to changes and update them
     * accordingly. However, if you are writing a tool that prints the file settings
     * (such as ide-list-file-settings), you probably want to wait until the values have
     * settled.
     * @returns %TRUE if all the settings have loaded.
     */
    get_settled(): boolean

    // Class property signals of Ide-1.0.Ide.FileSettings

    connect(sigName: "notify::encoding", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::encoding", ...args: any[]): void
    connect(sigName: "notify::encoding-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::encoding-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::encoding-set", ...args: any[]): void
    connect(sigName: "notify::file", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::indent-style", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-style", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-style", ...args: any[]): void
    connect(sigName: "notify::indent-style-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-style-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-style-set", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::indent-width-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-width-set", ...args: any[]): void
    connect(sigName: "notify::insert-trailing-newline", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-trailing-newline", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-trailing-newline", ...args: any[]): void
    connect(sigName: "notify::insert-trailing-newline-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-trailing-newline-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-trailing-newline-set", ...args: any[]): void
    connect(sigName: "notify::newline-type", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::newline-type", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::newline-type", ...args: any[]): void
    connect(sigName: "notify::newline-type-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::newline-type-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::newline-type-set", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite-braces", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite-braces", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite-braces-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite-braces-set", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::right-margin-position-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin-position-set", ...args: any[]): void
    connect(sigName: "notify::settled", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::settled", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::settled", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::show-right-margin-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-right-margin-set", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::tab-width-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-width-set", ...args: any[]): void
    connect(sigName: "notify::trim-trailing-whitespace", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::trim-trailing-whitespace", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::trim-trailing-whitespace", ...args: any[]): void
    connect(sigName: "notify::trim-trailing-whitespace-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::trim-trailing-whitespace-set", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::trim-trailing-whitespace-set", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: FileSettings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class FileSettings extends Object {

    // Own properties of Ide-1.0.Ide.FileSettings

    static name: string
    static $gtype: GObject.GType<FileSettings>

    // Constructors of Ide-1.0.Ide.FileSettings

    constructor(config?: FileSettings.ConstructorProperties) 
    constructor(file: File) 
    static new(file: File): FileSettings
    _init(config?: FileSettings.ConstructorProperties): void
}

module FormatterOptions {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.FormatterOptions

        insert_spaces?: boolean | null
        tab_width?: number | null
    }

}

interface FormatterOptions {

    // Own properties of Ide-1.0.Ide.FormatterOptions

    insert_spaces: boolean
    tab_width: number

    // Owm methods of Ide-1.0.Ide.FormatterOptions

    get_insert_spaces(): boolean
    get_tab_width(): number
    set_insert_spaces(insert_spaces: boolean): void
    set_tab_width(tab_width: number): void

    // Class property signals of Ide-1.0.Ide.FormatterOptions

    connect(sigName: "notify::insert-spaces", callback: (($obj: FormatterOptions, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-spaces", callback: (($obj: FormatterOptions, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-spaces", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (($obj: FormatterOptions, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: (($obj: FormatterOptions, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class FormatterOptions extends GObject.Object {

    // Own properties of Ide-1.0.Ide.FormatterOptions

    static name: string
    static $gtype: GObject.GType<FormatterOptions>

    // Constructors of Ide-1.0.Ide.FormatterOptions

    constructor(config?: FormatterOptions.ConstructorProperties) 
    constructor() 
    static new(): FormatterOptions
    _init(config?: FormatterOptions.ConstructorProperties): void
}

module HighlightEngine {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.HighlightEngine

        buffer?: Buffer | null
    }

}

interface HighlightEngine {

    // Own properties of Ide-1.0.Ide.HighlightEngine

    readonly buffer: Buffer
    readonly highlighter: Highlighter

    // Owm methods of Ide-1.0.Ide.HighlightEngine

    clear(): void
    /**
     * Gets the IdeHighlightEngine:buffer property.
     * @returns An #IdeBuffer.
     */
    get_buffer(): Buffer
    /**
     * Gets the IdeHighlightEngine:highlighter property.
     * @returns An #IdeHighlighter.
     */
    get_highlighter(): Highlighter
    /**
     * A #GtkTextTag for `style_name`.
     * @param style_name the name of the style to retrieve
     * @returns A #GtkTextTag.
     */
    get_style(style_name: string | null): Gtk.TextTag
    /**
     * This function will extend the invalidated range of the buffer to include
     * the range of `begin` to `end`.
     * 
     * The highlighter will be queued to interactively update the invalidated
     * region.
     * 
     * Updating the invalidated region of the buffer may take some time, as it is
     * important that the highlighter does not block for more than 1-2 milliseconds
     * to avoid dropping frames.
     * @param begin the beginning of the range to invalidate
     * @param end the end of the range to invalidate
     */
    invalidate(begin: Gtk.TextIter, end: Gtk.TextIter): void
    rebuild(): void

    // Class property signals of Ide-1.0.Ide.HighlightEngine

    connect(sigName: "notify::buffer", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::highlighter", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlighter", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlighter", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: HighlightEngine, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class HighlightEngine extends Object {

    // Own properties of Ide-1.0.Ide.HighlightEngine

    static name: string
    static $gtype: GObject.GType<HighlightEngine>

    // Constructors of Ide-1.0.Ide.HighlightEngine

    constructor(config?: HighlightEngine.ConstructorProperties) 
    constructor(buffer: Buffer) 
    static new(buffer: Buffer): HighlightEngine
    _init(config?: HighlightEngine.ConstructorProperties): void
}

module LangservClient {

    // Signal callback interfaces

    /**
     * Signal callback interface for `notification`
     */
    interface NotificationSignalCallback {
        ($obj: LangservClient, object: string | null, p0: GLib.Variant): void
    }

    /**
     * Signal callback interface for `published-diagnostics`
     */
    interface PublishedDiagnosticsSignalCallback {
        ($obj: LangservClient, object: Gio.File, p0: Diagnostics): void
    }

    /**
     * Signal callback interface for `supports-language`
     */
    interface SupportsLanguageSignalCallback {
        ($obj: LangservClient, object: string | null): boolean
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservClient

        io_stream?: Gio.IOStream | null
    }

}

interface LangservClient {

    // Own properties of Ide-1.0.Ide.LangservClient

    readonly io_stream: Gio.IOStream

    // Own fields of Ide-1.0.Ide.LangservClient

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservClient

    add_language(language_id: string | null): void
    /**
     * Asynchronously queries the Language Server using the JSON-RPC protocol.
     * @param method the method to call
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @param callback the callback to receive the result, or %NULL
     */
    call_async(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of call_async

    /**
     * Promisified version of {@link call_async}
     * 
     * Asynchronously queries the Language Server using the JSON-RPC protocol.
     * @param method the method to call
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @returns A Promise of the result of {@link call_async}
     */
    call_async(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    call_finish(result: Gio.AsyncResult, return_value: GLib.Variant): boolean
    get_diagnostics_async(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_diagnostics_async

    /**
     * Promisified version of {@link get_diagnostics_async}
     * 
     * 
     * @param file 
     * @param cancellable 
     * @returns A Promise of: %TRUE if successful and @diagnostics is set, otherwise %FALSE   and @error is set.
     */
    get_diagnostics_async(file: Gio.File, cancellable: Gio.Cancellable | null): globalThis.Promise</* diagnostics */ Diagnostics | null>
    /**
     * Completes a request to ide_langserv_client_get_diagnostics_async().
     * @param result A #GAsyncResult
     * @returns %TRUE if successful and @diagnostics is set, otherwise %FALSE   and @error is set.
     */
    get_diagnostics_finish(result: Gio.AsyncResult): [ /* returnType */ boolean, /* diagnostics */ Diagnostics | null ]
    /**
     * Asynchronously sends a notification to the Language Server.
     * @param method the method to notification
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @param notificationback the notificationback to receive the result, or %NULL
     */
    send_notification_async(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null, notificationback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of send_notification_async

    /**
     * Promisified version of {@link send_notification_async}
     * 
     * Asynchronously sends a notification to the Language Server.
     * @param method the method to notification
     * @param params An #GVariant or %NULL
     * @param cancellable A cancellable or %NULL
     * @param notificationback the notificationback to receive the result, or %NULL
     * @returns A Promise of the result of {@link send_notification_async}
     */
    send_notification_async(method: string | null, params: GLib.Variant | null, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    send_notification_finish(result: Gio.AsyncResult): boolean
    start(): void
    stop(): void

    // Own virtual methods of Ide-1.0.Ide.LangservClient

    vfunc_notification(method: string | null, params: GLib.Variant): void
    vfunc_published_diagnostics(file: Gio.File, diagnostics: Diagnostics): void
    vfunc_supports_language(language_id: string | null): boolean

    // Own signals of Ide-1.0.Ide.LangservClient

    connect(sigName: "notification", callback: LangservClient.NotificationSignalCallback): number
    connect_after(sigName: "notification", callback: LangservClient.NotificationSignalCallback): number
    emit(sigName: "notification", object: string | null, p0: GLib.Variant, ...args: any[]): void
    connect(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback): number
    connect_after(sigName: "published-diagnostics", callback: LangservClient.PublishedDiagnosticsSignalCallback): number
    emit(sigName: "published-diagnostics", object: Gio.File, p0: Diagnostics, ...args: any[]): void
    connect(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback): number
    connect_after(sigName: "supports-language", callback: LangservClient.SupportsLanguageSignalCallback): number
    emit(sigName: "supports-language", object: string | null, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LangservClient

    connect(sigName: "notify::io-stream", callback: (($obj: LangservClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::io-stream", callback: (($obj: LangservClient, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::io-stream", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservClient, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservClient, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservClient extends Object {

    // Own properties of Ide-1.0.Ide.LangservClient

    static name: string
    static $gtype: GObject.GType<LangservClient>

    // Constructors of Ide-1.0.Ide.LangservClient

    constructor(config?: LangservClient.ConstructorProperties) 
    constructor(context: Context, io_stream: Gio.IOStream) 
    static new(context: Context, io_stream: Gio.IOStream): LangservClient
    _init(config?: LangservClient.ConstructorProperties): void
}

module LangservCompletionProvider {

    // Constructor properties interface

    interface ConstructorProperties extends GtkSource.CompletionProvider.ConstructorProperties, CompletionProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservCompletionProvider

        client?: LangservClient | null
    }

}

interface LangservCompletionProvider extends GtkSource.CompletionProvider, CompletionProvider {

    // Own properties of Ide-1.0.Ide.LangservCompletionProvider

    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservCompletionProvider

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservCompletionProvider

    /**
     * Gets the client for the completion provider.
     * @returns An #IdeLangservClient or %NULL
     */
    get_client(): LangservClient | null
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservCompletionProvider

    connect(sigName: "notify::client", callback: (($obj: LangservCompletionProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservCompletionProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservCompletionProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservCompletionProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservCompletionProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservCompletionProvider

    static name: string
    static $gtype: GObject.GType<LangservCompletionProvider>

    // Constructors of Ide-1.0.Ide.LangservCompletionProvider

    constructor(config?: LangservCompletionProvider.ConstructorProperties) 
    _init(config?: LangservCompletionProvider.ConstructorProperties): void
}

module LangservDiagnosticProvider {

    // Constructor properties interface

    interface ConstructorProperties extends DiagnosticProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservDiagnosticProvider

        client?: LangservClient | null
    }

}

interface LangservDiagnosticProvider extends DiagnosticProvider {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProvider

    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservDiagnosticProvider

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservDiagnosticProvider

    /**
     * Gets the client used by diagnostic provider.
     * @returns An #IdeLangservClient or %NULL.
     */
    get_client(): LangservClient | null
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservDiagnosticProvider

    connect(sigName: "notify::client", callback: (($obj: LangservDiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservDiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservDiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservDiagnosticProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservDiagnosticProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProvider

    static name: string
    static $gtype: GObject.GType<LangservDiagnosticProvider>

    // Constructors of Ide-1.0.Ide.LangservDiagnosticProvider

    constructor(config?: LangservDiagnosticProvider.ConstructorProperties) 
    _init(config?: LangservDiagnosticProvider.ConstructorProperties): void
}

module LangservFormatter {

    // Constructor properties interface

    interface ConstructorProperties extends Formatter.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservFormatter

        client?: LangservClient | null
    }

}

interface LangservFormatter extends Formatter {

    // Own properties of Ide-1.0.Ide.LangservFormatter

    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservFormatter

    parent_class: Object
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any

    // Owm methods of Ide-1.0.Ide.LangservFormatter

    /**
     * Gets the client to use for the formatter.
     * @returns An #IdeLangservClient or %NULL.
     */
    get_client(): LangservClient
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservFormatter

    connect(sigName: "notify::client", callback: (($obj: LangservFormatter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservFormatter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservFormatter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservFormatter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservFormatter extends Object {

    // Own properties of Ide-1.0.Ide.LangservFormatter

    static name: string
    static $gtype: GObject.GType<LangservFormatter>

    // Constructors of Ide-1.0.Ide.LangservFormatter

    constructor(config?: LangservFormatter.ConstructorProperties) 
    _init(config?: LangservFormatter.ConstructorProperties): void
}

module LangservHighlighter {

    // Constructor properties interface

    interface ConstructorProperties extends Highlighter.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservHighlighter

        client?: LangservClient | null
    }

}

interface LangservHighlighter extends Highlighter {

    // Own properties of Ide-1.0.Ide.LangservHighlighter

    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservHighlighter

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservHighlighter

    get_client(): LangservClient | null
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservHighlighter

    connect(sigName: "notify::client", callback: (($obj: LangservHighlighter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservHighlighter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservHighlighter, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservHighlighter, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservHighlighter extends Object {

    // Own properties of Ide-1.0.Ide.LangservHighlighter

    static name: string
    static $gtype: GObject.GType<LangservHighlighter>

    // Constructors of Ide-1.0.Ide.LangservHighlighter

    constructor(config?: LangservHighlighter.ConstructorProperties) 
    _init(config?: LangservHighlighter.ConstructorProperties): void
}

module LangservRenameProvider {

    // Constructor properties interface

    interface ConstructorProperties extends RenameProvider.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservRenameProvider

        buffer?: Buffer | null
        client?: LangservClient | null
    }

}

interface LangservRenameProvider extends RenameProvider {

    // Own properties of Ide-1.0.Ide.LangservRenameProvider

    buffer: Buffer
    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservRenameProvider

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservRenameProvider

    get_client(): LangservClient | null
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservRenameProvider

    connect(sigName: "notify::buffer", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::client", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservRenameProvider, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservRenameProvider extends Object {

    // Own properties of Ide-1.0.Ide.LangservRenameProvider

    static name: string
    static $gtype: GObject.GType<LangservRenameProvider>

    // Constructors of Ide-1.0.Ide.LangservRenameProvider

    constructor(config?: LangservRenameProvider.ConstructorProperties) 
    _init(config?: LangservRenameProvider.ConstructorProperties): void
}

module LangservSymbolNode {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolNode.ConstructorProperties {
    }

}

interface LangservSymbolNode {

    // Own fields of Ide-1.0.Ide.LangservSymbolNode

    parent_instance: SymbolNode & Object & GObject.Object & GObject.Object
    gnode: GLib.Node

    // Owm methods of Ide-1.0.Ide.LangservSymbolNode

    get_parent_name(): string | null
    is_parent_of(other: LangservSymbolNode): boolean

    // Class property signals of Ide-1.0.Ide.LangservSymbolNode

    connect(sigName: "notify::flags", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::kind", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kind", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::kind", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-markup", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservSymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservSymbolNode extends SymbolNode {

    // Own properties of Ide-1.0.Ide.LangservSymbolNode

    static name: string
    static $gtype: GObject.GType<LangservSymbolNode>

    // Constructors of Ide-1.0.Ide.LangservSymbolNode

    constructor(config?: LangservSymbolNode.ConstructorProperties) 
    constructor(file: Gio.File, name: string | null, parent_name: string | null, kind: number, begin_line: number, begin_column: number, end_line: number, end_column: number) 
    static new(file: Gio.File, name: string | null, parent_name: string | null, kind: number, begin_line: number, begin_column: number, end_line: number, end_column: number): LangservSymbolNode
    _init(config?: LangservSymbolNode.ConstructorProperties): void
}

module LangservSymbolResolver {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolResolver.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LangservSymbolResolver

        client?: LangservClient | null
    }

}

interface LangservSymbolResolver extends SymbolResolver {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolver

    client: LangservClient

    // Own fields of Ide-1.0.Ide.LangservSymbolResolver

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.LangservSymbolResolver

    /**
     * Gets the client used by the symbol resolver.
     * @returns An #IdeLangservClient or %NULL.
     */
    get_client(): LangservClient | null
    set_client(client: LangservClient): void

    // Class property signals of Ide-1.0.Ide.LangservSymbolResolver

    connect(sigName: "notify::client", callback: (($obj: LangservSymbolResolver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::client", callback: (($obj: LangservSymbolResolver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::client", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LangservSymbolResolver, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LangservSymbolResolver, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservSymbolResolver extends Object {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolver

    static name: string
    static $gtype: GObject.GType<LangservSymbolResolver>

    // Constructors of Ide-1.0.Ide.LangservSymbolResolver

    constructor(config?: LangservSymbolResolver.ConstructorProperties) 
    _init(config?: LangservSymbolResolver.ConstructorProperties): void
}

module LangservSymbolTree {

    // Constructor properties interface

    interface ConstructorProperties extends SymbolTree.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface LangservSymbolTree extends SymbolTree {

    // Class property signals of Ide-1.0.Ide.LangservSymbolTree

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LangservSymbolTree extends GObject.Object {

    // Own properties of Ide-1.0.Ide.LangservSymbolTree

    static name: string
    static $gtype: GObject.GType<LangservSymbolTree>

    // Constructors of Ide-1.0.Ide.LangservSymbolTree

    constructor(config?: LangservSymbolTree.ConstructorProperties) 
    /**
     * Creates a new #IdeLangservSymbolTree but takes ownership of `ar`.
     * @constructor 
     * @param symbols The symbols
     * @returns A newly allocated #IdeLangservSymbolTree.
     */
    constructor(symbols: LangservSymbolNode[]) 
    /**
     * Creates a new #IdeLangservSymbolTree but takes ownership of `ar`.
     * @constructor 
     * @param symbols The symbols
     * @returns A newly allocated #IdeLangservSymbolTree.
     */
    static new(symbols: LangservSymbolNode[]): LangservSymbolTree
    _init(config?: LangservSymbolTree.ConstructorProperties): void
}

module Layout {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Dock.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.DockBin.ConstructorProperties {
    }

}

interface Layout extends Atk.ImplementorIface, Dazzle.Dock, Dazzle.DockItem, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.Layout

    readonly active_view: Gtk.Widget

    // Own fields of Ide-1.0.Ide.Layout

    parent_instance: Dazzle.DockBin & Gtk.Container & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.Layout

    get_active_view(): Gtk.Widget | null

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    get_child_visible(child: Dazzle.DockItem): boolean

    // Overloads of get_child_visible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    get_parent(): Dazzle.DockItem | null

    // Overloads of get_parent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    set_child_visible(child: Dazzle.DockItem, child_visible: boolean): void

    // Overloads of set_child_visible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void

    // Class property signals of Ide-1.0.Ide.Layout

    connect(sigName: "notify::active-view", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-view", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::bottom-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::bottom-visible", ...args: any[]): void
    connect(sigName: "notify::left-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::left-visible", ...args: any[]): void
    connect(sigName: "notify::right-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-visible", ...args: any[]): void
    connect(sigName: "notify::top-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top-visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::top-visible", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::manager", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::manager", callback: (($obj: Layout, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::manager", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Layout extends Dazzle.DockBin {

    // Own properties of Ide-1.0.Ide.Layout

    static name: string
    static $gtype: GObject.GType<Layout>

    // Constructors of Ide-1.0.Ide.Layout

    constructor(config?: Layout.ConstructorProperties) 
    _init(config?: Layout.ConstructorProperties): void
}

module LayoutGrid {

    // Signal callback interfaces

    /**
     * Signal callback interface for `empty`
     */
    interface EmptySignalCallback {
        ($obj: LayoutGrid): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Bin.ConstructorProperties {
    }

}

interface LayoutGrid extends Atk.ImplementorIface, Gtk.Buildable {

    // Owm methods of Ide-1.0.Ide.LayoutGrid

    add_stack_after(stack: LayoutStack): LayoutStack
    add_stack_before(stack: LayoutStack): LayoutStack
    /**
     * Calls `callback` for every view found in the #IdeLayoutGrid.
     * @param callback A #GtkCallback
     */
    foreach_view(callback: Gtk.Callback): void
    /**
     * Gets the last focused #IdeLayoutStack.
     * @returns A #IdeLayoutStack or %NULL.
     */
    get_last_focus(): Gtk.Widget | null
    get_stack_after(stack: LayoutStack): LayoutStack | null
    get_stack_before(stack: LayoutStack): LayoutStack | null
    /**
     * Fetches all of the stacks in the grid. The resulting #GList should be
     * freed with g_list_free().
     * @returns A #GList.
     */
    get_stacks(): LayoutStack[]

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.LayoutGrid

    connect(sigName: "empty", callback: LayoutGrid.EmptySignalCallback): number
    connect_after(sigName: "empty", callback: LayoutGrid.EmptySignalCallback): number
    emit(sigName: "empty", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LayoutGrid

    connect(sigName: "notify::border-width", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: LayoutGrid, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LayoutGrid extends Gtk.Bin {

    // Own properties of Ide-1.0.Ide.LayoutGrid

    static name: string
    static $gtype: GObject.GType<LayoutGrid>

    // Constructors of Ide-1.0.Ide.LayoutGrid

    constructor(config?: LayoutGrid.ConstructorProperties) 
    constructor() 
    static new(): LayoutGrid
    _init(config?: LayoutGrid.ConstructorProperties): void
}

module LayoutPane {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.DockItem.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.DockBinEdge.ConstructorProperties {
    }

}

interface LayoutPane extends Atk.ImplementorIface, Dazzle.DockItem, Gtk.Buildable {

    // Conflicting properties

    parent_instance: Dazzle.DockRevealer & Dazzle.Bin & Gtk.Bin & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Conflicting methods

    get_child_visible(child: Dazzle.DockItem): boolean

    // Overloads of get_child_visible

    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the value set with gtk_widget_set_child_visible().
     * If you feel a need to use this function, your code probably
     * needs reorganization.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @returns %TRUE if the widget is mapped with the parent.
     */
    get_child_visible(): boolean
    /**
     * Gets the parent #DzlDockItem, or %NULL.
     * @returns A #DzlDockItem or %NULL.
     */
    get_parent(): Dazzle.DockItem | null

    // Overloads of get_parent

    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    /**
     * Returns the parent container of `widget`.
     * @returns the parent container of @widget, or %NULL
     */
    get_parent(): Gtk.Widget | null
    set_child_visible(child: Dazzle.DockItem, child_visible: boolean): void

    // Overloads of set_child_visible

    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void
    /**
     * Sets whether `widget` should be mapped along with its when its parent
     * is mapped and `widget` has been shown with gtk_widget_show().
     * 
     * The child visibility can be set for widget before it is added to
     * a container with gtk_widget_set_parent(), to avoid mapping
     * children unnecessary before immediately unmapping them. However
     * it will be reset to its default state of %TRUE when the widget
     * is removed from a container.
     * 
     * Note that changing the child visibility of a widget does not
     * queue a resize on the widget. Most of the time, the size of
     * a widget is computed from all visible children, whether or
     * not they are mapped. If this is not the case, the container
     * can queue a resize itself.
     * 
     * This function is only useful for container implementations and
     * never should be called by an application.
     * @param is_visible if %TRUE, `widget` should be mapped along with its parent.
     */
    set_child_visible(is_visible: boolean): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.LayoutPane

    connect(sigName: "notify::edge", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::edge", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::edge", ...args: any[]): void
    connect(sigName: "notify::child-revealed", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child-revealed", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child-revealed", ...args: any[]): void
    connect(sigName: "notify::position", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::position", ...args: any[]): void
    connect(sigName: "notify::position-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::position-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::position-set", ...args: any[]): void
    connect(sigName: "notify::reveal-child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::reveal-child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::reveal-child", ...args: any[]): void
    connect(sigName: "notify::transition-duration", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transition-duration", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transition-duration", ...args: any[]): void
    connect(sigName: "notify::transition-type", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transition-type", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transition-type", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: LayoutPane, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LayoutPane extends Dazzle.DockBinEdge {

    // Own properties of Ide-1.0.Ide.LayoutPane

    static name: string
    static $gtype: GObject.GType<LayoutPane>

    // Constructors of Ide-1.0.Ide.LayoutPane

    constructor(config?: LayoutPane.ConstructorProperties) 
    _init(config?: LayoutPane.ConstructorProperties): void
}

module LayoutStack {

    // Signal callback interfaces

    /**
     * Signal callback interface for `empty`
     */
    interface EmptySignalCallback {
        ($obj: LayoutStack): void
    }

    /**
     * Signal callback interface for `split`
     */
    interface SplitSignalCallback {
        ($obj: LayoutStack, view: LayoutView, split_type: number, file: Gio.File): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Bin.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.LayoutStack

        active_view?: LayoutView | null
    }

}

interface LayoutStack extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.LayoutStack

    active_view: LayoutView

    // Owm methods of Ide-1.0.Ide.LayoutStack

    add_control(control: Gtk.Widget, priority: number): void
    foreach_view(callback: Gtk.Callback): void
    get_active_view(): Gtk.Widget | null
    remove(view: Gtk.Widget): void
    set_active_view(active_view: Gtk.Widget): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.LayoutStack

    connect(sigName: "empty", callback: LayoutStack.EmptySignalCallback): number
    connect_after(sigName: "empty", callback: LayoutStack.EmptySignalCallback): number
    emit(sigName: "empty", ...args: any[]): void
    connect(sigName: "split", callback: LayoutStack.SplitSignalCallback): number
    connect_after(sigName: "split", callback: LayoutStack.SplitSignalCallback): number
    emit(sigName: "split", view: LayoutView, split_type: number, file: Gio.File, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.LayoutStack

    connect(sigName: "notify::active-view", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active-view", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active-view", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: LayoutStack, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LayoutStack extends Gtk.Bin {

    // Own properties of Ide-1.0.Ide.LayoutStack

    static name: string
    static $gtype: GObject.GType<LayoutStack>

    // Constructors of Ide-1.0.Ide.LayoutStack

    constructor(config?: LayoutStack.ConstructorProperties) 
    constructor() 
    static new(): LayoutStack
    _init(config?: LayoutStack.ConstructorProperties): void
}

module LayoutView {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface LayoutView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.LayoutView

    readonly can_split: boolean
    readonly modified: boolean
    readonly special_title: string | null
    readonly title: string | null

    // Own fields of Ide-1.0.Ide.LayoutView

    parent_instance: Gtk.Box & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.LayoutView

    agree_to_close(): boolean
    /**
     * Creates a new view that can be displayed in a split, potentially with a different
     * buffer. If the view does not support splits, %NULL will be returned.
     * @param file A #GFile already loaded by the #IdeBufferManager, or %NULL to use the existing buffer.
     * @returns A #IdeLayoutView.
     */
    create_split(file: Gio.File): LayoutView
    /**
     * Checks if `self` can create a preview view (such as html, markdown, etc).
     * @returns %TRUE if @self can create a preview view.
     */
    get_can_preview(): boolean
    /**
     * Checks if `self` can create a split view. If so, %TRUE is returned. Otherwise, %FALSE.
     * @returns %TRUE if @self can create a split.
     */
    get_can_split(): boolean
    get_modified(): boolean
    get_special_title(): string | null
    /**
     * Returns whether view is split or not.
     */
    get_split_view(): boolean
    get_title(): string | null
    navigate_to(location: SourceLocation): void
    set_back_forward_list(back_forward_list: BackForwardList): void
    /**
     * Set a split view using GtkPaned style split with %GTK_ORIENTATION_VERTICAL.
     * @param split_view if the split should be enabled.
     */
    set_split_view(split_view: boolean): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own virtual methods of Ide-1.0.Ide.LayoutView

    vfunc_agree_to_close(): boolean
    /**
     * Creates a new view that can be displayed in a split, potentially with a different
     * buffer. If the view does not support splits, %NULL will be returned.
     * @virtual 
     * @param file A #GFile already loaded by the #IdeBufferManager, or %NULL to use the existing buffer.
     * @returns A #IdeLayoutView.
     */
    vfunc_create_split(file: Gio.File): LayoutView
    /**
     * Checks if `self` can create a preview view (such as html, markdown, etc).
     * @virtual 
     * @returns %TRUE if @self can create a preview view.
     */
    vfunc_get_can_preview(): boolean
    /**
     * Checks if `self` can create a split view. If so, %TRUE is returned. Otherwise, %FALSE.
     * @virtual 
     * @returns %TRUE if @self can create a split.
     */
    vfunc_get_can_split(): boolean
    vfunc_get_modified(): boolean
    vfunc_get_special_title(): string | null
    /**
     * Returns whether view is split or not.
     * @virtual 
     */
    vfunc_get_split_view(): boolean
    vfunc_get_title(): string | null
    vfunc_navigate_to(location: SourceLocation): void
    vfunc_set_back_forward_list(back_forward_list: BackForwardList): void
    /**
     * Set a split view using GtkPaned style split with %GTK_ORIENTATION_VERTICAL.
     * @virtual 
     * @param split_view if the split should be enabled.
     */
    vfunc_set_split_view(split_view: boolean): void

    // Class property signals of Ide-1.0.Ide.LayoutView

    connect(sigName: "notify::can-split", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-split", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-split", ...args: any[]): void
    connect(sigName: "notify::modified", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modified", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::modified", ...args: any[]): void
    connect(sigName: "notify::special-title", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::special-title", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::special-title", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: LayoutView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LayoutView extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.LayoutView

    static name: string
    static $gtype: GObject.GType<LayoutView>

    // Constructors of Ide-1.0.Ide.LayoutView

    constructor(config?: LayoutView.ConstructorProperties) 
    _init(config?: LayoutView.ConstructorProperties): void
}

module LocalDevice {

    // Constructor properties interface

    interface ConstructorProperties extends Device.ConstructorProperties {
    }

}

interface LocalDevice {

    // Own fields of Ide-1.0.Ide.LocalDevice

    parent_instance: Device & Object & GObject.Object & GObject.Object

    // Class property signals of Ide-1.0.Ide.LocalDevice

    connect(sigName: "notify::display-name", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::system-type", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::system-type", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::system-type", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: LocalDevice, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class LocalDevice extends Device {

    // Own properties of Ide-1.0.Ide.LocalDevice

    static name: string
    static $gtype: GObject.GType<LocalDevice>

    // Constructors of Ide-1.0.Ide.LocalDevice

    constructor(config?: LocalDevice.ConstructorProperties) 
    _init(config?: LocalDevice.ConstructorProperties): void
}

module Object {

    // Signal callback interfaces

    /**
     * Signal callback interface for `destroy`
     */
    interface DestroySignalCallback {
        ($obj: Object): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Object

        context?: Context | null
    }

}

interface Object {

    // Own properties of Ide-1.0.Ide.Object

    readonly context: Context

    // Own fields of Ide-1.0.Ide.Object

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.Object

    /**
     * Fetches the #IdeObject:context property.
     * @returns An #IdeContext.
     */
    get_context(): Context
    /**
     * This function will acquire a reference to the IdeContext that the object
     * is a part of. This is useful if you are going to be doing a long running
     * task (such as something in a thread) and want to ensure the context cannot
     * be unloaded during your operation.
     * 
     * You should call ide_object_release() an equivalent number of times to
     * ensure the context may be freed afterwards.
     * 
     * You should check the return value of this function to ensure that the
     * context is not already in shutdown.
     * @returns %TRUE if a hold was successfully created.
     */
    hold(): boolean
    /**
     * Releases a successful hold on the context previously created with ide_object_hold().
     */
    release(): void
    set_context(context: Context): void

    // Own virtual methods of Ide-1.0.Ide.Object

    vfunc_destroy(): void
    /**
     * Fetches the #IdeObject:context property.
     * @virtual 
     * @returns An #IdeContext.
     */
    vfunc_get_context(): Context
    vfunc_set_context(context: Context): void

    // Own signals of Ide-1.0.Ide.Object

    connect(sigName: "destroy", callback: Object.DestroySignalCallback): number
    connect_after(sigName: "destroy", callback: Object.DestroySignalCallback): number
    emit(sigName: "destroy", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Object

    connect(sigName: "notify::context", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Object, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Object extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Object

    static name: string
    static $gtype: GObject.GType<Object>

    // Constructors of Ide-1.0.Ide.Object

    constructor(config?: Object.ConstructorProperties) 
    static new_finish(result: Gio.AsyncResult): Object
    _init(config?: Object.ConstructorProperties): void
    static notify_in_main(instance: any | null, pspec: GObject.ParamSpec): void
}

module OmniBar {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface OmniBar extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.OmniBar

    connect(sigName: "notify::baseline-position", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: OmniBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class OmniBar extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniBar

    static name: string
    static $gtype: GObject.GType<OmniBar>

    // Constructors of Ide-1.0.Ide.OmniBar

    constructor(config?: OmniBar.ConstructorProperties) 
    constructor() 
    static new(): OmniBar

    // Overloads of new

    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: OmniBar.ConstructorProperties): void
}

module OmniSearchDisplay {

    // Signal callback interfaces

    /**
     * Signal callback interface for `activate`
     */
    interface ActivateSignalCallback {
        ($obj: OmniSearchDisplay): void
    }

    /**
     * Signal callback interface for `result-activated`
     */
    interface ResultActivatedSignalCallback {
        ($obj: OmniSearchDisplay, object: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchDisplay

        context?: SearchContext | null
    }

}

interface OmniSearchDisplay extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplay

    context: SearchContext

    // Owm methods of Ide-1.0.Ide.OmniSearchDisplay

    get_context(): SearchContext
    get_count(): number
    move_next_result(): void
    move_previous_result(): void
    set_context(context: SearchContext): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.OmniSearchDisplay

    connect(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback): number
    connect_after(sigName: "activate", callback: OmniSearchDisplay.ActivateSignalCallback): number
    emit(sigName: "activate", ...args: any[]): void
    connect(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback): number
    connect_after(sigName: "result-activated", callback: OmniSearchDisplay.ResultActivatedSignalCallback): number
    emit(sigName: "result-activated", object: SearchResult, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchDisplay

    connect(sigName: "notify::context", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: OmniSearchDisplay, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class OmniSearchDisplay extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplay

    static name: string
    static $gtype: GObject.GType<OmniSearchDisplay>

    // Constructors of Ide-1.0.Ide.OmniSearchDisplay

    constructor(config?: OmniSearchDisplay.ConstructorProperties) 
    _init(config?: OmniSearchDisplay.ConstructorProperties): void
}

module OmniSearchEntry {

    // Signal callback interfaces

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        ($obj: OmniSearchEntry): void
    }

    /**
     * Signal callback interface for `move-next-result`
     */
    interface MoveNextResultSignalCallback {
        ($obj: OmniSearchEntry): void
    }

    /**
     * Signal callback interface for `move-previous-result`
     */
    interface MovePreviousResultSignalCallback {
        ($obj: OmniSearchEntry): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.CellEditable.ConstructorProperties, Gtk.Editable.ConstructorProperties, Gtk.Entry.ConstructorProperties {
    }

}

interface OmniSearchEntry extends Atk.ImplementorIface, Gtk.Buildable, Gtk.CellEditable, Gtk.Editable {

    // Owm methods of Ide-1.0.Ide.OmniSearchEntry

    /**
     * Gets the search engine to use with the current workbench.
     * @returns An #IdeSearchEngine.
     */
    get_search_engine(): SearchEngine
    set_search_engine(search_engine: SearchEngine): void

    // Own signals of Ide-1.0.Ide.OmniSearchEntry

    connect(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback): number
    connect_after(sigName: "clear-search", callback: OmniSearchEntry.ClearSearchSignalCallback): number
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback): number
    connect_after(sigName: "move-next-result", callback: OmniSearchEntry.MoveNextResultSignalCallback): number
    emit(sigName: "move-next-result", ...args: any[]): void
    connect(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback): number
    connect_after(sigName: "move-previous-result", callback: OmniSearchEntry.MovePreviousResultSignalCallback): number
    emit(sigName: "move-previous-result", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchEntry

    connect(sigName: "notify::activates-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activates-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::activates-default", ...args: any[]): void
    connect(sigName: "notify::attributes", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attributes", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::attributes", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::caps-lock-warning", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::caps-lock-warning", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::caps-lock-warning", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completion", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::cursor-position", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-position", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::cursor-position", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::enable-emoji-completion", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-emoji-completion", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::enable-emoji-completion", ...args: any[]): void
    connect(sigName: "notify::has-frame", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-frame", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-frame", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-module", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::inner-border", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inner-border", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::inner-border", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::invisible-char", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invisible-char", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::invisible-char", ...args: any[]): void
    connect(sigName: "notify::invisible-char-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::invisible-char-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::invisible-char-set", ...args: any[]): void
    connect(sigName: "notify::max-length", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-length", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::max-length", ...args: any[]): void
    connect(sigName: "notify::max-width-chars", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::max-width-chars", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::max-width-chars", ...args: any[]): void
    connect(sigName: "notify::overwrite-mode", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite-mode", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite-mode", ...args: any[]): void
    connect(sigName: "notify::placeholder-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::placeholder-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::placeholder-text", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::populate-all", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::primary-icon-activatable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-activatable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::primary-icon-gicon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-gicon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::primary-icon-name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-name", ...args: any[]): void
    connect(sigName: "notify::primary-icon-pixbuf", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-pixbuf", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::primary-icon-sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::primary-icon-stock", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-stock", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::primary-icon-storage-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-storage-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::primary-icon-tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::primary-icon-tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::primary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::progress-fraction", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-fraction", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress-fraction", ...args: any[]): void
    connect(sigName: "notify::progress-pulse-step", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress-pulse-step", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress-pulse-step", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-offset", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-activatable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-activatable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-activatable", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-gicon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-gicon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-gicon", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-name", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-pixbuf", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-pixbuf", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-pixbuf", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-sensitive", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-stock", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-stock", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-stock", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-storage-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-storage-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-storage-type", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::secondary-icon-tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::secondary-icon-tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::secondary-icon-tooltip-text", ...args: any[]): void
    connect(sigName: "notify::selection-bound", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selection-bound", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::selection-bound", ...args: any[]): void
    connect(sigName: "notify::shadow-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::shadow-type", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::shadow-type", ...args: any[]): void
    connect(sigName: "notify::show-emoji-icon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-emoji-icon", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-emoji-icon", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-length", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-length", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::text-length", ...args: any[]): void
    connect(sigName: "notify::truncate-multiline", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::truncate-multiline", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::truncate-multiline", ...args: any[]): void
    connect(sigName: "notify::visibility", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visibility", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visibility", ...args: any[]): void
    connect(sigName: "notify::width-chars", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-chars", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-chars", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::editing-canceled", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editing-canceled", callback: (($obj: OmniSearchEntry, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::editing-canceled", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class OmniSearchEntry extends Gtk.Entry {

    // Own properties of Ide-1.0.Ide.OmniSearchEntry

    static name: string
    static $gtype: GObject.GType<OmniSearchEntry>

    // Constructors of Ide-1.0.Ide.OmniSearchEntry

    constructor(config?: OmniSearchEntry.ConstructorProperties) 
    constructor() 
    static new(): OmniSearchEntry
    _init(config?: OmniSearchEntry.ConstructorProperties): void
}

module OmniSearchGroup {

    // Signal callback interfaces

    /**
     * Signal callback interface for `result-activated`
     */
    interface ResultActivatedSignalCallback {
        ($obj: OmniSearchGroup, object: Gtk.Widget, p0: SearchResult): void
    }

    /**
     * Signal callback interface for `result-selected`
     */
    interface ResultSelectedSignalCallback {
        ($obj: OmniSearchGroup, object: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchGroup

        provider?: SearchProvider | null
    }

}

interface OmniSearchGroup extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.OmniSearchGroup

    readonly provider: SearchProvider

    // Owm methods of Ide-1.0.Ide.OmniSearchGroup

    activate(): boolean
    add_result(result: SearchResult): void
    clear(): void
    get_count(): number
    get_first(): SearchResult | null
    get_provider(): SearchProvider
    has_selection(): boolean
    move_next(): boolean
    move_previous(): boolean
    remove_result(result: SearchResult): void
    select_first(): void
    select_last(): void
    unselect(): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.OmniSearchGroup

    connect(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback): number
    connect_after(sigName: "result-activated", callback: OmniSearchGroup.ResultActivatedSignalCallback): number
    emit(sigName: "result-activated", object: Gtk.Widget, p0: SearchResult, ...args: any[]): void
    connect(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback): number
    connect_after(sigName: "result-selected", callback: OmniSearchGroup.ResultSelectedSignalCallback): number
    emit(sigName: "result-selected", object: SearchResult, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.OmniSearchGroup

    connect(sigName: "notify::provider", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::provider", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::provider", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: OmniSearchGroup, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class OmniSearchGroup extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.OmniSearchGroup

    static name: string
    static $gtype: GObject.GType<OmniSearchGroup>

    // Constructors of Ide-1.0.Ide.OmniSearchGroup

    constructor(config?: OmniSearchGroup.ConstructorProperties) 
    _init(config?: OmniSearchGroup.ConstructorProperties): void
}

module OmniSearchRow {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ListBoxRow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.OmniSearchRow

        icon_name?: string | null
        result?: SearchResult | null
    }

}

interface OmniSearchRow extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.OmniSearchRow

    icon_name: string | null
    result: SearchResult

    // Conflicting properties

    parent_instance: Gtk.Bin & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.OmniSearchRow

    get_result(): SearchResult
    set_result(result: SearchResult): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.OmniSearchRow

    connect(sigName: "notify::icon-name", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::result", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::result", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::result", ...args: any[]): void
    connect(sigName: "notify::activatable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activatable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::activatable", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: OmniSearchRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class OmniSearchRow extends Gtk.ListBoxRow {

    // Own properties of Ide-1.0.Ide.OmniSearchRow

    static name: string
    static $gtype: GObject.GType<OmniSearchRow>

    // Constructors of Ide-1.0.Ide.OmniSearchRow

    constructor(config?: OmniSearchRow.ConstructorProperties) 
    _init(config?: OmniSearchRow.ConstructorProperties): void
}

module PkconTransfer {

    // Constructor properties interface

    interface ConstructorProperties extends Transfer.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.PkconTransfer

        packages?: string[] | null
    }

}

interface PkconTransfer {

    // Own properties of Ide-1.0.Ide.PkconTransfer

    readonly packages: string[]

    // Class property signals of Ide-1.0.Ide.PkconTransfer

    connect(sigName: "notify::packages", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::packages", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::packages", ...args: any[]): void
    connect(sigName: "notify::active", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::status", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: PkconTransfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class PkconTransfer extends Transfer {

    // Own properties of Ide-1.0.Ide.PkconTransfer

    static name: string
    static $gtype: GObject.GType<PkconTransfer>

    // Constructors of Ide-1.0.Ide.PkconTransfer

    constructor(config?: PkconTransfer.ConstructorProperties) 
    constructor(packages: string | null) 
    static new(packages: string | null): PkconTransfer
    _init(config?: PkconTransfer.ConstructorProperties): void
}

module PreferencesPerspective {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Dazzle.Preferences.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Perspective.ConstructorProperties, Dazzle.PreferencesView.ConstructorProperties {
    }

}

interface PreferencesPerspective extends Atk.ImplementorIface, Dazzle.Preferences, Gtk.Buildable, Perspective {

    // Conflicting properties

    parent_instance: Gtk.Bin & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.PreferencesPerspective

    connect(sigName: "notify::show-search-entry", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-search-entry", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-search-entry", ...args: any[]): void
    connect(sigName: "notify::use-sidebar", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-sidebar", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-sidebar", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: PreferencesPerspective, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class PreferencesPerspective extends Dazzle.PreferencesView {

    // Own properties of Ide-1.0.Ide.PreferencesPerspective

    static name: string
    static $gtype: GObject.GType<PreferencesPerspective>

    // Constructors of Ide-1.0.Ide.PreferencesPerspective

    constructor(config?: PreferencesPerspective.ConstructorProperties) 
    _init(config?: PreferencesPerspective.ConstructorProperties): void
}

module Progress {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Progress

        fraction?: number | null
        message?: string | null
    }

}

interface Progress {

    // Own properties of Ide-1.0.Ide.Progress

    readonly completed: boolean
    fraction: number
    message: string | null

    // Owm methods of Ide-1.0.Ide.Progress

    get_fraction(): number
    get_message(): string | null
    set_fraction(fraction: number): void
    set_message(message: string | null): void

    // Class property signals of Ide-1.0.Ide.Progress

    connect(sigName: "notify::completed", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::fraction", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::fraction", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::fraction", ...args: any[]): void
    connect(sigName: "notify::message", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message", callback: (($obj: Progress, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::message", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Progress extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Progress

    static name: string
    static $gtype: GObject.GType<Progress>

    // Constructors of Ide-1.0.Ide.Progress

    constructor(config?: Progress.ConstructorProperties) 
    constructor() 
    static new(): Progress
    _init(config?: Progress.ConstructorProperties): void
    /**
     * This function is a #GFileProgressCallback helper that will update the
     * #IdeProgress:fraction property. `user_data` must be an #IdeProgress.
     * 
     * Remember to make sure to unref the #IdeProgress instance with
     * g_object_unref() during the #GDestroyNotify.
     * @param current_num_bytes 
     * @param total_num_bytes 
     * @param user_data 
     */
    static file_progress_callback(current_num_bytes: number, total_num_bytes: number, user_data: any | null): void
    static flatpak_progress_callback(status: string | null, progress: number, estimating: boolean, user_data: any | null): void
}

module Project {

    // Signal callback interfaces

    /**
     * Signal callback interface for `file-renamed`
     */
    interface FileRenamedSignalCallback {
        ($obj: Project, object: Gio.File, p0: Gio.File): void
    }

    /**
     * Signal callback interface for `file-trashed`
     */
    interface FileTrashedSignalCallback {
        ($obj: Project, object: Gio.File): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Project

        root?: ProjectItem | null
    }

}

interface Project {

    // Own properties of Ide-1.0.Ide.Project

    readonly id: string | null
    readonly name: string | null
    readonly root: ProjectItem

    // Owm methods of Ide-1.0.Ide.Project

    add_file(file: ProjectFile): void
    /**
     * Retrieves an #IdeFile for the path specified. #IdeFile provides access to
     * language specific features via ide_file_get_language().
     * 
     * You must hold the reader lock while calling this function. See
     * ide_project_reader_lock() and ide_project_reader_unlock() for more
     * information.
     * @param path A relative path from the project root.
     * @returns An #IdeFile or %NULL if no matching   file could be found.
     */
    get_file_for_path(path: string | null): File | null
    /**
     * Gets the #IdeProjectFiles instance within the project tree.
     * If it has not yet been loaded, %NULL is returned.
     * @returns An #IdeProjectFiles or %NULL.
     */
    get_files(): ProjectFiles | null
    get_id(): string | null
    get_name(): string | null
    /**
     * Gets a new #IdeFile representing `gfile`.
     * @param gfile A #GFile.
     * @returns An #IdeFile.
     */
    get_project_file(gfile: Gio.File): File
    /**
     * Retrieves the root item of the project tree.
     * 
     * You must be holding the reader lock while calling and using the result of
     * this function. Other thread may be accessing or modifying the tree without
     * your knowledge. See ide_project_reader_lock() and ide_project_reader_unlock()
     * for more information.
     * 
     * If you need to modify the tree, you must hold a writer lock that has been
     * acquired with ide_project_writer_lock() and released with
     * ide_project_writer_unlock() when you are no longer modifiying the tree.
     * @returns An #IdeProjectItem.
     */
    get_root(): ProjectItem
    reader_lock(): void
    reader_unlock(): void
    rename_file_async(orig_file: Gio.File, new_file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of rename_file_async

    /**
     * Promisified version of {@link rename_file_async}
     * 
     * 
     * @param orig_file 
     * @param new_file 
     * @param cancellable 
     * @returns A Promise of the result of {@link rename_file_async}
     */
    rename_file_async(orig_file: Gio.File, new_file: Gio.File, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    rename_file_finish(result: Gio.AsyncResult): boolean
    trash_file_async(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of trash_file_async

    /**
     * Promisified version of {@link trash_file_async}
     * 
     * 
     * @param file 
     * @param cancellable 
     * @returns A Promise of the result of {@link trash_file_async}
     */
    trash_file_async(file: Gio.File, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    trash_file_finish(result: Gio.AsyncResult): boolean
    writer_lock(): void
    writer_unlock(): void

    // Own signals of Ide-1.0.Ide.Project

    connect(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback): number
    connect_after(sigName: "file-renamed", callback: Project.FileRenamedSignalCallback): number
    emit(sigName: "file-renamed", object: Gio.File, p0: Gio.File, ...args: any[]): void
    connect(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback): number
    connect_after(sigName: "file-trashed", callback: Project.FileTrashedSignalCallback): number
    emit(sigName: "file-trashed", object: Gio.File, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Project

    connect(sigName: "notify::id", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::root", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::root", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::root", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Project, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Project extends Object {

    // Own properties of Ide-1.0.Ide.Project

    static name: string
    static $gtype: GObject.GType<Project>

    // Constructors of Ide-1.0.Ide.Project

    constructor(config?: Project.ConstructorProperties) 
    _init(config?: Project.ConstructorProperties): void
}

module ProjectEdit {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectEdit

        range?: SourceRange | null
        replacement?: string | null
    }

}

interface ProjectEdit {

    // Own properties of Ide-1.0.Ide.ProjectEdit

    range: SourceRange
    replacement: string | null

    // Own fields of Ide-1.0.Ide.ProjectEdit

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.ProjectEdit

    /**
     * Returns the range for the edit.
     * @returns An #IdeSourceRange
     */
    get_range(): SourceRange | null
    get_replacement(): string | null
    set_range(range: SourceRange): void
    set_replacement(replacement: string | null): void

    // Class property signals of Ide-1.0.Ide.ProjectEdit

    connect(sigName: "notify::range", callback: (($obj: ProjectEdit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::range", callback: (($obj: ProjectEdit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::range", ...args: any[]): void
    connect(sigName: "notify::replacement", callback: (($obj: ProjectEdit, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::replacement", callback: (($obj: ProjectEdit, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::replacement", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectEdit extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectEdit

    static name: string
    static $gtype: GObject.GType<ProjectEdit>

    // Constructors of Ide-1.0.Ide.ProjectEdit

    constructor(config?: ProjectEdit.ConstructorProperties) 
    constructor() 
    static new(): ProjectEdit
    _init(config?: ProjectEdit.ConstructorProperties): void
}

module ProjectFile {

    // Constructor properties interface

    interface ConstructorProperties extends ProjectItem.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectFile

        file?: Gio.File | null
        file_info?: Gio.FileInfo | null
        path?: string | null
    }

}

interface ProjectFile {

    // Own properties of Ide-1.0.Ide.ProjectFile

    file: Gio.File
    file_info: Gio.FileInfo
    readonly is_directory: boolean
    readonly name: string | null
    path: string | null

    // Own fields of Ide-1.0.Ide.ProjectFile

    parent_instance: ProjectItem & Object & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.ProjectFile

    /**
     * Retrieves the underlying #GFile represented by `file`.
     * @returns Retrieves the #GFile represented by @file.
     */
    get_file(): Gio.File
    /**
     * Retrieves a #GFileInfo containing the basic information about `file`. This
     * includes the name, display name, and file type.
     * @returns A #GFileInfo
     */
    get_file_info(): Gio.FileInfo
    get_is_directory(): boolean
    get_name(): string | null
    get_path(): string | null

    // Class property signals of Ide-1.0.Ide.ProjectFile

    connect(sigName: "notify::file", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::file-info", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file-info", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file-info", ...args: any[]): void
    connect(sigName: "notify::is-directory", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-directory", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-directory", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::path", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::path", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::path", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ProjectFile, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectFile extends ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectFile

    static name: string
    static $gtype: GObject.GType<ProjectFile>

    // Constructors of Ide-1.0.Ide.ProjectFile

    constructor(config?: ProjectFile.ConstructorProperties) 
    _init(config?: ProjectFile.ConstructorProperties): void
}

module ProjectFiles {

    // Constructor properties interface

    interface ConstructorProperties extends ProjectItem.ConstructorProperties {
    }

}

interface ProjectFiles {

    // Own fields of Ide-1.0.Ide.ProjectFiles

    parent_instance: ProjectItem & Object & GObject.Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.ProjectFiles

    add_file(file: ProjectFile): void
    /**
     * Tries to locate an #IdeProjectFile matching the given file.
     * If `file` is the working directory, `self` is returned.
     * @param file A #GFile.
     * @returns An #IdeProjectItem or %NULL.
     */
    find_file(file: Gio.File): ProjectItem | null
    /**
     * Retrieves an #IdeFile for the path. If no such path exists within the
     * project, %NULL is returned.
     * @param path 
     * @returns An #IdeFile or %NULL.
     */
    get_file_for_path(path: string | null): File | null

    // Class property signals of Ide-1.0.Ide.ProjectFiles

    connect(sigName: "notify::parent", callback: (($obj: ProjectFiles, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: ProjectFiles, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ProjectFiles, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ProjectFiles, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectFiles extends ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectFiles

    static name: string
    static $gtype: GObject.GType<ProjectFiles>

    // Constructors of Ide-1.0.Ide.ProjectFiles

    constructor(config?: ProjectFiles.ConstructorProperties) 
    _init(config?: ProjectFiles.ConstructorProperties): void
}

module ProjectInfo {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectInfo

        build_system_name?: string | null
        description?: string | null
        directory?: Gio.File | null
        doap?: Doap | null
        file?: Gio.File | null
        is_recent?: boolean | null
        languages?: string[] | null
        last_modified_at?: GLib.DateTime | null
        name?: string | null
        priority?: number | null
    }

}

interface ProjectInfo {

    // Own properties of Ide-1.0.Ide.ProjectInfo

    build_system_name: string | null
    description: string | null
    directory: Gio.File
    doap: Doap
    file: Gio.File
    is_recent: boolean
    languages: string[]
    last_modified_at: GLib.DateTime
    name: string | null
    priority: number

    // Owm methods of Ide-1.0.Ide.ProjectInfo

    compare(info2: ProjectInfo): number
    get_build_system_name(): string | null
    get_description(): string | null
    /**
     * Gets the #IdeProjectInfo:directory property.
     * This is the directory containing the project (if known).
     * @returns A #GFile.
     */
    get_directory(): Gio.File | null
    get_doap(): Doap | null
    /**
     * Gets the #IdeProjectInfo:file property.
     * This is the project file (such as configure.ac) of the project.
     * @returns A #GFile.
     */
    get_file(): Gio.File | null
    get_is_recent(): boolean
    get_languages(): string[]
    get_last_modified_at(): GLib.DateTime | null
    get_name(): string | null
    get_priority(): number
    set_build_system_name(build_system_name: string | null): void
    set_description(description: string | null): void
    set_directory(directory: Gio.File): void
    set_file(file: Gio.File): void
    set_is_recent(is_recent: boolean): void
    set_languages(languages: string | null): void
    set_name(name: string | null): void
    set_priority(priority: number): void

    // Class property signals of Ide-1.0.Ide.ProjectInfo

    connect(sigName: "notify::build-system-name", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::build-system-name", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::build-system-name", ...args: any[]): void
    connect(sigName: "notify::description", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::directory", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::directory", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::directory", ...args: any[]): void
    connect(sigName: "notify::doap", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::doap", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::doap", ...args: any[]): void
    connect(sigName: "notify::file", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file", ...args: any[]): void
    connect(sigName: "notify::is-recent", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-recent", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-recent", ...args: any[]): void
    connect(sigName: "notify::languages", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::languages", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::languages", ...args: any[]): void
    connect(sigName: "notify::last-modified-at", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::last-modified-at", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::last-modified-at", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::priority", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::priority", callback: (($obj: ProjectInfo, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::priority", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * This class contains information about a project that can be loaded.
 * This information should be used to display a list of available projects.
 * @class 
 */
class ProjectInfo extends GObject.Object {

    // Own properties of Ide-1.0.Ide.ProjectInfo

    static name: string
    static $gtype: GObject.GType<ProjectInfo>

    // Constructors of Ide-1.0.Ide.ProjectInfo

    constructor(config?: ProjectInfo.ConstructorProperties) 
    _init(config?: ProjectInfo.ConstructorProperties): void
}

module ProjectItem {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.ProjectItem

        parent?: ProjectItem | null
    }

}

interface ProjectItem {

    // Own properties of Ide-1.0.Ide.ProjectItem

    parent: ProjectItem

    // Own fields of Ide-1.0.Ide.ProjectItem

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.ProjectItem

    append(child: ProjectItem): void
    /**
     * A scalable list containing the children of the item.
     * @returns A #GSequence.
     */
    get_children(): GLib.Sequence
    /**
     * Retrieves the parent #IdeProjectItem of `item,` or %NULL if `item` is the root
     * of the project tree.
     * @returns An #IdeProjectItem or %NULL if the item   is the root of the tree.
     */
    get_parent(): ProjectItem | null
    remove(child: ProjectItem): void

    // Class property signals of Ide-1.0.Ide.ProjectItem

    connect(sigName: "notify::parent", callback: (($obj: ProjectItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: ProjectItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: ProjectItem, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: ProjectItem, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class ProjectItem extends Object {

    // Own properties of Ide-1.0.Ide.ProjectItem

    static name: string
    static $gtype: GObject.GType<ProjectItem>

    // Constructors of Ide-1.0.Ide.ProjectItem

    constructor(config?: ProjectItem.ConstructorProperties) 
    _init(config?: ProjectItem.ConstructorProperties): void
}

module RecentProjects {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, GObject.Object.ConstructorProperties {
    }

}

interface RecentProjects extends Gio.ListModel {

    // Owm methods of Ide-1.0.Ide.RecentProjects

    discover_async(recent_only: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of discover_async

    /**
     * Promisified version of {@link discover_async}
     * 
     * 
     * @param recent_only 
     * @param cancellable 
     * @returns A Promise of the result of {@link discover_async}
     */
    discover_async(recent_only: boolean, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    discover_finish(result: Gio.AsyncResult): boolean
    get_busy(): boolean
    /**
     * Gets a #GPtrArray containing the #IdeProjectInfo that have been discovered.
     * @returns A #GPtrArray of #IdeProjectInfo.
     */
    get_projects(): ProjectInfo[]
    /**
     * Removes the provided projects from the recent projects file.
     * @param project_infos A #GList of #IdeProjectInfo.
     */
    remove(project_infos: ProjectInfo[]): void

    // Class property signals of Ide-1.0.Ide.RecentProjects

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RecentProjects extends GObject.Object {

    // Own properties of Ide-1.0.Ide.RecentProjects

    static name: string
    static $gtype: GObject.GType<RecentProjects>

    // Constructors of Ide-1.0.Ide.RecentProjects

    constructor(config?: RecentProjects.ConstructorProperties) 
    constructor() 
    static new(): RecentProjects
    _init(config?: RecentProjects.ConstructorProperties): void
}

module RunButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.Box.ConstructorProperties {
    }

}

interface RunButton extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.RunButton

    connect(sigName: "notify::baseline-position", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: RunButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RunButton extends Gtk.Box {

    // Own properties of Ide-1.0.Ide.RunButton

    static name: string
    static $gtype: GObject.GType<RunButton>

    // Constructors of Ide-1.0.Ide.RunButton

    constructor(config?: RunButton.ConstructorProperties) 
    constructor() 
    static new(): RunButton

    // Overloads of new

    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: RunButton.ConstructorProperties): void
}

module RunManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `run`
     */
    interface RunSignalCallback {
        ($obj: RunManager, runner: Runner): void
    }

    /**
     * Signal callback interface for `stopped`
     */
    interface StoppedSignalCallback {
        ($obj: RunManager): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ActionGroup.ConstructorProperties, Gio.Initable.ConstructorProperties, Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.RunManager

        build_target?: BuildTarget | null
    }

}

interface RunManager extends Gio.ActionGroup, Gio.Initable {

    // Own properties of Ide-1.0.Ide.RunManager

    build_target: BuildTarget
    readonly busy: boolean
    readonly handler: string | null

    // Owm methods of Ide-1.0.Ide.RunManager

    add_handler(id: string | null, title: string | null, icon_name: string | null, accel: string | null, run_handler: RunHandler): void
    cancel(): void
    discover_default_target_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of discover_default_target_async

    /**
     * Promisified version of {@link discover_default_target_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of: An #IdeBuildTarget if successful; otherwise %NULL   and @error is set.
     */
    discover_default_target_async(cancellable: Gio.Cancellable | null): globalThis.Promise<BuildTarget>
    discover_default_target_finish(result: Gio.AsyncResult): BuildTarget
    /**
     * Gets the build target that will be executed by the run manager which
     * was either specified to ide_run_manager_run_async() or determined by
     * the build system.
     * @returns An #IdeBuildTarget or %NULL if no build target   has been set.
     */
    get_build_target(): BuildTarget
    get_busy(): boolean
    get_handler(): string | null
    remove_handler(id: string | null): void
    run_async(build_target: BuildTarget, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of run_async

    /**
     * Promisified version of {@link run_async}
     * 
     * 
     * @param build_target 
     * @param cancellable 
     * @returns A Promise of the result of {@link run_async}
     */
    run_async(build_target: BuildTarget, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    run_finish(result: Gio.AsyncResult): boolean
    set_build_target(build_target: BuildTarget): void
    set_handler(id: string | null): void

    // Own signals of Ide-1.0.Ide.RunManager

    connect(sigName: "run", callback: RunManager.RunSignalCallback): number
    connect_after(sigName: "run", callback: RunManager.RunSignalCallback): number
    emit(sigName: "run", runner: Runner, ...args: any[]): void
    connect(sigName: "stopped", callback: RunManager.StoppedSignalCallback): number
    connect_after(sigName: "stopped", callback: RunManager.StoppedSignalCallback): number
    emit(sigName: "stopped", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.RunManager

    connect(sigName: "notify::build-target", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::build-target", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::build-target", ...args: any[]): void
    connect(sigName: "notify::busy", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::busy", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::busy", ...args: any[]): void
    connect(sigName: "notify::handler", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::handler", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::handler", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: RunManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RunManager extends Object {

    // Own properties of Ide-1.0.Ide.RunManager

    static name: string
    static $gtype: GObject.GType<RunManager>

    // Constructors of Ide-1.0.Ide.RunManager

    constructor(config?: RunManager.ConstructorProperties) 
    _init(config?: RunManager.ConstructorProperties): void
}

module Runner {

    // Signal callback interfaces

    /**
     * Signal callback interface for `exited`
     */
    interface ExitedSignalCallback {
        ($obj: Runner): void
    }

    /**
     * Signal callback interface for `spawned`
     */
    interface SpawnedSignalCallback {
        ($obj: Runner, object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Runner

        argv?: string[] | null
        clear_env?: boolean | null
        /**
         * If the runner has "failed". This should be set if a plugin can determine
         * that the runner cannot be executed due to an external issue. One such
         * example might be a debugger plugin that cannot locate a suitable debugger
         * to run the program.
         */
        failed?: boolean | null
        /**
         * The "run-on-host" property indicates the program should be run on the
         * host machine rather than inside the application sandbox.
         */
        run_on_host?: boolean | null
    }

}

interface Runner {

    // Own properties of Ide-1.0.Ide.Runner

    argv: string[]
    clear_env: boolean
    readonly environment: Environment
    /**
     * If the runner has "failed". This should be set if a plugin can determine
     * that the runner cannot be executed due to an external issue. One such
     * example might be a debugger plugin that cannot locate a suitable debugger
     * to run the program.
     */
    failed: boolean
    /**
     * The "run-on-host" property indicates the program should be run on the
     * host machine rather than inside the application sandbox.
     */
    run_on_host: boolean

    // Own fields of Ide-1.0.Ide.Runner

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.Runner

    append_argv(param: string | null): void
    force_quit(): void
    /**
     * Gets the argument list as a newly allocated string array.
     * @returns A newly allocated string array that should   be freed with g_strfreev().
     */
    get_argv(): string[]
    get_clear_env(): boolean
    get_environment(): Environment
    get_failed(): boolean
    get_flags(): Gio.SubprocessFlags
    get_run_on_host(): boolean
    /**
     * This function will get the #IdeRuntime that will be used to execute the
     * application. Consumers may want to use this to determine if a particular
     * program is available (such as gdb, perf, strace, etc).
     * @returns An #IdeRuntime or %NULL.
     */
    get_runtime(): Runtime | null
    get_stderr(): Gio.InputStream | null
    get_stdin(): Gio.OutputStream | null
    get_stdout(): Gio.InputStream | null
    prepend_argv(param: string | null): void
    run_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of run_async

    /**
     * Promisified version of {@link run_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link run_async}
     */
    run_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    run_finish(result: Gio.AsyncResult): boolean
    set_argv(argv: string | null): void
    set_clear_env(clear_env: boolean): void
    set_failed(failed: boolean): void
    set_flags(flags: Gio.SubprocessFlags): void
    set_run_on_host(run_on_host: boolean): void
    set_tty(tty_fd: number): void
    /**
     * This will ensure that `source_fd` is mapped into the new process as `dest_fd`.
     * If `dest_fd` is -1, then the next fd will be used and that value will be
     * returned. Note that this is not a valid fd in the calling process, only
     * within the destination process.
     * @param source_fd the fd to map, this will be closed by #IdeRunner
     * @param dest_fd the target FD in the spawned process, or -1 for next available
     * @returns @dest_fd or the FD or the next available dest_fd.
     */
    take_fd(source_fd: number, dest_fd: number): number

    // Own virtual methods of Ide-1.0.Ide.Runner

    vfunc_fixup_launcher(launcher: SubprocessLauncher): void
    vfunc_force_quit(): void
    /**
     * This function will get the #IdeRuntime that will be used to execute the
     * application. Consumers may want to use this to determine if a particular
     * program is available (such as gdb, perf, strace, etc).
     * @virtual 
     * @returns An #IdeRuntime or %NULL.
     */
    vfunc_get_runtime(): Runtime | null
    vfunc_get_stderr(): Gio.InputStream | null
    vfunc_get_stdin(): Gio.OutputStream | null
    vfunc_get_stdout(): Gio.InputStream | null
    vfunc_run_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_run_finish(result: Gio.AsyncResult): boolean
    vfunc_set_tty(tty_fd: number): void

    // Own signals of Ide-1.0.Ide.Runner

    connect(sigName: "exited", callback: Runner.ExitedSignalCallback): number
    connect_after(sigName: "exited", callback: Runner.ExitedSignalCallback): number
    emit(sigName: "exited", ...args: any[]): void
    connect(sigName: "spawned", callback: Runner.SpawnedSignalCallback): number
    connect_after(sigName: "spawned", callback: Runner.SpawnedSignalCallback): number
    emit(sigName: "spawned", object: string | null, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Runner

    connect(sigName: "notify::argv", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::argv", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::argv", ...args: any[]): void
    connect(sigName: "notify::clear-env", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clear-env", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::clear-env", ...args: any[]): void
    connect(sigName: "notify::environment", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::environment", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::environment", ...args: any[]): void
    connect(sigName: "notify::failed", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::failed", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::failed", ...args: any[]): void
    connect(sigName: "notify::run-on-host", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::run-on-host", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::run-on-host", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Runner, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Runner extends Object {

    // Own properties of Ide-1.0.Ide.Runner

    static name: string
    static $gtype: GObject.GType<Runner>

    // Constructors of Ide-1.0.Ide.Runner

    constructor(config?: Runner.ConstructorProperties) 
    constructor(context: Context) 
    static new(context: Context): Runner
    _init(config?: Runner.ConstructorProperties): void
}

module Runtime {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Runtime

        display_name?: string | null
        id?: string | null
    }

}

interface Runtime {

    // Own properties of Ide-1.0.Ide.Runtime

    display_name: string | null
    id: string | null

    // Own fields of Ide-1.0.Ide.Runtime

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.Runtime

    contains_program_in_path(program: string | null, cancellable: Gio.Cancellable | null): boolean
    /**
     * Creates a launcher for the runtime.
     * 
     * This can be used to execute a command within a runtime.
     * 
     * It is important that this function can be run from a thread without
     * side effects.
     * @returns An #IdeSubprocessLauncher or %NULL upon failure.
     */
    create_launcher(): SubprocessLauncher
    /**
     * Creates a new runner that can be used to execute the build target within
     * the runtime. This should be used to implement such features as "run target"
     * or "run unit test" inside the target runtime.
     * @param build_target 
     * @returns An #IdeRunner if successful, otherwise   %NULL and @error is set.
     */
    create_runner(build_target: BuildTarget): Runner | null
    get_display_name(): string | null
    get_id(): string | null
    prepare_configuration(configuration: Configuration): void
    set_display_name(display_name: string | null): void
    set_id(id: string | null): void
    /**
     * Translates the file from a path within the runtime to a path that can
     * be accessed from the host system.
     * @param file A #GFile
     * @returns A #GFile.
     */
    translate_file(file: Gio.File): Gio.File

    // Own virtual methods of Ide-1.0.Ide.Runtime

    vfunc_contains_program_in_path(program: string | null, cancellable: Gio.Cancellable | null): boolean
    /**
     * Creates a launcher for the runtime.
     * 
     * This can be used to execute a command within a runtime.
     * 
     * It is important that this function can be run from a thread without
     * side effects.
     * @virtual 
     * @returns An #IdeSubprocessLauncher or %NULL upon failure.
     */
    vfunc_create_launcher(): SubprocessLauncher
    /**
     * Creates a new runner that can be used to execute the build target within
     * the runtime. This should be used to implement such features as "run target"
     * or "run unit test" inside the target runtime.
     * @virtual 
     * @param build_target 
     * @returns An #IdeRunner if successful, otherwise   %NULL and @error is set.
     */
    vfunc_create_runner(build_target: BuildTarget): Runner | null
    vfunc_prepare_configuration(configuration: Configuration): void
    /**
     * Translates the file from a path within the runtime to a path that can
     * be accessed from the host system.
     * @virtual 
     * @param file A #GFile
     * @returns A #GFile.
     */
    vfunc_translate_file(file: Gio.File): Gio.File

    // Class property signals of Ide-1.0.Ide.Runtime

    connect(sigName: "notify::display-name", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::display-name", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::display-name", ...args: any[]): void
    connect(sigName: "notify::id", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Runtime, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Runtime extends Object {

    // Own properties of Ide-1.0.Ide.Runtime

    static name: string
    static $gtype: GObject.GType<Runtime>

    // Constructors of Ide-1.0.Ide.Runtime

    constructor(config?: Runtime.ConstructorProperties) 
    constructor(context: Context, id: string | null, title: string | null) 
    static new(context: Context, id: string | null, title: string | null): Runtime
    _init(config?: Runtime.ConstructorProperties): void
}

module RuntimeManager {

    // Constructor properties interface

    interface ConstructorProperties extends Gio.Initable.ConstructorProperties, Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface RuntimeManager extends Gio.Initable, Gio.ListModel {

    // Owm methods of Ide-1.0.Ide.RuntimeManager

    add(runtime: Runtime): void
    /**
     * This function will asynchronously check if a runtime is installed.
     * 
     * If it is not installed, it will check to see if any runtime provider
     * can provide the runtime by installing it. If so, the runtime will be
     * installed.
     * 
     * Call ide_runtime_manager_ensure_finish() to get the resulting runtime
     * or a #GError in case of failure.
     * @param runtime_id the id for an expected runtime
     * @param cancellable A #GCancellable or %NULL
     * @param callback a callback to call after execution
     */
    ensure_async(runtime_id: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of ensure_async

    /**
     * Promisified version of {@link ensure_async}
     * 
     * This function will asynchronously check if a runtime is installed.
     * 
     * If it is not installed, it will check to see if any runtime provider
     * can provide the runtime by installing it. If so, the runtime will be
     * installed.
     * 
     * Call ide_runtime_manager_ensure_finish() to get the resulting runtime
     * or a #GError in case of failure.
     * @param runtime_id the id for an expected runtime
     * @param cancellable A #GCancellable or %NULL
     * @returns A Promise of: An #IdeRuntime or %NULL.
     */
    ensure_async(runtime_id: string | null, cancellable: Gio.Cancellable | null): globalThis.Promise<Runtime>
    ensure_finish(result: Gio.AsyncResult): Runtime
    /**
     * Gets the runtime by its internal identifier.
     * @param id the identifier of the runtime
     * @returns An #IdeRuntime.
     */
    get_runtime(id: string | null): Runtime
    remove(runtime: Runtime): void

    // Class property signals of Ide-1.0.Ide.RuntimeManager

    connect(sigName: "notify::context", callback: (($obj: RuntimeManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: RuntimeManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class RuntimeManager extends Object {

    // Own properties of Ide-1.0.Ide.RuntimeManager

    static name: string
    static $gtype: GObject.GType<RuntimeManager>

    // Constructors of Ide-1.0.Ide.RuntimeManager

    constructor(config?: RuntimeManager.ConstructorProperties) 
    _init(config?: RuntimeManager.ConstructorProperties): void
}

module SearchContext {

    // Signal callback interfaces

    /**
     * Signal callback interface for `completed`
     */
    interface CompletedSignalCallback {
        ($obj: SearchContext): void
    }

    /**
     * Signal callback interface for `count-set`
     */
    interface CountSetSignalCallback {
        ($obj: SearchContext, object: SearchProvider, p0: number): void
    }

    /**
     * Signal callback interface for `result-added`
     */
    interface ResultAddedSignalCallback {
        ($obj: SearchContext, object: SearchProvider, p0: SearchResult): void
    }

    /**
     * Signal callback interface for `result-removed`
     */
    interface ResultRemovedSignalCallback {
        ($obj: SearchContext, object: SearchProvider, p0: SearchResult): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface SearchContext {

    // Owm methods of Ide-1.0.Ide.SearchContext

    add_result(provider: SearchProvider, result: SearchResult): void
    cancel(): void
    execute(search_terms: string | null, max_results: number): void
    get_max_results(): number
    /**
     * Retrieve the list of providers for the search context.
     * @returns A #GList of   #IdeSearchProvider.
     */
    get_providers(): SearchProvider[]
    provider_completed(provider: SearchProvider): void
    remove_result(provider: SearchProvider, result: SearchResult): void
    set_provider_count(provider: SearchProvider, count: number): void

    // Own signals of Ide-1.0.Ide.SearchContext

    connect(sigName: "completed", callback: SearchContext.CompletedSignalCallback): number
    connect_after(sigName: "completed", callback: SearchContext.CompletedSignalCallback): number
    emit(sigName: "completed", ...args: any[]): void
    connect(sigName: "count-set", callback: SearchContext.CountSetSignalCallback): number
    connect_after(sigName: "count-set", callback: SearchContext.CountSetSignalCallback): number
    emit(sigName: "count-set", object: SearchProvider, p0: number, ...args: any[]): void
    connect(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback): number
    connect_after(sigName: "result-added", callback: SearchContext.ResultAddedSignalCallback): number
    emit(sigName: "result-added", object: SearchProvider, p0: SearchResult, ...args: any[]): void
    connect(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback): number
    connect_after(sigName: "result-removed", callback: SearchContext.ResultRemovedSignalCallback): number
    emit(sigName: "result-removed", object: SearchProvider, p0: SearchResult, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SearchContext

    connect(sigName: "notify::context", callback: (($obj: SearchContext, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SearchContext, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SearchContext extends Object {

    // Own properties of Ide-1.0.Ide.SearchContext

    static name: string
    static $gtype: GObject.GType<SearchContext>

    // Constructors of Ide-1.0.Ide.SearchContext

    constructor(config?: SearchContext.ConstructorProperties) 
    _init(config?: SearchContext.ConstructorProperties): void
}

module SearchEngine {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface SearchEngine {

    // Owm methods of Ide-1.0.Ide.SearchEngine

    /**
     * Begins a query against the requested search providers.
     * 
     * If `providers` is %NULL, all registered providers will be used.
     * @param search_terms The search terms.
     * @returns An #IdeSearchContext or %NULL if no   providers could be loaded.
     */
    search(search_terms: string | null): SearchContext | null

    // Class property signals of Ide-1.0.Ide.SearchEngine

    connect(sigName: "notify::context", callback: (($obj: SearchEngine, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SearchEngine, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SearchEngine extends Object {

    // Own properties of Ide-1.0.Ide.SearchEngine

    static name: string
    static $gtype: GObject.GType<SearchEngine>

    // Constructors of Ide-1.0.Ide.SearchEngine

    constructor(config?: SearchEngine.ConstructorProperties) 
    _init(config?: SearchEngine.ConstructorProperties): void
}

module SearchResult {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SearchResult

        provider?: SearchProvider | null
        score?: number | null
        subtitle?: string | null
        title?: string | null
    }

}

interface SearchResult {

    // Own properties of Ide-1.0.Ide.SearchResult

    provider: SearchProvider
    readonly score: number
    readonly subtitle: string | null
    readonly title: string | null

    // Own fields of Ide-1.0.Ide.SearchResult

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.SearchResult

    activate(): void
    compare(b: SearchResult): number
    /**
     * Gets the provider that created the search result.
     * @returns An #IdeSearchProvider.
     */
    get_provider(): SearchProvider
    get_score(): number
    get_subtitle(): string | null
    get_title(): string | null

    // Own virtual methods of Ide-1.0.Ide.SearchResult

    vfunc_activate(): void

    // Class property signals of Ide-1.0.Ide.SearchResult

    connect(sigName: "notify::provider", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::provider", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::provider", ...args: any[]): void
    connect(sigName: "notify::score", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::score", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::score", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtitle", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SearchResult, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SearchResult extends Object {

    // Own properties of Ide-1.0.Ide.SearchResult

    static name: string
    static $gtype: GObject.GType<SearchResult>

    // Constructors of Ide-1.0.Ide.SearchResult

    constructor(config?: SearchResult.ConstructorProperties) 
    constructor(provider: SearchProvider, title: string | null, subtitle: string | null, score: number) 
    static new(provider: SearchProvider, title: string | null, subtitle: string | null, score: number): SearchResult
    _init(config?: SearchResult.ConstructorProperties): void
}

module Settings {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: Settings, object: string | null): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Settings

        ignore_project_settings?: boolean | null
        relative_path?: string | null
        schema_id?: string | null
    }

}

interface Settings {

    // Own properties of Ide-1.0.Ide.Settings

    readonly ignore_project_settings: boolean
    readonly relative_path: string | null
    readonly schema_id: string | null

    // Owm methods of Ide-1.0.Ide.Settings

    bind(key: string | null, object: any | null, property: string | null, flags: Gio.SettingsBindFlags): void
    /**
     * Like ide_settings_bind() but allows transforming to and from settings storage using
     * `get_mapping` and `set_mapping` transformation functions.
     * 
     * Call ide_settings_unbind() to unbind the mapping.
     * @param key The settings key
     * @param object the object to bind to
     * @param property the property of `object` to bind to
     * @param flags flags for the binding
     * @param get_mapping variant to value mapping
     * @param set_mapping value to variant mapping
     */
    bind_with_mapping(key: string | null, object: any | null, property: string | null, flags: Gio.SettingsBindFlags, get_mapping: Gio.SettingsBindGetMapping | null, set_mapping: Gio.SettingsBindSetMapping | null): void
    get_boolean(key: string | null): boolean
    get_default_value(key: string | null): GLib.Variant
    get_double(key: string | null): number
    get_ignore_project_settings(): boolean
    get_int(key: string | null): number
    get_relative_path(): string | null
    get_schema_id(): string | null
    get_string(key: string | null): string | null
    get_uint(key: string | null): number
    get_user_value(key: string | null): GLib.Variant
    get_value(key: string | null): GLib.Variant
    set_boolean(key: string | null, val: boolean): void
    set_double(key: string | null, val: number): void
    set_int(key: string | null, val: number): void
    set_string(key: string | null, val: string | null): void
    set_uint(key: string | null, val: number): void
    set_value(key: string | null, value: GLib.Variant): void
    unbind(property: string | null): void

    // Own signals of Ide-1.0.Ide.Settings

    connect(sigName: "changed", callback: Settings.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: Settings.ChangedSignalCallback): number
    emit(sigName: "changed", object: string | null, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Settings

    connect(sigName: "notify::ignore-project-settings", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::ignore-project-settings", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::ignore-project-settings", ...args: any[]): void
    connect(sigName: "notify::relative-path", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::relative-path", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::relative-path", ...args: any[]): void
    connect(sigName: "notify::schema-id", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::schema-id", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::schema-id", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Settings, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * In Builder, we need support for settings at the user level (their chosen defaults) as well
 * as defaults for a project. #IdeSettings attempts to simplify this by providing a layered
 * approach to settings.
 * 
 * If a setting has been set for the current project, it will be returned. If not, the users
 * preference will be returned. Setting a preference via #IdeSettings will always modify the
 * projects setting, not the users default settings.
 * @class 
 */
class Settings extends Object {

    // Own properties of Ide-1.0.Ide.Settings

    static name: string
    static $gtype: GObject.GType<Settings>

    // Constructors of Ide-1.0.Ide.Settings

    constructor(config?: Settings.ConstructorProperties) 
    _init(config?: Settings.ConstructorProperties): void
}

module SourceMap {

    // Signal callback interfaces

    /**
     * Signal callback interface for `hide-map`
     */
    interface HideMapSignalCallback {
        ($obj: SourceMap): void
    }

    /**
     * Signal callback interface for `show-map`
     */
    interface ShowMapSignalCallback {
        ($obj: SourceMap): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Scrollable.ConstructorProperties, GtkSource.Map.ConstructorProperties {
    }

}

interface SourceMap extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable {

    // Conflicting properties

    parent: Gtk.TextView & Gtk.Container & Gtk.Container
    parent_instance: GtkSource.View & Gtk.Container & GObject.InitiallyUnowned

    // Conflicting methods

    /**
     * Retrieves the #GdkWindow corresponding to an area of the text view;
     * possible windows include the overall widget window, child windows
     * on the left, right, top, bottom, and the window that displays the
     * text buffer. Windows are %NULL and nonexistent if their width or
     * height is 0, and are nonexistent before the widget has been
     * realized.
     * @param win window to get
     * @returns a #GdkWindow, or %NULL
     */
    get_window(win: Gtk.TextWindowType): Gdk.Window | null

    // Overloads of get_window

    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    get_window(): Gdk.Window | null
    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    get_window(): Gdk.Window | null
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.SourceMap

    connect(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback): number
    connect_after(sigName: "hide-map", callback: SourceMap.HideMapSignalCallback): number
    emit(sigName: "hide-map", ...args: any[]): void
    connect(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback): number
    connect_after(sigName: "show-map", callback: SourceMap.ShowMapSignalCallback): number
    emit(sigName: "show-map", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceMap

    connect(sigName: "notify::font-desc", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-desc", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::view", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::view", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::view", ...args: any[]): void
    connect(sigName: "notify::auto-indent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-indent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::auto-indent", ...args: any[]): void
    connect(sigName: "notify::background-pattern", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-pattern", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::background-pattern", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completion", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::draw-spaces", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draw-spaces", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::draw-spaces", ...args: any[]): void
    connect(sigName: "notify::highlight-current-line", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-current-line", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlight-current-line", ...args: any[]): void
    connect(sigName: "notify::indent-on-tab", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-on-tab", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-on-tab", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-spaces-instead-of-tabs", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-spaces-instead-of-tabs", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::show-line-marks", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-marks", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-marks", ...args: any[]): void
    connect(sigName: "notify::show-line-numbers", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-numbers", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-numbers", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::smart-backspace", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-backspace", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::smart-backspace", ...args: any[]): void
    connect(sigName: "notify::smart-home-end", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-home-end", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::smart-home-end", ...args: any[]): void
    connect(sigName: "notify::space-drawer", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::space-drawer", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::space-drawer", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::accepts-tab", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accepts-tab", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::accepts-tab", ...args: any[]): void
    connect(sigName: "notify::bottom-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::bottom-margin", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::cursor-visible", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::cursor-visible", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-module", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::justification", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::left-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::left-margin", ...args: any[]): void
    connect(sigName: "notify::monospace", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::monospace", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::monospace", ...args: any[]): void
    connect(sigName: "notify::overwrite", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite", ...args: any[]): void
    connect(sigName: "notify::pixels-above-lines", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-above-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-below-lines", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-below-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-inside-wrap", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-inside-wrap", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::populate-all", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::right-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::top-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top-margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::top-margin", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::hadjustment", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hadjustment", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::hscroll-policy", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hscroll-policy", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hscroll-policy", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vadjustment", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::vscroll-policy", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vscroll-policy", callback: (($obj: SourceMap, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vscroll-policy", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceMap extends GtkSource.Map {

    // Own properties of Ide-1.0.Ide.SourceMap

    static name: string
    static $gtype: GObject.GType<SourceMap>

    // Constructors of Ide-1.0.Ide.SourceMap

    constructor(config?: SourceMap.ConstructorProperties) 
    _init(config?: SourceMap.ConstructorProperties): void

    // Conflicting static methods

    static new_with_buffer(...args: any[]): any
}

module SourceSnippet {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceSnippet

        description?: string | null
        language?: string | null
        snippet_text?: string | null
        trigger?: string | null
    }

}

interface SourceSnippet {

    // Own properties of Ide-1.0.Ide.SourceSnippet

    readonly buffer: Gtk.TextBuffer
    description: string | null
    language: string | null
    readonly mark_begin: Gtk.TextMark
    readonly mark_end: Gtk.TextMark
    snippet_text: string | null
    readonly tab_stop: number
    trigger: string | null

    // Owm methods of Ide-1.0.Ide.SourceSnippet

    add_chunk(chunk: SourceSnippetChunk): void
    copy(): SourceSnippet
    get_chunk_range(chunk: SourceSnippetChunk, begin: Gtk.TextIter, end: Gtk.TextIter): void
    get_context(): SourceSnippetContext
    get_description(): string | null
    get_language(): string | null
    get_mark_begin(): Gtk.TextMark
    get_mark_end(): Gtk.TextMark
    get_n_chunks(): number
    get_nth_chunk(n: number): SourceSnippetChunk
    get_snippet_text(): string | null
    get_tab_stop(): number
    get_trigger(): string | null
    set_description(description: string | null): void
    set_language(language: string | null): void
    set_snippet_text(snippet_text: string | null): void
    set_trigger(trigger: string | null): void

    // Class property signals of Ide-1.0.Ide.SourceSnippet

    connect(sigName: "notify::buffer", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::description", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::description", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::description", ...args: any[]): void
    connect(sigName: "notify::language", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::language", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::language", ...args: any[]): void
    connect(sigName: "notify::mark-begin", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-begin", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::mark-begin", ...args: any[]): void
    connect(sigName: "notify::mark-end", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mark-end", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::mark-end", ...args: any[]): void
    connect(sigName: "notify::snippet-text", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snippet-text", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::snippet-text", ...args: any[]): void
    connect(sigName: "notify::tab-stop", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-stop", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-stop", ...args: any[]): void
    connect(sigName: "notify::trigger", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::trigger", callback: (($obj: SourceSnippet, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::trigger", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceSnippet extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippet

    static name: string
    static $gtype: GObject.GType<SourceSnippet>

    // Constructors of Ide-1.0.Ide.SourceSnippet

    constructor(config?: SourceSnippet.ConstructorProperties) 
    constructor(trigger: string | null, language: string | null) 
    static new(trigger: string | null, language: string | null): SourceSnippet
    _init(config?: SourceSnippet.ConstructorProperties): void
}

module SourceSnippetChunk {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceSnippetChunk

        context?: SourceSnippetContext | null
        spec?: string | null
        tab_stop?: number | null
        text?: string | null
        text_set?: boolean | null
    }

}

interface SourceSnippetChunk {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunk

    context: SourceSnippetContext
    spec: string | null
    tab_stop: number
    text: string | null
    text_set: boolean

    // Owm methods of Ide-1.0.Ide.SourceSnippetChunk

    /**
     * Copies the source snippet.
     * @returns An #IdeSourceSnippetChunk.
     */
    copy(): SourceSnippetChunk
    /**
     * Gets the context for the snippet insertion.
     * @returns An #IdeSourceSnippetContext.
     */
    get_context(): SourceSnippetContext
    get_spec(): string | null
    get_tab_stop(): number
    get_text(): string | null
    get_text_set(): boolean
    set_context(context: SourceSnippetContext): void
    set_spec(spec: string | null): void
    set_tab_stop(tab_stop: number): void
    set_text(text: string | null): void
    set_text_set(text_set: boolean): void

    // Class property signals of Ide-1.0.Ide.SourceSnippetChunk

    connect(sigName: "notify::context", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::spec", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spec", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spec", ...args: any[]): void
    connect(sigName: "notify::tab-stop", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-stop", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-stop", ...args: any[]): void
    connect(sigName: "notify::text", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::text", ...args: any[]): void
    connect(sigName: "notify::text-set", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::text-set", callback: (($obj: SourceSnippetChunk, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::text-set", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceSnippetChunk extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunk

    static name: string
    static $gtype: GObject.GType<SourceSnippetChunk>

    // Constructors of Ide-1.0.Ide.SourceSnippetChunk

    constructor(config?: SourceSnippetChunk.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippetChunk
    _init(config?: SourceSnippetChunk.ConstructorProperties): void
}

module SourceSnippetContext {

    // Signal callback interfaces

    /**
     * Signal callback interface for `changed`
     */
    interface ChangedSignalCallback {
        ($obj: SourceSnippetContext): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippetContext {

    // Owm methods of Ide-1.0.Ide.SourceSnippetContext

    add_shared_variable(key: string | null, value: string | null): void
    add_variable(key: string | null, value: string | null): void
    clear_variables(): void
    dump(): void
    emit_changed(): void
    expand(input: string | null): string | null
    get_variable(key: string | null): string | null
    set_line_prefix(line_prefix: string | null): void
    set_tab_width(tab_size: number): void
    set_use_spaces(use_spaces: boolean): void

    // Own signals of Ide-1.0.Ide.SourceSnippetContext

    connect(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback): number
    connect_after(sigName: "changed", callback: SourceSnippetContext.ChangedSignalCallback): number
    emit(sigName: "changed", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceSnippetContext

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

/**
 * This class is currently used primary as a hashtable. However, the longer
 * term goal is to have it hold onto a GjsContext as well as other languages
 * so that #IdeSourceSnippetChunk<!-- -->'s can expand themselves by executing
 * script within the context.
 * 
 * The #IdeSourceSnippet will build the context and then expand each of the
 * chunks during the insertion/edit phase.
 * @class 
 */
class SourceSnippetContext extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetContext

    static name: string
    static $gtype: GObject.GType<SourceSnippetContext>

    // Constructors of Ide-1.0.Ide.SourceSnippetContext

    constructor(config?: SourceSnippetContext.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippetContext
    _init(config?: SourceSnippetContext.ConstructorProperties): void
}

module SourceSnippets {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippets {

    // Owm methods of Ide-1.0.Ide.SourceSnippets

    add(snippet: SourceSnippet): void
    clear(): void
    count(): number
    foreach(prefix: string | null, foreach_func: GLib.Func): void
    merge(other: SourceSnippets): void

    // Class property signals of Ide-1.0.Ide.SourceSnippets

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceSnippets extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippets

    static name: string
    static $gtype: GObject.GType<SourceSnippets>

    // Constructors of Ide-1.0.Ide.SourceSnippets

    constructor(config?: SourceSnippets.ConstructorProperties) 
    constructor() 
    static new(): SourceSnippets
    _init(config?: SourceSnippets.ConstructorProperties): void
}

module SourceSnippetsManager {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SourceSnippetsManager {

    // Owm methods of Ide-1.0.Ide.SourceSnippetsManager

    /**
     * Gets the snippets for a given source language.
     * @param language 
     * @returns An #IdeSourceSnippets or %NULL.
     */
    get_for_language(language: GtkSource.Language): SourceSnippets | null
    /**
     * Gets the snippets for a given source language.
     * @param language_id 
     * @returns An #IdeSourceSnippets or %NULL.
     */
    get_for_language_id(language_id: string | null): SourceSnippets | null
    load_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of load_async

    /**
     * Promisified version of {@link load_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link load_async}
     */
    load_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    load_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.SourceSnippetsManager

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceSnippetsManager extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SourceSnippetsManager

    static name: string
    static $gtype: GObject.GType<SourceSnippetsManager>

    // Constructors of Ide-1.0.Ide.SourceSnippetsManager

    constructor(config?: SourceSnippetsManager.ConstructorProperties) 
    _init(config?: SourceSnippetsManager.ConstructorProperties): void
}

module SourceView {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        ($obj: SourceView, object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `add-cursor`
     */
    interface AddCursorSignalCallback {
        ($obj: SourceView, object: CursorType): void
    }

    /**
     * Signal callback interface for `append-to-count`
     */
    interface AppendToCountSignalCallback {
        ($obj: SourceView, object: number): void
    }

    /**
     * Signal callback interface for `begin-macro`
     */
    interface BeginMacroSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `begin-rename`
     */
    interface BeginRenameSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `begin-user-action`
     */
    interface BeginUserActionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `capture-modifier`
     */
    interface CaptureModifierSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `clear-count`
     */
    interface ClearCountSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `clear-modifier`
     */
    interface ClearModifierSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `clear-selection`
     */
    interface ClearSelectionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `clear-snippets`
     */
    interface ClearSnippetsSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `cycle-completion`
     */
    interface CycleCompletionSignalCallback {
        ($obj: SourceView, object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `decrease-font-size`
     */
    interface DecreaseFontSizeSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `delete-selection`
     */
    interface DeleteSelectionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `duplicate-entire-line`
     */
    interface DuplicateEntireLineSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `end-macro`
     */
    interface EndMacroSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `end-user-action`
     */
    interface EndUserActionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `find-references`
     */
    interface FindReferencesSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `focus-location`
     */
    interface FocusLocationSignalCallback {
        ($obj: SourceView, object: SourceLocation): void
    }

    /**
     * Signal callback interface for `format-selection`
     */
    interface FormatSelectionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `goto-definition`
     */
    interface GotoDefinitionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `hide-completion`
     */
    interface HideCompletionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `increase-font-size`
     */
    interface IncreaseFontSizeSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `indent-selection`
     */
    interface IndentSelectionSignalCallback {
        ($obj: SourceView, object: number): void
    }

    /**
     * Signal callback interface for `insert-modifier`
     */
    interface InsertModifierSignalCallback {
        ($obj: SourceView, use_count: boolean): void
    }

    /**
     * Signal callback interface for `jump`
     */
    interface JumpSignalCallback {
        ($obj: SourceView, object: Gtk.TextIter): void
    }

    /**
     * Signal callback interface for `move-error`
     */
    interface MoveErrorSignalCallback {
        ($obj: SourceView, dir: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `move-search`
     */
    interface MoveSearchSignalCallback {
        ($obj: SourceView, object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number): void
    }

    /**
     * Signal callback interface for `movement`
     */
    interface MovementSignalCallback {
        ($obj: SourceView, object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard-extended`
     */
    interface PasteClipboardExtendedSignalCallback {
        ($obj: SourceView, object: boolean, p0: boolean, p1: boolean): void
    }

    /**
     * Signal callback interface for `pop-selection`
     */
    interface PopSelectionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `pop-snippet`
     */
    interface PopSnippetSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `push-selection`
     */
    interface PushSelectionSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `push-snippet`
     */
    interface PushSnippetSignalCallback {
        ($obj: SourceView, snippet: SourceSnippet, iter: Gtk.TextIter | null): void
    }

    /**
     * Signal callback interface for `rebuild-highlight`
     */
    interface RebuildHighlightSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `reindent`
     */
    interface ReindentSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `remove-cursors`
     */
    interface RemoveCursorsSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `replay-macro`
     */
    interface ReplayMacroSignalCallback {
        ($obj: SourceView, object: boolean): void
    }

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `reset-font-size`
     */
    interface ResetFontSizeSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `restore-insert-mark`
     */
    interface RestoreInsertMarkSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `save-command`
     */
    interface SaveCommandSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `save-insert-mark`
     */
    interface SaveInsertMarkSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `save-search-char`
     */
    interface SaveSearchCharSignalCallback {
        ($obj: SourceView): void
    }

    /**
     * Signal callback interface for `select-inner`
     */
    interface SelectInnerSignalCallback {
        ($obj: SourceView, object: string | null, p0: string | null, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `select-tag`
     */
    interface SelectTagSignalCallback {
        ($obj: SourceView, object: boolean): void
    }

    /**
     * Signal callback interface for `selection-theatric`
     */
    interface SelectionTheatricSignalCallback {
        ($obj: SourceView, object: SourceViewTheatric): void
    }

    /**
     * Signal callback interface for `set-mode`
     */
    interface SetModeSignalCallback {
        ($obj: SourceView, object: string | null, p0: SourceViewModeType): void
    }

    /**
     * Signal callback interface for `set-overwrite`
     */
    interface SetOverwriteSignalCallback {
        ($obj: SourceView, object: boolean): void
    }

    /**
     * Signal callback interface for `set-search-text`
     */
    interface SetSearchTextSignalCallback {
        ($obj: SourceView, object: string | null, p0: boolean): void
    }

    /**
     * Signal callback interface for `sort`
     */
    interface SortSignalCallback {
        ($obj: SourceView, ignore_case: boolean, reverse: boolean): void
    }

    /**
     * Signal callback interface for `swap-selection-bounds`
     */
    interface SwapSelectionBoundsSignalCallback {
        ($obj: SourceView): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Scrollable.ConstructorProperties, GtkSource.View.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SourceView

        back_forward_list?: BackForwardList | null
        count?: number | null
        enable_word_completion?: boolean | null
        font_desc?: Pango.FontDescription | null
        font_name?: string | null
        indent_style?: IndentStyle | null
        insert_matching_brace?: boolean | null
        overscroll?: number | null
        overwrite_braces?: boolean | null
        rubberband_search?: boolean | null
        scroll_offset?: number | null
        search_direction?: Gtk.DirectionType | null
        show_grid_lines?: boolean | null
        show_line_changes?: boolean | null
        /**
         * If the diagnostics gutter should be visible.
         * 
         * This also requires that IdeBuffer:highlight-diagnostics is set to %TRUE
         * to generate diagnostics.
         */
        show_line_diagnostics?: boolean | null
        show_search_bubbles?: boolean | null
        show_search_shadow?: boolean | null
        snippet_completion?: boolean | null
        spell_checking?: boolean | null
    }

}

interface SourceView extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Scrollable {

    // Own properties of Ide-1.0.Ide.SourceView

    back_forward_list: BackForwardList
    count: number
    enable_word_completion: boolean
    readonly file_settings: FileSettings
    font_desc: Pango.FontDescription
    font_name: string | null
    indent_style: IndentStyle
    readonly indenter: Indenter
    insert_matching_brace: boolean
    readonly mode_display_name: string | null
    overscroll: number
    overwrite_braces: boolean
    rubberband_search: boolean
    scroll_offset: number
    readonly search_context: GtkSource.SearchContext
    search_direction: Gtk.DirectionType
    show_grid_lines: boolean
    show_line_changes: boolean
    /**
     * If the diagnostics gutter should be visible.
     * 
     * This also requires that IdeBuffer:highlight-diagnostics is set to %TRUE
     * to generate diagnostics.
     */
    show_line_diagnostics: boolean
    show_search_bubbles: boolean
    show_search_shadow: boolean
    snippet_completion: boolean
    spell_checking: boolean

    // Conflicting properties

    parent: Gtk.TextView & Gtk.Container & Gtk.Container

    // Own fields of Ide-1.0.Ide.SourceView

    parent_instance: GtkSource.View & Gtk.Container & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.SourceView

    clear_search(): void
    clear_snippets(): void
    /**
     * Gets the #IdeSourceView:back-forward-list property. This is the list that is used to manage
     * navigation history between multiple #IdeSourceView.
     * @returns An #IdeBackForwardList or %NULL.
     */
    get_back_forward_list(): BackForwardList | null
    get_count(): number
    /**
     * Gets the current snippet if there is one, otherwise %NULL.
     * @returns An #IdeSourceSnippet or %NULL.
     */
    get_current_snippet(): SourceSnippet | null
    get_enable_word_completion(): boolean
    /**
     * Gets the #IdeSourceView:file-settings property. This contains various
     * settings for how the file should be rendered in the view, and preferences
     * such as spaces vs tabs.
     * @returns An #IdeFileSettings or %NULL.
     */
    get_file_settings(): FileSettings | null
    get_font_desc(): Pango.FontDescription
    get_highlight_current_line(): boolean
    get_insert_matching_brace(): boolean
    get_iter_at_visual_column(column: number, location: Gtk.TextIter): void
    get_mode_display_name(): string | null
    get_mode_name(): string | null
    get_overwrite(): boolean
    get_overwrite_braces(): boolean
    get_rubberband_search(): boolean
    /**
     * Gets the #IdeSourceView:scroll-offset property. This property contains the number of lines
     * that should be kept above or below the line containing the insertion cursor relative to the
     * top and bottom of the visible text window.
     */
    get_scroll_offset(): number
    /**
     * Returns the #GtkSourceSearchContext for the source view if there is one.
     * @returns A #GtkSourceSearchContext or %NULL.
     */
    get_search_context(): GtkSource.SearchContext | null
    /**
     * Gets the current search direction.
     * @returns A #GtkDirectionType
     */
    get_search_direction(): Gtk.DirectionType
    get_show_grid_lines(): boolean
    get_show_line_changes(): boolean
    get_show_line_diagnostics(): boolean
    /**
     * Gets the #IdeSourceView:show-search-bubbles property.
     * 
     * If this is set to %TRUE, a bubble will be drawn around search results to
     * make them stand out.
     * 
     * The default is %FALSE.
     */
    get_show_search_bubbles(): boolean
    /**
     * Gets the #IdeSourceView:show-search-shadow property.
     * 
     * If this property is %TRUE, then when searching, a shadow will be drawn over
     * the portion of the visible region that does not contain a match. This can
     * be used to help bring focus to the matches.
     * 
     * The default is %FALSE.
     */
    get_show_search_shadow(): boolean
    /**
     * Gets the #IdeSourceView:snippet-completion property.
     * 
     * If enabled, snippet expansion can be performed via the auto completion drop down.
     */
    get_snippet_completion(): boolean
    get_spell_checking(): boolean
    /**
     * Gets the visible region in buffer coordinates that is the visible area of the buffer. This
     * is similar to gtk_text_view_get_visible_area() except that it takes into account the
     * #IdeSourceView:scroll-offset property to ensure there is space above and below the
     * visible_rect.
     */
    get_visible_rect(): /* visible_rect */ Gdk.Rectangle
    get_visual_column(location: Gtk.TextIter): number
    get_visual_position(line: number, line_column: number): void
    jump(location: Gtk.TextIter): void
    move_mark_onscreen(mark: Gtk.TextMark): boolean
    place_cursor_onscreen(): boolean
    pop_snippet(): void
    /**
     * Pushes a new snippet onto the source view.
     * @param snippet An #IdeSourceSnippet.
     * @param location A location for the snippet or %NULL.
     */
    push_snippet(snippet: SourceSnippet, location: Gtk.TextIter | null): void
    rollback_search(): void
    scroll_mark_onscreen(mark: Gtk.TextMark, use_align: boolean, alignx: number, aligny: number): void

    // Overloads of scroll_mark_onscreen

    /**
     * Scrolls `text_view` the minimum distance such that `mark` is contained
     * within the visible area of the widget.
     * @param mark a mark in the buffer for `text_view`
     */
    scroll_mark_onscreen(mark: Gtk.TextMark): void
    scroll_to_iter(iter: Gtk.TextIter, within_margin: number, use_align: boolean, xalign: number, yalign: number, animate_scroll: boolean): void

    // Overloads of scroll_to_iter

    /**
     * Scrolls `text_view` so that `iter` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * 
     * Note that this function uses the currently-computed height of the
     * lines in the text buffer. Line heights are computed in an idle
     * handler; so this function may not have the desired effect if it’s
     * called before the height computations. To avoid oddness, consider
     * using gtk_text_view_scroll_to_mark() which saves a point to be
     * scrolled to after line validation.
     * @param iter a #GtkTextIter
     * @param within_margin margin as a [0.0,0.5) fraction of screen size
     * @param use_align whether to use alignment arguments (if %FALSE,    just get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     * @returns %TRUE if scrolling occurred
     */
    scroll_to_iter(iter: Gtk.TextIter, within_margin: number, use_align: boolean, xalign: number, yalign: number): boolean
    scroll_to_mark(mark: Gtk.TextMark, within_margin: number, use_align: boolean, xalign: number, yalign: number, animate_scroll: boolean): void

    // Overloads of scroll_to_mark

    /**
     * Scrolls `text_view` so that `mark` is on the screen in the position
     * indicated by `xalign` and `yalign`. An alignment of 0.0 indicates
     * left or top, 1.0 indicates right or bottom, 0.5 means center.
     * If `use_align` is %FALSE, the text scrolls the minimal distance to
     * get the mark onscreen, possibly not scrolling at all. The effective
     * screen for purposes of this function is reduced by a margin of size
     * `within_margin`.
     * @param mark a #GtkTextMark
     * @param within_margin margin as a [0.0,0.5) fraction of screen size
     * @param use_align whether to use alignment arguments (if %FALSE, just    get the mark onscreen)
     * @param xalign horizontal alignment of mark within visible area
     * @param yalign vertical alignment of mark within visible area
     */
    scroll_to_mark(mark: Gtk.TextMark, within_margin: number, use_align: boolean, xalign: number, yalign: number): void
    set_back_forward_list(back_forward_list: BackForwardList): void
    set_count(count: number): void
    set_enable_word_completion(enable_word_copletion: boolean): void
    set_font_desc(font_desc: Pango.FontDescription): void
    set_font_name(font_name: string | null): void
    set_highlight_current_line(highlight_current_line: boolean): void
    set_insert_matching_brace(insert_matching_brace: boolean): void
    set_misspelled_word(start: Gtk.TextIter, end: Gtk.TextIter): void
    set_overwrite_braces(overwrite_braces: boolean): void
    set_rubberband_search(rubberband_search: boolean): void
    /**
     * Sets the #IdeSourceView:scroll-offset property. See ide_source_view_get_scroll_offset() for
     * more information. Set to 0 to unset this property.
     * @param scroll_offset 
     */
    set_scroll_offset(scroll_offset: number): void
    /**
     * Sets the search direction.
     * 
     * This can be used to invert the normal search direction so that a forward
     * movement is towards the beginning of the document.
     * @param direction the direction
     */
    set_search_direction(direction: Gtk.DirectionType): void
    set_show_grid_lines(show_grid_lines: boolean): void
    set_show_line_changes(show_line_changes: boolean): void
    set_show_line_diagnostics(show_line_changes: boolean): void
    set_show_search_bubbles(show_search_bubbles: boolean): void
    set_show_search_shadow(show_search_bubbles: boolean): void
    /**
     * Sets the #IdeSourceView:snippet-completion property. By setting this property to %TRUE,
     * snippets will be loaded for the currently activated source code language. See #IdeSourceSnippet
     * for more information on what can be provided via a snippet.
     * 
     * See also: ide_source_view_get_snippet_completion()
     * @param snippet_completion 
     */
    set_snippet_completion(snippet_completion: boolean): void
    set_spell_checking(enable: boolean): void

    // Conflicting methods

    /**
     * Retrieves the #GdkWindow corresponding to an area of the text view;
     * possible windows include the overall widget window, child windows
     * on the left, right, top, bottom, and the window that displays the
     * text buffer. Windows are %NULL and nonexistent if their width or
     * height is 0, and are nonexistent before the widget has been
     * realized.
     * @param win window to get
     * @returns a #GdkWindow, or %NULL
     */
    get_window(win: Gtk.TextWindowType): Gdk.Window | null

    // Overloads of get_window

    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    get_window(): Gdk.Window | null
    /**
     * Returns the widget’s window if it is realized, %NULL otherwise
     * @returns @widget’s window.
     */
    get_window(): Gdk.Window | null
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own virtual methods of Ide-1.0.Ide.SourceView

    vfunc_add_cursor(type: number): void
    vfunc_append_to_count(digit: number): void
    vfunc_auto_indent(): void
    vfunc_begin_macro(): void
    vfunc_begin_rename(): void
    vfunc_capture_modifier(): void
    vfunc_clear_count(): void
    vfunc_clear_modifier(): void
    vfunc_clear_search(): void
    vfunc_clear_selection(): void
    vfunc_clear_snippets(): void
    vfunc_cycle_completion(direction: Gtk.DirectionType): void
    vfunc_decrease_font_size(): void
    vfunc_delete_selection(): void
    vfunc_end_macro(): void
    vfunc_focus_location(location: SourceLocation): void
    vfunc_goto_definition(): void
    vfunc_hide_completion(): void
    vfunc_increase_font_size(): void
    vfunc_indent_selection(level: number): void
    vfunc_insert_at_cursor_and_indent(str: string | null): void
    vfunc_insert_modifier(use_count: boolean): void
    vfunc_jump(location: Gtk.TextIter): void
    vfunc_move_error(dir: Gtk.DirectionType): void
    vfunc_move_search(dir: Gtk.DirectionType, extend_selection: boolean, select_match: boolean, exclusive: boolean, apply_count: boolean, at_word_boundaries: number): void
    vfunc_movement(movement: SourceViewMovement, extend_selection: boolean, exclusive: boolean, apply_count: boolean): void
    vfunc_paste_clipboard_extended(smart_lines: boolean, after_cursor: boolean, place_cursor_at_original: boolean): void
    vfunc_pop_selection(): void
    vfunc_push_selection(): void
    vfunc_rebuild_highlight(): void
    vfunc_remove_cursors(): void
    vfunc_replay_macro(use_count: boolean): void
    vfunc_request_documentation(): void
    vfunc_reset_font_size(): void
    vfunc_restore_insert_mark(): void
    vfunc_save_command(): void
    vfunc_save_insert_mark(): void
    vfunc_save_search_char(): void
    vfunc_select_inner(inner_left: string | null, inner_right: string | null, exclusive: boolean, string_mode: boolean): void
    vfunc_select_tag(exclusive: boolean): void
    vfunc_selection_theatric(theatric: SourceViewTheatric): void
    vfunc_set_mode(mode: string | null, type: SourceViewModeType): void
    vfunc_set_overwrite(overwrite: boolean): void
    vfunc_set_search_text(search_text: string | null, from_selection: boolean): void
    vfunc_sort(ignore_case: boolean, reverse: boolean): void
    vfunc_swap_selection_bounds(): void

    // Own signals of Ide-1.0.Ide.SourceView

    connect(sigName: "action", callback: SourceView.ActionSignalCallback): number
    connect_after(sigName: "action", callback: SourceView.ActionSignalCallback): number
    emit(sigName: "action", object: string | null, p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback): number
    connect_after(sigName: "add-cursor", callback: SourceView.AddCursorSignalCallback): number
    emit(sigName: "add-cursor", object: CursorType, ...args: any[]): void
    connect(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback): number
    connect_after(sigName: "append-to-count", callback: SourceView.AppendToCountSignalCallback): number
    emit(sigName: "append-to-count", object: number, ...args: any[]): void
    connect(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback): number
    connect_after(sigName: "begin-macro", callback: SourceView.BeginMacroSignalCallback): number
    emit(sigName: "begin-macro", ...args: any[]): void
    connect(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback): number
    connect_after(sigName: "begin-rename", callback: SourceView.BeginRenameSignalCallback): number
    emit(sigName: "begin-rename", ...args: any[]): void
    connect(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback): number
    connect_after(sigName: "begin-user-action", callback: SourceView.BeginUserActionSignalCallback): number
    emit(sigName: "begin-user-action", ...args: any[]): void
    connect(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback): number
    connect_after(sigName: "capture-modifier", callback: SourceView.CaptureModifierSignalCallback): number
    emit(sigName: "capture-modifier", ...args: any[]): void
    connect(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback): number
    connect_after(sigName: "clear-count", callback: SourceView.ClearCountSignalCallback): number
    emit(sigName: "clear-count", ...args: any[]): void
    connect(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback): number
    connect_after(sigName: "clear-modifier", callback: SourceView.ClearModifierSignalCallback): number
    emit(sigName: "clear-modifier", ...args: any[]): void
    connect(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback): number
    connect_after(sigName: "clear-search", callback: SourceView.ClearSearchSignalCallback): number
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback): number
    connect_after(sigName: "clear-selection", callback: SourceView.ClearSelectionSignalCallback): number
    emit(sigName: "clear-selection", ...args: any[]): void
    connect(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback): number
    connect_after(sigName: "clear-snippets", callback: SourceView.ClearSnippetsSignalCallback): number
    emit(sigName: "clear-snippets", ...args: any[]): void
    connect(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback): number
    connect_after(sigName: "cycle-completion", callback: SourceView.CycleCompletionSignalCallback): number
    emit(sigName: "cycle-completion", object: Gtk.DirectionType, ...args: any[]): void
    connect(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback): number
    connect_after(sigName: "decrease-font-size", callback: SourceView.DecreaseFontSizeSignalCallback): number
    emit(sigName: "decrease-font-size", ...args: any[]): void
    connect(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback): number
    connect_after(sigName: "delete-selection", callback: SourceView.DeleteSelectionSignalCallback): number
    emit(sigName: "delete-selection", ...args: any[]): void
    connect(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback): number
    connect_after(sigName: "duplicate-entire-line", callback: SourceView.DuplicateEntireLineSignalCallback): number
    emit(sigName: "duplicate-entire-line", ...args: any[]): void
    connect(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback): number
    connect_after(sigName: "end-macro", callback: SourceView.EndMacroSignalCallback): number
    emit(sigName: "end-macro", ...args: any[]): void
    connect(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback): number
    connect_after(sigName: "end-user-action", callback: SourceView.EndUserActionSignalCallback): number
    emit(sigName: "end-user-action", ...args: any[]): void
    connect(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback): number
    connect_after(sigName: "find-references", callback: SourceView.FindReferencesSignalCallback): number
    emit(sigName: "find-references", ...args: any[]): void
    connect(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback): number
    connect_after(sigName: "focus-location", callback: SourceView.FocusLocationSignalCallback): number
    emit(sigName: "focus-location", object: SourceLocation, ...args: any[]): void
    connect(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback): number
    connect_after(sigName: "format-selection", callback: SourceView.FormatSelectionSignalCallback): number
    emit(sigName: "format-selection", ...args: any[]): void
    connect(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback): number
    connect_after(sigName: "goto-definition", callback: SourceView.GotoDefinitionSignalCallback): number
    emit(sigName: "goto-definition", ...args: any[]): void
    connect(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback): number
    connect_after(sigName: "hide-completion", callback: SourceView.HideCompletionSignalCallback): number
    emit(sigName: "hide-completion", ...args: any[]): void
    connect(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback): number
    connect_after(sigName: "increase-font-size", callback: SourceView.IncreaseFontSizeSignalCallback): number
    emit(sigName: "increase-font-size", ...args: any[]): void
    connect(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback): number
    connect_after(sigName: "indent-selection", callback: SourceView.IndentSelectionSignalCallback): number
    emit(sigName: "indent-selection", object: number, ...args: any[]): void
    connect(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback): number
    connect_after(sigName: "insert-modifier", callback: SourceView.InsertModifierSignalCallback): number
    emit(sigName: "insert-modifier", use_count: boolean, ...args: any[]): void
    connect(sigName: "jump", callback: SourceView.JumpSignalCallback): number
    connect_after(sigName: "jump", callback: SourceView.JumpSignalCallback): number
    emit(sigName: "jump", object: Gtk.TextIter, ...args: any[]): void
    connect(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback): number
    connect_after(sigName: "move-error", callback: SourceView.MoveErrorSignalCallback): number
    emit(sigName: "move-error", dir: Gtk.DirectionType, ...args: any[]): void
    connect(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback): number
    connect_after(sigName: "move-search", callback: SourceView.MoveSearchSignalCallback): number
    emit(sigName: "move-search", object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number, ...args: any[]): void
    connect(sigName: "movement", callback: SourceView.MovementSignalCallback): number
    connect_after(sigName: "movement", callback: SourceView.MovementSignalCallback): number
    emit(sigName: "movement", object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback): number
    connect_after(sigName: "paste-clipboard-extended", callback: SourceView.PasteClipboardExtendedSignalCallback): number
    emit(sigName: "paste-clipboard-extended", object: boolean, p0: boolean, p1: boolean, ...args: any[]): void
    connect(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback): number
    connect_after(sigName: "pop-selection", callback: SourceView.PopSelectionSignalCallback): number
    emit(sigName: "pop-selection", ...args: any[]): void
    connect(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback): number
    connect_after(sigName: "pop-snippet", callback: SourceView.PopSnippetSignalCallback): number
    emit(sigName: "pop-snippet", ...args: any[]): void
    connect(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback): number
    connect_after(sigName: "push-selection", callback: SourceView.PushSelectionSignalCallback): number
    emit(sigName: "push-selection", ...args: any[]): void
    connect(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback): number
    connect_after(sigName: "push-snippet", callback: SourceView.PushSnippetSignalCallback): number
    emit(sigName: "push-snippet", snippet: SourceSnippet, iter: Gtk.TextIter | null, ...args: any[]): void
    connect(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback): number
    connect_after(sigName: "rebuild-highlight", callback: SourceView.RebuildHighlightSignalCallback): number
    emit(sigName: "rebuild-highlight", ...args: any[]): void
    connect(sigName: "reindent", callback: SourceView.ReindentSignalCallback): number
    connect_after(sigName: "reindent", callback: SourceView.ReindentSignalCallback): number
    emit(sigName: "reindent", ...args: any[]): void
    connect(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback): number
    connect_after(sigName: "remove-cursors", callback: SourceView.RemoveCursorsSignalCallback): number
    emit(sigName: "remove-cursors", ...args: any[]): void
    connect(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback): number
    connect_after(sigName: "replay-macro", callback: SourceView.ReplayMacroSignalCallback): number
    emit(sigName: "replay-macro", object: boolean, ...args: any[]): void
    connect(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback): number
    connect_after(sigName: "request-documentation", callback: SourceView.RequestDocumentationSignalCallback): number
    emit(sigName: "request-documentation", ...args: any[]): void
    connect(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback): number
    connect_after(sigName: "reset-font-size", callback: SourceView.ResetFontSizeSignalCallback): number
    emit(sigName: "reset-font-size", ...args: any[]): void
    connect(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback): number
    connect_after(sigName: "restore-insert-mark", callback: SourceView.RestoreInsertMarkSignalCallback): number
    emit(sigName: "restore-insert-mark", ...args: any[]): void
    connect(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback): number
    connect_after(sigName: "save-command", callback: SourceView.SaveCommandSignalCallback): number
    emit(sigName: "save-command", ...args: any[]): void
    connect(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback): number
    connect_after(sigName: "save-insert-mark", callback: SourceView.SaveInsertMarkSignalCallback): number
    emit(sigName: "save-insert-mark", ...args: any[]): void
    connect(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback): number
    connect_after(sigName: "save-search-char", callback: SourceView.SaveSearchCharSignalCallback): number
    emit(sigName: "save-search-char", ...args: any[]): void
    connect(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback): number
    connect_after(sigName: "select-inner", callback: SourceView.SelectInnerSignalCallback): number
    emit(sigName: "select-inner", object: string | null, p0: string | null, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback): number
    connect_after(sigName: "select-tag", callback: SourceView.SelectTagSignalCallback): number
    emit(sigName: "select-tag", object: boolean, ...args: any[]): void
    connect(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback): number
    connect_after(sigName: "selection-theatric", callback: SourceView.SelectionTheatricSignalCallback): number
    emit(sigName: "selection-theatric", object: SourceViewTheatric, ...args: any[]): void
    connect(sigName: "set-mode", callback: SourceView.SetModeSignalCallback): number
    connect_after(sigName: "set-mode", callback: SourceView.SetModeSignalCallback): number
    emit(sigName: "set-mode", object: string | null, p0: SourceViewModeType, ...args: any[]): void
    connect(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback): number
    connect_after(sigName: "set-overwrite", callback: SourceView.SetOverwriteSignalCallback): number
    emit(sigName: "set-overwrite", object: boolean, ...args: any[]): void
    connect(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback): number
    connect_after(sigName: "set-search-text", callback: SourceView.SetSearchTextSignalCallback): number
    emit(sigName: "set-search-text", object: string | null, p0: boolean, ...args: any[]): void
    connect(sigName: "sort", callback: SourceView.SortSignalCallback): number
    connect_after(sigName: "sort", callback: SourceView.SortSignalCallback): number
    emit(sigName: "sort", ignore_case: boolean, reverse: boolean, ...args: any[]): void
    connect(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback): number
    connect_after(sigName: "swap-selection-bounds", callback: SourceView.SwapSelectionBoundsSignalCallback): number
    emit(sigName: "swap-selection-bounds", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceView

    connect(sigName: "notify::back-forward-list", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::back-forward-list", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::back-forward-list", ...args: any[]): void
    connect(sigName: "notify::count", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::count", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::count", ...args: any[]): void
    connect(sigName: "notify::enable-word-completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::enable-word-completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::enable-word-completion", ...args: any[]): void
    connect(sigName: "notify::file-settings", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::file-settings", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::file-settings", ...args: any[]): void
    connect(sigName: "notify::font-desc", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-desc", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::font-desc", ...args: any[]): void
    connect(sigName: "notify::font-name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::font-name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::font-name", ...args: any[]): void
    connect(sigName: "notify::indent-style", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-style", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-style", ...args: any[]): void
    connect(sigName: "notify::indenter", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indenter", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indenter", ...args: any[]): void
    connect(sigName: "notify::insert-matching-brace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-matching-brace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-matching-brace", ...args: any[]): void
    connect(sigName: "notify::mode-display-name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mode-display-name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::mode-display-name", ...args: any[]): void
    connect(sigName: "notify::overscroll", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overscroll", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overscroll", ...args: any[]): void
    connect(sigName: "notify::overwrite-braces", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite-braces", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite-braces", ...args: any[]): void
    connect(sigName: "notify::rubberband-search", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::rubberband-search", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::rubberband-search", ...args: any[]): void
    connect(sigName: "notify::scroll-offset", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scroll-offset", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scroll-offset", ...args: any[]): void
    connect(sigName: "notify::search-context", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-context", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::search-context", ...args: any[]): void
    connect(sigName: "notify::search-direction", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::search-direction", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::search-direction", ...args: any[]): void
    connect(sigName: "notify::show-grid-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-grid-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-grid-lines", ...args: any[]): void
    connect(sigName: "notify::show-line-changes", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-changes", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-changes", ...args: any[]): void
    connect(sigName: "notify::show-line-diagnostics", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-diagnostics", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-diagnostics", ...args: any[]): void
    connect(sigName: "notify::show-search-bubbles", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-search-bubbles", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-search-bubbles", ...args: any[]): void
    connect(sigName: "notify::show-search-shadow", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-search-shadow", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-search-shadow", ...args: any[]): void
    connect(sigName: "notify::snippet-completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::snippet-completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::snippet-completion", ...args: any[]): void
    connect(sigName: "notify::spell-checking", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spell-checking", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spell-checking", ...args: any[]): void
    connect(sigName: "notify::auto-indent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::auto-indent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::auto-indent", ...args: any[]): void
    connect(sigName: "notify::background-pattern", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::background-pattern", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::background-pattern", ...args: any[]): void
    connect(sigName: "notify::completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completion", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completion", ...args: any[]): void
    connect(sigName: "notify::draw-spaces", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draw-spaces", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::draw-spaces", ...args: any[]): void
    connect(sigName: "notify::highlight-current-line", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::highlight-current-line", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::highlight-current-line", ...args: any[]): void
    connect(sigName: "notify::indent-on-tab", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-on-tab", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-on-tab", ...args: any[]): void
    connect(sigName: "notify::indent-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent-width", ...args: any[]): void
    connect(sigName: "notify::insert-spaces-instead-of-tabs", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::insert-spaces-instead-of-tabs", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::insert-spaces-instead-of-tabs", ...args: any[]): void
    connect(sigName: "notify::right-margin-position", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin-position", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin-position", ...args: any[]): void
    connect(sigName: "notify::show-line-marks", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-marks", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-marks", ...args: any[]): void
    connect(sigName: "notify::show-line-numbers", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-line-numbers", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-line-numbers", ...args: any[]): void
    connect(sigName: "notify::show-right-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-right-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-right-margin", ...args: any[]): void
    connect(sigName: "notify::smart-backspace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-backspace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::smart-backspace", ...args: any[]): void
    connect(sigName: "notify::smart-home-end", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::smart-home-end", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::smart-home-end", ...args: any[]): void
    connect(sigName: "notify::space-drawer", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::space-drawer", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::space-drawer", ...args: any[]): void
    connect(sigName: "notify::tab-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tab-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tab-width", ...args: any[]): void
    connect(sigName: "notify::accepts-tab", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accepts-tab", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::accepts-tab", ...args: any[]): void
    connect(sigName: "notify::bottom-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::bottom-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::bottom-margin", ...args: any[]): void
    connect(sigName: "notify::buffer", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::buffer", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::buffer", ...args: any[]): void
    connect(sigName: "notify::cursor-visible", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cursor-visible", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::cursor-visible", ...args: any[]): void
    connect(sigName: "notify::editable", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::editable", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::editable", ...args: any[]): void
    connect(sigName: "notify::im-module", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::im-module", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::im-module", ...args: any[]): void
    connect(sigName: "notify::indent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::indent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::indent", ...args: any[]): void
    connect(sigName: "notify::input-hints", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-hints", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-hints", ...args: any[]): void
    connect(sigName: "notify::input-purpose", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::input-purpose", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::input-purpose", ...args: any[]): void
    connect(sigName: "notify::justification", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::justification", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::justification", ...args: any[]): void
    connect(sigName: "notify::left-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::left-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::left-margin", ...args: any[]): void
    connect(sigName: "notify::monospace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::monospace", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::monospace", ...args: any[]): void
    connect(sigName: "notify::overwrite", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::overwrite", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::overwrite", ...args: any[]): void
    connect(sigName: "notify::pixels-above-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-above-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-above-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-below-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-below-lines", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-below-lines", ...args: any[]): void
    connect(sigName: "notify::pixels-inside-wrap", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::pixels-inside-wrap", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::pixels-inside-wrap", ...args: any[]): void
    connect(sigName: "notify::populate-all", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::populate-all", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::populate-all", ...args: any[]): void
    connect(sigName: "notify::right-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::right-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::right-margin", ...args: any[]): void
    connect(sigName: "notify::tabs", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tabs", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tabs", ...args: any[]): void
    connect(sigName: "notify::top-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::top-margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::top-margin", ...args: any[]): void
    connect(sigName: "notify::wrap-mode", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::wrap-mode", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::wrap-mode", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::hadjustment", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hadjustment", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hadjustment", ...args: any[]): void
    connect(sigName: "notify::hscroll-policy", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hscroll-policy", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hscroll-policy", ...args: any[]): void
    connect(sigName: "notify::vadjustment", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vadjustment", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vadjustment", ...args: any[]): void
    connect(sigName: "notify::vscroll-policy", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vscroll-policy", callback: (($obj: SourceView, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vscroll-policy", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceView extends GtkSource.View {

    // Own properties of Ide-1.0.Ide.SourceView

    static name: string
    static $gtype: GObject.GType<SourceView>

    // Constructors of Ide-1.0.Ide.SourceView

    constructor(config?: SourceView.ConstructorProperties) 
    _init(config?: SourceView.ConstructorProperties): void

    // Conflicting static methods

    static new_with_buffer(...args: any[]): any
}

module SourceViewMode {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        ($obj: SourceViewMode, object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `add-cursor`
     */
    interface AddCursorSignalCallback {
        ($obj: SourceViewMode, object: CursorType): void
    }

    /**
     * Signal callback interface for `append-to-count`
     */
    interface AppendToCountSignalCallback {
        ($obj: SourceViewMode, object: number): void
    }

    /**
     * Signal callback interface for `backspace`
     */
    interface BackspaceSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `begin-macro`
     */
    interface BeginMacroSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `begin-rename`
     */
    interface BeginRenameSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `begin-user-action`
     */
    interface BeginUserActionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `capture-modifier`
     */
    interface CaptureModifierSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `change-case`
     */
    interface ChangeCaseSignalCallback {
        ($obj: SourceViewMode, object: GtkSource.ChangeCaseType): void
    }

    /**
     * Signal callback interface for `change-number`
     */
    interface ChangeNumberSignalCallback {
        ($obj: SourceViewMode, object: number): void
    }

    /**
     * Signal callback interface for `clear-count`
     */
    interface ClearCountSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `clear-modifier`
     */
    interface ClearModifierSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `clear-search`
     */
    interface ClearSearchSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `clear-selection`
     */
    interface ClearSelectionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `clear-snippets`
     */
    interface ClearSnippetsSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `copy-clipboard`
     */
    interface CopyClipboardSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `cut-clipboard`
     */
    interface CutClipboardSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `cycle-completion`
     */
    interface CycleCompletionSignalCallback {
        ($obj: SourceViewMode, object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `decrease-font-size`
     */
    interface DecreaseFontSizeSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `delete-from-cursor`
     */
    interface DeleteFromCursorSignalCallback {
        ($obj: SourceViewMode, object: Gtk.DeleteType, p0: number): void
    }

    /**
     * Signal callback interface for `delete-selection`
     */
    interface DeleteSelectionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `duplicate-entire-line`
     */
    interface DuplicateEntireLineSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `end-macro`
     */
    interface EndMacroSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `end-user-action`
     */
    interface EndUserActionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `find-references`
     */
    interface FindReferencesSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `format-selection`
     */
    interface FormatSelectionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `goto-definition`
     */
    interface GotoDefinitionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `hide-completion`
     */
    interface HideCompletionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `increase-font-size`
     */
    interface IncreaseFontSizeSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `indent-selection`
     */
    interface IndentSelectionSignalCallback {
        ($obj: SourceViewMode, object: number): void
    }

    /**
     * Signal callback interface for `insert-at-cursor`
     */
    interface InsertAtCursorSignalCallback {
        ($obj: SourceViewMode, object: string | null): void
    }

    /**
     * Signal callback interface for `insert-modifier`
     */
    interface InsertModifierSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `join-lines`
     */
    interface JoinLinesSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `move-cursor`
     */
    interface MoveCursorSignalCallback {
        ($obj: SourceViewMode, object: Gtk.MovementStep, p0: number, p1: boolean): void
    }

    /**
     * Signal callback interface for `move-error`
     */
    interface MoveErrorSignalCallback {
        ($obj: SourceViewMode, object: Gtk.DirectionType): void
    }

    /**
     * Signal callback interface for `move-lines`
     */
    interface MoveLinesSignalCallback {
        ($obj: SourceViewMode, object: boolean, p0: number): void
    }

    /**
     * Signal callback interface for `move-search`
     */
    interface MoveSearchSignalCallback {
        ($obj: SourceViewMode, object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number): void
    }

    /**
     * Signal callback interface for `move-to-matching-bracket`
     */
    interface MoveToMatchingBracketSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `move-viewport`
     */
    interface MoveViewportSignalCallback {
        ($obj: SourceViewMode, object: Gtk.ScrollStep, p0: number): void
    }

    /**
     * Signal callback interface for `move-words`
     */
    interface MoveWordsSignalCallback {
        ($obj: SourceViewMode, object: number): void
    }

    /**
     * Signal callback interface for `movement`
     */
    interface MovementSignalCallback {
        ($obj: SourceViewMode, object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `paste-clipboard`
     */
    interface PasteClipboardSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `paste-clipboard-extended`
     */
    interface PasteClipboardExtendedSignalCallback {
        ($obj: SourceViewMode, object: boolean, p0: boolean, p1: boolean): void
    }

    /**
     * Signal callback interface for `pop-selection`
     */
    interface PopSelectionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `preedit-changed`
     */
    interface PreeditChangedSignalCallback {
        ($obj: SourceViewMode, object: string | null): void
    }

    /**
     * Signal callback interface for `push-selection`
     */
    interface PushSelectionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `rebuild-highlight`
     */
    interface RebuildHighlightSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `redo`
     */
    interface RedoSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `reindent`
     */
    interface ReindentSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `remove-cursors`
     */
    interface RemoveCursorsSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `replay-macro`
     */
    interface ReplayMacroSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `request-documentation`
     */
    interface RequestDocumentationSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `reset-font-size`
     */
    interface ResetFontSizeSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `restore-insert-mark`
     */
    interface RestoreInsertMarkSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `save-command`
     */
    interface SaveCommandSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `save-insert-mark`
     */
    interface SaveInsertMarkSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `save-search-char`
     */
    interface SaveSearchCharSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `select-all`
     */
    interface SelectAllSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `select-inner`
     */
    interface SelectInnerSignalCallback {
        ($obj: SourceViewMode, object: string | null, p0: string | null, p1: boolean, p2: boolean): void
    }

    /**
     * Signal callback interface for `select-tag`
     */
    interface SelectTagSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `selection-theatric`
     */
    interface SelectionTheatricSignalCallback {
        ($obj: SourceViewMode, object: SourceViewTheatric): void
    }

    /**
     * Signal callback interface for `set-anchor`
     */
    interface SetAnchorSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `set-mode`
     */
    interface SetModeSignalCallback {
        ($obj: SourceViewMode, object: string | null, p0: SourceViewModeType): void
    }

    /**
     * Signal callback interface for `set-overwrite`
     */
    interface SetOverwriteSignalCallback {
        ($obj: SourceViewMode, object: boolean): void
    }

    /**
     * Signal callback interface for `set-search-text`
     */
    interface SetSearchTextSignalCallback {
        ($obj: SourceViewMode, object: string | null, p0: boolean): void
    }

    /**
     * Signal callback interface for `show-completion`
     */
    interface ShowCompletionSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `sort`
     */
    interface SortSignalCallback {
        ($obj: SourceViewMode, object: boolean, p0: boolean): void
    }

    /**
     * Signal callback interface for `swap-selection-bounds`
     */
    interface SwapSelectionBoundsSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `toggle-cursor-visible`
     */
    interface ToggleCursorVisibleSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `toggle-overwrite`
     */
    interface ToggleOverwriteSignalCallback {
        ($obj: SourceViewMode): void
    }

    /**
     * Signal callback interface for `undo`
     */
    interface UndoSignalCallback {
        ($obj: SourceViewMode): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Widget.ConstructorProperties {
    }

}

interface SourceViewMode extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.SourceViewMode

    readonly name: any

    // Owm methods of Ide-1.0.Ide.SourceViewMode

    get_block_cursor(): boolean
    get_default_mode(): string | null
    get_display_name(): string | null
    get_keep_mark_on_char(): boolean
    get_mode_type(): SourceViewModeType
    get_name(): string | null
    get_repeat_insert_with_count(): boolean
    get_suppress_unbound(): boolean
    set_has_indenter(has_indenter: boolean): void

    // Own signals of Ide-1.0.Ide.SourceViewMode

    connect(sigName: "action", callback: SourceViewMode.ActionSignalCallback): number
    connect_after(sigName: "action", callback: SourceViewMode.ActionSignalCallback): number
    emit(sigName: "action", object: string | null, p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback): number
    connect_after(sigName: "add-cursor", callback: SourceViewMode.AddCursorSignalCallback): number
    emit(sigName: "add-cursor", object: CursorType, ...args: any[]): void
    connect(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback): number
    connect_after(sigName: "append-to-count", callback: SourceViewMode.AppendToCountSignalCallback): number
    emit(sigName: "append-to-count", object: number, ...args: any[]): void
    connect(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback): number
    connect_after(sigName: "backspace", callback: SourceViewMode.BackspaceSignalCallback): number
    emit(sigName: "backspace", ...args: any[]): void
    connect(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback): number
    connect_after(sigName: "begin-macro", callback: SourceViewMode.BeginMacroSignalCallback): number
    emit(sigName: "begin-macro", ...args: any[]): void
    connect(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback): number
    connect_after(sigName: "begin-rename", callback: SourceViewMode.BeginRenameSignalCallback): number
    emit(sigName: "begin-rename", ...args: any[]): void
    connect(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback): number
    connect_after(sigName: "begin-user-action", callback: SourceViewMode.BeginUserActionSignalCallback): number
    emit(sigName: "begin-user-action", ...args: any[]): void
    connect(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback): number
    connect_after(sigName: "capture-modifier", callback: SourceViewMode.CaptureModifierSignalCallback): number
    emit(sigName: "capture-modifier", ...args: any[]): void
    connect(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback): number
    connect_after(sigName: "change-case", callback: SourceViewMode.ChangeCaseSignalCallback): number
    emit(sigName: "change-case", object: GtkSource.ChangeCaseType, ...args: any[]): void
    connect(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback): number
    connect_after(sigName: "change-number", callback: SourceViewMode.ChangeNumberSignalCallback): number
    emit(sigName: "change-number", object: number, ...args: any[]): void
    connect(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback): number
    connect_after(sigName: "clear-count", callback: SourceViewMode.ClearCountSignalCallback): number
    emit(sigName: "clear-count", ...args: any[]): void
    connect(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback): number
    connect_after(sigName: "clear-modifier", callback: SourceViewMode.ClearModifierSignalCallback): number
    emit(sigName: "clear-modifier", ...args: any[]): void
    connect(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback): number
    connect_after(sigName: "clear-search", callback: SourceViewMode.ClearSearchSignalCallback): number
    emit(sigName: "clear-search", ...args: any[]): void
    connect(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback): number
    connect_after(sigName: "clear-selection", callback: SourceViewMode.ClearSelectionSignalCallback): number
    emit(sigName: "clear-selection", ...args: any[]): void
    connect(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback): number
    connect_after(sigName: "clear-snippets", callback: SourceViewMode.ClearSnippetsSignalCallback): number
    emit(sigName: "clear-snippets", ...args: any[]): void
    connect(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback): number
    connect_after(sigName: "copy-clipboard", callback: SourceViewMode.CopyClipboardSignalCallback): number
    emit(sigName: "copy-clipboard", ...args: any[]): void
    connect(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback): number
    connect_after(sigName: "cut-clipboard", callback: SourceViewMode.CutClipboardSignalCallback): number
    emit(sigName: "cut-clipboard", ...args: any[]): void
    connect(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback): number
    connect_after(sigName: "cycle-completion", callback: SourceViewMode.CycleCompletionSignalCallback): number
    emit(sigName: "cycle-completion", object: Gtk.DirectionType, ...args: any[]): void
    connect(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback): number
    connect_after(sigName: "decrease-font-size", callback: SourceViewMode.DecreaseFontSizeSignalCallback): number
    emit(sigName: "decrease-font-size", ...args: any[]): void
    connect(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback): number
    connect_after(sigName: "delete-from-cursor", callback: SourceViewMode.DeleteFromCursorSignalCallback): number
    emit(sigName: "delete-from-cursor", object: Gtk.DeleteType, p0: number, ...args: any[]): void
    connect(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback): number
    connect_after(sigName: "delete-selection", callback: SourceViewMode.DeleteSelectionSignalCallback): number
    emit(sigName: "delete-selection", ...args: any[]): void
    connect(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback): number
    connect_after(sigName: "duplicate-entire-line", callback: SourceViewMode.DuplicateEntireLineSignalCallback): number
    emit(sigName: "duplicate-entire-line", ...args: any[]): void
    connect(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback): number
    connect_after(sigName: "end-macro", callback: SourceViewMode.EndMacroSignalCallback): number
    emit(sigName: "end-macro", ...args: any[]): void
    connect(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback): number
    connect_after(sigName: "end-user-action", callback: SourceViewMode.EndUserActionSignalCallback): number
    emit(sigName: "end-user-action", ...args: any[]): void
    connect(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback): number
    connect_after(sigName: "find-references", callback: SourceViewMode.FindReferencesSignalCallback): number
    emit(sigName: "find-references", ...args: any[]): void
    connect(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback): number
    connect_after(sigName: "format-selection", callback: SourceViewMode.FormatSelectionSignalCallback): number
    emit(sigName: "format-selection", ...args: any[]): void
    connect(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback): number
    connect_after(sigName: "goto-definition", callback: SourceViewMode.GotoDefinitionSignalCallback): number
    emit(sigName: "goto-definition", ...args: any[]): void
    connect(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback): number
    connect_after(sigName: "hide-completion", callback: SourceViewMode.HideCompletionSignalCallback): number
    emit(sigName: "hide-completion", ...args: any[]): void
    connect(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback): number
    connect_after(sigName: "increase-font-size", callback: SourceViewMode.IncreaseFontSizeSignalCallback): number
    emit(sigName: "increase-font-size", ...args: any[]): void
    connect(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback): number
    connect_after(sigName: "indent-selection", callback: SourceViewMode.IndentSelectionSignalCallback): number
    emit(sigName: "indent-selection", object: number, ...args: any[]): void
    connect(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback): number
    connect_after(sigName: "insert-at-cursor", callback: SourceViewMode.InsertAtCursorSignalCallback): number
    emit(sigName: "insert-at-cursor", object: string | null, ...args: any[]): void
    connect(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback): number
    connect_after(sigName: "insert-modifier", callback: SourceViewMode.InsertModifierSignalCallback): number
    emit(sigName: "insert-modifier", object: boolean, ...args: any[]): void
    connect(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback): number
    connect_after(sigName: "join-lines", callback: SourceViewMode.JoinLinesSignalCallback): number
    emit(sigName: "join-lines", ...args: any[]): void
    connect(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback): number
    connect_after(sigName: "move-cursor", callback: SourceViewMode.MoveCursorSignalCallback): number
    emit(sigName: "move-cursor", object: Gtk.MovementStep, p0: number, p1: boolean, ...args: any[]): void
    connect(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback): number
    connect_after(sigName: "move-error", callback: SourceViewMode.MoveErrorSignalCallback): number
    emit(sigName: "move-error", object: Gtk.DirectionType, ...args: any[]): void
    connect(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback): number
    connect_after(sigName: "move-lines", callback: SourceViewMode.MoveLinesSignalCallback): number
    emit(sigName: "move-lines", object: boolean, p0: number, ...args: any[]): void
    connect(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback): number
    connect_after(sigName: "move-search", callback: SourceViewMode.MoveSearchSignalCallback): number
    emit(sigName: "move-search", object: Gtk.DirectionType, p0: boolean, p1: boolean, p2: boolean, p3: boolean, p4: number, ...args: any[]): void
    connect(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback): number
    connect_after(sigName: "move-to-matching-bracket", callback: SourceViewMode.MoveToMatchingBracketSignalCallback): number
    emit(sigName: "move-to-matching-bracket", object: boolean, ...args: any[]): void
    connect(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback): number
    connect_after(sigName: "move-viewport", callback: SourceViewMode.MoveViewportSignalCallback): number
    emit(sigName: "move-viewport", object: Gtk.ScrollStep, p0: number, ...args: any[]): void
    connect(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback): number
    connect_after(sigName: "move-words", callback: SourceViewMode.MoveWordsSignalCallback): number
    emit(sigName: "move-words", object: number, ...args: any[]): void
    connect(sigName: "movement", callback: SourceViewMode.MovementSignalCallback): number
    connect_after(sigName: "movement", callback: SourceViewMode.MovementSignalCallback): number
    emit(sigName: "movement", object: SourceViewMovement, p0: boolean, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback): number
    connect_after(sigName: "paste-clipboard", callback: SourceViewMode.PasteClipboardSignalCallback): number
    emit(sigName: "paste-clipboard", ...args: any[]): void
    connect(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback): number
    connect_after(sigName: "paste-clipboard-extended", callback: SourceViewMode.PasteClipboardExtendedSignalCallback): number
    emit(sigName: "paste-clipboard-extended", object: boolean, p0: boolean, p1: boolean, ...args: any[]): void
    connect(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback): number
    connect_after(sigName: "pop-selection", callback: SourceViewMode.PopSelectionSignalCallback): number
    emit(sigName: "pop-selection", ...args: any[]): void
    connect(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback): number
    connect_after(sigName: "preedit-changed", callback: SourceViewMode.PreeditChangedSignalCallback): number
    emit(sigName: "preedit-changed", object: string | null, ...args: any[]): void
    connect(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback): number
    connect_after(sigName: "push-selection", callback: SourceViewMode.PushSelectionSignalCallback): number
    emit(sigName: "push-selection", ...args: any[]): void
    connect(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback): number
    connect_after(sigName: "rebuild-highlight", callback: SourceViewMode.RebuildHighlightSignalCallback): number
    emit(sigName: "rebuild-highlight", ...args: any[]): void
    connect(sigName: "redo", callback: SourceViewMode.RedoSignalCallback): number
    connect_after(sigName: "redo", callback: SourceViewMode.RedoSignalCallback): number
    emit(sigName: "redo", ...args: any[]): void
    connect(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback): number
    connect_after(sigName: "reindent", callback: SourceViewMode.ReindentSignalCallback): number
    emit(sigName: "reindent", ...args: any[]): void
    connect(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback): number
    connect_after(sigName: "remove-cursors", callback: SourceViewMode.RemoveCursorsSignalCallback): number
    emit(sigName: "remove-cursors", ...args: any[]): void
    connect(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback): number
    connect_after(sigName: "replay-macro", callback: SourceViewMode.ReplayMacroSignalCallback): number
    emit(sigName: "replay-macro", object: boolean, ...args: any[]): void
    connect(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback): number
    connect_after(sigName: "request-documentation", callback: SourceViewMode.RequestDocumentationSignalCallback): number
    emit(sigName: "request-documentation", ...args: any[]): void
    connect(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback): number
    connect_after(sigName: "reset-font-size", callback: SourceViewMode.ResetFontSizeSignalCallback): number
    emit(sigName: "reset-font-size", ...args: any[]): void
    connect(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback): number
    connect_after(sigName: "restore-insert-mark", callback: SourceViewMode.RestoreInsertMarkSignalCallback): number
    emit(sigName: "restore-insert-mark", ...args: any[]): void
    connect(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback): number
    connect_after(sigName: "save-command", callback: SourceViewMode.SaveCommandSignalCallback): number
    emit(sigName: "save-command", ...args: any[]): void
    connect(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback): number
    connect_after(sigName: "save-insert-mark", callback: SourceViewMode.SaveInsertMarkSignalCallback): number
    emit(sigName: "save-insert-mark", ...args: any[]): void
    connect(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback): number
    connect_after(sigName: "save-search-char", callback: SourceViewMode.SaveSearchCharSignalCallback): number
    emit(sigName: "save-search-char", ...args: any[]): void
    connect(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback): number
    connect_after(sigName: "select-all", callback: SourceViewMode.SelectAllSignalCallback): number
    emit(sigName: "select-all", object: boolean, ...args: any[]): void
    connect(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback): number
    connect_after(sigName: "select-inner", callback: SourceViewMode.SelectInnerSignalCallback): number
    emit(sigName: "select-inner", object: string | null, p0: string | null, p1: boolean, p2: boolean, ...args: any[]): void
    connect(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback): number
    connect_after(sigName: "select-tag", callback: SourceViewMode.SelectTagSignalCallback): number
    emit(sigName: "select-tag", object: boolean, ...args: any[]): void
    connect(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback): number
    connect_after(sigName: "selection-theatric", callback: SourceViewMode.SelectionTheatricSignalCallback): number
    emit(sigName: "selection-theatric", object: SourceViewTheatric, ...args: any[]): void
    connect(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback): number
    connect_after(sigName: "set-anchor", callback: SourceViewMode.SetAnchorSignalCallback): number
    emit(sigName: "set-anchor", ...args: any[]): void
    connect(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback): number
    connect_after(sigName: "set-mode", callback: SourceViewMode.SetModeSignalCallback): number
    emit(sigName: "set-mode", object: string | null, p0: SourceViewModeType, ...args: any[]): void
    connect(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback): number
    connect_after(sigName: "set-overwrite", callback: SourceViewMode.SetOverwriteSignalCallback): number
    emit(sigName: "set-overwrite", object: boolean, ...args: any[]): void
    connect(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback): number
    connect_after(sigName: "set-search-text", callback: SourceViewMode.SetSearchTextSignalCallback): number
    emit(sigName: "set-search-text", object: string | null, p0: boolean, ...args: any[]): void
    connect(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback): number
    connect_after(sigName: "show-completion", callback: SourceViewMode.ShowCompletionSignalCallback): number
    emit(sigName: "show-completion", ...args: any[]): void
    connect(sigName: "sort", callback: SourceViewMode.SortSignalCallback): number
    connect_after(sigName: "sort", callback: SourceViewMode.SortSignalCallback): number
    emit(sigName: "sort", object: boolean, p0: boolean, ...args: any[]): void
    connect(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback): number
    connect_after(sigName: "swap-selection-bounds", callback: SourceViewMode.SwapSelectionBoundsSignalCallback): number
    emit(sigName: "swap-selection-bounds", ...args: any[]): void
    connect(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback): number
    connect_after(sigName: "toggle-cursor-visible", callback: SourceViewMode.ToggleCursorVisibleSignalCallback): number
    emit(sigName: "toggle-cursor-visible", ...args: any[]): void
    connect(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback): number
    connect_after(sigName: "toggle-overwrite", callback: SourceViewMode.ToggleOverwriteSignalCallback): number
    emit(sigName: "toggle-overwrite", ...args: any[]): void
    connect(sigName: "undo", callback: SourceViewMode.UndoSignalCallback): number
    connect_after(sigName: "undo", callback: SourceViewMode.UndoSignalCallback): number
    emit(sigName: "undo", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SourceViewMode

    connect(sigName: "notify::name", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: SourceViewMode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SourceViewMode extends Gtk.Widget {

    // Own properties of Ide-1.0.Ide.SourceViewMode

    static name: string
    static $gtype: GObject.GType<SourceViewMode>

    // Constructors of Ide-1.0.Ide.SourceViewMode

    constructor(config?: SourceViewMode.ConstructorProperties) 
    _init(config?: SourceViewMode.ConstructorProperties): void
}

module SubprocessLauncher {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SubprocessLauncher

        clean_env?: boolean | null
        cwd?: string | null
        environ?: string[] | null
        flags?: Gio.SubprocessFlags | null
        run_on_host?: boolean | null
    }

}

interface SubprocessLauncher {

    // Own properties of Ide-1.0.Ide.SubprocessLauncher

    clean_env: boolean
    cwd: string | null
    environ: string[]
    flags: Gio.SubprocessFlags
    run_on_host: boolean

    // Own fields of Ide-1.0.Ide.SubprocessLauncher

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.SubprocessLauncher

    get_argv(): string[]
    get_clear_env(): boolean
    get_cwd(): string | null
    get_environ(): string[]
    get_flags(): Gio.SubprocessFlags
    /**
     * Gets if the process should be executed on the host system. This might be
     * useful for situations where running in a contained environment is not
     * sufficient to perform the given task.
     * 
     * Currently, only flatpak is supported for breaking out of the containment
     * zone and requires the application was built with --allow=devel.
     * @returns %TRUE if the process should be executed outside the containment zone.
     */
    get_run_on_host(): boolean
    getenv(key: string | null): string | null
    insert_argv(index: number, arg: string | null): void
    overlay_environment(environment: Environment): void
    pop_argv(): string | null
    /**
     * This function is semantically identical to calling ide_subprocess_launcher_push_argv()
     * for each element of `args`.
     * 
     * If `args` is %NULL, this function does nothing.
     * @param args the arguments
     */
    push_args(args: string[] | null): void
    push_argv(argv: string | null): void
    replace_argv(index: number, arg: string | null): void
    set_clear_env(clear_env: boolean): void
    set_cwd(cwd: string | null): void
    set_environ(environ_: string | null): void
    set_flags(flags: Gio.SubprocessFlags): void
    /**
     * Sets the #IdeSubprocessLauncher:run-on-host property. See
     * ide_subprocess_launcher_get_run_on_host() for more information.
     * @param run_on_host 
     */
    set_run_on_host(run_on_host: boolean): void
    set_stdout_file_path(stdout_file_path: string | null): void
    setenv(key: string | null, value: string | null, replace: boolean): void
    /**
     * Synchronously spawn a process using the internal state.
     * @param cancellable 
     * @returns A #IdeSubprocess or %NULL upon error.
     */
    spawn(cancellable: Gio.Cancellable | null): Subprocess
    take_fd(source_fd: number, dest_fd: number): void
    take_stderr_fd(stderr_fd: number): void
    take_stdin_fd(stdin_fd: number): void
    take_stdout_fd(stdout_fd: number): void

    // Own virtual methods of Ide-1.0.Ide.SubprocessLauncher

    /**
     * Synchronously spawn a process using the internal state.
     * @virtual 
     * @param cancellable 
     * @returns A #IdeSubprocess or %NULL upon error.
     */
    vfunc_spawn(cancellable: Gio.Cancellable | null): Subprocess

    // Class property signals of Ide-1.0.Ide.SubprocessLauncher

    connect(sigName: "notify::clean-env", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::clean-env", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::clean-env", ...args: any[]): void
    connect(sigName: "notify::cwd", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::cwd", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::cwd", ...args: any[]): void
    connect(sigName: "notify::environ", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::environ", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::environ", ...args: any[]): void
    connect(sigName: "notify::flags", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::run-on-host", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::run-on-host", callback: (($obj: SubprocessLauncher, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::run-on-host", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SubprocessLauncher extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SubprocessLauncher

    static name: string
    static $gtype: GObject.GType<SubprocessLauncher>

    // Constructors of Ide-1.0.Ide.SubprocessLauncher

    constructor(config?: SubprocessLauncher.ConstructorProperties) 
    constructor(flags: Gio.SubprocessFlags) 
    static new(flags: Gio.SubprocessFlags): SubprocessLauncher
    _init(config?: SubprocessLauncher.ConstructorProperties): void
}

module SubprocessSupervisor {

    // Signal callback interfaces

    /**
     * Signal callback interface for `spawned`
     */
    interface SpawnedSignalCallback {
        ($obj: SubprocessSupervisor, object: Subprocess): void
    }

    /**
     * Signal callback interface for `supervise`
     */
    interface SuperviseSignalCallback {
        ($obj: SubprocessSupervisor, object: SubprocessLauncher): boolean
    }

    /**
     * Signal callback interface for `unsupervise`
     */
    interface UnsuperviseSignalCallback {
        ($obj: SubprocessSupervisor, object: SubprocessLauncher): boolean
    }


    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {
    }

}

interface SubprocessSupervisor {

    // Own fields of Ide-1.0.Ide.SubprocessSupervisor

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.SubprocessSupervisor

    get_launcher(): SubprocessLauncher | null
    /**
     * Gets the current #IdeSubprocess that is being supervised. This might be
     * %NULL if the ide_subprocess_supervisor_start() has not yet been
     * called or if there was a failure to spawn the process.
     * @returns An #IdeSubprocess or %NULL.
     */
    get_subprocess(): Subprocess | null
    set_launcher(launcher: SubprocessLauncher): void
    set_subprocess(subprocess: Subprocess): void
    start(): void
    stop(): void

    // Own virtual methods of Ide-1.0.Ide.SubprocessSupervisor

    vfunc_spawned(subprocess: Subprocess): void

    // Own signals of Ide-1.0.Ide.SubprocessSupervisor

    connect(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback): number
    connect_after(sigName: "spawned", callback: SubprocessSupervisor.SpawnedSignalCallback): number
    emit(sigName: "spawned", object: Subprocess, ...args: any[]): void
    connect(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback): number
    connect_after(sigName: "supervise", callback: SubprocessSupervisor.SuperviseSignalCallback): number
    emit(sigName: "supervise", object: SubprocessLauncher, ...args: any[]): void
    connect(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback): number
    connect_after(sigName: "unsupervise", callback: SubprocessSupervisor.UnsuperviseSignalCallback): number
    emit(sigName: "unsupervise", object: SubprocessLauncher, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.SubprocessSupervisor

    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SubprocessSupervisor extends GObject.Object {

    // Own properties of Ide-1.0.Ide.SubprocessSupervisor

    static name: string
    static $gtype: GObject.GType<SubprocessSupervisor>

    // Constructors of Ide-1.0.Ide.SubprocessSupervisor

    constructor(config?: SubprocessSupervisor.ConstructorProperties) 
    constructor() 
    static new(): SubprocessSupervisor
    _init(config?: SubprocessSupervisor.ConstructorProperties): void
}

module SymbolNode {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.SymbolNode

        flags?: SymbolFlags | null
        kind?: SymbolKind | null
        name?: string | null
        use_markup?: boolean | null
    }

}

interface SymbolNode {

    // Own properties of Ide-1.0.Ide.SymbolNode

    flags: SymbolFlags
    kind: SymbolKind
    name: string | null
    use_markup: boolean

    // Own fields of Ide-1.0.Ide.SymbolNode

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.SymbolNode

    get_flags(): SymbolFlags
    get_kind(): SymbolKind
    get_location_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of get_location_async

    /**
     * Promisified version of {@link get_location_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of: An #IdeSourceLocation or %NULL.
     */
    get_location_async(cancellable: Gio.Cancellable | null): globalThis.Promise<SourceLocation | null>
    /**
     * Completes the request to gets the location for the symbol node.
     * @param result 
     * @returns An #IdeSourceLocation or %NULL.
     */
    get_location_finish(result: Gio.AsyncResult): SourceLocation | null
    get_name(): string | null
    get_use_markup(): boolean

    // Own virtual methods of Ide-1.0.Ide.SymbolNode

    vfunc_get_location_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    /**
     * Completes the request to gets the location for the symbol node.
     * @virtual 
     * @param result 
     * @returns An #IdeSourceLocation or %NULL.
     */
    vfunc_get_location_finish(result: Gio.AsyncResult): SourceLocation | null

    // Class property signals of Ide-1.0.Ide.SymbolNode

    connect(sigName: "notify::flags", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::flags", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::flags", ...args: any[]): void
    connect(sigName: "notify::kind", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::kind", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::kind", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::use-markup", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-markup", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-markup", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: SymbolNode, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class SymbolNode extends Object {

    // Own properties of Ide-1.0.Ide.SymbolNode

    static name: string
    static $gtype: GObject.GType<SymbolNode>

    // Constructors of Ide-1.0.Ide.SymbolNode

    constructor(config?: SymbolNode.ConstructorProperties) 
    _init(config?: SymbolNode.ConstructorProperties): void
}

module TemplateBase {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TemplateBase

        /**
         * The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
         * that should be used to resolve template includes. If %NULL, templates
         * will not be allowed to include other templates.
         * directive.
         */
        locator?: Template.TemplateLocator | null
    }

}

interface TemplateBase {

    // Own properties of Ide-1.0.Ide.TemplateBase

    /**
     * The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
     * that should be used to resolve template includes. If %NULL, templates
     * will not be allowed to include other templates.
     * directive.
     */
    locator: Template.TemplateLocator

    // Own fields of Ide-1.0.Ide.TemplateBase

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.TemplateBase

    add_path(path: string | null, destination: Gio.File, scope: Template.Scope, mode: number): void
    add_resource(resource_path: string | null, destination: Gio.File, scope: Template.Scope, mode: number): void
    expand_all_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of expand_all_async

    /**
     * Promisified version of {@link expand_all_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link expand_all_async}
     */
    expand_all_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    expand_all_finish(result: Gio.AsyncResult): boolean
    /**
     * Fetches the #TmplTemplateLocator used for resolving templates.
     * @returns A #TmplTemplateLocator or %NULL.
     */
    get_locator(): Template.TemplateLocator | null
    reset(): void
    set_locator(locator: Template.TemplateLocator): void

    // Class property signals of Ide-1.0.Ide.TemplateBase

    connect(sigName: "notify::locator", callback: (($obj: TemplateBase, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::locator", callback: (($obj: TemplateBase, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::locator", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TemplateBase extends GObject.Object {

    // Own properties of Ide-1.0.Ide.TemplateBase

    static name: string
    static $gtype: GObject.GType<TemplateBase>

    // Constructors of Ide-1.0.Ide.TemplateBase

    constructor(config?: TemplateBase.ConstructorProperties) 
    _init(config?: TemplateBase.ConstructorProperties): void
}

module Transfer {

    // Constructor properties interface

    interface ConstructorProperties extends GObject.Object.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Transfer

        icon_name?: string | null
        progress?: number | null
        status?: string | null
        title?: string | null
    }

}

interface Transfer {

    // Own properties of Ide-1.0.Ide.Transfer

    readonly active: boolean
    readonly completed: boolean
    icon_name: string | null
    progress: number
    status: string | null
    title: string | null

    // Own fields of Ide-1.0.Ide.Transfer

    parent_instance: GObject.Object

    // Owm methods of Ide-1.0.Ide.Transfer

    cancel(): void
    execute_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of execute_async

    /**
     * Promisified version of {@link execute_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link execute_async}
     */
    execute_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    execute_finish(result: Gio.AsyncResult): boolean
    get_active(): boolean
    get_completed(): boolean
    get_icon_name(): string | null
    get_progress(): number
    get_status(): string | null
    get_title(): string | null
    set_icon_name(icon_name: string | null): void
    set_progress(progress: number): void
    set_status(status: string | null): void
    set_title(title: string | null): void

    // Own virtual methods of Ide-1.0.Ide.Transfer

    vfunc_execute_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void
    vfunc_execute_finish(result: Gio.AsyncResult): boolean

    // Class property signals of Ide-1.0.Ide.Transfer

    connect(sigName: "notify::active", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::completed", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::completed", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::completed", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::status", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::status", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::status", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: Transfer, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Transfer extends GObject.Object {

    // Own properties of Ide-1.0.Ide.Transfer

    static name: string
    static $gtype: GObject.GType<Transfer>

    // Constructors of Ide-1.0.Ide.Transfer

    constructor(config?: Transfer.ConstructorProperties) 
    _init(config?: Transfer.ConstructorProperties): void
    static error_quark(): GLib.Quark
}

module TransferButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Actionable.ConstructorProperties, Gtk.Activatable.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Dazzle.ProgressButton.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransferButton

        transfer?: Transfer | null
    }

}

interface TransferButton extends Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransferButton

    readonly transfer: Transfer

    // Own fields of Ide-1.0.Ide.TransferButton

    parent_instance: Dazzle.ProgressButton & Gtk.Button & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.TransferButton

    connect(sigName: "notify::transfer", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transfer", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::show-progress", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-progress", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-progress", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::always-show-image", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::image", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::image", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::image-position", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::relief", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::relief", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::relief", ...args: any[]): void
    connect(sigName: "notify::use-stock", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-stock", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-stock", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-underline", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::yalign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::action-name", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-name", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::action-name", ...args: any[]): void
    connect(sigName: "notify::action-target", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-target", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::action-target", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-action", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-action-appearance", callback: (($obj: TransferButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TransferButton extends Dazzle.ProgressButton {

    // Own properties of Ide-1.0.Ide.TransferButton

    static name: string
    static $gtype: GObject.GType<TransferButton>

    // Constructors of Ide-1.0.Ide.TransferButton

    constructor(config?: TransferButton.ConstructorProperties) 
    constructor(transfer: Transfer) 
    static new(transfer: Transfer): TransferButton

    // Overloads of new

    static new(): Dazzle.ProgressButton
    _init(config?: TransferButton.ConstructorProperties): void
}

module TransferManager {

    // Signal callback interfaces

    /**
     * Signal callback interface for `all-transfers-completed`
     */
    interface AllTransfersCompletedSignalCallback {
        ($obj: TransferManager): void
    }

    /**
     * Signal callback interface for `transfer-completed`
     */
    interface TransferCompletedSignalCallback {
        ($obj: TransferManager, transfer: Transfer): void
    }

    /**
     * Signal callback interface for `transfer-failed`
     */
    interface TransferFailedSignalCallback {
        ($obj: TransferManager, transfer: Transfer, reason: GLib.Error): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Gio.ListModel.ConstructorProperties, Object.ConstructorProperties {
    }

}

interface TransferManager extends Gio.ListModel {

    // Own properties of Ide-1.0.Ide.TransferManager

    /**
     * If there are transfers active, this will be set.
     */
    readonly has_active: boolean
    /**
     * A double between and including 0.0 and 1.0 describing the progress of
     * all tasks.
     */
    readonly progress: number

    // Owm methods of Ide-1.0.Ide.TransferManager

    cancel_all(): void
    /**
     * Removes all transfers from the manager that are completed.
     */
    clear(): void
    /**
     * This is a convenience function that will queue `transfer` into the transfer
     * manager and execute callback upon completion of the transfer. The success
     * or failure #GError will be propagated to the caller via
     * ide_transfer_manager_execute_finish().
     * @param transfer 
     * @param cancellable A #GCancellable
     * @param callback A callback or %NULL
     */
    execute_async(transfer: Transfer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of execute_async

    /**
     * Promisified version of {@link execute_async}
     * 
     * This is a convenience function that will queue `transfer` into the transfer
     * manager and execute callback upon completion of the transfer. The success
     * or failure #GError will be propagated to the caller via
     * ide_transfer_manager_execute_finish().
     * @param transfer 
     * @param cancellable A #GCancellable
     * @returns A Promise of the result of {@link execute_async}
     */
    execute_async(transfer: Transfer, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    execute_finish(result: Gio.AsyncResult): boolean
    /**
     * Gets if there are active transfers.
     * @returns %TRUE if there are active transfers.
     */
    get_has_active(): boolean
    get_progress(): number

    // Own signals of Ide-1.0.Ide.TransferManager

    connect(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback): number
    connect_after(sigName: "all-transfers-completed", callback: TransferManager.AllTransfersCompletedSignalCallback): number
    emit(sigName: "all-transfers-completed", ...args: any[]): void
    connect(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback): number
    connect_after(sigName: "transfer-completed", callback: TransferManager.TransferCompletedSignalCallback): number
    emit(sigName: "transfer-completed", transfer: Transfer, ...args: any[]): void
    connect(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback): number
    connect_after(sigName: "transfer-failed", callback: TransferManager.TransferFailedSignalCallback): number
    emit(sigName: "transfer-failed", transfer: Transfer, reason: GLib.Error, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.TransferManager

    connect(sigName: "notify::has-active", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-active", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-active", ...args: any[]): void
    connect(sigName: "notify::progress", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::context", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: TransferManager, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TransferManager extends Object {

    // Own properties of Ide-1.0.Ide.TransferManager

    static name: string
    static $gtype: GObject.GType<TransferManager>

    // Constructors of Ide-1.0.Ide.TransferManager

    constructor(config?: TransferManager.ConstructorProperties) 
    _init(config?: TransferManager.ConstructorProperties): void
}

module TransferRow {

    // Signal callback interfaces

    /**
     * Signal callback interface for `cancelled`
     */
    interface CancelledSignalCallback {
        ($obj: TransferRow): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ListBoxRow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransferRow

        transfer?: Transfer | null
    }

}

interface TransferRow extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransferRow

    transfer: Transfer

    // Conflicting properties

    parent_instance: Gtk.Bin & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.TransferRow

    get_transfer(): Transfer | null
    set_transfer(transfer: Transfer): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.TransferRow

    connect(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback): number
    connect_after(sigName: "cancelled", callback: TransferRow.CancelledSignalCallback): number
    emit(sigName: "cancelled", ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.TransferRow

    connect(sigName: "notify::transfer", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transfer", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transfer", ...args: any[]): void
    connect(sigName: "notify::activatable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::activatable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::activatable", ...args: any[]): void
    connect(sigName: "notify::selectable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::selectable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::selectable", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: TransferRow, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TransferRow extends Gtk.ListBoxRow {

    // Own properties of Ide-1.0.Ide.TransferRow

    static name: string
    static $gtype: GObject.GType<TransferRow>

    // Constructors of Ide-1.0.Ide.TransferRow

    constructor(config?: TransferRow.ConstructorProperties) 
    _init(config?: TransferRow.ConstructorProperties): void
}

module TransfersButton {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Actionable.ConstructorProperties, Gtk.Activatable.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.MenuButton.ConstructorProperties {
    }

}

interface TransfersButton extends Atk.ImplementorIface, Gtk.Actionable, Gtk.Activatable, Gtk.Buildable {

    // Conflicting properties

    parent: Gtk.ToggleButton & Gtk.Container & Gtk.Container

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Returns the direction the popup will be pointing at when popped up.
     * @returns a #GtkArrowType value
     */
    get_direction(): Gtk.ArrowType

    // Overloads of get_direction

    /**
     * Gets the reading direction for a particular widget. See
     * gtk_widget_set_direction().
     * @returns the reading direction for the widget.
     */
    get_direction(): Gtk.TextDirection
    /**
     * Gets the reading direction for a particular widget. See
     * gtk_widget_set_direction().
     * @returns the reading direction for the widget.
     */
    get_direction(): Gtk.TextDirection
    /**
     * Sets the direction in which the popup will be popped up, as
     * well as changing the arrow’s direction. The child will not
     * be changed to an arrow if it was customized.
     * 
     * If the does not fit in the available space in the given direction,
     * GTK+ will its best to keep it inside the screen and fully visible.
     * 
     * If you pass %GTK_ARROW_NONE for a `direction,` the popup will behave
     * as if you passed %GTK_ARROW_DOWN (although you won’t see any arrows).
     * @param direction a #GtkArrowType
     */
    set_direction(direction: Gtk.ArrowType): void

    // Overloads of set_direction

    /**
     * Sets the reading direction on a particular widget. This direction
     * controls the primary direction for widgets containing text,
     * and also the direction in which the children of a container are
     * packed. The ability to set the direction is present in order
     * so that correct localization into languages with right-to-left
     * reading directions can be done. Generally, applications will
     * let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by gtk_widget_set_default_direction() will be used.
     * @param dir the new direction
     */
    set_direction(dir: Gtk.TextDirection): void
    /**
     * Sets the reading direction on a particular widget. This direction
     * controls the primary direction for widgets containing text,
     * and also the direction in which the children of a container are
     * packed. The ability to set the direction is present in order
     * so that correct localization into languages with right-to-left
     * reading directions can be done. Generally, applications will
     * let the default reading direction present, except for containers
     * where the containers are arranged in an order that is explicitly
     * visual rather than logical (such as buttons for text justification).
     * 
     * If the direction is set to %GTK_TEXT_DIR_NONE, then the value
     * set by gtk_widget_set_default_direction() will be used.
     * @param dir the new direction
     */
    set_direction(dir: Gtk.TextDirection): void

    // Class property signals of Ide-1.0.Ide.TransfersButton

    connect(sigName: "notify::align-widget", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::align-widget", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::align-widget", ...args: any[]): void
    connect(sigName: "notify::direction", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::direction", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::direction", ...args: any[]): void
    connect(sigName: "notify::menu-model", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::menu-model", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::menu-model", ...args: any[]): void
    connect(sigName: "notify::popover", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::popover", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::popover", ...args: any[]): void
    connect(sigName: "notify::popup", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::popup", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::popup", ...args: any[]): void
    connect(sigName: "notify::use-popover", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-popover", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-popover", ...args: any[]): void
    connect(sigName: "notify::active", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::active", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::active", ...args: any[]): void
    connect(sigName: "notify::draw-indicator", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::draw-indicator", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::draw-indicator", ...args: any[]): void
    connect(sigName: "notify::inconsistent", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::inconsistent", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::inconsistent", ...args: any[]): void
    connect(sigName: "notify::always-show-image", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::always-show-image", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::always-show-image", ...args: any[]): void
    connect(sigName: "notify::image", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::image", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::image", ...args: any[]): void
    connect(sigName: "notify::image-position", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::image-position", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::image-position", ...args: any[]): void
    connect(sigName: "notify::label", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::label", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::label", ...args: any[]): void
    connect(sigName: "notify::relief", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::relief", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::relief", ...args: any[]): void
    connect(sigName: "notify::use-stock", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-stock", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-stock", ...args: any[]): void
    connect(sigName: "notify::use-underline", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-underline", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-underline", ...args: any[]): void
    connect(sigName: "notify::xalign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::xalign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::xalign", ...args: any[]): void
    connect(sigName: "notify::yalign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::yalign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::yalign", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::action-name", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-name", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::action-name", ...args: any[]): void
    connect(sigName: "notify::action-target", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::action-target", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::action-target", ...args: any[]): void
    connect(sigName: "notify::related-action", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::related-action", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::related-action", ...args: any[]): void
    connect(sigName: "notify::use-action-appearance", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::use-action-appearance", callback: (($obj: TransfersButton, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::use-action-appearance", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TransfersButton extends Gtk.MenuButton {

    // Own properties of Ide-1.0.Ide.TransfersButton

    static name: string
    static $gtype: GObject.GType<TransfersButton>

    // Constructors of Ide-1.0.Ide.TransfersButton

    constructor(config?: TransfersButton.ConstructorProperties) 
    constructor() 
    static new(): TransfersButton
    _init(config?: TransfersButton.ConstructorProperties): void
}

module TransfersProgressIcon {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.DrawingArea.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.TransfersProgressIcon

        progress?: number | null
    }

}

interface TransfersProgressIcon extends Atk.ImplementorIface, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.TransfersProgressIcon

    progress: number

    // Owm methods of Ide-1.0.Ide.TransfersProgressIcon

    get_progress(): number
    set_progress(progress: number): void

    // Class property signals of Ide-1.0.Ide.TransfersProgressIcon

    connect(sigName: "notify::progress", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::progress", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::progress", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: TransfersProgressIcon, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class TransfersProgressIcon extends Gtk.DrawingArea {

    // Own properties of Ide-1.0.Ide.TransfersProgressIcon

    static name: string
    static $gtype: GObject.GType<TransfersProgressIcon>

    // Constructors of Ide-1.0.Ide.TransfersProgressIcon

    constructor(config?: TransfersProgressIcon.ConstructorProperties) 
    constructor() 
    static new(): TransfersProgressIcon
    _init(config?: TransfersProgressIcon.ConstructorProperties): void
}

module UnsavedFiles {

    // Constructor properties interface

    interface ConstructorProperties extends Object.ConstructorProperties {
    }

}

interface UnsavedFiles {

    // Own fields of Ide-1.0.Ide.UnsavedFiles

    parent_instance: Object & GObject.Object

    // Owm methods of Ide-1.0.Ide.UnsavedFiles

    clear(): void
    contains(file: Gio.File): boolean
    get_sequence(): number
    /**
     * Retrieves the unsaved file content for a particular file. If no unsaved
     * file content is registered, %NULL is returned.
     * @param file 
     * @returns An #IdeUnsavedFile or %NULL.
     */
    get_unsaved_file(file: Gio.File): UnsavedFile | null
    remove(file: Gio.File): void
    restore_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of restore_async

    /**
     * Promisified version of {@link restore_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link restore_async}
     */
    restore_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    restore_finish(result: Gio.AsyncResult): boolean
    save_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_async

    /**
     * Promisified version of {@link save_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link save_async}
     */
    save_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    save_finish(result: Gio.AsyncResult): boolean
    /**
     * This retrieves all of the unsaved file buffers known to the context.
     * These are handy if you need to pass modified state to parsers such as
     * clang.
     * 
     * Call g_ptr_array_unref() on the resulting #GPtrArray when no longer in use.
     * 
     * If you would like to hold onto an unsaved file instance, call
     * ide_unsaved_file_ref() to increment its reference count.
     * @returns A #GPtrArray   containing #IdeUnsavedFile elements.
     */
    to_array(): UnsavedFile[]
    update(file: Gio.File, content: GLib.Bytes): void

    // Class property signals of Ide-1.0.Ide.UnsavedFiles

    connect(sigName: "notify::context", callback: (($obj: UnsavedFiles, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: UnsavedFiles, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class UnsavedFiles extends Object {

    // Own properties of Ide-1.0.Ide.UnsavedFiles

    static name: string
    static $gtype: GObject.GType<UnsavedFiles>

    // Constructors of Ide-1.0.Ide.UnsavedFiles

    constructor(config?: UnsavedFiles.ConstructorProperties) 
    _init(config?: UnsavedFiles.ConstructorProperties): void
}

module Workbench {

    // Signal callback interfaces

    /**
     * Signal callback interface for `action`
     */
    interface ActionSignalCallback {
        ($obj: Workbench, object: string | null, p0: string | null, p1: string | null): void
    }

    /**
     * Signal callback interface for `set-perspective`
     */
    interface SetPerspectiveSignalCallback {
        ($obj: Workbench, name: string | null): void
    }

    /**
     * Signal callback interface for `unload`
     */
    interface UnloadSignalCallback {
        ($obj: Workbench, object: Context): void
    }


    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gio.ActionGroup.ConstructorProperties, Gio.ActionMap.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.ApplicationWindow.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.Workbench

        /**
         * This property is used internally by Builder to avoid creating the
         * greeter when opening a new workspace that is only for loading a
         * project.
         * 
         * This should not be used by application plugins.
         */
        disable_greeter?: boolean | null
        /**
         * This property contains the #IdePerspective that is currently selected.
         * Connect to the "notify::visible-perspective" signal to be notified when
         * the perspective has been changed.
         */
        visible_perspective?: Perspective | null
        /**
         * This property is just like #IdeWorkbench:visible-perspective except that
         * it contains the name of the perspective as a string.
         */
        visible_perspective_name?: string | null
    }

}

interface Workbench extends Atk.ImplementorIface, Gio.ActionGroup, Gio.ActionMap, Gtk.Buildable {

    // Own properties of Ide-1.0.Ide.Workbench

    /**
     * The #IdeWorkbench:context property contains the #IdeContext for the loaded
     * project. Loading a project consists of creating an #IdeContext, so there
     * is a 1:1 mapping between "loaded project" and an #IdeContext.
     * 
     * The #IdeContext contains many of the important components of a project.
     * For example, it contains the #IdeVcs representing the active version
     * control system and an #IdeBuildSystem representing the current build
     * system.
     * 
     * The creation of #IdeWorkbenchAddin addins are deferred until this property
     * has been set.
     */
    readonly context: Context
    /**
     * This property is used internally by Builder to avoid creating the
     * greeter when opening a new workspace that is only for loading a
     * project.
     * 
     * This should not be used by application plugins.
     */
    readonly disable_greeter: boolean
    /**
     * This property contains the #IdePerspective that is currently selected.
     * Connect to the "notify::visible-perspective" signal to be notified when
     * the perspective has been changed.
     */
    visible_perspective: Perspective
    /**
     * This property is just like #IdeWorkbench:visible-perspective except that
     * it contains the name of the perspective as a string.
     */
    visible_perspective_name: string | null

    // Conflicting properties

    parent_instance: Gtk.Window & GObject.InitiallyUnowned & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.Workbench

    add_perspective(perspective: Perspective): void
    close(): void
    focus(widget: Gtk.Widget): void
    /**
     * Gets the context associated with the workbench, or %NULL.
     * @returns An #IdeContext or %NULL.
     */
    get_context(): Context | null
    get_fullscreen(): boolean
    /**
     * Helper that is equivalent to calling gtk_window_get_titlebar() and casting
     * to an #IdeWorkbenchHeaderBar. This is convenience for plugins.
     * @returns An #IdeWorkbenchHeaderBar.
     */
    get_headerbar(): WorkbenchHeaderBar
    /**
     * Gets the perspective by its registered name as defined in
     * ide_perspective_get_id().
     * @param name 
     * @returns An #IdePerspective or %NULL.
     */
    get_perspective_by_name(name: string | null): Perspective | null
    /**
     * Gets the current perspective.
     * @returns An #IdePerspective.
     */
    get_visible_perspective(): Perspective
    get_visible_perspective_name(): string | null
    /**
     * Starts the process of loading the buffers for the given `files,` possibly
     * creating an #IdeEditorView for each depending on `flags`.
     * @param files An array of #GFile objects to be opened.
     * @param n_files The number of files given.
     * @param hint The id of an #IdeWorkbenchAddin that should be preferred as a loader.
     * @param flags A #IdeWorkbenchOpenFlags (if WORKBENCH_OPEN_FLAGS_BG is set, the buffer is loaded but not made visible in the UI).
     * @param cancellable A #GCancellable.
     * @param callback A #GASyncReadyCallback.
     */
    open_files_async(files: Gio.File, n_files: number, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of open_files_async

    /**
     * Promisified version of {@link open_files_async}
     * 
     * Starts the process of loading the buffers for the given `files,` possibly
     * creating an #IdeEditorView for each depending on `flags`.
     * @param files An array of #GFile objects to be opened.
     * @param n_files The number of files given.
     * @param hint The id of an #IdeWorkbenchAddin that should be preferred as a loader.
     * @param flags A #IdeWorkbenchOpenFlags (if WORKBENCH_OPEN_FLAGS_BG is set, the buffer is loaded but not made visible in the UI).
     * @param cancellable A #GCancellable.
     * @returns A Promise of the result of {@link open_files_async}
     */
    open_files_async(files: Gio.File, n_files: number, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    open_files_finish(result: Gio.AsyncResult): boolean
    open_project_async(file_or_directory: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of open_project_async

    /**
     * Promisified version of {@link open_project_async}
     * 
     * 
     * @param file_or_directory 
     * @param cancellable 
     * @returns A Promise of the result of {@link open_project_async}
     */
    open_project_async(file_or_directory: Gio.File, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    open_project_finish(result: Gio.AsyncResult): boolean
    open_uri_async(uri: Uri, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of open_uri_async

    /**
     * Promisified version of {@link open_uri_async}
     * 
     * 
     * @param uri 
     * @param hint 
     * @param flags 
     * @param cancellable 
     * @returns A Promise of the result of {@link open_uri_async}
     */
    open_uri_async(uri: Uri, hint: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    open_uri_finish(result: Gio.AsyncResult): boolean
    pop_message(message_id: string | null): boolean
    push_message(message: WorkbenchMessage): void
    remove_perspective(perspective: Perspective): void
    save_all_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void

    // Overloads of save_all_async

    /**
     * Promisified version of {@link save_all_async}
     * 
     * 
     * @param cancellable 
     * @returns A Promise of the result of {@link save_all_async}
     */
    save_all_async(cancellable: Gio.Cancellable | null): globalThis.Promise<boolean>
    save_all_finish(result: Gio.AsyncResult): boolean
    set_fullscreen(fullscreen: boolean): void
    set_visible_perspective(perspective: Perspective): void
    set_visible_perspective_name(name: string | null): void
    /**
     * Executes `callback` for every #IdeLayoutView across all perspectives.
     * @param callback The callback to execute
     */
    views_foreach(callback: Gtk.Callback): void

    // Conflicting methods

    /**
     * Activates the targets associated with the mnemonic.
     * @param keyval the mnemonic
     * @param modifier the modifiers
     * @returns %TRUE if the activation is done.
     */
    mnemonic_activate(keyval: number, modifier: Gdk.ModifierType): boolean

    // Overloads of mnemonic_activate

    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * @param group_cycling %TRUE if there are other widgets with the same mnemonic
     * @returns %TRUE if the signal has been handled
     */
    mnemonic_activate(group_cycling: boolean): boolean
    /**
     * Emits the #GtkWidget::mnemonic-activate signal.
     * @param group_cycling %TRUE if there are other widgets with the same mnemonic
     * @returns %TRUE if the signal has been handled
     */
    mnemonic_activate(group_cycling: boolean): boolean
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Own signals of Ide-1.0.Ide.Workbench

    connect(sigName: "action", callback: Workbench.ActionSignalCallback): number
    connect_after(sigName: "action", callback: Workbench.ActionSignalCallback): number
    emit(sigName: "action", object: string | null, p0: string | null, p1: string | null, ...args: any[]): void
    connect(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback): number
    connect_after(sigName: "set-perspective", callback: Workbench.SetPerspectiveSignalCallback): number
    emit(sigName: "set-perspective", name: string | null, ...args: any[]): void
    connect(sigName: "unload", callback: Workbench.UnloadSignalCallback): number
    connect_after(sigName: "unload", callback: Workbench.UnloadSignalCallback): number
    emit(sigName: "unload", object: Context, ...args: any[]): void

    // Class property signals of Ide-1.0.Ide.Workbench

    connect(sigName: "notify::context", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::context", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::context", ...args: any[]): void
    connect(sigName: "notify::disable-greeter", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::disable-greeter", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::disable-greeter", ...args: any[]): void
    connect(sigName: "notify::visible-perspective", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible-perspective", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible-perspective", ...args: any[]): void
    connect(sigName: "notify::visible-perspective-name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible-perspective-name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible-perspective-name", ...args: any[]): void
    connect(sigName: "notify::show-menubar", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-menubar", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-menubar", ...args: any[]): void
    connect(sigName: "notify::accept-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::accept-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::accept-focus", ...args: any[]): void
    connect(sigName: "notify::application", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::application", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::application", ...args: any[]): void
    connect(sigName: "notify::attached-to", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::attached-to", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::attached-to", ...args: any[]): void
    connect(sigName: "notify::decorated", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decorated", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::decorated", ...args: any[]): void
    connect(sigName: "notify::default-height", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-height", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::default-height", ...args: any[]): void
    connect(sigName: "notify::default-width", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::default-width", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::default-width", ...args: any[]): void
    connect(sigName: "notify::deletable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::deletable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::deletable", ...args: any[]): void
    connect(sigName: "notify::destroy-with-parent", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::destroy-with-parent", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::destroy-with-parent", ...args: any[]): void
    connect(sigName: "notify::focus-on-map", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-map", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-map", ...args: any[]): void
    connect(sigName: "notify::focus-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-visible", ...args: any[]): void
    connect(sigName: "notify::gravity", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::gravity", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::gravity", ...args: any[]): void
    connect(sigName: "notify::has-resize-grip", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-resize-grip", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-resize-grip", ...args: any[]): void
    connect(sigName: "notify::has-toplevel-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-toplevel-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-toplevel-focus", ...args: any[]): void
    connect(sigName: "notify::hide-titlebar-when-maximized", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hide-titlebar-when-maximized", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hide-titlebar-when-maximized", ...args: any[]): void
    connect(sigName: "notify::icon", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon", ...args: any[]): void
    connect(sigName: "notify::icon-name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::icon-name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::icon-name", ...args: any[]): void
    connect(sigName: "notify::is-active", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-active", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-active", ...args: any[]): void
    connect(sigName: "notify::is-maximized", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-maximized", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-maximized", ...args: any[]): void
    connect(sigName: "notify::mnemonics-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::mnemonics-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::mnemonics-visible", ...args: any[]): void
    connect(sigName: "notify::modal", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::modal", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::modal", ...args: any[]): void
    connect(sigName: "notify::resizable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resizable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resizable", ...args: any[]): void
    connect(sigName: "notify::resize-grip-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-grip-visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-grip-visible", ...args: any[]): void
    connect(sigName: "notify::role", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::role", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::role", ...args: any[]): void
    connect(sigName: "notify::screen", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::screen", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::screen", ...args: any[]): void
    connect(sigName: "notify::skip-pager-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::skip-pager-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::skip-pager-hint", ...args: any[]): void
    connect(sigName: "notify::skip-taskbar-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::skip-taskbar-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::skip-taskbar-hint", ...args: any[]): void
    connect(sigName: "notify::startup-id", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::startup-id", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::startup-id", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::transient-for", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::transient-for", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::transient-for", ...args: any[]): void
    connect(sigName: "notify::type", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::type", ...args: any[]): void
    connect(sigName: "notify::type-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::type-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::type-hint", ...args: any[]): void
    connect(sigName: "notify::urgency-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::urgency-hint", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::urgency-hint", ...args: any[]): void
    connect(sigName: "notify::window-position", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window-position", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window-position", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: Workbench, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class Workbench extends Gtk.ApplicationWindow {

    // Own properties of Ide-1.0.Ide.Workbench

    static name: string
    static $gtype: GObject.GType<Workbench>

    // Constructors of Ide-1.0.Ide.Workbench

    constructor(config?: Workbench.ConstructorProperties) 
    _init(config?: Workbench.ConstructorProperties): void

    // Conflicting static methods

    static new(...args: any[]): any
}

module WorkbenchHeaderBar {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.HeaderBar.ConstructorProperties {
    }

}

interface WorkbenchHeaderBar extends Atk.ImplementorIface, Gtk.Buildable {

    // Own fields of Ide-1.0.Ide.WorkbenchHeaderBar

    parent_instance: Gtk.HeaderBar & GObject.InitiallyUnowned

    // Owm methods of Ide-1.0.Ide.WorkbenchHeaderBar

    focus_search(): void
    get_omni_bar(): OmniBar
    insert_left(widget: Gtk.Widget, pack_type: Gtk.PackType, priority: number): void
    insert_right(widget: Gtk.Widget, pack_type: Gtk.PackType, priority: number): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.WorkbenchHeaderBar

    connect(sigName: "notify::custom-title", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::custom-title", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::custom-title", ...args: any[]): void
    connect(sigName: "notify::decoration-layout", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decoration-layout", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::decoration-layout", ...args: any[]): void
    connect(sigName: "notify::decoration-layout-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::decoration-layout-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::decoration-layout-set", ...args: any[]): void
    connect(sigName: "notify::has-subtitle", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-subtitle", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-subtitle", ...args: any[]): void
    connect(sigName: "notify::show-close-button", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-close-button", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-close-button", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtitle", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: WorkbenchHeaderBar, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class WorkbenchHeaderBar extends Gtk.HeaderBar {

    // Own properties of Ide-1.0.Ide.WorkbenchHeaderBar

    static name: string
    static $gtype: GObject.GType<WorkbenchHeaderBar>

    // Constructors of Ide-1.0.Ide.WorkbenchHeaderBar

    constructor(config?: WorkbenchHeaderBar.ConstructorProperties) 
    constructor() 
    static new(): WorkbenchHeaderBar
    _init(config?: WorkbenchHeaderBar.ConstructorProperties): void
}

module WorkbenchMessage {

    // Constructor properties interface

    interface ConstructorProperties extends Atk.ImplementorIface.ConstructorProperties, Gtk.Buildable.ConstructorProperties, Gtk.Orientable.ConstructorProperties, Gtk.InfoBar.ConstructorProperties {

        // Own constructor properties of Ide-1.0.Ide.WorkbenchMessage

        id?: string | null
        subtitle?: string | null
        title?: string | null
    }

}

interface WorkbenchMessage extends Atk.ImplementorIface, Gtk.Buildable, Gtk.Orientable {

    // Own properties of Ide-1.0.Ide.WorkbenchMessage

    id: string | null
    subtitle: string | null
    title: string | null

    // Conflicting properties

    parent: Gtk.Box & Gtk.Container & Gtk.Container

    // Owm methods of Ide-1.0.Ide.WorkbenchMessage

    add_action(label: string | null, action_name: string | null): void
    get_id(): string | null
    get_subtitle(): string | null
    get_title(): string | null
    set_id(id: string | null): void
    set_subtitle(subtitle: string | null): void
    set_title(title: string | null): void

    // Conflicting methods

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties]
     * `child_property` on the child.
     * 
     * This is an analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_widget_child_notify().
     * @param child the child widget
     * @param child_property the name of a child property installed on     the class of `container`
     */
    child_notify(child: Gtk.Widget, child_property: string | null): void

    // Overloads of child_notify

    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void
    /**
     * Emits a #GtkWidget::child-notify signal for the
     * [child property][child-properties] `child_property`
     * on `widget`.
     * 
     * This is the analogue of g_object_notify() for child properties.
     * 
     * Also see gtk_container_child_notify().
     * @param child_property the name of a child property installed on the                  class of `widget’`s parent
     */
    child_notify(child_property: string | null): void

    // Class property signals of Ide-1.0.Ide.WorkbenchMessage

    connect(sigName: "notify::id", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::id", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::id", ...args: any[]): void
    connect(sigName: "notify::subtitle", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::subtitle", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::subtitle", ...args: any[]): void
    connect(sigName: "notify::title", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::title", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::title", ...args: any[]): void
    connect(sigName: "notify::message-type", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::message-type", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::message-type", ...args: any[]): void
    connect(sigName: "notify::revealed", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::revealed", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::revealed", ...args: any[]): void
    connect(sigName: "notify::show-close-button", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::show-close-button", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::show-close-button", ...args: any[]): void
    connect(sigName: "notify::baseline-position", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::baseline-position", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::baseline-position", ...args: any[]): void
    connect(sigName: "notify::homogeneous", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::homogeneous", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::homogeneous", ...args: any[]): void
    connect(sigName: "notify::spacing", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::spacing", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::spacing", ...args: any[]): void
    connect(sigName: "notify::border-width", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::border-width", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::border-width", ...args: any[]): void
    connect(sigName: "notify::child", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::child", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::child", ...args: any[]): void
    connect(sigName: "notify::resize-mode", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::resize-mode", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::resize-mode", ...args: any[]): void
    connect(sigName: "notify::app-paintable", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::app-paintable", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::app-paintable", ...args: any[]): void
    connect(sigName: "notify::can-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-default", ...args: any[]): void
    connect(sigName: "notify::can-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::can-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::can-focus", ...args: any[]): void
    connect(sigName: "notify::composite-child", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::composite-child", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::composite-child", ...args: any[]): void
    connect(sigName: "notify::double-buffered", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::double-buffered", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::double-buffered", ...args: any[]): void
    connect(sigName: "notify::events", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::events", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::events", ...args: any[]): void
    connect(sigName: "notify::expand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::expand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::expand", ...args: any[]): void
    connect(sigName: "notify::focus-on-click", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::focus-on-click", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::focus-on-click", ...args: any[]): void
    connect(sigName: "notify::halign", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::halign", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::halign", ...args: any[]): void
    connect(sigName: "notify::has-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-default", ...args: any[]): void
    connect(sigName: "notify::has-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-focus", ...args: any[]): void
    connect(sigName: "notify::has-tooltip", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::has-tooltip", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::has-tooltip", ...args: any[]): void
    connect(sigName: "notify::height-request", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::height-request", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::height-request", ...args: any[]): void
    connect(sigName: "notify::hexpand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand", ...args: any[]): void
    connect(sigName: "notify::hexpand-set", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::hexpand-set", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::hexpand-set", ...args: any[]): void
    connect(sigName: "notify::is-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::is-focus", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::is-focus", ...args: any[]): void
    connect(sigName: "notify::margin", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin", ...args: any[]): void
    connect(sigName: "notify::margin-bottom", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-bottom", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-bottom", ...args: any[]): void
    connect(sigName: "notify::margin-end", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-end", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-end", ...args: any[]): void
    connect(sigName: "notify::margin-left", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-left", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-left", ...args: any[]): void
    connect(sigName: "notify::margin-right", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-right", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-right", ...args: any[]): void
    connect(sigName: "notify::margin-start", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-start", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-start", ...args: any[]): void
    connect(sigName: "notify::margin-top", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::margin-top", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::margin-top", ...args: any[]): void
    connect(sigName: "notify::name", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::name", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::name", ...args: any[]): void
    connect(sigName: "notify::no-show-all", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::no-show-all", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::no-show-all", ...args: any[]): void
    connect(sigName: "notify::opacity", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::opacity", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::opacity", ...args: any[]): void
    connect(sigName: "notify::parent", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::parent", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::parent", ...args: any[]): void
    connect(sigName: "notify::receives-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::receives-default", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::receives-default", ...args: any[]): void
    connect(sigName: "notify::scale-factor", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::scale-factor", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::scale-factor", ...args: any[]): void
    connect(sigName: "notify::sensitive", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::sensitive", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::sensitive", ...args: any[]): void
    connect(sigName: "notify::style", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::style", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::style", ...args: any[]): void
    connect(sigName: "notify::tooltip-markup", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-markup", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-markup", ...args: any[]): void
    connect(sigName: "notify::tooltip-text", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::tooltip-text", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::tooltip-text", ...args: any[]): void
    connect(sigName: "notify::valign", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::valign", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::valign", ...args: any[]): void
    connect(sigName: "notify::vexpand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand", ...args: any[]): void
    connect(sigName: "notify::vexpand-set", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::vexpand-set", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::vexpand-set", ...args: any[]): void
    connect(sigName: "notify::visible", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::visible", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::visible", ...args: any[]): void
    connect(sigName: "notify::width-request", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::width-request", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::width-request", ...args: any[]): void
    connect(sigName: "notify::window", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::window", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::window", ...args: any[]): void
    connect(sigName: "notify::orientation", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    connect_after(sigName: "notify::orientation", callback: (($obj: WorkbenchMessage, pspec: GObject.ParamSpec) => void)): number
    emit(sigName: "notify::orientation", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    connect_after(sigName: string, callback: (...args: any[]) => void): number
    emit(sigName: string, ...args: any[]): void
    disconnect(id: number): void
}

class WorkbenchMessage extends Gtk.InfoBar {

    // Own properties of Ide-1.0.Ide.WorkbenchMessage

    static name: string
    static $gtype: GObject.GType<WorkbenchMessage>

    // Constructors of Ide-1.0.Ide.WorkbenchMessage

    constructor(config?: WorkbenchMessage.ConstructorProperties) 
    constructor() 
    static new(): WorkbenchMessage

    // Overloads of new

    /**
     * Creates a new #GtkInfoBar object.
     * @constructor 
     * @returns a new #GtkInfoBar object
     */
    static new(): Gtk.InfoBar
    /**
     * Creates a new #GtkBox.
     * @constructor 
     * @param orientation the box’s orientation.
     * @param spacing the number of pixels to place by default between children.
     * @returns a new #GtkBox.
     */
    static new(orientation: Gtk.Orientation, spacing: number): Gtk.Box
    _init(config?: WorkbenchMessage.ConstructorProperties): void
}

interface ApplicationAddinInterface {

    // Own fields of Ide-1.0.Ide.ApplicationAddinInterface

    parent_interface: GObject.TypeInterface
    load: (self: ApplicationAddin, application: Application) => void
    unload: (self: ApplicationAddin, application: Application) => void
}

abstract class ApplicationAddinInterface {

    // Own properties of Ide-1.0.Ide.ApplicationAddinInterface

    static name: string
}

interface ApplicationClass {

    // Own fields of Ide-1.0.Ide.ApplicationClass

    parent_class: Dazzle.ApplicationClass
}

abstract class ApplicationClass {

    // Own properties of Ide-1.0.Ide.ApplicationClass

    static name: string
}

interface ApplicationToolInterface {

    // Own fields of Ide-1.0.Ide.ApplicationToolInterface

    parent_interface: GObject.TypeInterface
    run_async: (self: ApplicationTool, arguments_: string[], cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    run_finish: (self: ApplicationTool, result: Gio.AsyncResult) => number
}

abstract class ApplicationToolInterface {

    // Own properties of Ide-1.0.Ide.ApplicationToolInterface

    static name: string
}

interface BackForwardItemClass {

    // Own fields of Ide-1.0.Ide.BackForwardItemClass

    parent_class: ObjectClass
}

abstract class BackForwardItemClass {

    // Own properties of Ide-1.0.Ide.BackForwardItemClass

    static name: string
}

interface BackForwardListClass {

    // Own fields of Ide-1.0.Ide.BackForwardListClass

    parent_class: ObjectClass
}

abstract class BackForwardListClass {

    // Own properties of Ide-1.0.Ide.BackForwardListClass

    static name: string
}

interface BufferChangeMonitorClass {

    // Own fields of Ide-1.0.Ide.BufferChangeMonitorClass

    parent: ObjectClass
    set_buffer: (self: BufferChangeMonitor, buffer: Buffer) => void
    get_change: (self: BufferChangeMonitor, iter: Gtk.TextIter) => BufferLineChange
    reload: (self: BufferChangeMonitor) => void
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class BufferChangeMonitorClass {

    // Own properties of Ide-1.0.Ide.BufferChangeMonitorClass

    static name: string
}

interface BufferClass {

    // Own fields of Ide-1.0.Ide.BufferClass

    parent_class: GtkSource.BufferClass
    cursor_moved: (self: Buffer, location: Gtk.TextIter) => void
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class BufferClass {

    // Own properties of Ide-1.0.Ide.BufferClass

    static name: string
}

interface BufferManagerClass {

    // Own fields of Ide-1.0.Ide.BufferManagerClass

    parent_class: ObjectClass
}

abstract class BufferManagerClass {

    // Own properties of Ide-1.0.Ide.BufferManagerClass

    static name: string
}

interface BuildCommand {
}

class BuildCommand {

    // Own properties of Ide-1.0.Ide.BuildCommand

    static name: string
}

interface BuildCommandQueue {
}

class BuildCommandQueue {

    // Own properties of Ide-1.0.Ide.BuildCommandQueue

    static name: string
}

interface BuildManagerClass {

    // Own fields of Ide-1.0.Ide.BuildManagerClass

    parent_class: ObjectClass
}

abstract class BuildManagerClass {

    // Own properties of Ide-1.0.Ide.BuildManagerClass

    static name: string
}

interface BuildPipelineAddinInterface {

    // Own fields of Ide-1.0.Ide.BuildPipelineAddinInterface

    type_interface: GObject.TypeInterface
    load: (self: BuildPipelineAddin, pipeline: BuildPipeline) => void
    unload: (self: BuildPipelineAddin, pipeline: BuildPipeline) => void
}

abstract class BuildPipelineAddinInterface {

    // Own properties of Ide-1.0.Ide.BuildPipelineAddinInterface

    static name: string
}

interface BuildPipelineClass {

    // Own fields of Ide-1.0.Ide.BuildPipelineClass

    parent_class: ObjectClass
}

abstract class BuildPipelineClass {

    // Own properties of Ide-1.0.Ide.BuildPipelineClass

    static name: string
}

interface BuildResult {
}

class BuildResult {

    // Own properties of Ide-1.0.Ide.BuildResult

    static name: string
}

interface BuildStageClass {

    // Own fields of Ide-1.0.Ide.BuildStageClass

    parent_class: ObjectClass
    execute: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null) => boolean
    execute_async: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    execute_finish: (self: BuildStage, result: Gio.AsyncResult) => boolean
    clean_async: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    clean_finish: (self: BuildStage, result: Gio.AsyncResult) => boolean
    query: (self: BuildStage, pipeline: BuildPipeline, cancellable: Gio.Cancellable | null) => void
    reap: (self: BuildStage, reaper: Dazzle.DirectoryReaper) => void
    chain: (self: BuildStage, next: BuildStage) => boolean
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
    _reserved9: any
    _reserved10: any
    _reserved11: any
    _reserved12: any
}

abstract class BuildStageClass {

    // Own properties of Ide-1.0.Ide.BuildStageClass

    static name: string
}

interface BuildStageLauncherClass {

    // Own fields of Ide-1.0.Ide.BuildStageLauncherClass

    parent_class: BuildStageClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class BuildStageLauncherClass {

    // Own properties of Ide-1.0.Ide.BuildStageLauncherClass

    static name: string
}

interface BuildStageMkdirsClass {

    // Own fields of Ide-1.0.Ide.BuildStageMkdirsClass

    parent_class: BuildStageClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class BuildStageMkdirsClass {

    // Own properties of Ide-1.0.Ide.BuildStageMkdirsClass

    static name: string
}

interface BuildStageTransferClass {

    // Own fields of Ide-1.0.Ide.BuildStageTransferClass

    parent_class: BuildStageClass
}

abstract class BuildStageTransferClass {

    // Own properties of Ide-1.0.Ide.BuildStageTransferClass

    static name: string
}

interface BuildSystemDiscoveryInterface {

    // Own fields of Ide-1.0.Ide.BuildSystemDiscoveryInterface

    parent_iface: GObject.TypeInterface
    discover: (self: BuildSystemDiscovery, project_file: Gio.File, cancellable: Gio.Cancellable | null) => [ /* returnType */ string | null, /* priority */ number ]
}

abstract class BuildSystemDiscoveryInterface {

    // Own properties of Ide-1.0.Ide.BuildSystemDiscoveryInterface

    static name: string
}

interface BuildSystemInterface {

    // Own fields of Ide-1.0.Ide.BuildSystemInterface

    parent_iface: GObject.TypeInterface
    get_priority: (self: BuildSystem) => number
    get_build_flags_async: (self: BuildSystem, file: File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    get_build_flags_finish: (self: BuildSystem, result: Gio.AsyncResult) => string[]
    get_build_targets_async: (self: BuildSystem, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    get_build_targets_finish: (self: BuildSystem, result: Gio.AsyncResult) => BuildTarget[]
    get_builddir: (self: BuildSystem, configuration: Configuration) => string | null
    get_id: (self: BuildSystem) => string | null
    get_display_name: (self: BuildSystem) => string | null
}

abstract class BuildSystemInterface {

    // Own properties of Ide-1.0.Ide.BuildSystemInterface

    static name: string
}

interface BuildTargetInterface {

    // Own fields of Ide-1.0.Ide.BuildTargetInterface

    parent_iface: GObject.TypeInterface
    get_install_directory: (self: BuildTarget) => Gio.File | null
    get_name: (self: BuildTarget) => string | null
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class BuildTargetInterface {

    // Own properties of Ide-1.0.Ide.BuildTargetInterface

    static name: string
}

interface BuildconfigConfigurationClass {

    // Own fields of Ide-1.0.Ide.BuildconfigConfigurationClass

    parent_class: ConfigurationClass
}

abstract class BuildconfigConfigurationClass {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationClass

    static name: string
}

interface BuildconfigConfigurationProviderClass {

    // Own fields of Ide-1.0.Ide.BuildconfigConfigurationProviderClass

    parent_class: GObject.ObjectClass
}

abstract class BuildconfigConfigurationProviderClass {

    // Own properties of Ide-1.0.Ide.BuildconfigConfigurationProviderClass

    static name: string
}

interface Builder {
}

class Builder {

    // Own properties of Ide-1.0.Ide.Builder

    static name: string
}

interface CompletionItemClass {

    // Own fields of Ide-1.0.Ide.CompletionItemClass

    parent_class: GObject.ObjectClass
    match: (self: CompletionItem, query: string | null, casefold: string | null) => boolean
}

abstract class CompletionItemClass {

    // Own properties of Ide-1.0.Ide.CompletionItemClass

    static name: string
}

interface CompletionProviderInterface {

    // Own fields of Ide-1.0.Ide.CompletionProviderInterface

    parent_interface: GtkSource.CompletionProviderIface
    load: (self: CompletionProvider, context: Context) => void
}

abstract class CompletionProviderInterface {

    // Own properties of Ide-1.0.Ide.CompletionProviderInterface

    static name: string
}

interface CompletionResultsClass {

    // Own fields of Ide-1.0.Ide.CompletionResultsClass

    parent_class: GObject.ObjectClass
    compare: (self: CompletionResults, left: CompletionItem, right: CompletionItem) => number
}

abstract class CompletionResultsClass {

    // Own properties of Ide-1.0.Ide.CompletionResultsClass

    static name: string
}

interface CompletionWordsClass {

    // Own fields of Ide-1.0.Ide.CompletionWordsClass

    parent_class: GtkSource.CompletionWordsClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class CompletionWordsClass {

    // Own properties of Ide-1.0.Ide.CompletionWordsClass

    static name: string
}

interface ConfigurationClass {

    // Own fields of Ide-1.0.Ide.ConfigurationClass

    parent: ObjectClass
    get_device: (self: Configuration) => Device | null
    set_device: (self: Configuration, device: Device) => void
    get_runtime: (self: Configuration) => Runtime | null
    set_runtime: (self: Configuration, runtime: Runtime) => void
    supports_device: (self: Configuration, device: Device) => boolean
    supports_runtime: (self: Configuration, runtime: Runtime) => boolean
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
    _reserved9: any
    _reserved10: any
    _reserved11: any
    _reserved12: any
    _reserved13: any
    _reserved14: any
    _reserved15: any
    _reserved16: any
}

abstract class ConfigurationClass {

    // Own properties of Ide-1.0.Ide.ConfigurationClass

    static name: string
}

interface ConfigurationManagerClass {

    // Own fields of Ide-1.0.Ide.ConfigurationManagerClass

    parent_class: ObjectClass
}

abstract class ConfigurationManagerClass {

    // Own properties of Ide-1.0.Ide.ConfigurationManagerClass

    static name: string
}

interface ConfigurationProviderInterface {

    // Own fields of Ide-1.0.Ide.ConfigurationProviderInterface

    parent: GObject.TypeInterface
    load_async: (self: ConfigurationProvider, manager: ConfigurationManager, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    load_finish: (self: ConfigurationProvider, result: Gio.AsyncResult) => boolean
    unload: (self: ConfigurationProvider, manager: ConfigurationManager) => void
    save_async: (self: ConfigurationProvider, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    save_finish: (self: ConfigurationProvider, result: Gio.AsyncResult) => boolean
}

abstract class ConfigurationProviderInterface {

    // Own properties of Ide-1.0.Ide.ConfigurationProviderInterface

    static name: string
}

interface ContextClass {

    // Own fields of Ide-1.0.Ide.ContextClass

    parent_class: GObject.ObjectClass
}

abstract class ContextClass {

    // Own properties of Ide-1.0.Ide.ContextClass

    static name: string
}

interface CursorClass {

    // Own fields of Ide-1.0.Ide.CursorClass

    parent_class: GObject.ObjectClass
}

abstract class CursorClass {

    // Own properties of Ide-1.0.Ide.CursorClass

    static name: string
}

interface DeviceClass {

    // Own fields of Ide-1.0.Ide.DeviceClass

    parent: ObjectClass
    get_system_type: (self: Device) => string | null
    prepare_configuration: (self: Device, configuration: Configuration) => void
}

abstract class DeviceClass {

    // Own properties of Ide-1.0.Ide.DeviceClass

    static name: string
}

interface DeviceManagerClass {

    // Own fields of Ide-1.0.Ide.DeviceManagerClass

    parent_class: ObjectClass
}

abstract class DeviceManagerClass {

    // Own properties of Ide-1.0.Ide.DeviceManagerClass

    static name: string
}

interface DeviceProviderInterface {

    // Own fields of Ide-1.0.Ide.DeviceProviderInterface

    parent_interface: GObject.TypeInterface
    get_settled: (provider: DeviceProvider) => boolean
    get_devices: (provider: DeviceProvider) => Device[]
}

abstract class DeviceProviderInterface {

    // Own properties of Ide-1.0.Ide.DeviceProviderInterface

    static name: string
}

interface Diagnostic {

    // Owm methods of Ide-1.0.Ide.Diagnostic

    /**
     * Adds the range to the diagnostic. This allows diagnostic tools to highlight
     * the errored text appropriately.
     * @param range An #IdeSourceRange.
     */
    add_range(range: SourceRange): void
    compare(b: Diagnostic): number
    /**
     * This is a helper to simplify the process of determining what file
     * the diagnostic is within. It is equivalent to getting the source
     * location and looking at the file.
     * @returns A #GFile or %NULL.
     */
    get_file(): Gio.File | null
    /**
     * Gets the fixit denoted by `index`. This value should be less than the value
     * returned from ide_diagnostic_get_num_fixits().
     * @param index The index of the fixit.
     * @returns An #IdeFixit.
     */
    get_fixit(index: number): Fixit
    /**
     * Gets the location of a diagnostic.
     * @returns Gets the location of a diagnostic.
     */
    get_location(): SourceLocation
    get_num_fixits(): number
    get_num_ranges(): number
    /**
     * Retrieves the range found at `index`. It is a programming error to call this
     * function with a value greater or equal to ide_diagnostic_get_num_ranges().
     * @param index 
     * @returns An #IdeSourceRange
     */
    get_range(index: number): SourceRange | null
    get_severity(): DiagnosticSeverity
    get_text(): string | null
    /**
     * This creates a new string that is formatted using the diagnostics line number, column, severity,
     * and message text in the format "line:column: severity: message".
     * 
     * This can be convenient when wanting to quickly display a diagnostic such as in a tooltip.
     * @returns A string containing the text formatted for display.
     */
    get_text_for_display(): string | null
    hash(): number
    ref(): Diagnostic
    /**
     * Adds the suggested fixit to the diagnostic while transfering ownership
     * of `fixit` to `self`.
     * @param fixit An #IdeFixit.
     */
    take_fixit(fixit: Fixit): void
    /**
     * Steals the ownership of `range` and adds to the diagnostic.
     * 
     * This saves multiple atomic references of `range` which could be expensive
     * if you are doing lots of diagnostics.
     * @param range An #IdeSourceRange.
     */
    take_range(range: SourceRange): void
    unref(): void
}

class Diagnostic {

    // Own properties of Ide-1.0.Ide.Diagnostic

    static name: string

    // Constructors of Ide-1.0.Ide.Diagnostic

    /**
     * Creates a new diagnostic.
     * 
     * If you want to set a range for the diagnostic, see
     * ide_diagnostic_add_range() or ide_diagnostic_take_range().
     * @constructor 
     * @param severity the severity of the diagnostic
     * @param text the diagnostic message text
     * @param location the location of the diagnostic
     * @returns An #IdeDiagnostic.
     */
    constructor(severity: DiagnosticSeverity, text: string | null, location: SourceLocation) 
    /**
     * Creates a new diagnostic.
     * 
     * If you want to set a range for the diagnostic, see
     * ide_diagnostic_add_range() or ide_diagnostic_take_range().
     * @constructor 
     * @param severity the severity of the diagnostic
     * @param text the diagnostic message text
     * @param location the location of the diagnostic
     * @returns An #IdeDiagnostic.
     */
    static new(severity: DiagnosticSeverity, text: string | null, location: SourceLocation): Diagnostic
}

interface DiagnosticProviderInterface {

    // Own fields of Ide-1.0.Ide.DiagnosticProviderInterface

    parent_interface: GObject.TypeInterface
    load: (self: DiagnosticProvider) => void
    diagnose_async: (self: DiagnosticProvider, file: File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    diagnose_finish: (self: DiagnosticProvider, result: Gio.AsyncResult) => Diagnostics | null
}

abstract class DiagnosticProviderInterface {

    // Own properties of Ide-1.0.Ide.DiagnosticProviderInterface

    static name: string
}

interface Diagnostics {

    // Owm methods of Ide-1.0.Ide.Diagnostics

    add(diagnostic: Diagnostic): void
    /**
     * Retrieves the number of diagnostics that can be accessed via
     * ide_diagnostics_index().
     * @returns The number of diagnostics in @self.
     */
    get_size(): number
    /**
     * Retrieves the diagnostic at `index`.
     * @param index 
     * @returns An #IdeDiagnostic.
     */
    index(index: number): Diagnostic
    /**
     * Copies the contents of `other` into `self`.
     * 
     * This is performed by taking a reference to the immutable #IdeDiagnostic
     * instances.
     * @param other 
     */
    merge(other: Diagnostics): void
    ref(): Diagnostics
    unref(): void
}

class Diagnostics {

    // Own properties of Ide-1.0.Ide.Diagnostics

    static name: string

    // Constructors of Ide-1.0.Ide.Diagnostics

    /**
     * Creates a new #IdeDiagnostics container structure for `ar`.
     * Ownership of `ar` is transfered to the resulting structure.
     * @constructor 
     * @param ar an array of #IdeDiagnostic.
     * @returns A newly allocated #IdeDiagnostics.
     */
    constructor(ar: Diagnostic[] | null) 
    /**
     * Creates a new #IdeDiagnostics container structure for `ar`.
     * Ownership of `ar` is transfered to the resulting structure.
     * @constructor 
     * @param ar an array of #IdeDiagnostic.
     * @returns A newly allocated #IdeDiagnostics.
     */
    static new(ar: Diagnostic[] | null): Diagnostics
}

interface DiagnosticsManagerClass {

    // Own fields of Ide-1.0.Ide.DiagnosticsManagerClass

    parent_class: ObjectClass
}

abstract class DiagnosticsManagerClass {

    // Own properties of Ide-1.0.Ide.DiagnosticsManagerClass

    static name: string
}

interface DirectoryBuildSystemClass {

    // Own fields of Ide-1.0.Ide.DirectoryBuildSystemClass

    parent_class: ObjectClass
}

abstract class DirectoryBuildSystemClass {

    // Own properties of Ide-1.0.Ide.DirectoryBuildSystemClass

    static name: string
}

interface DirectoryVcsClass {

    // Own fields of Ide-1.0.Ide.DirectoryVcsClass

    parent_class: ObjectClass
}

abstract class DirectoryVcsClass {

    // Own properties of Ide-1.0.Ide.DirectoryVcsClass

    static name: string
}

interface DoapClass {

    // Own fields of Ide-1.0.Ide.DoapClass

    parent_class: GObject.ObjectClass
}

abstract class DoapClass {

    // Own properties of Ide-1.0.Ide.DoapClass

    static name: string
}

interface DoapPersonClass {

    // Own fields of Ide-1.0.Ide.DoapPersonClass

    parent_class: GObject.ObjectClass
}

abstract class DoapPersonClass {

    // Own properties of Ide-1.0.Ide.DoapPersonClass

    static name: string
}

interface EditorFrame {
}

class EditorFrame {

    // Own properties of Ide-1.0.Ide.EditorFrame

    static name: string
}

interface EditorPerspectiveClass {

    // Own fields of Ide-1.0.Ide.EditorPerspectiveClass

    parent_class: Dazzle.DockOverlayClass
}

abstract class EditorPerspectiveClass {

    // Own properties of Ide-1.0.Ide.EditorPerspectiveClass

    static name: string
}

interface EditorViewAddinInterface {

    // Own fields of Ide-1.0.Ide.EditorViewAddinInterface

    parent: GObject.TypeInterface
    load: (self: EditorViewAddin, view: EditorView) => void
    unload: (self: EditorViewAddin, view: EditorView) => void
    language_changed: (self: EditorViewAddin, language_id: string | null) => void
    load_source_view: (self: EditorViewAddin, source_view: SourceView) => void
    unload_source_view: (self: EditorViewAddin, source_view: SourceView) => void
}

abstract class EditorViewAddinInterface {

    // Own properties of Ide-1.0.Ide.EditorViewAddinInterface

    static name: string
}

interface EditorViewClass {

    // Own fields of Ide-1.0.Ide.EditorViewClass

    parent_class: LayoutViewClass
}

abstract class EditorViewClass {

    // Own properties of Ide-1.0.Ide.EditorViewClass

    static name: string
}

interface EnvironmentClass {

    // Own fields of Ide-1.0.Ide.EnvironmentClass

    parent_class: GObject.ObjectClass
}

abstract class EnvironmentClass {

    // Own properties of Ide-1.0.Ide.EnvironmentClass

    static name: string
}

interface EnvironmentVariableClass {

    // Own fields of Ide-1.0.Ide.EnvironmentVariableClass

    parent_class: GObject.ObjectClass
}

abstract class EnvironmentVariableClass {

    // Own properties of Ide-1.0.Ide.EnvironmentVariableClass

    static name: string
}

interface ExtensionAdapterClass {

    // Own fields of Ide-1.0.Ide.ExtensionAdapterClass

    parent_class: ObjectClass
}

abstract class ExtensionAdapterClass {

    // Own properties of Ide-1.0.Ide.ExtensionAdapterClass

    static name: string
}

interface ExtensionSetAdapterClass {

    // Own fields of Ide-1.0.Ide.ExtensionSetAdapterClass

    parent_class: ObjectClass
}

abstract class ExtensionSetAdapterClass {

    // Own properties of Ide-1.0.Ide.ExtensionSetAdapterClass

    static name: string
}

interface FileClass {

    // Own fields of Ide-1.0.Ide.FileClass

    parent_class: ObjectClass
}

abstract class FileClass {

    // Own properties of Ide-1.0.Ide.FileClass

    static name: string
}

interface FileSettingsClass {

    // Own fields of Ide-1.0.Ide.FileSettingsClass

    parent: ObjectClass
}

abstract class FileSettingsClass {

    // Own properties of Ide-1.0.Ide.FileSettingsClass

    static name: string
}

interface Fixit {

    // Owm methods of Ide-1.0.Ide.Fixit

    apply(): void
    /**
     * Gets the range for the replacement text. The range is non inclusive of the
     * end location. [a,b)
     * @returns An #IdeSourceRange.
     */
    get_range(): SourceRange
    /**
     * Gets the text to replace the source range with.
     * @returns A string with the replacement text.
     */
    get_text(): string | null
    ref(): Fixit
    unref(): void
}

class Fixit {

    // Own properties of Ide-1.0.Ide.Fixit

    static name: string
}

interface FormatterInterface {

    // Own fields of Ide-1.0.Ide.FormatterInterface

    parent: GObject.TypeInterface
    load: (self: Formatter) => void
    format_async: (self: Formatter, buffer: Buffer, options: FormatterOptions, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    format_finish: (self: Formatter, result: Gio.AsyncResult) => boolean
    format_range_async: (self: Formatter, buffer: Buffer, options: FormatterOptions, begin: Gtk.TextIter, end: Gtk.TextIter, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    format_range_finish: (self: Formatter, result: Gio.AsyncResult) => boolean
}

abstract class FormatterInterface {

    // Own properties of Ide-1.0.Ide.FormatterInterface

    static name: string
}

interface FormatterOptionsClass {

    // Own fields of Ide-1.0.Ide.FormatterOptionsClass

    parent_class: GObject.ObjectClass
}

abstract class FormatterOptionsClass {

    // Own properties of Ide-1.0.Ide.FormatterOptionsClass

    static name: string
}

interface GenesisAddinInterface {

    // Own fields of Ide-1.0.Ide.GenesisAddinInterface

    parent_interface: GObject.TypeInterface
    get_title: (self: GenesisAddin) => string | null
    get_icon_name: (self: GenesisAddin) => string | null
    get_widget: (self: GenesisAddin) => Gtk.Widget
    run_async: (self: GenesisAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    run_finish: (self: GenesisAddin, result: Gio.AsyncResult) => boolean
    get_label: (self: GenesisAddin) => string | null
    get_next_label: (self: GenesisAddin) => string | null
    get_priority: (self: GenesisAddin) => number
}

abstract class GenesisAddinInterface {

    // Own properties of Ide-1.0.Ide.GenesisAddinInterface

    static name: string
}

interface HighlightEngineClass {

    // Own fields of Ide-1.0.Ide.HighlightEngineClass

    parent_class: ObjectClass
}

abstract class HighlightEngineClass {

    // Own properties of Ide-1.0.Ide.HighlightEngineClass

    static name: string
}

interface HighlightIndex {

    // Owm methods of Ide-1.0.Ide.HighlightIndex

    dump(): void
    insert(word: string | null, tag: any | null): void
    /**
     * Gets the pointer tag that was registered for `word,` or %NULL.  This can be
     * any arbitrary value. Some highlight engines might use it to point at
     * internal structures or strings they know about to optimize later work.
     * @param word 
     * @returns Highlighter specific tag.
     */
    lookup(word: string | null): any | null
    ref(): HighlightIndex
    unref(): void
}

class HighlightIndex {

    // Own properties of Ide-1.0.Ide.HighlightIndex

    static name: string

    // Constructors of Ide-1.0.Ide.HighlightIndex

    constructor() 
    static new(): HighlightIndex
}

interface HighlighterInterface {

    // Own fields of Ide-1.0.Ide.HighlighterInterface

    parent_interface: GObject.TypeInterface
    update: (self: Highlighter, callback: HighlightCallback, range_begin: Gtk.TextIter, range_end: Gtk.TextIter) => /* location */ Gtk.TextIter
    set_engine: (self: Highlighter, engine: HighlightEngine) => void
    load: (self: Highlighter) => void
}

abstract class HighlighterInterface {

    // Own properties of Ide-1.0.Ide.HighlighterInterface

    static name: string
}

interface IndenterInterface {

    // Own fields of Ide-1.0.Ide.IndenterInterface

    parent: GObject.TypeInterface
    format: (self: Indenter, text_view: Gtk.TextView, begin: Gtk.TextIter, end: Gtk.TextIter, event: Gdk.EventKey) => [ /* returnType */ string | null, /* cursor_offset */ number ]
    is_trigger: (self: Indenter, event: Gdk.EventKey) => boolean
}

abstract class IndenterInterface {

    // Own properties of Ide-1.0.Ide.IndenterInterface

    static name: string
}

interface LangservClientClass {

    // Own fields of Ide-1.0.Ide.LangservClientClass

    parent_class: ObjectClass
    notification: (self: LangservClient, method: string | null, params: GLib.Variant) => void
    supports_language: (self: LangservClient, language_id: string | null) => boolean
    published_diagnostics: (self: LangservClient, file: Gio.File, diagnostics: Diagnostics) => void
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class LangservClientClass {

    // Own properties of Ide-1.0.Ide.LangservClientClass

    static name: string
}

interface LangservCompletionProviderClass {

    // Own fields of Ide-1.0.Ide.LangservCompletionProviderClass

    parent_class: ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class LangservCompletionProviderClass {

    // Own properties of Ide-1.0.Ide.LangservCompletionProviderClass

    static name: string
}

interface LangservDiagnosticProviderClass {

    // Own fields of Ide-1.0.Ide.LangservDiagnosticProviderClass

    parent_class: ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class LangservDiagnosticProviderClass {

    // Own properties of Ide-1.0.Ide.LangservDiagnosticProviderClass

    static name: string
}

interface LangservFormatterClass {

    // Own fields of Ide-1.0.Ide.LangservFormatterClass

    parent_class: ObjectClass
}

abstract class LangservFormatterClass {

    // Own properties of Ide-1.0.Ide.LangservFormatterClass

    static name: string
}

interface LangservHighlighterClass {

    // Own fields of Ide-1.0.Ide.LangservHighlighterClass

    parent_class: ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class LangservHighlighterClass {

    // Own properties of Ide-1.0.Ide.LangservHighlighterClass

    static name: string
}

interface LangservRenameProviderClass {

    // Own fields of Ide-1.0.Ide.LangservRenameProviderClass

    parent_instance: ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class LangservRenameProviderClass {

    // Own properties of Ide-1.0.Ide.LangservRenameProviderClass

    static name: string
}

interface LangservSymbolNodeClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolNodeClass

    parent_class: SymbolNodeClass
}

abstract class LangservSymbolNodeClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolNodeClass

    static name: string
}

interface LangservSymbolResolverClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolResolverClass

    parent_class: ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class LangservSymbolResolverClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolResolverClass

    static name: string
}

interface LangservSymbolTreeClass {

    // Own fields of Ide-1.0.Ide.LangservSymbolTreeClass

    parent_class: GObject.ObjectClass
}

abstract class LangservSymbolTreeClass {

    // Own properties of Ide-1.0.Ide.LangservSymbolTreeClass

    static name: string
}

interface LayoutClass {

    // Own fields of Ide-1.0.Ide.LayoutClass

    parent_class: Dazzle.DockBinClass
}

abstract class LayoutClass {

    // Own properties of Ide-1.0.Ide.LayoutClass

    static name: string
}

interface LayoutGridClass {

    // Own fields of Ide-1.0.Ide.LayoutGridClass

    parent_class: Gtk.BinClass
}

abstract class LayoutGridClass {

    // Own properties of Ide-1.0.Ide.LayoutGridClass

    static name: string
}

interface LayoutPaneClass {

    // Own fields of Ide-1.0.Ide.LayoutPaneClass

    parent_class: Dazzle.DockBinEdgeClass
}

abstract class LayoutPaneClass {

    // Own properties of Ide-1.0.Ide.LayoutPaneClass

    static name: string
}

interface LayoutStackAddinInterface {

    // Own fields of Ide-1.0.Ide.LayoutStackAddinInterface

    parent_iface: GObject.TypeInterface
    load: (self: LayoutStackAddin, stack: LayoutStack) => void
    unload: (self: LayoutStackAddin, stack: LayoutStack) => void
    set_view: (self: LayoutStackAddin, view: LayoutView | null) => void
}

abstract class LayoutStackAddinInterface {

    // Own properties of Ide-1.0.Ide.LayoutStackAddinInterface

    static name: string
}

interface LayoutStackClass {

    // Own fields of Ide-1.0.Ide.LayoutStackClass

    parent_class: Gtk.BinClass
}

abstract class LayoutStackClass {

    // Own properties of Ide-1.0.Ide.LayoutStackClass

    static name: string
}

interface LayoutViewClass {

    // Own fields of Ide-1.0.Ide.LayoutViewClass

    parent: Gtk.BinClass
    get_can_preview: (self: LayoutView) => boolean
    get_can_split: (self: LayoutView) => boolean
    get_modified: (self: LayoutView) => boolean
    get_title: (self: LayoutView) => string | null
    get_special_title: (self: LayoutView) => string | null
    create_split: (self: LayoutView, file: Gio.File) => LayoutView
    get_split_view: (self: LayoutView) => boolean
    set_split_view: (self: LayoutView, split_view: boolean) => void
    set_back_forward_list: (self: LayoutView, back_forward_list: BackForwardList) => void
    navigate_to: (self: LayoutView, location: SourceLocation) => void
    agree_to_close: (self: LayoutView) => boolean
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class LayoutViewClass {

    // Own properties of Ide-1.0.Ide.LayoutViewClass

    static name: string
}

interface LineReader {

    // Own fields of Ide-1.0.Ide.LineReader

    contents: string | null
    length: number
    pos: number

    // Owm methods of Ide-1.0.Ide.LineReader

    init(contents: string | null, length: number): void
    /**
     * Moves forward to the beginning of the next line in the buffer. No changes to the buffer
     * are made, and the result is a pointer within the string passed as `contents` in
     * ide_line_reader_init(). Since the line most likely will not be terminated with a NULL byte,
     * you must provide `length` to determine the length of the line.
     * @param length a location for the length of the line in bytes.
     * @returns The beginning of the line within the buffer.
     */
    next(length: number): string | null
}

class LineReader {

    // Own properties of Ide-1.0.Ide.LineReader

    static name: string
}

interface LocalDeviceClass {

    // Own fields of Ide-1.0.Ide.LocalDeviceClass

    parent: DeviceClass
}

abstract class LocalDeviceClass {

    // Own properties of Ide-1.0.Ide.LocalDeviceClass

    static name: string
}

interface ObjectClass {

    // Own fields of Ide-1.0.Ide.ObjectClass

    parent: GObject.ObjectClass
    destroy: (self: Object) => void
    get_context: (self: Object) => Context
    set_context: (self: Object, context: Context) => void
}

abstract class ObjectClass {

    // Own properties of Ide-1.0.Ide.ObjectClass

    static name: string
}

interface OmniBarClass {

    // Own fields of Ide-1.0.Ide.OmniBarClass

    parent_class: Gtk.BoxClass
}

abstract class OmniBarClass {

    // Own properties of Ide-1.0.Ide.OmniBarClass

    static name: string
}

interface OmniSearchDisplayClass {

    // Own fields of Ide-1.0.Ide.OmniSearchDisplayClass

    parent_class: Gtk.BinClass
}

abstract class OmniSearchDisplayClass {

    // Own properties of Ide-1.0.Ide.OmniSearchDisplayClass

    static name: string
}

interface OmniSearchEntryClass {

    // Own fields of Ide-1.0.Ide.OmniSearchEntryClass

    parent_class: Gtk.EntryClass
}

abstract class OmniSearchEntryClass {

    // Own properties of Ide-1.0.Ide.OmniSearchEntryClass

    static name: string
}

interface OmniSearchGroupClass {

    // Own fields of Ide-1.0.Ide.OmniSearchGroupClass

    parent_class: Gtk.BoxClass
}

abstract class OmniSearchGroupClass {

    // Own properties of Ide-1.0.Ide.OmniSearchGroupClass

    static name: string
}

interface OmniSearchRowClass {

    // Own fields of Ide-1.0.Ide.OmniSearchRowClass

    parent_class: Gtk.ListBoxRowClass
}

abstract class OmniSearchRowClass {

    // Own properties of Ide-1.0.Ide.OmniSearchRowClass

    static name: string
}

interface PatternSpec {

    // Owm methods of Ide-1.0.Ide.PatternSpec

    get_text(): string | null
    match(haystack: string | null): boolean
    ref(): PatternSpec
    unref(): void
}

/**
 * This works similar to GPatternSpec except the query syntax is different.
 * It tries to mtach word boundaries, but with matching partial words up
 * to those boundaries. For example, "gtk widg" would match "gtk_widget_show".
 * Word boundaries include '_' and ' '. If any character is uppercase, then
 * case sensitivity is used.
 * @record 
 */
class PatternSpec {

    // Own properties of Ide-1.0.Ide.PatternSpec

    static name: string

    // Constructors of Ide-1.0.Ide.PatternSpec

    constructor(keywords: string | null) 
    static new(keywords: string | null): PatternSpec
}

interface PerspectiveInterface {

    // Own fields of Ide-1.0.Ide.PerspectiveInterface

    parent: GObject.TypeInterface
    agree_to_shutdown: (self: Perspective) => boolean
    get_actions: (self: Perspective) => Gio.ActionGroup | null
    get_icon_name: (self: Perspective) => string | null
    get_id: (self: Perspective) => string | null
    get_needs_attention: (self: Perspective) => boolean
    get_priority: (self: Perspective) => number
    get_title: (self: Perspective) => string | null
    get_titlebar: (self: Perspective) => Gtk.Widget | null
    is_early: (self: Perspective) => boolean
    set_fullscreen: (self: Perspective, fullscreen: boolean) => void
    views_foreach: (self: Perspective, callback: Gtk.Callback) => void
    get_accelerator: (self: Perspective) => string | null
}

abstract class PerspectiveInterface {

    // Own properties of Ide-1.0.Ide.PerspectiveInterface

    static name: string
}

interface PkconTransferClass {

    // Own fields of Ide-1.0.Ide.PkconTransferClass

    parent_class: TransferClass
}

abstract class PkconTransferClass {

    // Own properties of Ide-1.0.Ide.PkconTransferClass

    static name: string
}

interface PreferencesAddinInterface {

    // Own fields of Ide-1.0.Ide.PreferencesAddinInterface

    parent_interface: GObject.TypeInterface
    load: (self: PreferencesAddin, preferences: Dazzle.Preferences) => void
    unload: (self: PreferencesAddin, preferences: Dazzle.Preferences) => void
}

abstract class PreferencesAddinInterface {

    // Own properties of Ide-1.0.Ide.PreferencesAddinInterface

    static name: string
}

interface PreferencesPerspectiveClass {

    // Own fields of Ide-1.0.Ide.PreferencesPerspectiveClass

    parent_class: Dazzle.PreferencesViewClass
}

abstract class PreferencesPerspectiveClass {

    // Own properties of Ide-1.0.Ide.PreferencesPerspectiveClass

    static name: string
}

interface ProgressClass {

    // Own fields of Ide-1.0.Ide.ProgressClass

    parent_class: GObject.ObjectClass
}

abstract class ProgressClass {

    // Own properties of Ide-1.0.Ide.ProgressClass

    static name: string
}

interface ProjectClass {

    // Own fields of Ide-1.0.Ide.ProjectClass

    parent_class: ObjectClass
}

abstract class ProjectClass {

    // Own properties of Ide-1.0.Ide.ProjectClass

    static name: string
}

interface ProjectEditClass {

    // Own fields of Ide-1.0.Ide.ProjectEditClass

    parent_instance: GObject.ObjectClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class ProjectEditClass {

    // Own properties of Ide-1.0.Ide.ProjectEditClass

    static name: string
}

interface ProjectFileClass {

    // Own fields of Ide-1.0.Ide.ProjectFileClass

    parent: ProjectItemClass
}

abstract class ProjectFileClass {

    // Own properties of Ide-1.0.Ide.ProjectFileClass

    static name: string
}

interface ProjectFilesClass {

    // Own fields of Ide-1.0.Ide.ProjectFilesClass

    parent_class: ProjectItemClass
}

abstract class ProjectFilesClass {

    // Own properties of Ide-1.0.Ide.ProjectFilesClass

    static name: string
}

interface ProjectInfoClass {

    // Own fields of Ide-1.0.Ide.ProjectInfoClass

    parent_class: GObject.ObjectClass
}

abstract class ProjectInfoClass {

    // Own properties of Ide-1.0.Ide.ProjectInfoClass

    static name: string
}

interface ProjectItemClass {

    // Own fields of Ide-1.0.Ide.ProjectItemClass

    parent_class: ObjectClass
}

abstract class ProjectItemClass {

    // Own properties of Ide-1.0.Ide.ProjectItemClass

    static name: string
}

interface ProjectMinerInterface {

    // Own fields of Ide-1.0.Ide.ProjectMinerInterface

    parent_iface: GObject.TypeInterface
    discovered: (self: ProjectMiner, project_info: ProjectInfo) => void
    mine_async: (self: ProjectMiner, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    mine_finish: (self: ProjectMiner, result: Gio.AsyncResult) => boolean
}

abstract class ProjectMinerInterface {

    // Own properties of Ide-1.0.Ide.ProjectMinerInterface

    static name: string
}

interface ProjectTemplateInterface {

    // Own fields of Ide-1.0.Ide.ProjectTemplateInterface

    parent: GObject.TypeInterface
    get_id: (self: ProjectTemplate) => string | null
    get_name: (self: ProjectTemplate) => string | null
    get_description: (self: ProjectTemplate) => string | null
    get_widget: (self: ProjectTemplate) => Gtk.Widget
    get_languages: (self: ProjectTemplate) => string[]
    get_icon_name: (self: ProjectTemplate) => string | null
    expand_async: (self: ProjectTemplate, params: GLib.HashTable, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    expand_finish: (self: ProjectTemplate, result: Gio.AsyncResult) => boolean
}

abstract class ProjectTemplateInterface {

    // Own properties of Ide-1.0.Ide.ProjectTemplateInterface

    static name: string
}

interface RecentProjectsClass {

    // Own fields of Ide-1.0.Ide.RecentProjectsClass

    parent_class: GObject.ObjectClass
}

abstract class RecentProjectsClass {

    // Own properties of Ide-1.0.Ide.RecentProjectsClass

    static name: string
}

interface RenameProviderInterface {

    // Own fields of Ide-1.0.Ide.RenameProviderInterface

    parent_iface: GObject.TypeInterface
    rename_async: (self: RenameProvider, location: SourceLocation, new_name: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    rename_finish: (self: RenameProvider, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* edits */ ProjectEdit[] | null ]
    load: (self: RenameProvider) => void
}

abstract class RenameProviderInterface {

    // Own properties of Ide-1.0.Ide.RenameProviderInterface

    static name: string
}

interface RunButtonClass {

    // Own fields of Ide-1.0.Ide.RunButtonClass

    parent_class: Gtk.BoxClass
}

abstract class RunButtonClass {

    // Own properties of Ide-1.0.Ide.RunButtonClass

    static name: string
}

interface RunManagerClass {

    // Own fields of Ide-1.0.Ide.RunManagerClass

    parent_class: ObjectClass
}

abstract class RunManagerClass {

    // Own properties of Ide-1.0.Ide.RunManagerClass

    static name: string
}

interface RunnerAddinInterface {

    // Own fields of Ide-1.0.Ide.RunnerAddinInterface

    parent_interface: GObject.TypeInterface
    load: (self: RunnerAddin, runner: Runner) => void
    unload: (self: RunnerAddin, runner: Runner) => void
    prehook_async: (self: RunnerAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    prehook_finish: (self: RunnerAddin, result: Gio.AsyncResult) => boolean
    posthook_async: (self: RunnerAddin, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    posthook_finish: (self: RunnerAddin, result: Gio.AsyncResult) => boolean
}

abstract class RunnerAddinInterface {

    // Own properties of Ide-1.0.Ide.RunnerAddinInterface

    static name: string
}

interface RunnerClass {

    // Own fields of Ide-1.0.Ide.RunnerClass

    parent: ObjectClass
    force_quit: (self: Runner) => void
    get_stdin: (self: Runner) => Gio.OutputStream | null
    get_stdout: (self: Runner) => Gio.InputStream | null
    get_stderr: (self: Runner) => Gio.InputStream | null
    run_async: (self: Runner, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    run_finish: (self: Runner, result: Gio.AsyncResult) => boolean
    set_tty: (self: Runner, tty_fd: number) => void
    fixup_launcher: (self: Runner, launcher: SubprocessLauncher) => void
    get_runtime: (self: Runner) => Runtime | null
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
}

abstract class RunnerClass {

    // Own properties of Ide-1.0.Ide.RunnerClass

    static name: string
}

interface RuntimeClass {

    // Own fields of Ide-1.0.Ide.RuntimeClass

    parent: ObjectClass
    contains_program_in_path: (self: Runtime, program: string | null, cancellable: Gio.Cancellable | null) => boolean
    create_launcher: (self: Runtime) => SubprocessLauncher
    prepare_configuration: (self: Runtime, configuration: Configuration) => void
    create_runner: (self: Runtime, build_target: BuildTarget) => Runner | null
    translate_file: (self: Runtime, file: Gio.File) => Gio.File
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
    _reserved9: any
    _reserved10: any
    _reserved11: any
    _reserved12: any
    _reserved13: any
    _reserved14: any
    _reserved15: any
    _reserved16: any
}

abstract class RuntimeClass {

    // Own properties of Ide-1.0.Ide.RuntimeClass

    static name: string
}

interface RuntimeManagerClass {

    // Own fields of Ide-1.0.Ide.RuntimeManagerClass

    parent_class: ObjectClass
}

abstract class RuntimeManagerClass {

    // Own properties of Ide-1.0.Ide.RuntimeManagerClass

    static name: string
}

interface RuntimeProviderInterface {

    // Own fields of Ide-1.0.Ide.RuntimeProviderInterface

    parent: GObject.TypeInterface
    load: (self: RuntimeProvider, manager: RuntimeManager) => void
    unload: (self: RuntimeProvider, manager: RuntimeManager) => void
    can_install: (self: RuntimeProvider, runtime_id: string | null) => boolean
    install_async: (self: RuntimeProvider, runtime_id: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    install_finish: (self: RuntimeProvider, result: Gio.AsyncResult) => boolean
}

abstract class RuntimeProviderInterface {

    // Own properties of Ide-1.0.Ide.RuntimeProviderInterface

    static name: string
}

interface Script {
}

class Script {

    // Own properties of Ide-1.0.Ide.Script

    static name: string
}

interface ScriptManager {
}

class ScriptManager {

    // Own properties of Ide-1.0.Ide.ScriptManager

    static name: string
}

interface SearchContextClass {

    // Own fields of Ide-1.0.Ide.SearchContextClass

    parent_class: ObjectClass
}

abstract class SearchContextClass {

    // Own properties of Ide-1.0.Ide.SearchContextClass

    static name: string
}

interface SearchEngineClass {

    // Own fields of Ide-1.0.Ide.SearchEngineClass

    parent_class: ObjectClass
}

abstract class SearchEngineClass {

    // Own properties of Ide-1.0.Ide.SearchEngineClass

    static name: string
}

interface SearchProviderInterface {

    // Own fields of Ide-1.0.Ide.SearchProviderInterface

    parent_iface: GObject.TypeInterface
    get_prefix: (provider: SearchProvider) => string
    get_priority: (provider: SearchProvider) => number
    get_verb: (provider: SearchProvider) => string | null
    populate: (provider: SearchProvider, context: SearchContext, search_terms: string | null, max_results: number, cancellable: Gio.Cancellable | null) => void
    create_row: (provider: SearchProvider, result: SearchResult) => Gtk.Widget
    activate: (provider: SearchProvider, row: Gtk.Widget, result: SearchResult) => void
}

abstract class SearchProviderInterface {

    // Own properties of Ide-1.0.Ide.SearchProviderInterface

    static name: string
}

interface SearchReducer {

    // Own fields of Ide-1.0.Ide.SearchReducer

    context: SearchContext
    provider: SearchProvider
    sequence: GLib.Sequence
    max_results: number
    count: number

    // Owm methods of Ide-1.0.Ide.SearchReducer

    accepts(score: number): boolean
    destroy(): void
    init(context: SearchContext, provider: SearchProvider, max_results: number): void
    push(result: SearchResult): void
}

class SearchReducer {

    // Own properties of Ide-1.0.Ide.SearchReducer

    static name: string
}

interface SearchResultClass {

    // Own fields of Ide-1.0.Ide.SearchResultClass

    parent: ObjectClass
    activate: (result: SearchResult) => void
}

abstract class SearchResultClass {

    // Own properties of Ide-1.0.Ide.SearchResultClass

    static name: string
}

interface ServiceInterface {

    // Own fields of Ide-1.0.Ide.ServiceInterface

    parent_interface: GObject.TypeInterface
    context_loaded: (service: Service) => void
    get_name: (service: Service) => string | null
    start: (service: Service) => void
    stop: (service: Service) => void
}

abstract class ServiceInterface {

    // Own properties of Ide-1.0.Ide.ServiceInterface

    static name: string
}

interface SettingsClass {

    // Own fields of Ide-1.0.Ide.SettingsClass

    parent_class: ObjectClass
}

abstract class SettingsClass {

    // Own properties of Ide-1.0.Ide.SettingsClass

    static name: string
}

interface SourceLocation {

    // Owm methods of Ide-1.0.Ide.SourceLocation

    compare(b: SourceLocation): number
    /**
     * The file represented by this source location.
     * @returns An #IdeFile.
     */
    get_file(): File
    /**
     * Retrieves the target line number starting from 0.
     * @returns A #guint containing the target line.
     */
    get_line(): number
    /**
     * Retrieves the character offset within the line.
     * @returns A #guint containing the offset within the line.
     */
    get_line_offset(): number
    /**
     * Retrieves the character offset within the file.
     * @returns A #guint containing the character offset within the file.
     */
    get_offset(): number
    get_uri(): Uri
    hash(): number
    /**
     * Increments the reference count of `self` by one.
     * @returns self
     */
    ref(): SourceLocation
    /**
     * Decrements the reference count of `self` by one. If the reference count
     * reaches zero, then the structure is freed.
     */
    unref(): void
}

class SourceLocation {

    // Own properties of Ide-1.0.Ide.SourceLocation

    static name: string

    // Constructors of Ide-1.0.Ide.SourceLocation

    /**
     * Creates a new #IdeSourceLocation, using the file, line, column, and character
     * offset provided.
     * @constructor 
     * @param file an #IdeFile
     * @param line the line number starting from zero
     * @param line_offset the character offset within the line
     * @param offset the character offset in the file
     * @returns A newly allocated #IdeSourceLocation.
     */
    constructor(file: File, line: number, line_offset: number, offset: number) 
    /**
     * Creates a new #IdeSourceLocation, using the file, line, column, and character
     * offset provided.
     * @constructor 
     * @param file an #IdeFile
     * @param line the line number starting from zero
     * @param line_offset the character offset within the line
     * @param offset the character offset in the file
     * @returns A newly allocated #IdeSourceLocation.
     */
    static new(file: File, line: number, line_offset: number, offset: number): SourceLocation
}

interface SourceMapClass {

    // Own fields of Ide-1.0.Ide.SourceMapClass

    parent_class: GtkSource.MapClass
}

abstract class SourceMapClass {

    // Own properties of Ide-1.0.Ide.SourceMapClass

    static name: string
}

interface SourceRange {

    // Owm methods of Ide-1.0.Ide.SourceRange

    /**
     * Gets the beginning of the source range.
     * @returns An #IdeSourceLocation.
     */
    get_begin(): SourceLocation
    /**
     * Gets the end of the source range.
     * @returns An #IdeSourceLocation.
     */
    get_end(): SourceLocation
    /**
     * Increments the reference count of `self` by one. When you are done with
     * `self,` release it by calling ide_source_range_unref().
     * @returns @self
     */
    ref(): SourceRange
    /**
     * Decrements the reference count of `self` by one.
     */
    unref(): void
}

class SourceRange {

    // Own properties of Ide-1.0.Ide.SourceRange

    static name: string

    // Constructors of Ide-1.0.Ide.SourceRange

    constructor(begin: SourceLocation, end: SourceLocation) 
    static new(begin: SourceLocation, end: SourceLocation): SourceRange
}

interface SourceSnippetChunkClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetChunkClass

    parent_class: GObject.ObjectClass
}

abstract class SourceSnippetChunkClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetChunkClass

    static name: string
}

interface SourceSnippetClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetClass

    parent_class: GObject.ObjectClass
}

abstract class SourceSnippetClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetClass

    static name: string
}

interface SourceSnippetContextClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetContextClass

    parent_class: GObject.ObjectClass
}

abstract class SourceSnippetContextClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetContextClass

    static name: string
}

interface SourceSnippetsClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetsClass

    parent_class: GObject.ObjectClass
}

abstract class SourceSnippetsClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetsClass

    static name: string
}

interface SourceSnippetsManagerClass {

    // Own fields of Ide-1.0.Ide.SourceSnippetsManagerClass

    parent_class: GObject.ObjectClass
}

abstract class SourceSnippetsManagerClass {

    // Own properties of Ide-1.0.Ide.SourceSnippetsManagerClass

    static name: string
}

interface SourceViewClass {

    // Own fields of Ide-1.0.Ide.SourceViewClass

    parent_class: GtkSource.ViewClass
    append_to_count: (self: SourceView, digit: number) => void
    auto_indent: (self: SourceView) => void
    begin_macro: (self: SourceView) => void
    capture_modifier: (self: SourceView) => void
    clear_count: (self: SourceView) => void
    clear_modifier: (self: SourceView) => void
    clear_search: (self: SourceView) => void
    clear_selection: (self: SourceView) => void
    clear_snippets: (self: SourceView) => void
    cycle_completion: (self: SourceView, direction: Gtk.DirectionType) => void
    delete_selection: (self: SourceView) => void
    end_macro: (self: SourceView) => void
    focus_location: (self: SourceView, location: SourceLocation) => void
    goto_definition: (self: SourceView) => void
    hide_completion: (self: SourceView) => void
    indent_selection: (self: SourceView, level: number) => void
    insert_at_cursor_and_indent: (self: SourceView, str: string | null) => void
    insert_modifier: (self: SourceView, use_count: boolean) => void
    jump: (self: SourceView, location: Gtk.TextIter) => void
    movement: (self: SourceView, movement: SourceViewMovement, extend_selection: boolean, exclusive: boolean, apply_count: boolean) => void
    move_error: (self: SourceView, dir: Gtk.DirectionType) => void
    move_search: (self: SourceView, dir: Gtk.DirectionType, extend_selection: boolean, select_match: boolean, exclusive: boolean, apply_count: boolean, at_word_boundaries: number) => void
    paste_clipboard_extended: (self: SourceView, smart_lines: boolean, after_cursor: boolean, place_cursor_at_original: boolean) => void
    push_selection: (self: SourceView) => void
    pop_selection: (self: SourceView) => void
    rebuild_highlight: (self: SourceView) => void
    replay_macro: (self: SourceView, use_count: boolean) => void
    request_documentation: (self: SourceView) => void
    restore_insert_mark: (self: SourceView) => void
    save_command: (self: SourceView) => void
    save_search_char: (self: SourceView) => void
    save_insert_mark: (self: SourceView) => void
    select_inner: (self: SourceView, inner_left: string | null, inner_right: string | null, exclusive: boolean, string_mode: boolean) => void
    select_tag: (self: SourceView, exclusive: boolean) => void
    selection_theatric: (self: SourceView, theatric: SourceViewTheatric) => void
    set_mode: (self: SourceView, mode: string | null, type: SourceViewModeType) => void
    set_overwrite: (self: SourceView, overwrite: boolean) => void
    set_search_text: (self: SourceView, search_text: string | null, from_selection: boolean) => void
    sort: (self: SourceView, ignore_case: boolean, reverse: boolean) => void
    swap_selection_bounds: (self: SourceView) => void
    increase_font_size: (self: SourceView) => void
    decrease_font_size: (self: SourceView) => void
    reset_font_size: (self: SourceView) => void
    begin_rename: (self: SourceView) => void
    add_cursor: (self: SourceView, type: number) => void
    remove_cursors: (self: SourceView) => void
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
    _reserved9: any
    _reserved10: any
    _reserved11: any
    _reserved12: any
    _reserved13: any
    _reserved14: any
    _reserved15: any
    _reserved16: any
    _reserved17: any
    _reserved18: any
    _reserved19: any
    _reserved20: any
    _reserved21: any
    _reserved22: any
    _reserved23: any
    _reserved24: any
}

abstract class SourceViewClass {

    // Own properties of Ide-1.0.Ide.SourceViewClass

    static name: string
}

interface SourceViewModeClass {

    // Own fields of Ide-1.0.Ide.SourceViewModeClass

    parent_class: Gtk.WidgetClass
}

abstract class SourceViewModeClass {

    // Own properties of Ide-1.0.Ide.SourceViewModeClass

    static name: string
}

interface SubprocessInterface {

    // Own fields of Ide-1.0.Ide.SubprocessInterface

    parent_interface: GObject.TypeInterface
    get_identifier: (self: Subprocess) => string | null
    get_stdout_pipe: (self: Subprocess) => Gio.InputStream
    get_stderr_pipe: (self: Subprocess) => Gio.InputStream
    get_stdin_pipe: (self: Subprocess) => Gio.OutputStream
    wait: (self: Subprocess, cancellable: Gio.Cancellable | null) => boolean
    wait_async: (self: Subprocess, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    wait_finish: (self: Subprocess, result: Gio.AsyncResult) => boolean
    get_successful: (self: Subprocess) => boolean
    get_if_exited: (self: Subprocess) => boolean
    get_exit_status: (self: Subprocess) => number
    get_if_signaled: (self: Subprocess) => boolean
    get_term_sig: (self: Subprocess) => number
    get_status: (self: Subprocess) => number
    send_signal: (self: Subprocess, signal_num: number) => void
    force_exit: (self: Subprocess) => void
    communicate: (self: Subprocess, stdin_buf: GLib.Bytes, cancellable: Gio.Cancellable | null, stdout_buf: GLib.Bytes, stderr_buf: GLib.Bytes) => boolean
    communicate_utf8: (self: Subprocess, stdin_buf: string | null, cancellable: Gio.Cancellable | null) => [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
    communicate_async: (self: Subprocess, stdin_buf: GLib.Bytes | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    communicate_finish: (self: Subprocess, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* stdout_buf */ GLib.Bytes, /* stderr_buf */ GLib.Bytes ]
    communicate_utf8_async: (self: Subprocess, stdin_buf: string | null, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    communicate_utf8_finish: (self: Subprocess, result: Gio.AsyncResult) => [ /* returnType */ boolean, /* stdout_buf */ string | null, /* stderr_buf */ string | null ]
}

abstract class SubprocessInterface {

    // Own properties of Ide-1.0.Ide.SubprocessInterface

    static name: string
}

interface SubprocessLauncherClass {

    // Own fields of Ide-1.0.Ide.SubprocessLauncherClass

    parent_class: GObject.ObjectClass
    spawn: (self: SubprocessLauncher, cancellable: Gio.Cancellable | null) => Subprocess
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class SubprocessLauncherClass {

    // Own properties of Ide-1.0.Ide.SubprocessLauncherClass

    static name: string
}

interface SubprocessSupervisorClass {

    // Own fields of Ide-1.0.Ide.SubprocessSupervisorClass

    parent_class: GObject.ObjectClass
    spawned: (self: SubprocessSupervisor, subprocess: Subprocess) => void
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class SubprocessSupervisorClass {

    // Own properties of Ide-1.0.Ide.SubprocessSupervisorClass

    static name: string
}

interface Symbol {

    // Owm methods of Ide-1.0.Ide.Symbol

    /**
     * Gets the location of the symbols "implementation". In C/C++ languages, you can have multiple
     * declarations by only a single implementation.
     * @returns An #IdeSourceLocation or %NULL.
     */
    get_canonical_location(): SourceLocation | null
    /**
     * The location of a symbol equates to the declaration of the symbol. In C and C++, this would
     * mean the header location (or forward declaration in a C file before the implementation).
     * 
     * If the symbol provider did not register this information, %NULL will be returned.
     * @returns An #IdeSourceLocation or %NULL.
     */
    get_declaration_location(): SourceLocation | null
    /**
     * Like ide_symbol_get_declaration_location() but gets the first declaration (only one can be
     * the definition).
     * @returns An #IdeSourceLocation or %NULL.
     */
    get_definition_location(): SourceLocation | null
    get_flags(): SymbolFlags
    get_kind(): SymbolKind
    get_name(): string | null
    ref(): Symbol
    unref(): void
}

class Symbol {

    // Own properties of Ide-1.0.Ide.Symbol

    static name: string

    // Constructors of Ide-1.0.Ide.Symbol

    constructor(name: string | null, kind: SymbolKind, flags: SymbolFlags, declaration_location: SourceLocation | null, definition_location: SourceLocation | null, canonical_location: SourceLocation | null) 
    static new(name: string | null, kind: SymbolKind, flags: SymbolFlags, declaration_location: SourceLocation | null, definition_location: SourceLocation | null, canonical_location: SourceLocation | null): Symbol
}

interface SymbolNodeClass {

    // Own fields of Ide-1.0.Ide.SymbolNodeClass

    parent: ObjectClass
    get_location_async: (self: SymbolNode, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    get_location_finish: (self: SymbolNode, result: Gio.AsyncResult) => SourceLocation | null
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class SymbolNodeClass {

    // Own properties of Ide-1.0.Ide.SymbolNodeClass

    static name: string
}

interface SymbolResolverInterface {

    // Own fields of Ide-1.0.Ide.SymbolResolverInterface

    parent_interface: GObject.TypeInterface
    lookup_symbol_async: (self: SymbolResolver, location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    lookup_symbol_finish: (self: SymbolResolver, result: Gio.AsyncResult) => Symbol | null
    get_symbol_tree_async: (self: SymbolResolver, file: Gio.File, buffer: Buffer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    get_symbol_tree_finish: (self: SymbolResolver, result: Gio.AsyncResult) => SymbolTree | null
    load: (self: SymbolResolver) => void
    find_references_async: (self: SymbolResolver, location: SourceLocation, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    find_references_finish: (self: SymbolResolver, result: Gio.AsyncResult) => SourceRange[]
}

abstract class SymbolResolverInterface {

    // Own properties of Ide-1.0.Ide.SymbolResolverInterface

    static name: string
}

interface SymbolTreeInterface {

    // Own fields of Ide-1.0.Ide.SymbolTreeInterface

    parent: GObject.TypeInterface
    get_n_children: (self: SymbolTree, node: SymbolNode | null) => number
    get_nth_child: (self: SymbolTree, node: SymbolNode | null, nth: number) => SymbolNode | null
}

abstract class SymbolTreeInterface {

    // Own properties of Ide-1.0.Ide.SymbolTreeInterface

    static name: string
}

interface TagsBuilderInterface {

    // Own fields of Ide-1.0.Ide.TagsBuilderInterface

    parent: GObject.TypeInterface
    build_async: (self: TagsBuilder, directory_or_file: Gio.File, recursive: boolean, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    build_finish: (self: TagsBuilder, result: Gio.AsyncResult) => boolean
}

abstract class TagsBuilderInterface {

    // Own properties of Ide-1.0.Ide.TagsBuilderInterface

    static name: string
}

interface TemplateBaseClass {

    // Own fields of Ide-1.0.Ide.TemplateBaseClass

    parent_class: GObject.ObjectClass
}

abstract class TemplateBaseClass {

    // Own properties of Ide-1.0.Ide.TemplateBaseClass

    static name: string
}

interface TemplateProviderInterface {

    // Own fields of Ide-1.0.Ide.TemplateProviderInterface

    parent_iface: GObject.TypeInterface
    get_project_templates: (self: TemplateProvider) => ProjectTemplate[]
}

abstract class TemplateProviderInterface {

    // Own properties of Ide-1.0.Ide.TemplateProviderInterface

    static name: string
}

interface ThreadPool {
}

class ThreadPool {

    // Own properties of Ide-1.0.Ide.ThreadPool

    static name: string

    // Constructors of Ide-1.0.Ide.ThreadPool

    /**
     * Runs the callback on the thread pool thread.
     * @param kind the threadpool kind to use.
     * @param func A function to call in the worker thread.
     */
    static push(kind: ThreadPoolKind, func: ThreadFunc): void
    /**
     * This pushes a task to be executed on a worker thread based on the task kind as denoted by
     * `kind`. Some tasks will be placed on special work queues or throttled based on priority.
     * @param kind The task kind.
     * @param task A #GTask to execute.
     * @param func The thread worker to execute for `task`.
     */
    static push_task(kind: ThreadPoolKind, task: Gio.Task, func: Gio.TaskThreadFunc): void
}

interface TransferButtonClass {

    // Own fields of Ide-1.0.Ide.TransferButtonClass

    parent_class: Dazzle.ProgressButtonClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
}

abstract class TransferButtonClass {

    // Own properties of Ide-1.0.Ide.TransferButtonClass

    static name: string
}

interface TransferClass {

    // Own fields of Ide-1.0.Ide.TransferClass

    parent_class: GObject.ObjectClass
    execute_async: (self: Transfer, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    execute_finish: (self: Transfer, result: Gio.AsyncResult) => boolean
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class TransferClass {

    // Own properties of Ide-1.0.Ide.TransferClass

    static name: string
}

interface TransferManagerClass {

    // Own fields of Ide-1.0.Ide.TransferManagerClass

    parent_class: ObjectClass
}

abstract class TransferManagerClass {

    // Own properties of Ide-1.0.Ide.TransferManagerClass

    static name: string
}

interface TransferRowClass {

    // Own fields of Ide-1.0.Ide.TransferRowClass

    parent_class: Gtk.ListBoxRowClass
}

abstract class TransferRowClass {

    // Own properties of Ide-1.0.Ide.TransferRowClass

    static name: string
}

interface TransfersButtonClass {

    // Own fields of Ide-1.0.Ide.TransfersButtonClass

    parent_class: Gtk.MenuButtonClass
}

abstract class TransfersButtonClass {

    // Own properties of Ide-1.0.Ide.TransfersButtonClass

    static name: string
}

interface TransfersProgressIconClass {

    // Own fields of Ide-1.0.Ide.TransfersProgressIconClass

    parent_class: Gtk.DrawingAreaClass
}

abstract class TransfersProgressIconClass {

    // Own properties of Ide-1.0.Ide.TransfersProgressIconClass

    static name: string
}

interface UnsavedFile {

    // Owm methods of Ide-1.0.Ide.UnsavedFile

    /**
     * Gets the contents of the unsaved file.
     * @returns A #GBytes containing the unsaved file content.
     */
    get_content(): GLib.Bytes
    /**
     * Retrieves the underlying file represented by `self`.
     * @returns A #GFile.
     */
    get_file(): Gio.File
    get_sequence(): number
    get_temp_path(): string | null
    persist(cancellable: Gio.Cancellable | null): boolean
    ref(): UnsavedFile
    unref(): void
}

class UnsavedFile {

    // Own properties of Ide-1.0.Ide.UnsavedFile

    static name: string
}

interface UnsavedFilesClass {

    // Own fields of Ide-1.0.Ide.UnsavedFilesClass

    parent_class: ObjectClass
}

abstract class UnsavedFilesClass {

    // Own properties of Ide-1.0.Ide.UnsavedFilesClass

    static name: string
}

interface Uri {

    // Owm methods of Ide-1.0.Ide.Uri

    /**
     * Copies `uri`
     * @returns a copy of @uri
     */
    copy(): Uri
    /**
     * Gets `uri'`s authentication parameters. Depending on the URI scheme,
     * ide_uri_parse_params() may be useful for further parsing this
     * information.
     * @returns @uri's authentication parameters.
     */
    get_auth_params(): string | null
    /**
     * Gets `uri'`s fragment, which may contain %<!-- -->-encoding,
     * depending on the flags with which `uri` was parsed.
     * @returns @uri's fragment.
     */
    get_fragment(): string | null
    /**
     * Gets `uri'`s host. If `uri` contained an IPv6 address literal, this
     * value will not include the brackets that are required by the URI
     * syntax.
     * @returns @uri's host.
     */
    get_host(): string | null
    /**
     * Gets `uri'`s password. If `uri` was not parsed with
     * %IDE_URI_PARSE_PASSWORD, this will always be %NULL.
     * @returns @uri's password.
     */
    get_password(): string | null
    /**
     * Gets `uri'`s path, which may contain %<!-- -->-encoding, depending
     * on the flags with which `uri` was parsed.
     * @returns @uri's path.
     */
    get_path(): string | null
    /**
     * Gets `uri'`s port.
     * @returns @uri's port, or %0 if it was unset
     */
    get_port(): number
    /**
     * Gets `uri'`s query, which may contain %<!-- -->-encoding, depending
     * on the flags with which `uri` was parsed.
     * 
     * For queries consisting of a series of "name=value" parameters,
     * ide_uri_parse_params() may be useful.
     * @returns @uri's query.
     */
    get_query(): string | null
    /**
     * Gets `uri'`s scheme.
     * @returns @uri's scheme.
     */
    get_scheme(): string | null
    /**
     * Gets `uri'`s user. If `uri` was parsed with %IDE_URI_PARSE_PASSWORD or
     * %IDE_URI_PARSE_AUTH_PARAMS, this is the string that appears before the
     * password and parameters in the userinfo. If not, then the entire
     * userinfo is considered the user.
     * @returns @uri's user.
     */
    get_user(): string | null
    is_file(file: Gio.File): boolean
    /**
     * Parses `uri_string` according to `flags` and, if it is a relative
     * URI, merges it with `base_uri`. If the result is not a valid
     * absolute URI, it will be discarded, and an error returned.
     * @param uri_string a string representing a relative or absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    new_relative(uri_string: string | null, flags: UriParseFlags): Uri
    /**
     * Increments the reference count of `uri` by one.
     * @returns uri
     */
    ref(): Uri
    /**
     * Sets `uri'`s authentication parameters to `auth_params`.
     * @param auth_params the authentication parameters, or %NULL
     */
    set_auth_params(auth_params: string | null): void
    /**
     * Sets `uri'`s fragment to `fragment,` which is assumed to have been
     * %<!-- -->-encoded by the caller. See ide_uri_set_path() for more
     * details.
     * @param fragment the (%<!-- -->-encoded) fragment
     */
    set_fragment(fragment: string | null): void
    /**
     * Sets `uri'`s host to `host`.
     * 
     * If `host` is an IPv6 IP address, it should not include the brackets
     * required by the URI syntax; they will be added automatically when
     * converting `uri` to a string.
     * @param host the hostname or IP address, or %NULL
     */
    set_host(host: string | null): void
    /**
     * Sets `uri'`s password to `password`.
     * @param password the password, or %NULL
     */
    set_password(password: string | null): void
    /**
     * Sets `uri'`s path to `path,` which is assumed to have been
     * appropriately %<!-- -->-encoded. In particular, this means that if
     * you want to include a literal percent sign the path, you must write
     * it as "%<!-- -->25". That being said, if `path` contains an
     * unencoded '?' or '#' character, it will get encoded, since
     * otherwise converting `uri` to a string and then back to a #IdeUri
     * again would give a different result.
     * @param path the (%<!-- -->-encoded) path
     */
    set_path(path: string | null): void
    /**
     * Sets `uri'`s port to `port`. If `port` is 0, it will not be output
     * when calling ide_uri_to_string().
     * @param port the port, or %0
     */
    set_port(port: number): void
    /**
     * Sets `uri'`s query to `query,` which is assumed to have been
     * %<!-- -->-encoded by the caller. See ide_uri_set_path() for more
     * details.
     * @param query the (%<!-- -->-encoded) query
     */
    set_query(query: string | null): void
    /**
     * Sets `uri'`s scheme to `scheme`.
     * @param scheme the URI scheme
     */
    set_scheme(scheme: string | null): void
    /**
     * Sets `uri'`s user to `user`. See ide_uri_get_user() for a description
     * of how this interacts with various parsing flags.
     * @param user the username, or %NULL
     */
    set_user(user: string | null): void
    /**
     * Creates a #GFile that represents the resource `uri`.
     * @returns A #GFile or %NULL upon failure.
     */
    to_file(): Gio.File | null
    /**
     * Returns a string representing `uri`.
     * @param flags flags describing how to convert `uri`
     * @returns a string representing @uri, which the caller must free.
     */
    to_string(flags: UriToStringFlags): string | null
    /**
     * Decrements the reference count of `uri` by 1. If the reference count
     * reaches zero, the structure will be freed.
     */
    unref(): void
}

/**
 * FIXME
 * @record 
 */
class Uri {

    // Own properties of Ide-1.0.Ide.Uri

    static name: string

    // Constructors of Ide-1.0.Ide.Uri

    /**
     * Parses `uri_string` according to `flags`. If the result is not a
     * valid absolute URI, it will be discarded, and an error returned.
     * @constructor 
     * @param uri_string a string representing an absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    constructor(uri_string: string | null, flags: UriParseFlags) 
    /**
     * Parses `uri_string` according to `flags`. If the result is not a
     * valid absolute URI, it will be discarded, and an error returned.
     * @constructor 
     * @param uri_string a string representing an absolute URI
     * @param flags flags describing how to parse `uri_string`
     * @returns a new #IdeUri.
     */
    static new(uri_string: string | null, flags: UriParseFlags): Uri
    /**
     * Creates a new #IdeUri from the uri provided by `file`.
     * @constructor 
     * @param file A #GFile.
     * @returns A newly allcoated #IdeUri.
     */
    static new_from_file(file: Gio.File): Uri
    static build(scheme: string | null, userinfo: string | null, host: string | null, port: string | null, path: string | null, query: string | null, fragment: string | null): string | null
    static error_quark(): GLib.Quark
    /**
     * Utility function for parsing "network" URIs. This extracts just the
     * scheme, host, and port from `uri_string`. All three out parameters
     * are mandatory.
     * @param uri_string a string containing a network URI
     * @param flags flags for parsing `uri_string`
     * @returns %TRUE on success, %FALSE on failure.
     */
    static parse_host(uri_string: string | null, flags: UriParseFlags): [ /* returnType */ boolean, /* scheme */ string | null, /* host */ string | null, /* port */ number ]
    /**
     * Many URI schemes include one or more attribute/value pairs
     * as part of the URI value. This method can be used to parse them
     * into a hash table.
     * 
     * The `params` string is assumed to still be %<!-- -->-encoded, but
     * the returned values will be fully decoded. (Thus it is possible
     * that the returned values may contain '=' or `separator,` if the
     * value was encoded in the input.) Invalid %<!-- -->-encoding is
     * treated as with the non-%IDE_URI_PARSE_STRICT rules for ide_uri_new().
     * (However, if `params` is the path or query string from a #IdeUri that
     * was parsed with %IDE_URI_PARSE_STRICT, then you already know that it
     * does not contain any invalid encoding.)
     * @param params a string containing "attribute=value" parameters
     * @param length the length of `params,` or -1 if it is NUL-terminated
     * @param separator the separator character between parameters.   (usually ';', but sometimes '&')
     * @param case_insensitive whether to match parameter names case-insensitively
     * @returns a hash table of attribute/value pairs. Both names and values will be fully-decoded. If @params cannot be parsed (eg, it contains two @separator characters in a row), then %NULL is returned.
     */
    static parse_params(params: string | null, length: number, separator: number, case_insensitive: boolean): GLib.HashTable
    /**
     * Parses `uri_string` more-or-less according to the generic grammar of
     * RFC 3986 ("more" if `strict` is %TRUE, "less" if %FALSE), and
     * outputs the pieces into the provided variables. This is a low-level
     * method that does not do any pre- or post-processing of `uri_string,`
     * and is "garbage in, garbage out"; it just splits `uri_string` into
     * pieces at the appropriate punctuation characters (consuming
     * delimiters as appropriate), and returns the pieces. Components that
     * are not present in `uri_string` will be set to %NULL (but note that
     * the path is always present, though it may be an empty string).
     * @param uri_string a string containing a relative or absolute URI
     * @param strict whether to parse `uri_string` strictly
     */
    static split(uri_string: string | null, strict: boolean): [ /* scheme */ string | null, /* userinfo */ string | null, /* host */ string | null, /* port */ string | null, /* path */ string | null, /* query */ string | null, /* fragment */ string | null ]
}

interface VcsConfigInterface {

    // Own fields of Ide-1.0.Ide.VcsConfigInterface

    parent: GObject.TypeInterface
    get_config: (self: VcsConfig, type: VcsConfigType, value: any) => void
    set_config: (self: VcsConfig, type: VcsConfigType, value: any) => void
}

abstract class VcsConfigInterface {

    // Own properties of Ide-1.0.Ide.VcsConfigInterface

    static name: string
}

interface VcsInitializerInterface {

    // Own fields of Ide-1.0.Ide.VcsInitializerInterface

    parent: GObject.TypeInterface
    get_title: (self: VcsInitializer) => string | null
    initialize_async: (self: VcsInitializer, file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    initialize_finish: (self: VcsInitializer, result: Gio.AsyncResult) => boolean
}

abstract class VcsInitializerInterface {

    // Own properties of Ide-1.0.Ide.VcsInitializerInterface

    static name: string
}

interface VcsInterface {

    // Own fields of Ide-1.0.Ide.VcsInterface

    parent_interface: GObject.TypeInterface
    get_working_directory: (self: Vcs) => Gio.File
    get_buffer_change_monitor: (self: Vcs, buffer: Buffer) => BufferChangeMonitor | null
    is_ignored: (self: Vcs, file: Gio.File) => boolean
    get_priority: (self: Vcs) => number
    changed: (self: Vcs) => void
    get_config: (self: Vcs) => VcsConfig | null
    get_branch_name: (self: Vcs) => string | null
}

abstract class VcsInterface {

    // Own properties of Ide-1.0.Ide.VcsInterface

    static name: string
}

interface VcsUri {

    // Owm methods of Ide-1.0.Ide.VcsUri

    get_host(): string | null
    get_path(): string | null
    get_port(): number
    get_scheme(): string | null
    get_user(): string | null
    ref(): VcsUri
    set_host(host: string | null): void
    set_path(path: string | null): void
    set_port(port: number): void
    set_scheme(scheme: string | null): void
    set_user(user: string | null): void
    to_string(): string | null
    unref(): void
}

class VcsUri {

    // Own properties of Ide-1.0.Ide.VcsUri

    static name: string

    // Constructors of Ide-1.0.Ide.VcsUri

    constructor(uri: string | null) 
    static new(uri: string | null): VcsUri
    static is_valid(uri_string: string | null): boolean
}

interface WorkbenchAddinInterface {

    // Own fields of Ide-1.0.Ide.WorkbenchAddinInterface

    parent: GObject.TypeInterface
    get_id: (self: WorkbenchAddin) => string | null
    load: (self: WorkbenchAddin, workbench: Workbench) => void
    unload: (self: WorkbenchAddin, workbench: Workbench) => void
    can_open: (self: WorkbenchAddin, uri: Uri, content_type: string | null) => [ /* returnType */ boolean, /* priority */ number ]
    open_async: (self: WorkbenchAddin, uri: Uri, content_type: string | null, flags: WorkbenchOpenFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null) => void
    open_finish: (self: WorkbenchAddin, result: Gio.AsyncResult) => boolean
    perspective_set: (self: WorkbenchAddin, perspective: Perspective) => void
}

abstract class WorkbenchAddinInterface {

    // Own properties of Ide-1.0.Ide.WorkbenchAddinInterface

    static name: string
}

interface WorkbenchClass {

    // Own fields of Ide-1.0.Ide.WorkbenchClass

    parent_class: Gtk.ApplicationWindowClass
}

abstract class WorkbenchClass {

    // Own properties of Ide-1.0.Ide.WorkbenchClass

    static name: string
}

interface WorkbenchHeaderBarClass {

    // Own fields of Ide-1.0.Ide.WorkbenchHeaderBarClass

    parent: Gtk.HeaderBarClass
    _reserved1: any
    _reserved2: any
    _reserved3: any
    _reserved4: any
    _reserved5: any
    _reserved6: any
    _reserved7: any
    _reserved8: any
}

abstract class WorkbenchHeaderBarClass {

    // Own properties of Ide-1.0.Ide.WorkbenchHeaderBarClass

    static name: string
}

interface WorkbenchMessageClass {

    // Own fields of Ide-1.0.Ide.WorkbenchMessageClass

    parent_class: Gtk.InfoBarClass
}

abstract class WorkbenchMessageClass {

    // Own properties of Ide-1.0.Ide.WorkbenchMessageClass

    static name: string
}

interface WorkerInterface {

    // Own fields of Ide-1.0.Ide.WorkerInterface

    parent: GObject.TypeInterface
    create_proxy: (self: Worker, connection: Gio.DBusConnection) => Gio.DBusProxy
    register_service: (self: Worker, connection: Gio.DBusConnection) => void
}

abstract class WorkerInterface {

    // Own properties of Ide-1.0.Ide.WorkerInterface

    static name: string
}

/**
 * Name of the imported GIR library
 * @see https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L188
 */
const __name__: string
/**
 * Version of the imported GIR library
 * @see https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L189
 */
const __version__: string
}

export default Ide;
// END