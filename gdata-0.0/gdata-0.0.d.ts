/**
 * Type Definitions for Gjs (https://gjs.guide/)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in `ts-for-gir` or create a bug report on https://github.com/gjsify/ts-for-gir
 *
 * The based EJS template file is used for the generated .d.ts file of each GIR module like Gtk-4.0, GObject-2.0, ...
 */

// Module dependencies
import type libxml2 from '@girs/libxml2-2.0';
import type Soup from '@girs/soup-2.4';
import type Gio from '@girs/gio-2.0';
import type GObject from '@girs/gobject-2.0';
import type GLib from '@girs/glib-2.0';
import type GModule from '@girs/gmodule-2.0';
import type Json from '@girs/json-1.0';
import type Goa from '@girs/goa-1.0';

export namespace GData {
    /**
     * GData-0.0
     */

    /**
     * Indicates which type of batch operation caused the current #GDataBatchOperationCallback to be called.
     */

    /**
     * Indicates which type of batch operation caused the current #GDataBatchOperationCallback to be called.
     */
    export namespace BatchOperationType {
        export const $gtype: GObject.GType<BatchOperationType>;
    }

    enum BatchOperationType {
        /**
         * a query operation
         */
        QUERY,
        /**
         * an insertion operation
         */
        INSERTION,
        /**
         * an update operation
         */
        UPDATE,
        /**
         * a deletion operation
         */
        DELETION,
    }
    /**
     * Error codes for #GDataDocumentsService operations.
     */
    class DocumentsServiceError extends GLib.Error {
        static $gtype: GObject.GType<DocumentsServiceError>;

        // Static fields

        /**
         * the content type of a provided file was invalid
         */
        static TYPE: number;

        // Constructors

        constructor(options: { message: string; code: number });
        _init(...args: any[]): void;

        // Static methods

        static quark(): GLib.Quark;
    }

    /**
     * An enum representing the possible values of #GDataMediaContent:expression.
     */

    /**
     * An enum representing the possible values of #GDataMediaContent:expression.
     */
    export namespace MediaExpression {
        export const $gtype: GObject.GType<MediaExpression>;
    }

    enum MediaExpression {
        /**
         * the media is a sample of a larger video
         */
        SAMPLE,
        /**
         * the media is the full version
         */
        FULL,
        /**
         * the media is a continuous stream
         */
        NONSTOP,
    }
    /**
     * An enum representing the possible values of #GDataMediaContent:medium.
     */

    /**
     * An enum representing the possible values of #GDataMediaContent:medium.
     */
    export namespace MediaMedium {
        export const $gtype: GObject.GType<MediaMedium>;
    }

    enum MediaMedium {
        /**
         * the type of the media is unknown
         */
        UNKNOWN,
        /**
         * the media is an image
         */
        IMAGE,
        /**
         * the media is an audio stream
         */
        AUDIO,
        /**
         * the media is a video
         */
        VIDEO,
        /**
         * the media is another type of document
         */
        DOCUMENT,
        /**
         * the media is an executable file
         */
        EXECUTABLE,
    }
    /**
     * Representations of the different operations performed by the library.
     */

    /**
     * Representations of the different operations performed by the library.
     */
    export namespace OperationType {
        export const $gtype: GObject.GType<OperationType>;
    }

    enum OperationType {
        /**
         * a query
         */
        QUERY,
        /**
         * an insertion of a #GDataEntry
         */
        INSERTION,
        /**
         * an update of a #GDataEntry
         */
        UPDATE,
        /**
         * a deletion of a #GDataEntry
         */
        DELETION,
        /**
         * a download of a file
         */
        DOWNLOAD,
        /**
         * an upload of a file
         */
        UPLOAD,
        /**
         * authentication with the service
         */
        AUTHENTICATION,
        /**
         * a batch operation with #GDataBatchOperation
         */
        BATCH,
    }
    /**
     * Error codes for XML or JSON parsing operations.
     */
    class ParserError extends GLib.Error {
        static $gtype: GObject.GType<ParserError>;

        // Static fields

        /**
         * Error parsing the XML or JSON syntax itself
         */
        static PARSING_STRING: number;
        /**
         * Empty document
         */
        static EMPTY_DOCUMENT: number;

        // Constructors

        constructor(options: { message: string; code: number });
        _init(...args: any[]): void;

        // Static methods

        static quark(): GLib.Quark;
    }

    /**
     * Visibility statuses available for albums on PicasaWeb. For more information, see the
     * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Visibility">online documentation</ulink>.
     */

    /**
     * Visibility statuses available for albums on PicasaWeb. For more information, see the
     * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Visibility">online documentation</ulink>.
     */
    export namespace PicasaWebVisibility {
        export const $gtype: GObject.GType<PicasaWebVisibility>;
    }

    enum PicasaWebVisibility {
        /**
         * the album is visible to everyone, regardless of whether they're authenticated
         */
        PUBLIC,
        /**
         * the album is visible only to authenticated users in an allowlist
         */
        PRIVATE,
    }
    /**
     * Error codes for #GDataService operations.
     */
    class ServiceError extends GLib.Error {
        static $gtype: GObject.GType<ServiceError>;

        // Static fields

        /**
         * The service is unavailable due to maintenance or other reasons (e.g. network errors at the server end)
         */
        static UNAVAILABLE: number;
        /**
         * The client or server unexpectedly strayed from the protocol (fatal error)
         */
        static PROTOCOL_ERROR: number;
        /**
         * An entry has already been inserted, and cannot be re-inserted
         */
        static ENTRY_ALREADYSERTED: number;
        /**
         * The user attempted to do something which required authentication, and they weren't authenticated or
         * didn't have authorization for the operation
         */
        static AUTHENTICATION_REQUIRED: number;
        /**
         * A requested resource (feed or entry) was not found on the server
         */
        static NOT_FOUND: number;
        /**
         * There was a conflict when updating an entry on the server; the server-side copy was modified between downloading
         * and uploading the modified entry
         */
        static CONFLICT: number;
        /**
         * Generic error for a forbidden action (not due to having insufficient permissions)
         */
        static FORBIDDEN: number;
        /**
         * A given query parameter was invalid for the query type
         */
        static BAD_QUERY_PARAMETER: number;
        /**
         * The service is unavailable due to local network errors (e.g. no Internet connection)
         */
        static NETWORK_ERROR: number;
        /**
         * The service is unavailable due to proxy network errors (e.g. proxy unreachable)
         */
        static PROXY_ERROR: number;
        /**
         * Generic error when running a batch operation and the whole operation fails
         */
        static WITH_BATCH_OPERATION: number;
        /**
         * The API request quota for this
         * developer account has been exceeded for the current time period (e.g. day).
         * Try again later. (Since: 0.16.0.)
         */
        static API_QUOTA_EXCEEDED: number;

        // Constructors

        constructor(options: { message: string; code: number });
        _init(...args: any[]): void;

        // Static methods

        static quark(): GLib.Quark;
    }

    /**
     * Video ages, allowing queries to be limited to videos uploaded in a recent time period.
     */

    /**
     * Video ages, allowing queries to be limited to videos uploaded in a recent time period.
     */
    export namespace YouTubeAge {
        export const $gtype: GObject.GType<YouTubeAge>;
    }

    enum YouTubeAge {
        /**
         * retrieve all videos, regardless of the date they were uploaded
         */
        ALL_TIME,
        /**
         * retrieve only videos uploaded in the past day
         */
        TODAY,
        /**
         * retrieve only videos uploaded in the past week
         */
        THIS_WEEK,
        /**
         * retrieve only videos uploaded in the past month
         */
        THIS_MONTH,
    }
    /**
     * Permissions for actions which can be set on a #GDataYouTubeVideo using gdata_youtube_video_set_access_control().
     *
     * The only actions which can have the %GDATA_YOUTUBE_PERMISSION_MODERATED permission are
     * %GDATA_YOUTUBE_ACTION_RATE and %GDATA_YOUTUBE_ACTION_COMMENT.
     */

    /**
     * Permissions for actions which can be set on a #GDataYouTubeVideo using gdata_youtube_video_set_access_control().
     *
     * The only actions which can have the %GDATA_YOUTUBE_PERMISSION_MODERATED permission are
     * %GDATA_YOUTUBE_ACTION_RATE and %GDATA_YOUTUBE_ACTION_COMMENT.
     */
    export namespace YouTubePermission {
        export const $gtype: GObject.GType<YouTubePermission>;
    }

    enum YouTubePermission {
        /**
         * the action is allowed for everyone
         */
        ALLOWED,
        /**
         * the action is denied for everyone
         */
        DENIED,
        /**
         * the action is moderated by the video owner
         */
        MODERATED,
    }
    /**
     * Safe search levels for removing restricted entries from query results. For more information, see the
     * <ulink type="http" url="https://developers.google.com/youtube/v3/docs/search/list#safeSearch">online documentation</ulink>.
     */

    /**
     * Safe search levels for removing restricted entries from query results. For more information, see the
     * <ulink type="http" url="https://developers.google.com/youtube/v3/docs/search/list#safeSearch">online documentation</ulink>.
     */
    export namespace YouTubeSafeSearch {
        export const $gtype: GObject.GType<YouTubeSafeSearch>;
    }

    enum YouTubeSafeSearch {
        /**
         * YouTube will not perform any filtering on the search result set
         */
        NONE,
        /**
         * YouTube will filter some content from search results and, at the least,
         * will filter content that is restricted in your locale
         */
        MODERATE,
        /**
         * YouTube will try to exclude all restricted content from the search result set
         */
        STRICT,
    }
    /**
     * Error codes for #GDataYouTubeService operations.
     */
    class YouTubeServiceError extends GLib.Error {
        static $gtype: GObject.GType<YouTubeServiceError>;

        // Static fields

        /**
         * the API request quota for this developer account has been exceeded
         */
        static API_QUOTA_EXCEEDED: number;
        /**
         * the entry (e.g. video) quota for this user account has been exceeded
         */
        static ENTRY_QUOTA_EXCEEDED: number;
        /**
         * the currently authenticated user doesn't have a YouTube channel, but the current action requires one;
         * if this error is received, inform the user that they need a YouTube channel, and provide a link to
         * <ulink type="http" url="https://www.youtube.com/create_channel">https://www.youtube.com/create_channel</ulink>
         */
        static CHANNEL_REQUIRED: number;

        // Constructors

        constructor(options: { message: string; code: number });
        _init(...args: any[]): void;

        // Static methods

        static quark(): GLib.Quark;
    }

    /**
     * Standard feed types for standard feed queries with
     * gdata_youtube_service_query_standard_feed(). For more information, see the
     * <ulink type="http" url="https://developers.google.com/youtube/2.0/developers_guide_protocol_video_feeds#Standard_feeds">online
     * documentation</ulink>.
     */

    /**
     * Standard feed types for standard feed queries with
     * gdata_youtube_service_query_standard_feed(). For more information, see the
     * <ulink type="http" url="https://developers.google.com/youtube/2.0/developers_guide_protocol_video_feeds#Standard_feeds">online
     * documentation</ulink>.
     */
    export namespace YouTubeStandardFeedType {
        export const $gtype: GObject.GType<YouTubeStandardFeedType>;
    }

    enum YouTubeStandardFeedType {
        /**
         * This feed contains the most popular YouTube
         *   videos, selected using an algorithm that combines many different signals to
         *   determine overall popularity. As of version 0.17.0, this is the only
         *   supported feed type.
         */
        FEED,
    }
    /**
     * The users specified by the #GDataAccessRule have no rights.
     */
    const ACCESS_ROLE_NONE: string;
    /**
     * The #GDataAccessRule applies to all users.
     */
    const ACCESS_SCOPE_DEFAULT: string;
    /**
     * The #GDataAccessRule applies to all users in a Google Apps For Your Domain domain, given in #GDataAccessRule:scope-value.
     */
    const ACCESS_SCOPE_DOMAIN: string;
    /**
     * The #GDataAccessRule applies to a single individual, whose e-mail address is given in #GDataAccessRule:scope-value.
     */
    const ACCESS_SCOPE_USER: string;
    /**
     * The users specified by the #GDataCalendarAccessRule have full edit access to
     * the calendar, except they can’t change the calendar’s access rules.
     */
    const CALENDAR_ACCESS_ROLE_EDITOR: string;
    /**
     * The users specified by the #GDataCalendarAccessRule can only see the
     * free/busy information on the calendar; not event details.
     */
    const CALENDAR_ACCESS_ROLE_FREE_BUSY: string;
    /**
     * The users specified by the #GDataCalendarAccessRule have full owner access
     * to the calendar.
     */
    const CALENDAR_ACCESS_ROLE_OWNER: string;
    /**
     * The users specified by the #GDataCalendarAccessRule have read-only access to
     * the calendar.
     */
    const CALENDAR_ACCESS_ROLE_READ: string;
    /**
     * The users specified by the #GDataCalendarAccessRule have full administrator
     * access to the calendar server. This is only available in Google Apps For
     * Your Domain.
     */
    const CALENDAR_ACCESS_ROLE_ROOT: string;
    /**
     * A schema for categories which label the entry they're applied to in some way, such as starring it. The semantics of the various labels
     * (such as %GDATA_CATEGORY_SCHEMA_LABELS_STARRED) are service-specific.
     */
    const CATEGORY_SCHEMA_LABELS: string;
    /**
     * The users specified by the #GDataAccessRule have full owner access to the document. This allows them to modify the access rules and delete
     * the document, amongst other things.
     */
    const DOCUMENTS_ACCESS_ROLE_OWNER: string;
    /**
     * The users specified by the #GDataAccessRule have read-only access to the document.
     */
    const DOCUMENTS_ACCESS_ROLE_READER: string;
    /**
     * The users specified by the #GDataAccessRule have write access to the document. They cannot modify the access rules or delete the document.
     */
    const DOCUMENTS_ACCESS_ROLE_WRITER: string;
    /**
     * The export format for JPEG image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_drawings">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_DRAWING_JPEG: string;
    /**
     * The export format for Portable Document Format (PDF).
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_drawings">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_DRAWING_PDF: string;
    /**
     * The export format for Portable Network Graphics (PNG) image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_drawings">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_DRAWING_PNG: string;
    /**
     * The export format for Scalable Vector Graphics (SVG) image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_drawings">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_DRAWING_SVG: string;
    /**
     * The export format for Portable Document Format (PDF).
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_presentations">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_PRESENTATION_PDF: string;
    /**
     * The export format for Portable Network Graphics (PNG) image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_presentations">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_PRESENTATION_PNG: string;
    /**
     * The export format for Microsoft PowerPoint (PPT) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_presentations">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_PRESENTATION_PPT: string;
    /**
     * The export format for plain text format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_presentations">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_PRESENTATION_TXT: string;
    /**
     * The #GDataDocumentsProperty having the visibility set to FALSE (default) corresponds to having the visibility property on a Drive Property Resource
     * set to "PRIVATE". This makes the Property Resource accessible only by the app that created it.
     */
    const DOCUMENTS_PROPERTY_VISIBILITY_PRIVATE: string;
    /**
     * The #GDataDocumentsProperty having the visibility set to TRUE corresponds to having the visibility property
     * on a Drive Property Resource
     * set to "PUBLIC". This makes the Property Resource visible to other apps.
     */
    const DOCUMENTS_PROPERTY_VISIBILITY_PUBLIC: string;
    /**
     * The export format for Comma-Separated Values (CSV) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_CSV: string;
    /**
     * The export format for HyperText Markup Language (HTML) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_HTML: string;
    /**
     * The export format for OpenDocument Spreadsheet (ODS) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_ODS: string;
    /**
     * The export format for Portable Document Format (PDF).
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_PDF: string;
    /**
     * The export format for Tab-Separated Values (TSV) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_TSV: string;
    /**
     * The export format for Microsoft Excel spreadsheet (XLS) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_formats_for_spreadsheets">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_SPREADSHEET_XLS: string;
    /**
     * The export format for Microsoft Word (DOC) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_DOC: string;
    /**
     * The export format for HyperText Markup Language (HTML) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_HTML: string;
    /**
     * The export format for JPEG image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_JPEG: string;
    /**
     * The export format for OpenDocument Text (ODT) format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_ODT: string;
    /**
     * The export format for Portable Document Format (PDF).
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_PDF: string;
    /**
     * The export format for Portable Network Graphics (PNG) image format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_PNG: string;
    /**
     * The export format for Rich Text Format (RTF).
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_RTF: string;
    /**
     * The export format for plain text format.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_TXT: string;
    /**
     * The export format for a ZIP archive containing images and exported HTML.
     *
     * For more information, see the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#valid_download_formats_for_text_documents">
     * GData protocol specification</ulink>.
     */
    const DOCUMENTS_TEXT_ZIP: string;
    /**
     * The relation type URI for a contact's free/busy calendar.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">
     * gContact specification</ulink>.
     */
    const GCONTACT_CALENDAR_FREE_BUSY: string;
    /**
     * The relation type URI for a contact's home calendar.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">
     * gContact specification</ulink>.
     */
    const GCONTACT_CALENDAR_HOME: string;
    /**
     * The relation type URI for a contact's work calendar.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">
     * gContact specification</ulink>.
     */
    const GCONTACT_CALENDAR_WORK: string;
    /**
     * The relation type URI for an anniversary event.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">
     * gContact specification</ulink>.
     */
    const GCONTACT_EVENT_ANNIVERSARY: string;
    /**
     * The relation type URI for a miscellaneous event.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">
     * gContact specification</ulink>.
     */
    const GCONTACT_EVENT_OTHER: string;
    /**
     * The relation type URI for an account number identifier.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">
     * gContact specification</ulink>.
     */
    const GCONTACT_EXTERNAL_ID_ACCOUNT: string;
    /**
     * The relation type URI for a customer identifier.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">
     * gContact specification</ulink>.
     */
    const GCONTACT_EXTERNAL_ID_CUSTOMER: string;
    /**
     * The relation type URI for a network identifier.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">
     * gContact specification</ulink>.
     */
    const GCONTACT_EXTERNAL_ID_NETWORK: string;
    /**
     * The relation type URI for an identifier related to an organization the contact is associated with.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">
     * gContact specification</ulink>.
     */
    const GCONTACT_EXTERNAL_ID_ORGANIZATION: string;
    /**
     * The relation type URI for a jot about a contact's home.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">
     * gContact specification</ulink>.
     */
    const GCONTACT_JOT_HOME: string;
    /**
     * The relation type URI for a jot with keywords about a contact.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">
     * gContact specification</ulink>.
     */
    const GCONTACT_JOT_KEYWORDS: string;
    /**
     * The relation type URI for a jot about an other facet of a contact.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">
     * gContact specification</ulink>.
     */
    const GCONTACT_JOT_OTHER: string;
    /**
     * The relation type URI for a jot about the relationship between a contact and the user.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">
     * gContact specification</ulink>.
     */
    const GCONTACT_JOT_USER: string;
    /**
     * The relation type URI for a jot about a contact's work.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">
     * gContact specification</ulink>.
     */
    const GCONTACT_JOT_WORK: string;
    /**
     * The relation type URI for a contact's assistant.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_ASSISTANT: string;
    /**
     * The relation type URI for a contact's brother.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_BROTHER: string;
    /**
     * The relation type URI for a contact's child.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_CHILD: string;
    /**
     * The relation type URI for a contact's domestic partner.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_DOMESTIC_PARTNER: string;
    /**
     * The relation type URI for a contact's father.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_FATHER: string;
    /**
     * The relation type URI for a contact's friend.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_FRIEND: string;
    /**
     * The relation type URI for a contact's manager.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_MANAGER: string;
    /**
     * The relation type URI for a contact's mother.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_MOTHER: string;
    /**
     * The relation type URI for a contact's parent.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_PARENT: string;
    /**
     * The relation type URI for a contact's business partner.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_PARTNER: string;
    /**
     * The relation type URI for a contact's referrer.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_REFERRER: string;
    /**
     * The relation type URI for a contact's (general) family relative.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_RELATIVE: string;
    /**
     * The relation type URI for a contact's sister.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_SISTER: string;
    /**
     * The relation type URI for a contact's spouse.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">
     * gContact specification</ulink>.
     */
    const GCONTACT_RELATION_SPOUSE: string;
    /**
     * The relation type URI for a contact's blog.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_BLOG: string;
    /**
     * The relation type URI for a contact's FTP site.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_FTP: string;
    /**
     * The relation type URI for a contact's home website.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_HOME: string;
    /**
     * The relation type URI for a contact's home page.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_HOME_PAGE: string;
    /**
     * The relation type URI for a miscellaneous website of the contact.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_OTHER: string;
    /**
     * The relation type URI for a contact's online profile.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_PROFILE: string;
    /**
     * The relation type URI for a contact's work website.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">
     * gContact specification</ulink>.
     */
    const GCONTACT_WEBSITE_WORK: string;
    /**
     * The address is for general usage. Value for #GDataGDPostalAddress:usage.
     */
    const GD_ADDRESS_USAGE_GENERAL: string;
    /**
     * The address is for local usage. Value for #GDataGDPostalAddress:usage.
     */
    const GD_ADDRESS_USAGE_LOCAL: string;
    /**
     * The relation type URI for a home e-mail address.
     */
    const GD_EMAIL_ADDRESS_HOME: string;
    /**
     * The relation type URI for a miscellaneous e-mail address.
     */
    const GD_EMAIL_ADDRESS_OTHER: string;
    /**
     * The relation type URI for a work e-mail address.
     */
    const GD_EMAIL_ADDRESS_WORK: string;
    /**
     * The event has been canceled.
     */
    const GD_EVENT_STATUS_CANCELED: string;
    /**
     * The event has been planned and confirmed.
     */
    const GD_EVENT_STATUS_CONFIRMED: string;
    /**
     * The event has been planned, but only tentatively scheduled.
     */
    const GD_EVENT_STATUS_TENTATIVE: string;
    /**
     * The event consumes time in calendars; its time will be marked as busy in a free/busy search.
     */
    const GD_EVENT_TRANSPARENCY_OPAQUE: string;
    /**
     * The event does not consume time in calendars; its time will be not marked as busy in a free/busy search.
     */
    const GD_EVENT_TRANSPARENCY_TRANSPARENT: string;
    /**
     * The event is visible to only certain people.
     */
    const GD_EVENT_VISIBILITY_CONFIDENTIAL: string;
    /**
     * The event's visibility is inherited from the preferences of its owner.
     */
    const GD_EVENT_VISIBILITY_DEFAULT: string;
    /**
     * The event is visible to very few people.
     */
    const GD_EVENT_VISIBILITY_PRIVATE: string;
    /**
     * The event is visible to most people.
     */
    const GD_EVENT_VISIBILITY_PUBLIC: string;
    /**
     * The relation type URI for a home IM address.
     */
    const GD_IM_ADDRESS_HOME: string;
    /**
     * The relation type URI for a Microsoft NetMeeting IM address.
     */
    const GD_IM_ADDRESS_NETMEETING: string;
    /**
     * The relation type URI for a miscellaneous IM address.
     */
    const GD_IM_ADDRESS_OTHER: string;
    /**
     * The relation type URI for a work IM address.
     */
    const GD_IM_ADDRESS_WORK: string;
    /**
     * The protocol type URI for an AIM IM address.
     */
    const GD_IM_PROTOCOL_AIM: string;
    /**
     * The protocol type URI for a Google Talk IM address.
     */
    const GD_IM_PROTOCOL_GOOGLE_TALK: string;
    /**
     * The protocol type URI for an ICQ IM address.
     */
    const GD_IM_PROTOCOL_ICQ: string;
    /**
     * The protocol type URI for a Jabber IM address.
     */
    const GD_IM_PROTOCOL_JABBER: string;
    /**
     * The protocol type URI for an Windows Live Messenger IM address.
     */
    const GD_IM_PROTOCOL_LIVE_MESSENGER: string;
    /**
     * The protocol type URI for a QQ IM address.
     */
    const GD_IM_PROTOCOL_QQ: string;
    /**
     * The protocol type URI for a Skype IM address.
     */
    const GD_IM_PROTOCOL_SKYPE: string;
    /**
     * The protocol type URI for a Yahoo! Messenger IM address.
     */
    const GD_IM_PROTOCOL_YAHOO_MESSENGER: string;
    /**
     * Parcels and letters can be sent to the address. Value for #GDataGDPostalAddress:mail-class.
     */
    const GD_MAIL_CLASS_BOTH: string;
    /**
     * Only letters can be sent to the address. Value for #GDataGDPostalAddress:mail-class.
     */
    const GD_MAIL_CLASS_LETTERS: string;
    /**
     * Address is purely locational and cannot be used for mail. Value for #GDataGDPostalAddress:mail-class.
     */
    const GD_MAIL_CLASS_NEITHER: string;
    /**
     * Only parcels can be sent to the address. Value for #GDataGDPostalAddress:mail-class.
     */
    const GD_MAIL_CLASS_PARCELS: string;
    /**
     * The relation type URI for a miscellaneous organization.
     */
    const GD_ORGANIZATION_OTHER: string;
    /**
     * The relation type URI for a work organization.
     */
    const GD_ORGANIZATION_WORK: string;
    /**
     * The relation type URI for the phone number of an assistant.
     */
    const GD_PHONE_NUMBER_ASSISTANT: string;
    /**
     * The relation type URI for the phone number of a callback service.
     */
    const GD_PHONE_NUMBER_CALLBACK: string;
    /**
     * The relation type URI for the phone number of a car phone.
     */
    const GD_PHONE_NUMBER_CAR: string;
    /**
     * The relation type URI for the main phone number of a company.
     */
    const GD_PHONE_NUMBER_COMPANY_MAIN: string;
    /**
     * The relation type URI for the phone number of a fax machine.
     */
    const GD_PHONE_NUMBER_FAX: string;
    /**
     * The relation type URI for a home phone number.
     */
    const GD_PHONE_NUMBER_HOME: string;
    /**
     * The relation type URI for the phone number of a home fax machine.
     */
    const GD_PHONE_NUMBER_HOME_FAX: string;
    /**
     * The relation type URI for the phone number of an ISDN phone.
     */
    const GD_PHONE_NUMBER_ISDN: string;
    /**
     * The relation type URI for the main phone number of a person.
     */
    const GD_PHONE_NUMBER_MAIN: string;
    /**
     * The relation type URI for the phone number of a mobile phone.
     */
    const GD_PHONE_NUMBER_MOBILE: string;
    /**
     * The relation type URI for a miscellaneous phone number.
     */
    const GD_PHONE_NUMBER_OTHER: string;
    /**
     * The relation type URI for a miscellaneous fax machine's phone number.
     */
    const GD_PHONE_NUMBER_OTHER_FAX: string;
    /**
     * The relation type URI for the phone number of a pager.
     */
    const GD_PHONE_NUMBER_PAGER: string;
    /**
     * The relation type URI for the phone number of a radio phone.
     */
    const GD_PHONE_NUMBER_RADIO: string;
    /**
     * The relation type URI for the phone number of a telex machine.
     */
    const GD_PHONE_NUMBER_TELEX: string;
    /**
     * The relation type URI for the phone number of a TTY TTD.
     */
    const GD_PHONE_NUMBER_TTY_TDD: string;
    /**
     * The relation type URI for the phone number of a work place.
     */
    const GD_PHONE_NUMBER_WORK: string;
    /**
     * The relation type URI for the phone number of a work fax machine.
     */
    const GD_PHONE_NUMBER_WORK_FAX: string;
    /**
     * The relation type URI for the phone number of a work mobile phone.
     */
    const GD_PHONE_NUMBER_WORK_MOBILE: string;
    /**
     * The relation type URI for the phone number of a work pager.
     */
    const GD_PHONE_NUMBER_WORK_PAGER: string;
    /**
     * The relation type URI for the postal address of a home.
     */
    const GD_POSTAL_ADDRESS_HOME: string;
    /**
     * The relation type URI for a miscellaneous postal address.
     */
    const GD_POSTAL_ADDRESS_OTHER: string;
    /**
     * The relation type URI for the postal address of a workplace.
     */
    const GD_POSTAL_ADDRESS_WORK: string;
    /**
     * The #GDataGDReminder:method for an alert to appear in the user's browser.
     */
    const GD_REMINDER_ALERT: string;
    /**
     * The #GDataGDReminder:method for an alert to be sent to the user by e-mail.
     */
    const GD_REMINDER_EMAIL: string;
    /**
     * The #GDataGDReminder:method for an alert to be sent to the user by SMS.
     */
    const GD_REMINDER_SMS: string;
    /**
     * The relation type URI for an event location.
     */
    const GD_WHERE_EVENT: string;
    /**
     * The relation type URI for an alternate event location, such as a video conference site.
     */
    const GD_WHERE_EVENT_ALTERNATE: string;
    /**
     * The relation type URI for an event's parking lot.
     */
    const GD_WHERE_EVENT_PARKING: string;
    /**
     * The relation type URI for a general meeting or event attendee.
     */
    const GD_WHO_EVENT_ATTENDEE: string;
    /**
     * The relation type URI for an event organizer (not necessarily an attendee).
     */
    const GD_WHO_EVENT_ORGANIZER: string;
    /**
     * The relation type URI for an event performer, which is similar to %GDATA_GD_WHO_EVENT_SPEAKER, but with more emphasis on art rather than speaking.
     */
    const GD_WHO_EVENT_PERFORMER: string;
    /**
     * The relation type URI for a speaker at an event.
     */
    const GD_WHO_EVENT_SPEAKER: string;
    /**
     * The relation type URI of the access control list location for this resource.
     *
     * For more information, see the
     * <ulink type="http" url="http://code.google.com/apis/calendar/data/2.0/developers_guide_protocol.html#SharingACalendar">ACL specification</ulink>.
     */
    const LINK_ACCESS_CONTROL_LIST: string;
    /**
     * The relation type URI for alternate resources to the current one.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
     * Atom specification</ulink>.
     */
    const LINK_ALTERNATE: string;
    /**
     * The relation type URI for the batch operation URI for a given #GDataFeed.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/batch.html#Submit_HTTP">GData specification</ulink>.
     */
    const LINK_BATCH: string;
    /**
     * The relation type URI of the edit location for this resource.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php#new-link-relation">
     * Atom Publishing Protocol specification</ulink>.
     */
    const LINK_EDIT: string;
    /**
     * The relation type URI of the edit location for media resources attached to this resource.
     *
     * For more information, see the
     * <ulink type="http" url="http://www.atomenabled.org/developers/protocol/atom-protocol-spec.php#new-media-link-relation">
     * Atom Publishing Protocol specification</ulink>.
     */
    const LINK_EDIT_MEDIA: string;
    /**
     * The relation type URI for attached objects which may be large in size.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
     * Atom specification</ulink>.
     */
    const LINK_ENCLOSURE: string;
    /**
     * The relation type URI of the of the location of the parent resource in a
     * hierarchy of entries.
     *
     * This is an undocumented GData-specific addition to the Atom specification,
     * and is not included in the GData documentation except in examples and in the
     * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/v2/schema/document_list_atom.rnc">
     * RelaxNG schema</ulink>.
     */
    const LINK_PARENT: string;
    /**
     * The relation type URI for resources related to the current one.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
     * Atom specification</ulink>.
     */
    const LINK_RELATED: string;
    /**
     * The relation type URI of the resumable upload location for resources attached to this resource.
     *
     * For more information, see the
     * <ulink type="http" url="http://code.google.com/apis/gdata/docs/resumable_upload.html#ResumableUploadInitiate">GData resumable upload protocol
     * specification</ulink>.
     */
    const LINK_RESUMABLE_CREATE_MEDIA: string;
    /**
     * The relation type URI of the resumable update location for resources attached to this resource.
     *
     * For more information, see the
     * <ulink type="http" url="http://code.google.com/apis/gdata/docs/resumable_upload.html#ResumableUploadInitiate">GData resumable upload protocol
     * specification</ulink>.
     */
    const LINK_RESUMABLE_EDIT_MEDIA: string;
    /**
     * The relation type URI for the current resource.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
     * Atom specification</ulink>.
     */
    const LINK_SELF: string;
    /**
     * The relation type URI for the source document of the current resource.
     *
     * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
     * Atom specification</ulink>.
     */
    const LINK_VIA: string;
    /**
     * Evaluates to the major version of the GData headers at compile time.
     * (e.g. in libgdata version 1.2.3 this is 1).
     */
    const MAJOR_VERSION: number;
    /**
     * Evaluates to the micro version of the GData headers at compile time.
     * (e.g. in libgdata version 1.2.3 this is 3).
     */
    const MICRO_VERSION: number;
    /**
     * Evaluates to the minor version of the GData headers at compile time.
     * (e.g. in libgdata version 1.2.3 this is 2).
     */
    const MINOR_VERSION: number;
    /**
     * OAuth 2 redirect URI for out-of-band authorisation code transfer, where the
     * user is shown the authorisation code and asked to copy it.
     *
     * See
     * <ulink type="http" url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi">reference
     * documentation</ulink> for details.
     */
    const OAUTH2_REDIRECT_URI_OOB: string;
    /**
     * OAuth 2 redirect URI for out-of-band authorisation code transfer, where the
     * user is not shown the authorisation code or asked to copy it.
     *
     * See
     * <ulink type="http" url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi">reference
     * documentation</ulink> for details.
     */
    const OAUTH2_REDIRECT_URI_OOB_AUTO: string;
    /**
     * There was an error while processing or thumbnailing the video and it should be deleted.
     */
    const PICASAWEB_VIDEO_STATUS_FAILED: string;
    /**
     * The video has been processed and thumbnailed.
     */
    const PICASAWEB_VIDEO_STATUS_FINAL: string;
    /**
     * The video is still being processed.
     */
    const PICASAWEB_VIDEO_STATUS_PENDING: string;
    /**
     * The video has been processed, but still needs thumbnailing.
     */
    const PICASAWEB_VIDEO_STATUS_READY: string;
    /**
     * A value for #GDataTasksTask:status indicating the task has been completed.
     *
     * Reference:
     * <ulink type="http" url="https://developers.google.com/google-apps/tasks/v1/reference/tasks#status">
     * Google Tasks documentation</ulink>.
     */
    const TASKS_STATUS_COMPLETED: string;
    /**
     * A value for #GDataTasksTask:status indicating the task still needs action
     * before it is complete.
     *
     * Reference:
     * <ulink type="http" url="https://developers.google.com/google-apps/tasks/v1/reference/tasks#status">
     * Google Tasks documentation</ulink>.
     */
    const TASKS_STATUS_NEEDS_ACTION: string;
    /**
     * An action to comment on a video, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_COMMENT: string;
    /**
     * An action to rate other users' comments on a video, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_COMMENT_VOTE: string;
    /**
     * An action to embed a video on third-party websites, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_EMBED: string;
    /**
     * An action to rate a video, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_RATE: string;
    /**
     * An action allowing YouTube to show the video on mobile phones and televisions, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_SYNDICATE: string;
    /**
     * An action to add a video response to a video, for use with gdata_youtube_video_set_access_control().
     */
    const YOUTUBE_ACTION_VIDEO_RESPOND: string;
    /**
     * The aspect ratio for widescreen (16:9) videos.
     *
     * For more information, see the <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:aspectratio">
     * online documentation</ulink>.
     */
    const YOUTUBE_ASPECT_RATIO_WIDESCREEN: string;
    /**
     * Value for #GDataYouTubeQuery:license to restrict search results to only videos which are Creative Commons licensed. Specifically, the license
     * is the Creative Commons Attribution 3.0 Unported license; see the
     * <ulink type="http" url="http://www.google.com/support/youtube/bin/answer.py?hl=en&answer=1284989">YouTube Help</ulink> for more information.
     */
    const YOUTUBE_LICENSE_CC: string;
    /**
     * Value for #GDataYouTubeQuery:license to restrict search results to only videos which are under the standard YouTube license.
     */
    const YOUTUBE_LICENSE_STANDARD: string;
    /**
     * A rating type to pass to gdata_youtube_video_get_media_rating() for ratings by the <ulink type="http" url="http://www.mpaa.org/">MPAA</ulink>. The
     * values which can be returned for such ratings are: <code class="literal">g</code>, <code class="literal">pg</code>,
     * <code class="literal">pg-13</code>, <code class="literal">r</code> and <code class="literal">nc-17</code>.
     */
    const YOUTUBE_RATING_TYPE_MPAA: string;
    /**
     * A rating type to pass to gdata_youtube_video_get_media_rating() for ratings following the FCC
     * <ulink type="http" url="http://www.fcc.gov/vchip/">V-Chip</ulink> system. The values which can be returned for such ratings are:
     * <code class="literal">tv-y</code>, <code class="literal">tv-y7</code>, <code class="literal">tv-y7-fv</code>, <code class="literal">tv-g</code>,
     * <code class="literal">tv-pg</code>, <code class="literal">tv-14</code> and <code class="literal">tv-ma</code>.
     */
    const YOUTUBE_RATING_TYPE_V_CHIP: string;
    /**
     * Parses `hexadecimal` and returns a #GDataColor describing it in `color`.
     *
     * `hexadecimal` should be in the form <literal>#<replaceable>rr</replaceable><replaceable>gg</replaceable><replaceable>bb</replaceable></literal>,
     * where <replaceable>rr</replaceable> is a two-digit hexadecimal red intensity value, <replaceable>gg</replaceable> is green
     * and <replaceable>bb</replaceable> is blue. The hash is optional.
     * @param hexadecimal a hexadecimal color string
     * @returns %TRUE on success, %FALSE otherwise
     */
    function color_from_hexadecimal(hexadecimal: string): [boolean, Color];
    function documents_service_error_quark(): GLib.Quark;
    function parser_error_quark(): GLib.Quark;
    function service_error_quark(): GLib.Quark;
    function youtube_service_error_quark(): GLib.Quark;
    interface BatchOperationCallback {
        (operation_id: number, operation_type: BatchOperationType, entry: Entry, error: GLib.Error): void;
    }
    interface QueryProgressCallback {
        (entry: Entry, entry_key: number, entry_count: number): void;
    }
    module APPCategories {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            is_fixed: boolean;
            isFixed: boolean;
        }
    }

    /**
     * All the fields in the #GDataAPPCategories structure are private and should never be accessed directly.
     */
    class APPCategories extends Parsable {
        static $gtype: GObject.GType<APPCategories>;

        // Properties

        /**
         * Whether entries may use categories not in this category list.
         *
         * API reference: <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appCategories2">app:categories</ulink>
         */
        get is_fixed(): boolean;
        /**
         * Whether entries may use categories not in this category list.
         *
         * API reference: <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appCategories2">app:categories</ulink>
         */
        get isFixed(): boolean;

        // Constructors

        constructor(properties?: Partial<APPCategories.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Returns a list of the categories in this category list.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
    }

    module AccessRule {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            edited: number;
            key: string;
            role: string;
            scope_type: string;
            scopeType: string;
            scope_value: string;
            scopeValue: string;
        }
    }

    /**
     * All the fields in the #GDataAccessRule structure are private and should never be accessed directly.
     */
    class AccessRule extends Entry {
        static $gtype: GObject.GType<AccessRule>;

        // Properties

        /**
         * The last time the access rule was edited. If the rule has not been edited yet, the content indicates the time it was created.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appEdited">
         * Atom Publishing Protocol specification</ulink>.
         */
        get edited(): number;
        /**
         * An optional authorisation key required to access this item with the given scope. If set, this restricts
         * access to those principals who have a copy of the key. The key is generated server-side and cannot be
         * modified by the client. If no authorisation key is set (and hence none is needed for access to the item),
         * this will be %NULL.
         */
        get key(): string;
        /**
         * The role of the person concerned by this ACL. By default, this can only be %GDATA_ACCESS_ROLE_NONE. Services may extend it with
         * their own namespaced roles.
         */
        get role(): string;
        set role(val: string);
        /**
         * Specifies to whom this access rule applies. For example, %GDATA_ACCESS_SCOPE_USER or %GDATA_ACCESS_SCOPE_DEFAULT.
         */
        get scope_type(): string;
        set scope_type(val: string);
        /**
         * Specifies to whom this access rule applies. For example, %GDATA_ACCESS_SCOPE_USER or %GDATA_ACCESS_SCOPE_DEFAULT.
         */
        get scopeType(): string;
        set scopeType(val: string);
        /**
         * A value representing the user who is represented by the access rule, such as an
         * e-mail address for users, or a domain name for domains.
         *
         * This must be %NULL if and only if #GDataAccessRule:scope-type is %GDATA_ACCESS_SCOPE_DEFAULT.
         */
        get scope_value(): string;
        set scope_value(val: string);
        /**
         * A value representing the user who is represented by the access rule, such as an
         * e-mail address for users, or a domain name for domains.
         *
         * This must be %NULL if and only if #GDataAccessRule:scope-type is %GDATA_ACCESS_SCOPE_DEFAULT.
         */
        get scopeValue(): string;
        set scopeValue(val: string);

        // Constructors

        constructor(properties?: Partial<AccessRule.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id: string): AccessRule;
        // Conflicted with GData.Entry.new

        static ['new'](...args: never[]): any;

        // Methods

        /**
         * Gets the #GDataAccessRule:edited property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the access rule was last edited, or <code class="literal">-1</code>
         */
        get_edited(): number;
        /**
         * Gets the #GDataAccessRule:key property.
         * @returns the access rule's authorisation key, or %NULL
         */
        get_key(): string;
        /**
         * Gets the #GDataAccessRule:role property.
         * @returns the access rule's role, or %NULL
         */
        get_role(): string;
        /**
         * Gets the #GDataAccessRule:scope-type and #GDataAccessRule:scope-value properties.
         */
        get_scope(): [string, string];
        /**
         * Sets the #GDataAccessRule:role property to `role`. `role` must be a non-empty string, such as %GDATA_ACCESS_ROLE_NONE.
         *
         * Set `role` to %NULL to unset the property in the access rule.
         * @param role a new role, or %NULL
         */
        set_role(role: string): void;
        /**
         * Sets the #GDataAccessRule:scope-type property to `type` and the #GDataAccessRule:scope-value property to `value`.
         *
         * Set `scope_value` to %NULL to unset the #GDataAccessRule:scope-value property in the access rule. `type` cannot
         * be %NULL. `scope_value` must be %NULL if `type` is <literal>default</literal>, and non-%NULL otherwise.
         *
         * See the
         * <ulink type="http" url="https://developers.google.com/google-apps/calendar/v3/reference/acl">online
         * documentation</ulink> for more information.
         * @param type a new scope type
         * @param value a new scope value, or %NULL
         */
        set_scope(type: string, value?: string | null): void;
    }

    module Author {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            email_address: string;
            emailAddress: string;
            name: string;
            uri: string;
        }
    }

    /**
     * All the fields in the #GDataAuthor structure are private and should never be accessed directly.
     */
    class Author extends Parsable implements Comparable {
        static $gtype: GObject.GType<Author>;

        // Properties

        /**
         * An e-mail address associated with the person.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.author">Atom specification</ulink>.
         */
        get email_address(): string;
        set email_address(val: string);
        /**
         * An e-mail address associated with the person.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.author">Atom specification</ulink>.
         */
        get emailAddress(): string;
        set emailAddress(val: string);
        /**
         * A human-readable name for the person.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.author">Atom specification</ulink>.
         */
        get name(): string;
        set name(val: string);
        /**
         * An IRI associated with the person.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.author">Atom specification</ulink>.
         */
        get uri(): string;
        set uri(val: string);

        // Constructors

        constructor(properties?: Partial<Author.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](name: string, uri?: string | null, email_address?: string | null): Author;

        // Methods

        /**
         * Gets the #GDataAuthor:email-address property. If the e-mail address is non-%NULL, it will be non-empty.
         * @returns the author's e-mail address, or %NULL
         */
        get_email_address(): string;
        /**
         * Gets the #GDataAuthor:name property. The name will always be a non-%NULL, non-empty string.
         * @returns the author's name
         */
        get_name(): string;
        /**
         * Gets the #GDataAuthor:uri property. If the URI is non-%NULL, it will be non-empty.
         * @returns the author's URI, or %NULL
         */
        get_uri(): string;
        /**
         * Sets the #GDataAuthor:email-address property to `email_address`. `email_address` must be %NULL or non-empty.
         *
         * Set `email_address` to %NULL to unset the property in the author.
         * @param email_address the new e-mail address for the author, or %NULL
         */
        set_email_address(email_address?: string | null): void;
        /**
         * Sets the #GDataAuthor:name property to `name`. `name` must be non-%NULL and non-empty.
         * @param name the new name for the author
         */
        set_name(name: string): void;
        /**
         * Sets the #GDataAuthor:uri property to `uri`. `uri` must be %NULL or non-empty.
         *
         * Set `uri` to %NULL to unset the property in the author.
         * @param uri the new URI for the author, or %NULL
         */
        set_uri(uri?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module AuthorizationDomain {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            scope: string;
            service_name: string;
            serviceName: string;
        }
    }

    /**
     * All the fields in the #GDataAuthorizationDomain structure are private and should never be accessed directly.
     */
    class AuthorizationDomain extends GObject.Object {
        static $gtype: GObject.GType<AuthorizationDomain>;

        // Properties

        /**
         * A URI detailing the scope of the authorization domain, as enumerated in the
         * <ulink type="http" url="http://code.google.com/apis/documents/faq_gdata.html#AuthScopes">online documentation</ulink>.
         */
        get scope(): string;
        /**
         * The name of the service which contains the authorization domain, as enumerated in the
         * <ulink type="http" url="http://code.google.com/apis/documents/faq_gdata.html#clientlogin">online documentation</ulink>.
         */
        get service_name(): string;
        /**
         * The name of the service which contains the authorization domain, as enumerated in the
         * <ulink type="http" url="http://code.google.com/apis/documents/faq_gdata.html#clientlogin">online documentation</ulink>.
         */
        get serviceName(): string;

        // Constructors

        constructor(properties?: Partial<AuthorizationDomain.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Returns a URI detailing the scope of the authorization domain. See #GDataAuthorizationDomain:scope for more details.
         * @returns URI detailing the scope of the authorization domain
         */
        get_scope(): string;
        /**
         * Returns the name of the service containing the authorization domain. See #GDataAuthorizationDomain:service-name for more details.
         * @returns name of the service containing the authorization domain
         */
        get_service_name(): string;
    }

    module BatchOperation {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            authorization_domain: AuthorizationDomain;
            authorizationDomain: AuthorizationDomain;
            feed_uri: string;
            feedUri: string;
            service: Service;
        }
    }

    /**
     * All the fields in the #GDataBatchOperation structure are private and should never be accessed directly.
     */
    class BatchOperation extends GObject.Object {
        static $gtype: GObject.GType<BatchOperation>;

        // Properties

        /**
         * The authorization domain for the batch operation, against which the #GDataService:authorizer for the #GDataBatchOperation:service should be
         * authorized. This may be %NULL if authorization is not needed for any of the requests in the batch operation.
         *
         * All requests in the batch operation must be authorizable under this single authorization domain. If requests need different authorization
         * domains, they must be performed in different batch operations.
         */
        get authorization_domain(): AuthorizationDomain;
        /**
         * The authorization domain for the batch operation, against which the #GDataService:authorizer for the #GDataBatchOperation:service should be
         * authorized. This may be %NULL if authorization is not needed for any of the requests in the batch operation.
         *
         * All requests in the batch operation must be authorizable under this single authorization domain. If requests need different authorization
         * domains, they must be performed in different batch operations.
         */
        get authorizationDomain(): AuthorizationDomain;
        /**
         * The feed URI that this batch operation will be sent to.
         */
        get feed_uri(): string;
        /**
         * The feed URI that this batch operation will be sent to.
         */
        get feedUri(): string;
        /**
         * The service this batch operation is attached to.
         */
        get service(): Service;

        // Constructors

        constructor(properties?: Partial<BatchOperation.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Add an entry to the #GDataBatchOperation, to be deleted on the server when the operation is run. `entry` is reffed by the function, so may be freed
         * after it returns.
         *
         * Note that a single batch operation should not operate on a given #GDataEntry more than once, as there's no guarantee about the order in which the
         * batch operation's operations will be performed.
         *
         * `callback` will be called as specified in the documentation for gdata_batch_operation_add_query(), with an `operation_type` of
         * %GDATA_BATCH_OPERATION_DELETION.
         * @param entry the #GDataEntry to delete
         * @param callback a #GDataBatchOperationCallback to call when the deletion is finished, or %NULL
         * @returns operation ID for the added deletion, or <code class="literal">0</code>
         */
        add_deletion(entry: Entry, callback: BatchOperationCallback): number;
        /**
         * Add an entry to the #GDataBatchOperation, to be inserted on the server when the operation is run. The insertion will return the inserted version
         * of `entry`. `entry` is reffed by the function, so may be freed after it returns.
         *
         * `callback` will be called as specified in the documentation for gdata_batch_operation_add_query(), with an `operation_type` of
         * %GDATA_BATCH_OPERATION_INSERTION.
         * @param entry the #GDataEntry to insert
         * @param callback a #GDataBatchOperationCallback to call when the insertion is finished, or %NULL
         * @returns operation ID for the added insertion, or <code class="literal">0</code>
         */
        add_insertion(entry: Entry, callback: BatchOperationCallback): number;
        /**
         * Add a query to the #GDataBatchOperation, to be executed when the operation is run. The query will return a #GDataEntry (of subclass type
         * `entry_type)` representing the given entry `id`. The ID is of the same format as that returned by gdata_entry_get_id().
         *
         * Note that a single batch operation should not operate on a given #GDataEntry more than once, as there's no guarantee about the order in which the
         * batch operation's operations will be performed.
         *
         * `callback` will be called when the #GDataBatchOperation is run with gdata_batch_operation_run() (in which case it will be called in the thread which
         * ran the batch operation), or with gdata_batch_operation_run_async() (in which case it will be called in an idle handler in the main thread). The
         * `operation_id` passed to the callback will match the return value of gdata_batch_operation_add_query(), and the `operation_type` will be
         * %GDATA_BATCH_OPERATION_QUERY. If the query was successful, the resulting entry will be passed to the callback function as `entry,` and `error` will
         * be %NULL. If, however, the query was unsuccessful, `entry` will be %NULL and `error` will contain a #GError detailing what went wrong.
         * @param id the ID of the entry being queried for
         * @param entry_type the type of the entry which will be returned
         * @param callback a #GDataBatchOperationCallback to call when the query is finished, or %NULL
         * @returns operation ID for the added query, or <code class="literal">0</code>
         */
        add_query(id: string, entry_type: GObject.GType, callback: BatchOperationCallback): number;
        /**
         * Add an entry to the #GDataBatchOperation, to be updated on the server when the operation is run. The update will return the updated version of
         * `entry`. `entry` is reffed by the function, so may be freed after it returns.
         *
         * Note that a single batch operation should not operate on a given #GDataEntry more than once, as there's no guarantee about the order in which the
         * batch operation's operations will be performed.
         *
         * `callback` will be called as specified in the documentation for gdata_batch_operation_add_query(), with an `operation_type` of
         * %GDATA_BATCH_OPERATION_UPDATE.
         * @param entry the #GDataEntry to update
         * @param callback a #GDataBatchOperationCallback to call when the update is finished, or %NULL
         * @returns operation ID for the added update, or <code class="literal">0</code>
         */
        add_update(entry: Entry, callback: BatchOperationCallback): number;
        /**
         * Gets the #GDataBatchOperation:authorization-domain property.
         * @returns the #GDataAuthorizationDomain used to authorize the batch operation, or %NULL
         */
        get_authorization_domain(): AuthorizationDomain | null;
        /**
         * Gets the #GDataBatchOperation:feed-uri property.
         * @returns the batch operation's feed URI
         */
        get_feed_uri(): string;
        /**
         * Gets the #GDataBatchOperation:service property.
         * @returns the batch operation's attached service
         */
        get_service(): Service;
        /**
         * Run the #GDataBatchOperation synchronously. This will send all the operations in the batch operation to the server, and call their respective
         * callbacks synchronously (i.e. before gdata_batch_operation_run() returns, and in the same thread that called gdata_batch_operation_run()) as the
         * server returns results for each operation.
         *
         * The callbacks for all of the operations in the batch operation are always guaranteed to be called, even if the batch operation as a whole fails.
         * Each callback will be called exactly once for each time gdata_batch_operation_run() is called.
         *
         * The return value of the function indicates whether the overall batch operation was successful, and doesn't indicate the status of any of the
         * operations it comprises. gdata_batch_operation_run() could return %TRUE even if all of its operations failed.
         *
         * `cancellable` can be used to cancel the entire batch operation any time before or during the network activity. If `cancellable` is cancelled
         * after network activity has finished, gdata_batch_operation_run() will continue and finish as normal.
         * @param cancellable a #GCancellable, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        run(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Run the #GDataBatchOperation asynchronously. This will send all the operations in the batch operation to the server, and call their respective
         * callbacks asynchronously (i.e. in idle functions in the main thread, usually after gdata_batch_operation_run_async() has returned) as the
         * server returns results for each operation. `self` is reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_batch_operation_run(), which is the synchronous version of this function.
         *
         * When the entire batch operation is finished, `callback` will be called. You can then call gdata_batch_operation_run_finish() to get the results of
         * the batch operation.
         * @param cancellable a #GCancellable, or %NULL
         */
        run_async(cancellable?: Gio.Cancellable | null): Promise<boolean>;
        /**
         * Run the #GDataBatchOperation asynchronously. This will send all the operations in the batch operation to the server, and call their respective
         * callbacks asynchronously (i.e. in idle functions in the main thread, usually after gdata_batch_operation_run_async() has returned) as the
         * server returns results for each operation. `self` is reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_batch_operation_run(), which is the synchronous version of this function.
         *
         * When the entire batch operation is finished, `callback` will be called. You can then call gdata_batch_operation_run_finish() to get the results of
         * the batch operation.
         * @param cancellable a #GCancellable, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the batch operation is finished, or %NULL
         */
        run_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void;
        /**
         * Run the #GDataBatchOperation asynchronously. This will send all the operations in the batch operation to the server, and call their respective
         * callbacks asynchronously (i.e. in idle functions in the main thread, usually after gdata_batch_operation_run_async() has returned) as the
         * server returns results for each operation. `self` is reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_batch_operation_run(), which is the synchronous version of this function.
         *
         * When the entire batch operation is finished, `callback` will be called. You can then call gdata_batch_operation_run_finish() to get the results of
         * the batch operation.
         * @param cancellable a #GCancellable, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the batch operation is finished, or %NULL
         */
        run_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous batch operation run with gdata_batch_operation_run_async().
         *
         * Return values are as for gdata_batch_operation_run().
         * @param async_result a #GAsyncResult
         * @returns %TRUE on success, %FALSE otherwise
         */
        run_finish(async_result: Gio.AsyncResult): boolean;
    }

    module CalendarAccessRule {
        // Constructor properties interface

        interface ConstructorProps extends AccessRule.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataCalendarAccessRule structure are private and
     * should never be accessed directly.
     */
    class CalendarAccessRule extends AccessRule {
        static $gtype: GObject.GType<CalendarAccessRule>;

        // Constructors

        constructor(properties?: Partial<CalendarAccessRule.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id: string): CalendarAccessRule;
        // Conflicted with GData.Entry.new

        static ['new'](...args: never[]): any;
    }

    module CalendarCalendar {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps, AccessHandler.ConstructorProps {
            access_level: string;
            accessLevel: string;
            color: Color;
            is_hidden: boolean;
            isHidden: boolean;
            is_selected: boolean;
            isSelected: boolean;
            timezone: string;
        }
    }

    /**
     * All the fields in the #GDataCalendarCalendar structure are private and should never be accessed directly.
     */
    class CalendarCalendar extends Entry implements AccessHandler {
        static $gtype: GObject.GType<CalendarCalendar>;

        // Properties

        /**
         * Indicates the access level the current user has to the calendar. For example: %GDATA_CALENDAR_ACCESS_ROLE_READ or
         * %GDATA_CALENDAR_ACCESS_ROLE_FREE_BUSY. The "current user" is the one authenticated against the service's #GDataService:authorizer,
         * or the guest user.
         */
        get access_level(): string;
        /**
         * Indicates the access level the current user has to the calendar. For example: %GDATA_CALENDAR_ACCESS_ROLE_READ or
         * %GDATA_CALENDAR_ACCESS_ROLE_FREE_BUSY. The "current user" is the one authenticated against the service's #GDataService:authorizer,
         * or the guest user.
         */
        get accessLevel(): string;
        /**
         * The background color used to highlight the calendar in the user’s
         * browser. This used to be restricted to a limited set of colours, but
         * since 0.17.2 may be any RGB colour.
         */
        get color(): Color;
        set color(val: Color);
        /**
         * Indicates whether the calendar is visible.
         */
        get is_hidden(): boolean;
        set is_hidden(val: boolean);
        /**
         * Indicates whether the calendar is visible.
         */
        get isHidden(): boolean;
        set isHidden(val: boolean);
        /**
         * Indicates whether the calendar is selected.
         */
        get is_selected(): boolean;
        set is_selected(val: boolean);
        /**
         * Indicates whether the calendar is selected.
         */
        get isSelected(): boolean;
        set isSelected(val: boolean);
        /**
         * The timezone in which the calendar's times are given. This is a timezone name in tz database notation: <ulink type="http"
         * url="http://en.wikipedia.org/wiki/Tz_database#Names_of_time_zones">reference</ulink>.
         */
        get timezone(): string;
        set timezone(val: string);

        // Constructors

        constructor(properties?: Partial<CalendarCalendar.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): CalendarCalendar;

        // Methods

        /**
         * Gets the #GDataCalendarCalendar:access-level property.
         * @returns the authenticated user's access level to the calendar, or %NULL
         */
        get_access_level(): string;
        /**
         * Gets the #GDataCalendarCalendar:color property and puts it in `color`.
         */
        get_color(): Color;
        /**
         * Gets the #GDataCalendarCalendar:timezone property.
         * @returns the calendar's timezone, or %NULL
         */
        get_timezone(): string;
        /**
         * Sets the #GDataCalendarCalendar:color property to `color`.
         * @param color a new #GDataColor
         */
        set_color(color: Color): void;
        /**
         * Sets the #GDataCalendarCalendar:is-hidden property to `is_hidden`.
         * @param is_hidden %TRUE to hide the calendar, %FALSE otherwise
         */
        set_is_hidden(is_hidden: boolean): void;
        /**
         * Sets the #GDataCalendarCalendar:is-selected property to `is_selected`.
         * @param is_selected %TRUE to select the calendar, %FALSE otherwise
         */
        set_is_selected(is_selected: boolean): void;
        /**
         * Sets the #GDataCalendarCalendar:timezone property to the new timezone, `_timezone`.
         *
         * Set `_timezone` to %NULL to unset the property in the calendar.
         * @param _timezone a new timezone, or %NULL
         */
        set_timezone(_timezone?: string | null): void;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @returns a #GDataFeed of access control rules, or %NULL; unref with g_object_unref()
         */
        get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed. `self` and `service` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_access_handler_get_rules(), which is the synchronous version of this function, and gdata_service_query_async(), which
         * is the base asynchronous query function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_rules_async(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         */
        vfunc_get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module CalendarEvent {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            anyone_can_add_self: boolean;
            anyoneCanAddSelf: boolean;
            edited: number;
            guests_can_invite_others: boolean;
            guestsCanInviteOthers: boolean;
            guests_can_modify: boolean;
            guestsCanModify: boolean;
            guests_can_see_guests: boolean;
            guestsCanSeeGuests: boolean;
            original_event_id: string;
            originalEventId: string;
            original_event_uri: string;
            originalEventUri: string;
            recurrence: string;
            sequence: number;
            status: string;
            transparency: string;
            uid: string;
            visibility: string;
        }
    }

    /**
     * All the fields in the #GDataCalendarEvent structure are private and should never be accessed directly.
     */
    class CalendarEvent extends Entry {
        static $gtype: GObject.GType<CalendarEvent>;

        // Properties

        /**
         * Indicates whether anyone can invite themselves to the event, by adding themselves to the attendee list.
         */
        get anyone_can_add_self(): boolean;
        set anyone_can_add_self(val: boolean);
        /**
         * Indicates whether anyone can invite themselves to the event, by adding themselves to the attendee list.
         */
        get anyoneCanAddSelf(): boolean;
        set anyoneCanAddSelf(val: boolean);
        /**
         * The last time the event was edited. If the event has not been edited yet, the content indicates the time it was created.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appEdited">
         * Atom Publishing Protocol specification</ulink>.
         */
        get edited(): number;
        /**
         * Indicates whether attendees may invite others to the event.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanInviteOthers">GData specification</ulink>.
         */
        get guests_can_invite_others(): boolean;
        set guests_can_invite_others(val: boolean);
        /**
         * Indicates whether attendees may invite others to the event.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanInviteOthers">GData specification</ulink>.
         */
        get guestsCanInviteOthers(): boolean;
        set guestsCanInviteOthers(val: boolean);
        /**
         * Indicates whether attendees may modify the original event, so that changes are visible to organizers and other attendees.
         * Otherwise, any changes made by attendees will be restricted to that attendee's calendar.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanInviteOthers">
         * GData specification</ulink>.
         */
        get guests_can_modify(): boolean;
        set guests_can_modify(val: boolean);
        /**
         * Indicates whether attendees may modify the original event, so that changes are visible to organizers and other attendees.
         * Otherwise, any changes made by attendees will be restricted to that attendee's calendar.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanInviteOthers">
         * GData specification</ulink>.
         */
        get guestsCanModify(): boolean;
        set guestsCanModify(val: boolean);
        /**
         * Indicates whether attendees can see other people invited to the event.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanSeeOtherGuests">
         * GData specification</ulink>.
         */
        get guests_can_see_guests(): boolean;
        set guests_can_see_guests(val: boolean);
        /**
         * Indicates whether attendees can see other people invited to the event.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/calendar/v3/reference/events#guestsCanSeeOtherGuests">
         * GData specification</ulink>.
         */
        get guestsCanSeeGuests(): boolean;
        set guestsCanSeeGuests(val: boolean);
        /**
         * The event ID for the original event, if this event is an exception to a recurring event.
         */
        get original_event_id(): string;
        /**
         * The event ID for the original event, if this event is an exception to a recurring event.
         */
        get originalEventId(): string;
        /**
         * The event URI for the original event, if this event is an exception to a recurring event.
         */
        get original_event_uri(): string;
        /**
         * The event URI for the original event, if this event is an exception to a recurring event.
         */
        get originalEventUri(): string;
        /**
         * Represents the dates and times when a recurring event takes place. The returned string is in iCal format, as a list of properties.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/elements.html#gdRecurrence">
         * GData specification</ulink>.
         *
         * Note: gdata_calendar_event_add_time() and gdata_calendar_event_set_recurrence() are mutually
         * exclusive. See the documentation for gdata_calendar_event_add_time() for details.
         */
        get recurrence(): string;
        set recurrence(val: string);
        /**
         * The revision sequence number of the event as defined in Section 4.8.7.4 of <ulink type="http"
         * url="http://www.ietf.org/rfc/rfc2445.txt">RFC 2445</ulink>.
         */
        get sequence(): number;
        set sequence(val: number);
        /**
         * The scheduling status of the event. For example: %GDATA_GD_EVENT_STATUS_CANCELED or %GDATA_GD_EVENT_STATUS_CONFIRMED.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/elements.html#gdEventStatus">
         * GData specification</ulink>.
         */
        get status(): string;
        set status(val: string);
        /**
         * How the event is marked as consuming time on a calendar. For example: %GDATA_GD_EVENT_TRANSPARENCY_OPAQUE or
         * %GDATA_GD_EVENT_TRANSPARENCY_TRANSPARENT.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/elements.html#gdTransparency">
         * GData specification</ulink>.
         */
        get transparency(): string;
        set transparency(val: string);
        /**
         * The globally unique identifier (UID) of the event as defined in Section 4.8.4.7 of <ulink type="http"
         * url="http://www.ietf.org/rfc/rfc2445.txt">RFC 2445</ulink>.
         */
        get uid(): string;
        set uid(val: string);
        /**
         * The event's visibility to calendar users. For example: %GDATA_GD_EVENT_VISIBILITY_PUBLIC or %GDATA_GD_EVENT_VISIBILITY_DEFAULT.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/elements.html#gdVisibility">
         * GData specification</ulink>.
         */
        get visibility(): string;
        set visibility(val: string);

        // Constructors

        constructor(properties?: Partial<CalendarEvent.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): CalendarEvent;

        // Methods

        /**
         * Adds the person `who` to the event as a guest (attendee, organiser, performer, etc.), and increments its reference count.
         *
         * Duplicate people will not be added to the list.
         * @param who a #GDataGDWho to add
         */
        add_person(who: GDWho): void;
        /**
         * Adds the place `where` to the event as a location and increments its reference count.
         *
         * Duplicate places will not be added to the list.
         * @param where a #GDataGDWhere to add
         */
        add_place(where: GDWhere): void;
        /**
         * Adds `when` to the event as a time period when the event happens, and increments its reference count.
         *
         * Duplicate times will not be added to the list.
         *
         * Note: gdata_calendar_event_add_time() and gdata_calendar_event_set_recurrence() are mutually
         * exclusive, as the server doesn't support positive exceptions to recurrence rules. If recurrences
         * are required, use gdata_calendar_event_set_recurrence(). Note that this means reminders cannot
         * be set for the event, as they are only supported by #GDataGDWhen. No checks are performed for
         * these forbidden conditions, as to do so would break libgdata's API; if both a recurrence is set
         * and a specific time is added, the server will return an error when the #GDataCalendarEvent is
         * inserted using gdata_service_insert_entry().
         * @param when a #GDataGDWhen to add
         */
        add_time(when: GDWhen): void;
        /**
         * Gets the #GDataCalendarEvent:anyone-can-add-self property.
         * @returns %TRUE if anyone can add themselves as an attendee to the event, %FALSE otherwise
         */
        get_anyone_can_add_self(): boolean;
        /**
         * Gets the #GDataCalendarEvent:edited property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the event was last edited, or <code class="literal">-1</code>
         */
        get_edited(): number;
        /**
         * Gets the #GDataCalendarEvent:guests-can-invite-others property.
         * @returns %TRUE if attendees can invite others to the event, %FALSE otherwise
         */
        get_guests_can_invite_others(): boolean;
        /**
         * Gets the #GDataCalendarEvent:guests-can-modify property.
         * @returns %TRUE if attendees can modify the original event, %FALSE otherwise
         */
        get_guests_can_modify(): boolean;
        /**
         * Gets the #GDataCalendarEvent:guests-can-see-guests property.
         * @returns %TRUE if attendees can see who's attending the event, %FALSE otherwise
         */
        get_guests_can_see_guests(): boolean;
        /**
         * Gets details of the original event, if this event is an exception to a recurring event. The original
         * event's ID and the URI of the event's XML are returned in `event_id` and `event_uri,` respectively.
         *
         * If this event is not an exception to a recurring event, `event_id` and `event_uri` will be set to %NULL.
         * See gdata_calendar_event_is_exception() to determine more simply whether an event is an exception to a
         * recurring event.
         *
         * If both `event_id` and `event_uri` are %NULL, this function is a no-op. Otherwise, they should both be
         * freed with g_free().
         */
        get_original_event_details(): [string, string];
        /**
         * Gets a list of the people attending the event.
         * @returns a #GList of #GDataGDWhos, or %NULL
         */
        get_people(): GDWho[];
        /**
         * Gets a list of the locations associated with the event.
         * @returns a #GList of #GDataGDWheres, or %NULL
         */
        get_places(): GDWhere[];
        /**
         * Gets the first time period associated with the event, conveniently returning just its start and
         * end times if required.
         *
         * If there are no time periods, or more than one time period, associated with the event, %FALSE will
         * be returned, and the parameters will remain unmodified.
         * @returns %TRUE if there is only one time period associated with the event, %FALSE otherwise
         */
        get_primary_time(): [boolean, number, number, GDWhen];
        /**
         * Gets the #GDataCalendarEvent:recurrence property.
         * @returns the event recurrence patterns, or %NULL
         */
        get_recurrence(): string;
        /**
         * Gets the #GDataCalendarEvent:sequence property.
         * @returns the event's sequence number
         */
        get_sequence(): number;
        /**
         * Gets the #GDataCalendarEvent:status property.
         * @returns the event status, or %NULL
         */
        get_status(): string;
        /**
         * Gets a list of the time periods associated with the event.
         * @returns a #GList of #GDataGDWhens, or %NULL
         */
        get_times(): GDWhen[];
        /**
         * Gets the #GDataCalendarEvent:transparency property.
         * @returns the event transparency, or %NULL
         */
        get_transparency(): string;
        /**
         * Gets the #GDataCalendarEvent:uid property.
         * @returns the event's UID, or %NULL
         */
        get_uid(): string;
        /**
         * Gets the #GDataCalendarEvent:visibility property.
         * @returns the event visibility, or %NULL
         */
        get_visibility(): string;
        /**
         * Determines whether the event is an exception to a recurring event. If it is, details of the original event
         * can be retrieved using gdata_calendar_event_get_original_event_details().
         * @returns %TRUE if the event is an exception, %FALSE otherwise
         */
        is_exception(): boolean;
        /**
         * Sets the #GDataCalendarEvent:anyone-can-add-self property to `anyone_can_add_self`.
         * @param anyone_can_add_self %TRUE if anyone can add themselves as an attendee to the event, %FALSE otherwise
         */
        set_anyone_can_add_self(anyone_can_add_self: boolean): void;
        /**
         * Sets the #GDataCalendarEvent:guests-can-invite-others property to `guests_can_invite_others`.
         * @param guests_can_invite_others %TRUE if attendees can invite others to the event, %FALSE otherwise
         */
        set_guests_can_invite_others(guests_can_invite_others: boolean): void;
        /**
         * Sets the #GDataCalendarEvent:guests-can-modify property to `guests_can_modify`.
         * @param guests_can_modify %TRUE if attendees can modify the original event, %FALSE otherwise
         */
        set_guests_can_modify(guests_can_modify: boolean): void;
        /**
         * Sets the #GDataCalendarEvent:guests-can-see-guests property to `guests_can_see_guests`.
         * @param guests_can_see_guests %TRUE if attendees can see who's attending the event, %FALSE otherwise
         */
        set_guests_can_see_guests(guests_can_see_guests: boolean): void;
        /**
         * Sets the #GDataCalendarEvent:recurrence property to the new recurrence, `recurrence`.
         *
         * Set `recurrence` to %NULL to unset the property in the event.
         *
         * Note: gdata_calendar_event_add_time() and gdata_calendar_event_set_recurrence() are mutually
         * exclusive. See the documentation for gdata_calendar_event_add_time() for details.
         * @param recurrence a new event recurrence, or %NULL
         */
        set_recurrence(recurrence?: string | null): void;
        /**
         * Sets the #GDataCalendarEvent:sequence property to the new sequence number, `sequence`.
         * @param sequence a new sequence number, or <code class="literal">0</code>
         */
        set_sequence(sequence: number): void;
        /**
         * Sets the #GDataCalendarEvent:status property to the new status, `status`.
         *
         * Set `status` to %NULL to unset the property in the event.
         * @param status a new event status, or %NULL
         */
        set_status(status?: string | null): void;
        /**
         * Sets the #GDataCalendarEvent:transparency property to the new transparency, `transparency`.
         *
         * Set `transparency` to %NULL to unset the property in the event.
         * @param transparency a new event transparency, or %NULL
         */
        set_transparency(transparency?: string | null): void;
        /**
         * Sets the #GDataCalendarEvent:uid property to the new UID, `uid`.
         *
         * Set `uid` to %NULL to unset the property in the event.
         * @param uid a new event UID, or %NULL
         */
        set_uid(uid?: string | null): void;
        /**
         * Sets the #GDataCalendarEvent:visibility property to the new visibility, `visibility`.
         *
         * Set `visibility` to %NULL to unset the property in the event.
         * @param visibility a new event visibility, or %NULL
         */
        set_visibility(visibility?: string | null): void;
    }

    module CalendarFeed {
        // Constructor properties interface

        interface ConstructorProps extends Feed.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataCalendarFeed structure are private and should never be accessed directly.
     */
    class CalendarFeed extends Feed {
        static $gtype: GObject.GType<CalendarFeed>;

        // Constructors

        constructor(properties?: Partial<CalendarFeed.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;
    }

    module CalendarQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {
            future_events: boolean;
            futureEvents: boolean;
            max_attendees: number;
            maxAttendees: number;
            order_by: string;
            orderBy: string;
            show_deleted: boolean;
            showDeleted: boolean;
            single_events: boolean;
            singleEvents: boolean;
            start_max: number;
            startMax: number;
            start_min: number;
            startMin: number;
            timezone: string;
        }
    }

    /**
     * All the fields in the #GDataCalendarQuery structure are private and should never be accessed directly.
     */
    class CalendarQuery extends Query {
        static $gtype: GObject.GType<CalendarQuery>;

        // Properties

        /**
         * A shortcut to request all events scheduled for the future. Overrides the
         * #GDataCalendarQuery:start-min and #GDataCalendarQuery:start-max properties.
         */
        get future_events(): boolean;
        set future_events(val: boolean);
        /**
         * A shortcut to request all events scheduled for the future. Overrides the
         * #GDataCalendarQuery:start-min and #GDataCalendarQuery:start-max properties.
         */
        get futureEvents(): boolean;
        set futureEvents(val: boolean);
        /**
         * Specifies the maximum number of attendees to list for an event. If the actual number of attendees for an event is greater than this value,
         * only the current user and the event organiser are listed.
         */
        get max_attendees(): number;
        set max_attendees(val: number);
        /**
         * Specifies the maximum number of attendees to list for an event. If the actual number of attendees for an event is greater than this value,
         * only the current user and the event organiser are listed.
         */
        get maxAttendees(): number;
        set maxAttendees(val: number);
        /**
         * Specifies order of entries in a feed. Supported values are <literal>lastmodified</literal> and
         * <literal>starttime</literal>.
         */
        get order_by(): string;
        set order_by(val: string);
        /**
         * Specifies order of entries in a feed. Supported values are <literal>lastmodified</literal> and
         * <literal>starttime</literal>.
         */
        get orderBy(): string;
        set orderBy(val: string);
        /**
         * Whether to include deleted/cancelled events in the query feed. Deleted events have their #GDataCalendarEvent:status property set to
         * %GDATA_GD_EVENT_STATUS_CANCELED. They do not normally appear in query results.
         */
        get show_deleted(): boolean;
        set show_deleted(val: boolean);
        /**
         * Whether to include deleted/cancelled events in the query feed. Deleted events have their #GDataCalendarEvent:status property set to
         * %GDATA_GD_EVENT_STATUS_CANCELED. They do not normally appear in query results.
         */
        get showDeleted(): boolean;
        set showDeleted(val: boolean);
        /**
         * Indicates whether recurring events should be expanded or represented as a single event.
         */
        get single_events(): boolean;
        set single_events(val: boolean);
        /**
         * Indicates whether recurring events should be expanded or represented as a single event.
         */
        get singleEvents(): boolean;
        set singleEvents(val: boolean);
        /**
         * Together with #GDataCalendarQuery:start-min, creates a timespan such that only events within the timespan are returned
         *
         * #GDataCalendarQuery:start-min is inclusive, while #GDataCalendarQuery:start-max is exclusive. Events that overlap the range are
         * included. Both are specified in seconds since the UNIX epoch.
         *
         * If not specified, the default #GDataCalendarQuery:start-max is <literal>2031-01-01</literal>.
         */
        get start_max(): number;
        set start_max(val: number);
        /**
         * Together with #GDataCalendarQuery:start-min, creates a timespan such that only events within the timespan are returned
         *
         * #GDataCalendarQuery:start-min is inclusive, while #GDataCalendarQuery:start-max is exclusive. Events that overlap the range are
         * included. Both are specified in seconds since the UNIX epoch.
         *
         * If not specified, the default #GDataCalendarQuery:start-max is <literal>2031-01-01</literal>.
         */
        get startMax(): number;
        set startMax(val: number);
        /**
         * Together with #GDataCalendarQuery:start-max, creates a timespan such that only events within the timespan are returned.
         *
         * #GDataCalendarQuery:start-min is inclusive, while #GDataCalendarQuery:start-max is exclusive. Events that overlap the range are
         * included. Both are specified in seconds since the UNIX epoch.
         *
         * If not specified, the default #GDataCalendarQuery:start-min is <literal>1970-01-01</literal>.
         */
        get start_min(): number;
        set start_min(val: number);
        /**
         * Together with #GDataCalendarQuery:start-max, creates a timespan such that only events within the timespan are returned.
         *
         * #GDataCalendarQuery:start-min is inclusive, while #GDataCalendarQuery:start-max is exclusive. Events that overlap the range are
         * included. Both are specified in seconds since the UNIX epoch.
         *
         * If not specified, the default #GDataCalendarQuery:start-min is <literal>1970-01-01</literal>.
         */
        get startMin(): number;
        set startMin(val: number);
        /**
         * The current timezone. If this is not specified, all times are returned in UTC.
         */
        get timezone(): string;
        set timezone(val: string);

        // Constructors

        constructor(properties?: Partial<CalendarQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): CalendarQuery;

        static new_with_limits(q: string | null, start_min: number, start_max: number): CalendarQuery;

        // Methods

        /**
         * Gets the #GDataCalendarQuery:future-events property.
         * @returns the future events property
         */
        get_future_events(): boolean;
        /**
         * Gets the #GDataCalendarQuery:max-attendees property. If the property is unset, <code class="literal">0</code> will be returned.
         * @returns the maximum number of attendees, or <code class="literal">0</code>
         */
        get_max_attendees(): number;
        /**
         * Gets the #GDataCalendarQuery:order-by property.
         * @returns the order by property, or %NULL if it is unset
         */
        get_order_by(): string;
        /**
         * Gets the #GDataCalendarQuery:single-events property.
         * @returns the single events property
         */
        get_single_events(): boolean;
        /**
         * Gets the #GDataCalendarQuery:start-max property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp (in seconds) for the start-max property, or <code class="literal">-1</code>
         */
        get_start_max(): number;
        /**
         * Gets the #GDataCalendarQuery:start-min property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp (in seconds) for the start-min property, or <code class="literal">-1</code>
         */
        get_start_min(): number;
        /**
         * Gets the #GDataCalendarQuery:timezone property.
         * @returns the timezone property, or %NULL if it is unset
         */
        get_timezone(): string;
        /**
         * Sets the #GDataCalendarQuery:future-events property of the #GDataCalendarQuery to `future_events`.
         * @param future_events %TRUE to unconditionally show future events, %FALSE otherwise
         */
        set_future_events(future_events: boolean): void;
        /**
         * Sets the #GDataCalendarQuery:max-attendees property of the #GDataCalendarQuery to the new value, `max_attendees`.
         *
         * Set `max_attendees` to <code class="literal">0</code> to unset the property in the query URI.
         * @param max_attendees a new maximum attendee count, or <code class="literal">0</code>
         */
        set_max_attendees(max_attendees: number): void;
        /**
         * Sets the #GDataCalendarQuery:order-by property of the #GDataCalendarQuery to the new order by string, `order_by`.
         *
         * Set `order_by` to %NULL to unset the property in the query URI.
         * @param order_by a new order by string, or %NULL
         */
        set_order_by(order_by?: string | null): void;
        /**
         * Sets the #GDataCalendarQuery:show-deleted property of the #GDataCalendarQuery.
         * @param show_deleted %TRUE to show deleted events, %FALSE otherwise
         */
        set_show_deleted(show_deleted: boolean): void;
        /**
         * Sets the #GDataCalendarQuery:single-events property of the #GDataCalendarQuery to `single_events`.
         * @param single_events %TRUE to show recurring events as single events, %FALSE otherwise
         */
        set_single_events(single_events: boolean): void;
        /**
         * Sets the #GDataCalendarQuery:start-max property of the #GDataCalendarQuery
         * to the new time/date, `start_max`.
         *
         * Set `start_max` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param start_max a new maximum start time (in seconds since the UNIX epoch), or <code class="literal">-1</code>
         */
        set_start_max(start_max: number): void;
        /**
         * Sets the #GDataCalendarQuery:start-min property of the #GDataCalendarQuery
         * to the new time/date, `start_min`.
         *
         * Set `start_min` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param start_min a new minimum start time (in seconds since the UNIX epoch), or <code class="literal">-1</code>
         */
        set_start_min(start_min: number): void;
        /**
         * Sets the #GDataCalendarQuery:timezone property of the #GDataCalendarQuery to the new timezone string, `timezone`.
         *
         * Set `timezone` to %NULL to unset the property in the query URI.
         * @param _timezone a new timezone string, or %NULL
         */
        set_timezone(_timezone?: string | null): void;
    }

    module CalendarService {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps, Batchable.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataCalendarService structure are private and should never be accessed directly.
     */
    class CalendarService extends Service implements Batchable {
        static $gtype: GObject.GType<CalendarService>;

        // Constructors

        constructor(properties?: Partial<CalendarService.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](authorizer?: Authorizer | null): CalendarService;

        // Static methods

        /**
         * The primary #GDataAuthorizationDomain for interacting with Google Calendar. This will not normally need to be used, as it's used internally
         * by the #GDataCalendarService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_primary_authorization_domain(): AuthorizationDomain;

        // Methods

        /**
         * Inserts `event` by uploading it to the online calendar service, adding it to
         * the specified `calendar`.
         *
         * For more details, see gdata_service_insert_entry().
         * @param calendar the #GDataCalendarCalendar to insert the event into
         * @param event the #GDataCalendarEvent to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataCalendarEvent, or %NULL; unref with g_object_unref()
         */
        insert_calendar_event(
            calendar: CalendarCalendar,
            event: CalendarEvent,
            cancellable?: Gio.Cancellable | null,
        ): CalendarEvent;
        /**
         * Inserts `event` by uploading it to the online calendar service, adding it to
         * the specified `calendar`. `self` and `event` are both reffed when this function
         * is called, so can safely be unreffed after this function returns.
         *
         * `callback` should call gdata_service_insert_entry_finish() to obtain a
         * #GDataCalendarEvent representing the inserted event and to check for possible
         * errors.
         *
         * For more details, see gdata_calendar_service_insert_event(), which is the
         * synchronous version of this function, and gdata_service_insert_entry_async(),
         * which is the base asynchronous insertion function.
         * @param calendar the #GDataCalendarCalendar to insert the event into
         * @param event the #GDataCalendarEvent to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        insert_calendar_event_async(
            calendar: CalendarCalendar,
            event: CalendarEvent,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of all calendars from the authenticated account which match the given
         * `query`. It will return all calendars the user has read access to, including primary, secondary and imported
         * calendars.
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_all_calendars(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of all calendars from the authenticated account which match the given
         * `query`. `self` and `query` are all reffed when this function is called, so can safely be unreffed after
         * this function returns.
         *
         * For more details, see gdata_calendar_service_query_all_calendars(), which is the synchronous version of
         * this function, and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_all_calendars_async(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of events in the given `calendar,` which match `query`.
         *
         * For more details, see gdata_service_query().
         * @param calendar a #GDataCalendarCalendar
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_events(
            calendar: CalendarCalendar,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of events in the given `calendar,` which match `query`. `self,` `calendar` and `query` are all reffed when this
         * function is called, so can safely be unreffed after this function returns.
         *
         * Get the results of the query using gdata_service_query_finish() in the `callback`.
         *
         * For more details, see gdata_calendar_service_query_events(), which is the synchronous version of this function, and gdata_service_query_async(),
         * which is the base asynchronous query function.
         * @param calendar a #GDataCalendarCalendar
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_events_async(
            calendar: CalendarCalendar,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of calendars from the authenticated account which match the given
         * `query,` and the authenticated user owns. (i.e. They have full read/write access to the calendar, as well
         * as the ability to set permissions on the calendar.)
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_own_calendars(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of calendars from the authenticated account which match the given
         * `query,` and the authenticated user owns. `self` and `query` are all reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_calendar_service_query_own_calendars(), which is the synchronous version of
         * this function, and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_own_calendars_async(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;

        // Inherited properties
        /**
         * An object which implements #GDataAuthorizer. This should have previously been authenticated authorized against this service type (and
         * potentially other service types). The service will use the authorizer to add an authorization token to each request it performs.
         *
         * Your application should call methods on the #GDataAuthorizer object itself in order to authenticate with the Google accounts service and
         * authorize against this service type. See the documentation for the particular #GDataAuthorizer implementation being used for more details.
         *
         * The authorizer for a service can be changed at runtime for a different #GDataAuthorizer object or %NULL without affecting ongoing requests
         * and operations.
         *
         * Note that it's only necessary to set an authorizer on the service if your application is going to make requests of the service which
         * require authorization. For example, listing the current most popular videos on YouTube does not require authorization, but uploading a
         * video to YouTube does. It's an unnecessary overhead to require the user to authorize against a service when not strictly required.
         */
        get authorizer(): Authorizer;
        set authorizer(val: Authorizer);
        /**
         * The locale to use for network requests, in Unix locale format. (e.g. "en_GB", "cs", "de_DE".) Use %NULL for the default "C" locale
         * (typically "en_US").
         *
         * Typically, this locale will be used by the server-side software to localise results, such as by translating category names, or by choosing
         * geographically relevant search results. This will vary from service to service.
         *
         * The server-side behaviour is undefined if it doesn't support a given locale.
         */
        get locale(): string;
        set locale(val: string);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxy_resolver(): Gio.ProxyResolver;
        set proxy_resolver(val: Gio.ProxyResolver);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxyResolver(): Gio.ProxyResolver;
        set proxyResolver(val: Gio.ProxyResolver);
        /**
         * A timeout, in seconds, for network operations. If the timeout is exceeded, the operation will be cancelled and
         * %GDATA_SERVICE_ERROR_NETWORK_ERROR will be returned.
         *
         * If the timeout is <code class="literal">0</code>, operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         */
        get timeout(): number;
        set timeout(val: number);

        // Inherited methods
        /**
         * Creates a new #GDataBatchOperation for the given #GDataBatchable service, and with the given `feed_uri`. `feed_uri` is normally the %GDATA_LINK_BATCH
         * link URI in the appropriate #GDataFeed from the service. If authorization will be required to perform any of the requests in the batch operation,
         * `domain` must be non-%NULL, and must be an authorization domain which covers all of the requests. Otherwise, `domain` may be %NULL if authorization
         * is not required.
         * @param domain the #GDataAuthorizationDomain to authorize the operation, or %NULL
         * @param feed_uri the URI to send the batch operation request to
         * @returns a new #GDataBatchOperation; unref with g_object_unref()
         */
        create_operation(domain: AuthorizationDomain | null, feed_uri: string): BatchOperation;
        /**
         * Deletes `entry` from the server. For more information about the concept of deleting entries, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#DeletingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the deletion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error deleting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous entry deletion operation started with gdata_service_delete_entry_async().
         * @param async_result a #GAsyncResult
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Gets the #GDataAuthorizer object currently in use by the service. See the documentation for #GDataService:authorizer for more details.
         * @returns the authorizer object for this service, or %NULL
         */
        get_authorizer(): Authorizer;
        /**
         * Returns the locale currently being used for network requests, or %NULL if the locale is the default.
         * @returns the current locale
         */
        get_locale(): string;
        /**
         * Gets the #GProxyResolver on the #GDataService's #SoupSession.
         * @returns a #GProxyResolver, or %NULL
         */
        get_proxy_resolver(): Gio.ProxyResolver | null;
        /**
         * Gets the #GDataService:timeout property; the network timeout, in seconds.
         * @returns the timeout, or <code class="literal">0</code>
         */
        get_timeout(): number;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. For more information about the concept of inserting entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#InsertingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the insertion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If the entry is marked as already having been inserted a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned immediately
         * (there will be no network requests).
         *
         * If there is an error inserting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry insertion operation started with gdata_service_insert_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Determines whether the service is authorized for all the #GDataAuthorizationDomains it belongs to (as returned by
         * gdata_service_get_authorization_domains()). If the service's #GDataService:authorizer is %NULL, %FALSE is always returned.
         *
         * This is basically a convenience method for checking that the service's #GDataAuthorizer is authorized for all the service's
         * #GDataAuthorizationDomains.
         * @returns %TRUE if the service is authorized for all its domains, %FALSE otherwise
         */
        is_authorized(): boolean;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the query will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query, but subclasses may override
         * this and return their own errors. See their documentation for more details.
         *
         * For each entry in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         *
         * If the query is successful and the feed supports pagination, `query` will be updated with the pagination URIs, and the next or previous page
         * can then be loaded by calling gdata_query_next_page() or gdata_query_previous_page() before running the query again.
         *
         * If the #GDataQuery's ETag is set and it finds a match on the server, %NULL will be returned, but `error` will remain unset. Otherwise,
         * `query'`s ETag will be updated with the ETag from the returned feed, if available.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed>;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed> | void;
        /**
         * Finishes an asynchronous query operation started with gdata_service_query_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_finish(async_result: Gio.AsyncResult): Feed;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id().
         *
         * Parameters and errors are as for gdata_service_query(). Most of the properties of `query` aren't relevant, and
         * will cause a server-side error if used. The most useful property to use is #GDataQuery:etag, which will cause the
         * server to not return anything if the entry hasn't been modified since it was given the specified ETag; thus saving
         * bandwidth. If the server does not return anything for this reason, gdata_service_query_single_entry() will return
         * %NULL, but will not set an error in `error`.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable a #GCancellable, or %NULL
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous query operation for a single entry, as started with gdata_service_query_single_entry_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Sets #GDataService:authorizer to `authorizer`. This may be %NULL if the service will only make requests in future which don't require authorization.
         * See the documentation for #GDataService:authorizer for more information.
         * @param authorizer a new authorizer object for the service, or %NULL
         */
        set_authorizer(authorizer: Authorizer): void;
        /**
         * Set the locale used for network requests to `locale,` given in standard Unix locale format. See #GDataService:locale for more details.
         *
         * Note that while it's possible to change the locale after sending network requests, it is unsupported, as the server-side software may behave
         * unexpectedly. The only supported use of this function is after creation of a service, but before any network requests are made.
         * @param locale the new locale in Unix locale format, or %NULL for the default locale
         */
        set_locale(locale?: string | null): void;
        /**
         * Sets the #GProxyResolver on the #SoupSession used internally by the given #GDataService.
         * @param proxy_resolver a #GProxyResolver, or %NULL
         */
        set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void;
        /**
         * Sets the #GDataService:timeout property; the network timeout, in seconds.
         *
         * If `timeout` is <code class="literal">0</code>, network operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         * @param timeout the timeout, or <code class="literal">0</code>
         */
        set_timeout(timeout: number): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. For more information about the concept of updating entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#UpdatingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the update will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error updating the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): Entry;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry update operation started with gdata_service_update_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry_finish(async_result: Gio.AsyncResult): Entry;
        vfunc_append_query_headers(domain: AuthorizationDomain, message: Soup.Message): void;
        vfunc_parse_error_response(
            operation_type: OperationType,
            status: number,
            reason_phrase: string,
            response_body: string,
            length: number,
        ): void;
    }

    module Category {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            label: string;
            scheme: string;
            term: string;
        }
    }

    /**
     * All the fields in the #GDataCategory structure are private and should never be accessed directly.
     */
    class Category extends Parsable implements Comparable {
        static $gtype: GObject.GType<Category>;

        // Properties

        /**
         * A human-readable label for display in end-user applications.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.category">
         * Atom specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * An IRI that identifies a categorization scheme.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.category">
         * Atom specification</ulink>.
         */
        get scheme(): string;
        set scheme(val: string);
        /**
         * Identifies the category to which the entry or feed belongs.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.category">
         * Atom specification</ulink>.
         */
        get term(): string;
        set term(val: string);

        // Constructors

        constructor(properties?: Partial<Category.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](term: string, scheme?: string | null, label?: string | null): Category;

        // Methods

        /**
         * Gets the #GDataCategory:label property.
         * @returns the category's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataCategory:scheme property. If the scheme is non-%NULL, it will be non-empty.
         * @returns the category's scheme, or %NULL
         */
        get_scheme(): string;
        /**
         * Gets the #GDataCategory:term property. The term will always be a non-%NULL, non-empty string.
         * @returns the category's term
         */
        get_term(): string;
        /**
         * Sets the #GDataCategory:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the category.
         * @param label the new label for the category, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataCategory:scheme property to `scheme`. `scheme` must be %NULL or non-empty.
         *
         * Set `scheme` to %NULL to unset the property in the category.
         * @param scheme the new scheme for the category, or %NULL
         */
        set_scheme(scheme?: string | null): void;
        /**
         * Sets the #GDataCategory:term property to `term`. `term` must be non-%NULL and non-empty.
         * @param term the new term for the category
         */
        set_term(term: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module Comment {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataComment structure are private and should never be accessed directly.
     */
    abstract class Comment extends Entry {
        static $gtype: GObject.GType<Comment>;

        // Constructors

        constructor(properties?: Partial<Comment.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;
    }

    module DocumentsAccessRule {
        // Constructor properties interface

        interface ConstructorProps extends AccessRule.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsAccessRule structure are private and
     * should never be accessed directly.
     */
    class DocumentsAccessRule extends AccessRule {
        static $gtype: GObject.GType<DocumentsAccessRule>;

        // Constructors

        constructor(properties?: Partial<DocumentsAccessRule.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id: string): DocumentsAccessRule;
        // Conflicted with GData.Entry.new

        static ['new'](...args: never[]): any;
    }

    module DocumentsDocument {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsEntry.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsDocument structure are private and should never be accessed directly.
     */
    class DocumentsDocument extends DocumentsEntry implements AccessHandler {
        static $gtype: GObject.GType<DocumentsDocument>;

        // Constructors

        constructor(properties?: Partial<DocumentsDocument.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsDocument;

        // Methods

        /**
         * Downloads and returns the document file represented by the #GDataDocumentsDocument. If the document doesn't exist, %NULL is returned, but no error
         * is set in `error`.
         *
         * `export_format` should be the file extension of the desired output format for the document, from the list accepted by Google Documents. For example:
         * %GDATA_DOCUMENTS_PRESENTATION_PDF, %GDATA_DOCUMENTS_SPREADSHEET_ODS or %GDATA_DOCUMENTS_TEXT_ODT.
         *
         * If `self` is a #GDataDocumentsSpreadsheet, only the first grid, or sheet, in the spreadsheet will be downloaded for some export formats. To download
         * a specific a specific grid, use gdata_documents_spreadsheet_get_download_uri() with #GDataDownloadStream to download the grid manually. See the
         * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#downloading_spreadsheets">GData protocol
         * specification</ulink> for more information.
         *
         * To get the content type of the downloaded file, gdata_download_stream_get_content_type() can be called on the returned #GDataDownloadStream.
         * Calling gdata_download_stream_get_content_length() on the stream will not return a meaningful result, however, as the stream is encoded in chunks,
         * rather than by content length.
         *
         * In order to cancel the download, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GInputStream operations on the #GDataDownloadStream will not cancel the entire download; merely the read or close operation in question. See the
         * #GDataDownloadStream:cancellable for more details.
         *
         * If the given `export_format` is unrecognised or not supported for this document, %GDATA_SERVICE_ERROR_NOT_FOUND will be returned.
         *
         * If `service` isn't authenticated, a %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED will be returned.
         *
         * If there is an error getting the document, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned.
         * @param service a #GDataDocumentsService
         * @param export_format the format in which the document should be exported
         * @param cancellable a #GCancellable for the entire download stream, or %NULL
         * @returns a #GDataDownloadStream to download the document with, or %NULL; unref with g_object_unref()
         */
        download(
            service: DocumentsService,
            export_format: string,
            cancellable?: Gio.Cancellable | null,
        ): DownloadStream;
        /**
         * Builds and returns the download URI for the given #GDataDocumentsDocument in the desired format. Note that directly downloading the document using
         * this URI isn't possible, as authentication is required. You should instead use gdata_download_stream_new() with the URI, and use the resulting
         * #GInputStream.
         *
         * `export_format` should be the file extension of the desired output format for the document, from the list accepted by Google Documents. For example:
         * %GDATA_DOCUMENTS_PRESENTATION_PDF, %GDATA_DOCUMENTS_SPREADSHEET_ODS or %GDATA_DOCUMENTS_TEXT_ODT.
         *
         * If the `export_format` is not recognised or not supported for this document, %NULL is returned.
         * @param export_format the format in which the document should be exported when downloaded
         * @returns the download URI, or %NULL; free with g_free()
         */
        get_download_uri(export_format: string): string | null;
        /**
         * Gets the URI of the thumbnail for the #GDataDocumentsDocument. If no thumbnail exists for the document, %NULL will be returned.
         *
         * The thumbnail may then be downloaded using a #GDataDownloadStream.
         *
         * <example>
         * <title>Downloading a Document Thumbnail</title>
         * <programlisting>
         * GDataDocumentsService *service;
         * const gchar *thumbnail_uri;
         * GCancellable *cancellable;
         * GdkPixbuf *pixbuf;
         * GError *error = NULL;
         *
         * service = get_my_documents_service ();
         * thumbnail_uri = gdata_documents_document_get_thumbnail_uri (my_document);
         * cancellable = g_cancellable_new ();
         *
         * /<!-- -->* Prepare a download stream *<!-- -->/
         * download_stream = GDATA_DOWNLOAD_STREAM (gdata_download_stream_new (GDATA_SERVICE (service), NULL, thumbnail_uri, cancellable));
         *
         * /<!-- -->* Download into a new GdkPixbuf. This can be cancelled using 'cancellable'. *<!-- -->/
         * pixbuf = gdk_pixbuf_new_from_stream (G_INPUT_STREAM (download_stream), NULL, &error);
         *
         * if (error != NULL) {
         * 	/<!-- -->* Handle the error. *<!-- -->/
         * 	g_error_free (error);
         * }
         *
         * g_object_unref (download_stream);
         * g_object_unref (cancellable);
         *
         * /<!-- -->* Do something with the GdkPixbuf. *<!-- -->/
         *
         * g_object_unref (pixbuf);
         * </programlisting>
         * </example>
         * @returns the URI of the document's thumbnail, or %NULL
         */
        get_thumbnail_uri(): string | null;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @returns a #GDataFeed of access control rules, or %NULL; unref with g_object_unref()
         */
        get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed. `self` and `service` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_access_handler_get_rules(), which is the synchronous version of this function, and gdata_service_query_async(), which
         * is the base asynchronous query function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_rules_async(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         */
        vfunc_get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsDrawing {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsDocument.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsDrawing structure are private and should never be accessed directly.
     */
    class DocumentsDrawing extends DocumentsDocument implements AccessHandler {
        static $gtype: GObject.GType<DocumentsDrawing>;

        // Constructors

        constructor(properties?: Partial<DocumentsDrawing.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsDrawing;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsDrive {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            name: string;
        }
    }

    class DocumentsDrive extends Entry {
        static $gtype: GObject.GType<DocumentsDrive>;

        // Properties

        /**
         * The human-readable name of this shared drive.
         */
        get name(): string;

        // Constructors

        constructor(properties?: Partial<DocumentsDrive.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Returns the human-readable name of this shared drive.
         * @returns the drives's human-readable name, or %NULL if not set
         */
        get_name(): string | null;
    }

    module DocumentsDriveQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {}
    }

    class DocumentsDriveQuery extends Query {
        static $gtype: GObject.GType<DocumentsDriveQuery>;

        // Constructors

        constructor(properties?: Partial<DocumentsDriveQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): DocumentsDriveQuery;
    }

    module DocumentsEntry {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps, AccessHandler.ConstructorProps {
            can_edit: boolean;
            canEdit: boolean;
            file_size: number;
            fileSize: number;
            is_deleted: boolean;
            isDeleted: boolean;
            last_modified_by: Author;
            lastModifiedBy: Author;
            last_viewed: number;
            lastViewed: number;
            quota_used: number;
            quotaUsed: number;
            resource_id: string;
            resourceId: string;
            shared_with_me_date: number;
            sharedWithMeDate: number;
            writers_can_invite: boolean;
            writersCanInvite: boolean;
        }
    }

    /**
     * All the fields in the #GDataDocumentsEntry structure are private and should never be accessed directly.
     */
    abstract class DocumentsEntry extends Entry implements AccessHandler {
        static $gtype: GObject.GType<DocumentsEntry>;

        // Properties

        /**
         * Indicates whether the current user can edit this file.
         */
        get can_edit(): boolean;
        /**
         * Indicates whether the current user can edit this file.
         */
        get canEdit(): boolean;
        /**
         * The size of the document. This is only set for non-document files.
         * Standard formats, such as #GDataDocumentsText,
         * #GDataDocumentsSpreadsheet and #GDataDocumentsFolder are not binary
         * data and so have no size. Measured in bytes.
         */
        get file_size(): number;
        /**
         * The size of the document. This is only set for non-document files.
         * Standard formats, such as #GDataDocumentsText,
         * #GDataDocumentsSpreadsheet and #GDataDocumentsFolder are not binary
         * data and so have no size. Measured in bytes.
         */
        get fileSize(): number;
        /**
         * Indicates whether the document entry has been deleted (moved to the trash). Deleted documents will only
         * appear in query results if the #GDataDocumentsQuery:show-deleted property is %TRUE.
         */
        get is_deleted(): boolean;
        set is_deleted(val: boolean);
        /**
         * Indicates whether the document entry has been deleted (moved to the trash). Deleted documents will only
         * appear in query results if the #GDataDocumentsQuery:show-deleted property is %TRUE.
         */
        get isDeleted(): boolean;
        set isDeleted(val: boolean);
        /**
         * Indicates the author of the last modification.
         */
        get last_modified_by(): Author;
        /**
         * Indicates the author of the last modification.
         */
        get lastModifiedBy(): Author;
        /**
         * The last time the document was viewed.
         */
        get last_viewed(): number;
        /**
         * The last time the document was viewed.
         */
        get lastViewed(): number;
        /**
         * The amount of user quota the document is occupying. Currently, only arbitrary files consume file space quota (whereas standard document
         * formats, such as #GDataDocumentsText, #GDataDocumentsSpreadsheet and #GDataDocumentsFolder don't). Measured in bytes.
         *
         * This property will be <code class="literal">0</code> for documents which aren't consuming any quota.
         */
        get quota_used(): number;
        /**
         * The amount of user quota the document is occupying. Currently, only arbitrary files consume file space quota (whereas standard document
         * formats, such as #GDataDocumentsText, #GDataDocumentsSpreadsheet and #GDataDocumentsFolder don't). Measured in bytes.
         *
         * This property will be <code class="literal">0</code> for documents which aren't consuming any quota.
         */
        get quotaUsed(): number;
        /**
         * The resource ID of the document. This should not normally need to be used in client code, and is mostly for internal use. To uniquely
         * identify a given document or folder, use its #GDataEntry:id.
         *
         * Resource IDs have the form:
         * <literal><replaceable>document|drawing|pdf|spreadsheet|presentation|folder</replaceable>:<replaceable>untyped resource ID</replaceable></literal>; whereas
         * entry IDs have the form:
         * <literal>https://docs.google.com/feeds/id/<replaceable>resource ID</replaceable></literal> in version 3 of the API.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#resource_ids_explained">Google Documents
         * API reference</ulink>.
         */
        get resource_id(): string;
        /**
         * The resource ID of the document. This should not normally need to be used in client code, and is mostly for internal use. To uniquely
         * identify a given document or folder, use its #GDataEntry:id.
         *
         * Resource IDs have the form:
         * <literal><replaceable>document|drawing|pdf|spreadsheet|presentation|folder</replaceable>:<replaceable>untyped resource ID</replaceable></literal>; whereas
         * entry IDs have the form:
         * <literal>https://docs.google.com/feeds/id/<replaceable>resource ID</replaceable></literal> in version 3 of the API.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#resource_ids_explained">Google Documents
         * API reference</ulink>.
         */
        get resourceId(): string;
        /**
         * The UNIX timestamp for the time at which this file was shared with the user.
         */
        get shared_with_me_date(): number;
        /**
         * The UNIX timestamp for the time at which this file was shared with the user.
         */
        get sharedWithMeDate(): number;
        /**
         * Indicates whether the document entry writers can invite others to edit the document.
         */
        get writers_can_invite(): boolean;
        set writers_can_invite(val: boolean);
        /**
         * Indicates whether the document entry writers can invite others to edit the document.
         */
        get writersCanInvite(): boolean;
        set writersCanInvite(val: boolean);

        // Constructors

        constructor(properties?: Partial<DocumentsEntry.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Inserts/updates `property` on "properties" list in `self`. Since, a GDataDocumentsProperty is uniquely identified by #GDataDocumentsProperty:key and #GDataDocumentsProperty:visibility, if no such property exists in the "properties" list, then a `property` will be appended to the list after incrementing the reference count.
         *
         * In case that there already exists a `property` in "properties", the #GDataDocumentsProperty inside the list will be updated to `property`. Note that #GDataDocumentsProperty:value has no role in determining the uniqueness of a #GDataDocumentsProperty.
         *
         * The changes made by this function will be local only and you need to explicitly update `self` by calling gdata_service_update_entry().
         * @param property a #GDataDocumentsProperty
         * @returns %TRUE if the @property doesn't exist in the "properties" list, or that #GDataDocumentsProperty:value  of @property has been set to %NULL by a call to gdata_documents_entry_remove_documents_property(). %FALSE if @property exists in "properties" list, or in the case that @self or @property aren't of proper types.
         */
        add_documents_property(property: DocumentsProperty): boolean;
        /**
         * Gets a list of the #GDataDocumentsPropertys for this entry.
         * @returns a #GList of pointers to #GDataDocumentsPropertys
         */
        get_document_properties(): DocumentsProperty[];
        /**
         * Gets the #GDataDocumentsEntry:file-size property.
         * @returns the size of the document in bytes
         */
        get_file_size(): number;
        /**
         * Gets the #GDataDocumentsEntry:last-modified-by property.
         * @returns the author who last modified the document
         */
        get_last_modified_by(): Author;
        /**
         * Gets the #GDataDocumentsEntry:last-viewed property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the document was last viewed, or <code class="literal">-1</code>
         */
        get_last_viewed(): number;
        /**
         * Builds a path for the #GDataDocumentsEntry, starting from a root node and traversing the folders containing the document, then ending with the
         * document's ID.
         *
         * An example path would be: <literal>/folder_id1/folder_id2/document_id</literal>.
         *
         * Note: the path is based on the entry/document IDs of the folders (#GDataEntry:id) and document (#GDataDocumentsEntry:document-id),
         * and not the entries' human-readable names (#GDataEntry:title).
         * @returns the folder hierarchy path containing the document, or %NULL; free with g_free()
         */
        get_path(): string;
        /**
         * Gets the #GDataDocumentsEntry:quota-used property.
         * @returns the number of quota bytes used by the document
         */
        get_quota_used(): number;
        /**
         * Gets the #GDataDocumentsEntry:resource-id property.
         * @returns the document's resource ID
         */
        get_resource_id(): string;
        /**
         * Gets the #GDataDocumentsEntry:shared-with-me-date property. If the property is unset, `-1` will be returned.
         * @returns the UNIX timestamp for the time at which this file was shared with the user, or `-1`
         */
        get_shared_with_me_date(): number;
        /**
         * The property specified by `property` will be removed from the "properties" list on `self`.
         *
         * Only #GDataDocumentsProperty:key and #GDataDocumentsProperty:visibility will be used to find `property` in "properties" list. #GDataDocumentsProperty:value has no role in determining the uniqueness of a #GDataDocumentsProperty.
         *
         * The changes made by this function will be local only and you need to explicitly update `self` by calling gdata_service_update_entry().
         * @param property a #GDataDocumentsProperty
         * @returns %TRUE if @property has been successfully removed from "properties" list on @self, %FALSE otherwise.
         */
        remove_documents_property(property: DocumentsProperty): boolean;
        /**
         * Sets the #GDataDocumentsEntry:writers-can-invite property to `writers_can_invite`.
         * @param writers_can_invite %TRUE if writers can invite other people to edit the document, %FALSE otherwise
         */
        set_writers_can_invite(writers_can_invite: boolean): void;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @returns a #GDataFeed of access control rules, or %NULL; unref with g_object_unref()
         */
        get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed. `self` and `service` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_access_handler_get_rules(), which is the synchronous version of this function, and gdata_service_query_async(), which
         * is the base asynchronous query function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_rules_async(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         */
        vfunc_get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsFeed {
        // Constructor properties interface

        interface ConstructorProps extends Feed.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsFeed structure are private and should never be accessed directly.
     */
    class DocumentsFeed extends Feed {
        static $gtype: GObject.GType<DocumentsFeed>;

        // Constructors

        constructor(properties?: Partial<DocumentsFeed.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;
    }

    module DocumentsFolder {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsEntry.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsFolder structure are private and should never be accessed directly.
     */
    class DocumentsFolder extends DocumentsEntry implements AccessHandler {
        static $gtype: GObject.GType<DocumentsFolder>;

        // Constructors

        constructor(properties?: Partial<DocumentsFolder.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsFolder;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @returns a #GDataFeed of access control rules, or %NULL; unref with g_object_unref()
         */
        get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed. `self` and `service` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_access_handler_get_rules(), which is the synchronous version of this function, and gdata_service_query_async(), which
         * is the base asynchronous query function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_rules_async(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         */
        vfunc_get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsMetadata {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            quota_total: number;
            quotaTotal: number;
            quota_used: number;
            quotaUsed: number;
        }
    }

    /**
     * All the fields in the #GDataDocumentsMetadata structure are private and should never be accessed directly.
     */
    class DocumentsMetadata extends Parsable {
        static $gtype: GObject.GType<DocumentsMetadata>;

        // Properties

        /**
         * The user quota limit across all services. Measured in bytes.
         */
        get quota_total(): number;
        /**
         * The user quota limit across all services. Measured in bytes.
         */
        get quotaTotal(): number;
        /**
         * The amount of user quota used up across all services. Measured in bytes.
         */
        get quota_used(): number;
        /**
         * The amount of user quota used up across all services. Measured in bytes.
         */
        get quotaUsed(): number;

        // Constructors

        constructor(properties?: Partial<DocumentsMetadata.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Gets the #GDataDocumentsMetadata:quota-total property.
         * @returns the number of quota bytes available in total. Returns -1 if               there is no quota limit.
         */
        get_quota_total(): number;
        /**
         * Gets the #GDataDocumentsMetadata:quota-used property.
         * @returns the number of quota bytes used by the documents service
         */
        get_quota_used(): number;
    }

    module DocumentsPdf {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsDocument.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsPdf structure are private and should never be accessed directly.
     */
    class DocumentsPdf extends DocumentsDocument implements AccessHandler {
        static $gtype: GObject.GType<DocumentsPdf>;

        // Constructors

        constructor(properties?: Partial<DocumentsPdf.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsPdf;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsPresentation {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsDocument.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsPresentation structure are private and should never be accessed directly.
     */
    class DocumentsPresentation extends DocumentsDocument implements AccessHandler {
        static $gtype: GObject.GType<DocumentsPresentation>;

        // Constructors

        constructor(properties?: Partial<DocumentsPresentation.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsPresentation;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsProperty {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            etag: string;
            key: string;
            value: string;
            visibility: string;
        }
    }

    /**
     * All the fields in the #GDataDocumentsProperty structure are private and should never be accessed directly.
     */
    class DocumentsProperty extends Parsable implements Comparable {
        static $gtype: GObject.GType<DocumentsProperty>;

        // Properties

        /**
         * ETag of the property.
         *
         * For more information, see the <ulink type="http" url="https://developers.google.com/drive/api/v2/reference/properties">Properties Resource</ulink>
         */
        get etag(): string;
        /**
         * The key of this property.
         *
         * For more information, see the <ulink type="http" url="https://developers.google.com/drive/api/v2/reference/properties">Properties Resource</ulink>
         */
        get key(): string;
        set key(val: string);
        /**
         * The value of this property. By default, it takes the an empty string ("").
         *
         * For more information, see the <ulink type="http" url="https://developers.google.com/drive/api/v2/reference/properties">Properties Resource</ulink>
         */
        get value(): string;
        set value(val: string);
        /**
         * The visibility status of this property. The default value of
         * visibility is PRIVATE on a Drive Properties Resource object,
         * hence #GDataDocumentsProperty:visibility is %GDATA_DOCUMENTS_PROPERTY_VISIBILITY_PRIVATE
         * by default. A private property restricts its visibility to only the app which created it.
         *
         * For more information, see the <ulink type="http" url="https://developers.google.com/drive/api/v2/reference/properties">Properties Resource</ulink>
         */
        get visibility(): string;
        set visibility(val: string);

        // Constructors

        constructor(properties?: Partial<DocumentsProperty.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](key: string): DocumentsProperty;

        // Methods

        /**
         * Returns the ETag of the property.
         * @returns the property's ETag. The ETag will never be empty; it's either %NULL or a valid ETag.
         */
        get_etag(): string;
        /**
         * Returns the key of the property. This will never be %NULL or an empty string ("").
         * @returns the property's key
         */
        get_key(): string;
        /**
         * Returns the value of the property.
         *
         * In the case that this value is %NULL, the Property Resource corresponding to `self` will be deleted from the properties array on a file's metadata, whereas in the case that it's empty string (""), it will be set as it is.
         * @returns the property's value. This can be %NULL or empty.
         */
        get_value(): string | null;
        /**
         * Returns the visibility status of the property.
         * @returns %GDATA_DOCUMENTS_PROPERTY_VISIBILITY_PUBLIC if the #GDataDocumentsProperty is publicly visible to other apps, %GDATA_DOCUMENTS_PROPERTY_VISIBILITY_PRIVATE if the #GDataDocumentsProperty is restricted to the application which created it.
         */
        get_visibility(): string;
        /**
         * Sets #GDataDocumentsProperty:value to `value,` corresponding to the key.
         *
         * In the case that `value` is %NULL, the Property Resource corresponding to `self` will be deleted from the properties array on a file's metadata, whereas in the case that it's empty string (""), it will be set as it is.
         * @param value the new value of the property
         */
        set_value(value?: string | null): void;
        /**
         * Sets #GDataDocumentsProperty:visibility to %GDATA_DOCUMENTS_PROPERTY_VISIBILITY_PUBLIC for
         * public properties and %GDATA_DOCUMENTS_PROPERTY_VISIBILITY_PRIVATE for
         * private properties (default).
         * @param visibility the new visibility status of the property
         */
        set_visibility(visibility: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module DocumentsQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {
            exact_title: boolean;
            exactTitle: boolean;
            folder_id: string;
            folderId: string;
            show_deleted: boolean;
            showDeleted: boolean;
            show_folders: boolean;
            showFolders: boolean;
            title: string;
        }
    }

    /**
     * All the fields in the #GDataDocumentsQuery structure are private and should never be accessed directly.
     */
    class DocumentsQuery extends Query {
        static $gtype: GObject.GType<DocumentsQuery>;

        // Properties

        /**
         * Specifies whether the query should search for an exact title match for the #GDataDocumentsQuery:title parameter.
         */
        get exact_title(): boolean;
        set exact_title(val: boolean);
        /**
         * Specifies whether the query should search for an exact title match for the #GDataDocumentsQuery:title parameter.
         */
        get exactTitle(): boolean;
        set exactTitle(val: boolean);
        /**
         * Specifies the ID of the folder in which to search.
         */
        get folder_id(): string;
        set folder_id(val: string);
        /**
         * Specifies the ID of the folder in which to search.
         */
        get folderId(): string;
        set folderId(val: string);
        /**
         * A shortcut to request all documents that have been deleted.
         */
        get show_deleted(): boolean;
        set show_deleted(val: boolean);
        /**
         * A shortcut to request all documents that have been deleted.
         */
        get showDeleted(): boolean;
        set showDeleted(val: boolean);
        /**
         * Specifies if the request also returns folders.
         */
        get show_folders(): boolean;
        set show_folders(val: boolean);
        /**
         * Specifies if the request also returns folders.
         */
        get showFolders(): boolean;
        set showFolders(val: boolean);
        /**
         * A title (or title fragment) to be searched for. If #GDataDocumentsQuery:exact-title is %TRUE, an exact
         * title match will be searched for, otherwise substring matches will also be returned.
         */
        get title(): string;
        set title(val: string);

        // Constructors

        constructor(properties?: Partial<DocumentsQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): DocumentsQuery;

        static new_with_limits(q: string | null, start_index: number, max_results: number): DocumentsQuery;

        // Methods

        /**
         * Add `email_address` as a #GDataGDEmailAddress to the list of collaborators whose edited documents will be queried.
         * @param email_address the e-mail address of the collaborator to add
         */
        add_collaborator(email_address: string): void;
        /**
         * Add `email_address` as a #GDataGDEmailAddress to the list of readers, the documents readable by whom will be queried.
         * @param email_address the e-mail address of the reader to add
         */
        add_reader(email_address: string): void;
        /**
         * Gets a list of #GDataGDEmailAddress<!-- -->es of the document collaborators whose documents will be queried.
         * @returns a list of #GDataGDEmailAddress<!-- -->es of the collaborators concerned by the query, or %NULL
         */
        get_collaborator_addresses(): GDEmailAddress[];
        /**
         * Gets the #GDataDocumentsQuery:exact-title property.
         * @returns %TRUE if the query matches the exact title of documents with #GDataDocumentsQuery:title, %FALSE otherwise
         */
        get_exact_title(): boolean;
        /**
         * Gets the #GDataDocumentsQuery:folder-id property.
         * @returns the ID of the folder to be queried, or %NULL
         */
        get_folder_id(): string;
        /**
         * Gets a list of #GDataGDEmailAddress<!-- -->es of the document readers whose documents will be queried.
         * @returns a list of #GDataGDEmailAddress<!-- -->es of the readers concerned by the query, or %NULL
         */
        get_reader_addresses(): GDEmailAddress[];
        /**
         * Gets the #GDataDocumentsQuery:title property.
         * @returns the title (or title fragment) being queried for, or %NULL
         */
        get_title(): string;
        /**
         * Sets the #GDataDocumentsQuery:folder-id property to `folder_id`.
         *
         * Set `folder_id` to %NULL to unset the property in the query URI.
         * @param folder_id the ID of the folder to be queried, or %NULL
         */
        set_folder_id(folder_id?: string | null): void;
        /**
         * Sets the #GDataDocumentsQuery:show_deleted property to `show_deleted`.
         * @param show_deleted %TRUE if the request should return deleted entries, %FALSE otherwise
         */
        set_show_deleted(show_deleted: boolean): void;
        /**
         * Sets the #GDataDocumentsQuery:show-folders property to show_folders.
         * @param show_folders %TRUE if the request should return folders, %FALSE otherwise
         */
        set_show_folders(show_folders: boolean): void;
        /**
         * Sets the #GDataDocumentsQuery:title property to `title`.
         *
         * Set `title` to %NULL to unset the property in the query URI.
         * @param title the title (or title fragment) to query for, or %NULL
         * @param exact_title %TRUE if the query should match the exact @title, %FALSE otherwise
         */
        set_title(title: string | null, exact_title: boolean): void;
    }

    module DocumentsService {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps, Batchable.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsService structure are private and should never be accessed directly.
     */
    class DocumentsService extends Service implements Batchable {
        static $gtype: GObject.GType<DocumentsService>;

        // Constructors

        constructor(properties?: Partial<DocumentsService.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](authorizer?: Authorizer | null): DocumentsService;

        // Static methods

        /**
         * The primary #GDataAuthorizationDomain for interacting with Google Documents. This will not normally need to be used, as it's used internally
         * by the #GDataDocumentsService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_primary_authorization_domain(): AuthorizationDomain;
        /**
         * The #GDataAuthorizationDomain for interacting with spreadsheet data. This will not normally need to be used, as it's automatically used internally
         * by the #GDataDocumentsService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests which pertain to the Google Spreadsheets Data API, such as
         * requests to download or upload spreadsheet documents.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_spreadsheet_authorization_domain(): AuthorizationDomain;
        /**
         * Gets the upload URI for documents for the service.
         *
         * If `folder` is %NULL, the URI will be the one to upload documents to the "root" folder.
         * @param folder the #GDataDocumentsFolder into which to upload the document, or %NULL
         */
        static get_upload_uri(folder?: DocumentsFolder | null): string;

        // Methods

        /**
         * Add the given `entry` to the specified `folder,` and return an updated #GDataDocumentsEntry for `entry`. If the `entry` is already in another folder,
         * a copy will be added to the new folder. The copy and original will have different IDs. Note that `entry` can't be a #GDataDocumentsFolder that
         * already exists on the server. It can be a new #GDataDocumentsFolder, or a #GDataDocumentsDocument that is either new or already present on the
         * server.
         *
         * Errors from #GDataServiceError can be returned for exceptional conditions, as determined by the server.
         * @param entry the #GDataDocumentsEntry to copy
         * @param folder the #GDataDocumentsFolder to copy @entry into
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataDocumentsEntry, or %NULL; unref with g_object_unref()
         */
        add_entry_to_folder(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
        ): DocumentsEntry;
        /**
         * Add the given `entry` to the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_add_entry_to_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_add_entry_to_folder_finish() to get the results
         * of the operation.
         * @param entry the #GDataDocumentsEntry to add to @folder
         * @param folder the #GDataDocumentsFolder to add @entry to
         * @param cancellable optional #GCancellable object, or %NULL
         */
        add_entry_to_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
        ): Promise<DocumentsEntry>;
        /**
         * Add the given `entry` to the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_add_entry_to_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_add_entry_to_folder_finish() to get the results
         * of the operation.
         * @param entry the #GDataDocumentsEntry to add to @folder
         * @param folder the #GDataDocumentsFolder to add @entry to
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        add_entry_to_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Add the given `entry` to the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_add_entry_to_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_add_entry_to_folder_finish() to get the results
         * of the operation.
         * @param entry the #GDataDocumentsEntry to add to @folder
         * @param folder the #GDataDocumentsFolder to add @entry to
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        add_entry_to_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<DocumentsEntry> | void;
        /**
         * Finish an asynchronous operation to add a #GDataDocumentsEntry to a folder started with gdata_documents_service_add_entry_to_folder_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataDocumentsEntry, or %NULL; unref with g_object_unref()
         */
        add_entry_to_folder_finish(async_result: Gio.AsyncResult): DocumentsEntry;
        /**
         * Copy the given `document,` producing a duplicate document in the same folder and returning its #GDataDocumentsDocument.
         *
         * Errors from #GDataServiceError can be returned for exceptional conditions, as determined by the server.
         * @param document the #GDataDocumentsDocument to copy
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the duplicate #GDataDocumentsDocument, or %NULL; unref with g_object_unref()
         */
        copy_document(document: DocumentsDocument, cancellable?: Gio.Cancellable | null): DocumentsDocument;
        /**
         * Copy the given `document,` producing a duplicate document in the same folder and returning its #GDataDocumentsDocument. `self` and `document` are
         * both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_documents_service_copy_document(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_copy_document_finish() to get the results
         * of the operation.
         * @param document the #GDataDocumentsDocument to copy
         * @param cancellable optional #GCancellable object, or %NULL
         */
        copy_document_async(
            document: DocumentsDocument,
            cancellable?: Gio.Cancellable | null,
        ): Promise<DocumentsDocument>;
        /**
         * Copy the given `document,` producing a duplicate document in the same folder and returning its #GDataDocumentsDocument. `self` and `document` are
         * both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_documents_service_copy_document(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_copy_document_finish() to get the results
         * of the operation.
         * @param document the #GDataDocumentsDocument to copy
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        copy_document_async(
            document: DocumentsDocument,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Copy the given `document,` producing a duplicate document in the same folder and returning its #GDataDocumentsDocument. `self` and `document` are
         * both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_documents_service_copy_document(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_copy_document_finish() to get the results
         * of the operation.
         * @param document the #GDataDocumentsDocument to copy
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        copy_document_async(
            document: DocumentsDocument,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<DocumentsDocument> | void;
        /**
         * Finish an asynchronous operation to copy a #GDataDocumentsDocument started with gdata_documents_service_copy_document_async().
         * @param async_result a #GAsyncResult
         * @returns the duplicate #GDataDocumentsDocument, or %NULL; unref with g_object_unref()
         */
        copy_document_finish(async_result: Gio.AsyncResult): DocumentsDocument;
        /**
         * Finish off a document upload or update operation started by gdata_documents_service_upload_document() or gdata_documents_service_update_document(),
         * parsing the result and returning the new or updated #GDataDocumentsDocument.
         *
         * If an error occurred during the upload or update operation, it will have been returned during the operation (e.g. by g_output_stream_splice() or one
         * of the other stream methods). In such a case, %NULL will be returned but `error` will remain unset. `error` is only set in the case that the server
         * indicates that the operation was successful, but an error is encountered in parsing the result sent by the server.
         *
         * In the case that no #GDataDocumentsDocument was passed (to gdata_documents_service_upload_document() or gdata_documents_service_update_document())
         * when starting the operation, %GDATA_DOCUMENTS_SERVICE_ERROR_INVALID_CONTENT_TYPE will be thrown in `error` if the content type of the uploaded data
         * could not be mapped to a document type with which to interpret the response from the server.
         * @param upload_stream the #GDataUploadStream from the operation
         * @returns the new or updated #GDataDocumentsDocument, or %NULL; unref with g_object_unref()
         */
        finish_upload(upload_stream: UploadStream): DocumentsDocument;
        /**
         * Gets a #GDataDocumentsMetadata object containing metadata about the documents
         * service itself, like how large the user quota is.
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the service's metadata object; unref with g_object_unref()
         */
        get_metadata(cancellable?: Gio.Cancellable | null): DocumentsMetadata;
        /**
         * Gets a #GDataDocumentsMetadata object containing metadata about the documents
         * service itself, like how large the user quota is.
         *
         * For more details, see gdata_documents_service_get_metadata(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_get_metadata_finish() to get the results
         * of the operation.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        get_metadata_async(cancellable?: Gio.Cancellable | null): Promise<DocumentsMetadata>;
        /**
         * Gets a #GDataDocumentsMetadata object containing metadata about the documents
         * service itself, like how large the user quota is.
         *
         * For more details, see gdata_documents_service_get_metadata(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_get_metadata_finish() to get the results
         * of the operation.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        get_metadata_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void;
        /**
         * Gets a #GDataDocumentsMetadata object containing metadata about the documents
         * service itself, like how large the user quota is.
         *
         * For more details, see gdata_documents_service_get_metadata(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_get_metadata_finish() to get the results
         * of the operation.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        get_metadata_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<DocumentsMetadata> | void;
        /**
         * Finish an asynchronous operation to get a #GDataDocumentsMetadata started with gdata_documents_service_get_metadata_async().
         * @param async_result a #GAsyncResult
         * @returns the service's metadata object; unref with g_object_unref()
         */
        get_metadata_finish(async_result: Gio.AsyncResult): DocumentsMetadata;
        /**
         * Queries the service to return a list of documents matching the given `query`. Note that `query` has to be a #GDataDocumentsQuery, rather than just
         * a #GDataQuery, as it uses the folder ID specified in #GDataDocumentsQuery:folder-id.
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataDocumentsQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataDocumentsFeed of query results; unref with g_object_unref()
         */
        query_documents(
            query?: DocumentsQuery | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): DocumentsFeed;
        /**
         * Queries the service to return a list of documents matching the given `query`. `self` and
         * `query` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_documents_service_query_documents(), which is the synchronous version of this function,
         * and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataDocumentsQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_documents_async(
            query?: DocumentsQuery | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of shared drives matching the given `query`.
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataDocumentsDriveQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataDocumentsFeed of query results; unref with g_object_unref()
         */
        query_drives(
            query?: DocumentsDriveQuery | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): DocumentsFeed;
        /**
         * Queries the service to return a list of shared drives matching the given `query`. `self` and
         * `query` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_documents_service_query_drives(), which is the synchronous version of this function,
         * and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataDocumentsDriveQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_drives_async(
            query?: DocumentsDriveQuery | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Remove the given `entry` from `folder,` and return an updated #GDataDocumentsEntry for `entry`. `entry` will remain a member of any other folders it's
         * currently in. Note that `entry` can be either a #GDataDocumentsDocument or a #GDataDocumentsFolder.
         *
         * Errors from #GDataServiceError can be returned for exceptional conditions, as determined by the server.
         * @param entry the #GDataDocumentsEntry to remove
         * @param folder the #GDataDocumentsFolder from which we should remove @entry
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataDocumentsEntry, or %NULL; unref with g_object_unref()
         */
        remove_entry_from_folder(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
        ): DocumentsEntry;
        /**
         * Remove the given `entry` from the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_remove_entry_from_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_remove_entry_from_folder_finish() to get the
         * results of the operation.
         * @param entry the #GDataDocumentsEntry to remove from @folder
         * @param folder the #GDataDocumentsFolder to remove @entry from
         * @param cancellable optional #GCancellable object, or %NULL
         */
        remove_entry_from_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
        ): Promise<DocumentsEntry>;
        /**
         * Remove the given `entry` from the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_remove_entry_from_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_remove_entry_from_folder_finish() to get the
         * results of the operation.
         * @param entry the #GDataDocumentsEntry to remove from @folder
         * @param folder the #GDataDocumentsFolder to remove @entry from
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        remove_entry_from_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Remove the given `entry` from the specified `folder`. `self,` `entry` and `folder` are all reffed when this function is called, so can safely be unreffed
         * after this function returns.
         *
         * For more details, see gdata_documents_service_remove_entry_from_folder(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_documents_service_remove_entry_from_folder_finish() to get the
         * results of the operation.
         * @param entry the #GDataDocumentsEntry to remove from @folder
         * @param folder the #GDataDocumentsFolder to remove @entry from
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished, or %NULL
         */
        remove_entry_from_folder_async(
            entry: DocumentsEntry,
            folder: DocumentsFolder,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<DocumentsEntry> | void;
        /**
         * Finish an asynchronous operation to remove a #GDataDocumentsEntry from a folder started with
         * gdata_documents_service_remove_entry_from_folder_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataDocumentsEntry, or %NULL; unref with g_object_unref()
         */
        remove_entry_from_folder_finish(async_result: Gio.AsyncResult): DocumentsEntry;
        /**
         * Update the document using the properties from `document` and the document data written to the resulting #GDataUploadStream. If the document data does
         * not need to be changed, just the metadata, use gdata_service_update_entry() instead.
         *
         * This performs a non-resumable upload, unlike gdata_documents_service_update_document(). This means that errors during transmission will cause the
         * upload to fail, and the entire document will have to be re-uploaded. It is recommended that gdata_documents_service_update_document_resumable()
         * be used instead.
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_documents_service_finish_upload() should be called on it to parse and return the updated
         * #GDataDocumentsDocument for the document. This must be done, as `document` isn't updated in-place.
         *
         * In order to cancel the update, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire update; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         *
         * For more information, see gdata_service_update_entry().
         * @param document the #GDataDocumentsDocument to update
         * @param slug the filename to give to the uploaded document
         * @param content_type the content type of the uploaded data
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the document data to; unref with g_object_unref()
         */
        update_document(
            document: DocumentsDocument,
            slug: string,
            content_type: string,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;
        /**
         * Update the document using the properties from `document` and the document data written to the resulting #GDataUploadStream. If the document data does
         * not need to be changed, just the metadata, use gdata_service_update_entry() instead.
         *
         * Unlike gdata_documents_service_update_document(), this method performs a
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/resumable_upload.html">resumable upload</ulink> which allows for correction of
         * transmission errors without re-uploading the entire file. Use of this method is preferred over gdata_documents_service_update_document().
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_documents_service_finish_upload() should be called on it to parse and return the updated
         * #GDataDocumentsDocument for the document. This must be done, as `document` isn't updated in-place.
         *
         * In order to cancel the update, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire update; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         *
         * For more information, see gdata_service_update_entry().
         * @param document the #GDataDocumentsDocument to update
         * @param slug the filename to give to the uploaded document
         * @param content_type the content type of the uploaded data
         * @param content_length the size (in bytes) of the file being uploaded
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the document data to; unref with g_object_unref()
         */
        update_document_resumable(
            document: DocumentsDocument,
            slug: string,
            content_type: string,
            content_length: number,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;
        /**
         * Uploads a document to Google Documents, using the properties from `document` and the document data written to the resulting #GDataUploadStream. If
         * the document data does not need to be provided at the moment, just the metadata, use gdata_service_insert_entry() instead (e.g. in the case of
         * creating a new, empty file to be edited at a later date).
         *
         * This performs a non-resumable upload, unlike gdata_documents_service_upload_document(). This means that errors during transmission will cause the
         * upload to fail, and the entire document will have to be re-uploaded. It is recommended that gdata_documents_service_upload_document_resumable()
         * be used instead.
         *
         * If `document` is %NULL, only the document data will be uploaded. The new document entry will be named using `slug,` and will have default metadata.
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_documents_service_finish_upload() should be called on it to parse and return the updated
         * #GDataDocumentsDocument for the document. This must be done, as `document` isn't updated in-place.
         *
         * In order to cancel the upload, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire upload; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         * @param document the #GDataDocumentsDocument to insert, or %NULL
         * @param slug the filename to give to the uploaded document
         * @param content_type the content type of the uploaded data
         * @param folder the folder to which the document should be uploaded, or %NULL
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the document data to, or %NULL; unref with g_object_unref()
         */
        upload_document(
            document: DocumentsDocument | null,
            slug: string,
            content_type: string,
            folder?: DocumentsFolder | null,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;
        /**
         * Uploads a document to Google Documents, using the properties from `document` and the document data written to the resulting #GDataUploadStream. If
         * the document data does not need to be provided at the moment, just the metadata, use gdata_service_insert_entry() instead (e.g. in the case of
         * creating a new, empty file to be edited at a later date).
         *
         * Unlike gdata_documents_service_upload_document(), this method performs a
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/resumable_upload.html">resumable upload</ulink> which allows for correction of
         * transmission errors without re-uploading the entire file. Use of this method is preferred over gdata_documents_service_upload_document().
         *
         * If `document` is %NULL, only the document data will be uploaded. The new document entry will be named using `slug,` and will have default metadata.
         *
         * If non-%NULL, the `query` specifies parameters for the upload, such as a #GDataDocumentsFolder to upload the document into; and whether to treat
         * the document as an opaque file, or convert it to a standard format. If `query` is %NULL, the document will be uploaded into the root folder, and
         * automatically converted to a standard format. No OCR or automatic language translation will be performed by default.
         *
         * If `query` is non-%NULL and #GDataDocumentsUploadQuery:convert is %FALSE, `document` must be an instance of #GDataDocumentsDocument. Otherwise,
         * `document` must be a subclass of it, such as #GDataDocumentsPresentation.
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_documents_service_finish_upload() should be called on it to parse and return the updated
         * #GDataDocumentsDocument for the document. This must be done, as `document` isn't updated in-place.
         *
         * In order to cancel the upload, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire upload; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         * @param document the #GDataDocumentsDocument to insert, or %NULL
         * @param slug the filename to give to the uploaded document
         * @param content_type the content type of the uploaded data
         * @param content_length the size (in bytes) of the file being uploaded
         * @param query a query specifying parameters for the upload, or %NULL
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the document data to, or %NULL; unref with g_object_unref()
         */
        upload_document_resumable(
            document: DocumentsDocument | null,
            slug: string,
            content_type: string,
            content_length: number,
            query?: DocumentsUploadQuery | null,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;

        // Inherited properties
        /**
         * An object which implements #GDataAuthorizer. This should have previously been authenticated authorized against this service type (and
         * potentially other service types). The service will use the authorizer to add an authorization token to each request it performs.
         *
         * Your application should call methods on the #GDataAuthorizer object itself in order to authenticate with the Google accounts service and
         * authorize against this service type. See the documentation for the particular #GDataAuthorizer implementation being used for more details.
         *
         * The authorizer for a service can be changed at runtime for a different #GDataAuthorizer object or %NULL without affecting ongoing requests
         * and operations.
         *
         * Note that it's only necessary to set an authorizer on the service if your application is going to make requests of the service which
         * require authorization. For example, listing the current most popular videos on YouTube does not require authorization, but uploading a
         * video to YouTube does. It's an unnecessary overhead to require the user to authorize against a service when not strictly required.
         */
        get authorizer(): Authorizer;
        set authorizer(val: Authorizer);
        /**
         * The locale to use for network requests, in Unix locale format. (e.g. "en_GB", "cs", "de_DE".) Use %NULL for the default "C" locale
         * (typically "en_US").
         *
         * Typically, this locale will be used by the server-side software to localise results, such as by translating category names, or by choosing
         * geographically relevant search results. This will vary from service to service.
         *
         * The server-side behaviour is undefined if it doesn't support a given locale.
         */
        get locale(): string;
        set locale(val: string);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxy_resolver(): Gio.ProxyResolver;
        set proxy_resolver(val: Gio.ProxyResolver);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxyResolver(): Gio.ProxyResolver;
        set proxyResolver(val: Gio.ProxyResolver);
        /**
         * A timeout, in seconds, for network operations. If the timeout is exceeded, the operation will be cancelled and
         * %GDATA_SERVICE_ERROR_NETWORK_ERROR will be returned.
         *
         * If the timeout is <code class="literal">0</code>, operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         */
        get timeout(): number;
        set timeout(val: number);

        // Inherited methods
        /**
         * Creates a new #GDataBatchOperation for the given #GDataBatchable service, and with the given `feed_uri`. `feed_uri` is normally the %GDATA_LINK_BATCH
         * link URI in the appropriate #GDataFeed from the service. If authorization will be required to perform any of the requests in the batch operation,
         * `domain` must be non-%NULL, and must be an authorization domain which covers all of the requests. Otherwise, `domain` may be %NULL if authorization
         * is not required.
         * @param domain the #GDataAuthorizationDomain to authorize the operation, or %NULL
         * @param feed_uri the URI to send the batch operation request to
         * @returns a new #GDataBatchOperation; unref with g_object_unref()
         */
        create_operation(domain: AuthorizationDomain | null, feed_uri: string): BatchOperation;
        /**
         * Deletes `entry` from the server. For more information about the concept of deleting entries, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#DeletingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the deletion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error deleting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous entry deletion operation started with gdata_service_delete_entry_async().
         * @param async_result a #GAsyncResult
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Gets the #GDataAuthorizer object currently in use by the service. See the documentation for #GDataService:authorizer for more details.
         * @returns the authorizer object for this service, or %NULL
         */
        get_authorizer(): Authorizer;
        /**
         * Returns the locale currently being used for network requests, or %NULL if the locale is the default.
         * @returns the current locale
         */
        get_locale(): string;
        /**
         * Gets the #GProxyResolver on the #GDataService's #SoupSession.
         * @returns a #GProxyResolver, or %NULL
         */
        get_proxy_resolver(): Gio.ProxyResolver | null;
        /**
         * Gets the #GDataService:timeout property; the network timeout, in seconds.
         * @returns the timeout, or <code class="literal">0</code>
         */
        get_timeout(): number;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. For more information about the concept of inserting entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#InsertingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the insertion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If the entry is marked as already having been inserted a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned immediately
         * (there will be no network requests).
         *
         * If there is an error inserting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry insertion operation started with gdata_service_insert_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Determines whether the service is authorized for all the #GDataAuthorizationDomains it belongs to (as returned by
         * gdata_service_get_authorization_domains()). If the service's #GDataService:authorizer is %NULL, %FALSE is always returned.
         *
         * This is basically a convenience method for checking that the service's #GDataAuthorizer is authorized for all the service's
         * #GDataAuthorizationDomains.
         * @returns %TRUE if the service is authorized for all its domains, %FALSE otherwise
         */
        is_authorized(): boolean;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the query will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query, but subclasses may override
         * this and return their own errors. See their documentation for more details.
         *
         * For each entry in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         *
         * If the query is successful and the feed supports pagination, `query` will be updated with the pagination URIs, and the next or previous page
         * can then be loaded by calling gdata_query_next_page() or gdata_query_previous_page() before running the query again.
         *
         * If the #GDataQuery's ETag is set and it finds a match on the server, %NULL will be returned, but `error` will remain unset. Otherwise,
         * `query'`s ETag will be updated with the ETag from the returned feed, if available.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed>;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed> | void;
        /**
         * Finishes an asynchronous query operation started with gdata_service_query_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_finish(async_result: Gio.AsyncResult): Feed;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id().
         *
         * Parameters and errors are as for gdata_service_query(). Most of the properties of `query` aren't relevant, and
         * will cause a server-side error if used. The most useful property to use is #GDataQuery:etag, which will cause the
         * server to not return anything if the entry hasn't been modified since it was given the specified ETag; thus saving
         * bandwidth. If the server does not return anything for this reason, gdata_service_query_single_entry() will return
         * %NULL, but will not set an error in `error`.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable a #GCancellable, or %NULL
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous query operation for a single entry, as started with gdata_service_query_single_entry_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Sets #GDataService:authorizer to `authorizer`. This may be %NULL if the service will only make requests in future which don't require authorization.
         * See the documentation for #GDataService:authorizer for more information.
         * @param authorizer a new authorizer object for the service, or %NULL
         */
        set_authorizer(authorizer: Authorizer): void;
        /**
         * Set the locale used for network requests to `locale,` given in standard Unix locale format. See #GDataService:locale for more details.
         *
         * Note that while it's possible to change the locale after sending network requests, it is unsupported, as the server-side software may behave
         * unexpectedly. The only supported use of this function is after creation of a service, but before any network requests are made.
         * @param locale the new locale in Unix locale format, or %NULL for the default locale
         */
        set_locale(locale?: string | null): void;
        /**
         * Sets the #GProxyResolver on the #SoupSession used internally by the given #GDataService.
         * @param proxy_resolver a #GProxyResolver, or %NULL
         */
        set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void;
        /**
         * Sets the #GDataService:timeout property; the network timeout, in seconds.
         *
         * If `timeout` is <code class="literal">0</code>, network operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         * @param timeout the timeout, or <code class="literal">0</code>
         */
        set_timeout(timeout: number): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. For more information about the concept of updating entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#UpdatingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the update will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error updating the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): Entry;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry update operation started with gdata_service_update_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry_finish(async_result: Gio.AsyncResult): Entry;
        vfunc_append_query_headers(domain: AuthorizationDomain, message: Soup.Message): void;
        vfunc_parse_error_response(
            operation_type: OperationType,
            status: number,
            reason_phrase: string,
            response_body: string,
            length: number,
        ): void;
    }

    module DocumentsSpreadsheet {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsDocument.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsSpreadsheet structure are private and should never be accessed directly.
     */
    class DocumentsSpreadsheet extends DocumentsDocument implements AccessHandler {
        static $gtype: GObject.GType<DocumentsSpreadsheet>;

        // Constructors

        constructor(properties?: Partial<DocumentsSpreadsheet.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsSpreadsheet;

        // Methods

        /**
         * Builds and returns the download URI for the given #GDataDocumentsSpreadsheet in the desired format. Note that directly downloading
         * the document using this URI isn't possible, as authentication is required. You should instead use gdata_download_stream_new() with
         * the URI, and use the resulting #GInputStream.
         *
         * When requesting a <code class="literal">"csv"</code>, <code class="literal">"tsv"</code>, <code class="literal">"pdf"</code> or
         * <code class="literal">"html"</code> file you may specify an additional parameter called `gid` which indicates which grid, or sheet, you wish to get
         * (the index is <code class="literal">0</code>-based, so GID <code class="literal">1</code> actually refers to the second sheet on a given
         * spreadsheet).
         * @param export_format the format in which the spreadsheet should be exported when downloaded
         * @param gid the <code class="literal">0</code>-based sheet ID to download, or <code class="literal">-1</code>
         * @returns the download URI; free with g_free()
         */
        get_download_uri(export_format: string, gid: number): string;
        // Conflicted with GData.DocumentsDocument.get_download_uri
        get_download_uri(...args: never[]): any;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsText {
        // Constructor properties interface

        interface ConstructorProps extends DocumentsDocument.ConstructorProps, AccessHandler.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataDocumentsText structure are private and should never be accessed directly.
     */
    class DocumentsText extends DocumentsDocument implements AccessHandler {
        static $gtype: GObject.GType<DocumentsText>;

        // Constructors

        constructor(properties?: Partial<DocumentsText.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): DocumentsText;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module DocumentsUploadQuery {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            convert: boolean;
            folder: DocumentsFolder;
        }
    }

    /**
     * All the fields in the #GDataDocumentsUploadQuery structure are private and should never be accessed directly.
     */
    class DocumentsUploadQuery extends GObject.Object {
        static $gtype: GObject.GType<DocumentsUploadQuery>;

        // Properties

        /**
         * %TRUE to automatically convert the uploaded document into a standard format (such as a text document, spreadsheet, presentation, etc.).
         * %FALSE to upload the document without converting it; this allows for arbitrary files to be uploaded to Google Documents.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#creating_or_uploading_files">online documentation</ulink>.
         *
         * Note that uploading with this property set to %FALSE will only have an effect when using gdata_documents_service_update_document_resumable()
         * and not gdata_documents_service_update_document(). Additionally, the #GDataDocumentsDocument passed to
         * gdata_documents_service_update_document_resumable() must be a #GDataDocumentsDocument if this property is %FALSE, and a subclass of it
         * otherwise.
         */
        get convert(): boolean;
        set convert(val: boolean);
        /**
         * Folder to upload the document into. If this is %NULL, the document will be uploaded into the root folder.
         */
        get folder(): DocumentsFolder;
        set folder(val: DocumentsFolder);

        // Constructors

        constructor(properties?: Partial<DocumentsUploadQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](): DocumentsUploadQuery;

        // Methods

        /**
         * Builds an upload URI suitable for passing to gdata_upload_stream_new_resumable() in order to upload a document to Google Documents as described in
         * the
         * <ulink type="http" url="https://developers.google.com/google-apps/documents-list/#uploading_a_new_document_or_file_with_both_metadata_and_content">
         * online documentation</ulink>.
         * @returns a complete upload URI; free with g_free()
         */
        build_uri(): string;
        /**
         * Gets #GDataDocumentsUploadQuery:convert.
         * @returns %TRUE to convert documents to common formats, %FALSE to upload them unmodified
         */
        get_convert(): boolean;
        /**
         * Gets #GDataDocumentsUploadQuery:folder.
         * @returns the folder to upload into, or %NULL
         */
        get_folder(): DocumentsFolder | null;
        /**
         * Sets #GDataDocumentsUploadQuery:convert to `convert`.
         * @param convert %TRUE to convert documents to common formats, %FALSE to upload them unmodified
         */
        set_convert(convert: boolean): void;
        /**
         * Sets #GDataDocumentsUploadQuery:folder to `folder`.
         * @param folder a new folder to upload into, or %NULL
         */
        set_folder(folder?: DocumentsFolder | null): void;
    }

    module DownloadStream {
        // Constructor properties interface

        interface ConstructorProps extends Gio.InputStream.ConstructorProps, Gio.Seekable.ConstructorProps {
            authorization_domain: AuthorizationDomain;
            authorizationDomain: AuthorizationDomain;
            cancellable: Gio.Cancellable;
            content_length: number;
            contentLength: number;
            content_type: string;
            contentType: string;
            download_uri: string;
            downloadUri: string;
            service: Service;
        }
    }

    /**
     * All the fields in the #GDataDownloadStream structure are private and should never be accessed directly.
     */
    class DownloadStream extends Gio.InputStream implements Gio.Seekable {
        static $gtype: GObject.GType<DownloadStream>;

        // Properties

        /**
         * The authorization domain for the download, against which the #GDataService:authorizer for the #GDataDownloadStream:service should be
         * authorized. This may be %NULL if authorization is not needed for the download.
         */
        get authorization_domain(): AuthorizationDomain;
        /**
         * The authorization domain for the download, against which the #GDataService:authorizer for the #GDataDownloadStream:service should be
         * authorized. This may be %NULL if authorization is not needed for the download.
         */
        get authorizationDomain(): AuthorizationDomain;
        /**
         * An optional cancellable used to cancel the entire download operation. If a #GCancellable instance isn't provided for this property at
         * construction time (i.e. to gdata_download_stream_new()), one will be created internally and can be retrieved using
         * gdata_download_stream_get_cancellable() and used to cancel the download operation with g_cancellable_cancel() just as if it was passed to
         * gdata_download_stream_new().
         *
         * If the download operation is cancelled using this #GCancellable, any ongoing network activity will be stopped, and any pending or future
         * calls to #GInputStream API on the #GDataDownloadStream will return %G_IO_ERROR_CANCELLED. Note that the #GCancellable objects which can be
         * passed to individual #GInputStream operations will not cancel the download operation proper if cancelled — they will merely cancel that API
         * call. The only way to cancel the download operation completely is using #GDataDownloadStream:cancellable.
         */
        get cancellable(): Gio.Cancellable;
        /**
         * The length (in bytes) of the file being downloaded. This will initially be <code class="literal">-1</code>, and will be populated as soon as
         * the appropriate header is received from the server. Its value will never change after this.
         *
         * Note that change notifications for this property (#GObject::notify emissions) may be emitted in threads other than the one which created
         * the #GDataDownloadStream. It is the client's responsibility to ensure that any notification signal handlers are either multi-thread safe
         * or marshal the notification to the thread which owns the #GDataDownloadStream as appropriate.
         */
        get content_length(): number;
        /**
         * The length (in bytes) of the file being downloaded. This will initially be <code class="literal">-1</code>, and will be populated as soon as
         * the appropriate header is received from the server. Its value will never change after this.
         *
         * Note that change notifications for this property (#GObject::notify emissions) may be emitted in threads other than the one which created
         * the #GDataDownloadStream. It is the client's responsibility to ensure that any notification signal handlers are either multi-thread safe
         * or marshal the notification to the thread which owns the #GDataDownloadStream as appropriate.
         */
        get contentLength(): number;
        /**
         * The content type of the file being downloaded. This will initially be %NULL, and will be populated as soon as the appropriate header is
         * received from the server. Its value will never change after this.
         *
         * Note that change notifications for this property (#GObject::notify emissions) may be emitted in threads other than the one which created
         * the #GDataDownloadStream. It is the client's responsibility to ensure that any notification signal handlers are either multi-thread safe
         * or marshal the notification to the thread which owns the #GDataDownloadStream as appropriate.
         */
        get content_type(): string;
        /**
         * The content type of the file being downloaded. This will initially be %NULL, and will be populated as soon as the appropriate header is
         * received from the server. Its value will never change after this.
         *
         * Note that change notifications for this property (#GObject::notify emissions) may be emitted in threads other than the one which created
         * the #GDataDownloadStream. It is the client's responsibility to ensure that any notification signal handlers are either multi-thread safe
         * or marshal the notification to the thread which owns the #GDataDownloadStream as appropriate.
         */
        get contentType(): string;
        /**
         * The URI of the file to download. This must be HTTPS.
         */
        get download_uri(): string;
        /**
         * The URI of the file to download. This must be HTTPS.
         */
        get downloadUri(): string;
        /**
         * The service which is used to authorize the download, and to which the download relates.
         */
        get service(): Service;

        // Constructors

        constructor(properties?: Partial<DownloadStream.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            service: Service,
            domain: AuthorizationDomain | null,
            download_uri: string,
            cancellable?: Gio.Cancellable | null,
        ): DownloadStream;

        // Methods

        /**
         * Gets the authorization domain used to authorize the download, as passed to gdata_download_stream_new(). It may be %NULL if authorization is not
         * needed for the download.
         * @returns the #GDataAuthorizationDomain used to authorize the download, or %NULL
         */
        get_authorization_domain(): AuthorizationDomain | null;
        /**
         * Gets the #GCancellable for the entire download operation, #GDataDownloadStream:cancellable.
         * @returns the #GCancellable for the entire download operation
         */
        get_cancellable(): Gio.Cancellable;
        /**
         * Gets the length (in bytes) of the file being downloaded. If the <literal>Content-Length</literal> header has not yet
         * been received from the server, <code class="literal">-1</code> will be returned.
         * @returns the content length of the file being downloaded, or <code class="literal">-1</code>
         */
        get_content_length(): number;
        /**
         * Gets the content type of the file being downloaded. If the <literal>Content-Type</literal> header has not yet
         * been received, %NULL will be returned.
         * @returns the content type of the file being downloaded, or %NULL
         */
        get_content_type(): string;
        /**
         * Gets the URI of the file being downloaded, as passed to gdata_download_stream_new().
         * @returns the URI of the file being downloaded
         */
        get_download_uri(): string;
        /**
         * Gets the service used to authorize the download, as passed to gdata_download_stream_new().
         * @returns the #GDataService used to authorize the download
         */
        get_service(): Service;

        // Inherited methods
        /**
         * Tests if the stream supports the #GSeekableIface.
         * @returns %TRUE if @seekable can be seeked. %FALSE otherwise.
         */
        can_seek(): boolean;
        /**
         * Tests if the length of the stream can be adjusted with
         * g_seekable_truncate().
         * @returns %TRUE if the stream can be truncated, %FALSE otherwise.
         */
        can_truncate(): boolean;
        /**
         * Seeks in the stream by the given `offset,` modified by `type`.
         *
         * Attempting to seek past the end of the stream will have different
         * results depending on if the stream is fixed-sized or resizable.  If
         * the stream is resizable then seeking past the end and then writing
         * will result in zeros filling the empty space.  Seeking past the end
         * of a resizable stream and reading will result in EOF.  Seeking past
         * the end of a fixed-sized stream will fail.
         *
         * Any operation that would result in a negative offset will fail.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by
         * triggering the cancellable object from another thread. If the operation
         * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         * @param offset a #goffset.
         * @param type a #GSeekType.
         * @param cancellable optional #GCancellable object, %NULL to ignore.
         * @returns %TRUE if successful. If an error     has occurred, this function will return %FALSE and set @error     appropriately if present.
         */
        seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Tells the current position within the stream.
         * @returns the (positive or zero) offset from the beginning of the buffer, zero if the target is not seekable.
         */
        tell(): number;
        /**
         * Sets the length of the stream to `offset`. If the stream was previously
         * larger than `offset,` the extra data is discarded. If the stream was
         * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by
         * triggering the cancellable object from another thread. If the operation
         * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
         * operation was partially finished when the operation was cancelled the
         * partial result will be returned, without an error.
         * @param offset new length for @seekable, in bytes.
         * @param cancellable optional #GCancellable object, %NULL to ignore.
         * @returns %TRUE if successful. If an error     has occurred, this function will return %FALSE and set @error     appropriately if present.
         */
        truncate(offset: number, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Tests if the stream supports the #GSeekableIface.
         */
        vfunc_can_seek(): boolean;
        /**
         * Tests if the length of the stream can be adjusted with
         * g_seekable_truncate().
         */
        vfunc_can_truncate(): boolean;
        /**
         * Seeks in the stream by the given `offset,` modified by `type`.
         *
         * Attempting to seek past the end of the stream will have different
         * results depending on if the stream is fixed-sized or resizable.  If
         * the stream is resizable then seeking past the end and then writing
         * will result in zeros filling the empty space.  Seeking past the end
         * of a resizable stream and reading will result in EOF.  Seeking past
         * the end of a fixed-sized stream will fail.
         *
         * Any operation that would result in a negative offset will fail.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by
         * triggering the cancellable object from another thread. If the operation
         * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         * @param offset a #goffset.
         * @param type a #GSeekType.
         * @param cancellable optional #GCancellable object, %NULL to ignore.
         */
        vfunc_seek(offset: number, type: GLib.SeekType, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Tells the current position within the stream.
         */
        vfunc_tell(): number;
        /**
         * Sets the length of the stream to `offset`. If the stream was previously
         * larger than `offset,` the extra data is discarded. If the stream was
         * previously shorter than `offset,` it is extended with NUL ('\0') bytes.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by
         * triggering the cancellable object from another thread. If the operation
         * was cancelled, the error %G_IO_ERROR_CANCELLED will be returned. If an
         * operation was partially finished when the operation was cancelled the
         * partial result will be returned, without an error.
         * @param offset new length for @seekable, in bytes.
         * @param cancellable optional #GCancellable object, %NULL to ignore.
         */
        vfunc_truncate_fn(offset: number, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module Entry {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            content: string;
            content_uri: string;
            contentUri: string;
            etag: string;
            id: string;
            is_inserted: boolean;
            isInserted: boolean;
            published: number;
            rights: string;
            summary: string;
            title: string;
            updated: number;
        }
    }

    /**
     * All the fields in the #GDataEntry structure are private and should never be accessed directly.
     */
    class Entry extends Parsable {
        static $gtype: GObject.GType<Entry>;

        // Properties

        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Constructors

        constructor(properties?: Partial<Entry.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): Entry;

        // Methods

        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module Feed {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            etag: string;
            generator: Generator;
            icon: string;
            id: string;
            items_per_page: number;
            itemsPerPage: number;
            logo: string;
            next_page_token: string;
            nextPageToken: string;
            rights: string;
            start_index: number;
            startIndex: number;
            subtitle: string;
            title: string;
            total_results: number;
            totalResults: number;
            updated: number;
        }
    }

    /**
     * All the fields in the #GDataFeed structure are private and should never be accessed directly.
     */
    class Feed extends Parsable {
        static $gtype: GObject.GType<Feed>;

        // Properties

        /**
         * The unique ETag for this version of the feed. See the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink> for
         * more information.
         */
        get etag(): string;
        /**
         * Details of the software used to generate the feed.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_generator">
         * atom:generator</ulink>
         */
        get generator(): Generator;
        /**
         * The URI of an icon for the feed.
         *
         * API reference:
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.icon">atom:icon</ulink>
         */
        get icon(): string;
        /**
         * The unique and permanent URN ID for the feed.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_id">atom:id</ulink>
         */
        get id(): string;
        /**
         * The number of items per results page feed.
         *
         * API reference:
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:itemsPerPage">
         * openSearch:itemsPerPage</ulink>
         */
        get items_per_page(): number;
        /**
         * The number of items per results page feed.
         *
         * API reference:
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:itemsPerPage">
         * openSearch:itemsPerPage</ulink>
         */
        get itemsPerPage(): number;
        /**
         * The URI of a logo for the feed.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_logo">atom:logo</ulink>
         */
        get logo(): string;
        /**
         * The next page token for feeds. Pass this to
         * gdata_query_set_page_token() to advance to the next page when
         * querying APIs which use page tokens rather than page numbers or
         * offsets.
         */
        get next_page_token(): string;
        /**
         * The next page token for feeds. Pass this to
         * gdata_query_set_page_token() to advance to the next page when
         * querying APIs which use page tokens rather than page numbers or
         * offsets.
         */
        get nextPageToken(): string;
        /**
         * The ownership rights pertaining to the entire feed.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        /**
         * The one-based index of the first item in the results feed.
         *
         * This should <emphasis>not</emphasis> be used manually for pagination. Instead, use a #GDataQuery and call its gdata_query_next_page()
         * or gdata_query_previous_page() functions before making the query to the service.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:startIndex">
         * openSearch:startIndex</ulink>
         */
        get start_index(): number;
        /**
         * The one-based index of the first item in the results feed.
         *
         * This should <emphasis>not</emphasis> be used manually for pagination. Instead, use a #GDataQuery and call its gdata_query_next_page()
         * or gdata_query_previous_page() functions before making the query to the service.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:startIndex">
         * openSearch:startIndex</ulink>
         */
        get startIndex(): number;
        /**
         * The subtitle of the feed.
         *
         * API reference: <ulink type="http" url="http://atomenabled.org/developers/syndication/">atom:subtitle</ulink>
         */
        get subtitle(): string;
        /**
         * The title of the feed.
         *
         * API reference:
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_title">atom:title</ulink>
         */
        get title(): string;
        /**
         * The number of items in the result set for the feed, including those on other pages. If this is zero, the total number is unknown.
         *
         * This should <emphasis>not</emphasis> be used manually for pagination. Instead, use a #GDataQuery and call its gdata_query_next_page()
         * or gdata_query_previous_page() functions before making the query to the service.
         *
         * API reference:
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:totalResults">
         * openSearch:totalResults</ulink>
         */
        get total_results(): number;
        /**
         * The number of items in the result set for the feed, including those on other pages. If this is zero, the total number is unknown.
         *
         * This should <emphasis>not</emphasis> be used manually for pagination. Instead, use a #GDataQuery and call its gdata_query_next_page()
         * or gdata_query_previous_page() functions before making the query to the service.
         *
         * API reference:
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_openSearch:totalResults">
         * openSearch:totalResults</ulink>
         */
        get totalResults(): number;
        /**
         * The time the feed was last updated.
         *
         * API reference: <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_updated">
         * atom:updated</ulink>
         */
        get updated(): number;

        // Constructors

        constructor(properties?: Partial<Feed.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Returns a list of the authors listed in this feed.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Returns a list of the categories listed in this feed.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns a list of the entries contained in this feed.
         * @returns a #GList of #GDataEntrys
         */
        get_entries(): Entry[];
        /**
         * Returns the feed's unique ETag for this version.
         * @returns the feed's ETag
         */
        get_etag(): string;
        /**
         * Returns details about the software which generated the feed.
         * @returns a #GDataGenerator, or %NULL
         */
        get_generator(): Generator;
        /**
         * Returns the icon URI of the feed.
         * @returns the feed's icon URI, or %NULL
         */
        get_icon(): string;
        /**
         * Returns the feed's unique and permanent URN ID.
         * @returns the feed's ID
         */
        get_id(): string;
        /**
         * Returns the number of items per results page feed.
         * @returns the number of items per results page feed, or <code class="literal">0</code>
         */
        get_items_per_page(): number;
        /**
         * Returns a list of the links listed in this feed.
         * @returns a #GList of #GDataLinks
         */
        get_links(): Link[];
        /**
         * Returns the logo URI of the feed.
         * @returns the feed's logo URI, or %NULL
         */
        get_logo(): string;
        /**
         * Returns the next page token for a query result, or %NULL if not set.
         * This is #GDataFeed:next-page-token. The page token might not be set if there
         * is no next page, or if this service does not use token based paging (for
         * example, if it uses page number or offset based paging instead). Most more
         * recent services use token based paging.
         * @returns the next page token
         */
        get_next_page_token(): string | null;
        /**
         * Returns the rights pertaining to the entire feed, or %NULL if not set.
         * @returns the feed's rights information
         */
        get_rights(): string;
        /**
         * Returns the one-based start index of the results feed in the result set.
         * @returns the one-based start index, or <code class="literal">0</code>
         */
        get_start_index(): number;
        /**
         * Returns the subtitle of the feed.
         * @returns the feed's subtitle, or %NULL
         */
        get_subtitle(): string;
        /**
         * Returns the title of the feed.
         * @returns the feed's title
         */
        get_title(): string;
        /**
         * Returns the total number of results in the result set, including results on other
         * pages. If this is zero, the total number is unknown.
         * @returns the total number of results, or <code class="literal">0</code>
         */
        get_total_results(): number;
        /**
         * Gets the time the feed was last updated.
         * @returns the UNIX timestamp for the time the feed was last updated
         */
        get_updated(): number;
        /**
         * Returns the entry in the feed with the given `id,` if found.
         * @param id the entry's ID
         * @returns the #GDataEntry, or %NULL
         */
        look_up_entry(id: string): Entry;
        /**
         * Looks up a link by #GDataLink:relation-type value from the list of links in the feed.
         * @param rel the value of the #GDataLink:relation-type property of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
    }

    module GContactCalendar {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            relation_type: string;
            relationType: string;
            uri: string;
        }
    }

    /**
     * All the fields in the #GDataGContactCalendar structure are private and should never be accessed directly.
     */
    class GContactCalendar extends Parsable implements Comparable {
        static $gtype: GObject.GType<GContactCalendar>;

        // Properties

        /**
         * Indicates which calendar out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which calendar out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A free-form string that identifies the type of calendar. It is mutually exclusive with #GDataGContactCalendar:relation-type.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A programmatic value that identifies the type of calendar. It is mutually exclusive with #GDataGContactCalendar:label.
         * Examples are %GDATA_GCONTACT_CALENDAR_HOME or %GDATA_GCONTACT_CALENDAR_FREE_BUSY.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of calendar. It is mutually exclusive with #GDataGContactCalendar:label.
         * Examples are %GDATA_GCONTACT_CALENDAR_HOME or %GDATA_GCONTACT_CALENDAR_FREE_BUSY.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * The URI of the calendar.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcCalendarLink">gContact specification</ulink>.
         */
        get uri(): string;
        set uri(val: string);

        // Constructors

        constructor(properties?: Partial<GContactCalendar.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            uri: string,
            relation_type: string | null,
            label: string | null,
            is_primary: boolean,
        ): GContactCalendar;

        // Methods

        /**
         * Gets the #GDataGContactCalendar:label property.
         * @returns a free-form label for the calendar, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGContactCalendar:relation-type property.
         * @returns the type of the relation, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGContactCalendar:uri property.
         * @returns the calendar's URI
         */
        get_uri(): string;
        /**
         * Sets the #GDataGContactCalendar:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the contact's primary calendar, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGContactCalendar:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactCalendar is used in a query, however,
         * exactly one of #GDataGContactCalendar:relation-type and #GDataGContactCalendar:label must be %NULL.
         * @param label the new free-form label for the calendar, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGContactCalendar:relation-type property to `relation_type,`
         * such as %GDATA_GCONTACT_CALENDAR_HOME or %GDATA_GCONTACT_CALENDAR_FREE_BUSY.
         *
         * If `relation_type` is %NULL, the relation type will be unset. When the #GDataGContactCalendar is used in a query, however,
         * exactly one of #GDataGContactCalendar:relation-type and #GDataGContactCalendar:label must be %NULL.
         * @param relation_type the new type for the calendar, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGContactCalendar:uri property to `uri`.
         * @param uri the new URI for the calendar
         */
        set_uri(uri: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GContactEvent {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            date: GLib.Date;
            label: string;
            relation_type: string;
            relationType: string;
        }
    }

    /**
     * All the fields in the #GDataGContactEvent structure are private and should never be accessed directly.
     */
    class GContactEvent extends Parsable {
        static $gtype: GObject.GType<GContactEvent>;

        // Properties

        /**
         * The date of the event.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">GContact specification</ulink>.
         */
        get date(): GLib.Date;
        set date(val: GLib.Date);
        /**
         * A simple string value used to name this event. It is mutually exclusive with #GDataGContactEvent:relation-type.
         * It allows UIs to display a label such as "Wedding anniversary".
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A programmatic value that identifies the type of event. It is mutually exclusive with #GDataGContactEvent:label.
         * Examples are %GDATA_GCONTACT_EVENT_ANNIVERSARY or %GDATA_GCONTACT_EVENT_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of event. It is mutually exclusive with #GDataGContactEvent:label.
         * Examples are %GDATA_GCONTACT_EVENT_ANNIVERSARY or %GDATA_GCONTACT_EVENT_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcEvent">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);

        // Constructors

        constructor(properties?: Partial<GContactEvent.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](date: GLib.Date, relation_type?: string | null, label?: string | null): GContactEvent;

        // Methods

        /**
         * Gets the #GDataGContactEvent:date property.
         */
        get_date(): GLib.Date;
        /**
         * Gets the #GDataGContactEvent:label property.
         * @returns the event's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGContactEvent:relation-type property.
         * @returns the event's relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Sets the #GDataGContactEvent:date property to `date`.
         * @param date the new date for the event
         */
        set_date(date: GLib.Date): void;
        /**
         * Sets the #GDataGContactEvent:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactEvent is used in a query, however,
         * exactly one of #GDataGContactEvent:relation-type and #GDataGContactEvent:label must be %NULL.
         * @param label the new label for the event, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGContactEvent:relation-type property to `relation_type`
         * such as %GDATA_GCONTACT_EVENT_ANNIVERSARY or %GDATA_GCONTACT_EVENT_OTHER.
         *
         * If `relation_type` is %NULL, the relation type will be unset. When the #GDataGContactEvent is used in a query, however,
         * exactly one of #GDataGContactEvent:relation-type and #GDataGContactEvent:label must be %NULL.
         * @param relation_type the new relation type for the event, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
    }

    module GContactExternalID {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            label: string;
            relation_type: string;
            relationType: string;
            value: string;
        }
    }

    /**
     * All the fields in the #GDataGContactExternalID structure are private and should never be accessed directly.
     */
    class GContactExternalID extends Parsable implements Comparable {
        static $gtype: GObject.GType<GContactExternalID>;

        // Properties

        /**
         * A free-form string that identifies the type of external ID. It is mutually exclusive with #GDataGContactExternalID:relation-type.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A programmatic value that identifies the type of external ID. It is mutually exclusive with #GDataGContactExternalID:label.
         * Examples are %GDATA_GCONTACT_EXTERNAL_ID_NETWORK or %GDATA_GCONTACT_EXTERNAL_ID_ACCOUNT.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of external ID. It is mutually exclusive with #GDataGContactExternalID:label.
         * Examples are %GDATA_GCONTACT_EXTERNAL_ID_NETWORK or %GDATA_GCONTACT_EXTERNAL_ID_ACCOUNT.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * The value of the external ID.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcExternalId">gContact specification</ulink>.
         */
        get value(): string;
        set value(val: string);

        // Constructors

        constructor(properties?: Partial<GContactExternalID.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](value: string, relation_type?: string | null, label?: string | null): GContactExternalID;

        // Methods

        /**
         * Gets the #GDataGContactExternalID:label property.
         * @returns a free-form label for the external ID, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGContactExternalID:relation-type property.
         * @returns the type of the relation, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGContactExternalID:value property.
         * @returns the external ID's value
         */
        get_value(): string;
        /**
         * Sets the #GDataGContactExternalID:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactExternalID is used in a query, however,
         * exactly one of #GDataGContactExternalID:relation-type and #GDataGContactExternalID:label must be %NULL.
         * @param label the new free-form label for the external ID, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGContactExternalID:relation-type property to `relation_type,`
         * such as %GDATA_GCONTACT_EXTERNAL_ID_NETWORK or %GDATA_GCONTACT_EXTERNAL_ID_ACCOUNT.
         *
         * If `relation_type` is %NULL, the relation type will be unset. When the #GDataGContactExternalID is used in a query, however,
         * exactly one of #GDataGContactExternalID:relation-type and #GDataGContactExternalID:label must be %NULL.
         * @param relation_type the new type for the external ID, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGContactExternalID:value property to `value`.
         * @param value the new value for the external ID
         */
        set_value(value: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GContactJot {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            content: string;
            relation_type: string;
            relationType: string;
        }
    }

    /**
     * All the fields in the #GDataGContactJot structure are private and should never be accessed directly.
     */
    class GContactJot extends Parsable {
        static $gtype: GObject.GType<GContactJot>;

        // Properties

        /**
         * The content of the jot.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">gContact specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A programmatic value that identifies the type of jot. Examples are %GDATA_GCONTACT_JOT_HOME or %GDATA_GCONTACT_JOT_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of jot. Examples are %GDATA_GCONTACT_JOT_HOME or %GDATA_GCONTACT_JOT_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcJot">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);

        // Constructors

        constructor(properties?: Partial<GContactJot.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](content: string, relation_type: string): GContactJot;

        // Methods

        /**
         * Gets the #GDataGContactJot:content property.
         * @returns the jot's content
         */
        get_content(): string;
        /**
         * Gets the #GDataGContactJot:relation-type property.
         * @returns the jot's relation type
         */
        get_relation_type(): string;
        /**
         * Sets the #GDataGContactJot:content property to `content`.
         * @param content the new content
         */
        set_content(content: string): void;
        /**
         * Sets the #GDataGContactJot:relation-type property to `relation_type`
         * such as %GDATA_GCONTACT_JOT_HOME or %GDATA_GCONTACT_JOT_OTHER.
         * @param relation_type the new relation type for the jot, or %NULL
         */
        set_relation_type(relation_type: string): void;
    }

    module GContactLanguage {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            code: string;
            label: string;
        }
    }

    /**
     * All the fields in the #GDataGContactLanguage structure are private and should never be accessed directly.
     */
    class GContactLanguage extends Parsable implements Comparable {
        static $gtype: GObject.GType<GContactLanguage>;

        // Properties

        /**
         * A code identifying the language, conforming to the IETF BCP 47 specification. It is mutually exclusive with #GDataGContactLanguage:label.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcLanguage">gContact specification</ulink>.
         */
        get code(): string;
        set code(val: string);
        /**
         * A free-form string that identifies the language. It is mutually exclusive with #GDataGContactLanguage:code.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcLanguage">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);

        // Constructors

        constructor(properties?: Partial<GContactLanguage.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](code?: string | null, label?: string | null): GContactLanguage;

        // Methods

        /**
         * Gets the #GDataGContactLanguage:code property.
         * @returns the language's code, or %NULL
         */
        get_code(): string;
        /**
         * Gets the #GDataGContactLanguage:label property.
         * @returns a free-form label for the language, or %NULL
         */
        get_label(): string;
        /**
         * Sets the #GDataGContactLanguage:code property to `code`.
         *
         * If `code` is %NULL, the code will be unset. When the #GDataGContactLanguage is used in a query, however,
         * exactly one of #GDataGContactLanguage:code and #GDataGContactLanguage:label must be %NULL.
         * @param code the new code for the language, or %NULL
         */
        set_code(code?: string | null): void;
        /**
         * Sets the #GDataGContactLanguage:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactLanguage is used in a query, however,
         * exactly one of #GDataGContactLanguage:code and #GDataGContactLanguage:label must be %NULL.
         * @param label the new free-form label for the language, or %NULL
         */
        set_label(label?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GContactRelation {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            label: string;
            name: string;
            relation_type: string;
            relationType: string;
        }
    }

    /**
     * All the fields in the #GDataGContactRelation structure are private and should never be accessed directly.
     */
    class GContactRelation extends Parsable {
        static $gtype: GObject.GType<GContactRelation>;

        // Properties

        /**
         * A free-form string that identifies the type of relation. It is mutually exclusive with #GDataGContactRelation:relation-type.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * The name of the relation. It need not be a full name, and there need not be a contact representing the name.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">gContact specification</ulink>.
         */
        get name(): string;
        set name(val: string);
        /**
         * A programmatic value that identifies the type of relation. It is mutually exclusive with #GDataGContactRelation:label.
         * Examples are %GDATA_GCONTACT_RELATION_MANAGER or %GDATA_GCONTACT_RELATION_CHILD.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of relation. It is mutually exclusive with #GDataGContactRelation:label.
         * Examples are %GDATA_GCONTACT_RELATION_MANAGER or %GDATA_GCONTACT_RELATION_CHILD.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcRelation">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);

        // Constructors

        constructor(properties?: Partial<GContactRelation.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](name: string, relation_type?: string | null, label?: string | null): GContactRelation;

        // Methods

        /**
         * Gets the #GDataGContactRelation:label property.
         * @returns a free-form label for the type of the relation, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGContactRelation:name property.
         * @returns the relation's name
         */
        get_name(): string;
        /**
         * Gets the #GDataGContactRelation:relation-type property.
         * @returns the type of the relation, or %NULL
         */
        get_relation_type(): string;
        /**
         * Sets the #GDataGContactRelation:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactRelation is used in a query, however,
         * exactly one of #GDataGContactRelation:relation-type and #GDataGContactRelation:label must be %NULL.
         * @param label the new free-form type for the relation, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGContactRelation:name property to `name`.
         * @param name the new name for the relation
         */
        set_name(name?: string | null): void;
        /**
         * Sets the #GDataGContactRelation:relation-type property to `relation_type,`
         * such as %GDATA_GCONTACT_RELATION_MANAGER or %GDATA_GCONTACT_RELATION_CHILD.
         *
         * If `relation_type` is %NULL, the relation type will be unset. When the #GDataGContactRelation is used in a query, however,
         * exactly one of #GDataGContactRelation:relation-type and #GDataGContactRelation:label must be %NULL.
         * @param relation_type the new type for the relation, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
    }

    module GContactWebsite {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            relation_type: string;
            relationType: string;
            uri: string;
        }
    }

    /**
     * All the fields in the #GDataGContactWebsite structure are private and should never be accessed directly.
     */
    class GContactWebsite extends Parsable implements Comparable {
        static $gtype: GObject.GType<GContactWebsite>;

        // Properties

        /**
         * Indicates which website out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which website out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A simple string value used to name this website. It allows UIs to display a label such as "Work", "Travel blog", "Personal blog", etc.
         * It is mutually exclusive with #GDataGContactWebsite:relation-type.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A programmatic value that identifies the type of website. Examples are %GDATA_GCONTACT_WEBSITE_HOME_PAGE or %GDATA_GCONTACT_WEBSITE_FTP.
         * It is mutually exclusive with #GDataGContactWebsite:label.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of website. Examples are %GDATA_GCONTACT_WEBSITE_HOME_PAGE or %GDATA_GCONTACT_WEBSITE_FTP.
         * It is mutually exclusive with #GDataGContactWebsite:label.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * The URI of the website.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/contacts/docs/3.0/reference.html#gcWebsite">gContact specification</ulink>.
         */
        get uri(): string;
        set uri(val: string);

        // Constructors

        constructor(properties?: Partial<GContactWebsite.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](uri: string, relation_type: string, label: string | null, is_primary: boolean): GContactWebsite;

        // Methods

        /**
         * Gets the #GDataGContactWebsite:label property.
         * @returns the website's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGContactWebsite:relation-type property.
         * @returns the website's relation type
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGContactWebsite:uri property.
         * @returns the URI of the website
         */
        get_uri(): string;
        /**
         * Sets the #GDataGContactWebsite:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary website, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGContactWebsite:label property to `label`.
         *
         * If `label` is %NULL, the label will be unset. When the #GDataGContactWebsite is used in a query, however,
         * exactly one of #GDataGContactWebsite:relation-type and #GDataGContactWebsite:label must be %NULL.
         * @param label the new label for the website, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGContactWebsite:relation-type property to `relation_type`
         * such as %GDATA_GCONTACT_WEBSITE_HOME_PAGE or %GDATA_GCONTACT_WEBSITE_FTP.
         *
         * If `relation_type` is %NULL, the relation type will be unset. When the #GDataGContactWebsite is used in a query, however,
         * exactly one of #GDataGContactWebsite:relation-type and #GDataGContactWebsite:label must be %NULL.
         * @param relation_type the new relation type for the website
         */
        set_relation_type(relation_type: string): void;
        /**
         * Sets the #GDataGContactWebsite:uri property to `uri`.
         * @param uri the new website URI
         */
        set_uri(uri: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDEmailAddress {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            address: string;
            display_name: string;
            displayName: string;
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            relation_type: string;
            relationType: string;
        }
    }

    /**
     * All the fields in the #GDataGDEmailAddress structure are private and should never be accessed directly.
     */
    class GDEmailAddress extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDEmailAddress>;

        // Properties

        /**
         * The e-mail address itself.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get address(): string;
        set address(val: string);
        /**
         * A display name of the entity (e.g. a person) the e-mail address belongs to.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get display_name(): string;
        set display_name(val: string);
        /**
         * A display name of the entity (e.g. a person) the e-mail address belongs to.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get displayName(): string;
        set displayName(val: string);
        /**
         * Indicates which e-mail address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which e-mail address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A simple string value used to name this e-mail address. It allows UIs to display a label such as "Work", "Personal", "Preferred", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A programmatic value that identifies the type of e-mail address. For example: %GDATA_GD_EMAIL_ADDRESS_HOME or %GDATA_GD_EMAIL_ADDRESS_WORK.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of e-mail address. For example: %GDATA_GD_EMAIL_ADDRESS_HOME or %GDATA_GD_EMAIL_ADDRESS_WORK.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdEmail">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);

        // Constructors

        constructor(properties?: Partial<GDEmailAddress.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            address: string,
            relation_type: string | null,
            label: string | null,
            is_primary: boolean,
        ): GDEmailAddress;

        // Methods

        /**
         * Gets the #GDataGDEmailAddress:address property.
         * @returns the e-mail address itself, or %NULL
         */
        get_address(): string;
        /**
         * Gets the #GDataGDEmailAddress:display-name property.
         * @returns a display name for the e-mail address, or %NULL
         */
        get_display_name(): string;
        /**
         * Gets the #GDataGDEmailAddress:label property.
         * @returns the e-mail address' label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDEmailAddress:relation-type property.
         * @returns the e-mail address' relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Sets the #GDataGDEmailAddress:address property to `address`.
         * @param address the new e-mail address
         */
        set_address(address: string): void;
        /**
         * Sets the #GDataGDEmailAddress:display-name property to `display_name`.
         *
         * Set `display_name` to %NULL to unset the property in the e-mail address.
         * @param display_name the new display name, or %NULL
         */
        set_display_name(display_name?: string | null): void;
        /**
         * Sets the #GDataGDEmailAddress:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary e-mail address, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGDEmailAddress:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the e-mail address.
         * @param label the new label for the e-mail address, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDEmailAddress:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property in the e-mail address.
         * @param relation_type the new relation type for the email_address, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDIMAddress {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            address: string;
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            protocol: string;
            relation_type: string;
            relationType: string;
        }
    }

    /**
     * All the fields in the #GDataGDIMAddress structure are private and should never be accessed directly.
     */
    class GDIMAddress extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDIMAddress>;

        // Properties

        /**
         * The IM address itself.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get address(): string;
        set address(val: string);
        /**
         * Indicates which IM address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which IM address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A simple string value used to name this IM address. It allows UIs to display a label such as "Work", "Personal", "Preferred", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * Identifies the IM network. For example: %GDATA_GD_IM_PROTOCOL_JABBER or %GDATA_GD_IM_PROTOCOL_GOOGLE_TALK.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get protocol(): string;
        set protocol(val: string);
        /**
         * A programmatic value that identifies the type of IM address. For example: %GDATA_GD_IM_ADDRESS_HOME or %GDATA_GD_IM_ADDRESS_WORK.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of IM address. For example: %GDATA_GD_IM_ADDRESS_HOME or %GDATA_GD_IM_ADDRESS_WORK.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdIm">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);

        // Constructors

        constructor(properties?: Partial<GDIMAddress.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            address: string,
            protocol: string | null,
            relation_type: string | null,
            label: string | null,
            is_primary: boolean,
        ): GDIMAddress;

        // Methods

        /**
         * Gets the #GDataGDIMAddress:address property.
         * @returns the IM address itself, or %NULL
         */
        get_address(): string;
        /**
         * Gets the #GDataGDIMAddress:label property.
         * @returns the IM address' label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDIMAddress:protocol property.
         * @returns the IM address' protocol, or %NULL
         */
        get_protocol(): string;
        /**
         * Gets the #GDataGDIMAddress:relation-type property.
         * @returns the IM address' relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Sets the #GDataGDIMAddress:address property to `address`.
         * @param address the new IM address
         */
        set_address(address: string): void;
        /**
         * Sets the #GDataGDIMAddress:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary IM address, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGDIMAddress:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the IM address.
         * @param label the new label for the IM address, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDIMAddress:protocol property to `protocol`.
         * @param protocol the new IM protocol, or %NULL
         */
        set_protocol(protocol?: string | null): void;
        /**
         * Sets the #GDataGDIMAddress:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property in the IM address.
         * @param relation_type the new relation type for the im_address, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDName {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            additional_name: string;
            additionalName: string;
            family_name: string;
            familyName: string;
            full_name: string;
            fullName: string;
            given_name: string;
            givenName: string;
            prefix: string;
            suffix: string;
        }
    }

    /**
     * All the fields in the #GDataGDName structure are private and should never be accessed directly.
     */
    class GDName extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDName>;

        // Properties

        /**
         * An additional name for the person (e.g. a middle name).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get additional_name(): string;
        set additional_name(val: string);
        /**
         * An additional name for the person (e.g. a middle name).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get additionalName(): string;
        set additionalName(val: string);
        /**
         * The person's family name.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get family_name(): string;
        set family_name(val: string);
        /**
         * The person's family name.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get familyName(): string;
        set familyName(val: string);
        /**
         * An unstructured representation of the person's full name. It's generally advised to use the other individual properties in preference
         * to this one, which can fall out of synchronisation with the other properties.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get full_name(): string;
        set full_name(val: string);
        /**
         * An unstructured representation of the person's full name. It's generally advised to use the other individual properties in preference
         * to this one, which can fall out of synchronisation with the other properties.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get fullName(): string;
        set fullName(val: string);
        /**
         * The person's given name.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get given_name(): string;
        set given_name(val: string);
        /**
         * The person's given name.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get givenName(): string;
        set givenName(val: string);
        /**
         * An honorific prefix (e.g. <literal>Mr</literal> or <literal>Mrs</literal>).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get prefix(): string;
        set prefix(val: string);
        /**
         * An honorific suffix (e.g. <literal>san</literal> or <literal>III</literal>).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdName">GData specification</ulink>.
         */
        get suffix(): string;
        set suffix(val: string);

        // Constructors

        constructor(properties?: Partial<GDName.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](given_name?: string | null, family_name?: string | null): GDName;

        // Methods

        /**
         * Gets the #GDataGDName:additional-name property.
         * @returns the person's additional name, or %NULL
         */
        get_additional_name(): string;
        /**
         * Gets the #GDataGDName:family-name property.
         * @returns the person's family name, or %NULL
         */
        get_family_name(): string;
        /**
         * Gets the #GDataGDName:full-name property.
         * @returns the person's full name, or %NULL
         */
        get_full_name(): string;
        /**
         * Gets the #GDataGDName:given-name property.
         * @returns the person's given name, or %NULL
         */
        get_given_name(): string;
        /**
         * Gets the #GDataGDName:prefix property.
         * @returns the person's name prefix, or %NULL
         */
        get_prefix(): string;
        /**
         * Gets the #GDataGDName:suffix property.
         * @returns the person's name suffix, or %NULL
         */
        get_suffix(): string;
        /**
         * Sets the #GDataGDName:additional-name property to `additional_name`.
         * @param additional_name the new additional name, or %NULL
         */
        set_additional_name(additional_name?: string | null): void;
        /**
         * Sets the #GDataGDName:family-name property to `family_name`.
         * @param family_name the new family name, or %NULL
         */
        set_family_name(family_name?: string | null): void;
        /**
         * Sets the #GDataGDName:full-name property to `full_name`.
         * @param full_name the new full name, or %NULL
         */
        set_full_name(full_name?: string | null): void;
        /**
         * Sets the #GDataGDName:given-name property to `given_name`.
         * @param given_name the new given name, or %NULL
         */
        set_given_name(given_name?: string | null): void;
        /**
         * Sets the #GDataGDName:prefix property to `prefix`.
         * @param prefix the new prefix, or %NULL
         */
        set_prefix(prefix?: string | null): void;
        /**
         * Sets the #GDataGDName:suffix property to `suffix`.
         * @param suffix the new suffix, or %NULL
         */
        set_suffix(suffix?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDOrganization {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            department: string;
            is_primary: boolean;
            isPrimary: boolean;
            job_description: string;
            jobDescription: string;
            label: string;
            location: GDWhere;
            name: string;
            relation_type: string;
            relationType: string;
            symbol: string;
            title: string;
        }
    }

    /**
     * All the fields in the #GDataGDOrganization structure are private and should never be accessed directly.
     */
    class GDOrganization extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDOrganization>;

        // Properties

        /**
         * Specifies a department within the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get department(): string;
        set department(val: string);
        /**
         * Indicates which organization out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which organization out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * Description of a job within the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get job_description(): string;
        set job_description(val: string);
        /**
         * Description of a job within the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get jobDescription(): string;
        set jobDescription(val: string);
        /**
         * A simple string value used to name this organization. It allows UIs to display a label such as "Work", "Volunteer",
         * "Professional Society", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A place associated with the organization, e.g. office location.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get location(): GDWhere;
        set location(val: GDWhere);
        /**
         * The name of the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get name(): string;
        set name(val: string);
        /**
         * A programmatic value that identifies the type of organization. For example: %GDATA_GD_ORGANIZATION_WORK or %GDATA_GD_ORGANIZATION_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of organization. For example: %GDATA_GD_ORGANIZATION_WORK or %GDATA_GD_ORGANIZATION_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * Stock symbol of the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get symbol(): string;
        set symbol(val: string);
        /**
         * The title of a person within the organization.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdOrganization">GData specification</ulink>.
         */
        get title(): string;
        set title(val: string);

        // Constructors

        constructor(properties?: Partial<GDOrganization.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            name: string | null,
            title: string | null,
            relation_type: string | null,
            label: string | null,
            is_primary: boolean,
        ): GDOrganization;

        // Methods

        /**
         * Gets the #GDataGDOrganization:department property.
         * @returns the department in which the person works in this organization, or %NULL
         */
        get_department(): string;
        /**
         * Gets the #GDataGDOrganization:job-description property.
         * @returns the job description of the person in the organization, or %NULL
         */
        get_job_description(): string;
        /**
         * Gets the #GDataGDOrganization:label property.
         * @returns the organization's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDOrganization:location property.
         * @returns the organization's location, or %NULL
         */
        get_location(): GDWhere;
        /**
         * Gets the #GDataGDOrganization:name property.
         * @returns the organization's name, or %NULL
         */
        get_name(): string;
        /**
         * Gets the #GDataGDOrganization:relation-type property.
         * @returns the organization's relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGDOrganization:symbol property.
         * @returns the organization's stock symbol, or %NULL
         */
        get_symbol(): string;
        /**
         * Gets the #GDataGDOrganization:title property.
         * @returns the organization's title, or %NULL
         */
        get_title(): string;
        /**
         * Sets the #GDataGDOrganization:department property to `department`.
         *
         * Set `department` to %NULL to unset the property in the organization.
         * @param department the new department for the person working in the organization, or %NULL
         */
        set_department(department?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary organization, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGDOrganization:job-description property to `job_description`.
         *
         * Set `job_description` to %NULL to unset the property in the organization.
         * @param job_description the new job description for the person in the organization, or %NULL
         */
        set_job_description(job_description?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the organization.
         * @param label the new label for the organization, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:location property to `location`.
         *
         * Set `location` to %NULL to unset the property in the organization.
         * @param location the new location for the organization, or %NULL
         */
        set_location(location?: GDWhere | null): void;
        /**
         * Sets the #GDataGDOrganization:name property to `name`.
         *
         * Set `name` to %NULL to unset the property in the organization.
         * @param name the new name for the organization, or %NULL
         */
        set_name(name?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property in the organization.
         * @param relation_type the new relation type for the organization, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:symbol property to `symbol`.
         *
         * Set `symbol` to %NULL to unset the property in the organization.
         * @param symbol the new stock symbol for the organization, or %NULL
         */
        set_symbol(symbol?: string | null): void;
        /**
         * Sets the #GDataGDOrganization:title property to `title`.
         *
         * Set `title` to %NULL to unset the property in the organization.
         * @param title the new title for the organization, or %NULL
         */
        set_title(title?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDPhoneNumber {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            number: string;
            relation_type: string;
            relationType: string;
            uri: string;
        }
    }

    /**
     * All the fields in the #GDataGDPhoneNumber structure are private and should never be accessed directly.
     */
    class GDPhoneNumber extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDPhoneNumber>;

        // Properties

        /**
         * Indicates which phone number out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which phone number out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A simple string value used to name this phone number. It allows UIs to display a label such as "Mobile", "Home", "Work", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * Human-readable phone number; may be in any telephone number format.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get number(): string;
        set number(val: string);
        /**
         * A programmatic value that identifies the type of phone number. For example: %GDATA_GD_PHONE_NUMBER_WORK or %GDATA_GD_PHONE_NUMBER_PAGER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of phone number. For example: %GDATA_GD_PHONE_NUMBER_WORK or %GDATA_GD_PHONE_NUMBER_PAGER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * An optional "tel URI" used to represent the number in a formal way. Useful for programmatic access, such as a VoIP/PSTN bridge.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdPhoneNumber">GData specification</ulink>.
         */
        get uri(): string;
        set uri(val: string);

        // Constructors

        constructor(properties?: Partial<GDPhoneNumber.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            number: string,
            relation_type: string | null,
            label: string | null,
            uri: string | null,
            is_primary: boolean,
        ): GDPhoneNumber;

        // Methods

        /**
         * Gets the #GDataGDPhoneNumber:label property.
         * @returns the phone number's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDPhoneNumber:number property.
         * @returns the phone number itself
         */
        get_number(): string;
        /**
         * Gets the #GDataGDPhoneNumber:relation-type property.
         * @returns the phone number's relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGDPhoneNumber:uri property.
         * @returns the phone number's URI, or %NULL
         */
        get_uri(): string;
        /**
         * Sets the #GDataGDPhoneNumber:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary phone number, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGDPhoneNumber:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the phone number.
         * @param label the new label for the phone number, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDPhoneNumber:number property to `number`.
         * @param number the new phone number
         */
        set_number(number: string): void;
        /**
         * Sets the #GDataGDPhoneNumber:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property in the phone number.
         * @param relation_type the new relation type for the phone number, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGDPhoneNumber:uri property to `uri`.
         *
         * Set `uri` to %NULL to unset the property in the phone number.
         * @param uri the new URI for the phone number, or %NULL
         */
        set_uri(uri?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDPostalAddress {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            address: string;
            agent: string;
            city: string;
            country: string;
            country_code: string;
            countryCode: string;
            house_name: string;
            houseName: string;
            is_primary: boolean;
            isPrimary: boolean;
            label: string;
            mail_class: string;
            mailClass: string;
            neighborhood: string;
            po_box: string;
            poBox: string;
            postcode: string;
            region: string;
            relation_type: string;
            relationType: string;
            street: string;
            subregion: string;
            usage: string;
        }
    }

    /**
     * All the fields in the #GDataGDPostalAddress structure are private and should never be accessed directly.
     */
    class GDPostalAddress extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDPostalAddress>;

        // Properties

        /**
         * The postal address itself, formatted and unstructured. It is preferred to use the other, structured properties rather than this one.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get address(): string;
        set address(val: string);
        /**
         * The agent who actually receives the mail. Used in work addresses. Also for "in care of" or "c/o".
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get agent(): string;
        set agent(val: string);
        /**
         * Can be city, village, town, borough, etc. This is the postal town and not necessarily the place of residence or place of business.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get city(): string;
        set city(val: string);
        /**
         * The name of the country. Since this is paired with #GDataGDPostalAddress:country-code, they must both be set with
         * gdata_gd_postal_address_set_country().
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get country(): string;
        /**
         * The ISO 3166-1 alpha-2 country code for the country in #GDataGDPostalAddress:country. Since this is paired with
         * #GDataGDPostalAddress:country, they must both be set with gdata_gd_postal_address_set_country().
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>
         * or <ulink type="http" url="http://www.iso.org/iso/iso-3166-1_decoding_table">ISO 3166-1 alpha-2</ulink>.
         */
        get country_code(): string;
        /**
         * The ISO 3166-1 alpha-2 country code for the country in #GDataGDPostalAddress:country. Since this is paired with
         * #GDataGDPostalAddress:country, they must both be set with gdata_gd_postal_address_set_country().
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>
         * or <ulink type="http" url="http://www.iso.org/iso/iso-3166-1_decoding_table">ISO 3166-1 alpha-2</ulink>.
         */
        get countryCode(): string;
        /**
         * Used in places where houses or buildings have names (and not necessarily numbers).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get house_name(): string;
        set house_name(val: string);
        /**
         * Used in places where houses or buildings have names (and not necessarily numbers).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get houseName(): string;
        set houseName(val: string);
        /**
         * Indicates which postal address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get is_primary(): boolean;
        set is_primary(val: boolean);
        /**
         * Indicates which postal address out of a group is primary.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get isPrimary(): boolean;
        set isPrimary(val: boolean);
        /**
         * A simple string value used to name this postal address. It allows UIs to display a label such as "Work", "Personal", "Preferred", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * Classes of mail accepted at this address. For example: %GDATA_GD_MAIL_CLASS_LETTERS or %GDATA_GD_MAIL_CLASS_BOTH.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get mail_class(): string;
        set mail_class(val: string);
        /**
         * Classes of mail accepted at this address. For example: %GDATA_GD_MAIL_CLASS_LETTERS or %GDATA_GD_MAIL_CLASS_BOTH.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get mailClass(): string;
        set mailClass(val: string);
        /**
         * This is used to disambiguate a street address when a city contains more than one street with the same name, or to specify a small place
         * whose mail is routed through a larger postal town. In China it could be a county or a minor city.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get neighborhood(): string;
        set neighborhood(val: string);
        /**
         * Covers actual P.O. boxes, drawers, locked bags, etc. This is usually but not always mutually exclusive with #GDataGDPostalAddress:street.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get po_box(): string;
        set po_box(val: string);
        /**
         * Covers actual P.O. boxes, drawers, locked bags, etc. This is usually but not always mutually exclusive with #GDataGDPostalAddress:street.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get poBox(): string;
        set poBox(val: string);
        /**
         * Postal code. Usually country-wide, but sometimes specific to the city (e.g. "2" in "Dublin 2, Ireland" addresses).
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get postcode(): string;
        set postcode(val: string);
        /**
         * A state, province, county (in Ireland), Land (in Germany), departement (in France), etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get region(): string;
        set region(val: string);
        /**
         * A programmatic value that identifies the type of postal address. For example: %GDATA_GD_POSTAL_ADDRESS_WORK or
         * %GDATA_GD_POSTAL_ADDRESS_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * A programmatic value that identifies the type of postal address. For example: %GDATA_GD_POSTAL_ADDRESS_WORK or
         * %GDATA_GD_POSTAL_ADDRESS_OTHER.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * Can be street, avenue, road, etc. This element also includes the house number and room/apartment/flat/floor number.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get street(): string;
        set street(val: string);
        /**
         * Handles administrative districts such as U.S. or U.K. counties that are not used for mail addressing purposes.
         * Subregion is not intended for delivery addresses.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get subregion(): string;
        set subregion(val: string);
        /**
         * The context in which this address can be used. For example: %GDATA_GD_ADDRESS_USAGE_GENERAL or %GDATA_GD_ADDRESS_USAGE_LOCAL.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdStructuredPostalAddress">GData specification</ulink>.
         */
        get usage(): string;
        set usage(val: string);

        // Constructors

        constructor(properties?: Partial<GDPostalAddress.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](relation_type: string | null, label: string | null, is_primary: boolean): GDPostalAddress;

        // Methods

        /**
         * Gets the #GDataGDPostalAddress:address property.
         * @returns the postal address itself, or %NULL
         */
        get_address(): string;
        /**
         * Gets the #GDataGDPostalAddress:agent property.
         * @returns the postal address' agent, or %NULL
         */
        get_agent(): string;
        /**
         * Gets the #GDataGDPostalAddress:city property.
         * @returns the postal address' city, or %NULL
         */
        get_city(): string;
        /**
         * Gets the #GDataGDPostalAddress:country property.
         * @returns the postal address' country, or %NULL
         */
        get_country(): string;
        /**
         * Gets the #GDataGDPostalAddress:country-code property.
         * @returns the postal address' ISO 3166-1 alpha-2 country code, or %NULL
         */
        get_country_code(): string;
        /**
         * Gets the #GDataGDPostalAddress:house-name property.
         * @returns the postal address' house name, or %NULL
         */
        get_house_name(): string;
        /**
         * Gets the #GDataGDPostalAddress:label property.
         * @returns the postal address' label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDPostalAddress:mail-class property.
         * @returns the postal address' mail class, or %NULL
         */
        get_mail_class(): string;
        /**
         * Gets the #GDataGDPostalAddress:neighborhood property.
         * @returns the postal address' neighborhood, or %NULL
         */
        get_neighborhood(): string;
        /**
         * Gets the #GDataGDPostalAddress:po-box property.
         * @returns the postal address' P.O. box, or %NULL
         */
        get_po_box(): string;
        /**
         * Gets the #GDataGDPostalAddress:postcode property.
         * @returns the postal address' postcode, or %NULL
         */
        get_postcode(): string;
        /**
         * Gets the #GDataGDPostalAddress:region property.
         * @returns the postal address' region, or %NULL
         */
        get_region(): string;
        /**
         * Gets the #GDataGDPostalAddress:relation-type property.
         * @returns the postal address' relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGDPostalAddress:street property.
         * @returns the postal address' street, or %NULL
         */
        get_street(): string;
        /**
         * Gets the #GDataGDPostalAddress:subregion property.
         * @returns the postal address' subregion, or %NULL
         */
        get_subregion(): string;
        /**
         * Gets the #GDataGDPostalAddress:usage property.
         * @returns the postal address' usage, or %NULL
         */
        get_usage(): string;
        /**
         * Sets the #GDataGDPostalAddress:address property to `address`.
         * @param address the new postal address, or %NULL
         */
        set_address(address?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:agent property to `agent`.
         *
         * Set `agent` to %NULL to unset the property in the postal address.
         * @param agent the new agent for the postal address, or %NULL
         */
        set_agent(agent?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:city property to `city`.
         *
         * Set `city` to %NULL to unset the property in the postal address.
         * @param city the new city for the postal address, or %NULL
         */
        set_city(city?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:country property to `country,` and #GDataGDPostalAddress:country-code to `country_code`.
         *
         * Set `country` or `country_code` to %NULL to unset the relevant property in the postal address. If a `country_code` is provided, a `country` must
         * also be provided.
         * @param country the new country for the postal address, or %NULL
         * @param country_code the new country code for the postal address, or %NULL
         */
        set_country(country?: string | null, country_code?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:house-name property to `house_name`.
         *
         * Set `house_name` to %NULL to unset the property in the postal address.
         * @param house_name the new house name for the postal address, or %NULL
         */
        set_house_name(house_name?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:is-primary property to `is_primary`.
         * @param is_primary %TRUE if this is the primary postal address, %FALSE otherwise
         */
        set_is_primary(is_primary: boolean): void;
        /**
         * Sets the #GDataGDPostalAddress:label property to `label`.
         *
         * Set `label` to %NULL to unset the property in the postal address.
         * @param label the new label for the postal address, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:mail-class property to `mail_class`.
         *
         * Set `mail_class` to %NULL to unset the property in the postal address.
         * @param mail_class the new mail class for the postal address, or %NULL
         */
        set_mail_class(mail_class?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:neighborhood property to `neighborhood`.
         *
         * Set `neighborhood` to %NULL to unset the property in the postal address.
         * @param neighborhood the new neighborhood for the postal address, or %NULL
         */
        set_neighborhood(neighborhood?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:po-box property to `po_box`.
         *
         * Set `po_box` to %NULL to unset the property in the postal address.
         * @param po_box the new P.O. box for the postal address, or %NULL
         */
        set_po_box(po_box?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:postcode property to `postcode`.
         *
         * Set `postcode` to %NULL to unset the property in the postal address.
         * @param postcode the new postcode for the postal address, or %NULL
         */
        set_postcode(postcode?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:region property to `region`.
         *
         * Set `region` to %NULL to unset the property in the postal address.
         * @param region the new region for the postal address, or %NULL
         */
        set_region(region?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property in the postal address.
         * @param relation_type the new relation type for the postal_address, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:street property to `street`.
         *
         * Set `street` to %NULL to unset the property in the postal address.
         * @param street the new street for the postal address, or %NULL
         */
        set_street(street?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:subregion property to `subregion`.
         *
         * Set `subregion` to %NULL to unset the property in the postal address.
         * @param subregion the new subregion for the postal address, or %NULL
         */
        set_subregion(subregion?: string | null): void;
        /**
         * Sets the #GDataGDPostalAddress:usage property to `usage`.
         *
         * Set `usage` to %NULL to unset the property in the postal address.
         * @param usage the new usage for the postal address, or %NULL
         */
        set_usage(usage?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDReminder {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            absolute_time: number;
            absoluteTime: number;
            is_absolute_time: boolean;
            isAbsoluteTime: boolean;
            method: string;
            relative_time: number;
            relativeTime: number;
        }
    }

    /**
     * All the fields in the #GDataGDReminder structure are private and should never be accessed directly.
     */
    class GDReminder extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDReminder>;

        // Properties

        /**
         * Absolute time at which the reminder should be issued.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get absolute_time(): number;
        set absolute_time(val: number);
        /**
         * Absolute time at which the reminder should be issued.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get absoluteTime(): number;
        set absoluteTime(val: number);
        /**
         * Whether the reminder is specified as an absolute or relative time.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get is_absolute_time(): boolean;
        /**
         * Whether the reminder is specified as an absolute or relative time.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get isAbsoluteTime(): boolean;
        /**
         * The notification method the reminder should use. For example: %GDATA_GD_REMINDER_ALERT or %GDATA_GD_REMINDER_EMAIL.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get method(): string;
        set method(val: string);
        /**
         * Time at which the reminder should be issued, in minutes relative to the start time of the corresponding event.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get relative_time(): number;
        set relative_time(val: number);
        /**
         * Time at which the reminder should be issued, in minutes relative to the start time of the corresponding event.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdReminder">GData specification</ulink>.
         */
        get relativeTime(): number;
        set relativeTime(val: number);

        // Constructors

        constructor(properties?: Partial<GDReminder.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](method: string | null, absolute_time: number, relative_time: number): GDReminder;

        // Methods

        /**
         * Gets the #GDataGDReminder:absolute-time property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp of the absolute time for the reminder, or <code class="literal">-1</code>
         */
        get_absolute_time(): number;
        /**
         * Gets the #GDataGDReminder:method property.
         * @returns the method, or %NULL
         */
        get_method(): string;
        /**
         * Gets the #GDataGDReminder:relative-time property.
         * @returns the relative time, or <code class="literal">-1</code>
         */
        get_relative_time(): number;
        /**
         * Sets the #GDataGDReminder:absolute-time property to `absolute_time`.
         *
         * Set `absolute_time` to <code class="literal">-1</code> to unset the property.
         * @param absolute_time the new absolute time, or <code class="literal">-1</code>
         */
        set_absolute_time(absolute_time: number): void;
        /**
         * Sets the #GDataGDReminder:method property to `method`.
         *
         * Set `method` to %NULL to unset the property.
         * @param method the new method, or %NULL
         */
        set_method(method?: string | null): void;
        /**
         * Sets the #GDataGDReminder:relative-time property to `relative_time`.
         *
         * Set `relative_time` to <code class="literal">-1</code> to unset the property.
         * @param relative_time the new relative time, or <code class="literal">-1</code>
         */
        set_relative_time(relative_time: number): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDWhen {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            end_time: number;
            endTime: number;
            is_date: boolean;
            isDate: boolean;
            start_time: number;
            startTime: number;
            value_string: string;
            valueString: string;
        }
    }

    /**
     * All the fields in the #GDataGDWhen structure are private and should never be accessed directly.
     */
    class GDWhen extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDWhen>;

        // Properties

        /**
         * The title of a person within the when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get end_time(): number;
        set end_time(val: number);
        /**
         * The title of a person within the when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get endTime(): number;
        set endTime(val: number);
        /**
         * A programmatic value that identifies the type of when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get is_date(): boolean;
        set is_date(val: boolean);
        /**
         * A programmatic value that identifies the type of when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get isDate(): boolean;
        set isDate(val: boolean);
        /**
         * The name of the when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get start_time(): number;
        set start_time(val: number);
        /**
         * The name of the when.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get startTime(): number;
        set startTime(val: number);
        /**
         * A simple string value used to name this when. It allows UIs to display a label such as "Work", "Volunteer",
         * "Professional Society", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get value_string(): string;
        set value_string(val: string);
        /**
         * A simple string value used to name this when. It allows UIs to display a label such as "Work", "Volunteer",
         * "Professional Society", etc.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhen">GData specification</ulink>.
         */
        get valueString(): string;
        set valueString(val: string);

        // Constructors

        constructor(properties?: Partial<GDWhen.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](start_time: number, end_time: number, is_date: boolean): GDWhen;

        // Methods

        /**
         * Adds a reminder to the #GDataGDWhen's list of reminders and increments its reference count.
         *
         * Duplicate reminders will not be added to the list.
         * @param reminder a #GDataGDReminder to add
         */
        add_reminder(reminder: GDReminder): void;
        /**
         * Gets the #GDataGDWhen:end-time property.
         *
         * If the end time is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the end time of the event, or <code class="literal">-1</code>
         */
        get_end_time(): number;
        /**
         * Returns a list of the #GDataGDReminders which are associated with this #GDataGDWhen.
         * @returns a #GList of #GDataGDReminders, or %NULL
         */
        get_reminders(): GDReminder[];
        /**
         * Gets the #GDataGDWhen:start-time property.
         * @returns the UNIX timestamp for the start time of the event
         */
        get_start_time(): number;
        /**
         * Gets the #GDataGDWhen:value-string property.
         * @returns the value string, or %NULL
         */
        get_value_string(): string;
        /**
         * Sets the #GDataGDWhen:end-time property to `end_time`.
         *
         * Set `end_time` to <code class="literal">-1</code> to unset the property.
         * @param end_time the new end time, or <code class="literal">-1</code>
         */
        set_end_time(end_time: number): void;
        /**
         * Sets the #GDataGDWhen:is-date property to `is_date`.
         * @param is_date %TRUE if #GDataGDWhen:start-time and #GDataGDWhen:end-time should be dates rather than times, %FALSE otherwise
         */
        set_is_date(is_date: boolean): void;
        /**
         * Sets the #GDataGDWhen:start-time property to `start_time`.
         * @param start_time the new start time
         */
        set_start_time(start_time: number): void;
        /**
         * Sets the #GDataGDWhen:value-string property to `value_string`.
         *
         * Set `value_string` to %NULL to unset the property.
         * @param value_string the new value string, or %NULL
         */
        set_value_string(value_string?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDWhere {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            label: string;
            relation_type: string;
            relationType: string;
            value_string: string;
            valueString: string;
        }
    }

    /**
     * All the fields in the #GDataGDWhere structure are private and should never be accessed directly.
     */
    class GDWhere extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDWhere>;

        // Properties

        /**
         * Specifies a user-readable label to distinguish this location from others.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhere">GData specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * Specifies the relationship between the containing entity and the contained location. For example: %GDATA_GD_WHERE_EVENT or
         * %GDATA_GD_WHERE_EVENT_PARKING.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhere">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * Specifies the relationship between the containing entity and the contained location. For example: %GDATA_GD_WHERE_EVENT or
         * %GDATA_GD_WHERE_EVENT_PARKING.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhere">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * A simple string representation of this location.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhere">GData specification</ulink>.
         */
        get value_string(): string;
        set value_string(val: string);
        /**
         * A simple string representation of this location.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWhere">GData specification</ulink>.
         */
        get valueString(): string;
        set valueString(val: string);

        // Constructors

        constructor(properties?: Partial<GDWhere.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](relation_type?: string | null, value_string?: string | null, label?: string | null): GDWhere;

        // Methods

        /**
         * Gets the #GDataGDWhere:label property.
         * @returns the label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataGDWhere:relation-type property.
         * @returns the relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGDWhere:value-string property.
         * @returns the value string, or %NULL
         */
        get_value_string(): string;
        /**
         * Sets the #GDataGDWhere:label property to `label`.
         *
         * Set `label` to %NULL to unset the property.
         * @param label the new label, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataGDWhere:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property.
         * @param relation_type the new relation type, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGDWhere:value-string property to `value_string`.
         *
         * Set `value_string` to %NULL to unset the property.
         * @param value_string the new value string, or %NULL
         */
        set_value_string(value_string?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GDWho {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            email_address: string;
            emailAddress: string;
            relation_type: string;
            relationType: string;
            value_string: string;
            valueString: string;
        }
    }

    /**
     * All the fields in the #GDataGDWho structure are private and should never be accessed directly.
     */
    class GDWho extends Parsable implements Comparable {
        static $gtype: GObject.GType<GDWho>;

        // Properties

        /**
         * The e-mail address of the person represented by the #GDataGDWho.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get email_address(): string;
        set email_address(val: string);
        /**
         * The e-mail address of the person represented by the #GDataGDWho.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get emailAddress(): string;
        set emailAddress(val: string);
        /**
         * Specifies the relationship between the containing entity and the contained person. For example: %GDATA_GD_WHO_EVENT_PERFORMER or
         * %GDATA_GD_WHO_EVENT_ATTENDEE.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * Specifies the relationship between the containing entity and the contained person. For example: %GDATA_GD_WHO_EVENT_PERFORMER or
         * %GDATA_GD_WHO_EVENT_ATTENDEE.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * A simple string representation of this person.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get value_string(): string;
        set value_string(val: string);
        /**
         * A simple string representation of this person.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/elements.html#gdWho">GData specification</ulink>.
         */
        get valueString(): string;
        set valueString(val: string);

        // Constructors

        constructor(properties?: Partial<GDWho.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            relation_type?: string | null,
            value_string?: string | null,
            email_address?: string | null,
        ): GDWho;

        // Methods

        /**
         * Gets the #GDataGDWho:email-address property.
         * @returns the e-mail address, or %NULL
         */
        get_email_address(): string;
        /**
         * Gets the #GDataGDWho:relation-type property.
         * @returns the relation type, or %NULL
         */
        get_relation_type(): string;
        /**
         * Gets the #GDataGDWho:value-string property.
         * @returns the value string, or %NULL
         */
        get_value_string(): string;
        /**
         * Sets the #GDataGDWho:email-address property to `email_address`.
         *
         * Set `email_address` to %NULL to unset the property.
         * @param email_address the new e-mail address, or %NULL
         */
        set_email_address(email_address?: string | null): void;
        /**
         * Sets the #GDataGDWho:relation-type property to `relation_type`.
         *
         * Set `relation_type` to %NULL to unset the property.
         * @param relation_type the new relation type, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataGDWho:value-string property to `value_string`.
         *
         * Set `value_string` to %NULL to unset the property.
         * @param value_string the new value string, or %NULL
         */
        set_value_string(value_string?: string | null): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module Generator {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            name: string;
            uri: string;
            version: string;
        }
    }

    /**
     * All the fields in the #GDataGenerator structure are private and should never be accessed directly.
     */
    class Generator extends Parsable implements Comparable {
        static $gtype: GObject.GType<Generator>;

        // Properties

        /**
         * A human-readable name for the generating agent.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.generator">
         * Atom specification</ulink>.
         */
        get name(): string;
        /**
         * An IRI reference that is relevant to the agent.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.generator">
         * Atom specification</ulink>.
         */
        get uri(): string;
        /**
         * Indicates the version of the generating agent.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.generator">
         * Atom specification</ulink>.
         */
        get version(): string;

        // Constructors

        constructor(properties?: Partial<Generator.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Gets the #GDataGenerator:name property. The name will be %NULL or non-empty.
         * @returns the generator's name
         */
        get_name(): string | null;
        /**
         * Gets the #GDataGenerator:uri property. The URI will be %NULL or non-empty.
         * @returns the generator's URI, or %NULL
         */
        get_uri(): string | null;
        /**
         * Gets the #GDataGenerator:version property.
         * @returns the generator's version, or %NULL
         */
        get_version(): string;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module GoaAuthorizer {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps, Authorizer.ConstructorProps {
            goa_object: Goa.Object;
            goaObject: Goa.Object;
        }
    }

    /**
     * All the fields in the #GDataGoaAuthorizer structure are private and should never be accessed directly.
     */
    class GoaAuthorizer extends GObject.Object implements Authorizer {
        static $gtype: GObject.GType<GoaAuthorizer>;

        // Properties

        /**
         * The GOA account providing authentication. This should have all the necessary services enabled on it.
         */
        get goa_object(): Goa.Object;
        /**
         * The GOA account providing authentication. This should have all the necessary services enabled on it.
         */
        get goaObject(): Goa.Object;

        // Constructors

        constructor(properties?: Partial<GoaAuthorizer.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](goa_object: Goa.Object): GoaAuthorizer;

        // Methods

        /**
         * The GOA account providing authentication. This is the same as #GDataGoaAuthorizer:goa-object.
         * @returns the GOA account providing authentication
         */
        get_goa_object(): Goa.Object;

        // Inherited methods
        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         * @returns %TRUE if the #GDataAuthorizer has been authorized to access @domain, %FALSE otherwise
         */
        is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        refresh_authorization_async(cancellable?: Gio.Cancellable | null): Promise<boolean>;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         */
        vfunc_is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        vfunc_process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        vfunc_refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        vfunc_refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         */
        vfunc_refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module Link {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps, Comparable.ConstructorProps {
            content_type: string;
            contentType: string;
            language: string;
            length: number;
            relation_type: string;
            relationType: string;
            title: string;
            uri: string;
        }
    }

    /**
     * All the fields in the #GDataLink structure are private and should never be accessed directly.
     */
    class Link extends Parsable implements Comparable {
        static $gtype: GObject.GType<Link>;

        // Properties

        /**
         * An advisory media type: it is a hint about the type of the representation that is expected to be returned when the value
         * of the #GDataLink:uri property is dereferenced.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get content_type(): string;
        set content_type(val: string);
        /**
         * An advisory media type: it is a hint about the type of the representation that is expected to be returned when the value
         * of the #GDataLink:uri property is dereferenced.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get contentType(): string;
        set contentType(val: string);
        /**
         * Describes the language of the resource pointed to by the #GDataLink:uri property.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get language(): string;
        set language(val: string);
        /**
         * Indicates an advisory length of the linked content in octets. <code class="literal">-1</code> means the length is unspecified.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get length(): number;
        set length(val: number);
        /**
         * The link relation type.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get relation_type(): string;
        set relation_type(val: string);
        /**
         * The link relation type.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get relationType(): string;
        set relationType(val: string);
        /**
         * Conveys human-readable information about the link.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The link's IRI.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.link">Atom specification</ulink>.
         */
        get uri(): string;
        set uri(val: string);

        // Constructors

        constructor(properties?: Partial<Link.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](uri: string, relation_type?: string | null): Link;

        // Methods

        /**
         * Gets the #GDataLink:content-type property. If the content type is non-%NULL, it will be non-empty.
         * @returns the link's content type, or %NULL
         */
        get_content_type(): string | null;
        // Conflicted with GData.Parsable.get_content_type
        get_content_type(...args: never[]): any;
        /**
         * Gets the #GDataLink:language property. If the language is non-%NULL, it will be non-empty.
         * @returns the link's language, or %NULL
         */
        get_language(): string | null;
        /**
         * Gets the #GDataLink:length property.
         * @returns the link's length, or <code class="literal">-1</code>
         */
        get_length(): number;
        /**
         * Gets the #GDataLink:relation-type property. If the relation type is non-%NULL, it will be non-empty.
         * @returns the link's relation type
         */
        get_relation_type(): string | null;
        /**
         * Gets the #GDataLink:title property.
         * @returns the link's title, or %NULL
         */
        get_title(): string;
        /**
         * Gets the #GDataLink:uri property. The return value is guaranteed to be a valid IRI, as
         * specified by the Atom protocol. Common relationship values such as <literal>alternate</literal>
         * are returned as <literal>http://www.iana.org/assignments/relation/alternate</literal>.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#rel_attribute">
         * Atom specification</ulink>.
         * @returns the link's URI
         */
        get_uri(): string;
        /**
         * Sets the #GDataLink:content-type property to `content_type`. `content_type` must be %NULL or non-empty.
         *
         * Set `content_type` to %NULL to unset the property in the link.
         * @param content_type the new content type for the link, or %NULL
         */
        set_content_type(content_type?: string | null): void;
        /**
         * Sets the #GDataLink:language property to `language`. `language` must be %NULL or non-empty.
         *
         * Set `language` to %NULL to unset the property in the link.
         * @param language the new language for the link, or %NULL
         */
        set_language(language?: string | null): void;
        /**
         * Sets the #GDataLink:length property to `length`.
         *
         * Set `length` to <code class="literal">-1</code> to unset the property in the link.
         * @param length the new length for the link, or <code class="literal">-1</code>
         */
        set_length(length: number): void;
        /**
         * Sets the #GDataLink:relation-type property to `relation_type`. If `relation_type` is one of the standard Atom relation types,
         * use one of the defined relation type values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * Set `relation_type` to %NULL to unset the property in the link.
         * @param relation_type the new relation type for the link, or %NULL
         */
        set_relation_type(relation_type?: string | null): void;
        /**
         * Sets the #GDataLink:title property to `title`.
         *
         * Set `title` to %NULL to unset the property in the link.
         * @param title the new title for the link, or %NULL
         */
        set_title(title?: string | null): void;
        /**
         * Sets the #GDataLink:uri property to `uri`. `uri` must be non-%NULL and non-empty.
         * @param uri the new URI for the link
         */
        set_uri(uri: string): void;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module MediaCategory {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            category: string;
            label: string;
            scheme: string;
        }
    }

    /**
     * All the fields in the #GDataMediaCategory structure are private and should never be accessed directly.
     */
    class MediaCategory extends Parsable {
        static $gtype: GObject.GType<MediaCategory>;

        // Properties

        /**
         * The category name.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get category(): string;
        set category(val: string);
        /**
         * A human-readable label that can be displayed in end-user applications.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get label(): string;
        set label(val: string);
        /**
         * A URI that identifies the categorization scheme.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get scheme(): string;
        set scheme(val: string);

        // Constructors

        constructor(properties?: Partial<MediaCategory.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](category: string, scheme?: string | null, label?: string | null): MediaCategory;

        // Methods

        /**
         * Gets the #GDataMediaCategory:category property.
         * @returns the actual category
         */
        get_category(): string;
        /**
         * Gets the #GDataMediaCategory:label property.
         * @returns the category's label, or %NULL
         */
        get_label(): string;
        /**
         * Gets the #GDataMediaCategory:scheme property.
         * @returns the category's scheme, or %NULL
         */
        get_scheme(): string;
        /**
         * Sets the #GDataMediaCategory:category property to `category`.
         * @param category the new category
         */
        set_category(category: string): void;
        /**
         * Sets the #GDataMediaCategory:label property to `label`.
         *
         * Set `label` to %NULL to unset the property.
         * @param label the category's new label, or %NULL
         */
        set_label(label?: string | null): void;
        /**
         * Sets the #GDataMediaCategory:scheme property to `scheme`.
         *
         * Set `scheme` to %NULL to unset the property.
         * @param scheme the category's new scheme, or %NULL
         */
        set_scheme(scheme?: string | null): void;
    }

    module MediaContent {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            content_type: string;
            contentType: string;
            duration: number;
            expression: MediaExpression;
            filesize: number;
            height: number;
            is_default: boolean;
            isDefault: boolean;
            medium: MediaMedium;
            uri: string;
            width: number;
        }
    }

    /**
     * All the fields in the #GDataMediaContent structure are private and should never be accessed directly.
     */
    class MediaContent extends Parsable {
        static $gtype: GObject.GType<MediaContent>;

        // Properties

        /**
         * The standard MIME type of the object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get content_type(): string;
        /**
         * The standard MIME type of the object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get contentType(): string;
        /**
         * The number of seconds for which the media object plays.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get duration(): number;
        /**
         * Determines if the object is a sample or the full version of the object, or even if it is a continuous stream.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get expression(): MediaExpression;
        /**
         * The number of bytes of the media object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get filesize(): number;
        /**
         * The height of the media object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get height(): number;
        /**
         * Determines if this is the default content for the media group. There should only be one default object per media group.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get is_default(): boolean;
        /**
         * Determines if this is the default content for the media group. There should only be one default object per media group.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get isDefault(): boolean;
        /**
         * The type of object, complementing #GDataMediaContent:content-type. It allows the consuming application to make simpler decisions between
         * different content objects, based on whether they're a video or audio stream, for example.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get medium(): MediaMedium;
        /**
         * The direct URI to the media object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get uri(): string;
        /**
         * The width of the media object.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get width(): number;

        // Constructors

        constructor(properties?: Partial<MediaContent.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Downloads and returns a #GDataDownloadStream allowing the content represented by `self` to be read.
         *
         * To get the content type of the downloaded data, gdata_download_stream_get_content_type() can be called on the returned #GDataDownloadStream.
         * Calling gdata_download_stream_get_content_length() on the stream will not return a meaningful result, however, as the stream is encoded in chunks,
         * rather than by content length.
         *
         * In order to cancel the download, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GInputStream operations on the #GDataDownloadStream will not cancel the entire download; merely the read or close operation in question. See the
         * #GDataDownloadStream:cancellable for more details.
         * @param service the #GDataService
         * @param cancellable a #GCancellable for the entire download stream, or %NULL
         * @returns a #GDataDownloadStream to download the content with, or %NULL; unref with g_object_unref()
         */
        download(service: Service, cancellable?: Gio.Cancellable | null): DownloadStream;
        /**
         * Gets the #GDataMediaContent:content-type property.
         * @returns the content's content (MIME) type, or %NULL
         */
        get_content_type(): string;
        /**
         * Gets the #GDataMediaContent:duration property.
         * @returns the content's duration in seconds, or <code class="literal">0</code>
         */
        get_duration(): number;
        /**
         * Gets the #GDataMediaContent:expression property.
         * @returns the content's expression, or %GDATA_MEDIA_EXPRESSION_FULL
         */
        get_expression(): MediaExpression;
        /**
         * Gets the #GDataMediaContent:filesize property.
         * @returns the number of bytes in the content, or <code class="literal">0</code>
         */
        get_filesize(): number;
        /**
         * Gets the #GDataMediaContent:height property.
         * @returns the content's height in pixels, or <code class="literal">0</code>
         */
        get_height(): number;
        /**
         * Gets the #GDataMediaContent:medium property.
         * @returns the type of the content, or %GDATA_MEDIA_UNKNOWN
         */
        get_medium(): MediaMedium;
        /**
         * Gets the #GDataMediaContent:uri property.
         * @returns the content's URI
         */
        get_uri(): string;
        /**
         * Gets the #GDataMediaContent:width property.
         * @returns the content's width in pixels, or <code class="literal">0</code>
         */
        get_width(): number;
    }

    module MediaCredit {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            credit: string;
            role: string;
            scheme: string;
        }
    }

    /**
     * All the fields in the #GDataMediaCredit structure are private and should never be accessed directly.
     */
    class MediaCredit extends Parsable {
        static $gtype: GObject.GType<MediaCredit>;

        // Properties

        /**
         * The credited entity's name.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get credit(): string;
        /**
         * The role the credited entity played in the production of the media.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get role(): string;
        /**
         * A URI that identifies the role scheme.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get scheme(): string;

        // Constructors

        constructor(properties?: Partial<MediaCredit.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Gets the #GDataMediaCredit:credit property.
         * @returns the name of the credited entity
         */
        get_credit(): string;
        /**
         * Gets the #GDataMediaCredit:role property.
         * @returns the credited entity's role, or %NULL
         */
        get_role(): string;
        /**
         * Gets the #GDataMediaCredit:scheme property.
         * @returns the credit's role scheme, or %NULL
         */
        get_scheme(): string;
    }

    module MediaThumbnail {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            height: number;
            time: number;
            uri: string;
            width: number;
        }
    }

    /**
     * All the fields in the #GDataMediaThumbnail structure are private and should never be accessed directly.
     */
    class MediaThumbnail extends Parsable {
        static $gtype: GObject.GType<MediaThumbnail>;

        // Properties

        /**
         * The height of the thumbnail, in pixels.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get height(): number;
        /**
         * The time offset of the thumbnail in relation to the media object, in milliseconds.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get time(): number;
        /**
         * The URI of the thumbnail.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get uri(): string;
        /**
         * The width of the thumbnail, in pixels.
         *
         * For more information, see the <ulink type="http" url="http://video.search.yahoo.com/mrss">Media RSS specification</ulink>.
         */
        get width(): number;

        // Constructors

        constructor(properties?: Partial<MediaThumbnail.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Downloads and returns a #GDataDownloadStream allowing the thumbnail data represented by `self` to be read.
         *
         * To get the content type of the downloaded data, gdata_download_stream_get_content_type() can be called on the returned #GDataDownloadStream.
         * Calling gdata_download_stream_get_content_length() on the stream will not return a meaningful result, however, as the stream is encoded in chunks,
         * rather than by content length.
         *
         * In order to cancel the download, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GInputStream operations on the #GDataDownloadStream will not cancel the entire download; merely the read or close operation in question. See the
         * #GDataDownloadStream:cancellable for more details.
         * @param service the #GDataService
         * @param cancellable a #GCancellable for the entire download stream, or %NULL
         * @returns a #GDataDownloadStream to download the thumbnail with, or %NULL; unref with g_object_unref()
         */
        download(service: Service, cancellable?: Gio.Cancellable | null): DownloadStream;
        /**
         * Gets the #GDataMediaThumbnail:height property.
         * @returns the thumbnail's height in pixels, or <code class="literal">0</code>
         */
        get_height(): number;
        /**
         * Gets the #GDataMediaThumbnail:time property.
         * @returns the thumbnail's time offset in the media, or <code class="literal">-1</code>
         */
        get_time(): number;
        /**
         * Gets the #GDataMediaThumbnail:uri property.
         * @returns the thumbnail's URI
         */
        get_uri(): string;
        /**
         * Gets the #GDataMediaThumbnail:width property.
         * @returns the thumbnail's width in pixels, or <code class="literal">0</code>
         */
        get_width(): number;
    }

    module OAuth2Authorizer {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps, Authorizer.ConstructorProps {
            client_id: string;
            clientId: string;
            client_secret: string;
            clientSecret: string;
            locale: string;
            proxy_resolver: Gio.ProxyResolver;
            proxyResolver: Gio.ProxyResolver;
            redirect_uri: string;
            redirectUri: string;
            refresh_token: string;
            refreshToken: string;
            timeout: number;
        }
    }

    /**
     * All the fields in the #GDataOAuth2Authorizer structure are private and should never be accessed directly.
     */
    class OAuth2Authorizer extends GObject.Object implements Authorizer {
        static $gtype: GObject.GType<OAuth2Authorizer>;

        // Properties

        /**
         * A client ID for your application (see the
         * <ulink url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse" type="http">reference documentation</ulink>).
         *
         * It is recommended that the ID is of the form
         * <literal><replaceable>company name</replaceable>-
         * <replaceable>application name</replaceable>-
         * <replaceable>version ID</replaceable></literal>.
         */
        get client_id(): string;
        /**
         * A client ID for your application (see the
         * <ulink url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse" type="http">reference documentation</ulink>).
         *
         * It is recommended that the ID is of the form
         * <literal><replaceable>company name</replaceable>-
         * <replaceable>application name</replaceable>-
         * <replaceable>version ID</replaceable></literal>.
         */
        get clientId(): string;
        /**
         * Client secret provided by Google. This is unique for each application
         * and is accessible from Google’s Developer Console when registering
         * an application. It must be paired with the
         * #GDataOAuth2Authorizer:client-id.
         *
         * See the
         * <ulink url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse" type="http">reference
         * documentation</ulink> for details.
         */
        get client_secret(): string;
        /**
         * Client secret provided by Google. This is unique for each application
         * and is accessible from Google’s Developer Console when registering
         * an application. It must be paired with the
         * #GDataOAuth2Authorizer:client-id.
         *
         * See the
         * <ulink url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#handlingtheresponse" type="http">reference
         * documentation</ulink> for details.
         */
        get clientSecret(): string;
        /**
         * The locale to use for network requests, in UNIX locale format.
         * (e.g. "en_GB", "cs", "de_DE".) Use %NULL for the default "C" locale
         * (typically "en_US").
         *
         * This locale will be used by the server-side software to localise the
         * authentication and authorization pages at the URI returned by
         * gdata_oauth2_authorizer_build_authentication_uri().
         *
         * The server-side behaviour is undefined if it doesn't support a given
         * locale.
         */
        get locale(): string;
        set locale(val: string);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxy_resolver(): Gio.ProxyResolver;
        set proxy_resolver(val: Gio.ProxyResolver);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxyResolver(): Gio.ProxyResolver;
        set proxyResolver(val: Gio.ProxyResolver);
        /**
         * Redirect URI to send the response from the authorisation request to.
         * This must either be %GDATA_OAUTH2_REDIRECT_URI_OOB,
         * %GDATA_OAUTH2_REDIRECT_URI_OOB_AUTO, or a
         * <code>http://localhost</code> URI with any port number (optionally)
         * specified.
         *
         * This URI is where the authorisation server will redirect the user
         * after they have completed interacting with the authentication page
         * (gdata_oauth2_authorizer_build_authentication_uri()). If it is
         * %GDATA_OAUTH2_REDIRECT_URI_OOB, a page will be returned in the user’s
         * browser with the authorisation code in its title and also embedded in
         * the page for the user to copy if it is not possible to automatically
         * extract the code from the page title. If it is
         * %GDATA_OAUTH2_REDIRECT_URI_OOB_AUTO, a similar page will be returned
         * with the authorisation code in its title, but without displaying the
         * code to the user — the user will simply be asked to close the page.
         * If it is a localhost URI, the authentication page will redirect to
         * that URI with the authorisation code appended as a <code>code</code>
         * query parameter. If the user denies the authentication request, the
         * authentication page will redirect to that URI with
         * <code>error=access_denied</code> appended as a query parameter.
         *
         * Note that the redirect URI used must match that registered in
         * Google’s Developer Console for your application.
         *
         * See the <ulink type="http" url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi">reference
         * documentation</ulink> for details about choosing a redirect URI.
         */
        get redirect_uri(): string;
        /**
         * Redirect URI to send the response from the authorisation request to.
         * This must either be %GDATA_OAUTH2_REDIRECT_URI_OOB,
         * %GDATA_OAUTH2_REDIRECT_URI_OOB_AUTO, or a
         * <code>http://localhost</code> URI with any port number (optionally)
         * specified.
         *
         * This URI is where the authorisation server will redirect the user
         * after they have completed interacting with the authentication page
         * (gdata_oauth2_authorizer_build_authentication_uri()). If it is
         * %GDATA_OAUTH2_REDIRECT_URI_OOB, a page will be returned in the user’s
         * browser with the authorisation code in its title and also embedded in
         * the page for the user to copy if it is not possible to automatically
         * extract the code from the page title. If it is
         * %GDATA_OAUTH2_REDIRECT_URI_OOB_AUTO, a similar page will be returned
         * with the authorisation code in its title, but without displaying the
         * code to the user — the user will simply be asked to close the page.
         * If it is a localhost URI, the authentication page will redirect to
         * that URI with the authorisation code appended as a <code>code</code>
         * query parameter. If the user denies the authentication request, the
         * authentication page will redirect to that URI with
         * <code>error=access_denied</code> appended as a query parameter.
         *
         * Note that the redirect URI used must match that registered in
         * Google’s Developer Console for your application.
         *
         * See the <ulink type="http" url="https://developers.google.com/accounts/docs/OAuth2InstalledApp#choosingredirecturi">reference
         * documentation</ulink> for details about choosing a redirect URI.
         */
        get redirectUri(): string;
        /**
         * The server provided refresh token, which can be stored and passed in
         * to new #GDataOAuth2Authorizer instances before calling
         * gdata_authorizer_refresh_authorization_async() to create a new
         * short-lived access token.
         *
         * The refresh token is opaque data and must not be parsed.
         */
        get refresh_token(): string;
        set refresh_token(val: string);
        /**
         * The server provided refresh token, which can be stored and passed in
         * to new #GDataOAuth2Authorizer instances before calling
         * gdata_authorizer_refresh_authorization_async() to create a new
         * short-lived access token.
         *
         * The refresh token is opaque data and must not be parsed.
         */
        get refreshToken(): string;
        set refreshToken(val: string);
        /**
         * A timeout, in seconds, for network operations. If the timeout is
         * exceeded, the operation will be cancelled and
         * %GDATA_SERVICE_ERROR_NETWORK_ERROR will be returned.
         *
         * If the timeout is <code class="literal">0</code>, operations will
         * never time out.
         */
        get timeout(): number;
        set timeout(val: number);

        // Constructors

        constructor(properties?: Partial<OAuth2Authorizer.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            client_id: string,
            client_secret: string,
            redirect_uri: string,
            service_type: GObject.GType,
        ): OAuth2Authorizer;

        static new_for_authorization_domains(
            client_id: string,
            client_secret: string,
            redirect_uri: string,
            authorization_domains: AuthorizationDomain[],
        ): OAuth2Authorizer;

        // Methods

        /**
         * Build an authentication URI to open in the user’s web browser (or an embedded
         * browser widget). This will display an authentication page from Google,
         * including an authentication form and confirmation of the authorisation
         * domains being requested by this #GDataAuthorizer. The user will authenticate
         * in the browser, then an authorisation code will be returned via the
         * #GDataOAuth2Authorizer:redirect-uri, ready to be passed to
         * gdata_oauth2_authorizer_request_authorization().
         *
         * If `login_hint` is non-%NULL, it will be passed to the server as a hint of
         * which user is attempting to authenticate, which can be used to pre-fill the
         * e-mail address box in the authentication form.
         *
         * If `include_granted_scopes` is %TRUE, the authentication request will
         * automatically include all authorisation domains previously granted to this
         * user/application pair, allowing for incremental authentication — asking for
         * permissions as needed, rather than all in one large bundle at the first
         * opportunity. If `include_granted_scopes` is %FALSE, incremental authentication
         * will not be enabled, and only the domains passed to the
         * #GDataOAuth2Authorizer constructor will eventually be authenticated.
         * See the
         * <ulink type="http" url="https://developers.google.com/accounts/docs/OAuth2WebServer#incrementalAuth">reference
         * documentation</ulink> for more details.
         * @param login_hint optional e-mail address or sub identifier for the user
         * @param include_granted_scopes %TRUE to enable incremental authorisation
         * @returns the authentication URI to open in a web browser; free with g_free()
         */
        build_authentication_uri(login_hint: string | null, include_granted_scopes: boolean): string;
        /**
         * Returns the authorizer's refresh token, #GDataOAuth2Authorizer:refresh-token,
         * as set by client code previously on the #GDataOAuth2Authorizer, or as
         * returned by the most recent authentication operation.
         * @returns the authorizer's refresh token
         */
        dup_refresh_token(): string;
        /**
         * Returns the authorizer's client ID, #GDataOAuth2Authorizer:client-id, as
         * specified on constructing the #GDataOAuth2Authorizer.
         * @returns the authorizer's client ID
         */
        get_client_id(): string;
        /**
         * Returns the authorizer's client secret, #GDataOAuth2Authorizer:client-secret,
         * as specified on constructing the #GDataOAuth2Authorizer.
         * @returns the authorizer's client secret
         */
        get_client_secret(): string;
        /**
         * Returns the locale currently being used for network requests, or %NULL if the
         * locale is the default.
         * @returns the current locale
         */
        get_locale(): string | null;
        /**
         * Gets the #GProxyResolver on the #GDataOAuth2Authorizer's #SoupSession.
         * @returns a #GProxyResolver, or %NULL
         */
        get_proxy_resolver(): Gio.ProxyResolver | null;
        /**
         * Returns the authorizer’s redirect URI, #GDataOAuth2Authorizer:redirect-uri,
         * as specified on constructing the #GDataOAuth2Authorizer.
         * @returns the authorizer’s redirect URI
         */
        get_redirect_uri(): string;
        /**
         * Gets the #GDataOAuth2Authorizer:timeout property; the network timeout, in
         * seconds.
         * @returns the timeout, or <code class="literal">0</code>
         */
        get_timeout(): number;
        /**
         * Request an authorisation code from the user’s web browser is converted to
         * authorisation (access and refresh) tokens. This is the final step in the
         * authentication process; once complete, the #GDataOAuth2Authorizer should be
         * fully authorised for its domains.
         *
         * On failure, %GDATA_SERVICE_ERROR_FORBIDDEN will be returned if the user or
         * server denied the authorisation request. %GDATA_SERVICE_ERROR_PROTOCOL_ERROR
         * will be returned if the server didn’t follow the expected protocol.
         * %G_IO_ERROR_CANCELLED will be returned if the operation was cancelled using
         * `cancellable`.
         * @param authorization_code code returned from the authentication page
         * @param cancellable a #GCancellable, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        request_authorization(authorization_code: string, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Asynchronous version of gdata_oauth2_authorizer_request_authorization().
         * @param authorization_code code returned from the authentication page
         * @param cancellable an optional #GCancellable, or %NULL
         */
        request_authorization_async(authorization_code: string, cancellable?: Gio.Cancellable | null): Promise<boolean>;
        /**
         * Asynchronous version of gdata_oauth2_authorizer_request_authorization().
         * @param authorization_code code returned from the authentication page
         * @param cancellable an optional #GCancellable, or %NULL
         * @param callback a #GAsyncReadyCallback to call when authorization is finished
         */
        request_authorization_async(
            authorization_code: string,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Asynchronous version of gdata_oauth2_authorizer_request_authorization().
         * @param authorization_code code returned from the authentication page
         * @param cancellable an optional #GCancellable, or %NULL
         * @param callback a #GAsyncReadyCallback to call when authorization is finished
         */
        request_authorization_async(
            authorization_code: string,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous authorization operation started with
         * gdata_oauth2_authorizer_request_authorization_async().
         * @param async_result a #GAsyncResult
         * @returns %TRUE if authorization was successful, %FALSE otherwise
         */
        request_authorization_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Set the locale used for network requests to `locale,` given in standard UNIX
         * locale format. See #GDataOAuth2Authorizer:locale for more details.
         *
         * Note that while it’s possible to change the locale after sending network
         * requests (i.e. calling gdata_oauth2_authorizer_build_authentication_uri() for
         * the first time), it is unsupported, as the server-side software may behave
         * unexpectedly. The only supported use of this method is after creation of the
         * authorizer, but before any network requests are made.
         * @param locale the new locale in UNIX locale format, or %NULL for the default locale
         */
        set_locale(locale?: string | null): void;
        /**
         * Sets the #GProxyResolver on the #SoupSession used internally by the given
         * #GDataOAuth2Authorizer.
         * @param proxy_resolver a #GProxyResolver, or %NULL
         */
        set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void;
        /**
         * Sets the authorizer's refresh token, #GDataOAuth2Authorizer:refresh-token.
         * This is used to periodically refresh the access token. Set it to %NULL to
         * clear the current authentication from the authorizer.
         * @param refresh_token the new refresh token, or %NULL to clear   authorization
         */
        set_refresh_token(refresh_token?: string | null): void;
        /**
         * Sets the #GDataOAuth2Authorizer:timeout property; the network timeout, in
         * seconds.
         *
         * If `timeout` is <code class="literal">0</code>, network operations will never
         * time out.
         * @param timeout the timeout, or <code class="literal">0</code>
         */
        set_timeout(timeout: number): void;

        // Inherited methods
        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         * @returns %TRUE if the #GDataAuthorizer has been authorized to access @domain, %FALSE otherwise
         */
        is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        refresh_authorization_async(cancellable?: Gio.Cancellable | null): Promise<boolean>;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         */
        vfunc_is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        vfunc_process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        vfunc_refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        vfunc_refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         */
        vfunc_refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module Parsable {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            constructed_from_xml: boolean;
            constructedFromXml: boolean;
        }
    }

    /**
     * All the fields in the #GDataParsable structure are private and should never be accessed directly.
     */
    abstract class Parsable extends GObject.Object {
        static $gtype: GObject.GType<Parsable>;

        // Properties

        /**
         * Specifies whether the object was constructed by parsing XML or manually.
         */
        get constructed_from_xml(): boolean;
        /**
         * Specifies whether the object was constructed by parsing XML or manually.
         */
        get constructedFromXml(): boolean;

        // Constructors

        constructor(properties?: Partial<Parsable.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static new_from_json(parsable_type: GObject.GType, json: string, length: number): Parsable;

        static new_from_xml(parsable_type: GObject.GType, xml: string, length: number): Parsable;

        // Virtual methods

        vfunc_get_json(builder: Json.Builder): void;
        vfunc_get_namespaces(namespaces: { [key: string]: any } | GLib.HashTable<any, any>): void;
        vfunc_get_xml(xml_string: GLib.String): void;
        vfunc_parse_json(reader: Json.Reader): boolean;
        vfunc_parse_xml(doc: libxml2.Doc, node: libxml2.Node): boolean;
        vfunc_post_parse_json(): boolean;
        vfunc_post_parse_xml(): boolean;
        vfunc_pre_get_xml(xml_string: GLib.String): void;
        vfunc_pre_parse_xml(doc: libxml2.Doc, root_node: libxml2.Node): boolean;

        // Methods

        /**
         * Returns the content type upon which the #GDataParsable is built. For example, `application/atom+xml` or `application/json`.
         * @returns the parsable's content type
         */
        get_content_type(): string;
        /**
         * Builds a JSON representation of the #GDataParsable in its current state, such that it could be inserted on the server. The JSON
         * is valid for stand-alone use.
         * @returns the object's JSON; free with g_free()
         */
        get_json(): string;
        /**
         * Builds an XML representation of the #GDataParsable in its current state, such that it could be inserted on the server. The XML is guaranteed
         * to have all its namespaces declared properly in a self-contained fashion, and is valid for stand-alone use.
         * @returns the object's XML; free with g_free()
         */
        get_xml(): string;
    }

    module PicasaWebAlbum {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            album_id: string;
            albumId: string;
            bytes_used: number;
            bytesUsed: number;
            comment_count: number;
            commentCount: number;
            edited: number;
            is_commenting_enabled: boolean;
            isCommentingEnabled: boolean;
            latitude: number;
            location: string;
            longitude: number;
            nickname: string;
            num_photos: number;
            numPhotos: number;
            num_photos_remaining: number;
            numPhotosRemaining: number;
            tags: string[];
            timestamp: number;
            user: string;
            visibility: PicasaWebVisibility;
        }
    }

    /**
     * All the fields in the #GDataPicasaWebAlbum structure are private and should never be accessed directly.
     */
    class PicasaWebAlbum extends Entry {
        static $gtype: GObject.GType<PicasaWebAlbum>;

        // Properties

        /**
         * The ID of the album. This is a substring of the ID returned by gdata_entry_get_id() for #GDataPicasaWebAlbums; for example,
         * if gdata_entry_get_id() returned "http://picasaweb.google.com/data/entry/user/libgdata.picasaweb/albumid/5328889949261497249" for a
         * particular #GDataPicasaWebAlbum, the #GDataPicasaWebAlbum:album-id property would be "5328889949261497249".
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_id">
         * gphoto specification</ulink>.
         */
        get album_id(): string;
        /**
         * The ID of the album. This is a substring of the ID returned by gdata_entry_get_id() for #GDataPicasaWebAlbums; for example,
         * if gdata_entry_get_id() returned "http://picasaweb.google.com/data/entry/user/libgdata.picasaweb/albumid/5328889949261497249" for a
         * particular #GDataPicasaWebAlbum, the #GDataPicasaWebAlbum:album-id property would be "5328889949261497249".
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_id">
         * gphoto specification</ulink>.
         */
        get albumId(): string;
        /**
         * The number of bytes consumed by this album and its contents. Note that this is only set if the authenticated user is the owner of the
         * album; it's otherwise <code class="literal">-1</code>.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_bytesUsed">
         * gphoto specification</ulink>.
         */
        get bytes_used(): number;
        /**
         * The number of bytes consumed by this album and its contents. Note that this is only set if the authenticated user is the owner of the
         * album; it's otherwise <code class="literal">-1</code>.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_bytesUsed">
         * gphoto specification</ulink>.
         */
        get bytesUsed(): number;
        /**
         * The number of comments on the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_commentCount">
         * gphoto specification</ulink>.
         */
        get comment_count(): number;
        /**
         * The number of comments on the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_commentCount">
         * gphoto specification</ulink>.
         */
        get commentCount(): number;
        /**
         * The time this album was last edited. If the album has not been edited yet, the content indicates the time it was created.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appEdited">
         * Atom Publishing Protocol specification</ulink>.
         */
        get edited(): number;
        get is_commenting_enabled(): boolean;
        set is_commenting_enabled(val: boolean);
        get isCommentingEnabled(): boolean;
        set isCommentingEnabled(val: boolean);
        /**
         * The location as a latitude coordinate associated with this album. Valid latitudes range from <code class="literal">-90.0</code>
         * to <code class="literal">90.0</code> inclusive.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/docs/2.0/reference.html#georss_where">
         * GeoRSS specification</ulink>.
         */
        get latitude(): number;
        set latitude(val: number);
        /**
         * The user-specified location associated with the album. A place name.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_location">
         * gphoto specification</ulink>.
         */
        get location(): string;
        set location(val: string);
        /**
         * The location as a longitude coordinate associated with this album. Valid longitudes range from <code class="literal">-180.0</code>
         * to <code class="literal">180.0</code> inclusive.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/docs/2.0/reference.html#georss_where">
         * GeoRSS specification</ulink>.
         */
        get longitude(): number;
        set longitude(val: number);
        /**
         * The user's nickname. This is a user-specified value that should be used when referring to the user by name.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_nickname">
         * gphoto specification</ulink>.
         */
        get nickname(): string;
        /**
         * The number of photos and videos in the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_numphotos">
         * gphoto specification</ulink>.
         */
        get num_photos(): number;
        /**
         * The number of photos and videos in the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_numphotos">
         * gphoto specification</ulink>.
         */
        get numPhotos(): number;
        /**
         * The number of photos and videos that can still be uploaded to this album.
         * This doesn't account for quota, just a hardcoded maximum number per album set by Google.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_numphotosremaining">
         * gphoto specification</ulink>.
         */
        get num_photos_remaining(): number;
        /**
         * The number of photos and videos that can still be uploaded to this album.
         * This doesn't account for quota, just a hardcoded maximum number per album set by Google.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_numphotosremaining">
         * gphoto specification</ulink>.
         */
        get numPhotosRemaining(): number;
        /**
         * A %NULL-terminated array of tags associated with the album; all the tags associated with the individual photos in the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#media_keywords">
         * Media RSS specification</ulink>.
         */
        get tags(): string[];
        set tags(val: string[]);
        /**
         * The timestamp of when the album occurred, settable by the user. This a UNIX timestamp in milliseconds (not seconds) since the epoch.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_timestamp">
         * gphoto specification</ulink>.
         */
        get timestamp(): number;
        set timestamp(val: number);
        /**
         * The username of the album owner.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_user">
         * gphoto specification</ulink>.
         */
        get user(): string;
        /**
         * The visibility (or access rights) of the album.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_access">
         * gphoto specification</ulink>.
         */
        get visibility(): PicasaWebVisibility;
        set visibility(val: PicasaWebVisibility);

        // Constructors

        constructor(properties?: Partial<PicasaWebAlbum.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): PicasaWebAlbum;

        // Methods

        /**
         * Gets the #GDataPicasaWebAlbum:bytes-used property. It will return <code class="literal">-1</code> if the current authenticated
         * user is not the owner of the album.
         * @returns the number of bytes used by the album and its contents, or <code class="literal">-1</code>
         */
        get_bytes_used(): number;
        /**
         * Gets the #GDataPicasaWebAlbum:comment-count property.
         * @returns the number of comments on the album
         */
        get_comment_count(): number;
        /**
         * Returns a list of media content, such as the cover image for the album.
         * @returns a #GList of #GDataMediaContent items
         */
        get_contents(): MediaContent[];
        /**
         * Gets the #GDataPicasaWebAlbum:latitude and #GDataPicasaWebAlbum:longitude properties,
         * setting the out parameters to them. If either latitude or longitude is %NULL, that parameter will not be set.
         * If the coordinates are unset, `latitude` and `longitude` will be set to %G_MAXDOUBLE.
         */
        get_coordinates(): [number, number];
        /**
         * Gets the #GDataPicasaWebAlbum:edited property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the album was last edited, or <code class="literal">-1</code>
         */
        get_edited(): number;
        /**
         * Gets the #GDataPicasaWebAlbum:album-id property.
         * @returns the album's ID
         */
        get_id(): string;
        // Conflicted with GData.Entry.get_id
        get_id(...args: never[]): any;
        /**
         * Gets the #GDataPicasaWebAlbum:location property.
         * @returns the album's location, or %NULL
         */
        get_location(): string;
        /**
         * Gets the #GDataPicasaWebAlbum:nickname property.
         * @returns the album owner's nickname
         */
        get_nickname(): string;
        /**
         * Gets the #GDataPicasaWebAlbum:num-photos property.
         * @returns the number of photos currently in the album
         */
        get_num_photos(): number;
        /**
         * Gets the #GDataPicasaWebAlbum:num-photos-remaining property.
         * @returns the number of photos that can still be uploaded to the album
         */
        get_num_photos_remaining(): number;
        /**
         * Gets the #GDataPicasaWebAlbum:tags property.
         * @returns a %NULL-terminated array of tags associated with all the photos in the album, or %NULL
         */
        get_tags(): string[];
        /**
         * Returns a list of thumbnails, often at different sizes, for this album.
         * @returns a #GList of #GDataMediaThumbnails, or %NULL
         */
        get_thumbnails(): MediaThumbnail[];
        /**
         * Gets the #GDataPicasaWebAlbum:timestamp property. This value usually holds either the date that best corresponds to the album of photos, or to the
         * day it was uploaded. It's a UNIX timestamp in milliseconds (not seconds) since the epoch. If the property is unset, <code class="literal">-1</code>
         * will be returned.
         * @returns the UNIX timestamp for the timestamp property in milliseconds, or <code class="literal">-1</code>
         */
        get_timestamp(): number;
        /**
         * Gets the #GDataPicasaWebAlbum:user property.
         * @returns the album owner's username
         */
        get_user(): string;
        /**
         * Gets the #GDataPicasaWebAlbum:visibility property.
         * @returns the album's visibility level
         */
        get_visibility(): PicasaWebVisibility;
        /**
         * Sets the #GDataPicasaWebAlbum:latitude and #GDataPicasaWebAlbum:longitude properties to
         * `latitude` and `longitude` respectively.
         * @param latitude the album's new latitude coordinate, or %G_MAXDOUBLE
         * @param longitude the album's new longitude coordinate, or %G_MAXDOUBLE
         */
        set_coordinates(latitude: number, longitude: number): void;
        /**
         * Sets the #GDataPicasaWebAlbum:is-commenting-enabled property to `is_commenting_enabled`.
         * @param is_commenting_enabled %TRUE if commenting should be enabled for the album, %FALSE otherwise
         */
        set_is_commenting_enabled(is_commenting_enabled: boolean): void;
        /**
         * Sets the #GDataPicasaWebAlbum:location property to `location`.
         *
         * Set `location` to %NULL to unset the property.
         * @param location the new album location, or %NULL
         */
        set_location(location?: string | null): void;
        /**
         * Sets the #GDataPicasaWebAlbum:tags property to `tags`.
         *
         * Set `tags` to %NULL to unset the album's tag list.
         * @param tags the new %NULL-terminated array of tags, or %NULL
         */
        set_tags(tags?: string[] | null): void;
        /**
         * Sets the #GDataPicasaWebAlbum:timestamp property from `timestamp`. This should be a UNIX timestamp in milliseconds (not seconds) since the epoch.
         *
         * Set `timestamp` to <code class="literal">-1</code> to unset the property.
         * @param timestamp a UNIX timestamp, or <code class="literal">-1</code>
         */
        set_timestamp(timestamp: number): void;
        /**
         * Sets the #GDataPicasaWebAlbum:visibility property to `visibility`.
         * @param visibility the new album visibility level
         */
        set_visibility(visibility: PicasaWebVisibility): void;
    }

    module PicasaWebComment {
        // Constructor properties interface

        interface ConstructorProps extends Comment.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataPicasaWebComment structure are private and should never be accessed directly.
     */
    class PicasaWebComment extends Comment {
        static $gtype: GObject.GType<PicasaWebComment>;

        // Constructors

        constructor(properties?: Partial<PicasaWebComment.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id: string): PicasaWebComment;
        // Conflicted with GData.Entry.new

        static ['new'](...args: never[]): any;
    }

    module PicasaWebFeed {
        // Constructor properties interface

        interface ConstructorProps extends Feed.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataPicasaWebFeed structure are private and should never be accessed directly.
     */
    class PicasaWebFeed extends Feed {
        static $gtype: GObject.GType<PicasaWebFeed>;

        // Constructors

        constructor(properties?: Partial<PicasaWebFeed.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;
    }

    module PicasaWebFile {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps, Commentable.ConstructorProps {
            album_id: string;
            albumId: string;
            caption: string;
            checksum: string;
            comment_count: number;
            commentCount: number;
            credit: string;
            distance: number;
            edited: number;
            exposure: number;
            file_id: string;
            fileId: string;
            flash: boolean;
            focal_length: number;
            focalLength: number;
            fstop: number;
            height: number;
            image_unique_id: string;
            imageUniqueId: string;
            is_commenting_enabled: boolean;
            isCommentingEnabled: boolean;
            iso: number;
            latitude: number;
            longitude: number;
            make: string;
            model: string;
            rotation: number;
            size: number;
            tags: string[];
            timestamp: number;
            version: string;
            video_status: string;
            videoStatus: string;
            width: number;
        }
    }

    /**
     * All the fields in the #GDataPicasaWebFile structure are private and should never be accessed directly.
     */
    class PicasaWebFile extends Entry implements Commentable {
        static $gtype: GObject.GType<PicasaWebFile>;

        // Properties

        /**
         * The ID for the file's album. This is in the same form as returned by gdata_picasaweb_album_get_id().
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_albumid">
         * gphoto specification</ulink>.
         */
        get album_id(): string;
        set album_id(val: string);
        /**
         * The ID for the file's album. This is in the same form as returned by gdata_picasaweb_album_get_id().
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_albumid">
         * gphoto specification</ulink>.
         */
        get albumId(): string;
        set albumId(val: string);
        /**
         * The file's descriptive caption.
         */
        get caption(): string;
        set caption(val: string);
        /**
         * A checksum of the file, useful for duplicate detection.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_checksum">
         * gphoto specification</ulink>.
         */
        get checksum(): string;
        set checksum(val: string);
        /**
         * The number of comments on the file.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_commentCount">
         * gphoto specification</ulink>.
         */
        get comment_count(): number;
        /**
         * The number of comments on the file.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_commentCount">
         * gphoto specification</ulink>.
         */
        get commentCount(): number;
        /**
         * The nickname of the user credited with this file.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#media_credit">Media RSS
         * specification</ulink>.
         */
        get credit(): string;
        /**
         * The distance to the subject reported in the image's EXIF.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get distance(): number;
        /**
         * The time this file was last edited. If the file has not been edited yet, the content indicates the time it was created.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/protocol/#appEdited">
         * Atom Publishing Protocol specification</ulink>.
         */
        get edited(): number;
        /**
         * The exposure time.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get exposure(): number;
        /**
         * The ID of the file. This is a substring of the ID returned by gdata_entry_get_id() for #GDataPicasaWebFiles; for example,
         * if gdata_entry_get_id() returned
         * "http://picasaweb.google.com/data/entry/user/libgdata.picasaweb/albumid/5328889949261497249/photoid/5328890138794566386" for a
         * particular #GDataPicasaWebFile, the #GDataPicasaWebFile:file-id property would be "5328890138794566386".
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_id">
         * gphoto specification</ulink>.
         */
        get file_id(): string;
        /**
         * The ID of the file. This is a substring of the ID returned by gdata_entry_get_id() for #GDataPicasaWebFiles; for example,
         * if gdata_entry_get_id() returned
         * "http://picasaweb.google.com/data/entry/user/libgdata.picasaweb/albumid/5328889949261497249/photoid/5328890138794566386" for a
         * particular #GDataPicasaWebFile, the #GDataPicasaWebFile:file-id property would be "5328890138794566386".
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_id">
         * gphoto specification</ulink>.
         */
        get fileId(): string;
        /**
         * Indicates whether the flash was used.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get flash(): boolean;
        /**
         * The focal length for the shot.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get focal_length(): number;
        /**
         * The focal length for the shot.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get focalLength(): number;
        /**
         * The F-stop value.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get fstop(): number;
        /**
         * The height of the photo or video, in pixels.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_height">
         * gphoto specification</ulink>.
         */
        get height(): number;
        /**
         * An unique ID for the image found in the EXIF.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get image_unique_id(): string;
        /**
         * An unique ID for the image found in the EXIF.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get imageUniqueId(): string;
        /**
         * Whether commenting is enabled for this file.
         */
        get is_commenting_enabled(): boolean;
        set is_commenting_enabled(val: boolean);
        /**
         * Whether commenting is enabled for this file.
         */
        get isCommentingEnabled(): boolean;
        set isCommentingEnabled(val: boolean);
        /**
         * The ISO speed.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink> and ISO 5800:1987.
         */
        get iso(): number;
        /**
         * The location as a latitude coordinate associated with this file. Valid latitudes range from <code class="literal">-90.0</code>
         * to <code class="literal">90.0</code> inclusive.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/docs/2.0/reference.html#georss_where">
         * GeoRSS specification</ulink>.
         */
        get latitude(): number;
        set latitude(val: number);
        /**
         * The location as a longitude coordinate associated with this file. Valid longitudes range from <code class="literal">-180.0</code>
         * to <code class="literal">180.0</code> inclusive.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/docs/2.0/reference.html#georss_where">
         * GeoRSS specification</ulink>.
         */
        get longitude(): number;
        set longitude(val: number);
        /**
         * The name of the manufacturer of the camera.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get make(): string;
        /**
         * The model of the camera.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#exif_reference">
         * EXIF element reference</ulink>.
         */
        get model(): string;
        /**
         * The rotation of the photo, in degrees. This will only be non-zero for files which are pending rotation, and haven't yet been
         * permanently modified. For files which have already been rotated, this will be <code class="literal">0</code>.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_rotation">
         * gphoto specification</ulink>.
         */
        get rotation(): number;
        set rotation(val: number);
        /**
         * The size of the file, in bytes.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_size">
         * gphoto specification</ulink>.
         */
        get size(): number;
        /**
         * A %NULL-terminated array of tags associated with the file.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#media_keywords">
         * Media RSS specification</ulink>.
         */
        get tags(): string[];
        set tags(val: string[]);
        /**
         * The time the file was purportedly taken. This a UNIX timestamp in milliseconds (not seconds) since the epoch.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_timestamp">
         * gphoto specification</ulink>.
         */
        get timestamp(): number;
        set timestamp(val: number);
        /**
         * The version number of the file. Version numbers are based on modification time, so they don't increment linearly.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_version">
         * gphoto specification</ulink>.
         */
        get version(): string;
        /**
         * The status of the file, if it is a video. For example: %GDATA_PICASAWEB_VIDEO_STATUS_PENDING or %GDATA_PICASAWEB_VIDEO_STATUS_FAILED.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_videostatus">
         * gphoto specification</ulink>.
         */
        get video_status(): string;
        /**
         * The status of the file, if it is a video. For example: %GDATA_PICASAWEB_VIDEO_STATUS_PENDING or %GDATA_PICASAWEB_VIDEO_STATUS_FAILED.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_videostatus">
         * gphoto specification</ulink>.
         */
        get videoStatus(): string;
        /**
         * The width of the photo or video, in pixels.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#gphoto_width">
         * gphoto specification</ulink>.
         */
        get width(): number;

        // Constructors

        constructor(properties?: Partial<PicasaWebFile.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): PicasaWebFile;

        // Methods

        /**
         * Gets the #GDataPicasaWebFile:album-id property. This is in the same form as returned by gdata_picasaweb_album_get_id().
         * @returns the ID of the album containing the #GDataPicasaWebFile
         */
        get_album_id(): string;
        /**
         * Gets the #GDataPicasaWebFile:caption property.
         * @returns the file's descriptive caption, or %NULL
         */
        get_caption(): string;
        /**
         * Gets the #GDataPicasaWebFile:checksum property.
         * @returns the checksum assigned to this file, or %NULL
         */
        get_checksum(): string;
        /**
         * Gets the #GDataPicasaWebFile:comment-count property.
         * @returns the number of comments on the file
         */
        get_comment_count(): number;
        /**
         * Returns a list of media content, e.g. the actual photo or video.
         * @returns a #GList of #GDataMediaContent items
         */
        get_contents(): MediaContent[];
        /**
         * Gets the #GDataPicasaWebFile:latitude and #GDataPicasaWebFile:longitude properties, setting the out parameters to them.
         * If either latitude or longitude is %NULL, that parameter will not be set. If the coordinates are unset,
         * `latitude` and `longitude` will be set to %G_MAXDOUBLE.
         */
        get_coordinates(): [number, number];
        /**
         * Gets the #GDataPicasaWebFile:credit property.
         * @returns the nickname of the user credited with this file
         */
        get_credit(): string;
        /**
         * Gets the #GDataPicasaWebFile:distance property.
         * @returns the distance recorded in the photo's EXIF, or <code class="literal">-1</code> if unknown
         */
        get_distance(): number;
        /**
         * Gets the #GDataPicasaWebFile:edited property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the file was last edited, or <code class="literal">-1</code>
         */
        get_edited(): number;
        /**
         * Gets the #GDataPicasaWebFile:exposure property.
         * @returns the exposure value, or <code class="literal">0</code> if unknown
         */
        get_exposure(): number;
        /**
         * Gets the #GDataPicasaWebFile:flash property.
         * @returns %TRUE if flash was used, %FALSE otherwise
         */
        get_flash(): boolean;
        /**
         * Gets the #GDataPicasaWebFile:focal-length property.
         * @returns the focal-length value, or <code class="literal">-1</code> if unknown
         */
        get_focal_length(): number;
        /**
         * Gets the #GDataPicasaWebFile:fstop property.
         * @returns the F-stop value, or <code class="literal">0</code> if unknown
         */
        get_fstop(): number;
        /**
         * Gets the #GDataPicasaWebFile:height property.
         * @returns the height of the image or video, in pixels
         */
        get_height(): number;
        /**
         * Gets the #GDataPicasaWebFile:file-id property.
         * @returns the file's ID
         */
        get_id(): string;
        // Conflicted with GData.Entry.get_id
        get_id(...args: never[]): any;
        /**
         * Gets the #GDataPicasaWebFile:image-unique-id property.
         * @returns the photo's unique EXIF identifier, or %NULL
         */
        get_image_unique_id(): string;
        /**
         * Gets the #GDataPicasaWebFile:iso property.
         * @returns the ISO speed, or <code class="literal">-1</code> if unknown
         */
        get_iso(): number;
        /**
         * Gets the #GDataPicasaWebFile:make property.
         * @returns the name of the manufacturer of the camera, or %NULL if unknown
         */
        get_make(): string;
        /**
         * Gets the #GDataPicasaWebFile:model property.
         * @returns the model name of the camera, or %NULL if unknown
         */
        get_model(): string;
        /**
         * Gets the #GDataPicasaWebFile:rotation property.
         * @returns the image's rotation, in degrees
         */
        get_rotation(): number;
        /**
         * Gets the #GDataPicasaWebFile:size property.
         * @returns the size of the file, in bytes
         */
        get_size(): number;
        /**
         * Gets the #GDataPicasaWebFile:tags property.
         * @returns a %NULL-terminated array of tags associated with the file, or %NULL
         */
        get_tags(): string[];
        /**
         * Returns a list of thumbnails, often at different sizes, for this
         * file.  Currently, PicasaWeb usually returns three thumbnails, with
         * widths in pixels of 72, 144, and 288.  However, the thumbnail will
         * not be larger than the actual image, so thumbnails may be smaller
         * than the widths listed above.
         * @returns a #GList of #GDataMediaThumbnails, or %NULL
         */
        get_thumbnails(): MediaThumbnail[];
        /**
         * Gets the #GDataPicasaWebFile:timestamp property. It's a UNIX timestamp in milliseconds (not seconds) since the epoch. If the property is unset,
         * <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the timestamp property in milliseconds, or <code class="literal">-1</code>
         */
        get_timestamp(): number;
        /**
         * Gets the #GDataPicasaWebFile:version property.
         * @returns the file's version number, or %NULL
         */
        get_version(): string;
        /**
         * Gets the #GDataPicasaWebFile:video-status property.
         * @returns the status of this video ("pending", "ready", "final" or "failed"), or %NULL
         */
        get_video_status(): string;
        /**
         * Gets the #GDataPicasaWebFile:width property.
         * @returns the width of the image or video, in pixels
         */
        get_width(): number;
        /**
         * Sets the #GDataPicasaWebFile:album-id property, effectively moving the file to the album.
         * @param album_id the ID of the new album for this file
         */
        set_album_id(album_id: string): void;
        /**
         * Sets the #GDataPicasaWebFile:caption property to `caption`.
         *
         * Set `caption` to %NULL to unset the file's caption.
         * @param caption the file's new caption, or %NULL
         */
        set_caption(caption?: string | null): void;
        /**
         * Sets the #GDataPicasaWebFile:checksum property to `checksum`.
         *
         * Set `checksum` to %NULL to unset the property.
         * @param checksum the new checksum for this file, or %NULL
         */
        set_checksum(checksum?: string | null): void;
        /**
         * Sets the #GDataPicasaWebFile:latitude and #GDataPicasaWebFile:longitude properties to
         * `latitude` and `longitude` respectively.
         * @param latitude the file's new latitude coordinate, or %G_MAXDOUBLE
         * @param longitude the file's new longitude coordinate, or %G_MAXDOUBLE
         */
        set_coordinates(latitude: number, longitude: number): void;
        /**
         * Sets the #GDataPicasaWebFile:is-commenting-enabled property to `is_commenting_enabled`.
         * @param is_commenting_enabled %TRUE if commenting should be enabled for the file, %FALSE otherwise
         */
        set_is_commenting_enabled(is_commenting_enabled: boolean): void;
        /**
         * Sets the #GDataPicasaWebFile:rotation property to `rotation`.
         *
         * The rotation is absolute, rather than cumulative, through successive calls to gdata_picasaweb_file_set_rotation(),
         * so calling it with 90° then 20° will result in a final rotation of 20°.
         * @param rotation the new rotation for the image, in degrees
         */
        set_rotation(rotation: number): void;
        /**
         * Sets the #GDataPicasaWebFile:tags property to `tags`.
         *
         * Set `tags` to %NULL to unset the property.
         * @param tags a new %NULL-terminated array of tags, or %NULL
         */
        set_tags(tags?: string[] | null): void;
        /**
         * Sets the #GDataPicasaWebFile:timestamp property from `timestamp`. This should be a UNIX timestamp in milliseconds (not seconds) since the epoch. If
         * `timestamp` is <code class="literal">-1</code>, the property will be unset.
         * @param timestamp a UNIX timestamp, or <code class="literal">-1</code>
         */
        set_timestamp(timestamp: number): void;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Deletes `comment` from the #GDataCommentable.
         *
         * If the given `comment` isn't deletable (either because the service doesn't support deleting comments at all, or because this particular comment
         * is not deletable due to having insufficient permissions), %GDATA_SERVICE_ERROR_FORBIDDEN will be set in `error` and %FALSE will be returned.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous comment deletion operation started with gdata_commentable_delete_comment_async().
         * @param result a #GAsyncResult
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment_finish(result: Gio.AsyncResult): boolean;
        /**
         * Adds `comment` to the #GDataCommentable.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): Comment | null;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Comment | null>;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Comment | null> | void;
        /**
         * Finishes an asynchronous comment insertion operation started with gdata_commentable_insert_comment_async().
         * @param result a #GAsyncResult
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment_finish(result: Gio.AsyncResult): Comment | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN. This is in
         * contrast to if it does support commenting but hasn't had any comments added yet, in which case an empty #GDataFeed will be returned and no error
         * will be set.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed | null>;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query: Query | null,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed | null> | void;
        /**
         * Finishes an asynchronous comment query operation started with gdata_commentable_query_comments_async().
         * @param result a #GAsyncResult
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments_finish(result: Gio.AsyncResult): Feed | null;
        vfunc_get_insert_comment_uri(comment: Comment): string;
        vfunc_get_query_comments_uri(): string;
        vfunc_is_comment_deletable(comment: Comment): boolean;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    module PicasaWebQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {
            image_size: string;
            imageSize: string;
            location: string;
            tag: string;
            thumbnail_size: string;
            thumbnailSize: string;
            visibility: number;
        }
    }

    /**
     * All the fields in the #GDataPicasaWebQuery structure are private and should never be accessed directly.
     */
    class PicasaWebQuery extends Query {
        static $gtype: GObject.GType<PicasaWebQuery>;

        // Properties

        /**
         * A comma-separated list of image sizes (width in pixels) to return. Only certain sizes are allowed, and whether the image should be
         * cropped or scaled can be specified; for more information, see the
         * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Parameters">online documentation</ulink>.
         */
        get image_size(): string;
        set image_size(val: string);
        /**
         * A comma-separated list of image sizes (width in pixels) to return. Only certain sizes are allowed, and whether the image should be
         * cropped or scaled can be specified; for more information, see the
         * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Parameters">online documentation</ulink>.
         */
        get imageSize(): string;
        set imageSize(val: string);
        /**
         * A location to search for photos, e.g. "London".
         */
        get location(): string;
        set location(val: string);
        /**
         * A tag which returned results must contain.
         */
        get tag(): string;
        set tag(val: string);
        /**
         * A comma-separated list of thumbnail widths (in pixels) to return. Only certain sizes are allowed, and whether the thumbnail should be
         * cropped or scaled can be specified; for more information, see the
         * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Parameters">online documentation</ulink>.
         */
        get thumbnail_size(): string;
        set thumbnail_size(val: string);
        /**
         * A comma-separated list of thumbnail widths (in pixels) to return. Only certain sizes are allowed, and whether the thumbnail should be
         * cropped or scaled can be specified; for more information, see the
         * <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Parameters">online documentation</ulink>.
         */
        get thumbnailSize(): string;
        set thumbnailSize(val: string);
        /**
         * Specifies which albums should be listed, in terms of their visibility (#GDataPicasaWebAlbum:visibility).
         *
         * Set the property to <code class="literal">0</code> to list all albums, regardless of their visibility. Otherwise, use values
         * from #GDataPicasaWebVisibility.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/picasaweb/reference.html#Visibility">
         * online documentation</ulink>.
         */
        get visibility(): number;
        set visibility(val: number);

        // Constructors

        constructor(properties?: Partial<PicasaWebQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): PicasaWebQuery;

        static new_with_limits(q: string | null, start_index: number, max_results: number): PicasaWebQuery;

        // Methods

        /**
         * Gets the latitudes and longitudes of a bounding box, inside which all the results must lie.
         */
        get_bounding_box(): [number, number, number, number];
        /**
         * Gets the #GDataPicasaWebQuery:image-size property.
         * @returns the currently set desired image size for retrieval, or %NULL
         */
        get_image_size(): string;
        /**
         * Gets the #GDataPicasaWebQuery:location property.
         * @returns a location which returned objects must be near, or %NULL
         */
        get_location(): string;
        /**
         * Gets the #GDataPicasaWebQuery:tag property.
         * @returns a tag which retrieved objects must have, or %NULL
         */
        get_tag(): string;
        /**
         * Gets the #GDataPicasaWebQuery:thumbnail-size property.
         * @returns a comma-separated list of thumbnail sizes to retrieve, or %NULL
         */
        get_thumbnail_size(): string;
        /**
         * Gets the #GDataPicasaWebQuery:visibility property.
         * @returns the visibility of the objects to retrieve, or <code class="literal">0</code> to retrieve all objects
         */
        get_visibility(): PicasaWebVisibility;
        /**
         * Sets a bounding box, inside which all the returned results must lie.
         *
         * Set `north,` `east,` `south` and `west` to <code class="literal">0</code> to unset the property.
         * @param north latitude of the top of the box
         * @param east longitude of the right of the box
         * @param south latitude of the bottom of the box
         * @param west longitude of the left of the box
         */
        set_bounding_box(north: number, east: number, south: number, west: number): void;
        /**
         * Sets the #GDataPicasaWebQuery:image-size property to `image_size`.
         * Valid sizes are described in the
         * <ulink type="http" url="http://code.google.com/apis/picasaweb/docs/2.0/reference.html#Parameters">online documentation</ulink>.
         *
         * Set `image_size` to %NULL to unset the property.
         * @param image_size the desired size of the image to be retrieved, or %NULL
         */
        set_image_size(image_size?: string | null): void;
        /**
         * Sets the #GDataPicasaWebQuery:location property to `location`.
         *
         * Set `location` to %NULL to unset the property.
         * @param location a location which returned objects must be near, or %NULL
         */
        set_location(location?: string | null): void;
        /**
         * Sets the #GDataPicasaWebQuery:tag property to `tag`.
         *
         * Set `tag` to %NULL to unset the property.
         * @param tag a tag which retrieved objects must have, or %NULL
         */
        set_tag(tag?: string | null): void;
        /**
         * Sets the #GDataPicasaWebQuery:thumbnail-size property to `thumbnail_size`.
         *
         * Set `thumbnail_size` to %NULL to unset the property.
         * @param thumbnail_size a comma-separated list of thumbnail sizes to retrieve, or %NULL
         */
        set_thumbnail_size(thumbnail_size?: string | null): void;
        /**
         * Sets the #GDataPicasaWebQuery:visibility property to `visibility`.
         * @param visibility the visibility of the objects to retrieve, or <code class="literal">0</code> to retrieve all objects
         */
        set_visibility(visibility: PicasaWebVisibility): void;
    }

    module PicasaWebService {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataPicasaWebService structure are private and should never be accessed directly.
     */
    class PicasaWebService extends Service {
        static $gtype: GObject.GType<PicasaWebService>;

        // Constructors

        constructor(properties?: Partial<PicasaWebService.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](authorizer?: Authorizer | null): PicasaWebService;

        // Static methods

        /**
         * The primary #GDataAuthorizationDomain for interacting with PicasaWeb. This will not normally need to be used, as it's used internally
         * by the #GDataPicasaWebService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_primary_authorization_domain(): AuthorizationDomain;

        // Methods

        /**
         * Finish off a file upload operation started by gdata_picasaweb_service_upload_file(), parsing the result and returning the new #GDataPicasaWebFile.
         *
         * If an error occurred during the upload operation, it will have been returned during the operation (e.g. by g_output_stream_splice() or one
         * of the other stream methods). In such a case, %NULL will be returned but `error` will remain unset. `error` is only set in the case that the server
         * indicates that the operation was successful, but an error is encountered in parsing the result sent by the server.
         * @param upload_stream the #GDataUploadStream from the operation
         * @returns the new #GDataPicasaWebFile, or %NULL; unref with g_object_unref()
         */
        finish_file_upload(upload_stream: UploadStream): PicasaWebFile;
        /**
         * Queries the service to return the user specified by `username`.
         * @param username the username of the user whose information you wish to retrieve, or %NULL for the currently authenticated user.
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns a #GDataPicasaWebUser; unref with g_object_unref()
         */
        get_user(username?: string | null, cancellable?: Gio.Cancellable | null): PicasaWebUser;
        /**
         * Queries the service to return the user specified by `username`.
         *
         * For more details, see gdata_picasaweb_service_get_user() which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_picasaweb_service_get_user_finish() to get the results of the
         * operation.
         * @param username the username of the user whose information you wish to retrieve, or %NULL for the currently authenticated user
         * @param cancellable optional #GCancellable object, or %NULL
         */
        get_user_async(username?: string | null, cancellable?: Gio.Cancellable | null): Promise<PicasaWebUser>;
        /**
         * Queries the service to return the user specified by `username`.
         *
         * For more details, see gdata_picasaweb_service_get_user() which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_picasaweb_service_get_user_finish() to get the results of the
         * operation.
         * @param username the username of the user whose information you wish to retrieve, or %NULL for the currently authenticated user
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_user_async(
            username: string | null,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return the user specified by `username`.
         *
         * For more details, see gdata_picasaweb_service_get_user() which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_picasaweb_service_get_user_finish() to get the results of the
         * operation.
         * @param username the username of the user whose information you wish to retrieve, or %NULL for the currently authenticated user
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_user_async(
            username?: string | null,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<PicasaWebUser> | void;
        /**
         * Finishes an asynchronous user retrieval operation started with gdata_picasaweb_service_get_user_async().
         * @param result a #GAsyncResult
         * @returns a #GDataPicasaWebUser; unref with g_object_unref()
         */
        get_user_finish(result: Gio.AsyncResult): PicasaWebUser;
        /**
         * Inserts a new album described by `album`. A user must be
         * authenticated to use this function.
         * @param album a #GDataPicasaWebAlbum to create on the server
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the inserted #GDataPicasaWebAlbum; unref with g_object_unref()
         */
        insert_album(album: PicasaWebAlbum, cancellable?: Gio.Cancellable | null): PicasaWebAlbum;
        /**
         * Inserts a new album described by `album`. The user must be authenticated to use this function. `self` and `album` are both reffed when this function
         * is called, so can safely be unreffed after this function returns.
         *
         * `callback` should call gdata_service_insert_entry_finish() to obtain a #GDataPicasaWebAlbum representing the inserted album and to check for
         * possible errors.
         *
         * For more details, see gdata_picasaweb_service_insert_album(), which is the synchronous version of this function, and
         * gdata_service_insert_entry_async(), which is the base asynchronous insertion function.
         * @param album a #GDataPicasaWebAlbum to create on the server
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        insert_album_async(
            album: PicasaWebAlbum,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of all albums belonging to the specified `username` which match the given
         * `query`. If a user is authenticated with the service, `username` can be set as %NULL to return a list of albums belonging
         * to the currently-authenticated user.
         *
         * Note that the #GDataQuery:q query parameter cannot be set on `query` for album queries.
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param username the username of the user whose albums you wish to retrieve, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_all_albums(
            query?: Query | null,
            username?: string | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of all albums belonging to the specified `username` which match the given
         * `query`. `self,` `query` and `username` are all reffed/copied when this function is called, so can safely be unreffed/freed after
         * this function returns.
         *
         * For more details, see gdata_picasaweb_service_query_all_albums(), which is the synchronous version of
         * this function, and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param username the username of the user whose albums you wish to retrieve, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_all_albums_async(
            query?: Query | null,
            username?: string | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the specified `album` for a list of the files which match the given `query`. If `album` is %NULL and a user is
         * authenticated with the service, the user's default album will be queried.
         *
         * For more details, see gdata_service_query().
         * @param album a #GDataPicasaWebAlbum from which to retrieve the files, or %NULL
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_files(
            album?: PicasaWebAlbum | null,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the specified `album` for a list of the files which match the given `query`. If `album` is %NULL and a user is authenticated with the service,
         * the user's default album will be queried. `self,` `album` and `query` are all reffed when this function is called, so can safely be unreffed after
         * this function returns.
         *
         * For more details, see gdata_picasaweb_service_query_files(), which is the synchronous version of this function, and gdata_service_query_async(),
         * which is the base asynchronous query function.
         * @param album a #GDataPicasaWebAlbum from which to retrieve the files, or %NULL
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_files_async(
            album?: PicasaWebAlbum | null,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Uploads a file (photo or video) to the given PicasaWeb `album,` using the metadata from `file` and the file data written to the resulting
         * #GDataUploadStream. If `album` is %NULL, the file will be uploaded to the currently-authenticated user's "Drop Box" album. A user must be
         * authenticated to use this function.
         *
         * If `file` has already been inserted, a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned.
         *
         * If no user is authenticated with the service, %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED will be returned. It is recommended to retry the
         * upload after refreshing the authorization tokens held by the associated #GDataAuthorizer using gdata_authorizer_refresh_authorization().
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_picasaweb_service_finish_file_upload() should be called on it to parse and return the updated
         * #GDataPicasaWebFile for the uploaded file. This must be done, as `file_entry` isn't updated in-place.
         *
         * In order to cancel the upload, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire upload; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         * @param album a #GDataPicasaWebAlbum into which to insert the file, or %NULL
         * @param file_entry a #GDataPicasaWebFile to insert
         * @param slug the filename to give to the uploaded file
         * @param content_type the content type of the uploaded data
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the file data to, or %NULL; unref with g_object_unref()
         */
        upload_file(
            album: PicasaWebAlbum | null,
            file_entry: PicasaWebFile,
            slug: string,
            content_type: string,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;
    }

    module PicasaWebUser {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            max_photos_per_album: number;
            maxPhotosPerAlbum: number;
            nickname: string;
            quota_current: number;
            quotaCurrent: number;
            quota_limit: number;
            quotaLimit: number;
            thumbnail_uri: string;
            thumbnailUri: string;
            user: string;
        }
    }

    /**
     * All the fields in the #GDataPicasaWebUser structure are private and should never be accessed directly.
     */
    class PicasaWebUser extends Entry {
        static $gtype: GObject.GType<PicasaWebUser>;

        // Properties

        /**
         * The maximum number of photos allowed in an album.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_maxPhotosPerAlbum
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get max_photos_per_album(): number;
        /**
         * The maximum number of photos allowed in an album.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_maxPhotosPerAlbum
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get maxPhotosPerAlbum(): number;
        /**
         * The user's nickname. This is a user-specified value that should be used when referring to the user by name.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_nickname
         */
        get nickname(): string;
        /**
         * The current amount of space, in bytes, already used by the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_quotacurrent
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get quota_current(): number;
        /**
         * The current amount of space, in bytes, already used by the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_quotacurrent
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get quotaCurrent(): number;
        /**
         * The total amount of space, in bytes, available to the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_quotalimit
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get quota_limit(): number;
        /**
         * The total amount of space, in bytes, available to the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_quotalimit
         *
         * If the #GDataPicasaWebUser does not represent the currently authenticated user, this will be <code class="literal">-1</code>.
         */
        get quotaLimit(): number;
        /**
         * The URI of a thumbnail-sized portrait of the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_thumbnail
         */
        get thumbnail_uri(): string;
        /**
         * The URI of a thumbnail-sized portrait of the user.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_thumbnail
         */
        get thumbnailUri(): string;
        /**
         * The username of the user, as seen in feed URLs.
         * http://code.google.com/apis/picasaweb/docs/2.0/reference.html#gphoto_user
         */
        get user(): string;

        // Constructors

        constructor(properties?: Partial<PicasaWebUser.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Gets the #GDataPicasaWebUser:max-photos-per-album property.  Note that
         * this information is not available when accessing feeds which we
         * haven't authenticated, and <code class="literal">0</code> is returned.
         * @returns the maximum number of photos an album for this account can hold, or <code class="literal">-1</code>
         */
        get_max_photos_per_album(): number;
        /**
         * Gets the #GDataPicasaWebUser:nickname property.
         * @returns the nickname of the feed's user's nickname, or %NULL
         */
        get_nickname(): string;
        /**
         * Gets the #GDataPicasaWebUser:quota-current property.  Note that
         * this information is not available when accessing feeds which we
         * haven't authenticated, and <code class="literal">0</code> is returned.
         * @returns the current number of bytes in use by this feed's account, or <code class="literal">-1</code>
         */
        get_quota_current(): number;
        /**
         * Gets the #GDataPicasaWebUser:quota-limit property. Note that
         * this information is not available when accessing feeds which we
         * haven't authenticated, and <code class="literal">0</code> is returned.
         * @returns the maximum capacity in bytes for this feed's account, or <code class="literal">-1</code>
         */
        get_quota_limit(): number;
        /**
         * Gets the #GDataPicasaWebUser:thumbnail-uri property.
         * @returns the URI for the thumbnail of the account, or %NULL
         */
        get_thumbnail_uri(): string;
        /**
         * Gets the #GDataPicasaWebUser:user property.
         * @returns the feed's user, or %NULL
         */
        get_user(): string;
    }

    module Query {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            author: string;
            categories: string;
            etag: string;
            is_strict: boolean;
            isStrict: boolean;
            max_results: number;
            maxResults: number;
            published_max: number;
            publishedMax: number;
            published_min: number;
            publishedMin: number;
            q: string;
            start_index: number;
            startIndex: number;
            updated_max: number;
            updatedMax: number;
            updated_min: number;
            updatedMin: number;
        }
    }

    /**
     * All the fields in the #GDataQuery structure are private and should never be accessed directly.
     */
    class Query extends GObject.Object {
        static $gtype: GObject.GType<Query>;

        // Properties

        /**
         * An entry author. The service returns entries where the author name and/or e-mail address match your query string.
         */
        get author(): string;
        set author(val: string);
        /**
         * A category filter.
         *
         * You can query on multiple categories by listing multiple categories separated by slashes. The service returns all entries that match all
         * of the categories (like using AND between terms). For example: <userinput>Fritz/Laurie</userinput> returns
         * entries that match both categories ("Fritz" and "Laurie").
         *
         * To do an OR between terms, use a pipe character (<literal>|</literal>). For example: <userinput>Fritz\%7CLaurie</userinput> returns
         * entries that match either category.
         *
         * An entry matches a specified category if the entry is in a category that has a matching term or label, as defined in the Atom
         * specification. (Roughly, the "term" is the internal string used by the software to identify the category, while the "label" is the
         * human-readable string presented to a user in a user interface.)
         *
         * To exclude entries that match a given category, use the form <userinput>-categoryname</userinput>.
         *
         * To query for a category that has a scheme – such as <literal>&lt;category scheme="urn:google.com" term="public"/&gt;</literal> – you must
         * place the scheme in curly braces before the category name. For example: <userinput>{urn:google.com}public</userinput>. To match a category
         * that has no scheme, use an empty pair of curly braces. If you don't specify curly braces, then categories in any scheme will match.
         *
         * The above features can be combined. For example: <userinput>A|-{urn:google.com}B/-C</userinput> means (A OR (NOT B)) AND (NOT C).
         */
        get categories(): string;
        set categories(val: string);
        /**
         * The ETag against which to check for updates. If the server-side ETag matches this one, the requested feed hasn't changed, and is not
         * returned unnecessarily.
         *
         * Setting any of the other query properties will unset the ETag, as ETags match against entire queries. If the ETag should be used in a
         * query, it must be set again using gdata_query_set_etag() after setting any other properties.
         */
        get etag(): string;
        set etag(val: string);
        /**
         * Strict query parameter checking. If this is enabled, an error will be returned by the online service if a parameter is
         * not recognised.
         */
        get is_strict(): boolean;
        set is_strict(val: boolean);
        /**
         * Strict query parameter checking. If this is enabled, an error will be returned by the online service if a parameter is
         * not recognised.
         */
        get isStrict(): boolean;
        set isStrict(val: boolean);
        /**
         * Maximum number of results to be retrieved. Most services have a default #GDataQuery:max-results size imposed by the server; if you wish
         * to receive the entire feed, specify a large number such as %G_MAXUINT for this property.
         *
         * Use <code class="literal">0</code> to not specify a maximum number of results.
         */
        get max_results(): number;
        set max_results(val: number);
        /**
         * Maximum number of results to be retrieved. Most services have a default #GDataQuery:max-results size imposed by the server; if you wish
         * to receive the entire feed, specify a large number such as %G_MAXUINT for this property.
         *
         * Use <code class="literal">0</code> to not specify a maximum number of results.
         */
        get maxResults(): number;
        set maxResults(val: number);
        /**
         * Upper bound on the entry publish date, exclusive.
         */
        get published_max(): number;
        set published_max(val: number);
        /**
         * Upper bound on the entry publish date, exclusive.
         */
        get publishedMax(): number;
        set publishedMax(val: number);
        /**
         * Lower bound on the entry publish date, inclusive.
         */
        get published_min(): number;
        set published_min(val: number);
        /**
         * Lower bound on the entry publish date, inclusive.
         */
        get publishedMin(): number;
        set publishedMin(val: number);
        /**
         * A full-text query string.
         *
         * When creating a query, list search terms separated by spaces, in the form <userinput>term1 term2 term3</userinput>.
         * (As with all of the query parameter values, the spaces must be URL encoded.) The service returns all entries that match all of the
         * search terms (like using AND between terms). Like Google's web search, a service searches on complete words (and related words with
         * the same stem), not substrings.
         *
         * To search for an exact phrase, enclose the phrase in quotation marks: <userinput>"exact phrase"</userinput>.
         *
         * To exclude entries that match a given term, use the form <userinput>-term</userinput>.
         *
         * The search is case-insensitive.
         *
         * Example: to search for all entries that contain the exact phrase "Elizabeth Bennet" and the word "Darcy" but don't contain the
         * word "Austen", use the following query: <userinput>"Elizabeth Bennet" Darcy -Austen</userinput>.
         */
        get q(): string;
        set q(val: string);
        /**
         * The one-based index of the first result to be retrieved. Use gdata_query_next_page() and gdata_query_previous_page() to
         * implement pagination, rather than manually changing #GDataQuery:start-index.
         *
         * Use <code class="literal">0</code> to not specify a start index.
         */
        get start_index(): number;
        set start_index(val: number);
        /**
         * The one-based index of the first result to be retrieved. Use gdata_query_next_page() and gdata_query_previous_page() to
         * implement pagination, rather than manually changing #GDataQuery:start-index.
         *
         * Use <code class="literal">0</code> to not specify a start index.
         */
        get startIndex(): number;
        set startIndex(val: number);
        /**
         * Upper bound on the entry update date, exclusive.
         */
        get updated_max(): number;
        set updated_max(val: number);
        /**
         * Upper bound on the entry update date, exclusive.
         */
        get updatedMax(): number;
        set updatedMax(val: number);
        /**
         * Lower bound on the entry update date, inclusive.
         */
        get updated_min(): number;
        set updated_min(val: number);
        /**
         * Lower bound on the entry update date, inclusive.
         */
        get updatedMin(): number;
        set updatedMin(val: number);

        // Constructors

        constructor(properties?: Partial<Query.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): Query;

        static new_with_limits(q: string | null, start_index: number, max_results: number): Query;

        // Virtual methods

        vfunc_get_query_uri(feed_uri: string, query_uri: GLib.String, params_started: boolean): void;

        // Methods

        /**
         * Gets the #GDataQuery:author property.
         * @returns the author property, or %NULL if it is unset
         */
        get_author(): string;
        /**
         * Gets the #GDataQuery:categories property.
         * @returns the categories property, or %NULL if it is unset
         */
        get_categories(): string;
        /**
         * Gets the #GDataQuery:etag property.
         * @returns the ETag property, or %NULL if it is unset
         */
        get_etag(): string;
        /**
         * Gets the #GDataQuery:max-results property.
         * @returns the maximum results property, or <code class="literal">0</code> if it is unset
         */
        get_max_results(): number;
        /**
         * Gets the #GDataQuery:published-max property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the published-max property, or <code class="literal">-1</code>
         */
        get_published_max(): number;
        /**
         * Gets the #GDataQuery:published-min property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the published-min property, or <code class="literal">-1</code>
         */
        get_published_min(): number;
        /**
         * Gets the #GDataQuery:q property.
         * @returns the q property, or %NULL if it is unset
         */
        get_q(): string;
        /**
         * Builds a query URI from the given base feed URI, using the properties of the #GDataQuery. This function will take care
         * of all necessary URI escaping, so it should <emphasis>not</emphasis> be done beforehand.
         *
         * The query URI is what functions like gdata_service_query() use to query the online service.
         * @param feed_uri the feed URI on which to build the query URI
         * @returns a query URI; free with g_free()
         */
        get_query_uri(feed_uri: string): string;
        /**
         * Gets the #GDataQuery:start-index property.
         * @returns the start index property, or <code class="literal">0</code> if it is unset
         */
        get_start_index(): number;
        /**
         * Gets the #GDataQuery:updated-max property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the updated-max property, or <code class="literal">-1</code>
         */
        get_updated_max(): number;
        /**
         * Gets the #GDataQuery:updated-min property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the updated-min property, or <code class="literal">-1</code>
         */
        get_updated_min(): number;
        /**
         * Changes the state of the #GDataQuery such that when gdata_query_get_query_uri() is next called, it will build the
         * query URI for the next page in the result set.
         *
         * Ideally, the URI of the next page is retrieved from a feed automatically when gdata_service_query() is called, but
         * gdata_query_next_page() will fall back to using #GDataQuery:start-index to emulate true pagination if this fails.
         *
         * You <emphasis>should not</emphasis> implement pagination manually using #GDataQuery:start-index.
         */
        next_page(): void;
        /**
         * Changes the state of the #GDataQuery such that when gdata_query_get_query_uri() is next called, it will build the
         * query URI for the previous page in the result set.
         *
         * See the documentation for gdata_query_next_page() for an explanation of how query URIs from the feeds are used to this end.
         * @returns %TRUE if there is a previous page and it has been switched to, %FALSE otherwise
         */
        previous_page(): boolean;
        /**
         * Sets the #GDataQuery:author property of the #GDataQuery to the new author string, `author`.
         *
         * Set `author` to %NULL to unset the property in the query URI.
         * @param author the new author string, or %NULL
         */
        set_author(author?: string | null): void;
        /**
         * Sets the #GDataQuery:categories property of the #GDataQuery to the new category string, `categories`.
         *
         * Set `categories` to %NULL to unset the property in the query URI.
         * @param categories the new category string, or %NULL
         */
        set_categories(categories?: string | null): void;
        /**
         * Sets the #GDataQuery:etag property of the #GDataQuery to the new ETag, `etag`.
         *
         * Set `etag` to %NULL to not check against the server-side ETag.
         * @param etag the new ETag, or %NULL
         */
        set_etag(etag?: string | null): void;
        /**
         * Sets the #GDataQuery:is-strict property of the #GDataQuery to the new strict value, `is_strict`.
         * @param is_strict the new strict value
         */
        set_is_strict(is_strict: boolean): void;
        /**
         * Sets the #GDataQuery:max-results property of the #GDataQuery to the new maximum results value, `max_results`.
         *
         * Set `max_results` to <code class="literal">0</code> to unset the property in the query URI.
         * @param max_results the new maximum results value, or <code class="literal">0</code>
         */
        set_max_results(max_results: number): void;
        /**
         * Sets the #GDataQuery:published-max property of the #GDataQuery to the new maximum publish time, `published_max`.
         *
         * Set `published_max` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param published_max the new maximum publish time, or <code class="literal">-1</code>
         */
        set_published_max(published_max: number): void;
        /**
         * Sets the #GDataQuery:published-min property of the #GDataQuery to the new minimum publish time, `published_min`.
         *
         * Set `published_min` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param published_min the new minimum publish time, or <code class="literal">-1</code>
         */
        set_published_min(published_min: number): void;
        /**
         * Sets the #GDataQuery:q property of the #GDataQuery to the new query string, `q`.
         *
         * Set `q` to %NULL to unset the property in the query URI.
         * @param q a new query string, or %NULL
         */
        set_q(q?: string | null): void;
        /**
         * Sets the #GDataQuery:start-index property of the #GDataQuery to the new one-based start index, `start_index`.
         *
         * Set `start_index` to <code class="literal">0</code> to unset the property in the query URI.
         * @param start_index the new start index, or <code class="literal">0</code>
         */
        set_start_index(start_index: number): void;
        /**
         * Sets the #GDataQuery:updated-max property of the #GDataQuery to the new maximum update time, `updated_max`.
         *
         * Set `updated_max` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param updated_max the new maximum update time, or <code class="literal">-1</code>
         */
        set_updated_max(updated_max: number): void;
        /**
         * Sets the #GDataQuery:updated-min property of the #GDataQuery to the new minimum update time, `updated_min`.
         *
         * Set `updated_min` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param updated_min the new minimum update time, or <code class="literal">-1</code>
         */
        set_updated_min(updated_min: number): void;
    }

    module Service {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {
            authorizer: Authorizer;
            locale: string;
            proxy_resolver: Gio.ProxyResolver;
            proxyResolver: Gio.ProxyResolver;
            timeout: number;
        }
    }

    /**
     * All the fields in the #GDataService structure are private and should never be accessed directly.
     */
    class Service extends GObject.Object {
        static $gtype: GObject.GType<Service>;

        // Properties

        /**
         * An object which implements #GDataAuthorizer. This should have previously been authenticated authorized against this service type (and
         * potentially other service types). The service will use the authorizer to add an authorization token to each request it performs.
         *
         * Your application should call methods on the #GDataAuthorizer object itself in order to authenticate with the Google accounts service and
         * authorize against this service type. See the documentation for the particular #GDataAuthorizer implementation being used for more details.
         *
         * The authorizer for a service can be changed at runtime for a different #GDataAuthorizer object or %NULL without affecting ongoing requests
         * and operations.
         *
         * Note that it's only necessary to set an authorizer on the service if your application is going to make requests of the service which
         * require authorization. For example, listing the current most popular videos on YouTube does not require authorization, but uploading a
         * video to YouTube does. It's an unnecessary overhead to require the user to authorize against a service when not strictly required.
         */
        get authorizer(): Authorizer;
        set authorizer(val: Authorizer);
        /**
         * The locale to use for network requests, in Unix locale format. (e.g. "en_GB", "cs", "de_DE".) Use %NULL for the default "C" locale
         * (typically "en_US").
         *
         * Typically, this locale will be used by the server-side software to localise results, such as by translating category names, or by choosing
         * geographically relevant search results. This will vary from service to service.
         *
         * The server-side behaviour is undefined if it doesn't support a given locale.
         */
        get locale(): string;
        set locale(val: string);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxy_resolver(): Gio.ProxyResolver;
        set proxy_resolver(val: Gio.ProxyResolver);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxyResolver(): Gio.ProxyResolver;
        set proxyResolver(val: Gio.ProxyResolver);
        /**
         * A timeout, in seconds, for network operations. If the timeout is exceeded, the operation will be cancelled and
         * %GDATA_SERVICE_ERROR_NETWORK_ERROR will be returned.
         *
         * If the timeout is <code class="literal">0</code>, operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         */
        get timeout(): number;
        set timeout(val: number);

        // Constructors

        constructor(properties?: Partial<Service.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Static methods

        /**
         * Retrieves the full list of #GDataAuthorizationDomains which relate to the specified `service_type`. All the
         * #GDataAuthorizationDomains are unique and interned, so can be compared with other domains by simple pointer comparison.
         *
         * Note that in addition to this method, #GDataService subclasses may expose some or all of their authorization domains individually by means of
         * individual accessor functions.
         * @param service_type the #GType of the #GDataService subclass to retrieve the authorization domains for
         */
        static get_authorization_domains(service_type: GObject.GType): AuthorizationDomain[];

        // Virtual methods

        vfunc_append_query_headers(domain: AuthorizationDomain, message: Soup.Message): void;
        vfunc_parse_error_response(
            operation_type: OperationType,
            status: number,
            reason_phrase: string,
            response_body: string,
            length: number,
        ): void;

        // Methods

        /**
         * Deletes `entry` from the server. For more information about the concept of deleting entries, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#DeletingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the deletion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error deleting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous entry deletion operation started with gdata_service_delete_entry_async().
         * @param async_result a #GAsyncResult
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Gets the #GDataAuthorizer object currently in use by the service. See the documentation for #GDataService:authorizer for more details.
         * @returns the authorizer object for this service, or %NULL
         */
        get_authorizer(): Authorizer;
        /**
         * Returns the locale currently being used for network requests, or %NULL if the locale is the default.
         * @returns the current locale
         */
        get_locale(): string;
        /**
         * Gets the #GProxyResolver on the #GDataService's #SoupSession.
         * @returns a #GProxyResolver, or %NULL
         */
        get_proxy_resolver(): Gio.ProxyResolver | null;
        /**
         * Gets the #GDataService:timeout property; the network timeout, in seconds.
         * @returns the timeout, or <code class="literal">0</code>
         */
        get_timeout(): number;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. For more information about the concept of inserting entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#InsertingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the insertion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If the entry is marked as already having been inserted a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned immediately
         * (there will be no network requests).
         *
         * If there is an error inserting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry insertion operation started with gdata_service_insert_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Determines whether the service is authorized for all the #GDataAuthorizationDomains it belongs to (as returned by
         * gdata_service_get_authorization_domains()). If the service's #GDataService:authorizer is %NULL, %FALSE is always returned.
         *
         * This is basically a convenience method for checking that the service's #GDataAuthorizer is authorized for all the service's
         * #GDataAuthorizationDomains.
         * @returns %TRUE if the service is authorized for all its domains, %FALSE otherwise
         */
        is_authorized(): boolean;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the query will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query, but subclasses may override
         * this and return their own errors. See their documentation for more details.
         *
         * For each entry in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         *
         * If the query is successful and the feed supports pagination, `query` will be updated with the pagination URIs, and the next or previous page
         * can then be loaded by calling gdata_query_next_page() or gdata_query_previous_page() before running the query again.
         *
         * If the #GDataQuery's ETag is set and it finds a match on the server, %NULL will be returned, but `error` will remain unset. Otherwise,
         * `query'`s ETag will be updated with the ETag from the returned feed, if available.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed>;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed> | void;
        /**
         * Finishes an asynchronous query operation started with gdata_service_query_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_finish(async_result: Gio.AsyncResult): Feed;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id().
         *
         * Parameters and errors are as for gdata_service_query(). Most of the properties of `query` aren't relevant, and
         * will cause a server-side error if used. The most useful property to use is #GDataQuery:etag, which will cause the
         * server to not return anything if the entry hasn't been modified since it was given the specified ETag; thus saving
         * bandwidth. If the server does not return anything for this reason, gdata_service_query_single_entry() will return
         * %NULL, but will not set an error in `error`.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable a #GCancellable, or %NULL
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous query operation for a single entry, as started with gdata_service_query_single_entry_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Sets #GDataService:authorizer to `authorizer`. This may be %NULL if the service will only make requests in future which don't require authorization.
         * See the documentation for #GDataService:authorizer for more information.
         * @param authorizer a new authorizer object for the service, or %NULL
         */
        set_authorizer(authorizer: Authorizer): void;
        /**
         * Set the locale used for network requests to `locale,` given in standard Unix locale format. See #GDataService:locale for more details.
         *
         * Note that while it's possible to change the locale after sending network requests, it is unsupported, as the server-side software may behave
         * unexpectedly. The only supported use of this function is after creation of a service, but before any network requests are made.
         * @param locale the new locale in Unix locale format, or %NULL for the default locale
         */
        set_locale(locale?: string | null): void;
        /**
         * Sets the #GProxyResolver on the #SoupSession used internally by the given #GDataService.
         * @param proxy_resolver a #GProxyResolver, or %NULL
         */
        set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void;
        /**
         * Sets the #GDataService:timeout property; the network timeout, in seconds.
         *
         * If `timeout` is <code class="literal">0</code>, network operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         * @param timeout the timeout, or <code class="literal">0</code>
         */
        set_timeout(timeout: number): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. For more information about the concept of updating entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#UpdatingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the update will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error updating the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): Entry;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry update operation started with gdata_service_update_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry_finish(async_result: Gio.AsyncResult): Entry;
    }

    module TasksQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {
            completed_max: number;
            completedMax: number;
            completed_min: number;
            completedMin: number;
            due_max: number;
            dueMax: number;
            due_min: number;
            dueMin: number;
            show_completed: boolean;
            showCompleted: boolean;
            show_deleted: boolean;
            showDeleted: boolean;
            show_hidden: boolean;
            showHidden: boolean;
        }
    }

    /**
     * All the fields in the #GDataTasksQuery structure are private and should never be accessed directly.
     */
    class TasksQuery extends Query {
        static $gtype: GObject.GType<TasksQuery>;

        // Properties

        /**
         * Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get completed_max(): number;
        set completed_max(val: number);
        /**
         * Upper bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get completedMax(): number;
        set completedMax(val: number);
        /**
         * Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get completed_min(): number;
        set completed_min(val: number);
        /**
         * Lower bound for a task's completion date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get completedMin(): number;
        set completedMin(val: number);
        /**
         * Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get due_max(): number;
        set due_max(val: number);
        /**
         * Upper bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get dueMax(): number;
        set dueMax(val: number);
        /**
         * Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get due_min(): number;
        set due_min(val: number);
        /**
         * Lower bound for a task's due date (as a RFC 3339 timestamp) to filter by. Optional.
         * The default is not to filter by completion date.
         */
        get dueMin(): number;
        set dueMin(val: number);
        /**
         * Flag indicating whether completed tasks are returned in the result. Optional. The default is %FALSE.
         */
        get show_completed(): boolean;
        set show_completed(val: boolean);
        /**
         * Flag indicating whether completed tasks are returned in the result. Optional. The default is %FALSE.
         */
        get showCompleted(): boolean;
        set showCompleted(val: boolean);
        /**
         * Flag indicating whether deleted tasks are returned in the result. Optional. The default is %FALSE.
         */
        get show_deleted(): boolean;
        set show_deleted(val: boolean);
        /**
         * Flag indicating whether deleted tasks are returned in the result. Optional. The default is %FALSE.
         */
        get showDeleted(): boolean;
        set showDeleted(val: boolean);
        /**
         * Flag indicating whether hidden tasks are returned in the result. Optional. The default is %FALSE.
         */
        get show_hidden(): boolean;
        set show_hidden(val: boolean);
        /**
         * Flag indicating whether hidden tasks are returned in the result. Optional. The default is %FALSE.
         */
        get showHidden(): boolean;
        set showHidden(val: boolean);

        // Constructors

        constructor(properties?: Partial<TasksQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): TasksQuery;

        // Methods

        /**
         * Gets the #GDataTasksQuery:completed-max property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the completed-max property, or <code class="literal">-1</code>
         */
        get_completed_max(): number;
        /**
         * Gets the #GDataTasksQuery:completed-min property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the completed-min property, or <code class="literal">-1</code>
         */
        get_completed_min(): number;
        /**
         * Gets the #GDataTasksQuery:due-max property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the due-max property, or <code class="literal">-1</code>
         */
        get_due_max(): number;
        /**
         * Gets the #GDataTasksQuery:due-min property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the due-min property, or <code class="literal">-1</code>
         */
        get_due_min(): number;
        /**
         * Gets the #GDataTasksQuery:show-completed property.
         * @returns the show-completed property
         */
        get_show_completed(): boolean;
        /**
         * Gets the #GDataTasksQuery:show-deleted property.
         * @returns the show-deleted property
         */
        get_show_deleted(): boolean;
        /**
         * Gets the #GDataTasksQuery:show-hidden property.
         * @returns the show-hidden property
         */
        get_show_hidden(): boolean;
        /**
         * Sets the #GDataTasksQuery:completed-max property of the #GDataTasksQuery
         * to the new time/date, `completed_max`.
         *
         * Set `completed_max` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param completed_max upper bound for a task's completion date by UNIX timestamp, or  <code class="literal">-1</code>
         */
        set_completed_max(completed_max: number): void;
        /**
         * Sets the #GDataTasksQuery:completed-min property of the #GDataTasksQuery
         * to the new time/date, `completed_min`.
         *
         * Set `completed_min` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param completed_min lower bound for a task's completion date by UNIX timestamp, or  <code class="literal">-1</code>
         */
        set_completed_min(completed_min: number): void;
        /**
         * Sets the #GDataTasksQuery:due-max property of the #GDataTasksQuery
         * to the new time/date, `due_max`.
         *
         * Set `due_max` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param due_max upper bound for a task's due date by UNIX timestamp, or  <code class="literal">-1</code>
         */
        set_due_max(due_max: number): void;
        /**
         * Sets the #GDataTasksQuery:due-min property of the #GDataTasksQuery
         * to the new time/date, `due_min`.
         *
         * Set `due_min` to <code class="literal">-1</code> to unset the property in the query URI.
         * @param due_min lower bound for a task's due date by UNIX timestamp, or  <code class="literal">-1</code>
         */
        set_due_min(due_min: number): void;
        /**
         * Sets the #GDataTasksQuery:show-completed property of the #GDataTasksQuery.
         * @param show_completed %TRUE to show completed tasks, %FALSE otherwise
         */
        set_show_completed(show_completed: boolean): void;
        /**
         * Sets the #GDataTasksQuery:show-deleted property of the #GDataTasksQuery.
         * @param show_deleted %TRUE to show deleted tasks, %FALSE otherwise
         */
        set_show_deleted(show_deleted: boolean): void;
        /**
         * Sets the #GDataTasksQuery:show-hidden property of the #GDataTasksQuery.
         * @param show_hidden %TRUE to show hidden tasks, %FALSE otherwise
         */
        set_show_hidden(show_hidden: boolean): void;
    }

    module TasksService {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataTasksService structure are private and should never be accessed directly.
     */
    class TasksService extends Service {
        static $gtype: GObject.GType<TasksService>;

        // Constructors

        constructor(properties?: Partial<TasksService.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](authorizer?: Authorizer | null): TasksService;

        // Static methods

        /**
         * The primary #GDataAuthorizationDomain for interacting with Google Tasks. This will not normally need to be used, as it's used internally
         * by the #GDataTasksService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_primary_authorization_domain(): AuthorizationDomain;

        // Methods

        /**
         * Delete `task` from online tasks service.
         *
         * For more details, see gdata_service_delete_entry().
         * @param task the #GDataTasksTask to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_task(task: TasksTask, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `task` from online tasks service. `self` and `task` are both reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_delete_entry_finish() to finish deleting task and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_delete_task(), which is the synchronous version of this function, and
         * gdata_service_delete_entry_async(), which is the base asynchronous insertion function.
         * @param task #GDataTasksTask to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        delete_task_async(
            task: TasksTask,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Delete `tasklist` from online tasks service.
         *
         * For more details, see gdata_service_delete_entry().
         * @param tasklist the #GDataTasksTasklist to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_tasklist(tasklist: TasksTasklist, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `tasklist` from online tasks service. `self` and `tasklist` are both reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_delete_entry_finish() to finish deleting tasklist and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_delete_tasklist(), which is the synchronous version of this function, and
         * gdata_service_delete_entry_async(), which is the base asynchronous insertion function.
         * @param tasklist #GDataTasksTasklist to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        delete_tasklist_async(
            tasklist: TasksTasklist,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `task` by uploading it to the online tasks service into tasklist `tasklist`. It is safe to unref `tasklist` after function returns.
         *
         * For more details, see gdata_service_insert_entry().
         * @param task the #GDataTasksTask to insert
         * @param tasklist #GDataTasksTasklist to insert into
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataTasksTask, or %NULL; unref with g_object_unref()
         */
        insert_task(task: TasksTask, tasklist: TasksTasklist, cancellable?: Gio.Cancellable | null): TasksTask;
        /**
         * Inserts `task` by uploading it to the online tasks service into tasklist `tasklist`. `self,` `task` and `tasklist` are all reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_insert_entry_finish() to obtain a #GDataTasksTask representing the inserted task and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_insert_task(), which is the synchronous version of this function, and
         * gdata_service_insert_entry_async(), which is the base asynchronous insertion function.
         * @param task the #GDataTasksTask to insert
         * @param tasklist #GDataTasksTasklist to insert into
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        insert_task_async(
            task: TasksTask,
            tasklist: TasksTasklist,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `tasklist` by uploading it to the online tasks service.
         *
         * For more details, see gdata_service_insert_entry().
         * @param tasklist #GDataTasksTasklist to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataTasksTasklist, or %NULL; unref with g_object_unref()
         */
        insert_tasklist(tasklist: TasksTasklist, cancellable?: Gio.Cancellable | null): TasksTasklist;
        /**
         * Inserts `tasklist` by uploading it to the online tasks service. `self` and `tasklist` are both reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_insert_entry_finish() to obtain a #GDataTasksTasklist representing the inserted tasklist and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_insert_tasklist(), which is the synchronous version of this function, and
         * gdata_service_insert_entry_async(), which is the base asynchronous insertion function.
         * @param tasklist #GDataTasksTasklist to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        insert_tasklist_async(
            tasklist: TasksTasklist,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of all tasklists from the authenticated account which match the given
         * `query`. It will return all tasklists the user has read access to.
         *
         * For more details, see gdata_service_query().
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_all_tasklists(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of all tasklists from the authenticated account which match the given
         * `query`. `self` and `query` are all reffed when this function is called, so can safely be unreffed after
         * this function returns.
         *
         * For more details, see gdata_tasks_service_query_all_tasklists(), which is the synchronous version of
         * this function, and gdata_service_query_async(), which is the base asynchronous query function.
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_all_tasklists_async(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service to return a list of tasks in the given `tasklist,` which match `query`.
         *
         * For more details, see gdata_service_query().
         * @param tasklist a #GDataTasksTasklist
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_tasks(
            tasklist: TasksTasklist,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service to return a list of tasks in the given `tasklist,` which match `query`. `self,` `tasklist` and `query` are all reffed when this
         * function is called, so can safely be unreffed after this function returns.
         *
         * Get the results of the query using gdata_service_query_finish() in the `callback`.
         *
         * For more details, see gdata_tasks_service_query_tasks(), which is the synchronous version of this function, and gdata_service_query_async(),
         * which is the base asynchronous query function.
         * @param tasklist a #GDataTasksTasklist
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_tasks_async(
            tasklist: TasksTasklist,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Update `task` in online tasks service.
         *
         * For more details, see gdata_service_update_entry().
         * @param task the #GDataTasksTask to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataTasksTask, or %NULL; unref with g_object_unref()
         */
        update_task(task: TasksTask, cancellable?: Gio.Cancellable | null): TasksTask;
        /**
         * Updates `task` to online tasks service. `self` and `task` are both reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_update_entry_finish() to obtain a #GDataTasksTask representing the updated task and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_update_task(), which is the synchronous version of this function, and
         * gdata_service_update_entry_async(), which is the base asynchronous insertion function.
         * @param task #GDataTasksTask to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        update_task_async(
            task: TasksTask,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Update `tasklist` in online tasks service.
         *
         * For more details, see gdata_service_update_entry().
         * @param tasklist the #GDataTasksTasklist to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataTasksTasklist, or %NULL; unref with g_object_unref()
         */
        update_tasklist(tasklist: TasksTasklist, cancellable?: Gio.Cancellable | null): TasksTasklist;
        /**
         * Updates `tasklist` from online tasks service. `self` and `tasklist` are both reffed when this function is called, so can safely be
         * unreffed after this function returns.
         *
         * `callback` should call gdata_service_update_entry_finish() to obtain a #GDataTasksTasklist representing the updated task and to check for possible
         * errors.
         *
         * For more details, see gdata_tasks_service_update_tasklist(), which is the synchronous version of this function, and
         * gdata_service_update_entry_async(), which is the base asynchronous insertion function.
         * @param tasklist #GDataTasksTasklist to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished
         */
        update_tasklist_async(
            tasklist: TasksTasklist,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
    }

    module TasksTask {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {
            completed: number;
            due: number;
            is_deleted: boolean;
            isDeleted: boolean;
            is_hidden: boolean;
            isHidden: boolean;
            notes: string;
            parent: string;
            position: string;
            status: string;
        }
    }

    /**
     * All the fields in the #GDataTasksTask structure are private and should never be accessed directly.
     */
    class TasksTask extends Entry {
        static $gtype: GObject.GType<TasksTask>;

        // Properties

        /**
         * Completion date of the task (as a RFC 3339 timestamp; seconds since
         * the UNIX epoch).
         *
         * This field is <code class="literal">-1</code> if the task has not
         * been completed.
         */
        get completed(): number;
        set completed(val: number);
        /**
         * Due date of the task (as a RFC 3339 timestamp; seconds since the UNIX
         * epoch).
         *
         * This field is <code class="literal">-1</code> if the task has no due
         * date assigned.
         */
        get due(): number;
        set due(val: number);
        /**
         * Flag indicating whether the task has been deleted. The default is %FALSE.
         */
        get is_deleted(): boolean;
        set is_deleted(val: boolean);
        /**
         * Flag indicating whether the task has been deleted. The default is %FALSE.
         */
        get isDeleted(): boolean;
        set isDeleted(val: boolean);
        /**
         * Flag indicating whether the task is hidden. This is the case if the task
         * had been marked completed when the task list was last cleared.
         * The default is %FALSE. This field is read-only.
         */
        get is_hidden(): boolean;
        /**
         * Flag indicating whether the task is hidden. This is the case if the task
         * had been marked completed when the task list was last cleared.
         * The default is %FALSE. This field is read-only.
         */
        get isHidden(): boolean;
        /**
         * This is where the description of what needs to be done in the task is stored.
         */
        get notes(): string;
        set notes(val: string);
        /**
         * Parent task identifier. This field is omitted if it is a top-level task.
         *
         * Since 0.17.10, this property is writable.
         */
        get parent(): string;
        set parent(val: string);
        /**
         * String indicating the position of the task among its sibling tasks under the same parent task
         * or at the top level. If this string is greater than another task's corresponding position string
         * according to lexicographical ordering, the task is positioned after the other task under the same
         * parent task (or at the top level).
         *
         * Since 0.17.10, this property is writable.
         */
        get position(): string;
        set position(val: string);
        /**
         * Status of the task. This is either %GDATA_TASKS_STATUS_NEEDS_ACTION
         * or %GDATA_TASKS_STATUS_COMPLETED.
         */
        get status(): string;
        set status(val: string);

        // Constructors

        constructor(properties?: Partial<TasksTask.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): TasksTask;

        // Methods

        /**
         * Gets the #GDataTasksTask:completed property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the completed property, or <code class="literal">-1</code>
         */
        get_completed(): number;
        /**
         * Gets the #GDataTasksTask:due property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the due property, or <code class="literal">-1</code>
         */
        get_due(): number;
        /**
         * Gets the #GDataTasksTask:notes property.
         * @returns notes of the task, or %NULL
         */
        get_notes(): string | null;
        /**
         * Gets the #GDataTasksTask:parent property.
         * @returns the parent of the task, or %NULL
         */
        get_parent(): string | null;
        /**
         * Gets the #GDataTasksTask:position property.
         * @returns the position of the task, or %NULL
         */
        get_position(): string | null;
        /**
         * Gets the #GDataTasksTask:status property.
         * @returns the status of the task, or %NULL
         */
        get_status(): string | null;
        /**
         * Sets the #GDataTasksTask:completed property of the #GDataTasksTask to the new completion time of the task, `completed`.
         *
         * Set `completed` to <code class="literal">-1</code> to unset the property in the completion time of the task
         * @param completed completion time of the task, or <code class="literal">-1</code>
         */
        set_completed(completed: number): void;
        /**
         * Sets the #GDataTasksTask:due property of the #GDataTasksTask to the new due time of the task, `due`.
         *
         * Set `due` to <code class="literal">-1</code> to unset the property in the due time of the task
         * @param due due time of the task, or <code class="literal">-1</code>
         */
        set_due(due: number): void;
        /**
         * Sets the #GDataTasksTask:is-deleted property to `deleted`.
         * @param deleted %TRUE if task is deleted, %FALSE otherwise
         */
        set_is_deleted(deleted: boolean): void;
        /**
         * Sets the #GDataTasksTask:notes property to the new notes, `notes`.
         *
         * Set `notes` to %NULL to unset the property in the task.
         * @param notes a new notes of the task, or %NULL
         */
        set_notes(notes?: string | null): void;
        /**
         * Sets the #GDataTasksTask:parent property.
         * @param parent parent of the task
         */
        set_parent(parent?: string | null): void;
        /**
         * Sets the #GDataTasksTask:position property.
         * @param position position of the task in the list
         */
        set_position(position: string): void;
        /**
         * Sets the #GDataTasksTask:status property to the new status, `status`.
         *
         * Set `status` to %NULL to unset the property in the task.
         * @param status a new status of the task, or %NULL
         */
        set_status(status?: string | null): void;
    }

    module TasksTasklist {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataTasksTasklist structure are private and should never be accessed directly.
     */
    class TasksTasklist extends Entry {
        static $gtype: GObject.GType<TasksTasklist>;

        // Constructors

        constructor(properties?: Partial<TasksTasklist.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): TasksTasklist;
    }

    module UploadStream {
        // Constructor properties interface

        interface ConstructorProps extends Gio.OutputStream.ConstructorProps {
            authorization_domain: AuthorizationDomain;
            authorizationDomain: AuthorizationDomain;
            cancellable: Gio.Cancellable;
            content_length: number;
            contentLength: number;
            content_type: string;
            contentType: string;
            entry: Entry;
            method: string;
            service: Service;
            slug: string;
            upload_uri: string;
            uploadUri: string;
        }
    }

    /**
     * All the fields in the #GDataUploadStream structure are private and should never be accessed directly.
     */
    class UploadStream extends Gio.OutputStream {
        static $gtype: GObject.GType<UploadStream>;

        // Properties

        /**
         * The authorization domain for the upload, against which the #GDataService:authorizer for the #GDataDownloadStream:service should be
         * authorized. This may be %NULL if authorization is not needed for the upload.
         */
        get authorization_domain(): AuthorizationDomain;
        /**
         * The authorization domain for the upload, against which the #GDataService:authorizer for the #GDataDownloadStream:service should be
         * authorized. This may be %NULL if authorization is not needed for the upload.
         */
        get authorizationDomain(): AuthorizationDomain;
        /**
         * An optional cancellable used to cancel the entire upload operation. If a #GCancellable instance isn't provided for this property at
         * construction time (i.e. to gdata_upload_stream_new()), one will be created internally and can be retrieved using
         * gdata_upload_stream_get_cancellable() and used to cancel the upload operation with g_cancellable_cancel() just as if it was passed to
         * gdata_upload_stream_new().
         *
         * If the upload operation is cancelled using this #GCancellable, any ongoing network activity will be stopped, and any pending or future calls
         * to #GOutputStream API on the #GDataUploadStream will return %G_IO_ERROR_CANCELLED. Note that the #GCancellable objects which can be passed
         * to individual #GOutputStream operations will not cancel the upload operation proper if cancelled — they will merely cancel that API call.
         * The only way to cancel the upload operation completely is using #GDataUploadStream:cancellable.
         */
        get cancellable(): Gio.Cancellable;
        /**
         * The content length (in bytes) of the file being uploaded (i.e. as returned by g_file_info_get_size()). Note that this does not include the
         * length of the XML serialisation of #GDataUploadStream:entry, if set.
         *
         * If this is <code class="literal">-1</code> the upload will be non-resumable; if it is non-negative, the upload will be resumable.
         */
        get content_length(): number;
        /**
         * The content length (in bytes) of the file being uploaded (i.e. as returned by g_file_info_get_size()). Note that this does not include the
         * length of the XML serialisation of #GDataUploadStream:entry, if set.
         *
         * If this is <code class="literal">-1</code> the upload will be non-resumable; if it is non-negative, the upload will be resumable.
         */
        get contentLength(): number;
        /**
         * The content type of the file being uploaded (i.e. as returned by g_file_info_get_content_type()).
         */
        get content_type(): string;
        /**
         * The content type of the file being uploaded (i.e. as returned by g_file_info_get_content_type()).
         */
        get contentType(): string;
        /**
         * The entry used for metadata to upload.
         */
        get entry(): Entry;
        /**
         * The HTTP request method to use when uploading the file.
         */
        get method(): string;
        /**
         * The service which is used to authorize the upload, and to which the upload relates.
         */
        get service(): Service;
        /**
         * The slug of the file being uploaded. This is usually the display name of the file (i.e. as returned by g_file_info_get_display_name()).
         */
        get slug(): string;
        /**
         * The URI to upload the data and metadata to. This must be HTTPS.
         */
        get upload_uri(): string;
        /**
         * The URI to upload the data and metadata to. This must be HTTPS.
         */
        get uploadUri(): string;

        // Constructors

        constructor(properties?: Partial<UploadStream.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](
            service: Service,
            domain: AuthorizationDomain | null,
            method: string,
            upload_uri: string,
            entry: Entry | null,
            slug: string,
            content_type: string,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;

        static new_resumable(
            service: Service,
            domain: AuthorizationDomain | null,
            method: string,
            upload_uri: string,
            entry: Entry | null,
            slug: string,
            content_type: string,
            content_length: number,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;

        // Methods

        /**
         * Gets the authorization domain used to authorize the upload, as passed to gdata_upload_stream_new(). It may be %NULL if authorization is not
         * needed for the upload.
         * @returns the #GDataAuthorizationDomain used to authorize the upload, or %NULL
         */
        get_authorization_domain(): AuthorizationDomain | null;
        /**
         * Gets the #GCancellable for the entire upload operation, #GDataUploadStream:cancellable.
         * @returns the #GCancellable for the entire upload operation
         */
        get_cancellable(): Gio.Cancellable;
        /**
         * Gets the size (in bytes) of the file being uploaded. This will be <code class="literal">-1</code> for a non-resumable upload, and zero or greater
         * for a resumable upload.
         * @returns the size of the file being uploaded
         */
        get_content_length(): number;
        /**
         * Gets the content type of the file being uploaded.
         * @returns the content type of the file being uploaded
         */
        get_content_type(): string;
        /**
         * Gets the entry being used to upload metadata, if one was passed to gdata_upload_stream_new().
         * @returns the entry used for metadata, or %NULL
         */
        get_entry(): Entry;
        /**
         * Gets the HTTP request method being used to upload the file, as passed to gdata_upload_stream_new().
         * @returns the HTTP request method in use
         */
        get_method(): string;
        /**
         * Returns the server's response to the upload operation performed by the #GDataUploadStream. If the operation
         * is still underway, or the server's response hasn't been received yet, %NULL is returned and `length` is set to <code class="literal">-1</code>.
         *
         * If there was an error during the upload operation (but it is complete), %NULL is returned, and `length` is set to <code class="literal">0</code>.
         *
         * While it is safe to call this function from any thread at any time during the network operation, the only way to guarantee that the response has
         * been set before calling this function is to have closed the #GDataUploadStream by calling g_output_stream_close() on it, without cancelling
         * the close operation. Once the stream has been closed, all network communication is guaranteed to have finished. Note that if a call to
         * g_output_stream_close() is cancelled, g_output_stream_is_closed() will immediately start to return %TRUE, even if the #GDataUploadStream is still
         * attempting to flush the network buffers asynchronously — consequently, gdata_upload_stream_get_response() may still return %NULL and a `length` of
         * <code class="literal">-1</code>. The only reliable way to determine if the stream has been fully closed in this situation is to check the results
         * of gdata_upload_stream_get_response(), rather than g_output_stream_is_closed().
         * @returns the server's response to the upload, or %NULL
         */
        get_response(): [string, number];
        /**
         * Gets the service used to authorize the upload, as passed to gdata_upload_stream_new().
         * @returns the #GDataService used to authorize the upload
         */
        get_service(): Service;
        /**
         * Gets the slug (filename) of the file being uploaded.
         * @returns the slug of the file being uploaded
         */
        get_slug(): string;
        /**
         * Gets the URI the file is being uploaded to, as passed to gdata_upload_stream_new().
         * @returns the URI which the file is being uploaded to
         */
        get_upload_uri(): string;
    }

    module YouTubeCategory {
        // Constructor properties interface

        interface ConstructorProps extends Category.ConstructorProps, Comparable.ConstructorProps {
            is_assignable: boolean;
            isAssignable: boolean;
            is_deprecated: boolean;
            isDeprecated: boolean;
        }
    }

    /**
     * All the fields in the #GDataYouTubeCategory structure are private and should never be accessed directly.
     */
    class YouTubeCategory extends Category implements Comparable {
        static $gtype: GObject.GType<YouTubeCategory>;

        // Properties

        /**
         * Whether new videos can be added to the category.
         */
        get is_assignable(): boolean;
        /**
         * Whether new videos can be added to the category.
         */
        get isAssignable(): boolean;
        /**
         * Whether the category is deprecated.
         */
        get is_deprecated(): boolean;
        /**
         * Whether the category is deprecated.
         */
        get isDeprecated(): boolean;

        // Constructors

        constructor(properties?: Partial<YouTubeCategory.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Returns whether the category is browsable in the given `region`. The list of supported region IDs is
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#Region_specific_feeds">available online</ulink>.
         * @param region a two-letter region ID
         * @returns whether the category is browsable in @region
         */
        is_browsable(region: string): boolean;

        // Inherited methods
        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;
        vfunc_compare_with(other: Comparable): number;
        /**
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target`.
         *
         * Whenever the `source_property` is changed the `target_property` is
         * updated using the same value. For instance:
         *
         *
         * ```c
         *   g_object_bind_property (action, "active", widget, "sensitive", 0);
         * ```
         *
         *
         * Will result in the "sensitive" property of the widget #GObject instance to be
         * updated with the same value of the "active" property of the action #GObject
         * instance.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well.
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. To remove the binding without affecting the
         * `source` and the `target` you can just call g_object_unref() on the returned
         * #GBinding instance.
         *
         * Removing the binding by calling g_object_unref() on it must only be done if
         * the binding, `source` and `target` are only used from a single thread and it
         * is clear that both `source` and `target` outlive the binding. Especially it
         * is not safe to rely on this if the binding, `source` or `target` can be
         * finalized from different threads. Keep another reference to the binding and
         * use g_binding_unbind() instead to be on the safe side.
         *
         * A #GObject can have multiple bindings.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
        ): GObject.Binding;
        /**
         * Complete version of g_object_bind_property().
         *
         * Creates a binding between `source_property` on `source` and `target_property`
         * on `target,` allowing you to set the transformation functions to be used by
         * the binding.
         *
         * If `flags` contains %G_BINDING_BIDIRECTIONAL then the binding will be mutual:
         * if `target_property` on `target` changes then the `source_property` on `source`
         * will be updated as well. The `transform_from` function is only used in case
         * of bidirectional bindings, otherwise it will be ignored
         *
         * The binding will automatically be removed when either the `source` or the
         * `target` instances are finalized. This will release the reference that is
         * being held on the #GBinding instance; if you want to hold on to the
         * #GBinding instance, you will need to hold a reference to it.
         *
         * To remove the binding, call g_binding_unbind().
         *
         * A #GObject can have multiple bindings.
         *
         * The same `user_data` parameter will be used for both `transform_to`
         * and `transform_from` transformation functions; the `notify` function will
         * be called once, when the binding is removed. If you need different data
         * for each transformation function, please use
         * g_object_bind_property_with_closures() instead.
         * @param source_property the property on @source to bind
         * @param target the target #GObject
         * @param target_property the property on @target to bind
         * @param flags flags to pass to #GBinding
         * @param transform_to the transformation function     from the @source to the @target, or %NULL to use the default
         * @param transform_from the transformation function     from the @target to the @source, or %NULL to use the default
         * @param notify a function to call when disposing the binding, to free     resources used by the transformation functions, or %NULL if not required
         * @returns the #GBinding instance representing the     binding between the two #GObject instances. The binding is released     whenever the #GBinding reference count reaches zero.
         */
        bind_property_full(
            source_property: string,
            target: GObject.Object,
            target_property: string,
            flags: GObject.BindingFlags,
            transform_to?: GObject.BindingTransformFunc | null,
            transform_from?: GObject.BindingTransformFunc | null,
            notify?: GLib.DestroyNotify | null,
        ): GObject.Binding;
        // Conflicted with GObject.Object.bind_property_full
        bind_property_full(...args: never[]): any;
        /**
         * This function is intended for #GObject implementations to re-enforce
         * a [floating][floating-ref] object reference. Doing this is seldom
         * required: all #GInitiallyUnowneds are created with a floating reference
         * which usually just needs to be sunken by calling g_object_ref_sink().
         */
        force_floating(): void;
        /**
         * Increases the freeze count on `object`. If the freeze count is
         * non-zero, the emission of "notify" signals on `object` is
         * stopped. The signals are queued until the freeze count is decreased
         * to zero. Duplicate notifications are squashed so that at most one
         * #GObject::notify signal is emitted for each property modified while the
         * object is frozen.
         *
         * This is necessary for accessors that modify multiple properties to prevent
         * premature notification while the object is still being modified.
         */
        freeze_notify(): void;
        /**
         * Gets a named field from the objects table of associations (see g_object_set_data()).
         * @param key name of the key for that association
         * @returns the data if found,          or %NULL if no such data exists.
         */
        get_data(key: string): any | null;
        get_property(property_name: string): any;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        get_qdata(quark: GLib.Quark): any | null;
        /**
         * Gets `n_properties` properties for an `object`.
         * Obtained properties will be set to `values`. All properties must be valid.
         * Warnings will be emitted and undefined behaviour may result if invalid
         * properties are passed in.
         * @param names the names of each property to get
         * @param values the values of each property to get
         */
        getv(names: string[], values: (GObject.Value | any)[]): void;
        /**
         * Checks whether `object` has a [floating][floating-ref] reference.
         * @returns %TRUE if @object has a floating reference
         */
        is_floating(): boolean;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param property_name the name of a property installed on the class of @object.
         */
        notify(property_name: string): void;
        /**
         * Emits a "notify" signal for the property specified by `pspec` on `object`.
         *
         * This function omits the property name lookup, hence it is faster than
         * g_object_notify().
         *
         * One way to avoid using g_object_notify() from within the
         * class that registered the properties, and using g_object_notify_by_pspec()
         * instead, is to store the GParamSpec used with
         * g_object_class_install_property() inside a static array, e.g.:
         *
         *
         * ```c
         *   typedef enum
         *   {
         *     PROP_FOO = 1,
         *     PROP_LAST
         *   } MyObjectProperty;
         *
         *   static GParamSpec *properties[PROP_LAST];
         *
         *   static void
         *   my_object_class_init (MyObjectClass *klass)
         *   {
         *     properties[PROP_FOO] = g_param_spec_int ("foo", NULL, NULL,
         *                                              0, 100,
         *                                              50,
         *                                              G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS);
         *     g_object_class_install_property (gobject_class,
         *                                      PROP_FOO,
         *                                      properties[PROP_FOO]);
         *   }
         * ```
         *
         *
         * and then notify a change on the "foo" property with:
         *
         *
         * ```c
         *   g_object_notify_by_pspec (self, properties[PROP_FOO]);
         * ```
         *
         * @param pspec the #GParamSpec of a property installed on the class of @object.
         */
        notify_by_pspec(pspec: GObject.ParamSpec): void;
        /**
         * Increases the reference count of `object`.
         *
         * Since GLib 2.56, if `GLIB_VERSION_MAX_ALLOWED` is 2.56 or greater, the type
         * of `object` will be propagated to the return type (using the GCC typeof()
         * extension), so any casting the caller needs to do on the return type must be
         * explicit.
         * @returns the same @object
         */
        ref(): GObject.Object;
        /**
         * Increase the reference count of `object,` and possibly remove the
         * [floating][floating-ref] reference, if `object` has a floating reference.
         *
         * In other words, if the object is floating, then this call "assumes
         * ownership" of the floating reference, converting it to a normal
         * reference by clearing the floating flag while leaving the reference
         * count unchanged.  If the object is not floating, then this call
         * adds a new normal reference increasing the reference count by one.
         *
         * Since GLib 2.56, the type of `object` will be propagated to the return type
         * under the same conditions as for g_object_ref().
         * @returns @object
         */
        ref_sink(): GObject.Object;
        /**
         * Releases all references to other objects. This can be used to break
         * reference cycles.
         *
         * This function should only be called from object system implementations.
         */
        run_dispose(): void;
        /**
         * Each object carries around a table of associations from
         * strings to pointers.  This function lets you set an association.
         *
         * If the object already had an association with that name,
         * the old association will be destroyed.
         *
         * Internally, the `key` is converted to a #GQuark using g_quark_from_string().
         * This means a copy of `key` is kept permanently (even after `object` has been
         * finalized) — so it is recommended to only use a small, bounded set of values
         * for `key` in your program, to avoid the #GQuark storage growing unbounded.
         * @param key name of the key
         * @param data data to associate with that key
         */
        set_data(key: string, data?: any | null): void;
        set_property(property_name: string, value: any): void;
        /**
         * Remove a specified datum from the object's data associations,
         * without invoking the association's destroy handler.
         * @param key name of the key
         * @returns the data if found, or %NULL          if no such data exists.
         */
        steal_data(key: string): any | null;
        /**
         * This function gets back user data pointers stored via
         * g_object_set_qdata() and removes the `data` from object
         * without invoking its destroy() function (if any was
         * set).
         * Usually, calling this function is only required to update
         * user data pointers with a destroy notifier, for example:
         *
         * ```c
         * void
         * object_add_to_user_list (GObject     *object,
         *                          const gchar *new_string)
         * {
         *   // the quark, naming the object data
         *   GQuark quark_string_list = g_quark_from_static_string ("my-string-list");
         *   // retrieve the old string list
         *   GList *list = g_object_steal_qdata (object, quark_string_list);
         *
         *   // prepend new string
         *   list = g_list_prepend (list, g_strdup (new_string));
         *   // this changed 'list', so we need to set it again
         *   g_object_set_qdata_full (object, quark_string_list, list, free_string_list);
         * }
         * static void
         * free_string_list (gpointer data)
         * {
         *   GList *node, *list = data;
         *
         *   for (node = list; node; node = node->next)
         *     g_free (node->data);
         *   g_list_free (list);
         * }
         * ```
         *
         * Using g_object_get_qdata() in the above example, instead of
         * g_object_steal_qdata() would have left the destroy function set,
         * and thus the partial string list would have been freed upon
         * g_object_set_qdata_full().
         * @param quark A #GQuark, naming the user data pointer
         * @returns The user data pointer set, or %NULL
         */
        steal_qdata(quark: GLib.Quark): any | null;
        /**
         * Reverts the effect of a previous call to
         * g_object_freeze_notify(). The freeze count is decreased on `object`
         * and when it reaches zero, queued "notify" signals are emitted.
         *
         * Duplicate notifications for each property are squashed so that at most one
         * #GObject::notify signal is emitted for each property, in the reverse order
         * in which they have been queued.
         *
         * It is an error to call this function when the freeze count is zero.
         */
        thaw_notify(): void;
        /**
         * Decreases the reference count of `object`. When its reference count
         * drops to 0, the object is finalized (i.e. its memory is freed).
         *
         * If the pointer to the #GObject may be reused in future (for example, if it is
         * an instance variable of another object), it is recommended to clear the
         * pointer to %NULL rather than retain a dangling pointer to a potentially
         * invalid #GObject instance. Use g_clear_object() for this.
         */
        unref(): void;
        /**
         * This function essentially limits the life time of the `closure` to
         * the life time of the object. That is, when the object is finalized,
         * the `closure` is invalidated by calling g_closure_invalidate() on
         * it, in order to prevent invocations of the closure with a finalized
         * (nonexisting) object. Also, g_object_ref() and g_object_unref() are
         * added as marshal guards to the `closure,` to ensure that an extra
         * reference count is held on `object` during invocation of the
         * `closure`.  Usually, this function will be called on closures that
         * use this `object` as closure data.
         * @param closure #GClosure to watch
         */
        watch_closure(closure: GObject.Closure): void;
        /**
         * the `constructed` function is called by g_object_new() as the
         *  final step of the object creation process.  At the point of the call, all
         *  construction properties have been set on the object.  The purpose of this
         *  call is to allow for object initialisation steps that can only be performed
         *  after construction properties have been set.  `constructed` implementors
         *  should chain up to the `constructed` call of their parent class to allow it
         *  to complete its initialisation.
         */
        vfunc_constructed(): void;
        /**
         * emits property change notification for a bunch
         *  of properties. Overriding `dispatch_properties_changed` should be rarely
         *  needed.
         * @param n_pspecs
         * @param pspecs
         */
        vfunc_dispatch_properties_changed(n_pspecs: number, pspecs: GObject.ParamSpec): void;
        /**
         * the `dispose` function is supposed to drop all references to other
         *  objects, but keep the instance otherwise intact, so that client method
         *  invocations still work. It may be run multiple times (due to reference
         *  loops). Before returning, `dispose` should chain up to the `dispose` method
         *  of the parent class.
         */
        vfunc_dispose(): void;
        /**
         * instance finalization function, should finish the finalization of
         *  the instance begun in `dispose` and chain up to the `finalize` method of the
         *  parent class.
         */
        vfunc_finalize(): void;
        /**
         * the generic getter for all properties of this type. Should be
         *  overridden for every type with properties.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_get_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        /**
         * Emits a "notify" signal for the property `property_name` on `object`.
         *
         * When possible, eg. when signaling a property change from within the class
         * that registered the property, you should use g_object_notify_by_pspec()
         * instead.
         *
         * Note that emission of the notify signal may be blocked with
         * g_object_freeze_notify(). In this case, the signal emissions are queued
         * and will be emitted (in reverse order) when g_object_thaw_notify() is
         * called.
         * @param pspec
         */
        vfunc_notify(pspec: GObject.ParamSpec): void;
        /**
         * the generic setter for all properties of this type. Should be
         *  overridden for every type with properties. If implementations of
         *  `set_property` don't emit property change notification explicitly, this will
         *  be done implicitly by the type system. However, if the notify signal is
         *  emitted explicitly, the type system will not emit it a second time.
         * @param property_id
         * @param value
         * @param pspec
         */
        vfunc_set_property(property_id: number, value: GObject.Value | any, pspec: GObject.ParamSpec): void;
        disconnect(id: number): void;
        set(properties: { [key: string]: any }): void;
        block_signal_handler(id: number): any;
        unblock_signal_handler(id: number): any;
        stop_emission_by_name(detailedName: string): any;
    }

    module YouTubeComment {
        // Constructor properties interface

        interface ConstructorProps extends Comment.ConstructorProps {
            parent_comment_uri: string;
            parentCommentUri: string;
        }
    }

    /**
     * All the fields in the #GDataYouTubeComment structure are private and should never be accessed directly.
     */
    class YouTubeComment extends Comment {
        static $gtype: GObject.GType<YouTubeComment>;

        // Properties

        /**
         * The URI of the parent comment to this one, or %NULL if this comment is a top-level comment.
         *
         * See the documentation for #GDataYouTubeComment for an explanation of the semantics of parent comment URIs.
         */
        get parent_comment_uri(): string;
        set parent_comment_uri(val: string);
        /**
         * The URI of the parent comment to this one, or %NULL if this comment is a top-level comment.
         *
         * See the documentation for #GDataYouTubeComment for an explanation of the semantics of parent comment URIs.
         */
        get parentCommentUri(): string;
        set parentCommentUri(val: string);

        // Constructors

        constructor(properties?: Partial<YouTubeComment.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id: string): YouTubeComment;
        // Conflicted with GData.Entry.new

        static ['new'](...args: never[]): any;

        // Methods

        /**
         * Gets the #GDataYouTubeComment:parent-comment-uri property.
         * @returns the parent comment URI, or %NULL
         */
        get_parent_comment_uri(): string;
        /**
         * Sets the #GDataYouTubeComment:parent-comment-uri property to `parent_comment_uri`.
         *
         * Set `parent_comment_uri` to %NULL to unset the #GDataYouTubeComment:parent-comment-uri property in the comment (i.e. make the comment a top-level
         * comment).
         *
         * See the <ulink type="http" url="http://code.google.com/apis/youtube/2.0/developers_guide_protocol_comments.html#Retrieve_comments">online
         * documentation</ulink> for more information.
         * @param parent_comment_uri a new parent comment URI, or %NULL
         */
        set_parent_comment_uri(parent_comment_uri: string): void;
    }

    module YouTubeFeed {
        // Constructor properties interface

        interface ConstructorProps extends Feed.ConstructorProps {}
    }

    /**
     * All the fields in the #GDataYouTubeFeed structure are private and should
     * never be accessed directly.
     */
    class YouTubeFeed extends Feed {
        static $gtype: GObject.GType<YouTubeFeed>;

        // Constructors

        constructor(properties?: Partial<YouTubeFeed.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;
    }

    module YouTubeQuery {
        // Constructor properties interface

        interface ConstructorProps extends Query.ConstructorProps {
            age: YouTubeAge;
            latitude: number;
            license: string;
            location_radius: number;
            locationRadius: number;
            longitude: number;
            order_by: string;
            orderBy: string;
            restriction: string;
            safe_search: YouTubeSafeSearch;
            safeSearch: YouTubeSafeSearch;
        }
    }

    /**
     * All the fields in the #GDataYouTubeQuery structure are private and should never be accessed directly.
     */
    class YouTubeQuery extends Query {
        static $gtype: GObject.GType<YouTubeQuery>;

        // Properties

        /**
         * Restricts the search to videos uploaded within the specified time period. To retrieve videos irrespective of their
         * age, set the property to %GDATA_YOUTUBE_AGE_ALL_TIME.
         */
        get age(): YouTubeAge;
        set age(val: YouTubeAge);
        /**
         * The latitude of a particular location of which videos should be found. This should be used in conjunction with
         * #GDataYouTubeQuery:longitude; if either property is outside the valid range, neither will be used. Valid latitudes
         * are between <code class="literal">-90</code> and <code class="literal">90</code>0 degrees; any values of this property outside that range
         * will unset the property in the query URI.
         *
         * If #GDataYouTubeQuery:location-radius is a non-<code class="literal">0</code> value, this will define a circle from which videos should be
         * found.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#location">online documentation</ulink>.
         */
        get latitude(): number;
        set latitude(val: number);
        /**
         * The content license which should be used to filter search results. If set to, for example, %GDATA_YOUTUBE_LICENSE_CC, only videos which
         * are Creative Commons licensed will be returned in search results. Set this to %NULL to return videos under any license.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#videoLicense">online documentation</ulink>.
         */
        get license(): string;
        set license(val: string);
        /**
         * The radius, in metres, of a circle from within which videos should be returned. The circle is centred on the latitude and
         * longitude given in #GDataYouTubeQuery:latitude and #GDataYouTubeQuery:longitude.
         *
         * Set this property to <code class="literal">0</code> to search for specific coordinates, rather than within a given radius.
         *
         * For more information, see the documentation for #GDataYouTubeQuery:latitude.
         */
        get location_radius(): number;
        set location_radius(val: number);
        /**
         * The radius, in metres, of a circle from within which videos should be returned. The circle is centred on the latitude and
         * longitude given in #GDataYouTubeQuery:latitude and #GDataYouTubeQuery:longitude.
         *
         * Set this property to <code class="literal">0</code> to search for specific coordinates, rather than within a given radius.
         *
         * For more information, see the documentation for #GDataYouTubeQuery:latitude.
         */
        get locationRadius(): number;
        set locationRadius(val: number);
        /**
         * The longitude of a particular location of which videos should be found. This should be used in conjunction with
         * #GDataYouTubeQuery:latitude; if either property is outside the valid range, neither will be used. Valid longitudes
         * are between <code class="literal">-180</code> and <code class="literal">180</code> degrees; any values of this property outside that
         * range will unset the property in the query URI.
         *
         * For more information, see the documentation for #GDataYouTubeQuery:latitude.
         */
        get longitude(): number;
        set longitude(val: number);
        /**
         * Specifies the order of entries in a feed. Supported values are <literal>relevance</literal>,
         * <literal>published</literal>, <literal>viewCount</literal> and <literal>rating</literal>.
         *
         * Additionally, results most relevant to a specific language can be returned by setting the property
         * to <literal>relevance_lang_<replaceable>languageCode</replaceable></literal>, where
         * <replaceable>languageCode</replaceable> is an ISO 639-1 language code, as used in #GDataYouTubeQuery:language.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#order">online documentation</ulink>.
         */
        get order_by(): string;
        set order_by(val: string);
        /**
         * Specifies the order of entries in a feed. Supported values are <literal>relevance</literal>,
         * <literal>published</literal>, <literal>viewCount</literal> and <literal>rating</literal>.
         *
         * Additionally, results most relevant to a specific language can be returned by setting the property
         * to <literal>relevance_lang_<replaceable>languageCode</replaceable></literal>, where
         * <replaceable>languageCode</replaceable> is an ISO 639-1 language code, as used in #GDataYouTubeQuery:language.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#order">online documentation</ulink>.
         */
        get orderBy(): string;
        set orderBy(val: string);
        /**
         * An ISO 3166 two-letter country code that should be used to filter
         * videos playable only in specific countries.
         *
         * Previously, this property could also accept the client’s IP address
         * for country lookup. This feature is no longer supported by Google,
         * and will result in an error from the server if used. Use a country
         * code instead.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#regionCode">online documentation</ulink>.
         */
        get restriction(): string;
        set restriction(val: string);
        /**
         * Whether the search results should include restricted content as well as standard content.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#safeSearch">online documentation</ulink>.
         */
        get safe_search(): YouTubeSafeSearch;
        set safe_search(val: YouTubeSafeSearch);
        /**
         * Whether the search results should include restricted content as well as standard content.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/search/list#safeSearch">online documentation</ulink>.
         */
        get safeSearch(): YouTubeSafeSearch;
        set safeSearch(val: YouTubeSafeSearch);

        // Constructors

        constructor(properties?: Partial<YouTubeQuery.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](q?: string | null): YouTubeQuery;

        // Methods

        /**
         * Gets the #GDataYouTubeQuery:age property.
         * @returns the age property
         */
        get_age(): YouTubeAge;
        /**
         * Gets the #GDataYouTubeQuery:license property.
         * @returns the license property, or %NULL if it is unset
         */
        get_license(): string;
        /**
         * Gets the location-based properties of the #GDataYouTubeQuery<!-- -->: #GDataYouTubeQuery:latitude, #GDataYouTubeQuery:longitude,
         * #GDataYouTubeQuery:location-radius and #GDataYouTubeQuery:has-location.
         */
        get_location(): [number, number, number];
        /**
         * Gets the #GDataYouTubeQuery:order-by property.
         * @returns the order by property, or %NULL if it is unset
         */
        get_order_by(): string;
        /**
         * Gets the #GDataYouTubeQuery:restriction property.
         * @returns the restriction property, or %NULL if it is unset
         */
        get_restriction(): string;
        /**
         * Gets the #GDataYouTubeQuery:safe-search property.
         * @returns the safe search property
         */
        get_safe_search(): YouTubeSafeSearch;
        /**
         * Sets the #GDataYouTubeQuery:age property of the #GDataYouTubeQuery to `age`.
         * @param age the new age
         */
        set_age(age: YouTubeAge): void;
        /**
         * Sets the #GDataYouTubeQuery:license property of the #GDataYouTubeQuery to the new license value, `license`.
         *
         * Set `license` to %NULL to unset the property in the query URI.
         * @param license a new license value, or %NULL
         */
        set_license(license?: string | null): void;
        /**
         * Sets the location-based properties of the #GDataYouTubeQuery<!-- -->: #GDataYouTubeQuery:latitude, #GDataYouTubeQuery:longitude,
         * #GDataYouTubeQuery:location-radius and #GDataYouTubeQuery:has-location.
         * @param latitude the new latitude, or %G_MAXDOUBLE
         * @param longitude the new longitude, or %G_MAXDOUBLE
         * @param radius the new location radius, or <code class="literal">0</code>
         */
        set_location(latitude: number, longitude: number, radius: number): void;
        /**
         * Sets the #GDataYouTubeQuery:order-by property of the #GDataYouTubeQuery to the new order by string, `order_by`.
         *
         * Set `order_by` to %NULL to unset the property in the query URI.
         * @param order_by a new order by string, or %NULL
         */
        set_order_by(order_by?: string | null): void;
        /**
         * Sets the #GDataYouTubeQuery:restriction property of the #GDataYouTubeQuery to the new restriction string, `restriction`.
         *
         * Set `restriction` to %NULL to unset the property in the query URI.
         * @param restriction a new restriction string, or %NULL
         */
        set_restriction(restriction?: string | null): void;
        /**
         * Sets the #GDataYouTubeQuery:safe-search property of the #GDataYouTubeQuery to `safe_search`.
         * @param safe_search a new safe search level
         */
        set_safe_search(safe_search: YouTubeSafeSearch): void;
    }

    module YouTubeService {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps, Batchable.ConstructorProps {
            developer_key: string;
            developerKey: string;
        }
    }

    /**
     * All the fields in the #GDataYouTubeService structure are private and should never be accessed directly.
     */
    class YouTubeService extends Service implements Batchable {
        static $gtype: GObject.GType<YouTubeService>;

        // Properties

        /**
         * The developer key your application has registered with the YouTube API. For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/registering_an_application">online documentation</ulink>.
         *
         * With the port from v2 to v3 of the YouTube API in libgdata
         * 0.17.0, it might be necessary to update your application’s
         * developer key.
         */
        get developer_key(): string;
        /**
         * The developer key your application has registered with the YouTube API. For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/registering_an_application">online documentation</ulink>.
         *
         * With the port from v2 to v3 of the YouTube API in libgdata
         * 0.17.0, it might be necessary to update your application’s
         * developer key.
         */
        get developerKey(): string;

        // Constructors

        constructor(properties?: Partial<YouTubeService.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](developer_key: string, authorizer?: Authorizer | null): YouTubeService;

        // Static methods

        /**
         * The primary #GDataAuthorizationDomain for interacting with YouTube. This will not normally need to be used, as it's used internally
         * by the #GDataYouTubeService methods. However, if using the plain #GDataService methods to implement custom queries or requests which libgdata
         * does not support natively, then this domain may be needed to authorize the requests.
         *
         * The domain never changes, and is interned so that pointer comparison can be used to differentiate it from other authorization domains.
         */
        static get_primary_authorization_domain(): AuthorizationDomain;

        // Methods

        /**
         * Finish off a video upload operation started by gdata_youtube_service_upload_video(), parsing the result and returning the new #GDataYouTubeVideo.
         *
         * If an error occurred during the upload operation, it will have been returned during the operation (e.g. by g_output_stream_splice() or one
         * of the other stream methods). In such a case, %NULL will be returned but `error` will remain unset. `error` is only set in the case that the server
         * indicates that the operation was successful, but an error is encountered in parsing the result sent by the server.
         * @param upload_stream the #GDataUploadStream from the operation
         * @returns the new #GDataYouTubeVideo, or %NULL; unref with g_object_unref()
         */
        finish_video_upload(upload_stream: UploadStream): YouTubeVideo;
        /**
         * Gets a list of the categories currently in use on YouTube. The returned #GDataAPPCategories contains a list of #GDataYouTubeCategorys which
         * enumerate the current YouTube categories.
         *
         * The category labels (#GDataCategory:label) are localised based on the value of #GDataService:locale.
         * @param cancellable a #GCancellable, or %NULL
         * @returns a #GDataAPPCategories, or %NULL; unref with g_object_unref()
         */
        get_categories(cancellable?: Gio.Cancellable | null): APPCategories;
        /**
         * Gets a list of the categories currently in use on YouTube. `self` is reffed when this function is called, so can safely be unreffed after this
         * function returns.
         *
         * For more details, see gdata_youtube_service_get_categories(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_youtube_service_get_categories_finish() to get the results of the
         * operation.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        get_categories_async(cancellable?: Gio.Cancellable | null): Promise<APPCategories>;
        /**
         * Gets a list of the categories currently in use on YouTube. `self` is reffed when this function is called, so can safely be unreffed after this
         * function returns.
         *
         * For more details, see gdata_youtube_service_get_categories(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_youtube_service_get_categories_finish() to get the results of the
         * operation.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the request is finished
         */
        get_categories_async(cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback<this> | null): void;
        /**
         * Gets a list of the categories currently in use on YouTube. `self` is reffed when this function is called, so can safely be unreffed after this
         * function returns.
         *
         * For more details, see gdata_youtube_service_get_categories(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_youtube_service_get_categories_finish() to get the results of the
         * operation.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the request is finished
         */
        get_categories_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<APPCategories> | void;
        /**
         * Finishes an asynchronous request for a list of categories on YouTube, as started with gdata_youtube_service_get_categories_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataAPPCategories, or %NULL; unref with g_object_unref()
         */
        get_categories_finish(async_result: Gio.AsyncResult): APPCategories;
        /**
         * Gets the #GDataYouTubeService:developer-key property from the #GDataYouTubeService.
         * @returns the developer key property
         */
        get_developer_key(): string;
        /**
         * Queries the service for videos related to `video`. The algorithm determining which videos are related is on the server side.
         *
         * Parameters and other errors are as for gdata_service_query().
         * @param video a #GDataYouTubeVideo for which to find related videos
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results; unref with g_object_unref()
         */
        query_related(
            video: YouTubeVideo,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service for videos related to `video`. The algorithm determining which videos are related is on the server side.
         * `self` and `query` are both reffed when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_youtube_service_query_related(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param video a #GDataYouTubeVideo for which to find related videos
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_related_async(
            video: YouTubeVideo,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service's standard `feed_type` feed to build a #GDataFeed.
         *
         * Note that with the port from v2 to v3 of the YouTube API in libgdata
         * 0.17.0, all feed types except %GDATA_YOUTUBE_MOST_POPULAR_FEED have been
         * deprecated. Other feed types will now transparently return
         * %GDATA_YOUTUBE_MOST_POPULAR_FEED, limited to the past 24 hours.
         *
         * Parameters and errors are as for gdata_service_query().
         * @param feed_type the feed type to query, from #GDataYouTubeStandardFeedType
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_standard_feed(
            feed_type: YouTubeStandardFeedType,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service's standard `feed_type` feed to build a #GDataFeed. `self` and
         * `query` are both reffed when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_youtube_service_query_standard_feed(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param feed_type the feed type to query, from #GDataYouTubeStandardFeedType
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_standard_feed_async(
            feed_type: YouTubeStandardFeedType,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service for videos matching the parameters set on the #GDataQuery. This searches site-wide, and imposes no other restrictions or
         * parameters on the query.
         *
         * Parameters and errors are as for gdata_service_query().
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_videos(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service for videos matching the parameters set on the #GDataQuery. This searches site-wide, and imposes no other restrictions or
         * parameters on the query. `self` and `query` are both reffed when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_youtube_service_query_videos(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when authentication is finished
         */
        query_videos_async(
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Uploads a video to YouTube, using the properties from `video` and the file data written to the resulting #GDataUploadStream.
         *
         * If `video` has already been inserted, a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned. If no user is authenticated
         * with the service, %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED will be returned.
         *
         * The stream returned by this function should be written to using the standard #GOutputStream methods, asynchronously or synchronously. Once the stream
         * is closed (using g_output_stream_close()), gdata_youtube_service_finish_video_upload() should be called on it to parse and return the updated
         * #GDataYouTubeVideo for the uploaded video. This must be done, as `video` isn't updated in-place.
         *
         * In order to cancel the upload, a #GCancellable passed in to `cancellable` must be cancelled using g_cancellable_cancel(). Cancelling the individual
         * #GOutputStream operations on the #GDataUploadStream will not cancel the entire upload; merely the write or close operation in question. See the
         * #GDataUploadStream:cancellable for more details.
         *
         * Any upload errors will be thrown by the stream methods, and may come from the #GDataServiceError domain.
         * @param video a #GDataYouTubeVideo to insert
         * @param slug the filename to give to the uploaded file
         * @param content_type the content type of the uploaded data
         * @param cancellable a #GCancellable for the entire upload stream, or %NULL
         * @returns a #GDataUploadStream to write the video data to, or %NULL; unref with g_object_unref()
         */
        upload_video(
            video: YouTubeVideo,
            slug: string,
            content_type: string,
            cancellable?: Gio.Cancellable | null,
        ): UploadStream;

        // Inherited properties
        /**
         * An object which implements #GDataAuthorizer. This should have previously been authenticated authorized against this service type (and
         * potentially other service types). The service will use the authorizer to add an authorization token to each request it performs.
         *
         * Your application should call methods on the #GDataAuthorizer object itself in order to authenticate with the Google accounts service and
         * authorize against this service type. See the documentation for the particular #GDataAuthorizer implementation being used for more details.
         *
         * The authorizer for a service can be changed at runtime for a different #GDataAuthorizer object or %NULL without affecting ongoing requests
         * and operations.
         *
         * Note that it's only necessary to set an authorizer on the service if your application is going to make requests of the service which
         * require authorization. For example, listing the current most popular videos on YouTube does not require authorization, but uploading a
         * video to YouTube does. It's an unnecessary overhead to require the user to authorize against a service when not strictly required.
         */
        get authorizer(): Authorizer;
        set authorizer(val: Authorizer);
        /**
         * The locale to use for network requests, in Unix locale format. (e.g. "en_GB", "cs", "de_DE".) Use %NULL for the default "C" locale
         * (typically "en_US").
         *
         * Typically, this locale will be used by the server-side software to localise results, such as by translating category names, or by choosing
         * geographically relevant search results. This will vary from service to service.
         *
         * The server-side behaviour is undefined if it doesn't support a given locale.
         */
        get locale(): string;
        set locale(val: string);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxy_resolver(): Gio.ProxyResolver;
        set proxy_resolver(val: Gio.ProxyResolver);
        /**
         * The #GProxyResolver used to determine a proxy URI.
         */
        get proxyResolver(): Gio.ProxyResolver;
        set proxyResolver(val: Gio.ProxyResolver);
        /**
         * A timeout, in seconds, for network operations. If the timeout is exceeded, the operation will be cancelled and
         * %GDATA_SERVICE_ERROR_NETWORK_ERROR will be returned.
         *
         * If the timeout is <code class="literal">0</code>, operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         */
        get timeout(): number;
        set timeout(val: number);

        // Inherited methods
        /**
         * Creates a new #GDataBatchOperation for the given #GDataBatchable service, and with the given `feed_uri`. `feed_uri` is normally the %GDATA_LINK_BATCH
         * link URI in the appropriate #GDataFeed from the service. If authorization will be required to perform any of the requests in the batch operation,
         * `domain` must be non-%NULL, and must be an authorization domain which covers all of the requests. Otherwise, `domain` may be %NULL if authorization
         * is not required.
         * @param domain the #GDataAuthorizationDomain to authorize the operation, or %NULL
         * @param feed_uri the URI to send the batch operation request to
         * @returns a new #GDataBatchOperation; unref with g_object_unref()
         */
        create_operation(domain: AuthorizationDomain | null, feed_uri: string): BatchOperation;
        /**
         * Deletes `entry` from the server. For more information about the concept of deleting entries, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#DeletingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the deletion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error deleting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `entry` from the server. `self` and `entry` are both reffed when this function is called,
         * so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_delete_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_delete_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the deletion falls under, or %NULL
         * @param entry the #GDataEntry to delete
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when deletion is finished, or %NULL
         */
        delete_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous entry deletion operation started with gdata_service_delete_entry_async().
         * @param async_result a #GAsyncResult
         * @returns %TRUE on success, %FALSE otherwise
         */
        delete_entry_finish(async_result: Gio.AsyncResult): boolean;
        /**
         * Gets the #GDataAuthorizer object currently in use by the service. See the documentation for #GDataService:authorizer for more details.
         * @returns the authorizer object for this service, or %NULL
         */
        get_authorizer(): Authorizer;
        /**
         * Returns the locale currently being used for network requests, or %NULL if the locale is the default.
         * @returns the current locale
         */
        get_locale(): string;
        /**
         * Gets the #GProxyResolver on the #GDataService's #SoupSession.
         * @returns a #GProxyResolver, or %NULL
         */
        get_proxy_resolver(): Gio.ProxyResolver | null;
        /**
         * Gets the #GDataService:timeout property; the network timeout, in seconds.
         * @returns the timeout, or <code class="literal">0</code>
         */
        get_timeout(): number;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. For more information about the concept of inserting entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#InsertingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the insertion will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If the entry is marked as already having been inserted a %GDATA_SERVICE_ERROR_ENTRY_ALREADY_INSERTED error will be returned immediately
         * (there will be no network requests).
         *
         * If there is an error inserting the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Inserts `entry` by uploading it to the online service at `upload_uri`. `self,` `upload_uri` and
         * `entry` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_insert_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_insert_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the insertion operation falls under, or %NULL
         * @param upload_uri the URI to which the upload should be sent
         * @param entry the #GDataEntry to insert
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when insertion is finished, or %NULL
         */
        insert_entry_async(
            domain: AuthorizationDomain | null,
            upload_uri: string,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry insertion operation started with gdata_service_insert_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        insert_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Determines whether the service is authorized for all the #GDataAuthorizationDomains it belongs to (as returned by
         * gdata_service_get_authorization_domains()). If the service's #GDataService:authorizer is %NULL, %FALSE is always returned.
         *
         * This is basically a convenience method for checking that the service's #GDataAuthorizer is authorized for all the service's
         * #GDataAuthorizationDomains.
         * @returns %TRUE if the service is authorized for all its domains, %FALSE otherwise
         */
        is_authorized(): boolean;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the query will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query, but subclasses may override
         * this and return their own errors. See their documentation for more details.
         *
         * For each entry in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         *
         * If the query is successful and the feed supports pagination, `query` will be updated with the pagination URIs, and the next or previous page
         * can then be loaded by calling gdata_query_next_page() or gdata_query_previous_page() before running the query again.
         *
         * If the #GDataQuery's ETag is set and it finds a match on the server, %NULL will be returned, but `error` will remain unset. Otherwise,
         * `query'`s ETag will be updated with the ETag from the returned feed, if available.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed>;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Queries the service's `feed_uri` feed to build a #GDataFeed. `self,` `feed_uri` and
         * `query` are all reffed/copied when this function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param feed_uri the feed URI to query, including the host name and protocol
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntrys to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when an entry is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_async(
            domain: AuthorizationDomain | null,
            feed_uri: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed> | void;
        /**
         * Finishes an asynchronous query operation started with gdata_service_query_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataFeed of query results, or %NULL; unref with g_object_unref()
         */
        query_finish(async_result: Gio.AsyncResult): Feed;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id().
         *
         * Parameters and errors are as for gdata_service_query(). Most of the properties of `query` aren't relevant, and
         * will cause a server-side error if used. The most useful property to use is #GDataQuery:etag, which will cause the
         * server to not return anything if the entry hasn't been modified since it was given the specified ETag; thus saving
         * bandwidth. If the server does not return anything for this reason, gdata_service_query_single_entry() will return
         * %NULL, but will not set an error in `error`.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable a #GCancellable, or %NULL
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Entry;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves information about the single entry with the given `entry_id`. `entry_id` should be as returned by
         * gdata_entry_get_id(). `self,` `query` and `entry_id` are reffed/copied when this
         * function is called, so can safely be freed after this function returns.
         *
         * For more details, see gdata_service_query_single_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_single_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param entry_id the entry ID of the desired entry
         * @param query a #GDataQuery with the query parameters, or %NULL
         * @param entry_type a #GType for the #GDataEntry to build from the XML
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_single_entry_async(
            domain: AuthorizationDomain | null,
            entry_id: string,
            query: Query | null,
            entry_type: GObject.GType,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous query operation for a single entry, as started with gdata_service_query_single_entry_async().
         * @param async_result a #GAsyncResult
         * @returns a #GDataEntry, or %NULL; unref with g_object_unref()
         */
        query_single_entry_finish(async_result: Gio.AsyncResult): Entry;
        /**
         * Sets #GDataService:authorizer to `authorizer`. This may be %NULL if the service will only make requests in future which don't require authorization.
         * See the documentation for #GDataService:authorizer for more information.
         * @param authorizer a new authorizer object for the service, or %NULL
         */
        set_authorizer(authorizer: Authorizer): void;
        /**
         * Set the locale used for network requests to `locale,` given in standard Unix locale format. See #GDataService:locale for more details.
         *
         * Note that while it's possible to change the locale after sending network requests, it is unsupported, as the server-side software may behave
         * unexpectedly. The only supported use of this function is after creation of a service, but before any network requests are made.
         * @param locale the new locale in Unix locale format, or %NULL for the default locale
         */
        set_locale(locale?: string | null): void;
        /**
         * Sets the #GProxyResolver on the #SoupSession used internally by the given #GDataService.
         * @param proxy_resolver a #GProxyResolver, or %NULL
         */
        set_proxy_resolver(proxy_resolver?: Gio.ProxyResolver | null): void;
        /**
         * Sets the #GDataService:timeout property; the network timeout, in seconds.
         *
         * If `timeout` is <code class="literal">0</code>, network operations will never time out.
         *
         * Note that if a #GDataAuthorizer is being used with this #GDataService, the authorizer might also need its timeout setting.
         * @param timeout the timeout, or <code class="literal">0</code>
         */
        set_timeout(timeout: number): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. For more information about the concept of updating entries, see
         * the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/basics.html#UpdatingEntry">online documentation</ulink> for the GData
         * protocol.
         *
         * The service will return an updated version of the entry, which is the return value of this function on success.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled before or during network activity, the error %G_IO_ERROR_CANCELLED will be returned. Cancellation has no effect
         * after network activity has finished, however, and the update will return successfully (or return an error sent by the server) if it is first
         * cancelled after network activity has finished. See the <link linkend="cancellable-support">overview of cancellation</link> for
         * more details.
         *
         * If there is an error updating the entry, a %GDATA_SERVICE_ERROR_PROTOCOL_ERROR error will be returned. Currently, subclasses
         * <emphasis>cannot</emphasis> cannot override this or provide more specific errors.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry(domain: AuthorizationDomain | null, entry: Entry, cancellable?: Gio.Cancellable | null): Entry;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Entry>;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Updates `entry` by PUTting it to its <literal>edit</literal> link's URI. `self` and
         * `entry` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_service_update_entry(), which is the synchronous version of this function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_update_entry_finish()
         * to get the results of the operation.
         * @param domain the #GDataAuthorizationDomain the update operation falls under, or %NULL
         * @param entry the #GDataEntry to update
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the update is finished, or %NULL
         */
        update_entry_async(
            domain: AuthorizationDomain | null,
            entry: Entry,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Entry> | void;
        /**
         * Finishes an asynchronous entry update operation started with gdata_service_update_entry_async().
         * @param async_result a #GAsyncResult
         * @returns an updated #GDataEntry, or %NULL; unref with g_object_unref()
         */
        update_entry_finish(async_result: Gio.AsyncResult): Entry;
        vfunc_append_query_headers(domain: AuthorizationDomain, message: Soup.Message): void;
        vfunc_parse_error_response(
            operation_type: OperationType,
            status: number,
            reason_phrase: string,
            response_body: string,
            length: number,
        ): void;
    }

    module YouTubeState {
        // Constructor properties interface

        interface ConstructorProps extends Parsable.ConstructorProps {
            help_uri: string;
            helpUri: string;
            message: string;
            name: string;
            reason_code: string;
            reasonCode: string;
        }
    }

    /**
     * All the fields in the #GDataYouTubeState structure are private and should never be accessed directly.
     */
    class YouTubeState extends Parsable {
        static $gtype: GObject.GType<YouTubeState>;

        // Properties

        /**
         * A URI for a YouTube Help Center page that may help the developer or the video owner to diagnose
         * the reason that an upload failed or was rejected.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get help_uri(): string;
        /**
         * A URI for a YouTube Help Center page that may help the developer or the video owner to diagnose
         * the reason that an upload failed or was rejected.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get helpUri(): string;
        /**
         * A human-readable description of why the video failed to upload.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get message(): string;
        /**
         * The name of the status of the unpublished video. Valid values are: "processing", "restricted", "deleted", "rejected" and "failed".
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get name(): string;
        /**
         * The reason code explaining why the video failed to upload.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get reason_code(): string;
        /**
         * The reason code explaining why the video failed to upload.
         *
         * For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/youtube/2.0/reference.html#youtube_data_api_tag_yt:state">online documentation</ulink>.
         */
        get reasonCode(): string;

        // Constructors

        constructor(properties?: Partial<YouTubeState.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        // Methods

        /**
         * Gets the #GDataYouTubeState:help-uri property.
         * @returns the help URI, or %NULL
         */
        get_help_uri(): string;
        /**
         * Gets the #GDataYouTubeState:message property.
         * @returns the status message, or %NULL
         */
        get_message(): string;
        /**
         * Gets the #GDataYouTubeState:name property.
         * @returns the status name
         */
        get_name(): string;
        /**
         * Gets the #GDataYouTubeState:reason-code property.
         * @returns the status reason code, or %NULL
         */
        get_reason_code(): string;
    }

    module YouTubeVideo {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps, Commentable.ConstructorProps {
            aspect_ratio: string;
            aspectRatio: string;
            average_rating: number;
            averageRating: number;
            category: MediaCategory;
            description: string;
            duration: number;
            favorite_count: number;
            favoriteCount: number;
            is_private: boolean;
            isPrivate: boolean;
            keywords: string[];
            latitude: number;
            location: string;
            longitude: number;
            max_rating: number;
            maxRating: number;
            min_rating: number;
            minRating: number;
            player_uri: string;
            playerUri: string;
            rating_count: number;
            ratingCount: number;
            recorded: number;
            state: YouTubeState;
            uploaded: number;
            view_count: number;
            viewCount: number;
        }
    }

    /**
     * All the fields in the #GDataYouTubeVideo structure are private and should never be accessed directly.
     */
    class YouTubeVideo extends Entry implements Commentable {
        static $gtype: GObject.GType<YouTubeVideo>;

        // Properties

        /**
         * The aspect ratio of the video. A %NULL value means the aspect ratio is unknown (it could still be a widescreen video). A value of
         * %GDATA_YOUTUBE_ASPECT_RATIO_WIDESCREEN means the video is definitely widescreen.
         */
        get aspect_ratio(): string;
        set aspect_ratio(val: string);
        /**
         * The aspect ratio of the video. A %NULL value means the aspect ratio is unknown (it could still be a widescreen video). A value of
         * %GDATA_YOUTUBE_ASPECT_RATIO_WIDESCREEN means the video is definitely widescreen.
         */
        get aspectRatio(): string;
        set aspectRatio(val: string);
        /**
         * The average rating of the video, over all the ratings it's received.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get average_rating(): number;
        /**
         * The average rating of the video, over all the ratings it's received.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get averageRating(): number;
        /**
         * Specifies a genre or developer tag that describes the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.categoryId">online documentation</ulink>.
         */
        get category(): MediaCategory;
        set category(val: MediaCategory);
        /**
         * A summary or description of the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.description">online documentation</ulink>.
         */
        get description(): string;
        set description(val: string);
        /**
         * The duration of the video in seconds.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#contentDetails.duration">online documentation</ulink>.
         */
        get duration(): number;
        /**
         * The number of users who have added the video to their favorites.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.favoriteCount">online documentation</ulink>.
         */
        get favorite_count(): number;
        /**
         * The number of users who have added the video to their favorites.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.favoriteCount">online documentation</ulink>.
         */
        get favoriteCount(): number;
        get is_private(): boolean;
        set is_private(val: boolean);
        get isPrivate(): boolean;
        set isPrivate(val: boolean);
        /**
         * A %NULL-terminated array of words associated with the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.tags[]">online documentation</ulink>.
         */
        get keywords(): string[];
        set keywords(val: string[]);
        /**
         * The location as a latitude coordinate associated with this video. Valid latitudes range from <code class="literal">-90.0</code>
         * to <code class="literal">90.0</code> inclusive. Set to a value
         * outside this range to unset the location.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/youtube/v3/docs/videos#recordingDetails.location.latitude">
         * online documentation</ulink>.
         */
        get latitude(): number;
        set latitude(val: number);
        /**
         * Descriptive text about the location where the video was taken.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#recordingDetails.locationDescription">online documentation</ulink>.
         */
        get location(): string;
        set location(val: string);
        /**
         * The location as a longitude coordinate associated with this video. Valid longitudes range from <code class="literal">-180.0</code>
         * to <code class="literal">180.0</code> inclusive. Set to a value
         * outside this range to unset the location.
         *
         * For more information, see the
         * <ulink type="http" url="https://developers.google.com/youtube/v3/docs/videos#recordingDetails.location.longitude">
         * online documentation</ulink>.
         */
        get longitude(): number;
        set longitude(val: number);
        /**
         * The maximum allowed rating for the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get max_rating(): number;
        /**
         * The maximum allowed rating for the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get maxRating(): number;
        /**
         * The minimum allowed rating for the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get min_rating(): number;
        /**
         * The minimum allowed rating for the video.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get minRating(): number;
        /**
         * A URI for a browser-based media player for the full-length video (i.e. the video's page on YouTube).
         */
        get player_uri(): string;
        /**
         * A URI for a browser-based media player for the full-length video (i.e. the video's page on YouTube).
         */
        get playerUri(): string;
        /**
         * The number of times the video has been rated.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get rating_count(): number;
        /**
         * The number of times the video has been rated.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.likeCount">online documentation</ulink>.
         */
        get ratingCount(): number;
        /**
         * Specifies the time the video was originally recorded.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#recordingDetails.recordingDate">online documentation</ulink>.
         */
        get recorded(): number;
        set recorded(val: number);
        /**
         * Information describing the state of the video. If this is non-%NULL, the video is not playable.
         * It points to a #GDataYouTubeState.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#status.uploadStatus">online documentation</ulink>.
         */
        get state(): YouTubeState;
        /**
         * Specifies the time the video was originally uploaded to YouTube.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.publishedAt">online documentation</ulink>.
         */
        get uploaded(): number;
        /**
         * The number of times the video has been viewed.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.viewCount">online documentation</ulink>.
         */
        get view_count(): number;
        /**
         * The number of times the video has been viewed.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#statistics.viewCount">online documentation</ulink>.
         */
        get viewCount(): number;

        // Constructors

        constructor(properties?: Partial<YouTubeVideo.ConstructorProps>, ...args: any[]);

        _init(...args: any[]): void;

        static ['new'](id?: string | null): YouTubeVideo;

        // Static methods

        /**
         * Extracts a video ID from a YouTube video player URI. The video ID is in the same form as returned by
         * gdata_youtube_video_get_video_id(), and the `video_uri` should be in the same form as returned by
         * gdata_youtube_video_get_player_uri().
         *
         * The function will validate whether the URI actually points to a hostname containing <literal>youtube</literal>
         * (e.g. <literal>youtube.com</literal>), and will return %NULL if it doesn't.
         *
         * For example:
         * <informalexample><programlisting>
         * video_id = gdata_youtube_video_get_video_id_from_uri ("http://www.youtube.com/watch?v=BH_vwsyCrTc&feature=featured");
         * g_message ("Video ID: %s", video_id); /<!-- -->* Should print: BH_vwsyCrTc *<!-- -->/
         * g_free (video_id);
         * </programlisting></informalexample>
         * @param video_uri a YouTube video player URI
         */
        static get_video_id_from_uri(video_uri: string): string;

        // Methods

        /**
         * Gets the permission associated with the given `action` on the #GDataYouTubeVideo. If the given `action`
         * doesn't have a permission set on the video, %GDATA_YOUTUBE_PERMISSION_DENIED is returned.
         * @param action the action whose permission should be returned
         * @returns the permission associated with @action, or %GDATA_YOUTUBE_PERMISSION_DENIED
         */
        get_access_control(action: string): YouTubePermission;
        /**
         * Gets the #GDataYouTubeVideo:aspect-ratio property.
         * @returns the aspect ratio property, or %NULL
         */
        get_aspect_ratio(): string;
        /**
         * Gets the #GDataYouTubeVideo:category property.
         * @returns a #GDataMediaCategory giving the video's single and mandatory category
         */
        get_category(): MediaCategory;
        /**
         * Gets the #GDataYouTubeVideo:latitude and #GDataYouTubeVideo:longitude properties, setting the out parameters to them. If either latitude or
         * longitude is %NULL, that parameter will not be set. If the coordinates are unset, `latitude` and `longitude` will be set to %G_MAXDOUBLE.
         */
        get_coordinates(): [number, number];
        /**
         * Gets the #GDataYouTubeVideo:description property.
         * @returns the video's long text description, or %NULL
         */
        get_description(): string;
        /**
         * Gets the #GDataYouTubeVideo:duration property.
         * @returns the video duration in seconds, or <code class="literal">0</code> if unknown
         */
        get_duration(): number;
        /**
         * Gets the #GDataYouTubeVideo:favorite-count property.
         * @returns the number of users who have added the video to their favorites list
         */
        get_favorite_count(): number;
        /**
         * Gets the #GDataYouTubeVideo:keywords property.
         * @returns a %NULL-terminated array of words associated with the video
         */
        get_keywords(): string[];
        /**
         * Gets the #GDataYouTubeVideo:location property.
         * @returns a string describing the video's location, or %NULL
         */
        get_location(): string;
        /**
         * Returns the rating of the given type for the video, if one exists. For example, this could be a film rating awarded by the MPAA; or a simple
         * rating specifying whether the video contains adult content.
         *
         * The valid values for `rating_type` are: %GDATA_YOUTUBE_RATING_TYPE_MPAA and %GDATA_YOUTUBE_RATING_TYPE_V_CHIP.
         * Further values may be added in future; if an unknown rating type is passed to the function, %NULL will be returned.
         *
         * The possible return values depend on what's passed to `rating_type`. Valid values for each rating type are listed in the documentation for the
         * rating types.
         * @param rating_type the type of rating to retrieve
         * @returns the rating of the video for the given @rating_type, or %NULL if the video isn't rated with that type (or the type is unknown)
         */
        get_media_rating(rating_type: string): string;
        /**
         * Gets the #GDataYouTubeVideo:player-uri property.
         * @returns a URI where the video is playable in a web browser, or %NULL
         */
        get_player_uri(): string;
        /**
         * Gets various properties of the ratings on the video.
         *
         * Note that this property may not be retrieved when querying for multiple
         * videos at once, but is guaranteed to be retrieved when querying with
         * gdata_service_query_single_entry_async().
         */
        get_rating(): [number, number, number, number];
        /**
         * Gets the #GDataYouTubeVideo:recorded property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the video was recorded, or <code class="literal">-1</code>
         */
        get_recorded(): number;
        /**
         * Gets the #GDataYouTubeVideo:state property.
         *
         * For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#status.uploadStatus">online documentation</ulink>.
         * @returns a #GDataYouTubeState showing the state of the video, or %NULL
         */
        get_state(): YouTubeState;
        /**
         * Gets a list of the thumbnails available for the video.
         * @returns a #GList of #GDataMediaThumbnails, or %NULL
         */
        get_thumbnails(): MediaThumbnail[];
        /**
         * Gets the #GDataYouTubeVideo:uploaded property. If the property is unset, <code class="literal">-1</code> will be returned.
         * @returns the UNIX timestamp for the time the video was uploaded, or <code class="literal">-1</code>
         */
        get_uploaded(): number;
        /**
         * Gets the #GDataYouTubeVideo:view-count property.
         * @returns the number of times the video has been viewed
         */
        get_view_count(): number;
        /**
         * Checks whether viewing of the video is restricted in `country,` either by its content rating, or by the request of the producer.
         * The return value from this function is purely informational, and no obligation is assumed.
         * @param country an ISO 3166 two-letter country code to check
         * @returns %TRUE if the video is restricted in @country, %FALSE otherwise
         */
        is_restricted_in_country(country: string): boolean;
        /**
         * Sets the permission associated with `action` on the #GDataYouTubeVideo, allowing restriction or derestriction of various
         * operations on YouTube videos.
         *
         * Note that only %GDATA_YOUTUBE_ACTION_RATE and %GDATA_YOUTUBE_ACTION_COMMENT actions can have the %GDATA_YOUTUBE_PERMISSION_MODERATED permission.
         * @param action the action whose permission is being set
         * @param permission the permission to give to the action
         */
        set_access_control(action: string, permission: YouTubePermission): void;
        /**
         * Sets the #GDataYouTubeVideo:aspect-ratio property to specify the video's aspect ratio.
         * If `aspect_ratio` is %NULL, the property will be unset.
         * @param aspect_ratio the aspect ratio property, or %NULL
         */
        set_aspect_ratio(aspect_ratio?: string | null): void;
        /**
         * Sets the #GDataYouTubeVideo:category property to the new category, `category,` and increments its reference count.
         *
         * `category` must not be %NULL. For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.categoryId">online documentation</ulink>.
         * @param category a new #GDataMediaCategory
         */
        set_category(category: MediaCategory): void;
        /**
         * Sets the #GDataYouTubeVideo:latitude and #GDataYouTubeVideo:longitude properties to `latitude` and `longitude` respectively.
         * @param latitude the video's new latitude coordinate, or %G_MAXDOUBLE
         * @param longitude the video's new longitude coordinate, or %G_MAXDOUBLE
         */
        set_coordinates(latitude: number, longitude: number): void;
        /**
         * Sets the #GDataYouTubeVideo:description property to the new description, `description`.
         *
         * Set `description` to %NULL to unset the video's description.
         * @param description the video's new description, or %NULL
         */
        set_description(description?: string | null): void;
        /**
         * Sets the #GDataYouTubeVideo:is-private property to decide whether the video is publicly viewable.
         * @param is_private whether the video is private
         */
        set_is_private(is_private: boolean): void;
        /**
         * Sets the #GDataYouTubeVideo:keywords property to the new keyword list, `keywords`.
         *
         * `keywords` must not be %NULL. For more information, see the <ulink type="http"
         * url="https://developers.google.com/youtube/v3/docs/videos#snippet.tags[]">online documentation</ulink>.
         * @param keywords a new %NULL-terminated array of keywords
         */
        set_keywords(keywords: string[]): void;
        /**
         * Sets the #GDataYouTubeVideo:location property to the new location string, `location`.
         *
         * Set `location` to %NULL to unset the property in the video.
         * @param location a new location, or %NULL
         */
        set_location(location?: string | null): void;
        /**
         * Sets the #GDataYouTubeVideo:recorded property to the new recorded time, `recorded`.
         *
         * Set `recorded` to <code class="literal">-1</code> to unset the video's recorded time.
         * @param recorded the video's new recorded time, or <code class="literal">-1</code>
         */
        set_recorded(recorded: number): void;

        // Inherited properties
        /**
         * The content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content(): string;
        set content(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get content_uri(): string;
        set content_uri(val: string);
        /**
         * A URI pointing to the location of the content of the entry. This is mutually exclusive with #GDataEntry:content.
         *
         * For more information, see the
         * <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.content">Atom specification</ulink>.
         */
        get contentUri(): string;
        set contentUri(val: string);
        /**
         * An identifier for a particular version of the entry. This changes every time the entry on the server changes, and can be used
         * for conditional retrieval and locking.
         *
         * For more information, see the <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">
         * GData specification</ulink>.
         */
        get etag(): string;
        /**
         * A permanent, universally unique identifier for the entry, in IRI form. This is %NULL for new entries (i.e. ones which haven't yet been
         * inserted on the server, created with gdata_entry_new()), and a non-empty IRI string for all other entries.
         *
         * For more information, see the <ulink type="http" url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.id">
         * Atom specification</ulink>.
         */
        get id(): string;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get is_inserted(): boolean;
        /**
         * Whether the entry has been inserted on the server. This is %FALSE for entries which have just been created using gdata_entry_new() and
         * %TRUE for entries returned from the server by queries. It is set to %TRUE when an entry is inserted using gdata_service_insert_entry().
         */
        get isInserted(): boolean;
        /**
         * The date and time the entry was first published or made available.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.published">Atom specification</ulink>.
         */
        get published(): number;
        /**
         * The ownership rights pertaining to the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.rights">Atom specification</ulink>.
         */
        get rights(): string;
        set rights(val: string);
        /**
         * A short summary, abstract, or excerpt of the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.summary">Atom specification</ulink>.
         */
        get summary(): string;
        set summary(val: string);
        /**
         * A human-readable title for the entry.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.title">Atom specification</ulink>.
         */
        get title(): string;
        set title(val: string);
        /**
         * The date and time when the entry was most recently updated significantly.
         *
         * For more information, see the <ulink type="http"
         * url="http://www.atomenabled.org/developers/syndication/atom-format-spec.php#element.updated">Atom specification</ulink>.
         */
        get updated(): number;

        // Inherited methods
        /**
         * Deletes `comment` from the #GDataCommentable.
         *
         * If the given `comment` isn't deletable (either because the service doesn't support deleting comments at all, or because this particular comment
         * is not deletable due to having insufficient permissions), %GDATA_SERVICE_ERROR_FORBIDDEN will be set in `error` and %FALSE will be returned.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous comment deletion operation started with gdata_commentable_delete_comment_async().
         * @param result a #GAsyncResult
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment_finish(result: Gio.AsyncResult): boolean;
        /**
         * Adds `comment` to the #GDataCommentable.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): Comment | null;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Comment | null>;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Comment | null> | void;
        /**
         * Finishes an asynchronous comment insertion operation started with gdata_commentable_insert_comment_async().
         * @param result a #GAsyncResult
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment_finish(result: Gio.AsyncResult): Comment | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN. This is in
         * contrast to if it does support commenting but hasn't had any comments added yet, in which case an empty #GDataFeed will be returned and no error
         * will be set.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed | null>;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query: Query | null,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed | null> | void;
        /**
         * Finishes an asynchronous comment query operation started with gdata_commentable_query_comments_async().
         * @param result a #GAsyncResult
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments_finish(result: Gio.AsyncResult): Feed | null;
        vfunc_get_insert_comment_uri(comment: Comment): string;
        vfunc_get_query_comments_uri(): string;
        vfunc_is_comment_deletable(comment: Comment): boolean;
        /**
         * Adds `author` to the list of authors in the given #GDataEntry and increments its reference count.
         *
         * Duplicate authors will not be added to the list.
         * @param author a #GDataAuthor to add
         */
        add_author(author: Author): void;
        /**
         * Adds `category` to the list of categories in the given #GDataEntry, and increments its reference count.
         *
         * Duplicate categories will not be added to the list.
         * @param category a #GDataCategory to add
         */
        add_category(category: Category): void;
        /**
         * Adds `_link` to the list of links in the given #GDataEntry and increments its reference count.
         *
         * Duplicate links will not be added to the list.
         * @param _link a #GDataLink to add
         */
        add_link(_link: Link): void;
        /**
         * Gets a list of the #GDataAuthors for this entry.
         * @returns a #GList of #GDataAuthors
         */
        get_authors(): Author[];
        /**
         * Gets a list of the #GDataCategorys containing this entry.
         * @returns a #GList of #GDataCategorys
         */
        get_categories(): Category[];
        /**
         * Returns the textual content in this entry. If the content in this entry is pointed to by a URI, %NULL will be returned; the content URI will be
         * returned by gdata_entry_get_content_uri().
         * @returns the entry's content, or %NULL
         */
        get_content(): string;
        /**
         * Returns a URI pointing to the content of this entry. If the content in this entry is stored directly, %NULL will be returned; the content will be
         * returned by gdata_entry_get_content().
         * @returns a URI pointing to the entry's content, or %NULL
         */
        get_content_uri(): string;
        /**
         * Returns the ETag of the entry; a unique identifier for each version of the entry. For more information, see the
         * <ulink type="http" url="http://code.google.com/apis/gdata/docs/2.0/reference.html#ResourceVersioning">online documentation</ulink>.
         *
         * The ETag will never be empty; it's either %NULL or a valid ETag.
         * @returns the entry's ETag, or %NULL
         */
        get_etag(): string | null;
        /**
         * Returns the URN ID of the entry; a unique and permanent identifier for the object the entry represents.
         *
         * The ID may be %NULL if and only if the #GDataEntry has been newly created, and hasn't yet been inserted on the server.
         * @returns the entry's ID, or %NULL
         */
        get_id(): string | null;
        /**
         * Gets the time the entry was originally published.
         * @returns the UNIX timestamp for the original publish time of the entry
         */
        get_published(): number;
        /**
         * Returns the rights pertaining to the entry, or %NULL if not set.
         * @returns the entry's rights information
         */
        get_rights(): string;
        /**
         * Returns the summary of the entry.
         * @returns the entry's summary, or %NULL
         */
        get_summary(): string;
        /**
         * Returns the title of the entry. This will never be %NULL, but may be an empty string.
         * @returns the entry's title
         */
        get_title(): string;
        /**
         * Gets the time the entry was last updated.
         * @returns the UNIX timestamp for the last update of the entry
         */
        get_updated(): number;
        /**
         * Looks up a link by relation type from the list of links in the entry. If the link has one of the standard Atom relation types,
         * use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * In the rare event of requiring a list of links with the same `rel` value, use gdata_entry_look_up_links().
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired link
         * @returns a #GDataLink, or %NULL if one was not found
         */
        look_up_link(rel: string): Link;
        /**
         * Looks up a list of links by relation type from the list of links in the entry. If the links have one of the standard Atom
         * relation types, use one of the defined `rel` values, instead of a static string. e.g. %GDATA_LINK_EDIT or %GDATA_LINK_SELF.
         *
         * If you will only use the first link found, consider calling gdata_entry_look_up_link() instead.
         * @param rel the value of the <structfield>rel</structfield> attribute of the desired links
         * @returns a #GList of #GDataLinks, or %NULL if none were found; free the list with g_list_free()
         */
        look_up_links(rel: string): Link[];
        /**
         * Removes `_link` from the list of links in the given #GDataEntry and decrements its reference count (since the #GDataEntry held a reference to it
         * while it was in the list).
         * @param _link a #GDataLink to remove
         * @returns %TRUE if @_link was found in the #GDataEntry and removed, %FALSE if it was not found
         */
        remove_link(_link: Link): boolean;
        /**
         * Sets the entry's content to `content`. This unsets #GDataEntry:content-uri.
         * @param content the new content for the entry, or %NULL
         */
        set_content(content?: string | null): void;
        /**
         * Sets the URI pointing to the entry's content to `content`. This unsets #GDataEntry:content.
         * @param content_uri the new URI pointing to the content for the entry, or %NULL
         */
        set_content_uri(content_uri?: string | null): void;
        /**
         * Sets the rights for this entry.
         * @param rights the new rights, or %NULL
         */
        set_rights(rights?: string | null): void;
        /**
         * Sets the summary of the entry.
         * @param summary the new entry summary, or %NULL
         */
        set_summary(summary?: string | null): void;
        /**
         * Sets the title of the entry.
         * @param title the new entry title, or %NULL
         */
        set_title(title?: string | null): void;
    }

    type APPCategoriesClass = typeof APPCategories;
    abstract class APPCategoriesPrivate {
        static $gtype: GObject.GType<APPCategoriesPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type AccessHandlerIface = typeof AccessHandler;
    type AccessRuleClass = typeof AccessRule;
    abstract class AccessRulePrivate {
        static $gtype: GObject.GType<AccessRulePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type AuthorClass = typeof Author;
    abstract class AuthorPrivate {
        static $gtype: GObject.GType<AuthorPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type AuthorizationDomainClass = typeof AuthorizationDomain;
    abstract class AuthorizationDomainPrivate {
        static $gtype: GObject.GType<AuthorizationDomainPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type AuthorizerInterface = typeof Authorizer;
    type BatchOperationClass = typeof BatchOperation;
    abstract class BatchOperationPrivate {
        static $gtype: GObject.GType<BatchOperationPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type BatchableIface = typeof Batchable;
    type CalendarAccessRuleClass = typeof CalendarAccessRule;
    type CalendarCalendarClass = typeof CalendarCalendar;
    abstract class CalendarCalendarPrivate {
        static $gtype: GObject.GType<CalendarCalendarPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CalendarEventClass = typeof CalendarEvent;
    abstract class CalendarEventPrivate {
        static $gtype: GObject.GType<CalendarEventPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CalendarFeedClass = typeof CalendarFeed;
    abstract class CalendarFeedPrivate {
        static $gtype: GObject.GType<CalendarFeedPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CalendarQueryClass = typeof CalendarQuery;
    abstract class CalendarQueryPrivate {
        static $gtype: GObject.GType<CalendarQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CalendarServiceClass = typeof CalendarService;
    abstract class CalendarServicePrivate {
        static $gtype: GObject.GType<CalendarServicePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CategoryClass = typeof Category;
    abstract class CategoryPrivate {
        static $gtype: GObject.GType<CategoryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    /**
     * Describes a color, such as used in the Google Calendar interface to
     * differentiate calendars.
     */
    class Color {
        static $gtype: GObject.GType<Color>;

        // Fields

        red: number;
        green: number;
        blue: number;

        // Constructors

        constructor(
            properties?: Partial<{
                red: number;
                green: number;
                blue: number;
            }>,
        );
        _init(...args: any[]): void;

        // Static methods

        /**
         * Parses `hexadecimal` and returns a #GDataColor describing it in `color`.
         *
         * `hexadecimal` should be in the form <literal>#<replaceable>rr</replaceable><replaceable>gg</replaceable><replaceable>bb</replaceable></literal>,
         * where <replaceable>rr</replaceable> is a two-digit hexadecimal red intensity value, <replaceable>gg</replaceable> is green
         * and <replaceable>bb</replaceable> is blue. The hash is optional.
         * @param hexadecimal a hexadecimal color string
         */
        static from_hexadecimal(hexadecimal: string): [boolean, Color];

        // Methods

        /**
         * Returns a string describing `color` in hexadecimal form; in the form <literal>#<replaceable>rr</replaceable><replaceable>gg</replaceable>
         * <replaceable>bb</replaceable></literal>, where <replaceable>rr</replaceable> is a two-digit hexadecimal red intensity value,
         * <replaceable>gg</replaceable> is green and <replaceable>bb</replaceable> is blue. The hash is always present.
         * @returns the color string; free with g_free()
         */
        to_hexadecimal(): string;
    }

    type CommentClass = typeof Comment;
    abstract class CommentPrivate {
        static $gtype: GObject.GType<CommentPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type CommentableInterface = typeof Commentable;
    type ComparableIface = typeof Comparable;
    type DocumentsAccessRuleClass = typeof DocumentsAccessRule;
    type DocumentsDocumentClass = typeof DocumentsDocument;
    abstract class DocumentsDocumentPrivate {
        static $gtype: GObject.GType<DocumentsDocumentPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsDrawingClass = typeof DocumentsDrawing;
    abstract class DocumentsDrawingPrivate {
        static $gtype: GObject.GType<DocumentsDrawingPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsDriveClass = typeof DocumentsDrive;
    type DocumentsDriveQueryClass = typeof DocumentsDriveQuery;
    type DocumentsEntryClass = typeof DocumentsEntry;
    abstract class DocumentsEntryPrivate {
        static $gtype: GObject.GType<DocumentsEntryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsFeedClass = typeof DocumentsFeed;
    abstract class DocumentsFeedPrivate {
        static $gtype: GObject.GType<DocumentsFeedPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsFolderClass = typeof DocumentsFolder;
    abstract class DocumentsFolderPrivate {
        static $gtype: GObject.GType<DocumentsFolderPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsMetadataClass = typeof DocumentsMetadata;
    abstract class DocumentsMetadataPrivate {
        static $gtype: GObject.GType<DocumentsMetadataPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsPdfClass = typeof DocumentsPdf;
    abstract class DocumentsPdfPrivate {
        static $gtype: GObject.GType<DocumentsPdfPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsPresentationClass = typeof DocumentsPresentation;
    abstract class DocumentsPresentationPrivate {
        static $gtype: GObject.GType<DocumentsPresentationPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsPropertyClass = typeof DocumentsProperty;
    abstract class DocumentsPropertyPrivate {
        static $gtype: GObject.GType<DocumentsPropertyPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsQueryClass = typeof DocumentsQuery;
    abstract class DocumentsQueryPrivate {
        static $gtype: GObject.GType<DocumentsQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsServiceClass = typeof DocumentsService;
    abstract class DocumentsServicePrivate {
        static $gtype: GObject.GType<DocumentsServicePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsSpreadsheetClass = typeof DocumentsSpreadsheet;
    abstract class DocumentsSpreadsheetPrivate {
        static $gtype: GObject.GType<DocumentsSpreadsheetPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsTextClass = typeof DocumentsText;
    abstract class DocumentsTextPrivate {
        static $gtype: GObject.GType<DocumentsTextPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DocumentsUploadQueryClass = typeof DocumentsUploadQuery;
    abstract class DocumentsUploadQueryPrivate {
        static $gtype: GObject.GType<DocumentsUploadQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type DownloadStreamClass = typeof DownloadStream;
    abstract class DownloadStreamPrivate {
        static $gtype: GObject.GType<DownloadStreamPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type EntryClass = typeof Entry;
    abstract class EntryPrivate {
        static $gtype: GObject.GType<EntryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type FeedClass = typeof Feed;
    abstract class FeedPrivate {
        static $gtype: GObject.GType<FeedPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactCalendarClass = typeof GContactCalendar;
    abstract class GContactCalendarPrivate {
        static $gtype: GObject.GType<GContactCalendarPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactEventClass = typeof GContactEvent;
    abstract class GContactEventPrivate {
        static $gtype: GObject.GType<GContactEventPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactExternalIDClass = typeof GContactExternalID;
    abstract class GContactExternalIDPrivate {
        static $gtype: GObject.GType<GContactExternalIDPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactJotClass = typeof GContactJot;
    abstract class GContactJotPrivate {
        static $gtype: GObject.GType<GContactJotPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactLanguageClass = typeof GContactLanguage;
    abstract class GContactLanguagePrivate {
        static $gtype: GObject.GType<GContactLanguagePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactRelationClass = typeof GContactRelation;
    abstract class GContactRelationPrivate {
        static $gtype: GObject.GType<GContactRelationPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GContactWebsiteClass = typeof GContactWebsite;
    abstract class GContactWebsitePrivate {
        static $gtype: GObject.GType<GContactWebsitePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDEmailAddressClass = typeof GDEmailAddress;
    abstract class GDEmailAddressPrivate {
        static $gtype: GObject.GType<GDEmailAddressPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDIMAddressClass = typeof GDIMAddress;
    abstract class GDIMAddressPrivate {
        static $gtype: GObject.GType<GDIMAddressPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDNameClass = typeof GDName;
    abstract class GDNamePrivate {
        static $gtype: GObject.GType<GDNamePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDOrganizationClass = typeof GDOrganization;
    abstract class GDOrganizationPrivate {
        static $gtype: GObject.GType<GDOrganizationPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDPhoneNumberClass = typeof GDPhoneNumber;
    abstract class GDPhoneNumberPrivate {
        static $gtype: GObject.GType<GDPhoneNumberPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDPostalAddressClass = typeof GDPostalAddress;
    abstract class GDPostalAddressPrivate {
        static $gtype: GObject.GType<GDPostalAddressPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDReminderClass = typeof GDReminder;
    abstract class GDReminderPrivate {
        static $gtype: GObject.GType<GDReminderPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDWhenClass = typeof GDWhen;
    abstract class GDWhenPrivate {
        static $gtype: GObject.GType<GDWhenPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDWhereClass = typeof GDWhere;
    abstract class GDWherePrivate {
        static $gtype: GObject.GType<GDWherePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GDWhoClass = typeof GDWho;
    abstract class GDWhoPrivate {
        static $gtype: GObject.GType<GDWhoPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GeneratorClass = typeof Generator;
    abstract class GeneratorPrivate {
        static $gtype: GObject.GType<GeneratorPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type GoaAuthorizerClass = typeof GoaAuthorizer;
    abstract class GoaAuthorizerPrivate {
        static $gtype: GObject.GType<GoaAuthorizerPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type LinkClass = typeof Link;
    abstract class LinkPrivate {
        static $gtype: GObject.GType<LinkPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type MediaCategoryClass = typeof MediaCategory;
    abstract class MediaCategoryPrivate {
        static $gtype: GObject.GType<MediaCategoryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type MediaContentClass = typeof MediaContent;
    abstract class MediaContentPrivate {
        static $gtype: GObject.GType<MediaContentPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type MediaCreditClass = typeof MediaCredit;
    abstract class MediaCreditPrivate {
        static $gtype: GObject.GType<MediaCreditPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type MediaThumbnailClass = typeof MediaThumbnail;
    abstract class MediaThumbnailPrivate {
        static $gtype: GObject.GType<MediaThumbnailPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type OAuth2AuthorizerClass = typeof OAuth2Authorizer;
    abstract class OAuth2AuthorizerPrivate {
        static $gtype: GObject.GType<OAuth2AuthorizerPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type ParsableClass = typeof Parsable;
    abstract class ParsablePrivate {
        static $gtype: GObject.GType<ParsablePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type PicasaWebAlbumClass = typeof PicasaWebAlbum;
    abstract class PicasaWebAlbumPrivate {
        static $gtype: GObject.GType<PicasaWebAlbumPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type PicasaWebCommentClass = typeof PicasaWebComment;
    abstract class PicasaWebCommentPrivate {
        static $gtype: GObject.GType<PicasaWebCommentPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type PicasaWebFeedClass = typeof PicasaWebFeed;
    type PicasaWebFileClass = typeof PicasaWebFile;
    abstract class PicasaWebFilePrivate {
        static $gtype: GObject.GType<PicasaWebFilePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type PicasaWebQueryClass = typeof PicasaWebQuery;
    abstract class PicasaWebQueryPrivate {
        static $gtype: GObject.GType<PicasaWebQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type PicasaWebServiceClass = typeof PicasaWebService;
    type PicasaWebUserClass = typeof PicasaWebUser;
    abstract class PicasaWebUserPrivate {
        static $gtype: GObject.GType<PicasaWebUserPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type QueryClass = typeof Query;
    abstract class QueryPrivate {
        static $gtype: GObject.GType<QueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type ServiceClass = typeof Service;
    abstract class ServicePrivate {
        static $gtype: GObject.GType<ServicePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type TasksQueryClass = typeof TasksQuery;
    abstract class TasksQueryPrivate {
        static $gtype: GObject.GType<TasksQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type TasksServiceClass = typeof TasksService;
    type TasksTaskClass = typeof TasksTask;
    abstract class TasksTaskPrivate {
        static $gtype: GObject.GType<TasksTaskPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type TasksTasklistClass = typeof TasksTasklist;
    type UploadStreamClass = typeof UploadStream;
    abstract class UploadStreamPrivate {
        static $gtype: GObject.GType<UploadStreamPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeCategoryClass = typeof YouTubeCategory;
    abstract class YouTubeCategoryPrivate {
        static $gtype: GObject.GType<YouTubeCategoryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeCommentClass = typeof YouTubeComment;
    abstract class YouTubeCommentPrivate {
        static $gtype: GObject.GType<YouTubeCommentPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeFeedClass = typeof YouTubeFeed;
    abstract class YouTubeFeedPrivate {
        static $gtype: GObject.GType<YouTubeFeedPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeQueryClass = typeof YouTubeQuery;
    abstract class YouTubeQueryPrivate {
        static $gtype: GObject.GType<YouTubeQueryPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeServiceClass = typeof YouTubeService;
    abstract class YouTubeServicePrivate {
        static $gtype: GObject.GType<YouTubeServicePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeStateClass = typeof YouTubeState;
    abstract class YouTubeStatePrivate {
        static $gtype: GObject.GType<YouTubeStatePrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    type YouTubeVideoClass = typeof YouTubeVideo;
    abstract class YouTubeVideoPrivate {
        static $gtype: GObject.GType<YouTubeVideoPrivate>;

        // Constructors

        _init(...args: any[]): void;
    }

    module AccessHandler {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {}
    }

    export interface AccessHandlerNamespace {
        $gtype: GObject.GType<AccessHandler>;
        prototype: AccessHandler;
    }
    interface AccessHandler extends Entry {
        // Methods

        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @returns a #GDataFeed of access control rules, or %NULL; unref with g_object_unref()
         */
        get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed. `self` and `service` are both reffed when this function is called, so can safely be unreffed after this function returns.
         *
         * For more details, see gdata_access_handler_get_rules(), which is the synchronous version of this function, and gdata_service_query_async(), which
         * is the base asynchronous query function.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_service_query_finish()
         * to get the results of the operation.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         * @param destroy_progress_user_data the function to call when @progress_callback will not be called any more, or %NULL. This function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it.
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        get_rules_async(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;

        // Virtual methods

        /**
         * Retrieves a #GDataFeed containing all the access rules which apply to the given #GDataAccessHandler. Only the owner of a #GDataAccessHandler may
         * view its rule feed.
         *
         * If `cancellable` is not %NULL, then the operation can be cancelled by triggering the `cancellable` object from another thread.
         * If the operation was cancelled, the error %G_IO_ERROR_CANCELLED will be returned.
         *
         * A %GDATA_SERVICE_ERROR_PROTOCOL_ERROR will be returned if the server indicates there is a problem with the query.
         *
         * For each rule in the response feed, `progress_callback` will be called in the main thread. If there was an error parsing the XML response,
         * a #GDataParserError will be returned.
         * @param service a #GDataService
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a rule is loaded, or %NULL
         */
        vfunc_get_rules(
            service: Service,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed;
    }

    export const AccessHandler: AccessHandlerNamespace;

    module Authorizer {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {}
    }

    export interface AuthorizerNamespace {
        $gtype: GObject.GType<Authorizer>;
        prototype: Authorizer;
    }
    interface Authorizer extends GObject.Object {
        // Methods

        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         * @returns %TRUE if the #GDataAuthorizer has been authorized to access @domain, %FALSE otherwise
         */
        is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        refresh_authorization_async(cancellable?: Gio.Cancellable | null): Promise<boolean>;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         * @returns %TRUE if an authorization refresh was attempted and was successful, %FALSE if a refresh wasn't attempted or was unsuccessful
         */
        refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;

        // Virtual methods

        /**
         * Returns whether the #GDataAuthorizer instance believes it's currently authorized to access the given `domain`. Note that this will not perform any
         * network requests, and will just look up the result in the #GDataAuthorizer's local cache of authorizations. This means that the result may be out
         * of date, as the server may have since invalidated the authorization. If the #GDataAuthorizer class supports timeouts and TTLs on authorizations,
         * they will not be taken into account; this method effectively returns whether the last successful authorization operation performed on the
         * #GDataAuthorizer included `domain` in the list of requested authorization domains.
         *
         * Note that %NULL may be passed as the #GDataAuthorizer, in which case %FALSE will always be returned, regardless of the `domain`. This is for
         * convenience of checking whether a domain is authorized by the #GDataAuthorizer returned by gdata_service_get_authorizer(), which may be %NULL.
         * For example:
         *
         * ```
         * if (gdata_authorizer_is_authorized_for_domain (gdata_service_get_authorizer (my_service), my_domain) == TRUE) {
         * 	/<!-- -->* Code to execute only if we're authorized for the given domain *<!-- -->/
         * }
         * ```
         *
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain to check against
         */
        vfunc_is_authorized_for_domain(domain: AuthorizationDomain): boolean;
        /**
         * Processes `message,` adding all the necessary extra headers and parameters to ensure that it's correctly authenticated and authorized under the
         * given `domain` for the online service. Basically, if a query is not processed by calling this method on it, it will be sent to the online service as
         * if it's a query from a non-logged-in user. Similarly, if the #GDataAuthorizer isn't authenticated or authorized (for `domain)`, no changes will
         * be made to the `message`.
         *
         * `domain` may be %NULL if the request doesn't require authorization.
         *
         * This modifies `message` in place.
         *
         * This method is thread safe.
         * @param domain the #GDataAuthorizationDomain the query falls under, or %NULL
         * @param message the query to process
         */
        vfunc_process_request(domain: AuthorizationDomain | null, message: Soup.Message): void;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. This should typically be called when a
         * #GDataService query returns %GDATA_SERVICE_ERROR_AUTHENTICATION_REQUIRED, and is already called transparently by methods such as
         * gdata_service_query() and gdata_service_insert_entry() (see their documentation for more details).
         *
         * If re-authorization is successful, it's guaranteed that by the time this method returns, the properties containing the relevant authorization
         * tokens on the #GDataAuthorizer instance will have been updated.
         *
         * If %FALSE is returned, `error` will be set if (and only if) it's due to a refresh being attempted and failing. If a refresh is not attempted, %FALSE
         * will be returned but `error` will not be set.
         *
         * If the #GDataAuthorizer has not been previously authenticated or authorized (using the class' specific methods), no authorization will be
         * attempted, %FALSE will be returned immediately and `error` will not be set.
         *
         * Some #GDataAuthorizer implementations may not support refreshing authorization tokens at all; for example if doing so requires user interaction.
         * %FALSE will be returned immediately in that case and `error` will not be set.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         */
        vfunc_refresh_authorization(cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Forces the #GDataAuthorizer to refresh any authorization tokens it holds with the online service. `self` and `cancellable` are reffed when this
         * method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_authorizer_refresh_authorization(), which is the synchronous version of this method. If the #GDataAuthorizer class
         * doesn't implement #GDataAuthorizerInterface.refresh_authorization_async but does implement #GDataAuthorizerInterface.refresh_authorization, the
         * latter will be called from a new thread to make it asynchronous.
         *
         * When the authorization refresh operation is finished, `callback` will be called. You can then call gdata_authorizer_refresh_authorization_finish()
         * to get the results of the operation.
         *
         * This method is thread safe.
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the authorization refresh operation is finished, or %NULL
         */
        vfunc_refresh_authorization_async(
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Finishes an asynchronous authorization refresh operation for the #GDataAuthorizer, as started with gdata_authorizer_refresh_authorization_async().
         *
         * This method is thread safe.
         * @param async_result a #GAsyncResult
         */
        vfunc_refresh_authorization_finish(async_result: Gio.AsyncResult): boolean;
    }

    export const Authorizer: AuthorizerNamespace;

    module Batchable {
        // Constructor properties interface

        interface ConstructorProps extends Service.ConstructorProps {}
    }

    export interface BatchableNamespace {
        $gtype: GObject.GType<Batchable>;
        prototype: Batchable;
    }
    interface Batchable extends Service {
        // Methods

        /**
         * Creates a new #GDataBatchOperation for the given #GDataBatchable service, and with the given `feed_uri`. `feed_uri` is normally the %GDATA_LINK_BATCH
         * link URI in the appropriate #GDataFeed from the service. If authorization will be required to perform any of the requests in the batch operation,
         * `domain` must be non-%NULL, and must be an authorization domain which covers all of the requests. Otherwise, `domain` may be %NULL if authorization
         * is not required.
         * @param domain the #GDataAuthorizationDomain to authorize the operation, or %NULL
         * @param feed_uri the URI to send the batch operation request to
         * @returns a new #GDataBatchOperation; unref with g_object_unref()
         */
        create_operation(domain: AuthorizationDomain | null, feed_uri: string): BatchOperation;
    }

    export const Batchable: BatchableNamespace;

    module Commentable {
        // Constructor properties interface

        interface ConstructorProps extends Entry.ConstructorProps {}
    }

    export interface CommentableNamespace {
        $gtype: GObject.GType<Commentable>;
        prototype: Commentable;
    }
    interface Commentable extends Entry {
        // Methods

        /**
         * Deletes `comment` from the #GDataCommentable.
         *
         * If the given `comment` isn't deletable (either because the service doesn't support deleting comments at all, or because this particular comment
         * is not deletable due to having insufficient permissions), %GDATA_SERVICE_ERROR_FORBIDDEN will be set in `error` and %FALSE will be returned.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): boolean;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<boolean>;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Deletes `comment` from the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after
         * this method returns.
         *
         * For more details, see gdata_commentable_delete_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_delete_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be deleted
         * @param comment_ a comment to be deleted
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        delete_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<boolean> | void;
        /**
         * Finishes an asynchronous comment deletion operation started with gdata_commentable_delete_comment_async().
         * @param result a #GAsyncResult
         * @returns %TRUE if the comment was successfully deleted, %FALSE otherwise
         */
        delete_comment_finish(result: Gio.AsyncResult): boolean;
        /**
         * Adds `comment` to the #GDataCommentable.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment(service: Service, comment_: Comment, cancellable?: Gio.Cancellable | null): Comment | null;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
        ): Promise<Comment | null>;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable: Gio.Cancellable | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Adds `comment` to the #GDataCommentable. `self,` `service` and `comment_` are all reffed when this method is called, so can safely be freed after this
         * method returns.
         *
         * For more details, see gdata_commentable_insert_comment(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_insert_comment_finish() to get the results of the
         * operation.
         * @param service a #GDataService with which the comment will be added
         * @param comment_ a new comment to be added to the #GDataCommentable
         * @param cancellable optional #GCancellable object, or %NULL
         * @param callback a #GAsyncReadyCallback to call when the operation is finished
         */
        insert_comment_async(
            service: Service,
            comment_: Comment,
            cancellable?: Gio.Cancellable | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Comment | null> | void;
        /**
         * Finishes an asynchronous comment insertion operation started with gdata_commentable_insert_comment_async().
         * @param result a #GAsyncResult
         * @returns the added #GDataComment, or %NULL; unref with g_object_unref()
         */
        insert_comment_finish(result: Gio.AsyncResult): Comment | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         *
         * If the #GDataCommentable doesn't support commenting, %NULL will be returned and `error` will be set to %GDATA_SERVICE_ERROR_FORBIDDEN. This is in
         * contrast to if it does support commenting but hasn't had any comments added yet, in which case an empty #GDataFeed will be returned and no error
         * will be set.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
        ): Feed | null;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
        ): Promise<Feed | null>;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query: Query | null,
            cancellable: Gio.Cancellable | null,
            progress_callback: QueryProgressCallback | null,
            destroy_progress_user_data: GLib.DestroyNotify | null,
            callback: Gio.AsyncReadyCallback<this> | null,
        ): void;
        /**
         * Retrieves a #GDataFeed containing the #GDataComments representing the comments on the #GDataCommentable which match the given `query`.
         * `self,` `service` and `query` are all reffed when this method is called, so can safely be freed after this method returns.
         *
         * For more details, see gdata_commentable_query_comments(), which is the synchronous version of this method.
         *
         * When the operation is finished, `callback` will be called. You can then call gdata_commentable_query_comments_finish() to get the results of the
         * operation.
         * @param service a #GDataService representing the service with which the object's comments will be manipulated
         * @param query a #GDataQuery with query parameters, or %NULL
         * @param cancellable optional #GCancellable object, or %NULL
         * @param progress_callback a #GDataQueryProgressCallback to call when a comment is loaded, or %NULL
         * @param destroy_progress_user_data a function to call when @progress_callback will not be called any more, or %NULL; this function will be called with @progress_user_data as a parameter and can be used to free any memory allocated for it
         * @param callback a #GAsyncReadyCallback to call when the query is finished
         */
        query_comments_async(
            service: Service,
            query?: Query | null,
            cancellable?: Gio.Cancellable | null,
            progress_callback?: QueryProgressCallback | null,
            destroy_progress_user_data?: GLib.DestroyNotify | null,
            callback?: Gio.AsyncReadyCallback<this> | null,
        ): Promise<Feed | null> | void;
        /**
         * Finishes an asynchronous comment query operation started with gdata_commentable_query_comments_async().
         * @param result a #GAsyncResult
         * @returns a #GDataFeed of #GDataComments, or %NULL; unref with g_object_unref()
         */
        query_comments_finish(result: Gio.AsyncResult): Feed | null;

        // Virtual methods

        vfunc_get_insert_comment_uri(comment: Comment): string;
        vfunc_get_query_comments_uri(): string;
        vfunc_is_comment_deletable(comment: Comment): boolean;
    }

    export const Commentable: CommentableNamespace;

    module Comparable {
        // Constructor properties interface

        interface ConstructorProps extends GObject.Object.ConstructorProps {}
    }

    export interface ComparableNamespace {
        $gtype: GObject.GType<Comparable>;
        prototype: Comparable;
    }
    interface Comparable extends GObject.Object {
        // Methods

        /**
         * Compares the two objects, returning <code class="literal">-1</code> if `self` is "less than" `other` by some metric, <code class="literal">0</code>
         * if they're equal, or <code class="literal">1</code> if `self` is "greater than" `other`.
         *
         * %NULL values are handled gracefully, with <code class="literal">0</code> returned if both `self` and `other` are %NULL,
         * <code class="literal">-1</code> if `self` is %NULL and <code class="literal">1</code> if `other` is %NULL.
         *
         * The `other` object must be of the same type as `self,` or of a type derived from `self'`s type.
         * @param other another #GDataComparable of the same type, or %NULL
         * @returns %TRUE on success, %FALSE otherwise
         */
        compare(other?: Comparable | null): number;

        // Virtual methods

        vfunc_compare_with(other: Comparable): number;
    }

    export const Comparable: ComparableNamespace;

    /**
     * Name of the imported GIR library
     * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L188
     */
    const __name__: string;
    /**
     * Version of the imported GIR library
     * `see` https://gitlab.gnome.org/GNOME/gjs/-/blob/master/gi/ns.cpp#L189
     */
    const __version__: string;
}

export default GData;

// END
