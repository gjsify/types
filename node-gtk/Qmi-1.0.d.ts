// @ts-nocheck

/*
 * Type Definitions for node-gtk (https://github.com/romgrk/node-gtk)
 *
 * These type definitions are automatically generated, do not edit them by hand.
 * If you found a bug fix it in ts-for-gir itself or create a bug report on https://github.com/sammydre/ts-for-gjs
 */
/**
 * Qmi-1.0
 */

import type Gio from './Gio-2.0';
import type GObject from './GObject-2.0';
import type GLib from './GLib-2.0';

export namespace Qmi {

/**
 * Common errors that may be reported by libqmi-glib.
 */
enum CoreError {
    /**
     * Operation failed.
     */
    FAILED,
    /**
     * Operation cannot be executed in the current state.
     */
    WRONGSTATE,
    /**
     * Operation timed out.
     */
    TIMEOUT,
    /**
     * Invalid arguments given.
     */
    INVALIDARGS,
    /**
     * QMI message is invalid.
     */
    INVALIDMESSAGE,
    /**
     * TLV not found.
     */
    TLVNOTFOUND,
    /**
     * TLV is too long.
     */
    TLVTOOLONG,
    /**
     * Not supported.
     */
    UNSUPPORTED,
    /**
     * TLV has no value. Empty TLVs are not a real error, so this error type is never generated. Since: 1.12. Deprecated: 1.22.
     */
    TLVEMPTY,
    /**
     * QMI message is unexpected. Since: 1.16.
     */
    UNEXPECTEDMESSAGE,
    /**
     * Invalid data found in the message. Since: 1.24.6.
     */
    INVALIDDATA,
}
/**
 * Controls whether the network port data format includes a QoS header or not.
 * Should normally be set to ABSENT.
 */
enum CtlDataFormat {
    /**
     * QoS header absent
     */
    ABSENT,
    /**
     * QoS header present
     */
    PRESENT,
}
/**
 * Determines the network port data format.
 */
enum CtlDataLinkProtocol {
    UNKNOWN,
    /**
     * data frames formatted as 802.3 Ethernet
     */
    TODO_802_3,
    /**
     * data frames are raw IP packets
     */
    RAW_IP,
}
/**
 * Data Endpoint Type.
 */
enum DataEndpointType {
    /**
     * Unknown. Since 1.30.
     */
    UNKNOWN,
    /**
     * High-speed inter-chip interface. Since 1.30.
     */
    HSIC,
    /**
     * High-speed USB.
     */
    HSUSB,
    /**
     * PCIe. Since: 1.28.
     */
    PCIE,
    /**
     * Embedded. Since 1.28.
     */
    EMBEDDED,
    /**
     * BAM/DMUX. Since 1.30.
     */
    BAM_DMUX,
    /**
     * Undefined.
     */
    UNDEFINED,
}
/**
 * Data format expected by the kernel.
 * 
 * <note><para>
 * This type is only applicable when using the qmi_wwan kernel driver.
 * </para></note>
 */
enum DeviceExpectedDataFormat {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * 802.3.
     */
    TODO_802_3,
    /**
     * Raw IP.
     */
    RAW_IP,
    /**
     * QMAP pass-through. Since 1.28.
     */
    QMAP_PASS_THROUGH,
}
/**
 * State of the service activation.
 */
enum DmsActivationState {
    /**
     * Service not activated.
     */
    NOT_ACTIVATED,
    /**
     * Service is activated.
     */
    ACTIVATED,
    /**
     * Connection in progress for automatic activation.
     */
    CONNECTING,
    /**
     * Connection connected for automatic activation.
     */
    CONNECTED,
    /**
     * OTASP security authenticated.
     */
    OTASP_AUTHENTICATED,
    /**
     * OTASP NAM downloaded.
     */
    OTASP_NAM,
    /**
     * OTASP MDN downloaded.
     */
    OTASP_MDN,
    /**
     * OTASP IMSI downloaded.
     */
    OTASP_IMSI,
    /**
     * OTASP PRL downloaded.
     */
    OTASP_PRL,
    /**
     * OTASP SPC downloaded.
     */
    OTASP_SPC,
    /**
     * OTASP settings committed.
     */
    OTASP_COMMITED,
}
/**
 * Specifies the mode for the next boot.
 */
enum DmsBootImageDownloadMode {
    /**
     * Normal operation.
     */
    NORMAL,
    /**
     * Boot and recovery image download mode.
     */
    BOOT_AND_RECOVERY,
}
/**
 * Data service capability.
 */
enum DmsDataServiceCapability {
    /**
     * No data services supported.
     */
    NONE,
    /**
     * Only CS supported.
     */
    CS,
    /**
     * Only PS supported.
     */
    PS,
    /**
     * Simultaneous CS and PS supported.
     */
    SIMULTANEOUS_CS_PS,
    /**
     * Non simultaneous CS and PS supported.
     */
    NON_SIMULTANEOUS_CS_PS,
}
/**
 * Type of firmware image.
 */
enum DmsFirmwareImageType {
    /**
     * Modem image.
     */
    MODEM,
    /**
     * PRI image.
     */
    PRI,
}
/**
 * Foxconn specific device modes.
 */
enum DmsFoxconnDeviceMode {
    /**
     * Unknown mode.
     */
    UNKNOWN,
    /**
     * Fastboot download mode for full partition files.
     */
    FASTBOOT_ONLINE,
    /**
     * Fastboot download mode for OTA files.
     */
    FASTBOOT_OTA,
}
/**
 * Foxconn specific firmware version types.
 */
enum DmsFoxconnFirmwareVersionType {
    /**
     * E.g. T77W968.F0.0.0.2.3.GC.004.
     */
    FIRMWARE_MCFG,
    /**
     * E.g. T77W968.F0.0.0.2.3.GC.004.011.
     */
    FIRMWARE_MCFG_APPS,
    /**
     * E.g. 011.
     */
    APPS,
}
/**
 * HP specific device modes.
 */
enum DmsHpDeviceMode {
    /**
     * Fastboot download mode.
     */
    FASTBOOT,
}
/**
 * Specifies the device from which the MAC address should be queried.
 */
enum DmsMacType {
    /**
     * WLAN MAC address.
     */
    WLAN,
    /**
     * Bluetooth MAC address.
     */
    BT,
}
/**
 * Operating mode of the device.
 */
enum DmsOperatingMode {
    /**
     * Device can acquire a system and make calls.
     */
    ONLINE,
    /**
     * Device has temporarily disabled RF.
     */
    LOW_POWER,
    /**
     * Special mode for manufacturer tests.
     */
    FACTORY_TEST,
    /**
     * Device has deactivated RF and is partially shutdown.
     */
    OFFLINE,
    /**
     * Device is in the process of power cycling.
     */
    RESET,
    /**
     * Device is in the process of shutting down.
     */
    SHUTTING_DOWN,
    /**
     * Device has disabled RF and state persists even after a reset.
     */
    PERSISTENT_LOW_POWER,
    /**
     * Mode-only Low Power.
     */
    MODE_ONLY_LOW_POWER,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * Radio interface type.
 */
enum DmsRadioInterface {
    /**
     * CDMA2000 1x.
     */
    CDMA20001X,
    /**
     * CDMA2000 HRPD (1xEV-DO)
     */
    EVDO,
    /**
     * GSM.
     */
    GSM,
    /**
     * UMTS.
     */
    UMTS,
    /**
     * LTE.
     */
    LTE,
    /**
     * TDS. Since 1.32.
     */
    TDS,
    /**
     * 5G NR. Since 1.26.
     */
    TODO_5GNR,
}
/**
 * SIM capability.
 */
enum DmsSimCapability {
    /**
     * SIM not supported.
     */
    NOT_SUPPORTED,
    /**
     * SIM is supported.
     */
    SUPPORTED,
}
/**
 * Sierra Wireless USB composition modes.
 */
enum DmsSwiUsbComposition {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * HIP, DM, NMEA, AT, MDM1, MDM2, MDM3, MS.
     */
    TODO_0,
    /**
     * HIP, DM, NMEA, AT, MDM1, MS.
     */
    TODO_1,
    /**
     * HIP, DM, NMEA, AT, NIC1, MS.
     */
    TODO_2,
    /**
     * HIP, DM, NMEA, AT, MDM1, NIC1, MS.
     */
    TODO_3,
    /**
     * HIP, DM, NMEA, AT, NIC1, NIC2, NIC3, MS.
     */
    TODO_4,
    /**
     * HIP, DM, NMEA, AT, ECM1, MS.
     */
    TODO_5,
    /**
     * DM, NMEA, AT, QMI.
     */
    TODO_6,
    /**
     * DM, NMEA, AT, RMNET1, RMNET2, RMNET3.
     */
    TODO_7,
    /**
     * DM, NMEA, AT, MBIM.
     */
    TODO_8,
    /**
     * MBIM.
     */
    TODO_9,
    /**
     * NMEA, MBIM.
     */
    TODO_10,
    /**
     * DM, MBIM.
     */
    TODO_11,
    /**
     * DM, NMEA, MBIM.
     */
    TODO_12,
    /**
     * Dual configuration: USB composition 6 and USB composition 8.
     */
    TODO_13,
    /**
     * Dual configuration: USB composition 6 and USB composition 9.
     */
    TODO_14,
    /**
     * Dual configuration: USB composition 6 and USB composition 10.
     */
    TODO_15,
    /**
     * Dual configuration: USB composition 6 and USB composition 11.
     */
    TODO_16,
    /**
     * Dual configuration: USB composition 6 and USB composition 12.
     */
    TODO_17,
    /**
     * Dual configuration: USB composition 7 and USB composition 8.
     */
    TODO_18,
    /**
     * Dual configuration: USB composition 7 and USB composition 9.
     */
    TODO_19,
    /**
     * Dual configuration: USB composition 7 and USB composition 10.
     */
    TODO_20,
    /**
     * Dual configuration: USB composition 7 and USB composition 11.
     */
    TODO_21,
    /**
     * Dual configuration: USB composition 7 and USB composition 12.
     */
    TODO_22,
}
/**
 * Time reference type.
 */
enum DmsTimeReferenceType {
    /**
     * User time.
     */
    USER,
}
/**
 * Source of the timestamp.
 */
enum DmsTimeSource {
    /**
     * 32 kHz device clock.
     */
    DEVICE,
    /**
     * CDMA network.
     */
    CDMA_NETWORK,
    /**
     * HDR network.
     */
    HDR_NETWORK,
}
/**
 * UIM personalization facilities.
 */
enum DmsUimFacility {
    /**
     * Network personalization facility.
     */
    PN,
    /**
     * Network subset personalization facility.
     */
    PU,
    /**
     * Service provider facility.
     */
    PP,
    /**
     * Corporate personalization facility.
     */
    PC,
    /**
     * UIM personalization facility.
     */
    PF,
}
/**
 * State of the UIM facility.
 */
enum DmsUimFacilityState {
    /**
     * Facility is deactivated.
     */
    DEACTIVATED,
    /**
     * Facility is activated.
     */
    ACTIVATED,
    /**
     * Facility is blocked.
     */
    BLOCKED,
}
/**
 * The PIN identifier.
 */
enum DmsUimPinId {
    /**
     * PIN.
     */
    PIN,
    /**
     * PIN2.
     */
    PIN2,
}
/**
 * The PIN status.
 */
enum DmsUimPinStatus {
    /**
     * Not initialized.
     */
    NOT_INITIALIZED,
    /**
     * Enabled, not verified.
     */
    ENABLED_NOT_VERIFIED,
    /**
     * Enabled, verified.
     */
    ENABLED_VERIFIED,
    /**
     * Disabled.
     */
    DISABLED,
    /**
     * Blocked.
     */
    BLOCKED,
    /**
     * Permanently Blocked.
     */
    PERMANENTLY_BLOCKED,
    /**
     * Unblocked.
     */
    UNBLOCKED,
    /**
     * Changed.
     */
    CHANGED,
}
/**
 * State of the UIM.
 */
enum DmsUimState {
    /**
     * UIM initialization completed.
     */
    INITIALIZATION_COMPLETED,
    /**
     * UIM is locked or failed.
     */
    LOCKED_OR_FAILED,
    /**
     * No UIM in the device.
     */
    NOT_PRESENT,
    /**
     * Reserved, unknown.
     */
    RESERVED,
    /**
     * UIM state currently unavailable.
     */
    UNKNOWN,
}
/**
 * APN type.
 */
enum DsdApnType {
    /**
     * Default/Internet traffic.
     */
    DEFAULT,
    /**
     * IMS.
     */
    IMS,
    /**
     * Multimedia Messaging Service.
     */
    MMS,
    /**
     * Dial Up Network.
     */
    DUN,
    /**
     * Secure User Plane Location.
     */
    SUPL,
    /**
     * High Priority Mobile Data.
     */
    HIPRI,
    /**
     * over the air administration.
     */
    FOTA,
    /**
     * Carrier Branded Services.
     */
    CBS,
    /**
     * Initial Attach.
     */
    IA,
    /**
     * Emergency.
     */
    EMERGENCY,
}
/**
 * Type of endianness.
 */
enum Endian {
    /**
     * Little endian.
     */
    LITTLE,
    /**
     * Big endian.
     */
    BIG,
}
/**
 * Foxconn specific firmware version types.
 */
enum FoxFirmwareVersionType {
    /**
     * E.g. T99W265.F0.0.0.0.1.GC.004.
     */
    FIRMWARE_MCFG,
    /**
     * E.g. T99W265.F0.0.0.0.1.GC.004.001.
     */
    FIRMWARE_MCFG_APPS,
    /**
     * E.g. 001.
     */
    APPS,
}
/**
 * Mode when retrieving a list of stored firmwares.
 */
enum GasFirmwareListingMode {
    /**
     * List only the active firmware.
     */
    ACTIVE_FIRMWARE,
    /**
     * List all stored firmwares.
     */
    ALL_FIRMWARE,
    /**
     * List only specific firmware with condition.
     */
    SPECIFIC_FIRMWARE,
}
/**
 * Peripheral endpoint type.
 */
enum GasUsbCompositionEndpointType {
    /**
     * High-speed USB.
     */
    HSUSB,
    /**
     * High-speed inter-chip interface.
     */
    HSIC,
}
/**
 * State of the engine.
 * 
 * Since 1.22
 */
enum LocEngineState {
    /**
     * On.
     */
    ON,
    /**
     * Off.
     */
    OFF,
}
/**
 * Whether to request a single or periodic fixes.
 * 
 * Since 1.22
 */
enum LocFixRecurrenceType {
    /**
     * Periodic fixes.
     */
    PERIODIC_FIXES,
    /**
     * Single fix.
     */
    SINGLE_FIX,
}
/**
 * Whether a satellite is healthy or unhealthy.
 * 
 * Since 1.22
 */
enum LocHealthStatus {
    /**
     * Unhealthy.
     */
    UNHEALTHY,
    /**
     * Healthy.
     */
    HEALTHY,
}
/**
 * General result of a received indication.
 * 
 * Since 1.22
 */
enum LocIndicationStatus {
    /**
     * Success.
     */
    SUCCESS,
    /**
     * General Failure.
     */
    GENERAL_FAILURE,
    /**
     * Unsupported.
     */
    UNSUPPORTED,
    /**
     * Invalid Parameter.
     */
    INVALID_PARAMETER,
    /**
     * Engine is busy.
     */
    ENGINE_BUSY,
    /**
     * Phone is offline.
     */
    PHONE_OFFLINE,
    /**
     * Timeout.
     */
    TIMEOUT,
}
/**
 * Whether to enable or disable intermediate state reporting.
 */
enum LocIntermediateReportState {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Enable intermediate state reporting.
     */
    ENABLE,
    /**
     * Disable intermediate state reporting.
     */
    DISABLE,
}
/**
 * Location engine lock type.
 */
enum LocLockType {
    /**
     * Do not lock any position sessions.
     */
    NONE,
    /**
     * Lock mobile-initiated position sessions.
     */
    MI,
    /**
     * Lock mobile-terminated position sessions.
     */
    MT,
    /**
     * Lock all position sessions.
     */
    ALL,
}
/**
 * Whether the ephemeris or almanac exist for a satellite.
 * 
 * Since 1.22
 */
enum LocNavigationData {
    /**
     * Has ephemeris.
     */
    EPHEMERIS,
    /**
     * Has almanac.
     */
    ALMANAC,
}
/**
 * Which operation mode to use.
 * 
 * Since 1.22
 */
enum LocOperationMode {
    /**
     * Default.
     */
    DEFAULT,
    /**
     * Mobile Station Based (MSB) A-GPS.
     */
    MSB,
    /**
     * Mobile Station Assisted (MSA) A-GPS.
     */
    MSA,
    /**
     * Standalone.
     */
    STANDALONE,
    /**
     * Cell ID.
     */
    CELLID,
    /**
     * WWAN.
     */
    WWAN,
}
/**
 * Type of predicted orbits data.
 */
enum LocPredictedOrbitsDataFormat {
    /**
     * Qualcomm XTRA database.
     */
    XTRA,
}
/**
 * Reliability of the provided information.
 * 
 * Since 1.22
 */
enum LocReliability {
    /**
     * Not set.
     */
    NOT_SET,
    /**
     * Very low.
     */
    VERY_LOW,
    /**
     * Low.
     */
    LOW,
    /**
     * Medium.
     */
    MEDIUM,
    /**
     * High.
     */
    HIGH,
}
/**
 * Whether the engine searches or tracks a satellite.
 * 
 * Since 1.22
 */
enum LocSatelliteStatus {
    /**
     * Idle.
     */
    IDLE,
    /**
     * Searching.
     */
    SEARCHING,
    /**
     * Tracking.
     */
    TRACKING,
}
/**
 * Server type for Assisted-GPS.
 */
enum LocServerType {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * CDMA Position Determining System.
     */
    CDMA_PDE,
    /**
     * CDMA Mobile Positioning Center.
     */
    CDMA_MPC,
    /**
     * SUPL Location Platform.
     */
    UMTS_SLP,
    /**
     * Custom position determining system.
     */
    CUSTOM_PDE,
}
/**
 * Status of a received session indication.
 * 
 * Since 1.22
 */
enum LocSessionStatus {
    /**
     * Success
     */
    SUCCESS,
    /**
     * Operation in Progress.
     */
    IN_PROGRESS,
    /**
     * General Failure.
     */
    GENERAL_FAILURE,
    /**
     * Timeout.
     */
    TIMEOUT,
    /**
     * User ended.
     */
    USER_ENDED,
    /**
     * Bad Parameter.
     */
    BAD_PARAMETER,
    /**
     * Phone is offline.
     */
    PHONE_OFFLINE,
    /**
     * Engine is locked.
     */
    ENGINE_LOCKED,
}
/**
 * Which location system a satellite is part of.
 * 
 * Since 1.22
 */
enum LocSystem {
    /**
     * GPS.
     */
    GPS,
    /**
     * Galileo.
     */
    GALILEO,
    /**
     * SBAS.
     */
    SBAS,
    /**
     * COMPASS (BeiDou).
     */
    COMPASS,
    /**
     * GLONASS.
     */
    GLONASS,
}
/**
 * Source of the used time.
 * 
 * Since 1.22
 */
enum LocTimeSource {
    /**
     * Invalid.
     */
    INVALID,
    /**
     * Time is set by the 1X system.
     */
    NETWORK_TIME_TRANSFER,
    /**
     * Time is set by WCDMA/GSM time tagging.
     */
    NETWORK_TIME_TAGGING,
    /**
     * Time set by external injection.
     */
    EXTERNAL_INPUT,
    /**
     * Time is set after decoding over-the-air GPS navigation data from one GPS satellite.
     */
    TOW_DECODE,
    /**
     * Time is set after decoding over-the-air GPS navigation data from multiple satellites.
     */
    TOW_CONFIRMED,
    /**
     * Both time of the week and GPS week number are known.
     */
    TOW_AND_WEEK_CONFIRMED,
    /**
     * Time is set by the position engine after the fix is obtained.
     */
    NAVIGATION_SOLUTION,
    /**
     * Time is set by the position engine after performing SFT.
     */
    SOLVE_FOR_TIME,
    /**
     * Time is set after decoding QZSS satellites.
     */
    GLO_TOW_DECODE,
    /**
     * Time is set after transforming the GPS to GLO time.
     */
    TIME_TRANSFORM,
    /**
     * Time is set by the sleep time tag provided by the WCDMA network.
     */
    WCDMA_SLEEP_TIME_TAG,
    /**
     * Time is set by the sleep time tag provided by the GSM network.
     */
    GSM_SLEEP_TIME_TAG,
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Time is derived from the system clock.
     */
    SYSTEM_TIMETICK,
    /**
     * Time set after decoding QZSS satellites.
     */
    QZSS_TOW_DECODE,
    /**
     * Time set after decoding BDS satellites.
     */
    BDS_TOW_DECODE,
}
/**
 * Band classes.
 */
enum NasActiveBand {
    /**
     * Band class 0.
     */
    BC_0,
    /**
     * Band class 1.
     */
    BC_1,
    /**
     * Band class 2.
     */
    BC_2,
    /**
     * Band class 3.
     */
    BC_3,
    /**
     * Band class 4.
     */
    BC_4,
    /**
     * Band class 5.
     */
    BC_5,
    /**
     * Band class 6.
     */
    BC_6,
    /**
     * Band class 7.
     */
    BC_7,
    /**
     * Band class 8.
     */
    BC_8,
    /**
     * Band class 9.
     */
    BC_9,
    /**
     * Band class 10.
     */
    BC_10,
    /**
     * Band class 11.
     */
    BC_11,
    /**
     * Band class 12.
     */
    BC_12,
    /**
     * Band class 13.
     */
    BC_13,
    /**
     * Band class 14.
     */
    BC_14,
    /**
     * Band class 15.
     */
    BC_15,
    /**
     * Band class 16.
     */
    BC_16,
    /**
     * Band class 17.
     */
    BC_17,
    /**
     * Band class 18.
     */
    BC_18,
    /**
     * Band class 19.
     */
    BC_19,
    /**
     * GSM 450.
     */
    GSM_450,
    /**
     * GSM 480.
     */
    GSM_480,
    /**
     * GSM 750.
     */
    GSM_750,
    /**
     * GSM 850.
     */
    GSM_850,
    /**
     * GSM 900 (Extended).
     */
    GSM_900_EXTENDED,
    /**
     * GSM 900 (Primary).
     */
    GSM_900_PRIMARY,
    /**
     * GSM 900 (Railways).
     */
    GSM_900_RAILWAYS,
    /**
     * GSM 1800.
     */
    GSM_DCS_1800,
    /**
     * GSM 1900.
     */
    GSM_PCS_1900,
    /**
     * WCDMA 2100.
     */
    WCDMA_2100,
    /**
     * WCDMA PCS 1900.
     */
    WCDMA_PCS_1900,
    /**
     * WCDMA DCS 1800.
     */
    WCDMA_DCS_1800,
    /**
     * WCDMA 1700 (U.S.).
     */
    WCDMA_1700_US,
    /**
     * WCDMA 850.
     */
    WCDMA_850,
    /**
     * WCDMA 800.
     */
    WCDMA_800,
    /**
     * WCDMA 2600.
     */
    WCDMA_2600,
    /**
     * WCDMA 900.
     */
    WCDMA_900,
    /**
     * WCDMA 1700 (Japan).
     */
    WCDMA_1700_JAPAN,
    /**
     * WCDMA 1500 (Japan).
     */
    WCDMA_1500_JAPAN,
    /**
     * WCDMA 850 (Japan).
     */
    WCDMA_850_JAPAN,
    /**
     * EUTRAN band 1.
     */
    EUTRAN_1,
    /**
     * EUTRAN band 2.
     */
    EUTRAN_2,
    /**
     * EUTRAN band 3.
     */
    EUTRAN_3,
    /**
     * EUTRAN band 4.
     */
    EUTRAN_4,
    /**
     * EUTRAN band 5.
     */
    EUTRAN_5,
    /**
     * EUTRAN band 6.
     */
    EUTRAN_6,
    /**
     * EUTRAN band 7.
     */
    EUTRAN_7,
    /**
     * EUTRAN band 8.
     */
    EUTRAN_8,
    /**
     * EUTRAN band 9.
     */
    EUTRAN_9,
    /**
     * EUTRAN band 10.
     */
    EUTRAN_10,
    /**
     * EUTRAN band 11.
     */
    EUTRAN_11,
    /**
     * EUTRAN band 12.
     */
    EUTRAN_12,
    /**
     * EUTRAN band 13.
     */
    EUTRAN_13,
    /**
     * EUTRAN band 14.
     */
    EUTRAN_14,
    /**
     * EUTRAN band 17.
     */
    EUTRAN_17,
    /**
     * EUTRAN band 18.
     */
    EUTRAN_18,
    /**
     * EUTRAN band 19.
     */
    EUTRAN_19,
    /**
     * EUTRAN band 20.
     */
    EUTRAN_20,
    /**
     * EUTRAN band 21.
     */
    EUTRAN_21,
    /**
     * EUTRAN band 23.
     */
    EUTRAN_23,
    /**
     * EUTRAN band 24.
     */
    EUTRAN_24,
    /**
     * EUTRAN band 25.
     */
    EUTRAN_25,
    /**
     * EUTRAN band 26.
     */
    EUTRAN_26,
    /**
     * EUTRAN band 27.
     */
    EUTRAN_27,
    /**
     * EUTRAN band 28.
     */
    EUTRAN_28,
    /**
     * EUTRAN band 29.
     */
    EUTRAN_29,
    /**
     * EUTRAN band 30.
     */
    EUTRAN_30,
    /**
     * EUTRAN band 31.
     */
    EUTRAN_31,
    /**
     * EUTRAN band 32.
     */
    EUTRAN_32,
    /**
     * EUTRAN band 33.
     */
    EUTRAN_33,
    /**
     * EUTRAN band 34.
     */
    EUTRAN_34,
    /**
     * EUTRAN band 35.
     */
    EUTRAN_35,
    /**
     * EUTRAN band 36.
     */
    EUTRAN_36,
    /**
     * EUTRAN band 37.
     */
    EUTRAN_37,
    /**
     * EUTRAN band 38.
     */
    EUTRAN_38,
    /**
     * EUTRAN band 39.
     */
    EUTRAN_39,
    /**
     * EUTRAN band 40.
     */
    EUTRAN_40,
    /**
     * EUTRAN band 41.
     */
    EUTRAN_41,
    /**
     * EUTRAN band 42.
     */
    EUTRAN_42,
    /**
     * EUTRAN band 43.
     */
    EUTRAN_43,
    /**
     * EUTRAN band 46.
     */
    EUTRAN_46,
    /**
     * EUTRAN band 47.
     */
    EUTRAN_47,
    /**
     * EUTRAN band 48.
     */
    EUTRAN_48,
    /**
     * EUTRAN band 66.
     */
    EUTRAN_66,
    /**
     * EUTRAN band 71.
     */
    EUTRAN_71,
    /**
     * EUTRAN band 125.
     */
    EUTRAN_125,
    /**
     * EUTRAN band 126.
     */
    EUTRAN_126,
    /**
     * EUTRAN band 127.
     */
    EUTRAN_127,
    /**
     * EUTRAN band 250.
     */
    EUTRAN_250,
    /**
     * TD-SCDMA Band A.
     */
    TDSCDMA_A,
    /**
     * TD-SCDMA Band B.
     */
    TDSCDMA_B,
    /**
     * TD-SCDMA Band C.
     */
    TDSCDMA_C,
    /**
     * TD-SCDMA Band D.
     */
    TDSCDMA_D,
    /**
     * TD-SCDMA Band E.
     */
    TDSCDMA_E,
    /**
     * TD-SCDMA Band F.
     */
    TDSCDMA_F,
}
/**
 * Domain attach state.
 */
enum NasAttachState {
    /**
     * Unknown attach state.
     */
    UNKNOWN,
    /**
     * Attached.
     */
    ATTACHED,
    /**
     * Detached.
     */
    DETACHED,
}
/**
 * Boolean flag with validity info.
 */
enum NasBoolean {
    /**
     * Status FALSE.
     */
    FALSE,
    /**
     * Status TRUE.
     */
    TRUE,
    /**
     * Status Unknown.
     */
    UNKNOWN,
}
/**
 * Status of the call barring functionality.
 */
enum NasCallBarringStatus {
    /**
     * Normal calls only.
     */
    NORMAL_ONLY,
    /**
     * Emergency calls only.
     */
    EMERGENCY_ONLY,
    /**
     * No calls allowed.
     */
    NO_CALLS,
    /**
     * All calls allowed.
     */
    ALL_CALLS,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * The pilot set the pilot belongs to.
 */
enum NasCdmaPilotType {
    /**
     * the pilot is part of the active set.
     */
    ACTIVE,
    /**
     * the pilot is part of the neighbor set.
     */
    NEIGHBOR,
}
/**
 * Flags specifying the preference when using CDMA Band Class 0.
 */
enum NasCdmaPrlPreference {
    /**
     * System A only.
     */
    A_SIDE_ONLY,
    /**
     * System B only.
     */
    B_SIDE_ONLY,
    /**
     * Any system.
     */
    ANY,
}
/**
 * Cell broadcast support.
 */
enum NasCellBroadcastCapability {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Cell broadcast not supported.
     */
    OFF,
    /**
     * Cell broadcast supported.
     */
    ON,
}
/**
 * Duration of the change setting.
 */
enum NasChangeDuration {
    /**
     * Until the next power cycle.
     */
    POWER_CYCLE,
    /**
     * Permanent.
     */
    PERMANENT,
}
/**
 * DL Bandwidth.
 */
enum NasDLBandwidth {
    /**
     * 1.4 MHz
     */
    TODO_1_4,
    /**
     * 3 MHz
     */
    TODO_3,
    /**
     * 5 MHz
     */
    TODO_5,
    /**
     * 10 MHz
     */
    TODO_10,
    /**
     * 15 MHz
     */
    TODO_15,
    /**
     * 20 MHz
     */
    TODO_20,
    /**
     * Invalid
     */
    INVALID,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * Data capability of the network.
 */
enum NasDataCapability {
    /**
     * None or unknown.
     */
    NONE,
    /**
     * GPRS.
     */
    GPRS,
    /**
     * EDGE.
     */
    EDGE,
    /**
     * HSDPA.
     */
    HSDPA,
    /**
     * HSUPA.
     */
    HSUPA,
    /**
     * WCDMA.
     */
    WCDMA,
    /**
     * CDMA.
     */
    CDMA,
    /**
     * EV-DO revision 0.
     */
    EVDO_REV_0,
    /**
     * EV-DO revision A.
     */
    EVDO_REV_A,
    /**
     * GSM.
     */
    GSM,
    /**
     * EV-DO revision B.
     */
    EVDO_REV_B,
    /**
     * LTE.
     */
    LTE,
    /**
     * HSDPA+.
     */
    HSDPA_PLUS,
    /**
     * DC-HSDPA+.
     */
    DC_HSDPA_PLUS,
}
/**
 * The day of the week.
 */
enum NasDayOfWeek {
    /**
     * Monday
     */
    MONDAY,
    /**
     * Tuesday
     */
    TUESDAY,
    /**
     * Wednesday
     */
    WEDNESDAY,
    /**
     * Thursday
     */
    THURSDAY,
    /**
     * Friday
     */
    FRIDAY,
    /**
     * Saturday
     */
    SATURDAY,
    /**
     * Sunday
     */
    SUNDAY,
}
/**
 * The number of hours a time is adjusted for daylight savings.
 */
enum NasDaylightSavingsAdjustment {
    /**
     * no adjustment
     */
    NONE,
    /**
     * one hour adjustment
     */
    ONE_HOUR,
    /**
     * two hours adjustment
     */
    TWO_HOURS,
}
/**
 * DRX setting of the device.
 */
enum NasDrx {
    /**
     * Unknown or not specified.
     */
    UNKNOWN,
    /**
     * CN=6, T=32.
     */
    CN6_T32,
    /**
     * CN=7, T=64.
     */
    CN7_T64,
    /**
     * CN=8, T=128.
     */
    CN8_T128,
    /**
     * CN=9, T=256.
     */
    CN9_T256,
}
/**
 * EV-DO SINR level.
 */
enum NasEvdoSinrLevel {
    /**
     * -9 dB.
     */
    TODO_0,
    /**
     * -6 dB.
     */
    TODO_1,
    /**
     * -4.5 dB.
     */
    TODO_2,
    /**
     * -3 dB.
     */
    TODO_3,
    /**
     * -2 dB.
     */
    TODO_4,
    /**
     * +1 dB.
     */
    TODO_5,
    /**
     * +3 dB.
     */
    TODO_6,
    /**
     * +6 dB.
     */
    TODO_7,
    /**
     * +9 dB.
     */
    TODO_8,
}
/**
 * GSM/WCDMA acquisition order preference.
 */
enum NasGsmWcdmaAcquisitionOrderPreference {
    /**
     * Automatic.
     */
    AUTOMATIC,
    /**
     * GSM first, then WCDMA.
     */
    GSM,
    /**
     * WCDMA first, then GSM.
     */
    WCDMA,
}
/**
 * HDR personality type.
 */
enum NasHdrPersonality {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * HRPD.
     */
    HRPD,
    /**
     * eHRPD.
     */
    EHRPD,
}
/**
 * HDR protocol revision.
 */
enum NasHdrProtocolRevision {
    /**
     * None.
     */
    NONE,
    /**
     * HDR Rel 0.
     */
    REL_0,
    /**
     * HDR Rel A.
     */
    REL_A,
    /**
     * HDR Rel B.
     */
    REL_B,
}
/**
 * Cell access status for LTE calls.
 */
enum NasLteCellAccessStatus {
    /**
     * Access is allowed for normal calls only.
     */
    NORMAL_ONLY,
    /**
     * Access is allowed for emergency calls only.
     */
    EMERGENCY_ONLY,
    /**
     * Access is not allowed for any call type.
     */
    NO_CALLS,
    /**
     * Access is allowed for all call types.
     */
    ALL_CALLS,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * LTE registration domain.
 */
enum NasLteRegistrationDomain {
    /**
     * Not applicable since the UE is not in "Camp Only" mode.
     */
    NOT_APPLICABLE,
    /**
     * UE is in "Camp Only" mode and the PLMN can provide CS service only.
     */
    CS_ONLY,
    /**
     * UE is in "Camp Only" mode and the PLMN can provide PS service only.
     */
    PS_ONLY,
    /**
     * UE is in "Camp Only" mode and the PLMN can provide CS and PS service.
     */
    CS_PS,
    /**
     * UE is in "Camp Only" mode but the PLMN cannot provide any service.
     */
    LIMITED_SERVICE,
}
/**
 * LTE voice domain.
 */
enum NasLteVoiceDomain {
    /**
     * No voice.
     */
    NONE,
    /**
     * Voice is supported over IMS network.
     */
    IMS,
    /**
     * Voice is supported over the 1X network.
     */
    TODO_1X,
    /**
     * Voice is supported over the 3GPP network.
     */
    TODO_3GPP,
}
/**
 * Setup to define whether the network description should be displayed.
 */
enum NasNetworkDescriptionDisplay {
    /**
     * Don't display.
     */
    NO,
    /**
     * Display.
     */
    YES,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * Type of encoding used in the network description.
 */
enum NasNetworkDescriptionEncoding {
    /**
     * Unspecified.
     */
    UNSPECIFIED,
    /**
     * ASCII-7.
     */
    ASCII7,
    /**
     * Unicode.
     */
    UNICODE,
    /**
     * GSM 7-bit.
     */
    GSM,
}
/**
 * Network name source.
 */
enum NasNetworkNameSource {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Operator PLMN list and PLMN network name.
     */
    OPERATOR_PLMN_LIST_AND_PLMN_NETWORK_NAME,
    /**
     * Common PCN handset specification and operator name string.
     */
    COMMON_PCN_HANDSET_SPECIFICATION_AND_OPERATOR_NAME_STRING,
    /**
     * Network identity and time zone.
     */
    NITZ,
    /**
     * GSMA SE13 table.
     */
    SE13,
    /**
     * MCC and MNC.
     */
    MCC_MNC,
    /**
     * Service provider name.
     */
    SERVICE_PROVIDER_NAME,
}
/**
 * Type of network registration.
 */
enum NasNetworkRegisterType {
    /**
     * Automatic network registration.
     */
    AUTOMATIC,
    /**
     * Manual network registration.
     */
    MANUAL,
}
/**
 * Network scan result.
 */
enum NasNetworkScanResult {
    /**
     * Success.
     */
    SUCCESS,
    /**
     * Abort.
     */
    ABORT,
    /**
     * Radio link failure.
     */
    RADIO_LINK_FAILURE,
}
/**
 * Network selection preference.
 */
enum NasNetworkSelectionPreference {
    /**
     * Automatic.
     */
    AUTOMATIC,
    /**
     * Manual.
     */
    MANUAL,
}
/**
 * Registration restriction.
 */
enum NasNetworkSelectionRegistrationRestriction {
    /**
     * Device follows the normal registration process.
     */
    UNRESTRICTED,
    /**
     * Device camps on the network according to its provisioning, but does not register.
     */
    CAMPED_ONLY,
    /**
     * Device selects the network for limited service.
     */
    LIMITED,
}
/**
 * Network Service Domain.
 */
enum NasNetworkServiceDomain {
    /**
     * No service.
     */
    NONE,
    /**
     * Circuit switched.
     */
    CS,
    /**
     * Packet switched.
     */
    PS,
    /**
     * Circuit and packet switched.
     */
    CS_PS,
    /**
     * Unknown service.
     */
    UNKNOWN,
}
/**
 * Type of network.
 */
enum NasNetworkType {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * 3GPP2 network.
     */
    TODO_3GPP2,
    /**
     * 3GPP network.
     */
    TODO_3GPP,
}
/**
 * PLMN name encoding schemes.  See 3GPP TS 24.008 section "Network Name
 * information element".
 */
enum NasPlmnEncodingScheme {
    /**
     * GSM default alphabet packed encoding (ETSI GSM 03.38)
     */
    GSM,
    /**
     * UCS-2 little-endian
     */
    UCS2LE,
}
/**
 * Language ID used when encoding the PLMN.
 */
enum NasPlmnLanguageId {
    /**
     * Language Unknown.
     */
    UNKNOWN,
    /**
     * Traditional Chinese.
     */
    ZH_TRAD,
    /**
     * Simplified Chinese.
     */
    ZH_SIMP,
}
/**
 * PLMN name country initials options. See 3GPP TS 24.008
 * section "Network Name information element".
 */
enum NasPlmnNameCountryInitials {
    /**
     * don't add country initials
     */
    INITIALS_DO_NOT_ADD,
    /**
     * add country initials
     */
    INIITALS_ADD,
    /**
     * unspecified
     */
    INIITALS_UNSPECIFIED,
}
/**
 * PLMN name spare bits in last octet of a network name.  See 3GPP TS 24.008
 * section "Network Name information element".
 */
enum NasPlmnNameSpareBits {
    /**
     * unknown
     */
    UNKNOWN,
    /**
     * bit 8 is spare
     */
    BIT_8,
    /**
     * bits 7 - 8 are spare
     */
    BITS_78,
    /**
     * bits 6 - 8 are spare
     */
    BITS_68,
    /**
     * bits 5 - 8 are spare
     */
    BITS_58,
    /**
     * bits 4 - 8 are spare
     */
    BITS_48,
    /**
     * bits 3 - 8 are spare
     */
    BITS_38,
    /**
     * bits 2 - 8 are spare
     */
    BITS_28,
}
/**
 * Duration of the preference setting.
 */
enum NasPreferenceDuration {
    /**
     * Permanent.
     */
    PERMANENT,
    /**
     * Until the next power cycle.
     */
    POWER_CYCLE,
    /**
     * Until end of call.
     */
    ONE_CALL,
    /**
     * Until end of call or a specified time.
     */
    ONE_CALL_OR_TIME,
    /**
     * Internal reason 1, one call.
     */
    INTERNAL_ONE_CALL_1,
    /**
     * Internal reason 2, one call.
     */
    INTERNAL_ONE_CALL_2,
    /**
     * Internal reason 3, one call.
     */
    INTERNAL_ONE_CALL_3,
}
/**
 * Packet Switched domain attach/detach action.
 */
enum NasPsAttachAction {
    /**
     * Attach the PS domain.
     */
    ATTACH,
    /**
     * Detach the PS domain.
     */
    DETACH,
}
/**
 * Radio interface technology.
 */
enum NasRadioInterface {
    /**
     * Not known or not needed.
     */
    UNKNOWN,
    /**
     * None, no service.
     */
    NONE,
    /**
     * CDMA2000 1X.
     */
    CDMA_1X,
    /**
     * CDMA2000 HRPD (1xEV-DO).
     */
    CDMA_1XEVDO,
    /**
     * AMPS.
     */
    AMPS,
    /**
     * GSM.
     */
    GSM,
    /**
     * UMTS.
     */
    UMTS,
    /**
     * LTE.
     */
    LTE,
    /**
     * TD-SCDMA.
     */
    TD_SCDMA,
    /**
     * 5G NR. Since 1.26.
     */
    TODO_5GNR,
}
/**
 * Status of the network registration.
 */
enum NasRegistrationState {
    /**
     * Not registered.
     */
    NOT_REGISTERED,
    /**
     * Registered.
     */
    REGISTERED,
    /**
     * Searching.
     */
    NOT_REGISTERED_SEARCHING,
    /**
     * Registration denied.
     */
    REGISTRATION_DENIED,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * Reason why a request from the mobile station is rejected by the network.
 * 
 * Defined in 3GPP TS 24.008 in sections 10.5.3.6 and 10.5.5.14 (detailed in
 * annex G) and in 3GPP TS 24.301 in section 9.9.3.9.
 */
enum NasRejectCause {
    /**
     * None.
     */
    NONE,
    /**
     * IMSI unknown in HLR/HSS.
     */
    IMSI_UNKNOWN_IN_HLR,
    /**
     * Illegal MS/UE.
     */
    ILLEGAL_UE,
    /**
     * IMSI unknown in VLR.
     */
    IMSI_UNKNOWN_IN_VLR,
    /**
     * IMEI not accepted.
     */
    IMEI_NOT_ACCEPTED,
    /**
     * Illegal ME.
     */
    ILLEGAL_ME,
    /**
     * GPRS/EPS services not allowed.
     */
    PS_SERVICES_NOT_ALLOWED,
    /**
     * GPRS/EPS and non-GPRS/EPS services not allowed.
     */
    PS_AND_NON_PS_SERVICES_NOT_ALLOWED,
    /**
     * MS/UE identity not derived by network.
     */
    UE_IDENTITY_NOT_DERIVED_BY_NETWORK,
    /**
     * Implicitly detached.
     */
    IMPLICITLY_DETACHED,
    /**
     * PLMN not allowed.
     */
    PLMN_NOT_ALLOWED,
    /**
     * Location/tracking area not allowed.
     */
    LOCATION_AREA_NOT_ALLOWED,
    /**
     * Roaming in location/tracking area not allowed.
     */
    ROAMING_IN_LOCATION_AREA_NOT_ALLOWED,
    /**
     * GPRS/EPS services in location/tracking area not allowed.
     */
    PS_SERVICES_IN_LOCATION_AREA_NOT_ALLOWED,
    /**
     * No suitable cells in location/tracking area.
     */
    NO_SUITABLE_CELLS_IN_LOCATION_AREA,
    /**
     * MSC temporarily not reachable.
     */
    MSC_TEMPORARILY_NOT_REACHABLE,
    /**
     * Network failure.
     */
    NETWORK_FAILURE,
    /**
     * CS domain not available.
     */
    CS_DOMAIN_NOT_AVAILABLE,
    /**
     * ESM failure.
     */
    ESM_FAILURE,
    /**
     * MAC failure.
     */
    MAC_FAILURE,
    /**
     * Synch failure.
     */
    SYNCH_FAILURE,
    /**
     * Congestion.
     */
    CONGESTION,
    /**
     * GSM authentication unacceptable, UE security capabilities mismatch.
     */
    UE_SECURITY_CAPABILITIES_MISMATCH,
    /**
     * Security mode rejected or unspecified.
     */
    SECURITY_MODE_REJECTED_UNSPECIFIED,
    /**
     * CSG not authorized.
     */
    CSG_NOT_AUTHORIZED,
    /**
     * Non-EPS authentication unacceptable.
     */
    NON_EPS_AUTHENTICATION_UNACCEPTABLE,
    /**
     * SMS provided by GPRS in routing area.
     */
    SMS_PROVIDED_BY_GPRS_IN_ROUTING_AREA,
    /**
     * Redirection to 5GCN required.
     */
    REDIRECTION_TO_5GCN_REQUIRED,
    /**
     * Service option not supported.
     */
    SERVICE_OPTION_NOT_SUPPORTED,
    /**
     * Requested service option not subscribed.
     */
    REQUESTED_SERVICE_OPTION_NOT_SUBSCRIBED,
    /**
     * Service option temporarily out of order.
     */
    SERVICE_OPTION_TEMPORARILY_OUT_OF_ORDER,
    /**
     * Requested service option not authorized.
     */
    REQUESTED_SERVICE_OPTION_NOT_AUTHORIZED,
    /**
     * Call cannot be identified.
     */
    CALL_CANNOT_BE_IDENTIFIED,
    /**
     * CS service temporarily not available.
     */
    CS_SERVICE_TEMPORARILY_NOT_AVAILABLE,
    /**
     * No EPS bearer context activated.
     */
    NO_EPS_BEARER_CONTEXT_ACTIVATED,
    /**
     * Severe network failure.
     */
    SEVERE_NETWORK_FAILURE,
    /**
     * Retry upon entry 0.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_0,
    /**
     * Retry upon entry 1.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_1,
    /**
     * Retry upon entry 2.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_2,
    /**
     * Retry upon entry 3.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_3,
    /**
     * Retry upon entry 4.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_4,
    /**
     * Retry upon entry 5.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_5,
    /**
     * Retry upon entry 6.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_6,
    /**
     * Retry upon entry 7.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_7,
    /**
     * Retry upon entry 8.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_8,
    /**
     * Retry upon entry 9.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_9,
    /**
     * Retry upon entry 10.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_10,
    /**
     * Retry upon entry 11.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_11,
    /**
     * Retry upon entry 12.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_12,
    /**
     * Retry upon entry 13.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_13,
    /**
     * Retry upon entry 14.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_14,
    /**
     * Retry upon entry 15.
     */
    RETRY_UPON_ENTRY_INTO_NEW_CELL_15,
    /**
     * Semantically incorrect message.
     */
    SEMANTICALLY_INCORRECT_MESSAGE,
    /**
     * Invalid mandatory information.
     */
    INVALID_MANDATORY_INFORMATION,
    /**
     * Message type non existent.
     */
    MESSAGE_TYPE_NON_EXISTENT,
    /**
     * Message type not compatible.
     */
    MESSAGE_TYPE_NOT_COMPATIBLE,
    /**
     * Information element non existent.
     */
    INFORMATION_ELEMENT_NON_EXISTENT,
    /**
     * Conditional information element error.
     */
    CONDITIONAL_INFORMATION_ELEMENT_ERROR,
    /**
     * Message not compatible.
     */
    MESSAGE_NOT_COMPATIBLE,
    /**
     * Unspecified protocol error.
     */
    UNSPECIFIED_PROTOCOL_ERROR,
}
/**
 * Status of the roaming indication.
 */
enum NasRoamingIndicatorStatus {
    /**
     * Roaming.
     */
    ON,
    /**
     * Home.
     */
    OFF,
}
/**
 * Roaming preference.
 */
enum NasRoamingPreference {
    /**
     * Only non-roaming networks.
     */
    OFF,
    /**
     * Only roaming networks.
     */
    NOT_OFF,
    /**
     * Only non-roaming networks or not flashing.
     */
    NOT_FLASHING,
    /**
     * Don't filter by roaming when acquiring networks.
     */
    ANY,
}
/**
 * Roaming status.
 */
enum NasRoamingStatus {
    /**
     * Off.
     */
    OFF,
    /**
     * On.
     */
    ON,
    /**
     * Blinking.
     */
    BLINK,
    /**
     * Out of neighborhood.
     */
    OUT_OF_NEIGHBORHOOD,
    /**
     * Out of building.
     */
    OUT_OF_BUILDING,
    /**
     * Preferred system.
     */
    PREFERRED_SYSTEM,
    /**
     * Available system.
     */
    AVAILABLE_SYSTEM,
    /**
     * Alliance partner.
     */
    ALLIANCE_PARTNER,
    /**
     * Premium partner.
     */
    PREMIUM_PARTNER,
    /**
     * Full service.
     */
    FULL_SERVICE,
    /**
     * Partial service.
     */
    PARTIAL_SERVICE,
    /**
     * Banner on.
     */
    BANNER_ON,
    /**
     * Banner off.
     */
    BANNER_OFF,
}
/**
 * SCell State.
 */
enum NasScellState {
    /**
     * Deconfigured
     */
    DECONFIGURED,
    /**
     * Deactivated
     */
    DEACTIVATED,
    /**
     * Activated
     */
    ACTIVATED,
}
/**
 * Service domain preference.
 */
enum NasServiceDomainPreference {
    /**
     * Circuit-switched only.
     */
    CS_ONLY,
    /**
     * Packet-switched only.
     */
    PS_ONLY,
    /**
     * Circuit-switched and packet-switched.
     */
    CS_PS,
    /**
     * Packet-switched attach.
     */
    PS_ATTACH,
    /**
     * Packet-switched dettach.
     */
    PS_DETACH,
}
/**
 * Status of the service.
 */
enum NasServiceStatus {
    /**
     * No service.
     */
    NONE,
    /**
     * Limited service.
     */
    LIMITED,
    /**
     * Service available.
     */
    AVAILABLE,
    /**
     * Limited regional service.
     */
    LIMITED_REGIONAL,
    /**
     * Device in power save mode.
     */
    POWER_SAVE,
}
/**
 * Reject information of the SIM.
 */
enum NasSimRejectState {
    /**
     * SIM not available.
     */
    UNAVAILABLE,
    /**
     * SIM available.
     */
    AVAILABLE,
    /**
     * SIM invalid for circuit-switched connections.
     */
    CS_INVALID,
    /**
     * SIM invalid for packet-switched connections.
     */
    PS_INVALID,
    /**
     * SIM invalid for circuit-switched and packet-switched connections.
     */
    CS_PS_INVALID,
}
/**
 * EMM connection state state. (Sierra Wireless specific).
 */
enum NasSwiEmmConnectionState {
    /**
     * RRC idle
     */
    RRC_IDLE,
    /**
     * Waiting RRC Cfm
     */
    WAITING_RRC_CFM,
    /**
     * RRC connecting
     */
    RRC_CONNECTING,
    /**
     * RRC releasing
     */
    RRC_RELEASING,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * EMM registration state. (Sierra Wireless specific).
 */
enum NasSwiEmmState {
    /**
     * Deregistered
     */
    DEREGISTERED,
    /**
     * Registration initiated
     */
    REG_INITIATED,
    /**
     * Registered
     */
    REGISTERED,
    /**
     * TAU initiated
     */
    TAU_INITIATED,
    /**
     * SR initiated
     */
    SR_INITIATED,
    /**
     * Deregistration initiated
     */
    DEREG_INITIATED,
    /**
     * Invalid
     */
    INVALID,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * IMS registration state. (Sierra Wireless specific).
 */
enum NasSwiImsRegState {
    /**
     * No service
     */
    NO_SRV,
    /**
     * In prog
     */
    IN_PROG,
    /**
     * Failed
     */
    FAILED,
    /**
     * Limited
     */
    LIMITED,
    /**
     * Full service
     */
    FULL_SRV,
    /**
     * Unknown
     */
    _UNKNOWN,
}
/**
 * Modem mode (Sierra Wireless specific).
 */
enum NasSwiModemMode {
    /**
     * Powering off
     */
    POWERING_OFF,
    /**
     * Factory test
     */
    FACTORY_TEST,
    /**
     * Offline
     */
    OFFLINE,
    /**
     * Offline AMPS
     */
    OFFLINE_AMPS,
    /**
     * Offline CDMA
     */
    OFFLINE_CDMA,
    /**
     * Online
     */
    ONLINE,
    /**
     * Low power
     */
    LOW_POWER,
    /**
     * Resetting
     */
    RESETTING,
    /**
     * Network test
     */
    NETWORK_TEST,
    /**
     * Offline request
     */
    OFFLINE_REQUEST,
    /**
     * Pseudo online
     */
    PSEUDO_ONLINE,
    /**
     * Resetting modem
     */
    RESETTING_MODEM,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * PS registration state. (Sierra Wireless specific).
 */
enum NasSwiPsState {
    /**
     * Attached
     */
    ATTACHED,
    /**
     * Detached
     */
    DETACHED,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * System mode (Sierra Wireless specific).
 */
enum NasSwiSystemMode {
    /**
     * No service
     */
    NO_SERVICE,
    /**
     * AMPS
     */
    AMPS,
    /**
     * CDMA
     */
    CDMA,
    /**
     * GSM
     */
    GSM,
    /**
     * HDR
     */
    HDR,
    /**
     * WCDMA
     */
    WCDMA,
    /**
     * GPS
     */
    GPS,
    /**
     * WLAN
     */
    WLAN,
    /**
     * LTE
     */
    LTE,
    /**
     * Unknown
     */
    UNKNOWN,
}
/**
 * Modem usage preference.
 */
enum NasUsagePreference {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Voice centric.
     */
    VOICE_CENTRIC,
    /**
     * Data centric.
     */
    DATA_CENTRIC,
}
/**
 * Voice domain preference.
 */
enum NasVoiceDomainPreference {
    /**
     * Circuit-switched voice only
     */
    CS_ONLY,
    /**
     * Packet-switched voice only.
     */
    PS_ONLY,
    /**
     * Circuit-switched voice is preferred.
     */
    CS_PREFERRED,
    /**
     * Packet-switched voice is preferred.
     */
    PS_PREFERRED,
}
/**
 * Call status on high speed.
 */
enum NasWcdmaHsService {
    /**
     * HSDPA and HSUPA not supported.
     */
    HSDPA_HSUPA_UNSUPPORTED,
    /**
     * HSDPA supported.
     */
    HSDPA_SUPPORTED,
    /**
     * HSUPA supported.
     */
    HSUPA_SUPPORTED,
    /**
     * HSDPA and HSUPA supported.
     */
    HSDPA_HSUPA_SUPPORTED,
    /**
     * HSDPA+ supported.
     */
    HSDPA_PLUS_SUPPORTED,
    /**
     * HSDPA+ and HSUPA supported.
     */
    HSDPA_PLUS_HSUPA_SUPPORTED,
    /**
     * DC-HSDPA+ supported.
     */
    DC_HSDPA_PLUS_SUPPORTED,
    /**
     * DC-HSDPA+ and HSUPA supported.
     */
    DC_HSDPA_PLUS_HSUPA_SUPPORTED,
}
/**
 * RRC state.
 */
enum NasWcdmaRrcState {
    /**
     * Disconnected.
     */
    DISCONNECTED,
    /**
     * WCDMA RRC state is CELL_PCH.
     */
    CELL_PCH,
    /**
     * WCDMA RRC state is URA_PCH.
     */
    URA_PCH,
    /**
     * WCDMA RRC state is CELL_FACH.
     */
    CELL_FACH,
    /**
     * WCDMA RRC state is CELL_DCH.
     */
    CELL_DCH,
}
/**
 * HFA feature done state.
 */
enum OmaHfaFeatureDoneState {
    /**
     * None.
     */
    NONE,
    /**
     * Succeeded.
     */
    SUCCEEDED,
    /**
     * Failed.
     */
    FAILED,
}
/**
 * Session failure reason.
 */
enum OmaSessionFailedReason {
    /**
     * Unknown reason.
     */
    UNKNOWN,
    /**
     * Network unavailable.
     */
    NETWORK_UNAVAILABLE,
    /**
     * Server unavailable.
     */
    SERVER_UNAVAILABLE,
    /**
     * Authentication failed.
     */
    AUTHENTICATION_FAILED,
    /**
     * Maximum retries exceeded.
     */
    MAX_RETRY_EXCEEDED,
    /**
     * Session cancelled.
     */
    SESSION_CANCELLED,
}
/**
 * State of the OMA-DM session.
 */
enum OmaSessionState {
    /**
     * Session complete and information updated.
     */
    COMPLETE_INFORMATION_UPDATED,
    /**
     * Session complete but updated information not available.
     */
    COMPLETE_UPDATED_INFORMATION_UNAVAILABLE,
    /**
     * Session failed.
     */
    FAILED,
    /**
     * Session retrying.
     */
    RETRYING,
    /**
     * Session connecting.
     */
    CONNECTING,
    /**
     * Session connected.
     */
    CONNECTED,
    /**
     * Session authenticated.
     */
    AUTHENTICATED,
    /**
     * MDN downloaded.
     */
    MDN_DOWNLOADED,
    /**
     * MSID downloaded.
     */
    MSID_DOWNLOADED,
    /**
     * PRL downloaded.
     */
    PRL_DOWNLOADED,
    /**
     * MIP profile downloaded.
     */
    MIP_PROFILE_DOWNLOADED,
}
/**
 * Type of OMA-DM session.
 */
enum OmaSessionType {
    /**
     * Client-initiated device configure.
     */
    CLIENT_INITIATED_DEVICE_CONFIGURE,
    /**
     * Client-initiated PRL update.
     */
    CLIENT_INITIATED_PRL_UPDATE,
    /**
     * Client-initiated hands free activation.
     */
    CLIENT_INITIATED_HANDS_FREE_ACTIVATION,
    /**
     * Device-initiated hands free activation.
     */
    DEVICE_INITIATED_HANDS_FREE_ACTIVATION,
    /**
     * Network-initiated PRL update.
     */
    NETWORK_INITIATED_PRL_UPDATE,
    /**
     * Network-initiated device configure.
     */
    NETWORK_INITIATED_DEVICE_CONFIGURE,
    /**
     * Device-initiated PRL update.
     */
    DEVICE_INITIATED_PRL_UPDATE,
}
/**
 * Type of phonebook management session.
 */
enum PbmSessionType {
    /**
     * Access phonebooks under GSM DF (ICC) or USIM application (UICC).
     */
    GW_PRIMARY,
    /**
     * Access phonebooks under CDMA DF (ICC) or CSIM application (UICC).
     */
    TODO_1X_PRIMARY,
    /**
     * Access phonebooks under GSM DF (ICC) or USIM application (UICC). Dual standby.
     */
    GW_SECONDARY,
    /**
     * Access phonebooks under CDMA DF (ICC) or CSIM application (UICC). Dual standby.
     */
    TODO_1X_SECONDARY,
    /**
     * Access phonebooks under a nonprovisioning application in slot 1.
     */
    NONPROVISIONING_SLOT_1,
    /**
     * Access phonebooks under a nonprovisioning application in slot 2.
     */
    NONPROVISIONING_SLOT_2,
    /**
     * Access phonebooks that are not in any application of the card in slot 1.
     */
    GLOBAL_PHONEBOOK_SLOT_1,
    /**
     * Access phonebooks that are not in any application of the card in slot 2.
     */
    GLOBAL_PHONEBOOK_SLOT_2,
}
/**
 * Configuration type for change/load configuration.
 */
enum PdcConfigurationType {
    /**
     * Platform
     */
    PLATFORM,
    /**
     * Software
     */
    SOFTWARE,
}
/**
 * Refresh event type.
 */
enum PdcRefreshEventType {
    /**
     * Refresh start event
     */
    START,
    /**
     * Refresh complete event
     */
    COMPLETE,
    /**
     * Client refresh event
     */
    CLIENT_REFRESH,
}
/**
 * Network mode used during the A-GPS setup.
 */
enum PdsNetworkMode {
    /**
     * UMTS.
     */
    UMTS,
    /**
     * CDMA.
     */
    CDMA,
}
/**
 * GPS operating mode.
 */
enum PdsOperatingMode {
    /**
     * Standalone (GPS only).
     */
    STANDALONE,
    /**
     * Mobile Station Based (MSB) A-GPS
     */
    MS_BASED,
    /**
     * Mobile Station Assisted (MSA) A-GPS.
     */
    MS_ASSISTED,
}
/**
 * Operation mode used to compute the position.
 */
enum PdsOperationMode {
    /**
     * Unknown (position not fixed yet).
     */
    UNKNOWN,
    /**
     * Standalone.
     */
    STANDALONE,
    /**
     * Mobile Station Based (MSB) A-GPS.
     */
    MS_BASED,
    /**
     * Mobile Station Assisted (MSA) A-GPS.
     */
    MS_ASSISTED,
}
/**
 * Status of the positioning session.
 */
enum PdsPositionSessionStatus {
    /**
     * Success.
     */
    SUCCESS,
    /**
     * In progress.
     */
    IN_PROGRESS,
    /**
     * General failure.
     */
    GENERAL_FAILURE,
    /**
     * Timeout.
     */
    TIMEOUT,
    /**
     * User ended session.
     */
    USER_ENDED_SESSION,
    /**
     * Bad parameter.
     */
    BAD_PARAMETER,
    /**
     * Phone is offline.
     */
    PHONE_OFFLINE,
    /**
     * Engine locked.
     */
    ENGINE_LOCKED,
    /**
     * Emergency call in progress.
     */
    E911_SESSION_IN_PROGRESS,
}
/**
 * State of the tracking session.
 */
enum PdsTrackingSessionState {
    /**
     * Unknown state.
     */
    UNKNOWN,
    /**
     * Session inactive.
     */
    INACTIVE,
    /**
     * Session active.
     */
    ACTIVE,
}
/**
 * QMI protocol errors.
 */
enum ProtocolError {
    /**
     * No error.
     */
    NONE,
    /**
     * Malformed message.
     */
    MALFORMEDMESSAGE,
    /**
     * No memory.
     */
    NOMEMORY,
    /**
     * Internal.
     */
    INTERNAL,
    /**
     * Aborted.
     */
    ABORTED,
    /**
     * Client IDs exhausted.
     */
    CLIENTIDSEXHAUSTED,
    /**
     * Unabortable transaction.
     */
    UNABORTABLETRANSACTION,
    /**
     * Invalid client ID.
     */
    INVALIDCLIENTID,
    /**
     * No thresholds provided.
     */
    NOTHRESHOLDSPROVIDED,
    /**
     * Invalid handle.
     */
    INVALIDHANDLE,
    /**
     * Invalid profile.
     */
    INVALIDPROFILE,
    /**
     * Invalid PIN ID.
     */
    INVALIDPINID,
    /**
     * Incorrect PIN.
     */
    INCORRECTPIN,
    /**
     * No network found.
     */
    NONETWORKFOUND,
    /**
     * Call failed.
     */
    CALLFAILED,
    /**
     * Out of call.
     */
    OUTOFCALL,
    /**
     * Not provisioned.
     */
    NOTPROVISIONED,
    /**
     * Missing argument.
     */
    MISSINGARGUMENT,
    /**
     * Argument too long.
     */
    ARGUMENTTOOLONG,
    /**
     * Invalid transaction ID.
     */
    INVALIDTRANSACTIONID,
    /**
     * Device in use.
     */
    DEVICEINUSE,
    /**
     * Network unsupported.
     */
    NETWORKUNSUPPORTED,
    /**
     * Device unsupported.
     */
    DEVICEUNSUPPORTED,
    /**
     * No effect.
     */
    NOEFFECT,
    /**
     * No free profile.
     */
    NOFREEPROFILE,
    /**
     * Invalid PDP type.
     */
    INVALIDPDPTYPE,
    /**
     * Invalid technology preference.
     */
    INVALIDTECHNOLOGYPREFERENCE,
    /**
     * Invalid profile type.
     */
    INVALIDPROFILETYPE,
    /**
     * Invalid service type.
     */
    INVALIDSERVICETYPE,
    /**
     * Invalid register action.
     */
    INVALIDREGISTERACTION,
    /**
     * Invalid PS attach action.
     */
    INVALIDPSATTACHACTION,
    /**
     * Authentication failed.
     */
    AUTHENTICATIONFAILED,
    /**
     * PIN blocked.
     */
    PINBLOCKED,
    /**
     * PIN always blocked.
     */
    PINALWAYSBLOCKED,
    /**
     * UIM uninitialized.
     */
    UIMUNINITIALIZED,
    /**
     * Maximum QoS requests in use.
     */
    MAXIMUMQOSREQUESTSINUSE,
    /**
     * Incorrect flow filter.
     */
    INCORRECTFLOWFILTER,
    /**
     * Network QoS unaware.
     */
    NETWORKQOSUNAWARE,
    /**
     * Invalid QoS ID.
     */
    INVALIDQOSID,
    /**
     * Requested number unsupported. Since: 1.22.
     */
    REQUESTEDNUMBERUNSUPPORTED,
    /**
     * Interface not found. Since: 1.22.
     */
    INTERFACENOTFOUND,
    /**
     * Flow suspended.
     */
    FLOWSUSPENDED,
    /**
     * Invalid data format. Since: 1.22.
     */
    INVALIDDATAFORMAT,
    /**
     * General error.
     */
    GENERALERROR,
    /**
     * Unknown error.
     */
    UNKNOWNERROR,
    /**
     * Invalid argument.
     */
    INVALIDARGUMENT,
    /**
     * Invalid index.
     */
    INVALIDINDEX,
    /**
     * No entry.
     */
    NOENTRY,
    /**
     * Device storage full.
     */
    DEVICESTORAGEFULL,
    /**
     * Device not ready.
     */
    DEVICENOTREADY,
    /**
     * Network not ready.
     */
    NETWORKNOTREADY,
    /**
     * WMS cause code.
     */
    WMSCAUSECODE,
    /**
     * WMS message not sent.
     */
    WMSMESSAGENOTSENT,
    /**
     * WMS message delivery failure.
     */
    WMSMESSAGEDELIVERYFAILURE,
    /**
     * WMS invalid message ID.
     */
    WMSINVALIDMESSAGEID,
    /**
     * WMS encoding.
     */
    WMSENCODING,
    /**
     * Authentication lock.
     */
    AUTHENTICATIONLOCK,
    /**
     * Invalid transition.
     */
    INVALIDTRANSITION,
    /**
     * Not a multicast interface. Since: 1.22.
     */
    NOTMCASTINTERFACE,
    /**
     * Maximum multicast requests in use. Since: 1.22.
     */
    MAXIMUMMCASTREQUESTSINUSE,
    /**
     * Invalid mulitcast handle. Since: 1.22.
     */
    INVALIDMCASTHANDLE,
    /**
     * Invalid IP family preference. Since: 1.22.
     */
    INVALIDIPFAMILYPREFERENCE,
    /**
     * Session inactive.
     */
    SESSIONINACTIVE,
    /**
     * Session invalid.
     */
    SESSIONINVALID,
    /**
     * Session ownership.
     */
    SESSIONOWNERSHIP,
    /**
     * Insufficient resources.
     */
    INSUFFICIENTRESOURCES,
    /**
     * Disabled.
     */
    DISABLED,
    /**
     * Invalid operation.
     */
    INVALIDOPERATION,
    /**
     * Invalid QMI command.
     */
    INVALIDQMICOMMAND,
    /**
     * WMS T-PDU type.
     */
    WMSTPDUTYPE,
    /**
     * WMS SMSC address.
     */
    WMSSMSCADDRESS,
    /**
     * Information unavailable.
     */
    INFORMATIONUNAVAILABLE,
    /**
     * Segment too long.
     */
    SEGMENTTOOLONG,
    /**
     * Segment order.
     */
    SEGMENTORDER,
    /**
     * Bundling not supported.
     */
    BUNDLINGNOTSUPPORTED,
    /**
     * Operation partial failure. Since: 1.22.
     */
    OPERATIONPARTIALFAILURE,
    /**
     * Policy mismatch. Since: 1.6.
     */
    POLICYMISMATCH,
    /**
     * SIM file not found.
     */
    SIMFILENOTFOUND,
    /**
     * Extended internal error. Since: 1.6.
     */
    EXTENDEDINTERNAL,
    /**
     * Access denied.
     */
    ACCESSDENIED,
    /**
     * Hardware restricted.
     */
    HARDWARERESTRICTED,
    /**
     * ACK not sent. Since: 1.6.
     */
    ACKNOTSENT,
    /**
     * Inject timeout. Since: 1.6.
     */
    INJECTTIMEOUT,
    /**
     * Incompatible state. Since: 1.6.
     */
    INCOMPATIBLESTATE,
    /**
     * FDN restrict. Since: 1.6.
     */
    FDNRESTRICT,
    /**
     * SUPS failure case. Since: 1.6.
     */
    SUPSFAILURECASE,
    /**
     * No radio. Since: 1.6.
     */
    NORADIO,
    /**
     * Not supported. Since: 1.6.
     */
    NOTSUPPORTED,
    /**
     * No subscription. Since: 1.6.
     */
    NOSUBSCRIPTION,
    /**
     * Card call control failed. Since: 1.6.
     */
    CARDCALLCONTROLFAILED,
    /**
     * Network aborted. Since: 1.6.
     */
    NETWORKABORTED,
    /**
     * Message blocked. Since: 1.6.
     */
    MSGBLOCKED,
    /**
     * Invalid session type. Since: 1.6.
     */
    INVALIDSESSIONTYPE,
    /**
     * Invalid PB type. Since: 1.6.
     */
    INVALIDPBTYPE,
    /**
     * No SIM. Since: 1.6.
     */
    NOSIM,
    /**
     * PB not ready. Since: 1.6.
     */
    PBNOTREADY,
    /**
     * PIN restriction. Since: 1.6.
     */
    PINRESTRICTION,
    /**
     * PIN2 restriction. Since: 1.6.
     */
    PIN1RESTRICTION,
    /**
     * PUK restriction. Since: 1.6.
     */
    PUKRESTRICTION,
    /**
     * PUK2 restriction. Since: 1.6.
     */
    PUK2RESTRICTION,
    /**
     * PB access restricted. Since: 1.6.
     */
    PBACCESSRESTRICTED,
    /**
     * PB delete in progress. Since: 1.22.
     */
    PBDELETEINPROGRESS,
    /**
     * PB text too long. Since: 1.6.
     */
    PBTEXTTOOLONG,
    /**
     * PB number too long. Since: 1.6.
     */
    PBNUMBERTOOLONG,
    /**
     * PB hidden key restriction. Since: 1.6.
     */
    PBHIDDENKEYRESTRICTION,
    /**
     * PB not available. Since: 1.22.
     */
    PBNOTAVAILABLE,
    /**
     * Device memory error. Since: 1.22.
     */
    DEVICEMEMORYERROR,
    /**
     * No permission. Since: 1.22.
     */
    NOPERMISSION,
    /**
     * Too soon. Since: 1.22.
     */
    TOOSOON,
    /**
     * Time not acquired. Since: 1.22.
     */
    TIMENOTACQUIRED,
    /**
     * Operation in progress. Since: 1.22.
     */
    OPERATIONINPROGRESS,
    /**
     * Firmware write failed. Since: 1.22.
     */
    FWWRITEFAILED,
    /**
     * Firmware info read failed. Since: 1.22.
     */
    FWINFOREADFAILED,
    /**
     * Firmware file not found. Since: 1.22.
     */
    FWFILENOTFOUND,
    /**
     * Firmware dir not found. Since: 1.22.
     */
    FWDIRNOTFOUND,
    /**
     * Firmware already activated. Since: 1.22.
     */
    FWALREADYACTIVATED,
    /**
     * Firmware cannot generic image. Since: 1.22.
     */
    FWCANNOTGENERICIMAGE,
    /**
     * Firmware file open failed. Since: 1.22.
     */
    FWFILEOPENFAILED,
    /**
     * Firmware update discontinuous frame. Since: 1.22.
     */
    FWUPDATEDISCONTINUOUSFRAME,
    /**
     * Firmware update failed. Since: 1.22.
     */
    FWUPDATEFAILED,
    /**
     * Event registration failed.
     */
    CATEVENTREGISTRATIONFAILED,
    /**
     * Invalid terminal response.
     */
    CATINVALIDTERMINALRESPONSE,
    /**
     * Invalid envelope command.
     */
    CATINVALIDENVELOPECOMMAND,
    /**
     * Envelope command busy.
     */
    CATENVELOPECOMMANDBUSY,
    /**
     * Envelope command failed.
     */
    CATENVELOPECOMMANDFAILED,
}
/**
 * QoS event.
 */
enum QosEvent {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Activated.
     */
    ACTIVATED,
    /**
     * Suspended.
     */
    SUSPENDED,
    /**
     * Gone.
     */
    GONE,
    /**
     * Modify accepted.
     */
    MODIFY_ACCEPTED,
    /**
     * Modify rejected.
     */
    MODIFY_REJECTED,
    /**
     * Information code updated.
     */
    INFO_CODE_UPDATED,
}
/**
 * QoS flow status.
 */
enum QosStatus {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Activated.
     */
    ACTIVATED,
    /**
     * Suspended.
     */
    SUSPENDED,
    /**
     * Gone.
     */
    GONE,
}
/**
 * SAR RF state. Each RF state corresponds to a TX power, and the mapping between TX power and RF state is dictated by NV items.
 */
enum SarRfState {
    /**
     * RF State 0
     */
    TODO_0,
    /**
     * RF State 1
     */
    TODO_1,
    /**
     * RF State 2
     */
    TODO_2,
    /**
     * RF State 3
     */
    TODO_3,
    /**
     * RF State 4
     */
    TODO_4,
    /**
     * RF State 5
     */
    TODO_5,
    /**
     * RF State 6
     */
    TODO_6,
    /**
     * RF State 7
     */
    TODO_7,
    /**
     * RF State 8
     */
    TODO_8,
    /**
     * RF State 9
     */
    TODO_9,
    /**
     * RF State 10
     */
    TODO_10,
    /**
     * RF State 11
     */
    TODO_11,
    /**
     * RF State 12
     */
    TODO_12,
    /**
     * RF State 13
     */
    TODO_13,
    /**
     * RF State 14
     */
    TODO_14,
    /**
     * RF State 15
     */
    TODO_15,
    /**
     * RF State 16
     */
    TODO_16,
    /**
     * RF State 17
     */
    TODO_17,
    /**
     * RF State 18
     */
    TODO_18,
    /**
     * RF State 19
     */
    TODO_19,
    /**
     * RF State 20
     */
    TODO_20,
}
/**
 * QMI services.
 */
enum Service {
    /**
     * Unknown service.
     */
    UNKNOWN,
    /**
     * Control service.
     */
    CTL,
    /**
     * Wireless Data Service.
     */
    WDS,
    /**
     * Device Management Service.
     */
    DMS,
    /**
     * Network Access Service.
     */
    NAS,
    /**
     * Quality Of Service service.
     */
    QOS,
    /**
     * Wireless Messaging Service.
     */
    WMS,
    /**
     * Position Determination Service.
     */
    PDS,
    /**
     * Authentication service.
     */
    AUTH,
    /**
     * AT service.
     */
    AT,
    /**
     * Voice service.
     */
    VOICE,
    /**
     * Card Application Toolkit service (v2).
     */
    CAT2,
    /**
     * User Identity Module service.
     */
    UIM,
    /**
     * Phonebook Management service.
     */
    PBM,
    /**
     * QCHAT service. Since: 1.8.
     */
    QCHAT,
    /**
     * Remote file system service.
     */
    RMTFS,
    /**
     * Test service. Since: 1.8.
     */
    TEST,
    /**
     * Location service (~ PDS v2).
     */
    LOC,
    /**
     * Service access proxy service.
     */
    SAR,
    /**
     * IMS settings service. Since: 1.8.
     */
    IMS,
    /**
     * Analog to digital converter driver service. Since: 1.8.
     */
    ADC,
    /**
     * Core sound driver service. Since: 1.8.
     */
    CSD,
    /**
     * Modem embedded file system service. Since: 1.8.
     */
    MFS,
    /**
     * Time service. Since: 1.8.
     */
    TIME,
    /**
     * Thermal sensors service. Since: 1.8.
     */
    TS,
    /**
     * Thermal mitigation device service. Since: 1.8.
     */
    TMD,
    /**
     * Service access proxy service. Since: 1.8.
     */
    SAP,
    /**
     * Wireless data administrative service. Since: 1.8.
     */
    WDA,
    /**
     * TSYNC control service. Since: 1.8.
     */
    TSYNC,
    /**
     * Remote file system access service. Since: 1.8.
     */
    RFSA,
    /**
     * Circuit switched videotelephony service. Since: 1.8.
     */
    CSVT,
    /**
     * Qualcomm mobile access point service. Since: 1.8.
     */
    QCMAP,
    /**
     * IMS presence service. Since: 1.8.
     */
    IMSP,
    /**
     * IMS videotelephony service. Since: 1.8.
     */
    IMSVT,
    /**
     * IMS application service. Since: 1.8.
     */
    IMSA,
    /**
     * Coexistence service. Since: 1.8.
     */
    COEX,
    /**
     * Persistent device configuration service. Since: 1.8.
     */
    PDC,
    /**
     * Simultaneous transmit service. Since: 1.8.
     */
    STX,
    /**
     * Bearer independent transport service. Since: 1.8.
     */
    BIT,
    /**
     * IMS RTP service. Since: 1.8.
     */
    IMSRTP,
    /**
     * RF radiated performance enhancement service. Since: 1.8.
     */
    RFRPE,
    /**
     * Data system determination service. Since: 1.8.
     */
    DSD,
    /**
     * Subsystem control service. Since: 1.8.
     */
    SSCTL,
    /**
     * Data Port Mapper service. Since: 1.30.
     */
    DPM,
    /**
     * Card Application Toolkit service (v1).
     */
    CAT,
    /**
     * Remote Management Service.
     */
    RMS,
    /**
     * Open Mobile Alliance device management service.
     */
    OMA,
    /**
     * Foxconn General Modem Service. Since: 1.32.
     */
    FOX,
    /**
     * Firmware Over The Air service. Since: 1.24.
     */
    FOTA,
    /**
     * Telit General Modem Service. Since: 1.24.
     */
    GMS,
    /**
     * Telit General Application Service. Since: 1.24.
     */
    GAS,
}
/**
 * SIO (serial I/O) port numbers. All ports available in the modem have a SIO
 * port number. This enum is incomplete, only few port numbers are publicly
 * known.
 */
enum SioPort {
    /**
     * Invalid port number.
     */
    NONE,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet0.
     */
    A2_MUX_RMNET0,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet1.
     */
    A2_MUX_RMNET1,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet2.
     */
    A2_MUX_RMNET2,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet3.
     */
    A2_MUX_RMNET3,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet4.
     */
    A2_MUX_RMNET4,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet5.
     */
    A2_MUX_RMNET5,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet6.
     */
    A2_MUX_RMNET6,
    /**
     * A2 MUX (BAM-DMUX) port for rmnet7.
     */
    A2_MUX_RMNET7,
}
/**
 * Card application personalization feature, when a code is required.
 */
enum UimCardApplicationPersonalizationFeature {
    /**
     * GW network.
     */
    GW_NETWORK,
    /**
     * GW network subset.
     */
    GW_NETWORK_SUBSET,
    /**
     * GW service provider.
     */
    GW_SERVICE_PROVIDER,
    /**
     * GW corporate.
     */
    GW_CORPORATE,
    /**
     * UIM.
     */
    GW_UIM,
    /**
     * 1X network type 1.
     */
    TODO_1X_NETWORK_TYPE_1,
    /**
     * 1X network type 2.
     */
    TODO_1X_NETWORK_TYPE_2,
    /**
     * 1X HRPD.
     */
    TODO_1X_HRPD,
    /**
     * 1X service provider.
     */
    TODO_1X_SERVICE_PROVIDER,
    /**
     * 1X corporate.
     */
    TODO_1X_CORPORATE,
    /**
     * 1X R-UIM.
     */
    TODO_1X_RUIM,
    /**
     * Unknown.
     */
    UNKNOWN,
}
/**
 * Card application personalization state.
 */
enum UimCardApplicationPersonalizationState {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Operation in progress.
     */
    IN_PROGRESS,
    /**
     * Ready.
     */
    READY,
    /**
     * Code required.
     */
    CODE_REQUIRED,
    /**
     * PUK code required.
     */
    PUK_CODE_REQUIRED,
    /**
     * Permanently blocked-
     */
    PERMANENTLY_BLOCKED,
}
/**
 * Card application state.
 */
enum UimCardApplicationState {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Detected.
     */
    DETECTED,
    /**
     * PIN1 or UPIN PIN required.
     */
    PIN1_OR_UPIN_PIN_REQUIRED,
    /**
     * PUK1 or UPIN PUK required.
     */
    PUK1_OR_UPIN_PUK_REQUIRED,
    /**
     * Personalization state must be checked.
     */
    CHECK_PERSONALIZATION_STATE,
    /**
     * PIN1 blocked.
     */
    PIN1_BLOCKED,
    /**
     * Illegal.
     */
    ILLEGAL,
    /**
     * Ready
     */
    READY,
}
/**
 * Card application type.
 */
enum UimCardApplicationType {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * SIM.
     */
    SIM,
    /**
     * USIM.
     */
    USIM,
    /**
     * RUIM.
     */
    RUIM,
    /**
     * CSIM.
     */
    CSIM,
    /**
     * ISIM.
     */
    ISIM,
}
/**
 * Card error.
 */
enum UimCardError {
    /**
     * Unknown error.
     */
    UNKNOWN,
    /**
     * Power down.
     */
    POWER_DOWN,
    /**
     * Poll error.
     */
    POLL,
    /**
     * No ATR received.
     */
    NO_ATR_RECEIVED,
    /**
     * Voltage mismatch.
     */
    VOLTAGE_MISMATCH,
    /**
     * Parity error.
     */
    PARITY,
    /**
     * Unknown error, possibly removed.
     */
    POSSIBLY_REMOVED,
    /**
     * Technical problem.
     */
    TECHNICAL,
}
/**
 * Protocol for the card.
 */
enum UimCardProtocol {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * ICC protocol.
     */
    ICC,
    /**
     * UICC protocol.
     */
    UICC,
}
/**
 * State of the card.
 */
enum UimCardState {
    /**
     * Absent.
     */
    ABSENT,
    /**
     * Present.
     */
    PRESENT,
    /**
     * Error.
     */
    ERROR,
}
/**
 * Depersonalization operation to perform.
 */
enum UimDepersonalizationOperation {
    /**
     * Deactivate personalization
     */
    DEACTIVATE,
    /**
     * Unblock personalization
     */
    UNBLOCK,
}
/**
 * Type of UIM file.
 */
enum UimFileType {
    /**
     * Transparent.
     */
    TRANSPARENT,
    /**
     * Cyclic.
     */
    CYCLIC,
    /**
     * Linear fixed.
     */
    LINEAR_FIXED,
    /**
     * Dedicated file.
     */
    DEDICATED_FILE,
    /**
     * Master file.
     */
    MASTER_FILE,
}
/**
 * State of the physical card.
 */
enum UimPhysicalCardState {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Absent.
     */
    ABSENT,
    /**
     * Present.
     */
    PRESENT,
}
/**
 * PIN ID.
 */
enum UimPinId {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * PIN1.
     */
    PIN1,
    /**
     * PIN2.
     */
    PIN2,
    /**
     * UPIN.
     */
    UPIN,
    /**
     * Hidden key.
     */
    HIDDEN_KEY,
}
/**
 * The PIN state.
 */
enum UimPinState {
    /**
     * Not initialized.
     */
    NOT_INITIALIZED,
    /**
     * Enabled, not verified.
     */
    ENABLED_NOT_VERIFIED,
    /**
     * Enabled, verified.
     */
    ENABLED_VERIFIED,
    /**
     * Disabled.
     */
    DISABLED,
    /**
     * Blocked.
     */
    BLOCKED,
    /**
     * Permanently Blocked.
     */
    PERMANENTLY_BLOCKED,
}
/**
 * Refresh mode
 */
enum UimRefreshMode {
    /**
     * Reset.
     */
    RESET,
    /**
     * Init.
     */
    INIT,
    /**
     * Init & FCN.
     */
    INIT_FCN,
    /**
     * FCN.
     */
    FCN,
    /**
     * Init & full FCN.
     */
    INIT_FULL_FCN,
    /**
     * Application reset.
     */
    APP_RESET,
    /**
     * 3G session reset.
     */
    TODO_3G_RESET,
}
/**
 * Current stage of the refresh procedure.
 */
enum UimRefreshStage {
    /**
     * Waiting for REFRESH OK message.
     */
    WAIT_FOR_OK,
    /**
     * Refresh started.
     */
    START,
    /**
     * Refresh completed successfully.
     */
    END_WITH_SUCCESS,
    /**
     * Refresh has failed.
     */
    END_WITH_FAILURE,
}
/**
 * Logic applicable to security attributes.
 */
enum UimSecurityAttributeLogic {
    /**
     * Always.
     */
    ALWAYS,
    /**
     * Never.
     */
    NEVER,
    /**
     * And.
     */
    AND,
    /**
     * Or.
     */
    OR,
    /**
     * Single.
     */
    SINGLE,
}
/**
 * Type of UIM session.
 */
enum UimSessionType {
    /**
     * Primary GSM/WCDMA provisioning.
     */
    PRIMARY_GW_PROVISIONING,
    /**
     * Primary CDMA1x provisioning.
     */
    PRIMARY_1X_PROVISIONING,
    /**
     * Secondary GSM/WCDMA provisioning.
     */
    SECONDARY_GW_PROVISIONING,
    /**
     * Secondary CDMA1x provisioning.
     */
    SECONDARY_1X_PROVISIONING,
    /**
     * Nonprovisioning on slot 1.
     */
    NONPROVISIONING_SLOT_1,
    /**
     * Nonprovisioning on slot 2.
     */
    NONPROVISIONING_SLOT_2,
    /**
     * Card on slot 1.
     */
    CARD_SLOT_1,
    /**
     * Card on slot 2.
     */
    CARD_SLOT_2,
    /**
     * Logical channel on slot 1.
     */
    LOGICAL_CHANNEL_SLOT_1,
    /**
     * Logical channel on slot 2.
     */
    LOGICAL_CHANNEL_SLOT_2,
    /**
     * Tertiary GSM/WCDMA provisioning. Since 1.28.
     */
    TERTIARY_GW_PROVISIONING,
    /**
     * Tertiary CDMA1x provisioning. Since 1.28.
     */
    TERTIARY_1X_PROVISIONING,
    /**
     * Quaternary GSM/WCDMA provisioning. Since 1.28.
     */
    QUATERNARY_GW_PROVISIONING,
    /**
     * Quaternary CDMA1x provisioning. Since 1.28.
     */
    QUATERNARY_1X_PROVISIONING,
    /**
     * Quinary GSM/WCDMA provisioning. Since 1.28.
     */
    QUINARY_GW_PROVISIONING,
    /**
     * Quinary CDMA1x provisioning. Since 1.28.
     */
    QUINARY_1X_PROVISIONING,
    /**
     * Nonprovisioning on slot 3. Since 1.28.
     */
    NONPROVISIONING_SLOT_3,
    /**
     * Nonprovisioning on slot 4. Since 1.28.
     */
    NONPROVISIONING_SLOT_4,
    /**
     * Nonprovisioning on slot 5. Since 1.28.
     */
    NONPROVISIONING_SLOT_5,
    /**
     * Card on slot 3. Since 1.28.
     */
    CARD_SLOT_3,
    /**
     * Card on slot 4. Since 1.28.
     */
    CARD_SLOT_4,
    /**
     * Card on slot 5. Since 1.28.
     */
    CARD_SLOT_5,
    /**
     * Logical channel on slot 3. Since 1.28.
     */
    LOGICAL_CHANNEL_SLOT_3,
    /**
     * Logical channel on slot 4. Since 1.28.
     */
    LOGICAL_CHANNEL_SLOT_4,
    /**
     * Logical channel on slot 5. Since 1.28.
     */
    LOGICAL_CHANNEL_SLOT_5,
}
/**
 * State of the slot.
 */
enum UimSlotState {
    /**
     * Inactive.
     */
    INACTIVE,
    /**
     * Active.
     */
    ACTIVE,
}
/**
 * Alpha Coding Scheme.
 */
enum VoiceAlphaDataCodingScheme {
    /**
     * SMS default 7-bit coded alphabet.
     */
    GSM,
    /**
     * UCS2.
     */
    UCS2,
}
/**
 * ALS line indicator.
 */
enum VoiceAls {
    /**
     * Line 1, default.
     */
    TODO_1,
    /**
     * Line 2.
     */
    TODO_2,
}
/**
 * Call control result type.
 */
enum VoiceCallControlResultType {
    /**
     * Voice.
     */
    VOICE,
    /**
     * Supplementary service.
     */
    SUPS,
    /**
     * Unstructured supplementary service.
     */
    USSD,
}
/**
 * Call control supplementary service type.
 */
enum VoiceCallControlSupplementaryServiceType {
    /**
     * Activate.
     */
    ACTIVATE,
    /**
     * Deactivate.
     */
    DEACTIVATE,
    /**
     * Register.
     */
    REGISTER,
    /**
     * Erase.
     */
    ERASE,
    /**
     * Interrogate.
     */
    INTERROGATE,
    /**
     * Register password.
     */
    REGISTER_PASSWORD,
    /**
     * USSD.
     */
    USSD,
}
/**
 * Call direction.
 */
enum VoiceCallDirection {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * Mobile-originated.
     */
    MO,
    /**
     * Mobile-terminated.
     */
    MT,
}
/**
 * Possible call end reasons resulting from a voice call or supplementary
 * service connection being terminated.
 */
enum VoiceCallEndReason {
    /**
     * Device is offline.
     */
    OFFLINE,
    /**
     * CDMA specific. Phone is CDMA locked.
     */
    CDMA_LOCK,
    /**
     * Device has no service.
     */
    NO_SERVICE,
    /**
     * Fade.
     */
    FADE,
    /**
     * CDMA specific. Received intercept from the BS.
     */
    INTERCEPT,
    /**
     * CDMA specific. Received reorder from the BS.
     */
    REORDER,
    /**
     * Received release from the BS.
     */
    RELEASE_NORMAL,
    /**
     * CDMA specific. Received release from the BS.
     */
    RELEASE_SO_REJECT,
    /**
     * CDMA specific. Received incoming call from the BS.
     */
    INCOMING_CALL,
    /**
     * CDMA specific. Received alert stop from the BS.
     */
    ALERT_STOP,
    /**
     * Client ended the call.
     */
    CLIENT_END,
    /**
     * CDMA specific. Received end activation.
     */
    ACTIVATION,
    /**
     * CDMA specific. MC aborted the origination/conversation.
     */
    MC_ABORT,
    /**
     * CDMA specific. Maximum access probes transmitted.
     */
    MAX_ACCESS_PROBE,
    /**
     * CDMA specific. Persistence test failure.
     */
    PSIST_N,
    /**
     * R-UIM not present.
     */
    UIM_NOT_PRESENT,
    /**
     * Access attempt in progress.
     */
    ACCESS_ATTEMPT_IN_PROGRESS,
    /**
     * Access failure.
     */
    ACCESS_FAILURE,
    /**
     * CDMA specific. Retry order.
     */
    ACCESS_RETRY_ORDER,
    /**
     * CDMA specific. Concurrent service not supported by the BS.
     */
    CCS_NOT_SUPPORTED_BY_BS,
    /**
     * CDMA specific. No response received from the BS.
     */
    NO_RESPONSE_FROM_BS,
    /**
     * CDMA specific. Rejected by the BS.
     */
    REJECTED_BY_BS,
    /**
     * CDMA specific. Concurrent services requested are incompatible.
     */
    INCOMPATIBLE,
    /**
     * CDMA specific. Access blocked by the BS.
     */
    ACCESS_BLOCK,
    /**
     * Already in TC.
     */
    ALREADY_IN_TC,
    /**
     * CDMA specific. Emergency call is flashed over this call.
     */
    EMERGENCY_FLASHED,
    /**
     * Call originated during GPS.
     */
    USER_CALL_ORIGINATED_DURING_GPS,
    /**
     * Call originated during SMS.
     */
    USER_CALL_ORIGINATED_DURING_SMS,
    /**
     * Call originated during data.
     */
    USER_CALL_ORIGINATED_DURING_DATA,
    /**
     * Redirection or handoff.
     */
    REDIRECTION_OR_HANDOFF,
    /**
     * Access blocked by BS for all.
     */
    ACCESS_BLOCK_ALL,
    /**
     * OTASP SPC error indication.
     */
    OTASP_SPC_ERR,
    /**
     * Maximum access probes for IS-707B call.
     */
    IS707B_MAX_ACCESS_PROBES,
    /**
     * Base station reject order.
     */
    ACCESS_FAILURE_REJECT_ORDER,
    /**
     * Base station retry order.
     */
    ACCESS_FAILURE_RETRY_ORDER,
    /**
     * Timer T42 expired.
     */
    TIMEOUT_T42,
    /**
     * Timer T40 expired.
     */
    TIMEOUT_T40,
    /**
     * Service initialization failure.
     */
    SERVICE_INIT_FAILURE,
    /**
     * Timer T50 expired.
     */
    TIMEOUT_T50,
    /**
     * Timer T51 expired.
     */
    TIMEOUT_T51,
    /**
     * Acknowledgement timeout due to 12 retransmissions.
     */
    RL_ACK_TIMEOUT,
    /**
     * Bad forward link or timer T5M expired.
     */
    BAD_FORWARD_LINK,
    /**
     * Transceiver Resource Manager request failed.
     */
    TRM_REQUEST_FAILED,
    /**
     * Timer T41 expired.
     */
    TIMEOUT_T41,
    /**
     * GSM/WCDMA specific. Client rejected incoming call.
     */
    INCOMING_REJECTED,
    /**
     * GSM/WCDMA specific. Client rejected a setup indication.
     */
    SETUP_REJECTED,
    /**
     * GSM/WCDMA specific. Network ended the call.
     */
    NETWORK_END,
    /**
     * GSM/WCDMA specific. No funds.
     */
    NO_FUNDS,
    /**
     * GSM/WCDMA specific. Device has no service.
     */
    NO_GW_SERVICE,
    /**
     * CDMA specific. Device has no service.
     */
    NO_CDMA_SERVICE,
    /**
     * Full service is unavailable.
     */
    NO_FULL_SERVICE,
    /**
     * No resources available to handle a new MO/MT PS call.
     */
    MAX_PS_CALLS,
    /**
     * Unknown subscriber.
     */
    UNKNOWN_SUBSCRIBER,
    /**
     * Illegal subscriber.
     */
    ILLEGAL_SUBSCRIBER,
    /**
     * Bearer service not provisioned.
     */
    BEARER_SERVICE_NOT_PROVISIONED,
    /**
     * Tele service not provisioned.
     */
    TELE_SERVICE_NOT_PROVISIONED,
    /**
     * Illegal equipment.
     */
    ILLEGAL_EQUIPMENT,
    /**
     * Call barred.
     */
    CALL_BARRED,
    /**
     * Illegal SS operation.
     */
    ILLEGAL_SS_OPERATION,
    /**
     * Supplementary service error status.
     */
    SS_ERROR_STATUS,
    /**
     * Supplementary service not available.
     */
    SS_NOT_AVAILABLE,
    /**
     * Supplementary service subscription violation.
     */
    SS_SUBSCRIPTION_VIOLATION,
    /**
     * Supplementary service incompatibility.
     */
    SS_INCOMPATIBILITY,
    /**
     * Facility not supported.
     */
    FACILITY_NOT_SUPPORTED,
    /**
     * Absent subscriber.
     */
    ABSENT_SUBSCRIBER,
    /**
     * Short term denial.
     */
    SHORT_TERM_DENIAL,
    /**
     * Long term denial.
     */
    LONG_TERM_DENIAL,
    /**
     * System failure.
     */
    SYSTEM_FAILURE,
    /**
     * Data missing.
     */
    DATA_MISSING,
    /**
     * Unexpected data value.
     */
    UNEXPECTED_DATA_VALUE,
    /**
     * Password registration failure.
     */
    PASSWORD_REGISTRATION_FAILURE,
    /**
     * Negative password check.
     */
    NEGATIVE_PASSWORD_CHECK,
    /**
     * Number of password attempts violation.
     */
    NUM_OF_PASSWORD_ATTEMPTS_VIOLATION,
    /**
     * Position method failure.
     */
    POSITION_METHOD_FAILURE,
    /**
     * Unknown alphabet.
     */
    UNKNOWN_ALPHABET,
    /**
     * USSD busy.
     */
    USSD_BUSY,
    /**
     * Rejected by user.
     */
    REJECTED_BY_USER,
    /**
     * Rejected by network.
     */
    REJECTED_BY_NETWORK,
    /**
     * Deflection to served subscriber.
     */
    DEFLECTION_TO_SERVED_SUBSCRIBER,
    /**
     * Special service codde.
     */
    SPECIAL_SERVICE_CODE,
    /**
     * Invalid deflected to number.
     */
    INVALID_DEFLECTED_TO_NUMBER,
    /**
     * Multiparty participants exceeded.
     */
    MULTIPARTY_PARTICIPANTS_EXCEEDED,
    /**
     * Resources not available.
     */
    RESOURCES_NOT_AVAILABLE,
    /**
     * Unassigned number.
     */
    UNASSIGNED_NUMBER,
    /**
     * No route to destination.
     */
    NO_ROUTE_TO_DESTINATION,
    /**
     * Channel unacceptable.
     */
    CHANNEL_UNACCEPTABLE,
    /**
     * Operator determined barring.
     */
    OPERATOR_DETERMINED_BARRING,
    /**
     * Normal call clearing.
     */
    NORMAL_CALL_CLEARING,
    /**
     * User busy.
     */
    USER_BUSY,
    /**
     * No user responding.
     */
    NO_USER_RESPONDING,
    /**
     * User alerting no answer.
     */
    USER_ALERTING_NO_ANSWER,
    /**
     * Call rejected.
     */
    CALL_REJECTED,
    /**
     * Number changed.
     */
    NUMBER_CHANGED,
    /**
     * Preemption.
     */
    PREEMPTION,
    /**
     * Destination out of order.
     */
    DESTINATION_OUT_OF_ORDER,
    /**
     * Invalid number format.
     */
    INVALID_NUMBER_FORMAT,
    /**
     * Facility rejected.
     */
    FACILITY_REJECTED,
    /**
     * Response to status enquiry.
     */
    RESPONSE_TO_STATUS_ENQUIRY,
    /**
     * Normal unspecified.
     */
    NORMAL_UNSPECIFIED,
    /**
     * No circuit or channel available.
     */
    NO_CIRCUIT_OR_CHANNEL_AVAILABLE,
    /**
     * Network out of order.
     */
    NETWORK_OUT_OF_ORDER,
    /**
     * Temporary failure.
     */
    TEMPORARY_FAILURE,
    /**
     * Switching equipment congestion.
     */
    SWITCHING_EQUIPMENT_CONGESTION,
    /**
     * Access information discarded.
     */
    ACCESS_INFORMATION_DISCARDED,
    /**
     * Requested circuit or channel not available.
     */
    REQUESTED_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE,
    /**
     * Resources unavailable or unspecified.
     */
    RESOURCES_UNAVAILABLE_OR_UNSPECIFIED,
    /**
     * QoS unavailable.
     */
    QOS_UNAVAILABLE,
    /**
     * Requested facility not subscribed.
     */
    REQUESTED_FACILITY_NOT_SUBSCRIBED,
    /**
     * Incoming calls barred withing closed user group.
     */
    INCOMING_CALLS_BARRED_WITHIN_CUG,
    /**
     * Bearer capability not auth.
     */
    BEARER_CAPABILITY_NOT_AUTH,
    /**
     * Bearer capability unavailable.
     */
    BEARER_CAPABILITY_UNAVAILABLE,
    /**
     * Service option not available.
     */
    SERVICE_OPTION_NOT_AVAILABLE,
    /**
     * ACM limit exceeded.
     */
    ACM_LIMIT_EXCEEDED,
    /**
     * Bearer service not implemented.
     */
    BEARER_SERVICE_NOT_IMPLEMENTED,
    /**
     * Requested facility not implemented.
     */
    REQUESTED_FACILITY_NOT_IMPLEMENTED,
    /**
     * Only digital information bearer available.
     */
    ONLY_DIGITAL_INFORMATION_BEARER_AVAILABLE,
    /**
     * Service or option not implemented.
     */
    SERVICE_OR_OPTION_NOT_IMPLEMENTED,
    /**
     * Invalid transaction identifier.
     */
    INVALID_TRANSACTION_IDENTIFIER,
    /**
     * User not member of closed user group.
     */
    USER_NOT_MEMBER_OF_CUG,
    /**
     * Incompatible destination.
     */
    INCOMPATIBLE_DESTINATION,
    /**
     * Invalid transit network selection.
     */
    INVALID_TRANSIT_NETWORK_SELECTION,
    /**
     * Semantically incorrect message.
     */
    SEMANTICALLY_INCORRECT_MESSAGE,
    /**
     * Invalid mandatory information.
     */
    INVALID_MANDATORY_INFORMATION,
    /**
     * Message type not implemented.
     */
    MESSAGE_TYPE_NOT_IMPLEMENTED,
    /**
     * Message type not compatible with protocol state.
     */
    MESSAGE_TYPE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
    /**
     * Information element non existent.
     */
    INFORMATION_ELEMENT_NON_EXISTENT,
    /**
     * IE error.
     */
    CONDITIONAL_IE_ERROR,
    /**
     * Message not compatible with protocol state.
     */
    MESSAGE_NOT_COMPATIBLE_WITH_PROTOCOL_STATE,
    /**
     * Recovery on timer expired.
     */
    RECOVERY_ON_TIMER_EXPIRED,
    /**
     * Protocol error unspecified.
     */
    PROTOCOL_ERROR_UNSPECIFIED,
    /**
     * Interworking unspecified.
     */
    INTERWORKING_UNSPECIFIED,
    /**
     * Outgoing calls barred within closed user group.
     */
    OUTGOING_CALLS_BARRED_WITHIN_CUG,
    /**
     * No closed user group selection.
     */
    NO_CUG_SELECTION,
    /**
     * Unknown closed user group index.
     */
    UNKNOWN_CUG_INDEX,
    /**
     * Closed user group index incompatible.
     */
    CUG_INDEX_INCOMPATIBLE,
    /**
     * Closed user group call failure unspecified.
     */
    CUG_CALL_FAILURE_UNSPECIFIED,
    /**
     * Calling line identification restriction not subscribed.
     */
    CLIR_NOT_SUBSCRIBED,
    /**
     * Completion of communications to busy subscriber possible.
     */
    CCBS_POSSIBLE,
    /**
     * Completion of communications to busy subscriber not possible.
     */
    CCBS_NOT_POSSIBLE,
    /**
     * IMSI unknown in HLR.
     */
    IMSI_UNKNOWN_IN_HLR,
    /**
     * Illegal MS.
     */
    ILLEGAL_MS,
    /**
     * IMSI unknown in VLR.
     */
    IMSI_UNKNOWN_IN_VLR,
    /**
     * IMEI not accepted.
     */
    IMEI_NOT_ACCEPTED,
    /**
     * Illegal ME.
     */
    ILLEGAL_ME,
    /**
     * PLMN not allowed.
     */
    PLMN_NOT_ALLOWED,
    /**
     * Location area not allowed.
     */
    LOCATION_AREA_NOT_ALLOWED,
    /**
     * Roaming not allowed in this location area.
     */
    ROAMING_NOT_ALLOWED_IN_THIS_LOCATION_AREA,
    /**
     * No suitable cells in location area.
     */
    NO_SUITABLE_CELLS_IN_LOCATION_AREA,
    /**
     * Network failure.
     */
    NETWORK_FAILURE,
    /**
     * MAC failure.
     */
    MAC_FAILURE,
    /**
     * Synch failure.
     */
    SYNCH_FAILURE,
    /**
     * Network contestion.
     */
    NETWORK_CONGESTION,
    /**
     * GSM authentication unacceptable.
     */
    GSM_AUTHENTICATION_UNACCEPTABLE,
    /**
     * Service not subscribed.
     */
    SERVICE_NOT_SUBSCRIBED,
    /**
     * Service temporarily out of order.
     */
    SERVICE_TEMPORARILY_OUT_OF_ORDER,
    /**
     * Call cannot be identified.
     */
    CALL_CANNOT_BE_IDENTIFIED,
    /**
     * Incorrect semantics in message.
     */
    INCORRECT_SEMANTICS_IN_MESSAGE,
    /**
     * Mandatory information invalid.
     */
    MANDATORY_INFORMATION_INVALID,
    /**
     * Access stratum failure.
     */
    ACCESS_STRATUM_FAILURE,
    /**
     * Invalid SIM.
     */
    INVALID_SIM,
    /**
     * Wrong state.
     */
    WRONG_STATE,
    /**
     * Access class blocked.
     */
    ACCESS_CLASS_BLOCKED,
    /**
     * No resources.
     */
    NO_RESOURCES,
    /**
     * Invalid user data.
     */
    INVALID_USER_DATA,
    /**
     * Timer T3230 expired.
     */
    TIMER_T3230_EXPIRED,
    /**
     * No cell available.
     */
    NO_CELL_AVAILABLE,
    /**
     * Abort message received.
     */
    ABORT_MESSAGE_RECEIVED,
    /**
     * Radio link lost.
     */
    RADIO_LINK_LOST,
    /**
     * Timer T303 expired.
     */
    TIMER_T303_EXPIRED,
    /**
     * CNM MM release pending.
     */
    CNM_MM_RELEASE_PENDING,
    /**
     * Access stratum reject, RR release indication.
     */
    ACCESS_STRATUM_REJECT_RR_RELEASE_INDICATION,
    /**
     * Access stratum reject, RR random access failure.
     */
    ACCESS_STRATUM_REJECT_RR_RANDOM_ACCESS_FAILURE,
    /**
     * Access stratum reject, RRC release indication.
     */
    ACCESS_STRATUM_REJECT_RRC_RELEASE_INDICATION,
    /**
     * Access stratum reject, RRC close session indication.
     */
    ACCESS_STRATUM_REJECT_RRC_CLOSE_SESSION_INDICATION,
    /**
     * Access stratum reject, RRC open session failure.
     */
    ACCESS_STRATUM_REJECT_RRC_OPEN_SESSION_FAILURE,
    /**
     * Access stratum reject, low level failure.
     */
    ACCESS_STRATUM_REJECT_LOW_LEVEL_FAILURE,
    /**
     * Access stratum reject, low level failure redial not allowed.
     */
    ACCESS_STRATUM_REJECT_LOW_LEVEL_FAILURE_REDIAL_NOT_ALLOWED,
    /**
     * Access stratum reject, low level immediate retry.
     */
    ACCESS_STRATUM_REJECT_LOW_LEVEL_IMMEDIATE_RETRY,
    /**
     * Access stratum reject, abort radio unavailable.
     */
    ACCESS_STRATUM_REJECT_ABORT_RADIO_UNAVAILABLE,
    /**
     * Service option not supported.
     */
    SERVICE_OPTION_NOT_SUPPORTED,
    /**
     * Bad request wait invite.
     */
    BAD_REQUEST_WAIT_INVITE,
    /**
     * Bad request wait reinvite.
     */
    BAD_REQUEST_WAIT_REINVITE,
    /**
     * Invalid remote URI.
     */
    INVALID_REMOTE_URI,
    /**
     * Remote unsupported media type.
     */
    REMOTE_UNSUPPORTED_MEDIA_TYPE,
    /**
     * Peer not reachable.
     */
    PEER_NOT_REACHABLE,
    /**
     * Network no response, timeout.
     */
    NETWORK_NO_RESPONSE_TIMEOUT,
    /**
     * Network no response, hold failure.
     */
    NETWORK_NO_RESPONSE_HOLD_FAILURE,
    /**
     * Data connection lost.
     */
    DATA_CONNECTION_LOST,
    /**
     * Upgrade/downgrade rejected.
     */
    UPGRADE_DOWNGRADE_REJECTED,
    /**
     * SIP 403 forbidden.
     */
    SIP_403_FORBIDDEN,
    /**
     * No network response.
     */
    NO_NETWORK_RESPONSE,
    /**
     * Upgrade/downgrade failed.
     */
    UPGRADE_DOWNGRADE_FAILED,
    /**
     * Upgrade/downgrade cancelled.
     */
    UPGRADE_DOWNGRADE_CANCELLED,
    /**
     * Service specific access control reject.
     */
    SSAC_REJECT,
    /**
     * Thermal emergency.
     */
    THERMAL_EMERGENCY,
    /**
     * 1xCSFG soft failure.
     */
    TODO_1XCSFB_SOFT_FAILURE,
    /**
     * 1xCSFG hard failure.
     */
    TODO_1XCSFB_HARD_FAILURE,
}
/**
 * Call mode.
 */
enum VoiceCallMode {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * CDMA.
     */
    CDMA,
    /**
     * GSM.
     */
    GSM,
    /**
     * UMTS.
     */
    UMTS,
    /**
     * LTE.
     */
    LTE,
}
/**
 * State of a call.
 */
enum VoiceCallState {
    /**
     * Unknown state.
     */
    UNKNOWN,
    /**
     * Call is being originated.
     */
    ORIGINATION,
    /**
     * Incoming call.
     */
    INCOMING,
    /**
     * Call is in progress.
     */
    CONVERSATION,
    /**
     * Call is originating but waiting for call control to complete.
     */
    CC_IN_PROGRESS,
    /**
     * Alerting.
     */
    ALERTING,
    /**
     * On hold.
     */
    HOLD,
    /**
     * Waiting.
     */
    WAITING,
    /**
     * Disconnecting.
     */
    DISCONNECTING,
    /**
     * Call is finished.
     */
    END,
    /**
     * 3GPP specific. MT call is in setup state.
     */
    SETUP,
}
/**
 * Type of a voice call.
 */
enum VoiceCallType {
    /**
     * Voice call.
     */
    VOICE,
    /**
     * VoIP call.
     */
    VOICE_IP,
    /**
     * OTAPA.
     */
    OTAPA,
    /**
     * Non-standard OTASP.
     */
    NON_STD_OTASP,
    /**
     * Emergency call.
     */
    EMERGENCY,
    /**
     * Supplementary service.
     */
    SUPS,
}
/**
 * Voice domain preference.
 */
enum VoiceDomain {
    /**
     * CS-only.
     */
    CS_ONLY,
    /**
     * PS-only.
     */
    PS_ONLY,
    /**
     * CS preferred, PS secondary.
     */
    CS_PREFERRED,
    /**
     * PS preferred, CS secondary.
     */
    PS_PREFERRED,
}
/**
 * Remote party number presentation indicator.
 */
enum VoicePresentation {
    /**
     * Allowed presentation.
     */
    ALLOWED,
    /**
     * Restricted presentation.
     */
    RESTRICTED,
    /**
     * Unavailable presentation.
     */
    UNAVAILABLE,
    /**
     * 3GPP specific. Payphone presentation.
     */
    PAYPHONE,
}
/**
 * Voice privacy.
 */
enum VoicePrivacy {
    /**
     * Standard.
     */
    STANDARD,
    /**
     * Enhanced.
     */
    ENHANCED,
}
/**
 * Service option.
 */
enum VoiceServiceOption {
    /**
     * Any service option.
     */
    WILD,
    /**
     * IS-96A.
     */
    IS_96A,
    /**
     * EVRC.
     */
    EVRC,
    /**
     * IS733.
     */
    TODO_13K_IS733,
    /**
     * Selectable mode vocoder.
     */
    SELECTABLE_MODE_VOCODER,
    /**
     * 4GV narrowband.
     */
    TODO_4GV_NARROW_BAND,
    /**
     * 4GV wideband.
     */
    TODO_4GV_WIDE_BAND,
    /**
     * 13K.
     */
    TODO_13K,
    /**
     * IS-96.
     */
    IS_96,
    /**
     * WVRC.
     */
    WVRC,
}
/**
 * Supplementary service action.
 */
enum VoiceSupplementaryServiceAction {
    /**
     * Activate supplementary service.
     */
    ACTIVATE,
    /**
     * De-activate supplementary service.
     */
    DEACTIVATE,
    /**
     * Register supplementary service.
     */
    REGISTER,
    /**
     * Erase/Un-register supplementary service.
     */
    ERASE,
}
/**
 * Supplementary service notification type.
 */
enum VoiceSupplementaryServiceNotificationType {
    /**
     * Outgoing call is forward.
     */
    OUTGOING_CALL_IS_FORWARDED,
    /**
     * Outgoing call is waiting.
     */
    OUTGOING_CALL_IS_WAITING,
    /**
     * Outgoing CUG call.
     */
    OUTGOING_CUG_CALL,
    /**
     * All outgoing calls are barred.
     */
    OUTGOING_CALLS_BARRED,
    /**
     * Outgoing call is deflected.
     */
    OUTGOING_CALL_IS_DEFLECTED,
    /**
     * Incoming CUG call.
     */
    INCOMING_CUG_CALL,
    /**
     * All incoming calls are barred.
     */
    INCOMING_CALLS_BARRED,
    /**
     * Incoming forwarded call.
     */
    INCOMING_FORWARDED_CALL,
    /**
     * Incoming deflected call.
     */
    INCOMING_DEFLECTED_CALL,
    /**
     * Incoming call is forwarded.
     */
    INCOMING_CALL_IS_FORWARDED,
    /**
     * Unconditional call forward is active.
     */
    UNCONDITIONAL_CALL_FORWARD_ACTIVE,
    /**
     * Conditional call forward is active.
     */
    CONDITIONAL_CALL_FORWARD_ACTIVE,
    /**
     * CLIR suppression is rejected.
     */
    CLIR_SUPPRESSION_REJECTED,
    /**
     * Call is on hold.
     */
    CALL_IS_ON_HOLD,
    /**
     * Call is retrieved.
     */
    CALL_IS_RETRIEVED,
    /**
     * Call is in multiparty.
     */
    CALL_IS_IN_MULTIPARTY,
    /**
     * Incoming call is ECT.
     */
    INCOMING_CALL_IS_ECT,
}
/**
 * Supplementary service reason.
 */
enum VoiceSupplementaryServiceReason {
    /**
     * Unconditional call forward.
     */
    FORWARD_UNCONDITIONAL,
    /**
     * Forward when mobile is busy.
     */
    FORWARD_MOBILE_BUSY,
    /**
     * Forward when no reply.
     */
    FORWARD_NO_REPLY,
    /**
     * Forward when call is unreachable.
     */
    FORWARD_UNREACHABLE,
    /**
     * Forward all calls.
     */
    FORWARD_ALL,
    /**
     * Forward all calls conditionally.
     */
    FORWARD_ALL_CONDITIONAL,
    /**
     * All outgoing.
     */
    ALL_OUTGOING,
    /**
     * Outgoing Internal.
     */
    OUTGOING_INTERNAL,
    /**
     * Outgoing internal/external to home.
     */
    OUTGOING_INTERNAL_EXTERNAL_TO_HOME,
    /**
     * All incoming.
     */
    ALL_INCOMING,
    /**
     * Roaming incoming.
     */
    INCOMING_ROAMING,
    /**
     * All calls are barred.
     */
    BAR_ALL,
    /**
     * All outgoing calls are barred.
     */
    BAR_ALL_OUTGOING,
    /**
     * All incoming calls are barred.
     */
    BAR_ALL_INCOMING,
    /**
     * Call waiting.
     */
    CALL_WAITING,
}
/**
 * Supplementary service type during call.
 */
enum VoiceSupplementaryServiceType {
    /**
     * Release held or waiting call.
     */
    RELEASE_HELD_OR_WAITING,
    /**
     * Release active call and accept held or waiting call.
     */
    RELEASE_ACTIVE_ACCEPT_HELD_OR_WAITING,
    /**
     * Hold active call and accept held or waiting call.
     */
    HOLD_ACTIVE_ACCEPT_WAITING_OR_HELD,
    /**
     * Hold all calls except specified call.
     */
    HOLD_ALL_EXCEPT_SPECIFIED_CALL,
    /**
     * Create conference call.
     */
    MAKE_CONFERENCE_CALL,
    /**
     * Explicit call transfer.
     */
    EXPLICIT_CALL_TRANSFER,
    /**
     * Activate completion of calls to busy subscriber.
     */
    CCBS_ACTIVATION,
    /**
     * End all calls.
     */
    END_ALL_CALLS,
    /**
     * Release a specified call.
     */
    RELEASE_SPECIFIED_CALL,
    /**
     * Put all active calls to hold.
     */
    LOCAL_HOLD,
    /**
     * Unhold all held calls.
     */
    LOCAL_UNHOLD,
}
/**
 * TTY mode.
 */
enum VoiceTtyMode {
    /**
     * Full.
     */
    FULL,
    /**
     * Voice carry over.
     */
    VCO,
    /**
     * Hearing carry over.
     */
    HCO,
    /**
     * Off.
     */
    OFF,
}
/**
 * User action type.
 */
enum VoiceUserAction {
    /**
     * Unknown user action.
     */
    UNKNOWN,
    /**
     * User is not required to respond to the USSD code.
     */
    NOT_REQUIRED,
    /**
     * User is required to respond to the USSD code.
     */
    REQUIRED,
}
/**
 * Data Coding Scheme used in USSD operations.
 */
enum VoiceUssDataCodingScheme {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * ASCII coding scheme.
     */
    ASCII,
    /**
     * 8-bit coding scheme.
     */
    TODO_8BIT,
    /**
     * UCS2.
     */
    UCS2,
}
/**
 * Data aggregation protocol in uplink or downlink.
 */
enum WdaDataAggregationProtocol {
    /**
     * Disabled.
     */
    DISABLED,
    /**
     * TLP enabled.
     */
    TLP,
    /**
     * QC NCM enabled.
     */
    QC_NCM,
    /**
     * MBIM enabled.
     */
    MBIM,
    /**
     * RNDIS enabled.
     */
    RNDIS,
    /**
     * QMAP enabled.
     */
    QMAP,
    /**
     * QMAPV2 enabled. Since: 1.30.
     */
    QMAPV2,
    /**
     * QMAPV3 enabled. Since: 1.30.
     */
    QMAPV3,
    /**
     * QMAPV4 enabled. Since: 1.30.
     */
    QMAPV4,
    /**
     * QMAPV5 enabled. Since: 1.28.
     */
    QMAPV5,
}
/**
 * Link layer protocol.
 */
enum WdaLinkLayerProtocol {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * 802.3 ethernet mode.
     */
    TODO_802_3,
    /**
     * Raw IP mode.
     */
    RAW_IP,
}
/**
 * Action when setting the attach PDN list.
 */
enum WdsAttachPdnListAction {
    /**
     * No action (default)
     */
    NONE,
    /**
     * PS detach or PDN disconnect based on the modem configuration
     */
    DETACH_OR_PDN_DISCONNECT,
}
/**
 * Status of the autoconnect setting.
 */
enum WdsAutoconnectSetting {
    /**
     * Disabled.
     */
    DISABLED,
    /**
     * Enabled.
     */
    ENABLED,
    /**
     * Paused, resume on power cycle.
     */
    PAUSED,
}
/**
 * Status of the autoconnect setting while roaming.
 */
enum WdsAutoconnectSettingRoaming {
    /**
     * Autoconnect always allowed, even when roaming.
     */
    ALLOWED,
    /**
     * Autoconnect allowed only in home network.
     */
    HOME_ONLY,
}
/**
 * Reason for ending the call.
 */
enum WdsCallEndReason {
    /**
     * Unspecified reason.
     */
    GENERIC_UNSPECIFIED,
    /**
     * Client end.
     */
    GENERIC_CLIENT_END,
    /**
     * No service.
     */
    GENERIC_NO_SERVICE,
    /**
     * Fade.
     */
    GENERIC_FADE,
    /**
     * Release normal.
     */
    GENERIC_RELEASE_NORMAL,
    /**
     * Access attempt in progress.
     */
    GENERIC_ACCESS_ATTEMPT_IN_PROGRESS,
    /**
     * Access Failure.
     */
    GENERIC_ACCESS_FAILURE,
    /**
     * Redirection or handoff.
     */
    GENERIC_REDIRECTION_OR_HANDOFF,
    /**
     * Close in progress.
     */
    GENERIC_CLOSE_IN_PROGRESS,
    /**
     * Authentication failed.
     */
    GENERIC_AUTHENTICATION_FAILED,
    /**
     * Internal error.
     */
    GENERIC_INTERNAL_ERROR,
    /**
     * CDMA specific. Phone is CDMA-locked.
     */
    CDMA_LOCK,
    /**
     * CDMA specific. Received intercept from the BS.
     */
    CDMA_INTERCEPT,
    /**
     * CDMA specific. Received reorder from the BS.
     */
    CDMA_REORDER,
    /**
     * CDMA specific. Received release from the BS, SO reject.
     */
    CDMA_RELEASE_SO_REJECT,
    /**
     * CDMA specific. Received incoming call from the BS.
     */
    CDMA_INCOMING_CALL,
    /**
     * CDMA specific. Received alert stop from the BS.
     */
    CDMA_ALERT_STOP,
    /**
     * CDMA specific. Received end activation.
     */
    CDMA_ACTIVATION,
    /**
     * CDMA specific. Maximum access probes transmitted.
     */
    CDMA_MAX_ACCESS_PROBES,
    /**
     * CDMA specific. Concurrent service not supported by the BS.
     */
    CDMA_CCS_NOT_SUPPORTED_BY_BS,
    /**
     * CDMA specific. No response received from the BS.
     */
    CDMA_NO_RESPONSE_FROM_BS,
    /**
     * CDMA specific. Rejected by the BS.
     */
    CDMA_REJECTED_BY_BS,
    /**
     * CDMA specific. Concurrent services requested are incompatible.
     */
    CDMA_INCOMPATIBLE,
    /**
     * CDMA specific. Already in TC.
     */
    CDMA_ALREADY_IN_TC,
    /**
     * CDMA specific. Call originated during GPS.
     */
    CDMA_USER_CALL_ORIGINATED_DURING_GPS,
    /**
     * CDMA specific. Call originated during SMS.
     */
    CDMA_USER_CALL_ORIGINATED_DURING_SMS,
    /**
     * CDMA specific. No service.
     */
    CDMA_NO_SERVICE,
    /**
     * GSM/WCDMA specific. Call origination request failed.
     */
    GSM_WCDMA_CONFERENCE_FAILED,
    /**
     * GSM/WCDMA specific. Client rejected incoming call.
     */
    GSM_WCDMA_INCOMING_REJECTED,
    /**
     * GSM/WCDMA specific. No service.
     */
    GSM_WCDMA_NO_SERVICE,
    /**
     * GSM/WCDMA specific. Network ended the call.
     */
    GSM_WCDMA_NETWORK_END,
    /**
     * GSM/WCDMA specific. LLC or SNDCP failure.
     */
    GSM_WCDMA_LLC_SNDCP_FAILURE,
    /**
     * GSM/WCDMA specific. Insufficient resources.
     */
    GSM_WCDMA_INSUFFICIENT_RESOURCES,
    /**
     * GSM/WCDMA specific. Service option temporarily out of order.
     */
    GSM_WCDMA_OPTION_TEMPORARILY_OUT_OF_ORDER,
    /**
     * GSM/WCDMA specific. NSAPI already used.
     */
    GSM_WCDMA_NSAPI_ALREADY_USED,
    /**
     * GSM/WCDMA specific. Regular PDP context deactivation.
     */
    GSM_WCDMA_REGULAR_DEACTIVATION,
    /**
     * GSM/WCDMA specific. Network failure.
     */
    GSM_WCDMA_NETWORK_FAILURE,
    /**
     * GSM/WCDMA specific. Reattach required.
     */
    GSM_WCDMA_REATTACH_REQUIRED,
    /**
     * GSM/WCDMA specific. Protocol error.
     */
    GSM_WCDMA_PROTOCOL_ERROR,
    /**
     * GSM/WCDMA specific. Operator-determined barring.
     */
    GSM_WCDMA_OPERATOR_DETERMINED_BARRING,
    /**
     * GSM/WCDMA specific. Unknown or missing APN.
     */
    GSM_WCDMA_UNKNOWN_APN,
    /**
     * GSM/WCDMA specific. Unknown PDP address or type.
     */
    GSM_WCDMA_UNKNOWN_PDP,
    /**
     * GSM/WCDMA specific. Activation rejected by GGSN.
     */
    GSM_WCDMA_GGSN_REJECT,
    /**
     * GSM/WCDMA specific. Activation rejected.
     */
    GSM_WCDMA_ACTIVATION_REJECT,
    /**
     * GSM/WCDMA specific. Service option not supported.
     */
    GSM_WCDMA_OPTION_NOT_SUPPORTED,
    /**
     * GSM/WCDMA specific. Service option not subscribed.
     */
    GSM_WCDMA_OPTION_UNSUBSCRIBED,
    /**
     * GSM/WCDMA specific. QoS not accepted.
     */
    GSM_WCDMA_QOS_NOT_ACCEPTED,
    /**
     * GSM/WCDMA specific. Semantic error in TFT operation.
     */
    GSM_WCDMA_TFT_SEMANTIC_ERROR,
    /**
     * GSM/WCDMA specific. Syntax error in TFT operation.
     */
    GSM_WCDMA_TFT_SYNTAX_ERROR,
    /**
     * GSM/WCDMA specific. Unknown PDP context.
     */
    GSM_WCDMA_UNKNOWN_PDP_CONTEXT,
    /**
     * GSM/WCDMA specific. Semantic error in packet filters.
     */
    GSM_WCDMA_FILTER_SEMANTIC_ERROR,
    /**
     * GSM/WCDMA specific. Syntax error in packet filters.
     */
    GSM_WCDMA_FILTER_SYNTAX_ERROR,
    /**
     * GSM/WCDMA specific. PDP context without TFT activated.
     */
    GSM_WCDMA_PDP_WITHOUT_ACTIVE_TFT,
    /**
     * GSM/WCDMA specific. Invalid transaction ID.
     */
    GSM_WCDMA_INVALID_TRANSACTION_ID,
    /**
     * GSM/WCDMA specific. Message incorrect semantically.
     */
    GSM_WCDMA_MESSAGE_INCORRECT_SEMANTIC,
    /**
     * GSM/WCDMA specific. Invalid mandatory information.
     */
    GSM_WCDMA_INVALID_MANDATORY_INFO,
    /**
     * GSM/WCDMA specific. Message type not implemented.
     */
    GSM_WCDMA_MESSAGE_TYPE_UNSUPPORTED,
    /**
     * GSM/WCDMA specific. Message not compatible with state.
     */
    GSM_WCDMA_MESSAGE_TYPE_NONCOMPATIBLE_STATE,
    /**
     * GSM/WCDMA specific. Information element unknown.
     */
    GSM_WCDMA_UNKNOWN_INFO_ELEMENT,
    /**
     * GSM/WCDMA specific. Conditional IE error.
     */
    GSM_WCDMA_CONDITIONAL_IE_ERROR,
    /**
     * GSM/WCDMA specific. Message and protocol state uncompatible.
     */
    GSM_WCDMA_MESSAGE_AND_PROTOCOL_STATE_UNCOMPATIBLE,
    /**
     * GSM/WCDMA specific. APN type conflict.
     */
    GSM_WCDMA_APN_TYPE_CONFLICT,
    /**
     * GSM/WCDMA specific. No GPRS context.
     */
    GSM_WCDMA_NO_GPRS_CONTEXT,
    /**
     * GSM/WCDMA specific. Feature not supported.
     */
    GSM_WCDMA_FEATURE_NOT_SUPPORTED,
    /**
     * CDMA/EVDO specific. Received Connection Deny: General or Network busy.
     */
    EVDO_CONNECTION_DENY_GENERAL_OR_BUSY,
    /**
     * CDMA/EVDO specific. Received Connection Deny: Billing or Authentication failure.
     */
    EVDO_CONNECTION_DENY_BILLING_OR_AUTHENTICATION_FAILURE,
    /**
     * CDMA/EVDO specific. Change HDR.
     */
    EVDO_HDR_CHANGE,
    /**
     * CDMA/EVDO specific. Exit HDR.
     */
    EVDO_HDR_EXIT,
    /**
     * CDMA/EVDO specific. No HDR session.
     */
    EVDO_HDR_NO_SESSION,
    /**
     * CDMA/EVDO specific. HDR call ended in favor of a GPS fix.
     */
    EVDO_HDR_ORIGINATION_DURING_GPS_FIX,
    /**
     * CDMA/EVDO specific. Connection setup timeout.
     */
    EVDO_HDR_CONNECTION_SETUP_TIMEOUT,
    /**
     * CDMA/EVDO specific. Released HDR call by call manager.
     */
    EVDO_HDR_RELEASED_BY_CM,
}
/**
 * Type of call to originate.
 */
enum WdsCallType {
    /**
     * Laptop call.
     */
    LAPTOP,
    /**
     * Embedded call.
     */
    EMBEDDED,
}
/**
 * Client Type
 */
enum WdsClientType {
    /**
     * client type tethered
     */
    TETHERED,
    /**
     * no client type defined
     */
    UNDEFINED,
}
/**
 * Status of the network connection.
 */
enum WdsConnectionStatus {
    /**
     * Unknown status.
     */
    UNKNOWN,
    /**
     * Network is disconnected
     */
    DISCONNECTED,
    /**
     * Network is connected.
     */
    CONNECTED,
    /**
     * Network connection is suspended.
     */
    SUSPENDED,
    /**
     * Network authentication is ongoing.
     */
    AUTHENTICATING,
}
/**
 * Data bearer technology.
 */
enum WdsDataBearerTechnology {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * CDMA2000 1x.
     */
    CDMA20001X,
    /**
     * CDMA2000 HRPD 1xEVDO.
     */
    TODO_1XEVDO,
    /**
     * GSM.
     */
    GSM,
    /**
     * UMTS.
     */
    UMTS,
    /**
     * CDMA2000 HRPD 1xEVDO RevA.
     */
    TODO_1XEVDO_REVA,
    /**
     * EDGE.
     */
    EDGE,
    /**
     * HSDPA and WCDMA.
     */
    HSDPA,
    /**
     * WCDMA and HSUPA.
     */
    HSUPA,
    /**
     * HSDPA and HSUPA.
     */
    HSDPA_HSUPDA,
    /**
     * LTE.
     */
    LTE,
    /**
     * CDMA2000 eHRPD.
     */
    EHRPD,
    /**
     * HSDPA+ and WCDMA.
     */
    HSDPAPLUS,
    /**
     * HSDPA+ and HSUPA.
     */
    HSDPAPLUS_HSUPA,
    /**
     * DC-HSDPA+ and WCDMA.
     */
    DCHSDPAPLUS,
    /**
     * DC-HSDPA+ and HSUPA.
     */
    DCHSDPAPLUS_HSUPA,
    /**
     * HSDPA+ with 64QAM. Since: 1.18.
     */
    HSDPAPLUS_PLUS_64QAM,
    /**
     * HSDPA+ with 64QAM and HSUPA. Since: 1.18.
     */
    HSDPAPLUS_PLUS_64QAM_HSUPA,
    /**
     * TD-SCDMA. Since: 1.18.
     */
    TDSCDMA,
    /**
     * TD-SCDMA and HSDPA. Since: 1.18.
     */
    TDSCDMA_HSDPA,
    /**
     * TD-SCDMA and HSUPA. Since: 1.18.
     */
    TDSCDMA_HSUPA,
}
/**
 * Data call status.
 */
enum WdsDataCallStatus {
    /**
     * data call status unknown.
     */
    UNKNOWN,
    /**
     * data call status activated.
     */
    ACTIVATED,
    /**
     * data call status terminated.
     */
    TERMINATED,
}
/**
 * Data call type.
 */
enum WdsDataCallType {
    /**
     * data call type unknown.
     */
    UNKNOWN,
    /**
     * embedded data call.
     */
    EMBEDDED,
    /**
     * tethered data call.
     */
    TETHERED,
    /**
     * modem embedded data call.
     */
    MODEM_EMBEDDED,
}
/**
 * Data system type.
 */
enum WdsDataSystem {
    /**
     * unknown
     */
    UNKNOWN,
    /**
     * CDMA 1x
     */
    CDMA1X,
    /**
     * CDMA 1x EVDO
     */
    CDMA1X_EVDO,
    /**
     * GPRS
     */
    GPRS,
    /**
     * WCDMA
     */
    WCDMA,
    /**
     * LTE
     */
    LTE,
    /**
     * TD-SCDMA.
     */
    TDSCDMA,
}
/**
 * Network type of the data system.
 */
enum WdsDataSystemNetworkType {
    /**
     * 3GPP network type.
     */
    TODO_3GPP,
    /**
     * 3GPP2 network type.
     */
    TODO_3GPP2,
}
/**
 * QoS delivery order.
 */
enum WdsDeliveryOrder {
    /**
     * Subscribe.
     */
    SUBSCRIBE,
    /**
     * On.
     */
    ON,
    /**
     * Off.
     */
    OFF,
}
/**
 * Dormancy status.
 */
enum WdsDormancyStatus {
    /**
     * dormancy status unknown.
     */
    UNKNOWN,
    /**
     * traffic channel is dormant.
     */
    TRAFFIC_CHANNEL_DORMANT,
    /**
     * traffic channel is active.
     */
    TRAFFIC_CHANNEL_ACTIVE,
}
/**
 * Extended DS profile errors.
 */
enum WdsDsProfileError {
    /**
     * Unknown DS profile error.
     */
    UNKNOWN,
    /**
     * General failure.
     */
    FAIL,
    /**
     * Invalid handle.
     */
    INVALID_HANDLE,
    /**
     * Invalid operation.
     */
    INVALID_OPERATION,
    /**
     * Invalid profile type.
     */
    INVALID_PROFILE_TYPE,
    /**
     * Invalid profile number.
     */
    INVALID_PROFILE_NUMBER,
    /**
     * Invalid profile identifier.
     */
    INVALID_PROFILE_ID,
    /**
     * Invalid argument.
     */
    INVALID_ARGUMENT,
    /**
     * Registry not initialized.
     */
    REGISTRY_NOT_INITIALIZED,
    /**
     * Invalid parameter length.
     */
    INVALID_PARAMETER_LENGTH,
    /**
     * List end, profile not found.
     */
    LIST_END,
    /**
     * Invalid subscription identifier.
     */
    INVALID_SUBSCRIPTION_ID,
    /**
     * Invalid profile family.
     */
    INVALID_PROFILE_FAMILY,
    /**
     * Invalid 3GPP profile family.
     */
    TODO_3GPP_INVALID_PROFILE_FAMILY,
    /**
     * Error accessing 3GPP profiles.
     */
    TODO_3GPP_ACCESS_ERROR,
    /**
     * 3GPP profile doesn't have a valid context.
     */
    TODO_3GPP_CONTEXT_NOT_DEFINED,
    /**
     * 3GPP profile doesn't have valid flag set.
     */
    TODO_3GPP_VALID_FLAG_NOT_SET,
    /**
     * 3GPP profile has read-only flag set.
     */
    TODO_3GPP_READ_ONLY_FLAG_SET,
    /**
     * Out of 3GPP profiles.
     */
    TODO_3GPP_OUT_OF_PROFILES,
    /**
     * Invalid 3GPP2 profile identifier.
     */
    TODO_3GPP2_INVALID_PROFILE_ID,
}
/**
 * Type of network allowed when trying to connect.
 */
enum WdsExtendedTechnologyPreference {
    /**
     * Use CDMA.
     */
    CDMA,
    /**
     * Use UMTS.
     */
    UMTS,
    /**
     * Use EPC, LTE.
     */
    EPC,
    /**
     * Use eMBMS.
     */
    EMBMS,
    /**
     * Use modem link-local.
     */
    MODEM_LINK_LOCAL,
}
/**
 * Type of IP family.
 */
enum WdsIpFamily {
    /**
     * unknown. Since: 1.18.
     */
    UNKNOWN,
    /**
     * IPv4.
     */
    IPV4,
    /**
     * IPv6.
     */
    IPV6,
    /**
     * None specified.
     */
    UNSPECIFIED,
}
/**
 * IP support type.
 */
enum WdsIpSupportType {
    /**
     * IPv4 type.
     */
    IPV4,
    /**
     * IPv6 type.
     */
    IPV6,
    /**
     * IPv4v6 type.
     */
    IPV4V6,
}
/**
 * Network type of the data bearer.
 */
enum WdsNetworkType {
    /**
     * Unknown.
     */
    UNKNOWN,
    /**
     * 3GPP2 network type.
     */
    TODO_3GPP2,
    /**
     * 3GPP network type.
     */
    TODO_3GPP,
}
/**
 * PDP data compression types.
 */
enum WdsPdpDataCompressionType {
    /**
     * no data compression
     */
    OFF,
    /**
     * manufacturer preferred
     */
    MANUFACTURER_PREFERRED,
    /**
     * V42bis
     */
    V42BIS,
    /**
     * V44
     */
    V44,
}
/**
 * PDP header compression types.
 */
enum WdsPdpHeaderCompressionType {
    /**
     * no header compression
     */
    OFF,
    /**
     * manufacturer preferred
     */
    MANUFACTURER_PREFERRED,
    /**
     * RFC1144
     */
    RFC1144,
    /**
     * RFC2507
     */
    RFC2507,
    /**
     * RFC3095
     */
    RFC3095,
}
/**
 * PDP context type.
 */
enum WdsPdpType {
    /**
     * IPv4
     */
    IPV4,
    /**
     * PPP
     */
    PPP,
    /**
     * IPv6
     */
    IPV6,
    /**
     * IPv4 and IPv6 combined context
     */
    IPV4_OR_IPV6,
}
/**
 * Profile family.
 */
enum WdsProfileFamily {
    /**
     * Embedded profile family.
     */
    EMBEDDED,
    /**
     * Tethered profile family.
     */
    TETHERED,
}
/**
 * Profile network type family.
 */
enum WdsProfileType {
    /**
     * 3GPP profile type.
     */
    TODO_3GPP,
    /**
     * 3GPP2 profile type.
     */
    TODO_3GPP2,
}
/**
 * QoS Class Identifier.
 */
enum WdsQosClassIdentifier {
    /**
     * network assigned
     */
    NETWORK_ASSIGN,
    /**
     * guaranteed bitrate 1
     */
    GUARANTEED_BITRATE1,
    /**
     * guaranteed bitrate 2
     */
    GUARANTEED_BITRATE2,
    /**
     * guaranteed bitrate 3
     */
    GUARANTEED_BITRATE3,
    /**
     * guaranteed bitrate 4
     */
    GUARANTEED_BITRATE4,
    /**
     * non-guaranteed bitrate 5
     */
    NON_GUARANTEED_BITRATE5,
    /**
     * non-guaranteed bitrate 6
     */
    NON_GUARANTEED_BITRATE6,
    /**
     * non-guaranteed bitrate 7
     */
    NON_GUARANTEED_BITRATE7,
    /**
     * non-guaranteed bitrate 8
     */
    NON_GUARANTEED_BITRATE8,
}
/**
 * Radio access technology.
 */
enum WdsRadioAccessTechnology {
    /**
     * null bearer
     */
    NULL_BEARER,
    /**
     * WCDMA.
     */
    TODO_3GPP_WCDMA,
    /**
     * GERAN.
     */
    TODO_3GPP_GERAN,
    /**
     * LTE.
     */
    TODO_3GPP_LTE,
    /**
     * TD-SDCMA.
     */
    TODO_3GPP_TDSCDMA,
    /**
     * 3GPP WLAN.
     */
    TODO_3GPP_WLAN,
    /**
     * 3GPP maximum.
     */
    TODO_3GPP_MAXIMUM,
    /**
     * CDMA 1x.
     */
    TODO_3GPP2_1X,
    /**
     * CDMA EVDO, HRPD.
     */
    TODO_3GPP2_HRPD,
    /**
     * CDMA EVDO with eHRPD.
     */
    TODO_3GPP2_EHRPD,
    /**
     * 3GPP2 WLAN.
     */
    TODO_3GPP2_WLAN,
    /**
     * 3GPP2 maximum.
     */
    TODO_3GPP2_MAXIMUM,
}
/**
 * Whether SDUs detected as erroneous are delivered or not.
 */
enum WdsSduErroneousDelivery {
    /**
     * Subscribe.
     */
    SUBSCRIBE,
    /**
     * No detection.
     */
    NO_DETECTION,
    /**
     * Erroneous SDUs are delivered.
     */
    ENABLED,
    /**
     * Erroneous SDUs are delivered.
     */
    DISABLED,
}
/**
 * Target value for the fraction of SDUs lost or detected as erroneous.
 */
enum WdsSduErrorRatio {
    /**
     * Subscribe.
     */
    SUBSCRIBE,
    /**
     * 1x10^2.
     */
    TODO_1E2,
    /**
     * 7x10^3.
     */
    TODO_7E3,
    /**
     * 1x10^3.
     */
    TODO_1E3,
    /**
     * 1x10^4.
     */
    TODO_1E4,
    /**
     * 1x10^5.
     */
    TODO_1E5,
    /**
     * 1x10^6.
     */
    TODO_1E6,
    /**
     * 1x10^7.
     */
    TODO_1E1,
}
/**
 * Target value for the undetected bit error ratio in the delivered SDUs.
 */
enum WdsSduResidualBitErrorRatio {
    /**
     * Subscribe.
     */
    SUBSCRIBE,
    /**
     * 5x10^2.
     */
    TODO_5E2,
    /**
     * 1x10^2.
     */
    TODO_1E2,
    /**
     * 5x10^3.
     */
    TODO_5E3,
    /**
     * 4x10^3.
     */
    TODO_4E3,
    /**
     * 1x10^3.
     */
    TODO_1E3,
    /**
     * 1x10^4.
     */
    TODO_1E4,
    /**
     * 1x10^5.
     */
    TODO_1E5,
    /**
     * 1x10^6.
     */
    TODO_1E6,
    /**
     * 6x10^8.
     */
    TODO_6E8,
}
/**
 * Tethered call type.
 */
enum WdsTetheredCallType {
    /**
     * non-tethered.
     */
    NON_TETHERED,
    /**
     * RmNet.
     */
    RMNET,
    /**
     * DUN.
     */
    DUN,
}
/**
 * QoS Traffic Classes.
 */
enum WdsTrafficClass {
    /**
     * default class, best-effort
     */
    SUBSCRIBED,
    /**
     * two-way video/voice, most delay sensitive
     */
    CONVERSATIONAL,
    /**
     * one-way video/audio, delay sensitive
     */
    STREAMING,
    /**
     * delay-sensitive, e.g. browsing, SSH.
     */
    INTERACTIVE,
    /**
     * delay-insensitive, e.g. downloads, email.
     */
    BACKGROUND,
}
/**
 * 3GPP-specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_3GPP.
 */
enum WdsVerboseCallEndReason3gpp {
    /**
     * Operator-determined barring.
     */
    OPERATOR_DETERMINED_BARRING,
    /**
     * LLC or SNDCP failure.
     */
    LLC_SNDCP_FAILURE,
    /**
     * Insufficient resources.
     */
    INSUFFICIENT_RESOURCES,
    /**
     * Unknown or missing APN.
     */
    UNKNOWN_APN,
    /**
     * Unknown PDP address or type.
     */
    UNKNOWN_PDP,
    /**
     * Authentication failed.
     */
    AUTHENTICATION_FAILED,
    /**
     * Activation rejected by GGSN.
     */
    GGSN_REJECT,
    /**
     * Activation rejected.
     */
    ACTIVATION_REJECT,
    /**
     * Service option not supported.
     */
    OPTION_NOT_SUPPORTED,
    /**
     * Service option not subscribed.
     */
    OPTION_UNSUBSCRIBED,
    /**
     * Service option temporarily out of order.
     */
    OPTION_TEMPORARILY_OUT_OF_ORDER,
    /**
     * NSAPI already used.
     */
    NSAPI_ALREADY_USED,
    /**
     * Regular PDP context deactivation.
     */
    REGULAR_DEACTIVATION,
    /**
     * QoS not accepted.
     */
    QOS_NOT_ACCEPTED,
    /**
     * Network failure.
     */
    NETWORK_FAILURE,
    /**
     * Reattach required.
     */
    REATTACH_REQUIRED,
    /**
     * Feature not supported.
     */
    FEATURE_NOT_SUPPORTED,
    /**
     * Semantic error in TFT operation.
     */
    TFT_SEMANTIC_ERROR,
    /**
     * Syntax error in TFT operation.
     */
    TFT_SYNTAX_ERROR,
    /**
     * Unknown PDP context.
     */
    UNKNOWN_PDP_CONTEXT,
    /**
     * Semantic error in packet filters.
     */
    FILTER_SEMANTIC_ERROR,
    /**
     * Syntax error in packet filters.
     */
    FILTER_SYNTAX_ERROR,
    /**
     * PDP context without TFT activated.
     */
    PDP_WITHOUT_ACTIVE_TFT,
    /**
     * IPv4 only allowed.
     */
    IPV4_ONLY_ALLOWED,
    /**
     * IPv6 only allowed.
     */
    IPV6_ONLY_ALLOWED,
    /**
     * Single address bearer only.
     */
    SINGLE_ADDRESS_BEARER_ONLY,
    /**
     * ESM information not received.
     */
    ESM_INFO_NOT_RECEIVED,
    /**
     * PDN connection does not exist.
     */
    PDN_CONNECTION_DOES_NOT_EXIST,
    /**
     * Multiple connection to same PDN not allowed.
     */
    MULTIPLE_CONNECTION_TO_SAME_PDN_NOT_ALLOWED,
    /**
     * Invalid transaction ID.
     */
    INVALID_TRANSACTION_ID,
    /**
     * Message incorrect semantically.
     */
    MESSAGE_INCORRECT_SEMANTIC,
    /**
     * Invalid mandatory information.
     */
    INVALID_MANDATORY_INFO,
    /**
     * Message type not implemented.
     */
    MESSAGE_TYPE_UNSUPPORTED,
    /**
     * Message not compatible with state.
     */
    MESSAGE_TYPE_NONCOMPATIBLE_STATE,
    /**
     * Information element unknown.
     */
    UNKNOWN_INFO_ELEMENT,
    /**
     * Conditional IE error.
     */
    CONDITIONAL_IE_ERROR,
    /**
     * Message and protocol state uncompatible.
     */
    MESSAGE_AND_PROTOCOL_STATE_UNCOMPATIBLE,
    /**
     * Protocol error.
     */
    PROTOCOL_ERROR,
    /**
     * APN type conflict.
     */
    APN_TYPE_CONFLICT,
    /**
     * Invalid proxy call session control function address. Since 1.24.10.
     */
    INVALID_PROXY_CALL_SESSION_CONTROL_FUNCTION_ADDRESS,
}
/**
 * Call manager specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_CM.
 */
enum WdsVerboseCallEndReasonCm {
    /**
     * CDMA specific. Phone is CDMA-locked.
     */
    CDMA_LOCK,
    /**
     * CDMA specific. Received intercept from the BS.
     */
    INTERCEPT,
    /**
     * CDMA specific. Received reorder from the BS.
     */
    REORDER,
    /**
     * CDMA specific. Received release from the BS, SO reject.
     */
    RELEASE_SO_REJECT,
    /**
     * CDMA specific. Received incoming call from the BS.
     */
    INCOMING_CALL,
    /**
     * CDMA specific. Received alert stop from the BS.
     */
    ALERT_STOP,
    /**
     * CDMA specific. Received end activation.
     */
    ACTIVATION,
    /**
     * CDMA specific. Maximum access probes transmitted.
     */
    MAX_ACCESS_PROBES,
    /**
     * CDMA specific. Concurrent service not supported by the BS.
     */
    CCS_NOT_SUPPORTED_BY_BS,
    /**
     * CDMA specific. No response received from the BS.
     */
    NO_RESPONSE_FROM_BS,
    /**
     * CDMA specific. Rejected by the BS.
     */
    REJECTED_BY_BS,
    /**
     * CDMA specific. Concurrent services requested are incompatible.
     */
    INCOMPATIBLE,
    /**
     * CDMA specific. Already in TC.
     */
    ALREADY_IN_TC,
    /**
     * CDMA specific. Call originated during GPS.
     */
    USER_CALL_ORIGINATED_DURING_GPS,
    /**
     * CDMA specific. Call originated during SMS.
     */
    USER_CALL_ORIGINATED_DURING_SMS,
    /**
     * CDMA specific. No service.
     */
    NO_CDMA_SERVICE,
    /**
     * MC abort. Since 1.24.10.
     */
    MC_ABORT,
    /**
     * Persistence test failure. Since 1.24.10.
     */
    PSIST_NG,
    /**
     * UIM not present. Since 1.24.10.
     */
    UIM_NOT_PRESENT,
    /**
     * Retry order.
     */
    RETRY_ORDER,
    /**
     * Access blocked. Since 1.24.10.
     */
    ACCESS_BLOCK,
    /**
     * Access blocked for all. Since 1.24.10.
     */
    ACCESS_BLOCK_ALL,
    /**
     * Maximum access probes for IS-707B call. Since 1.24.10.
     */
    IS707B_MAX_ACCESS_PROBES,
    /**
     * Thermal emergency. Since 1.24.10.
     */
    THERMAL_EMERGENCY,
    /**
     * Call origination throttled. Since 1.24.10.
     */
    CALL_ORIGINATION_THROTTLED,
    /**
     * Voice call originated and concurrent voice/data not supported. Since 1.24.10.
     */
    USER_CALL_ORIGINATED,
    /**
     * Conference failed. Since 1.24.10.
     */
    CONFERENCE_FAILED,
    /**
     * Incoming rejected.
     */
    INCOMING_REJECTED,
    /**
     * No gateway service.
     */
    NO_GATEWAY_SERVICE,
    /**
     * No GPRS context.
     */
    NO_GPRS_CONTEXT,
    /**
     * Illegal MS.
     */
    ILLEGAL_MS,
    /**
     * Illegal ME.
     */
    ILLEGAL_ME,
    /**
     * GPRS and non GPRS services not allowed.
     */
    GPRS_AND_NON_GPRS_SERVICES_NOT_ALLOWED,
    /**
     * GPRS services not allowed.
     */
    GPRS_SERVICES_NOT_ALLOWED,
    /**
     * MS identity not derived by the network.
     */
    MS_IDENTITY_NOT_DERIVED_BY_THE_NETWORK,
    /**
     * Implicitly detached.
     */
    IMPLICITLY_DETACHED,
    /**
     * PLMN not allowed.
     */
    PLMN_NOT_ALLOWED,
    /**
     * LA not allowed.
     */
    LA_NOT_ALLOWED,
    /**
     * GPRS services not allowed in PLMN.
     */
    GPRS_SERVICES_NOT_ALLOWED_IN_PLMN,
    /**
     * PDP duplicate.
     */
    PDP_DUPLICATE,
    /**
     * UE radio access technology change.
     */
    UE_RAT_CHANGE,
    /**
     * Congestion.
     */
    CONGESTION,
    /**
     * No PDP context activated.
     */
    NO_PDP_CONTEXT_ACTIVATED,
    /**
     * Access class DSAC rejection.
     */
    ACCESS_CLASS_DSAC_REJECTION,
    /**
     * Maximum retries failed to activate PDP context. Since 1.24.10.
     */
    PDP_ACTIVATE_MAX_RETRY_FAILED,
    /**
     * RAB failure. Since 1.24.10.
     */
    RAB_FAILURE,
    /**
     * EPS service not allowed. Since 1.24.10.
     */
    EPS_SERVICE_NOT_ALLOWED,
    /**
     * Tracking area not allowed. Since 1.24.10.
     */
    TRACKING_AREA_NOT_ALLOWED,
    /**
     * Roaming not allowed in tracking area. Since 1.24.10.
     */
    ROAMING_NOT_ALLOWED_IN_TRACKING_AREA,
    /**
     * No suitable cells in tracking area. Since 1.24.10.
     */
    NO_SUITABLE_CELLS_IN_TRACKING_AREA,
    /**
     * Not authorized in closed subscriber group. Since 1.24.10.
     */
    NOT_AUTHORIZED_CLOSED_SUBSCRIBER_GROUP,
    /**
     * EPS Session Management, unknown EPS bearer context. Since 1.24.10.
     */
    ESM_UNKNOWN_EPS_BEARER_CONTEXT,
    /**
     * DRB released at RRC. Since 1.24.10.
     */
    DRB_RELEASED_AT_RRC,
    /**
     * NAS signal connection released. Since 1.24.10.
     */
    NAS_SIGNAL_CONNECTION_RELEASED,
    /**
     * EPS Mobility Management, detached. Since 1.24.10.
     */
    EMM_DETACHED,
    /**
     * EPS Mobility Management, attach failed. Since 1.24.10.
     */
    EMM_ATTACH_FAILED,
    /**
     * EPS Mobility Management, attach started. Since 1.24.10.
     */
    EMM_ATTACH_STARTED,
    /**
     * LTE NAS service request failed. Since 1.24.10.
     */
    LTE_NAS_SERVICE_REQUEST_FAILED,
    /**
     * EPS Session Management, active dedicated bearer reactivated by network. Since 1.24.10.
     */
    ESM_ACTIVE_DEDICATED_BEARER_REACTIVATED_BY_NW,
    /**
     * EPS Session Management, lower layer failure. Since 1.24.10.
     */
    ESM_LOWER_LAYER_FAILURE,
    /**
     * EPS Session Management, sync up with network. Since 1.24.10.
     */
    ESM_SYNC_UP_WITH_NW,
    /**
     * EPS Session Management, network activated dedicated bearer with id of default bearer. Since 1.24.10.
     */
    ESM_NW_ACTIVATED_DEDICATED_BEARER_WITH_ID_OF_DEFAULT_BEARER,
    /**
     * EPS Session Management, bad OTA message. Since 1.24.10.
     */
    ESM_BAD_OTA_MESSAGE,
    /**
     * EPS Session Management, DS rejected call. Since 1.24.10.
     */
    ESM_DS_REJECTED_CALL,
    /**
     * EPS Session Management, context transferred due to IRAT. Since 1.24.10.
     */
    ESM_CONTEXT_TRANSFERRED_DUE_TO_IRAT,
    /**
     * DS explicit deactivation. Since 1.24.10.
     */
    DS_EXPLICIT_DEACT,
    /**
     * EPS Session Management, local cause none. Since 1.24.10.
     */
    ESM_LOCAL_CAUSE_NONE,
    /**
     * LTE NAS service request failed, no throttle. Since 1.24.10.
     */
    LTE_NAS_SERVICE_REQUEST_FAILED_NO_THROTTLE,
    /**
     * ACL failure. Since 1.24.10.
     */
    ACL_FAILURE,
    /**
     * LTE NAS service request failed, DS disallow. Since 1.24.10.
     */
    LTE_NAS_SERVICE_REQUEST_FAILED_DS_DISALLOW,
    /**
     * EPS Mobility Management, T3417 expired. Since 1.24.10.
     */
    EMM_T3417_EXPIRED,
    /**
     * EPS Mobility Management, T3417 ext expired. Since 1.24.10.
     */
    EMM_T3417_EXT_EXPIRED,
    /**
     * LTE Radio Resource Control, UL data confirmation failure, txn. Since 1.24.10.
     */
    LRRC_UL_DATA_CONFIRMATION_FAILURE_TXN,
    /**
     * LTE Radio Resource Control, UL data confirmation failure, handover. Since 1.24.10.
     */
    LRRC_UL_DATA_CONFIRMATION_FAILURE_HANDOVER,
    /**
     * LTE Radio Resource Control, UL data confirmation failure, connection release. Since 1.24.10.
     */
    LRRC_UL_DATA_CONFIRMATION_FAILURE_CONN_REL,
    /**
     * LTE Radio Resource Control, UL data confirmation failure, radio link failure. Since 1.24.10.
     */
    LRRC_UL_DATA_CONFIRMATION_FAILURE_RLF,
    /**
     * LTE Radio Resource Control, UL data confirmation failure, ctrl not conn. Since 1.24.10.
     */
    LRRC_UL_DATA_CONFIRMATION_FAILURE_CTRL_NOT_CONN,
    /**
     * LTE Radio Resource Control, connection establishment failure. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE,
    /**
     * LTE Radio Resource Control, connection establishment failure, aborted. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_ABORTED,
    /**
     * LTE Radio Resource Control, connection establishment failure, access barred. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_ACCESS_BARRED,
    /**
     * LTE Radio Resource Control, connection establishment failure, cell reselection. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_CELL_RESELECTION,
    /**
     * LTE Radio Resource Control, connection establishment failure, config failure. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_CONFIG_FAILURE,
    /**
     * LTE Radio Resource Control, connection establishment failure, timer expired. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_TIMER_EXPIRED,
    /**
     * LTE Radio Resource Control, connection establishment failure, link failure. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_LINK_FAILURE,
    /**
     * LTE Radio Resource Control, connection establishment failure, not camped. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_NOT_CAMPED,
    /**
     * LTE Radio Resource Control, connection establishment failure, SI failure. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_SI_FAILURE,
    /**
     * LTE Radio Resource Control, connection establishment failure, rejected. Since 1.24.10.
     */
    LRRC_CONNECTION_ESTABLISHMENT_FAILURE_REJECTED,
    /**
     * LTE Radio Resource Control, connection release, normal. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_NORMAL,
    /**
     * LTE Radio Resource Control, connection release, radio link failure. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_RLF,
    /**
     * LTE Radio Resource Control, connection release, cre failure. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_CRE_FAILURE,
    /**
     * LTE Radio Resource Control, connection release, oos during cre. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_OOS_DURING_CRE,
    /**
     * LTE Radio Resource Control, connection release, aborted. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_ABORTED,
    /**
     * LTE Radio Resource Control, connection release, SIB read error. Since 1.24.10.
     */
    LRRC_CONNECTION_RELEASE_SIB_READ_ERROR,
    /**
     * Detach with reattach LTE network detach. Since 1.24.10.
     */
    DETACH_WITH_REATTACH_LTE_NW_DETACH,
    /**
     * Detach without reattach LTE network detach. Since 1.24.10.
     */
    DETACH_WITHOUT_REATTACH_LTE_NW_DETACH,
    /**
     * EPS Session Management, proc timeout. Since 1.24.10.
     */
    ESM_PROC_TIMEOUT,
    /**
     * Message exceed max L2 limit. Since 1.24.10.
     */
    MESSAGE_EXCEED_MAX_L2_LIMIT,
    /**
     * CDMA/EVDO specific. Received Connection Deny. General or Network busy.
     */
    CONNECTION_DENY_GENERAL_OR_BUSY,
    /**
     * CDMA/EVDO specific. Received Connection Deny. Billing or Authentication failure.
     */
    CONNECTION_DENY_BILLING_OR_AUTHENTICATION_FAILURE,
    /**
     * CDMA/EVDO specific. Change HDR.
     */
    HDR_CHANGE,
    /**
     * CDMA/EVDO specific. Exit HDR.
     */
    HDR_EXIT,
    /**
     * CDMA/EVDO specific. No HDR session.
     */
    HDR_NO_SESSION,
    /**
     * CDMA/EVDO specific. HDR call ended in favor of a GPS fix.
     */
    HDR_ORIGINATION_DURING_GPS_FIX,
    /**
     * CDMA/EVDO specific. Connection setup timeout.
     */
    HDR_CONNECTION_SETUP_TIMEOUT,
    /**
     * CDMA/EVDO specific. Released HDR call by call manager.
     */
    HDR_RELEASED_BY_CM,
    /**
     * Failed to acquire co-located HDR for origination. Since 1.24.10.
     */
    HDR_COLLOCATED_ACQUISITION_FAILED,
    /**
     * CDMA/EVDO specific. OTASP commit in progress. Since 1.24.10.
     */
    OTASP_COMMIT_IN_PROGRESS,
    /**
     * CDMA/EVDO specific. No hybrid HDR service.
     */
    HDR_NO_HYBRID_SERVICE,
    /**
     * CDMA/EVDO specific. No lock granted. Since 1.24.10.
     */
    HDR_NO_LOCK_GRANTED,
    /**
     * CDMA/EVDO specific. hold other in progress. Since 1.24.10.
     */
    HOLD_OTHER_IN_PROGRESS,
    /**
     * CDMA/EVDO specific. Fade. Since 1.24.10.
     */
    HDR_FADE,
    /**
     * CDMA/EVDO specific. Access failure. Since 1.24.10.
     */
    HDR_ACCESS_FAILURE,
    /**
     * Client end.
     */
    CLIENT_END,
    /**
     * No service.
     */
    NO_SERVICE,
    /**
     * Fade.
     */
    FADE,
    /**
     * Release normal.
     */
    RELEASE_NORMAL,
    /**
     * Access attempt in progress.
     */
    ACCESS_ATTEMPT_IN_PROGRESS,
    /**
     * Access Failure.
     */
    ACCESS_FAILURE,
    /**
     * Redirection or handoff.
     */
    REDIRECTION_OR_HANDOFF,
    /**
     * Offline. Since 1.24.10.
     */
    OFFLINE,
    /**
     * Emergency mode. Since 1.24.10.
     */
    EMERGENCY_MODE,
    /**
     * Phone in use. Since 1.24.10.
     */
    PHONE_IN_USE,
    /**
     * Invalid mode. Since 1.24.10.
     */
    INVALID_MODE,
    /**
     * Invalid SIM state. Since 1.24.10.
     */
    INVALID_SIM_STATE,
    /**
     * No collocated HDR. Since 1.24.10.
     */
    NO_COLLOCATED_HDR,
    /**
     * Call control rejected. Since 1.24.10.
     */
    CALL_CONTROL_REJECTED,
}
/**
 * eHRPD-specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_EHRPD.
 */
enum WdsVerboseCallEndReasonEhrpd {
    /**
     * Subscription limited to IPv4.
     */
    SUBSCRIPTION_LIMITED_TO_IPV4,
    /**
     * Subscription limited to IPv6.
     */
    SUBSCRIPTION_LIMITED_TO_IPV6,
    /**
     * VSNCP specific. timeout.
     */
    VSNCP_TIMEOUT,
    /**
     * VSNCP specific. failure.
     */
    VSNCP_FAILURE,
    /**
     * VSNCP specific. 3GPP2 general error.
     */
    VSNCP_3GPP2_GENERAL_ERROR,
    /**
     * VSNCP specific. 3GPP2 unauthenticated APN.
     */
    VSNCP_3GPP2_UNAUTHENTICATED_APN,
    /**
     * VSNCP specific. 3GPP2 PDN limit exceeded.
     */
    VSNCP_3GPP2_PDN_LIMIT_EXCEEDED,
    /**
     * VSNCP specific. 3GPP2 no PDN gateway.
     */
    VSNCP_3GPP2_NO_PDN_GATEWAY,
    /**
     * VSNCP specific. 3GPP2 PDN gateway unreachable.
     */
    VSNCP_3GPP2_PDN_GATEWAY_UNREACHABLE,
    /**
     * VSNCP specific. 3GPP2 PDN gateway rejected.
     */
    VSNCP_3GPP2_PDN_GATEWAY_REJECTED,
    /**
     * VSNCP specific. 3GPP2 insufficient parameters.
     */
    VSNCP_3GPP2_INSUFFICIENT_PARAMETERS,
    /**
     * VSNCP specific. 3GPP2 resource unavailable.
     */
    VSNCP_3GPP2_RESOURCE_UNAVAILABLE,
    /**
     * VSNCP specific. 3GPP2 administratively prohibited.
     */
    VSNCP_3GPP2_ADMINISTRATIVELY_PROHIBITED,
    /**
     * VSNCP specific. 3GPP2 PDN ID in use.
     */
    VSNCP_3GPP2_PDN_ID_IN_USE,
    /**
     * VSNCP specific. 3GPP2 subscription limitation.
     */
    VSNCP_3GPP2_SUBSCRIPTION_LIMITATION,
    /**
     * VSNCP specific. 3GPP2 PDN exists for this APN.
     */
    VSNCP_3GPP2_PDN_EXISTS_FOR_THIS_APN,
}
/**
 * Internal call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_INTERNAL.
 */
enum WdsVerboseCallEndReasonInternal {
    /**
     * Internal error.
     */
    ERROR,
    /**
     * Call ended.
     */
    CALL_ENDED,
    /**
     * Unknown internal cause.
     */
    UNKNOWN_INTERNAL_CAUSE,
    /**
     * Unknown cause.
     */
    UNKNOWN_CAUSE,
    /**
     * Close in progress.
     */
    CLOSE_IN_PROGRESS,
    /**
     * Network initiated termination.
     */
    NETWORK_INITIATED_TERMINATION,
    /**
     * App preempted.
     */
    APP_PREEMPTED,
    /**
     * PDN IPv4 call disallowed. Since: 1.14.
     */
    PDN_IPV4_CALL_DISALLOWED,
    /**
     * PDN IPv4 call throttled. Since: 1.14.
     */
    PDN_IPV4_CALL_THROTTLED,
    /**
     * PDN IPv6 call disallowed. Since: 1.14.
     */
    PDN_IPV6_CALL_DISALLOWED,
    /**
     * PDN IPv6 call throttled. Since: 1.14.
     */
    PDN_IPV6_CALL_THROTTLED,
    /**
     * Modem restart. Since: 1.14.
     */
    MODEM_RESTART,
    /**
     * PDP PPP not supported. Since: 1.14.
     */
    PDP_PPP_NOT_SUPPORTED,
    /**
     * Unpreferred RAT. Since: 1.14.
     */
    UNPREFERRED_RAT,
    /**
     * Physical link close in progress. Since: 1.14.
     */
    PHYSICAL_LINK_CLOSE_IN_PROGRESS,
    /**
     * APN pending handover. Since: 1.14.
     */
    APN_PENDING_HANDOVER,
    /**
     * Profile bearer incompatible. Since: 1.14.
     */
    PROFILE_BEARER_INCOMPATIBLE,
    /**
     * MMGDSI Card event. Since: 1.14.
     */
    MMGDSI_CARD_EVENT,
    /**
     * LPM or power down. Since: 1.14.
     */
    LPM_OR_POWER_DOWN,
    /**
     * APN disabled. Since: 1.14.
     */
    APN_DISABLED,
    /**
     * MPIT expired. Since: 1.14.
     */
    MPIT_EXPIRED,
    /**
     * IPv6 address transfer failed. Since: 1.14.
     */
    IPV6_ADDRESS_TRANSFER_FAILED,
    /**
     * TRAT swap failed. Since: 1.14.
     */
    TRAT_SWAP_FAILED,
    /**
     * eHRPD to HRPD fallback. Since 1.24.10.
     */
    EHRPD_TO_HRPD_FALLBACK,
    /**
     * Mandatory APN disabled. Since 1.24.10.
     */
    MANDATORY_APN_DISABLED,
    /**
     * MIP config failure. Since 1.24.10.
     */
    MIP_CONFIG_FAILURE,
    /**
     * PDN inactivity timeout expired. Since 1.24.10.
     */
    PDN_INACTIVITY_TIMER_EXPIRED,
    /**
     * Max IPv4 connections. Since 1.24.10.
     */
    MAX_V4_CONNECTIONS,
    /**
     * Max IPv6 connections. Since 1.24.10.
     */
    MAX_V6_CONNECTIONS,
    /**
     * APN mismatch. Since 1.24.10.
     */
    APN_MISMATCH,
    /**
     * IP version mismatch. Since 1.24.10.
     */
    IP_VERSION_MISMATCH,
    /**
     * DUN call disallowed. Since 1.24.10.
     */
    DUN_CALL_DISALLOWED,
    /**
     * Invalid profile. Since 1.24.10.
     */
    INVALID_PROFILE,
    /**
     * EPC to non-EPC transition. Since 1.24.10.
     */
    EPC_NONEPC_TRANSITION,
    /**
     * Invalid profile ID. Since 1.24.10.
     */
    INVALID_PROFILE_ID,
    /**
     * Call already present. Since 1.24.10.
     */
    CALL_ALREADY_PRESENT,
    /**
     * Interface in use. Since 1.24.10.
     */
    INTERFACE_IN_USE,
    /**
     * IP PDP mismatch. Since 1.24.10.
     */
    IP_PDP_MISMATCH,
    /**
     * APN disallowed on roaming. Since 1.24.10.
     */
    APN_DISALLOWED_ON_ROAMING,
    /**
     * APN parameter change. Since 1.24.10.
     */
    APN_PARAMETER_CHANGE,
    /**
     * Interface in use config match. Since 1.24.10.
     */
    INTERFACE_IN_USE_CONFIG_MATCH,
    /**
     * NULL APN disallowed. Since 1.24.10.
     */
    NULL_APN_DISALLOWED,
    /**
     * Thermal mitigation. Since 1.24.10.
     */
    THERMAL_MITIGATION,
    /**
     * Subs ID mismatch Since 1.24.10.
     */
    SUBS_ID_MISMATCH,
    /**
     * Data settings disabled. Since 1.24.10.
     */
    DATA_SETTINGS_DISABLED,
    /**
     * Data roaming settings disabled. Since 1.24.10.
     */
    DATA_ROAMING_SETTINGS_DISABLED,
    /**
     * APN format invalid. Since 1.24.10.
     */
    APN_FORMAT_INVALID,
    /**
     * DDS call abort. Since 1.24.10.
     */
    DDS_CALL_ABORT,
    /**
     * Validation failure. Since 1.24.10.
     */
    VALIDATION_FAILURE,
}
/**
 * IPv6-specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_IPV6.
 */
enum WdsVerboseCallEndReasonIpv6 {
    /**
     * Prefix unavailable.
     */
    PREFIX_UNAVAILABLE,
    /**
     * HRDP IPv6 disabled.
     */
    HRPD_IPV6_DISABLED,
    /**
     * IPv6 disabled. Since 1.24.10.
     */
    DISABLED,
}
/**
 * Mobile IP specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_MIP.
 */
enum WdsVerboseCallEndReasonMip {
    /**
     * Unknown reason.
     */
    ERROR_REASON_UNKNOWN,
    /**
     * FA error. Reason unspecified.
     */
    FA_ERROR_REASON_UNSPECIFIED,
    /**
     * FA error. Administratively prohibited.
     */
    FA_ERROR_ADMINISTRATIVELY_PROHIBITED,
    /**
     * FA error. Insufficient resources.
     */
    FA_ERROR_INSUFFICIENT_RESOURCES,
    /**
     * FA error. Mobile node authenticatin failure.
     */
    FA_ERROR_MOBILE_NODE_AUTHENTICATION_FAILURE,
    /**
     * FA error. HA authentication failure.
     */
    FA_ERROR_HA_AUTHENTICATION_FAILURE,
    /**
     * FA error. Requested lifetime too long.
     */
    FA_ERROR_REQUESTED_LIFETIME_TOO_LONG,
    /**
     * FA error. Malformed request.
     */
    FA_ERROR_MALFORMED_REQUEST,
    /**
     * FA error. Malformed reply.
     */
    FA_ERROR_MALFORMED_REPLY,
    /**
     * FA error. Encapsulation unavailable.
     */
    FA_ERROR_ENCAPSULATION_UNAVAILABLE,
    /**
     * FA error. VJHC unavailable.
     */
    FA_ERROR_VJHC_UNAVAILABLE,
    /**
     * FA error. Reverse tunnel unavailable.
     */
    FA_ERROR_REVERSE_TUNNEL_UNAVAILABLE,
    /**
     * FA error. Reverse tunnel mandatory and T bit not set.
     */
    FA_ERROR_REVERSE_TUNNEL_MANDATORY_AND_T_BIT_NOT_SET,
    /**
     * FA error. Delivery style not supported.
     */
    FA_ERROR_DELIVERY_STYLE_NOT_SUPPORTED,
    /**
     * FA error. Missing NAI.
     */
    FA_ERROR_MISSING_NAI,
    /**
     * FA error. Missing HA.
     */
    FA_ERROR_MISSING_HA,
    /**
     * FA error. Missing home address.
     */
    FA_ERROR_MISSING_HOME_ADDRESS,
    /**
     * FA error. Unknown challenge.
     */
    FA_ERROR_UNKNOWN_CHALLENGE,
    /**
     * FA error. Missing challenge.
     */
    FA_ERROR_MISSING_CHALLENGE,
    /**
     * FA error. Stale challenge.
     */
    FA_ERROR_STALE_CHALLENGE,
    /**
     * HA error. Reason unspecified.
     */
    HA_ERROR_REASON_UNSPECIFIED,
    /**
     * HA error. Administratively prohibited.
     */
    HA_ERROR_ADMINISTRATIVELY_PROHIBITED,
    /**
     * HA error. Insufficient resources.
     */
    HA_ERROR_INSUFFICIENT_RESOURCES,
    /**
     * HA error. Mobile node authentication failure.
     */
    HA_ERROR_MOBILE_NODE_AUTHENTICATION_FAILURE,
    /**
     * HA error. FA authentication failure.
     */
    HA_ERROR_FA_AUTHENTICATION_FAILURE,
    /**
     * HA error. Registration ID mismatch.
     */
    HA_ERROR_REGISTRATION_ID_MISMATCH,
    /**
     * HA error. Malformed request.
     */
    HA_ERROR_MALFORMED_REQUEST,
    /**
     * HA error. Unknown HA address.
     */
    HA_ERROR_UNKNOWN_HA_ADDRESS,
    /**
     * HA error. Reverse tunnel unavailable.
     */
    HA_ERROR_REVERSE_TUNNEL_UNAVAILABLE,
    /**
     * HA error. Reverse tunnel mandatory and T bit not set.
     */
    HA_ERROR_REVERSE_TUNNEL_MANDATORY_AND_T_BIT_NOT_SET,
    /**
     * HA error. Encapsulation unavailable.
     */
    HA_ERROR_ENCAPSULATION_UNAVAILABLE,
}
/**
 * PPP-specific call end reasons, given when the `QmiWdsVerboseCallEndReasonType` is #QMI_WDS_VERBOSE_CALL_END_REASON_TYPE_PPP.
 */
enum WdsVerboseCallEndReasonPpp {
    /**
     * Unknown error.
     */
    UNKNOWN,
    /**
     * Timeout.
     */
    TIMEOUT,
    /**
     * Authentication failure.
     */
    AUTHENTICATION_FAILURE,
    /**
     * Option mismatch.
     */
    OPTION_MISMATCH,
    /**
     * PAP failure.
     */
    PAP_FAILURE,
    /**
     * CHAP failure.
     */
    CHAP_FAILURE,
    /**
     * Close in progress. Since 1.24.10.
     */
    CLOSE_IN_PROGRESS,
}
/**
 * Type of verbose call end reason.
 */
enum WdsVerboseCallEndReasonType {
    /**
     * Mobile IP.
     */
    MIP,
    /**
     * Internal.
     */
    INTERNAL,
    /**
     * Call manager.
     */
    CM,
    /**
     * 3GPP.
     */
    TODO_3GPP,
    /**
     * PPP.
     */
    PPP,
    /**
     * eHRPD.
     */
    EHRPD,
    /**
     * IPv6.
     */
    IPV6,
}
/**
 * Ack failure cause.
 */
enum WmsAckFailureCause {
    /**
     * No network response.
     */
    NO_NETWORK_RESPONSE,
    /**
     * Network released link.
     */
    NETWORK_RELEASED_LINK,
    /**
     * Not sent.
     */
    NOT_SENT,
}
/**
 * Indication of whether ACK needs to be sent or not.
 */
enum WmsAckIndicator {
    /**
     * ACK needs to be sent.
     */
    SEND,
    /**
     * ACK doesn't need to be sent.
     */
    DO_NOT_SEND,
}
/**
 * Cause codes when failed to send an SMS in CDMA.
 */
enum WmsCdmaCauseCode {
    /**
     * Address is valid but not yet allocated. Since 1.18.
     */
    NETWORK_ADDRESS_VACANT,
    /**
     * Address is invalid. Since 1.18.
     */
    NETWORK_ADDRESS_TRANSLATION_FAILURE,
    /**
     * Network resource shortage. Since 1.18.
     */
    NETWORK_RESOURCE_SHORTAGE,
    /**
     * Network failed. Since 1.18.
     */
    NETWORK_FAILURE,
    /**
     * SMS teleservice ID is invalid. Since 1.18.
     */
    NETWORK_INVALID_TELESERVICE_ID,
    /**
     * Other network error. Since 1.18.
     */
    NETWORK_OTHER,
    /**
     * No page response from destination. Since 1.18.
     */
    DESTINATION_NO_PAGE_RESPONSE,
    /**
     * Destination is busy. Since 1.18.
     */
    DESTINATION_BUSY,
    /**
     * No acknowledge from destination. Since 1.18.
     */
    DESTINATION_NO_ACK,
    /**
     * Destination resource shortage. Since 1.18.
     */
    DESTINATION_RESOURCE_SHORTAGE,
    /**
     * SMS delivery postponed. Since 1.18.
     */
    DESTINATION_SMS_DELIVERY_POSTPONED,
    /**
     * Destination out of service. Since 1.18.
     */
    DESTINATION_OUT_OF_SERVICE,
    /**
     * Destination not at address. Since 1.18.
     */
    DESTINATION_NOT_AT_ADDRESS,
    /**
     * Other destination error. Since 1.18.
     */
    DESTINATION_OTHER,
    /**
     * Radio interface resource shortage. Since 1.18.
     */
    RADIO_INTERFACE_RESOURCE_SHORTAGE,
    /**
     * Radio interface incompatibility. Since 1.18.
     */
    RADIO_INTERFACE_INCOMPATIBILITY,
    /**
     * Other radio interface error. Since 1.18.
     */
    RADIO_INTERFACE_OTHER,
    /**
     * Encoding error. Since 1.18.
     */
    GENERAL_ENCODING,
    /**
     * SMS origin denied. Since 1.18.
     */
    GENERAL_SMS_ORIGIN_DENIED,
    /**
     * SMS destination denied. Since 1.18.
     */
    GENERAL_SMS_DESTINATION_DENIED,
    /**
     * Supplementary service not supported. Since 1.18.
     */
    GENERAL_SUPPLEMENTARY_SERVICE_NOT_SUPPORTED,
    /**
     * SMS not supported. Since 1.18.
     */
    GENERAL_SMS_NOT_SUPPORTED,
    /**
     * Missing optional expected parameter. Since 1.18.
     */
    GENERAL_MISSING_EXPECTED_PARAMETER,
    /**
     * Missing mandatory parameter. Since 1.18.
     */
    GENERAL_MISSING_MANDATORY_PARAMETER,
    /**
     * Unrecognized parameter value. Since 1.18.
     */
    GENERAL_UNRECOGNIZED_PARAMETER_VALUE,
    /**
     * Unexpected parameter value. Since 1.18.
     */
    GENERAL_UNEXPECTED_PARAMETER_VALUE,
    /**
     * User data size error. Since 1.18.
     */
    GENERAL_USER_DATA_SIZE_ERROR,
    /**
     * Other general error. Since 1.18.
     */
    GENERAL_OTHER,
}
/**
 * Error class reported from the network when failed to send an SMS in CDMA,
 * or reported by the device when failed to process a transfer-only CDMA message.
 */
enum WmsCdmaErrorClass {
    /**
     * Temporary error reported by network.
     */
    TEMPORARY,
    /**
     * Permanent error reported by network.
     */
    PERMANENT,
    /**
     * Temporary error reported by device. Since 1.28.
     */
    TEMPORARY_DEVICE,
    /**
     * Permanent error reported by device. Since 1.28.
     */
    PERMANENT_DEVICE,
}
/**
 * CDMA service option selection.
 */
enum WmsCdmaServiceOption {
    /**
     * Automatic selection of service option.
     */
    AUTO,
    /**
     * Use service option 6.
     */
    TODO_6,
    /**
     * Use service option 14.
     */
    TODO_14,
}
/**
 * RP cause codes when failed to send an SMS in GSM/WCDMA.
 */
enum WmsGsmUmtsRpCause {
    /**
     * Unassigned number.
     */
    UNASSIGNED_NUMBER,
    /**
     * Operator determined barring.
     */
    OPERATOR_DETERMINED_BARRING,
    /**
     * Call barred.
     */
    CALL_BARRED,
    /**
     * Reserved.
     */
    RESERVED,
    /**
     * SMS transfer rejected.
     */
    SMS_TRANSFER_REJECTED,
    /**
     * Memory capacity exceeded.
     */
    MEMORY_CAPACITY_EXCEEDED,
    /**
     * Destination out of order.
     */
    DESTINATION_OUT_OF_ORDER,
    /**
     * Unidentified subscriber.
     */
    UNIDENTIFIED_SUBSCRIBER,
    /**
     * Facility rejected.
     */
    FACILITY_REJECTED,
    /**
     * Unknown subscriber.
     */
    UNKNOWN_SUBSCRIBER,
    /**
     * Network out of order.
     */
    NETWORK_OUF_OF_ORDER,
    /**
     * Temporary failure.
     */
    TEMPORARY_FAILURE,
    /**
     * Congestion.
     */
    CONGESTION,
    /**
     * Resources unavailable.
     */
    RESOURCES_UNAVAILABLE,
    /**
     * Facility not subscribed.
     */
    FACILITY_NOT_SUBSCRIBED,
    /**
     * Facility not implemented.
     */
    FACILITY_NOT_IMPLEMENTED,
    /**
     * Invalid SMS transfer reference value.
     */
    INVALID_SMS_TRANSFER_REFERENCE_VALUE,
    /**
     * Semantically incorrect message.
     */
    SEMANTICALLY_INCORRECT_MESSAGE,
    /**
     * Invalid mandatory info.
     */
    INVALID_MANDATORY_INFO,
    /**
     * Message type not implemented.
     */
    MESSAGE_TYPE_NOT_IMPLEMENTED,
    /**
     * Message not compatible with SMS.
     */
    MESSAGE_NOT_COMPATIBLE_WITH_SMS,
    /**
     * Information element not implemented.
     */
    INFORMATION_ELEMENT_NOT_IMPLEMENTED,
    /**
     * Protocol error.
     */
    PROTOCOL_ERROR,
    /**
     * Interworking error.
     */
    INTERWORKING,
}
/**
 * RT cause codes when failed to send an SMS in GSM/WCDMA.
 */
enum WmsGsmUmtsTpCause {
    /**
     * Tele interworking not supported.
     */
    TELE_INTERWORKING_NOT_SUPPORTED,
    /**
     * Short message type 0 not supported.
     */
    SHORT_MESSAGE_TYPE_0_NOT_SUPPORTED,
    /**
     * Short message cannot be replaced.
     */
    SHORT_MESSAGE_CANNOT_BE_REPLACED,
    /**
     * Unspecified TP-PID error.
     */
    UNSPECIFIED_PID_ERROR,
    /**
     * Data coding scheme not supported.
     */
    DCS_NOT_SUPPORTED,
    /**
     * Message class not supported.
     */
    MESSAGE_CLASS_NOT_SUPPORTED,
    /**
     * Unspecified data coding scheme error.
     */
    UNSPECIFIED_DCS_ERROR,
    /**
     * Command cannot be actioned.
     */
    COMMAND_CANNOT_BE_ACTIONED,
    /**
     * Command unsupported.
     */
    COMMAND_UNSUPPORTED,
    /**
     * Unspecified command error.
     */
    UNSPECIFIED_COMMAND_ERROR,
    /**
     * TPDU not supported.
     */
    TPDU_NOT_SUPPORTED,
    /**
     * SC busy.
     */
    SC_BUSY,
    /**
     * No SC subscription.
     */
    NO_SC_SUBSCRIPTION,
    /**
     * SC system failure.
     */
    SC_SYSTEM_FAILURE,
    /**
     * Invalid SME address.
     */
    INVALID_SME_ADDRESS,
    /**
     * Destination SME barred.
     */
    DESTINATION_SME_BARRED,
    /**
     * SM rejected or duplicate.
     */
    SM_REJECTED_OR_DUPLICATE,
    /**
     * TP-VPF not supported.
     */
    VPF_NOT_SUPPORTED,
    /**
     * TP-VP not supported.
     */
    VP_NOT_SUPPORTED,
    /**
     * SIM SMS storage full.
     */
    SIM_SMS_STORAGE_FULL,
    /**
     * No SMS storage capability in SIM.
     */
    NO_SMS_STORAGE_CAPABILITY_IN_SIM,
    /**
     * MS error.
     */
    MS_ERROR,
    /**
     * Memory capacity exceeded.
     */
    MEMORY_CAPACITY_EXCEEDED,
    /**
     * SIM application toolkit busy.
     */
    SIM_APPLICATION_TOOLKIT_BUSY,
    /**
     * SIM data download error.
     */
    SIM_DATA_DOWNLOAD_ERROR,
    /**
     * Unspecified error.
     */
    UNSPECIFIED_ERROR,
}
/**
 * Message class.
 */
enum WmsMessageClass {
    /**
     * Class 0.
     */
    TODO_0,
    /**
     * Class 1.
     */
    TODO_1,
    /**
     * Class 2.
     */
    TODO_2,
    /**
     * Class 3.
     */
    TODO_3,
    /**
     * Class none.
     */
    NONE,
    /**
     * Class CDMA.
     */
    CDMA,
}
/**
 * Type of message delivery failure.
 */
enum WmsMessageDeliveryFailureType {
    /**
     * Temporary failure.
     */
    TEMPORARY,
    /**
     * Permanent failure.
     */
    PERMANENT,
}
/**
 * Type of message.
 */
enum WmsMessageFormat {
    /**
     * CDMA message.
     */
    CDMA,
    /**
     * Point-to-point 3GPP message.
     */
    GSM_WCDMA_POINT_TO_POINT,
    /**
     * Broadcast 3GPP message.
     */
    GSM_WCDMA_BROADCAST,
    /**
     * Message Waiting Indicator.
     */
    MWI,
}
/**
 * Message mode.
 */
enum WmsMessageMode {
    /**
     * Message sent using 3GPP2 technologies.
     */
    CDMA,
    /**
     * Message sent using 3GPP technologies.
     */
    GSM_WCDMA,
}
/**
 * Type of message protocol.
 */
enum WmsMessageProtocol {
    /**
     * CDMA.
     */
    CDMA,
    /**
     * WCDMA.
     */
    WCDMA,
}
/**
 * Type of message tag.
 */
enum WmsMessageTagType {
    /**
     * Received SMS, already read.
     */
    MT_READ,
    /**
     * Received SMS, not read.
     */
    MT_NOT_READ,
    /**
     * Sent SMS.
     */
    MO_SENT,
    /**
     * Not yet sent SMS.
     */
    MO_NOT_SENT,
}
/**
 * Type of message.
 */
enum WmsMessageType {
    /**
     * Point to point message.
     */
    POINT,
}
/**
 * Type of notification.
 */
enum WmsNotificationType {
    /**
     * Primary.
     */
    PRIMARY,
    /**
     * Secondary GSM.
     */
    SECONDARY_GSM,
    /**
     * Secondary UMTS.
     */
    SECONDARY_UMTS,
}
/**
 * Action to perform when a message is received.
 */
enum WmsReceiptAction {
    /**
     * Discard message.
     */
    DISCARD,
    /**
     * Store and notify to client.
     */
    STORE_AND_NOTIFY,
    /**
     * Notify to client, which should send back ACK.
     */
    TRANSFER_ONLY,
    /**
     * Notify to client and send back ACK.
     */
    TRANSFER_AND_ACK,
    /**
     * Unknown action.
     */
    UNKNOWN,
}
/**
 * Type of messaging storage.
 */
enum WmsStorageType {
    /**
     * Message stored in UIM.
     */
    UIM,
    /**
     * Message stored in non-volatile memory.
     */
    NV,
    /**
     * None.
     */
    NONE,
}
/**
 * Transfer indication actions.
 */
enum WmsTransferIndication {
    /**
     * Status reports transferred to the client.
     */
    CLIENT,
}
/**
 * QMI flags in messages of the %QMI_SERVICE_CTL service.
 * @bitfield 
 */
enum CtlFlag {
    /**
     * None.
     */
    NONE,
    /**
     * Message is a response.
     */
    RESPONSE,
    /**
     * Message is an indication.
     */
    INDICATION,
}
/**
 * Flags specifying the behavior of the new link.
 * @bitfield 
 */
enum DeviceAddLinkFlags {
    /**
     * none.
     */
    NONE,
    /**
     * checksum offload (v4) is enabled in ingress path.
     */
    INGRESS_MAP_CKSUMV4,
    /**
     * checksum offload (v4) is enabled in egress path.
     */
    EGRESS_MAP_CKSUMV4,
    /**
     * checksum offload (v5) is enabled in ingress path. Since 1.32.
     */
    INGRESS_MAP_CKSUMV5,
    /**
     * checksum offload (v5) is enabled in egress path. Since 1.32.
     */
    EGRESS_MAP_CKSUMV5,
}
/**
 * Flags to specify which actions to be performed when the device is open.
 * @bitfield 
 */
enum DeviceOpenFlags {
    /**
     * No flags.
     */
    NONE,
    /**
     * Run version info check when opening. Since 1.24.4 this flag no longer prevents requests from being sent to the modem if they're assumed not supported based on the version info of each message.
     */
    VERSION_INFO,
    /**
     * Synchronize with endpoint once the device is open. Will release any previously allocated client ID.
     */
    SYNC,
    /**
     * set network port to "802.3" mode; mutually exclusive with `QMI_DEVICE_OPEN_FLAGS_NET_RAW_IP`
     */
    NET_802_3,
    /**
     * set network port to "raw IP" mode; mutally exclusive with `QMI_DEVICE_OPEN_FLAGS_NET_8`02_3
     */
    NET_RAW_IP,
    /**
     * set network port to transmit/receive QoS headers; mutually exclusive with `QMI_DEVICE_OPEN_FLAGS_NET_NO_QOS_HEADER`
     */
    NET_QOS_HEADER,
    /**
     * set network port to not transmit/receive QoS headers; mutually exclusive with `QMI_DEVICE_OPEN_FLAGS_NET_QOS_HEADER`
     */
    NET_NO_QOS_HEADER,
    /**
     * Try to open the port through the 'qmi-proxy'. Since: 1.8.
     */
    PROXY,
    /**
     * open an MBIM port with QMUX tunneling service. Since: 1.16.
     */
    MBIM,
    /**
     * open a port either in QMI or MBIM mode, depending on device driver. Since: 1.18.
     */
    AUTO,
    /**
     * Explicitly state that indications are wanted (implicit in QMI mode, optional when in MBIM mode).
     */
    EXPECT_INDICATIONS,
}
/**
 * Flags to specify which actions to be performed when releasing the client.
 * @bitfield 
 */
enum DeviceReleaseClientFlags {
    /**
     * No flags.
     */
    NONE,
    /**
     * Release the CID when releasing the client.
     */
    RELEASE_CID,
}
/**
 * Frequency band capabilities.
 * 
 * This type is bit to bit compatible with #QmiNasBandPreference.
 * @bitfield 
 */
enum DmsBandCapability {
    /**
     * Band class 0, A-system.
     */
    BC_0_A_SYSTEM,
    /**
     * Band class 0, B-system.
     */
    BC_0_B_SYSTEM,
    /**
     * Band class 1, all blocks.
     */
    BC_1_ALL_BLOCKS,
    /**
     * Band class 2.
     */
    BC_2,
    /**
     * Band class 3, A-system.
     */
    BC_3_A_SYSTEM,
    /**
     * Band class 4, all blocks.
     */
    BC_4_ALL_BLOCKS,
    /**
     * Band class 5, all blocks.
     */
    BC_5_ALL_BLOCKS,
    /**
     * GSM DCS band.
     */
    GSM_DCS_1800,
    /**
     * GSM Extended GSM band (900).
     */
    GSM_900_EXTENDED,
    /**
     * GSM Primary GSM band (900).
     */
    GSM_900_PRIMARY,
    /**
     * Band class 6.
     */
    BC_6,
    /**
     * Band class 7.
     */
    BC_7,
    /**
     * Band class 8.
     */
    BC_8,
    /**
     * Band class 9.
     */
    BC_9,
    /**
     * Band class 10.
     */
    BC_10,
    /**
     * Band class 11.
     */
    BC_11,
    /**
     * GSM 450 band.
     */
    GSM_450,
    /**
     * GSM 480 band.
     */
    GSM_480,
    /**
     * GSM 750 band.
     */
    GSM_750,
    /**
     * GSM 850 band.
     */
    GSM_850,
    /**
     * GSM railways band (900).
     */
    GSM_900_RAILWAYS,
    /**
     * GSM PCS band (1900).
     */
    GSM_PCS_1900,
    /**
     * WCDMA 2100 band (Europe, Japan, China).
     */
    WCDMA_2100,
    /**
     * WCDMA PCS 1900 band (US).
     */
    WCDMA_PCS_1900,
    /**
     * WCDMA DCS 1800 band (Europe, China).
     */
    WCDMA_DCS_1800,
    /**
     * WCDMA 1700 band (US).
     */
    WCDMA_1700_US,
    /**
     * WCDMA 850 band (US).
     */
    WCDMA_850_US,
    /**
     * QWCDMA 850 band (Japan).
     */
    WCDMA_800,
    /**
     * Band class 12.
     */
    BC_12,
    /**
     * Band class 14.
     */
    BC_14,
    /**
     * Band class 15.
     */
    BC_15,
    /**
     * WCDMA 2600 band (Europe).
     */
    WCDMA_2600,
    /**
     * WCDMA 900 band (Europe, Japan).
     */
    WCDMA_900,
    /**
     * WCDMA 1700 band (Japan).
     */
    WCDMA_1700_JAPAN,
    /**
     * Band class 16.
     */
    BC_16,
    /**
     * Band class 17.
     */
    BC_17,
    /**
     * Band class 18.
     */
    BC_18,
    /**
     * Band class 19.
     */
    BC_19,
    /**
     * WCDMA 850 band (Japan)
     */
    WCDMA_850_JAPAN,
    /**
     * WCDMA 1500 band.
     */
    WCDMA_1500,
}
/**
 * LTE-specific Frequency bands.
 * @bitfield 
 */
enum DmsLteBandCapability {
    /**
     * LTE EUTRAN Band 1
     */
    TODO_1,
    /**
     * LTE EUTRAN Band 2.
     */
    TODO_2,
    /**
     * LTE EUTRAN Band 3.
     */
    TODO_3,
    /**
     * LTE EUTRAN Band 4.
     */
    TODO_4,
    /**
     * LTE EUTRAN Band 5.
     */
    TODO_5,
    /**
     * LTE EUTRAN Band 6.
     */
    TODO_6,
    /**
     * LTE EUTRAN Band 7.
     */
    TODO_7,
    /**
     * LTE EUTRAN Band 8.
     */
    TODO_8,
    /**
     * LTE EUTRAN Band 9.
     */
    TODO_9,
    /**
     * LTE EUTRAN Band 10.
     */
    TODO_10,
    /**
     * LTE EUTRAN Band 11.
     */
    TODO_11,
    /**
     * LTE EUTRAN Band 12.
     */
    TODO_12,
    /**
     * LTE EUTRAN Band 13.
     */
    TODO_13,
    /**
     * LTE EUTRAN Band 14.
     */
    TODO_14,
    /**
     * LTE EUTRAN Band 17.
     */
    TODO_17,
    /**
     * LTE EUTRAN Band 18.
     */
    TODO_18,
    /**
     * LTE EUTRAN Band 19.
     */
    TODO_19,
    /**
     * LTE EUTRAN Band 20.
     */
    TODO_20,
    /**
     * LTE EUTRAN Band 21.
     */
    TODO_21,
    /**
     * LTE EUTRAN Band 24.
     */
    TODO_24,
    /**
     * LTE EUTRAN Band 25.
     */
    TODO_25,
    /**
     * LTE EUTRAN Band 26.
     */
    TODO_26,
    /**
     * LTE EUTRAN Band 27.
     */
    TODO_27,
    /**
     * LTE EUTRAN Band 28.
     */
    TODO_28,
    /**
     * LTE EUTRAN Band 29.
     */
    TODO_29,
    /**
     * LTE EUTRAN Band 30.
     */
    TODO_30,
    /**
     * LTE EUTRAN Band 31.
     */
    TODO_31,
    /**
     * LTE EUTRAN Band 32.
     */
    TODO_32,
    /**
     * LTE EUTRAN Band 33.
     */
    TODO_33,
    /**
     * LTE EUTRAN Band 34.
     */
    TODO_34,
    /**
     * LTE EUTRAN Band 35.
     */
    TODO_35,
    /**
     * LTE EUTRAN Band 36.
     */
    TODO_36,
    /**
     * LTE EUTRAN Band 37.
     */
    TODO_37,
    /**
     * LTE EUTRAN Band 38.
     */
    TODO_38,
    /**
     * LTE EUTRAN Band 39.
     */
    TODO_39,
    /**
     * LTE EUTRAN Band 40.
     */
    TODO_40,
    /**
     * LTE EUTRAN Band 41.
     */
    TODO_41,
    /**
     * LTE EUTRAN Band 42.
     */
    TODO_42,
    /**
     * LTE EUTRAN Band 43.
     */
    TODO_43,
}
/**
 * Reasons for being in Offline (`QMI_DMS_OPERATING_MODE_OFFLINE)` state.
 * @bitfield 
 */
enum DmsOfflineReason {
    /**
     * Host image misconfiguration.
     */
    HOST_IMAGE_MISCONFIGURATION,
    /**
     * PRI image misconfiguration.
     */
    PRI_IMAGE_MISCONFIGURATION,
    /**
     * PRI version incompatible.
     */
    PRI_VERSION_INCOMPATIBLE,
    /**
     * Memory full, cannot copy PRI information.
     */
    DEVICE_MEMORY_FULL,
}
/**
 * Flags specifying the current power state.
 * 
 * If `QMI_DMS_POWER_STATE_EXTERNAL_SOURCE` is set, the device is powerered by an
 * external source; otherwise it is powered by a battery.
 * 
 * If `QMI_DMS_POWER_STATE_BATTERY_CONNECTED` is set, the battery is connected;
 * otherwise the battery is not connected.
 * 
 * If `QMI_DMS_POWER_STATE_BATTERY_CHARGING` is set, the battery is being charged;
 * otherwise the battery is not being charged.
 * 
 * If `QMI_DMS_POWER_STATE_FAULT` is set, a power fault has been detected.
 * @bitfield 
 */
enum DmsPowerState {
    /**
     * Powered by an external source.
     */
    EXTERNAL_SOURCE,
    /**
     * Battery is connected.
     */
    BATTERY_CONNECTED,
    /**
     * Battery is currently being charged.
     */
    BATTERY_CHARGING,
    /**
     * Recognized power fault.
     */
    FAULT,
}
/**
 * APN type preference as a bitmask.
 * @bitfield 
 */
enum DsdApnTypePreference {
    /**
     * Default/Internet traffic.
     */
    DEFAULT,
    /**
     * IMS.
     */
    IMS,
    /**
     * Multimedia Messaging Service.
     */
    MMS,
    /**
     * Dial Up Network.
     */
    DUN,
    /**
     * Secure User Plane Location.
     */
    SUPL,
    /**
     * High Priority Mobile Data.
     */
    HIPRI,
    /**
     * over the air administration.
     */
    FOTA,
    /**
     * Carrier Branded Services.
     */
    CBS,
    /**
     * Initial Attach.
     */
    IA,
    /**
     * Emergency.
     */
    EMERGENCY,
}
/**
 * Type of data to delete from the cell database.
 * @bitfield 
 */
enum LocDeleteCellDatabase {
    /**
     * Position.
     */
    POS,
    /**
     * Latest GPS position.
     */
    LATEST_GPS_POS,
    /**
     * OTA position.
     */
    OTA_POS,
    /**
     * External reference position.
     */
    EXT_REF_POS,
    /**
     * Timetag.
     */
    TIMETAG,
    /**
     * Cell ID.
     */
    CELLID,
    /**
     * Cached cell ID.
     */
    CACHED_CELLID,
    /**
     * Last serving cell.
     */
    LAST_SRV_CELL,
    /**
     * Current servince cell.
     */
    CUR_SRV_CELL,
    /**
     * Neighboring cell info.
     */
    NEIGHBOR_INFO,
}
/**
 * Type of data to delete from the clock information.
 * @bitfield 
 */
enum LocDeleteClockInfo {
    /**
     * Time estimation.
     */
    TIME_EST,
    /**
     * Frequency estimation.
     */
    FREQ_EST,
    /**
     * Week number.
     */
    WEEK_NUMBER,
    /**
     * RTC time.
     */
    RTC_TIME,
    /**
     * Time transfer.
     */
    TIME_TRANSFER,
    /**
     * GPS time estimation.
     */
    GPS_TIME_EST,
    /**
     * GLONASS time estimation.
     */
    GLO_TIME_EST,
    /**
     * GLONASS day number.
     */
    GLO_DAY_NUMBER,
    /**
     * GLONASS year number.
     */
    GLO_YEAR_NUMBER,
    /**
     * GLONASS RF group delay.
     */
    GLO_RF_GRP_DELAY,
    /**
     * Disable TT.
     */
    DISABLE_TT,
}
/**
 * Flags to use when deleting GNSS assistance data.
 * 
 * Since 1.22
 * @bitfield 
 */
enum LocDeleteGnssData {
    /**
     * GPS SV dir.
     */
    GPS_SVDIR,
    /**
     * GPS SV steer.
     */
    GPS_SVSTEER,
    /**
     * GPS time.
     */
    GPS_TIME,
    /**
     * GPS alm corr.
     */
    GPS_ALM_CORR,
    /**
     * GLONASS SV dir.
     */
    GLO_SVDIR,
    /**
     * GLONASS SV steer.
     */
    GLO_SVSTEER,
    /**
     * GLONASS time.
     */
    GLO_TIME,
    /**
     * GLONASS alm corr.
     */
    GLO_ALM_CORR,
    /**
     * SBAS SV dir.
     */
    SBAS_SVDIR,
    /**
     * SBAS SV steer.
     */
    SBAS_SVSTEER,
    /**
     * Position.
     */
    POSITION,
    /**
     * Time.
     */
    TIME,
    /**
     * Ionospheric data.
     */
    IONO,
    /**
     * UTC time.
     */
    UTC,
    /**
     * Health information.
     */
    HEALTH,
    /**
     * SA data.
     */
    SADATA,
    /**
     * RTI.
     */
    RTI,
    /**
     * SV no exist.
     */
    SV_NO_EXIST,
    /**
     * Frequency bias estimation.
     */
    FREQ_BIAS_EST,
}
/**
 * Type of data to delete for a given satellite.
 * @bitfield 
 */
enum LocDeleteSvInfo {
    /**
     * Ephemeris.
     */
    EPHEMERIS,
    /**
     * Almanac.
     */
    ALMANAC,
}
/**
 * For which events to register the subscription.
 * 
 * Since 1.22
 * @bitfield 
 */
enum LocEventRegistrationFlag {
    /**
     * Position report.
     */
    POSITION_REPORT,
    /**
     * GNSS satellite info.
     */
    GNSS_SATELLITE_INFO,
    /**
     * NMEA.
     */
    NMEA,
    /**
     * NI Notify verify request.
     */
    NI_NOTIFY_VERIFY_REQUEST,
    /**
     * Inject time request.
     */
    INJECT_TIME_REQUEST,
    /**
     * Inject predicted orbits request.
     */
    INJECT_PREDICTED_ORBITS_REQUEST,
    /**
     * Inject position request.
     */
    INJECT_POSITION_REQUEST,
    /**
     * Engine state.
     */
    ENGINE_STATE,
    /**
     * Fix session state.
     */
    FIX_SESSION_STATE,
    /**
     * WIFI request.
     */
    WIFI_REQUEST,
    /**
     * Sensor streaming ready status.
     */
    SENSOR_STREAMING_READY_STATUS,
    /**
     * Time sync request.
     */
    TIME_SYNC_REQUEST,
    /**
     * Set SPI streaming report.
     */
    SET_SPI_STREAMING_REPORT,
    /**
     * Location server connection request.
     */
    LOCATION_SERVER_CONNECTION_REQUEST,
    /**
     * NI geofence notification.
     */
    NI_GEOFENCE_NOTIFICATION,
    /**
     * Geofence general alert.
     */
    GEOFENCE_GENERAL_ALERT,
    /**
     * Geofence breach notification.
     */
    GEOFENCE_BREACH_NOTIFICATION,
    /**
     * Pedometer control.
     */
    PEDOMETER_CONTROL,
    /**
     * Motion data control.
     */
    MOTION_DATA_CONTROL,
}
/**
 * NMEA trace types that may be enabled in the GNSS engine.
 * @bitfield 
 */
enum LocNmeaType {
    /**
     * Enable GGA traces.
     */
    GGA,
    /**
     * Enable RMC traces.
     */
    RMC,
    /**
     * Enable GSV traces.
     */
    GSV,
    /**
     * Enable GSA traces.
     */
    GSA,
    /**
     * Enable VTG traces.
     */
    VTG,
    /**
     * Enable PQXFI traces.
     */
    PQXFI,
    /**
     * Enable PSTIS traces.
     */
    PSTIS,
    /**
     * Enable all supported trace types.
     */
    ALL,
}
/**
 * Which information about the satellite is valid.
 * 
 * Since 1.22
 * @bitfield 
 */
enum LocSatelliteValidInformation {
    /**
     * System,
     */
    SYSTEM,
    /**
     * GNSS Satellite ID.
     */
    GNSS_SATELLITE_ID,
    /**
     * Health status.
     */
    HEALTH_STATUS,
    /**
     * Process status.
     */
    PROCESS_STATUS,
    /**
     * Satellite info mask.
     */
    SATELLITE_INFO_MASK,
    /**
     * Elevation.
     */
    ELEVATION,
    /**
     * Azimuth.
     */
    AZIMUTH,
    /**
     * Signal to noise ratio.
     */
    SIGNAL_TO_NOISE_RATIO,
}
/**
 * Which sensors where used and for which measurements.
 * 
 * Since 1.22
 * @bitfield 
 */
enum LocSensorDataUsage {
    /**
     * Accelerometer used.
     */
    ACCELEROMETER_USED,
    /**
     * Gyro used.
     */
    GYRO_USED,
    /**
     * Aided heading.
     */
    AIDED_HEADING,
    /**
     * Aided speed.
     */
    AIDED_SPEED,
    /**
     * Aided position.
     */
    AIDED_POSITION,
    /**
     * Aided velocity.
     */
    AIDED_VELOCITY,
}
/**
 * Type of server address for Assisted-GPS.
 * @bitfield 
 */
enum LocServerAddressType {
    /**
     * None.
     */
    NONE,
    /**
     * IPv4 server address.
     */
    IPV4,
    /**
     * IPv6 server address.
     */
    IPV6,
    /**
     * URL server address.
     */
    URL,
}
/**
 * Which technology has been used.
 * 
 * Since 1.22
 * @bitfield 
 */
enum LocTechnologyUsed {
    /**
     * Satellite.
     */
    SATELLITE,
    /**
     * Cellular.
     */
    CELLULAR,
    /**
     * Wifi.
     */
    WIFI,
    /**
     * Sensors.
     */
    SENSORS,
    /**
     * Reference Location.
     */
    REFERENCE_LOCATION,
    /**
     * Injected Position.
     */
    INJECTED_POSITION,
    /**
     * AFLT (Advanced Forward Link Trilateration).
     */
    AFLT,
    /**
     * Hybrid.
     */
    HYBRID,
}
/**
 * Flags to specify frequency band preferences.
 * 
 * This type is bit to bit compatible with #QmiDmsBandCapability.
 * @bitfield 
 */
enum NasBandPreference {
    /**
     * Band class 0, A system.
     */
    BC_0_A_SYSTEM,
    /**
     * Band class 0, B system.
     */
    BC_0_B_SYSTEM,
    /**
     * Band class 1.
     */
    BC_1_ALL_BLOCKS,
    /**
     * Band class 2.
     */
    BC_2,
    /**
     * Band class 3, A system.
     */
    BC_3_A_SYSTEM,
    /**
     * Band class 4, all blocks.
     */
    BC_4_ALL_BLOCKS,
    /**
     * Band class 5, all blocks.
     */
    BC_5_ALL_BLOCKS,
    /**
     * GSM DCS 1800 band.
     */
    GSM_DCS_1800,
    /**
     * Extended GSM 900 band.
     */
    GSM_900_EXTENDED,
    /**
     * Primary GSM 900 band.
     */
    GSM_900_PRIMARY,
    /**
     * Band class 6.
     */
    BC_6,
    /**
     * Band class 7.
     */
    BC_7,
    /**
     * Band class 8.
     */
    BC_8,
    /**
     * Band class 9.
     */
    BC_9,
    /**
     * Band class 10.
     */
    BC_10,
    /**
     * Band class 11.
     */
    BC_11,
    /**
     * GSM 450.
     */
    GSM_450,
    /**
     * GSM 480.
     */
    GSM_480,
    /**
     * GSM 750.
     */
    GSM_750,
    /**
     * GSM 850.
     */
    GSM_850,
    /**
     * GSM 900 (Railways).
     */
    GSM_900_RAILWAYS,
    /**
     * GSM 1900.
     */
    GSM_PCS_1900,
    /**
     * WCDMA 2100.
     */
    WCDMA_2100,
    /**
     * WCDMA PCS 1900.
     */
    WCDMA_PCS_1900,
    /**
     * WCDMA DCS 1800.
     */
    WCDMA_DCS_1800,
    /**
     * WCDMA 1700 (U.S.).
     */
    WCDMA_1700_US,
    /**
     * WCDMA 850.
     */
    WCDMA_850_US,
    /**
     * WCDMA 800.
     */
    WCDMA_800,
    /**
     * Band class 12.
     */
    BC_12,
    /**
     * Band class 14.
     */
    BC_14,
    /**
     * Band class 15.
     */
    BC_15,
    /**
     * WCDMA 2600.
     */
    WCDMA_2600,
    /**
     * WCDMA 900.
     */
    WCDMA_900,
    /**
     * WCDMA 1700 (Japan).
     */
    WCDMA_1700_JAPAN,
    /**
     * Band class 16.
     */
    BC_16,
    /**
     * Band class 17.
     */
    BC_17,
    /**
     * Band class 18.
     */
    BC_18,
    /**
     * Band class 19.
     */
    BC_19,
    /**
     * WCDMA 850 (Japan). Since: 1.22.
     */
    WCDMA_850_JAPAN,
    /**
     * WCDMA 1500. Since: 1.22.
     */
    WCDMA_1500,
}
/**
 * Flags to specify LTE-specific frequency band preferences.
 * @bitfield 
 */
enum NasLteBandPreference {
    /**
     * LTE EUTRAN Band 1
     */
    TODO_1,
    /**
     * LTE EUTRAN Band 2.
     */
    TODO_2,
    /**
     * LTE EUTRAN Band 3.
     */
    TODO_3,
    /**
     * LTE EUTRAN Band 4.
     */
    TODO_4,
    /**
     * LTE EUTRAN Band 5.
     */
    TODO_5,
    /**
     * LTE EUTRAN Band 6.
     */
    TODO_6,
    /**
     * LTE EUTRAN Band 7.
     */
    TODO_7,
    /**
     * LTE EUTRAN Band 8.
     */
    TODO_8,
    /**
     * LTE EUTRAN Band 9.
     */
    TODO_9,
    /**
     * LTE EUTRAN Band 10.
     */
    TODO_10,
    /**
     * LTE EUTRAN Band 11.
     */
    TODO_11,
    /**
     * LTE EUTRAN Band 12.
     */
    TODO_12,
    /**
     * LTE EUTRAN Band 13.
     */
    TODO_13,
    /**
     * LTE EUTRAN Band 14.
     */
    TODO_14,
    /**
     * LTE EUTRAN Band 17.
     */
    TODO_17,
    /**
     * LTE EUTRAN Band 18.
     */
    TODO_18,
    /**
     * LTE EUTRAN Band 19.
     */
    TODO_19,
    /**
     * LTE EUTRAN Band 20.
     */
    TODO_20,
    /**
     * LTE EUTRAN Band 21.
     */
    TODO_21,
    /**
     * LTE EUTRAN Band 24.
     */
    TODO_24,
    /**
     * LTE EUTRAN Band 25.
     */
    TODO_25,
    /**
     * LTE EUTRAN Band 26.
     */
    TODO_26,
    /**
     * LTE EUTRAN Band 27.
     */
    TODO_27,
    /**
     * LTE EUTRAN Band 28.
     */
    TODO_28,
    /**
     * LTE EUTRAN Band 29.
     */
    TODO_29,
    /**
     * LTE EUTRAN Band 30.
     */
    TODO_30,
    /**
     * LTE EUTRAN Band 31.
     */
    TODO_31,
    /**
     * LTE EUTRAN Band 32.
     */
    TODO_32,
    /**
     * LTE EUTRAN Band 33.
     */
    TODO_33,
    /**
     * LTE EUTRAN Band 34.
     */
    TODO_34,
    /**
     * LTE EUTRAN Band 35.
     */
    TODO_35,
    /**
     * LTE EUTRAN Band 36.
     */
    TODO_36,
    /**
     * LTE EUTRAN Band 37.
     */
    TODO_37,
    /**
     * LTE EUTRAN Band 38.
     */
    TODO_38,
    /**
     * LTE EUTRAN Band 39.
     */
    TODO_39,
    /**
     * LTE EUTRAN Band 40.
     */
    TODO_40,
    /**
     * LTE EUTRAN Band 41.
     */
    TODO_41,
    /**
     * LTE EUTRAN Band 42.
     */
    TODO_42,
    /**
     * LTE EUTRAN Band 43.
     */
    TODO_43,
}
/**
 * Flags used to control display of the PLMN name and Service Provider Name. See
 * 3GPP TS 51.011 descripton of the EFspn SIM file for more details.
 * @bitfield 
 */
enum NasNetworkNameDisplayCondition {
    /**
     * if
     * set, display of the registered PLMN is required when the registered PLMN is either
     * the HPLMN or a PLMN in the Service Provider PLMN List (see EFspdi). Otherwise
     * display of the registered PLMN is not required in this case.
     */
    REGISTERED_PLMN_IF_KNOWN_NETWORK,
    /**
     * if
     * set, display of the Service Provider Name is not required when registered PLMN is
     * neither HPLMN nor a PLMN in the service provider PLMN list (see EFspdi). If not set,
     * SPN display is required in this case.
     */
    SPN_NOT_REQUIRED_IF_UNKNOWN_NETWORK,
}
/**
 * Flags to use when specifying which networks to scan.
 * @bitfield 
 */
enum NasNetworkScanType {
    /**
     * GSM network.
     */
    GSM,
    /**
     * UMTS network.
     */
    UMTS,
    /**
     * LTE network.
     */
    LTE,
    /**
     * TD-SCDMA network.
     */
    TD_SCDMA,
}
/**
 * Flags to specify the status of a given network.
 * @bitfield 
 */
enum NasNetworkStatus {
    /**
     * Network is in use, current serving.
     */
    CURRENT_SERVING,
    /**
     * Network is vailable.
     */
    AVAILABLE,
    /**
     * Network is home network.
     */
    HOME,
    /**
     * Network is a roaming network.
     */
    ROAMING,
    /**
     * Network is forbidden.
     */
    FORBIDDEN,
    /**
     * Network is not forbidden.
     */
    NOT_FORBIDDEN,
    /**
     * Network is preferred.
     */
    PREFERRED,
    /**
     * Network is not preferred.
     */
    NOT_PREFERRED,
}
/**
 * Preferred networks access technology identifier as specified in
 * ETSI TS 131 102, chapter 4.2.5.
 * @bitfield 
 */
enum NasPlmnAccessTechnologyIdentifier {
    /**
     * Unspecified.
     */
    UNSPECIFIED,
    /**
     * GSM Compact.
     */
    GSM_COMPACT,
    /**
     * GSM.
     */
    GSM,
    /**
     * NG-RAN.
     */
    NGRAN,
    /**
     * E-UTRAN.
     */
    EUTRAN,
    /**
     * UTRAN.
     */
    UTRAN,
    /**
     * All technologies.
     */
    ALL,
}
/**
 * Flags to specify the radio technology preference.
 * @bitfield 
 */
enum NasRadioTechnologyPreference {
    /**
     * Automatic selection.
     */
    AUTO,
    /**
     * 3GPP2 technology.
     */
    TODO_3GPP2,
    /**
     * 3GPP technology.
     */
    TODO_3GPP,
    /**
     * AMPS if 3GPP2, GSM if 3GPP.
     */
    AMPS_OR_GSM,
    /**
     * CDMA if 3GPP2, WCDMA if 3GPP.
     */
    CDMA_OR_WCDMA,
    /**
     * CDMA EV-DO.
     */
    HDR,
    /**
     * LTE.
     */
    LTE,
}
/**
 * Flags specifying radio access technology mode preference.
 * @bitfield 
 */
enum NasRatModePreference {
    /**
     * CDMA2000 1X.
     */
    CDMA_1X,
    /**
     * CDMA2000 HRPD (1xEV-DO).
     */
    CDMA_1XEVDO,
    /**
     * GSM.
     */
    GSM,
    /**
     * UMTS.
     */
    UMTS,
    /**
     * LTE.
     */
    LTE,
    /**
     * TD-SCDMA.
     */
    TD_SCDMA,
    /**
     * 5GNR. Since 1.26.
     */
    TODO_5GNR,
}
/**
 * Extra information to request when gathering Signal Strength.
 * @bitfield 
 */
enum NasSignalStrengthRequest {
    /**
     * None.
     */
    NONE,
    /**
     * Request RSSI information.
     */
    RSSI,
    /**
     * Request ECIO information.
     */
    ECIO,
    /**
     * Request IO information.
     */
    IO,
    /**
     * Request SINR information.
     */
    SINR,
    /**
     * Request error rate information.
     */
    ERROR_RATE,
    /**
     * Request RSRQ information.
     */
    RSRQ,
    /**
     * Request LTE SNR information.
     */
    LTE_SNR,
    /**
     * Request LTE RSRP information.
     */
    LTE_RSRP,
}
/**
 * Flags to specify TD-SCDMA-specific frequency band preferences.
 * @bitfield 
 */
enum NasTdScdmaBandPreference {
    /**
     * Band A.
     */
    A,
    /**
     * Band B.
     */
    B,
    /**
     * Band C.
     */
    C,
    /**
     * Band D.
     */
    D,
    /**
     * Band E.
     */
    E,
    /**
     * Band F.
     */
    F,
}
/**
 * Flags to use to register to phonebook indications.
 * @bitfield 
 */
enum PbmEventRegistrationFlag {
    /**
     * Request indications when records are added/edited/deleted.
     */
    RECORD_UPDATE,
    /**
     * Request indications when phonebooks are ready.
     */
    PHONEBOOK_READY,
    /**
     * Request indications when emergency numbers are changed.
     */
    EMERGENCY_NUMBER_LIST,
    /**
     * Request indications when hidden record status is changed.
     */
    HIDDEN_RECORD_STATUS,
    /**
     * Request indications when Additional number Alpha String records are added/edited/deleted.
     */
    AAS_UPDATE,
    /**
     * Request indications when Grouping information Alpha String records are added/edited/deleted.
     */
    GAS_UPDATE,
}
/**
 * Phonebook type.
 * @bitfield 
 */
enum PbmPhonebookType {
    /**
     * Abbreviated Dialing Number.
     */
    ADN,
    /**
     * Fixed Dialing Number.
     */
    FDN,
    /**
     * Mobile Subscriber Integrated Services Digital Network.
     */
    MSISDN,
    /**
     * Mail Box Dialing Number.
     */
    MBDN,
    /**
     * Service Dialing Number.
     */
    SDN,
    /**
     * Barred Dialing Number.
     */
    BDN,
    /**
     * Last Number Dialed.
     */
    LND,
    /**
     * Mail Box Number.
     */
    MBN,
}
/**
 * Flags to indicate which position data parameters are valid.
 * @bitfield 
 */
enum PdsDataValid {
    /**
     * Timestamp calendar (GPS time).
     */
    TIMESTAMP_CALENDAR,
    /**
     * Timestamp (UTC).
     */
    TIMESTAMP_UTC,
    /**
     * Leap seconds.
     */
    LEAP_SECONDS,
    /**
     * Time uncertainty.
     */
    TIME_UNCERTAINTY,
    /**
     * Latitude.
     */
    LATITUDE,
    /**
     * Longitude.
     */
    LONGITUDE,
    /**
     * Ellipsoid altitude.
     */
    ELLIPSOID_ALTITUDE,
    /**
     * Mean sea level altitude.
     */
    MEAN_SEA_LEVEL_ALTITUDE,
    /**
     * Horizontal speed.
     */
    HORIZONTAL_SPEED,
    /**
     * Vertical speed.
     */
    VERTICAL_SPEED,
    /**
     * Heading.
     */
    HEADING,
    /**
     * Horizontal uncertainty circular.
     */
    HORIZONTAL_UNCERTAINTY_CIRCULAR,
    /**
     * Horizontal uncertainty ellipse semi-major.
     */
    HORIZONTAL_UNCERTAINTY_ELLIPSE_SEMI_MAJOR,
    /**
     * Horizontal uncertainty ellipse semi-minor.
     */
    HORIZONTAL_UNCERTAINTY_ELLIPSE_SEMI_MINOR,
    /**
     * Horizontal uncertainty ellipse orient azimuth.
     */
    HORIZONTAL_UNCERTAINTY_ELLIPSE_ORIENT_AZIMUTH,
    /**
     * Vertical uncertainty.
     */
    VERTICAL_UNCERTAINTY,
    /**
     * Horizontal velocity uncertainty.
     */
    HORIZONTAL_VELOCITY_UNCERTAINTY,
    /**
     * Vertical velocity uncertainty.
     */
    VERTICAL_VELOCITY_UNCERTAINTY,
    /**
     * Horizontal confidence.
     */
    HORIZONTAL_CONFIDENCE,
    /**
     * Position dillution of precision.
     */
    POSITION_DOP,
    /**
     * Horizontal dillution of precision.
     */
    HORIZONTAL_DOP,
    /**
     * Vertical dillution of precision.
     */
    VERTICAL_DOP,
    /**
     * Operating mode.
     */
    OPERATING_MODE,
}
/**
 * QMI flags in messages which are not of the %QMI_SERVICE_CTL service.
 * @bitfield 
 */
enum ServiceFlag {
    /**
     * None.
     */
    NONE,
    /**
     * Message is compound.
     */
    COMPOUND,
    /**
     * Message is a response.
     */
    RESPONSE,
    /**
     * Message is an indication.
     */
    INDICATION,
}
/**
 * Requested configurations. If none explicitly requested, all configuration
 * items are returned.
 * @bitfield 
 */
enum UimConfiguration {
    /**
     * Automatic selection.
     */
    AUTOMATIC_SELECTION,
    /**
     * Personalization status.
     */
    PERSONALIZATION_STATUS,
    /**
     * Halt publication of subscription.
     */
    HALT_SUBSCRIPTION,
}
/**
 * Flags to use to register to UIM indications.
 * @bitfield 
 */
enum UimEventRegistrationFlag {
    /**
     * Card status.
     */
    CARD_STATUS,
    /**
     * SAP connection.
     */
    SAP_CONNECTION,
    /**
     * Extended card status.
     */
    EXTENDED_CARD_STATUS,
    /**
     * Physical slot status. Since 1.26.
     */
    PHYSICAL_SLOT_STATUS,
}
/**
 * Security Attributes.
 * @bitfield 
 */
enum UimSecurityAttribute {
    /**
     * PIN1.
     */
    PIN1,
    /**
     * PIN2.
     */
    PIN2,
    /**
     * UPIN.
     */
    UPIN,
    /**
     * ADM.
     */
    ADM,
}
/**
 * WCDMA AMR status.
 * @bitfield 
 */
enum VoiceWcdmaAmrStatus {
    /**
     * Not supported.
     */
    NOT_SUPPORTED,
    /**
     * WCDMA AMR wideband.
     */
    WCDMA_AMR_WB,
    /**
     * GSM half-rate AMR.
     */
    GSM_HR_AMR,
    /**
     * GSM AMR wideband.
     */
    GSM_AMR_WB,
    /**
     * GSM AMR narrowband.
     */
    GSM_AMR_NB,
}
/**
 * APN type as a bitmask.
 * @bitfield 
 */
enum WdsApnTypeMask {
    /**
     * Default/Internet traffic.
     */
    DEFAULT,
    /**
     * IP Multimedia Subsystem.
     */
    IMS,
    /**
     * Multimedia Messaging Service.
     */
    MMS,
    /**
     * over the air administration.
     */
    FOTA,
    /**
     * Initial Attach.
     */
    IA,
    /**
     * Emergency.
     */
    EMERGENCY,
}
/**
 * PDP context authentication protocols.
 * @bitfield 
 */
enum WdsAuthentication {
    /**
     * no authentication
     */
    NONE,
    /**
     * PAP authentication
     */
    PAP,
    /**
     * CHAP authentication
     */
    CHAP,
}
/**
 * 3GPP extended data bearer technologies.
 * @bitfield 
 */
enum WdsExtendedDataBearerTechnology3gpp {
    /**
     * unknown.
     */
    UNKNOWN,
    /**
     * WCDMA.
     */
    WCDMA,
    /**
     * HSDPA.
     */
    HSDPA,
    /**
     * HSUPA.
     */
    HSUPA,
    /**
     * HSDPA+.
     */
    HSDPA_PLUS,
    /**
     * Dual-cell HSDPA+.
     */
    DC_HSDPA_PLUS,
    /**
     * 64-QAM.
     */
    TODO_64QAM,
    /**
     * HSPA.
     */
    HSPA,
    /**
     * GPRS.
     */
    GPRS,
    /**
     * EDGE.
     */
    EDGE,
    /**
     * GSM.
     */
    GSM,
    /**
     * S2B.
     */
    S2B,
    /**
     * LTE limited service.
     */
    LTE_LIMITED_SERVICE,
    /**
     * LTE FDD.
     */
    LTE_FDD,
    /**
     * LTE TDD.
     */
    LTE_TDD,
}
/**
 * 3GPP2 extended data bearer technologies.
 * @bitfield 
 */
enum WdsExtendedDataBearerTechnology3gpp2 {
    /**
     * unknown.
     */
    UNKNOWN,
    /**
     * reserved.
     */
    RESERVED,
    /**
     * CDMA1x IS-95.
     */
    CDMA1X_IS95,
    /**
     * CDMA1x IS-2000.
     */
    CDMA1X_IS2000,
    /**
     * CDMA1x IS-2000 Release A.
     */
    CDMA1X_IS2000_REL_A,
    /**
     * HDR EVDO Rev 0 DPA.
     */
    HDR_REV_0_DPA,
    /**
     * HDR EVDO Rev A DPA.
     */
    HDR_REV_A_DPA,
    /**
     * HDR EVDO Rev B DPA.
     */
    HDR_REV_B_DPA,
    /**
     * HDR EVDO Rev A MPA.
     */
    HDR_REV_A_MPA,
    /**
     * HDR EVDO Rev B MPA.
     */
    HDR_REV_B_MPA,
    /**
     * HDR EVDO Rev A EMPA.
     */
    HDR_REV_A_EMPA,
    /**
     * HDR EVDO Rev B EMPA.
     */
    HDR_REV_B_EMPA,
    /**
     * HDR EVDO Rev B MMPA.
     */
    HDR_REV_B_MMPA,
    /**
     * HDR EVDO FMC.
     */
    HDR_EVDO_FMC,
}
/**
 * Flags specifying which specific settings to return when requesting the
 * current WDS bearer settings.
 * @bitfield 
 */
enum WdsGetCurrentSettingsRequestedSettings {
    /**
     * no settings requested
     */
    NONE,
    /**
     * request profile ID
     */
    PROFILE_ID,
    /**
     * request profile name
     */
    PROFILE_NAME,
    /**
     * request PDP context type
     */
    PDP_TYPE,
    /**
     * request APN name
     */
    APN_NAME,
    /**
     * request DNS server addresses
     */
    DNS_ADDRESS,
    /**
     * request granted QoS
     */
    GRANTED_QOS,
    /**
     * request username
     */
    USERNAME,
    /**
     * request authentication protocol, ie PAP/CHAP/none.
     */
    AUTH_PROTOCOL,
    /**
     * request IP address
     */
    IP_ADDRESS,
    /**
     * request gateway address
     */
    GATEWAY_INFO,
    /**
     * request PCSCF address
     */
    PCSCF_ADDRESS,
    /**
     * request PCSCF server address list
     */
    PCSCF_SERVER_ADDRESS_LIST,
    /**
     * request PCSCF domain name list
     */
    PCSCF_DOMAIN_NAME_LIST,
    /**
     * request MTU
     */
    MTU,
    /**
     * request domain name list
     */
    DOMAIN_NAME_LIST,
    /**
     * request IP family, ie IPv4 or IPv6.
     */
    IP_FAMILY,
    /**
     * request IMCN flag
     */
    IMCN_FLAG,
    /**
     * request extended technology info
     */
    EXTENDED_TECHNOLOGY,
}
/**
 * Mask to use when requesting packet statistics.
 * @bitfield 
 */
enum WdsPacketStatisticsMaskFlag {
    /**
     * Request count of correctly sent packets.
     */
    TX_PACKETS_OK,
    /**
     * Request count of correctly received packets.
     */
    RX_PACKETS_OK,
    /**
     * Request count of sent packets with error.
     */
    TX_PACKETS_ERROR,
    /**
     * Request count of received packets with error.
     */
    RX_PACKETS_ERROR,
    /**
     * Request count of transmitter overflows.
     */
    TX_OVERFLOWS,
    /**
     * Request count of receiver overflows.
     */
    RX_OVERFLOWS,
    /**
     * Request count of correctly sent bytes.
     */
    TX_BYTES_OK,
    /**
     * Request count of correctly received bytes.
     */
    RX_BYTES_OK,
    /**
     * Request count of dropped packets in transmission.
     */
    TX_PACKETS_DROPPED,
    /**
     * Request count of dropped packets in reception.
     */
    RX_PACKETS_DROPPED,
}
/**
 * Flags specifying the 3GPP-specific Radio Access Technology, when the data
 * bearer network type is `QMI_WDS_NETWORK_TYPE_3`GPP.
 * @bitfield 
 */
enum WdsRat3gpp {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * WCDMA.
     */
    WCDMA,
    /**
     * GPRS.
     */
    GPRS,
    /**
     * HSDPA.
     */
    HSDPA,
    /**
     * HSUPA.
     */
    HSUPA,
    /**
     * EDGE.
     */
    EDGE,
    /**
     * LTE.
     */
    LTE,
    /**
     * HSDPA+.
     */
    HSDPAPLUS,
    /**
     * DC-HSDPA+.
     */
    DCHSDPAPLUS,
    /**
     * 64QAM. Since: 1.18.
     */
    TODO_64QAM,
    /**
     * TD-SCDMA. Since: 1.18.
     */
    TDSCDMA,
    /**
     * No bearer.
     */
    NULL_BEARER,
}
/**
 * Flags specifying the 3GPP2-specific Radio Access Technology, when the data
 * bearer network type is `QMI_WDS_NETWORK_TYPE_3`GPP2.
 * @bitfield 
 */
enum WdsRat3gpp2 {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * CDMA 1x.
     */
    CDMA1X,
    /**
     * EVDO Rev0.
     */
    EVDO_REV0,
    /**
     * EVDO RevA.
     */
    EVDO_REVA,
    /**
     * EVDO RevB.
     */
    EVDO_REVB,
    /**
     * eHRPD. Since: 1.18.
     */
    EHRPD,
    /**
     * FMC. Since: 1.18.
     */
    FMC,
    /**
     * No bearer.
     */
    NULL_BEARER,
}
/**
 * Flags indicating which WDS Set Event Report Transfer Statistics indicators
 * should be emitted.
 * @bitfield 
 */
enum WdsSetEventReportTransferStatistics {
    /**
     * report TX packet successes.
     */
    TX_PACKETS_OK,
    /**
     * report RX packet successes.
     */
    RX_PACKETS_OK,
    /**
     * report TX packet errors.
     */
    TX_PACKETS_ERROR,
    /**
     * report RX packet errors.
     */
    RX_PACKETS_ERROR,
    /**
     * report TX overflows.
     */
    TX_OVERFLOWS,
    /**
     * report RX overflows.
     */
    RX_OVERFLOWS,
    /**
     * report TX byte total.
     */
    TX_BYTES_OK,
    /**
     * report RX byte total.
     */
    RX_BYTES_OK,
    /**
     * report TX packets dropped.
     */
    TX_PACKETS_DROPPED,
    /**
     * report RX packets dropped.
     */
    RX_PACKETS_DROPPED,
}
/**
 * Flags specifying the Service Option when the bearer network type is
 * `QMI_WDS_NETWORK_TYPE_3`GPP2 and when the Radio Access Technology mask
 * contains `QMI_WDS_RAT_3`GPP2_CDMA1X.
 * @bitfield 
 */
enum WdsSoCdma1x {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * IS95.
     */
    IS95,
    /**
     * IS2000.
     */
    IS2000,
    /**
     * IS2000 RelA.
     */
    IS2000_REL_A,
}
/**
 * Flags specifying the Service Option when the bearer network type is
 * `QMI_WDS_NETWORK_TYPE_3`GPP2 and when the Radio Access Technology mask
 * contains `QMI_WDS_RAT_3`GPP2_EVDO_REV0.
 * @bitfield 
 */
enum WdsSoEvdoRev0 {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * DPA.
     */
    DPA,
}
/**
 * Flags specifying the Service Option when the bearer network type is
 * `QMI_WDS_NETWORK_TYPE_3`GPP2 and when the Radio Access Technology mask
 * contains `QMI_WDS_RAT_3`GPP2_EVDO_REVA.
 * @bitfield 
 */
enum WdsSoEvdoRevA {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * DPA.
     */
    DPA,
    /**
     * MFPA.
     */
    MFPA,
    /**
     * EMPA.
     */
    EMPA,
    /**
     * EMPA eHRPD.
     */
    EMPA_EHRPD,
}
/**
 * Flags specifying the Service Option when the bearer network type is
 * `QMI_WDS_NETWORK_TYPE_3`GPP2 and when the Radio Access Technology mask
 * contains `QMI_WDS_RAT_3`GPP2_EVDO_REVB.
 * @bitfield 
 */
enum WdsSoEvdoRevB {
    /**
     * Unknown, to be ignored.
     */
    NONE,
    /**
     * DPA.
     */
    DPA,
    /**
     * MFPA.
     */
    MFPA,
    /**
     * EMPA.
     */
    EMPA,
    /**
     * EMPA eHRPD.
     */
    EMPA_EHRPD,
    /**
     * MMPA.
     */
    MMPA,
    /**
     * MMPA eHRPD.
     */
    MMPA_EHRPD,
}
/**
 * Type of network allowed when trying to connect.
 * @bitfield 
 */
enum WdsTechnologyPreference {
    /**
     * 3GPP allowed.
     */
    TODO_3GPP,
    /**
     * 3GPP2 allowed.
     */
    TODO_3GPP2,
}
/**
 * A symbol specifying the broadcast CID.
 */
const CID_BROADCAST: number
/**
 * A symbol specifying a special CID value that references no CID.
 */
const CID_NONE: number
/**
 * Symbol defining the #QmiClient:client-cid property.
 */
const CLIENT_CID: string
/**
 * Symbol defining the #QmiClient:client-device property.
 */
const CLIENT_DEVICE: string
/**
 * Symbol defining the #QmiClient:client-service property.
 */
const CLIENT_SERVICE: string
/**
 * Symbol defining the #QmiClient:client-valid property.
 */
const CLIENT_VALID: string
/**
 * Symbol defining the #QmiClient:client-version-major property.
 */
const CLIENT_VERSION_MAJOR: string
/**
 * Symbol defining the #QmiClient:client-version-minor property.
 */
const CLIENT_VERSION_MINOR: string
/**
 * Symbol defining the common string prefix used for all libqmi errors in DBus.
 */
const DBUS_ERROR_PREFIX: string
/**
 * Symbol defining the #QmiDevice:device-file property.
 */
const DEVICE_FILE: string
/**
 * Symbol defining the maximum supported mux id.
 */
const DEVICE_MUX_ID_MAX: number
/**
 * Symbol defining the minimum supported mux id.
 */
const DEVICE_MUX_ID_MIN: number
/**
 * Symbol defining the mux id for an unbound interface. This value is also used
 * to indicate an invalid mux id.
 */
const DEVICE_MUX_ID_UNBOUND: number
const DEVICE_NODE: string
/**
 * Symbol defining the #QmiDevice:device-no-file-check property.
 */
const DEVICE_NO_FILE_CHECK: string
/**
 * Symbol defining the #QmiDevice:device-proxy-path property.
 */
const DEVICE_PROXY_PATH: string
/**
 * Symbol defining the #QmiDevice::indication signal.
 */
const DEVICE_SIGNAL_INDICATION: string
/**
 * Symbol defining the #QmiDevice::device-removed signal.
 */
const DEVICE_SIGNAL_REMOVED: string
/**
 * Symbol defining the #QmiDevice:device-wwan-iface property.
 */
const DEVICE_WWAN_IFACE: string
/**
 * First byte of every QMI message.
 */
const MESSAGE_QMUX_MARKER: number
/**
 * Generic vendor id (0x0000).
 */
const MESSAGE_VENDOR_GENERIC: number
/**
 * Symbol defining the #QmiProxy:qmi-proxy-n-clients property.
 */
const PROXY_N_CLIENTS: string
/**
 * Symbol defining the default abstract socket name where the #QmiProxy will listen.
 */
const PROXY_SOCKET_PATH: string
/**
 * The TX/RX rate information is unavailable or cannot be measured.
 */
const WDS_RATE_UNAVAILABLE: number
/**
 * Gets the nickname string for the #QmiCoreError specified at `val`.
 * @param val a QmiCoreError.
 */
function coreErrorGetString(val: CoreError): string
function coreErrorQuark(): GLib.Quark
/**
 * Gets the nickname string for the #QmiDataEndpointType specified at `val`.
 * @param val a QmiDataEndpointType.
 */
function dataEndpointTypeGetString(val: DataEndpointType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDeviceAddLinkFlags in `mask`.
 * @param mask bitmask of QmiDeviceAddLinkFlags values.
 */
function deviceAddLinkFlagsBuildStringFromMask(mask: DeviceAddLinkFlags): string
/**
 * Gets the nickname string for the #QmiDeviceExpectedDataFormat specified at `val`.
 * @param val a QmiDeviceExpectedDataFormat.
 */
function deviceExpectedDataFormatGetString(val: DeviceExpectedDataFormat): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDeviceOpenFlags in `mask`.
 * @param mask bitmask of QmiDeviceOpenFlags values.
 */
function deviceOpenFlagsBuildStringFromMask(mask: DeviceOpenFlags): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDeviceReleaseClientFlags in `mask`.
 * @param mask bitmask of QmiDeviceReleaseClientFlags values.
 */
function deviceReleaseClientFlagsBuildStringFromMask(mask: DeviceReleaseClientFlags): string
/**
 * Gets the nickname string for the #QmiDmsActivationState specified at `val`.
 * @param val a QmiDmsActivationState.
 */
function dmsActivationStateGetString(val: DmsActivationState): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDmsBandCapability in `mask`.
 * @param mask bitmask of QmiDmsBandCapability values.
 */
function dmsBandCapabilityBuildStringFromMask(mask: DmsBandCapability): string
/**
 * Gets the nickname string for the #QmiDmsBootImageDownloadMode specified at `val`.
 * @param val a QmiDmsBootImageDownloadMode.
 */
function dmsBootImageDownloadModeGetString(val: DmsBootImageDownloadMode): string
/**
 * Gets the nickname string for the #QmiDmsDataServiceCapability specified at `val`.
 * @param val a QmiDmsDataServiceCapability.
 */
function dmsDataServiceCapabilityGetString(val: DmsDataServiceCapability): string
/**
 * Gets the nickname string for the #QmiDmsFirmwareImageType specified at `val`.
 * @param val a QmiDmsFirmwareImageType.
 */
function dmsFirmwareImageTypeGetString(val: DmsFirmwareImageType): string
/**
 * Gets the nickname string for the #QmiDmsFoxconnDeviceMode specified at `val`.
 * @param val a QmiDmsFoxconnDeviceMode.
 */
function dmsFoxconnDeviceModeGetString(val: DmsFoxconnDeviceMode): string
/**
 * Gets the nickname string for the #QmiDmsFoxconnFirmwareVersionType specified at `val`.
 * @param val a QmiDmsFoxconnFirmwareVersionType.
 */
function dmsFoxconnFirmwareVersionTypeGetString(val: DmsFoxconnFirmwareVersionType): string
/**
 * Gets the nickname string for the #QmiDmsHpDeviceMode specified at `val`.
 * @param val a QmiDmsHpDeviceMode.
 */
function dmsHpDeviceModeGetString(val: DmsHpDeviceMode): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDmsLteBandCapability in `mask`.
 * @param mask bitmask of QmiDmsLteBandCapability values.
 */
function dmsLteBandCapabilityBuildStringFromMask(mask: DmsLteBandCapability): string
/**
 * Gets the nickname string for the #QmiDmsMacType specified at `val`.
 * @param val a QmiDmsMacType.
 */
function dmsMacTypeGetString(val: DmsMacType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDmsOfflineReason in `mask`.
 * @param mask bitmask of QmiDmsOfflineReason values.
 */
function dmsOfflineReasonBuildStringFromMask(mask: DmsOfflineReason): string
/**
 * Gets the nickname string for the #QmiDmsOperatingMode specified at `val`.
 * @param val a QmiDmsOperatingMode.
 */
function dmsOperatingModeGetString(val: DmsOperatingMode): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDmsPowerState in `mask`.
 * @param mask bitmask of QmiDmsPowerState values.
 */
function dmsPowerStateBuildStringFromMask(mask: DmsPowerState): string
/**
 * Gets the nickname string for the #QmiDmsRadioInterface specified at `val`.
 * @param val a QmiDmsRadioInterface.
 */
function dmsRadioInterfaceGetString(val: DmsRadioInterface): string
/**
 * Gets the nickname string for the #QmiDmsSimCapability specified at `val`.
 * @param val a QmiDmsSimCapability.
 */
function dmsSimCapabilityGetString(val: DmsSimCapability): string
/**
 * Gets a text description of the Sierra Wireless USB composition.
 * @param value a #QmiDmsSwiUsbComposition.
 */
function dmsSwiUsbCompositionGetDescription(value: DmsSwiUsbComposition): string
/**
 * Gets the nickname string for the #QmiDmsSwiUsbComposition specified at `val`.
 * @param val a QmiDmsSwiUsbComposition.
 */
function dmsSwiUsbCompositionGetString(val: DmsSwiUsbComposition): string
/**
 * Gets the nickname string for the #QmiDmsTimeReferenceType specified at `val`.
 * @param val a QmiDmsTimeReferenceType.
 */
function dmsTimeReferenceTypeGetString(val: DmsTimeReferenceType): string
/**
 * Gets the nickname string for the #QmiDmsTimeSource specified at `val`.
 * @param val a QmiDmsTimeSource.
 */
function dmsTimeSourceGetString(val: DmsTimeSource): string
/**
 * Gets the nickname string for the #QmiDmsUimFacility specified at `val`.
 * @param val a QmiDmsUimFacility.
 */
function dmsUimFacilityGetString(val: DmsUimFacility): string
/**
 * Gets the nickname string for the #QmiDmsUimFacilityState specified at `val`.
 * @param val a QmiDmsUimFacilityState.
 */
function dmsUimFacilityStateGetString(val: DmsUimFacilityState): string
/**
 * Gets the nickname string for the #QmiDmsUimPinId specified at `val`.
 * @param val a QmiDmsUimPinId.
 */
function dmsUimPinIdGetString(val: DmsUimPinId): string
/**
 * Gets the nickname string for the #QmiDmsUimPinStatus specified at `val`.
 * @param val a QmiDmsUimPinStatus.
 */
function dmsUimPinStatusGetString(val: DmsUimPinStatus): string
/**
 * Gets the nickname string for the #QmiDmsUimState specified at `val`.
 * @param val a QmiDmsUimState.
 */
function dmsUimStateGetString(val: DmsUimState): string
/**
 * Gets the nickname string for the #QmiDsdApnType specified at `val`.
 * @param val a QmiDsdApnType.
 */
function dsdApnTypeGetString(val: DsdApnType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiDsdApnTypePreference in `mask`.
 * @param mask bitmask of QmiDsdApnTypePreference values.
 */
function dsdApnTypePreferenceBuildStringFromMask(mask: DsdApnTypePreference): string
/**
 * Gets the nickname string for the #QmiEndian specified at `val`.
 * @param val a QmiEndian.
 */
function endianGetString(val: Endian): string
/**
 * Gets the nickname string for the #QmiFoxFirmwareVersionType specified at `val`.
 * @param val a QmiFoxFirmwareVersionType.
 */
function foxFirmwareVersionTypeGetString(val: FoxFirmwareVersionType): string
/**
 * Gets the nickname string for the #QmiGasFirmwareListingMode specified at `val`.
 * @param val a QmiGasFirmwareListingMode.
 */
function gasFirmwareListingModeGetString(val: GasFirmwareListingMode): string
/**
 * Gets the nickname string for the #QmiGasUsbCompositionEndpointType specified at `val`.
 * @param val a QmiGasUsbCompositionEndpointType.
 */
function gasUsbCompositionEndpointTypeGetString(val: GasUsbCompositionEndpointType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocDeleteCellDatabase in `mask`.
 * @param mask bitmask of QmiLocDeleteCellDatabase values.
 */
function locDeleteCellDatabaseBuildStringFromMask(mask: LocDeleteCellDatabase): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocDeleteClockInfo in `mask`.
 * @param mask bitmask of QmiLocDeleteClockInfo values.
 */
function locDeleteClockInfoBuildStringFromMask(mask: LocDeleteClockInfo): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocDeleteGnssData in `mask`.
 * @param mask bitmask of QmiLocDeleteGnssData values.
 */
function locDeleteGnssDataBuildStringFromMask(mask: LocDeleteGnssData): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocDeleteSvInfo in `mask`.
 * @param mask bitmask of QmiLocDeleteSvInfo values.
 */
function locDeleteSvInfoBuildStringFromMask(mask: LocDeleteSvInfo): string
/**
 * Gets the nickname string for the #QmiLocEngineState specified at `val`.
 * @param val a QmiLocEngineState.
 */
function locEngineStateGetString(val: LocEngineState): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocEventRegistrationFlag in `mask`.
 * @param mask bitmask of QmiLocEventRegistrationFlag values.
 */
function locEventRegistrationFlagBuildStringFromMask(mask: LocEventRegistrationFlag): string
/**
 * Gets the nickname string for the #QmiLocFixRecurrenceType specified at `val`.
 * @param val a QmiLocFixRecurrenceType.
 */
function locFixRecurrenceTypeGetString(val: LocFixRecurrenceType): string
/**
 * Gets the nickname string for the #QmiLocHealthStatus specified at `val`.
 * @param val a QmiLocHealthStatus.
 */
function locHealthStatusGetString(val: LocHealthStatus): string
/**
 * Gets the nickname string for the #QmiLocIndicationStatus specified at `val`.
 * @param val a QmiLocIndicationStatus.
 */
function locIndicationStatusGetString(val: LocIndicationStatus): string
/**
 * Gets the nickname string for the #QmiLocIntermediateReportState specified at `val`.
 * @param val a QmiLocIntermediateReportState.
 */
function locIntermediateReportStateGetString(val: LocIntermediateReportState): string
/**
 * Gets the nickname string for the #QmiLocLockType specified at `val`.
 * @param val a QmiLocLockType.
 */
function locLockTypeGetString(val: LocLockType): string
/**
 * Gets the nickname string for the #QmiLocNavigationData specified at `val`.
 * @param val a QmiLocNavigationData.
 */
function locNavigationDataGetString(val: LocNavigationData): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocNmeaType in `mask`.
 * @param mask bitmask of QmiLocNmeaType values.
 */
function locNmeaTypeBuildStringFromMask(mask: LocNmeaType): string
/**
 * Gets the nickname string for the #QmiLocOperationMode specified at `val`.
 * @param val a QmiLocOperationMode.
 */
function locOperationModeGetString(val: LocOperationMode): string
/**
 * Gets the nickname string for the #QmiLocPredictedOrbitsDataFormat specified at `val`.
 * @param val a QmiLocPredictedOrbitsDataFormat.
 */
function locPredictedOrbitsDataFormatGetString(val: LocPredictedOrbitsDataFormat): string
/**
 * Gets the nickname string for the #QmiLocReliability specified at `val`.
 * @param val a QmiLocReliability.
 */
function locReliabilityGetString(val: LocReliability): string
/**
 * Gets the nickname string for the #QmiLocSatelliteStatus specified at `val`.
 * @param val a QmiLocSatelliteStatus.
 */
function locSatelliteStatusGetString(val: LocSatelliteStatus): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocSatelliteValidInformation in `mask`.
 * @param mask bitmask of QmiLocSatelliteValidInformation values.
 */
function locSatelliteValidInformationBuildStringFromMask(mask: LocSatelliteValidInformation): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocSensorDataUsage in `mask`.
 * @param mask bitmask of QmiLocSensorDataUsage values.
 */
function locSensorDataUsageBuildStringFromMask(mask: LocSensorDataUsage): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocServerAddressType in `mask`.
 * @param mask bitmask of QmiLocServerAddressType values.
 */
function locServerAddressTypeBuildStringFromMask(mask: LocServerAddressType): string
/**
 * Gets the nickname string for the #QmiLocServerType specified at `val`.
 * @param val a QmiLocServerType.
 */
function locServerTypeGetString(val: LocServerType): string
/**
 * Gets the nickname string for the #QmiLocSessionStatus specified at `val`.
 * @param val a QmiLocSessionStatus.
 */
function locSessionStatusGetString(val: LocSessionStatus): string
/**
 * Gets the nickname string for the #QmiLocSystem specified at `val`.
 * @param val a QmiLocSystem.
 */
function locSystemGetString(val: LocSystem): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiLocTechnologyUsed in `mask`.
 * @param mask bitmask of QmiLocTechnologyUsed values.
 */
function locTechnologyUsedBuildStringFromMask(mask: LocTechnologyUsed): string
/**
 * Gets the nickname string for the #QmiLocTimeSource specified at `val`.
 * @param val a QmiLocTimeSource.
 */
function locTimeSourceGetString(val: LocTimeSource): string
/**
 * Creates a new `type` TLV with the value given in `raw,` and adds it to the #QmiMessage.
 * @param self a #QmiMessage.
 * @param type specific ID of the TLV to add.
 * @param raw raw data buffer with the value of the TLV.
 * @param length length of the raw data buffer.
 */
function messageAddRawTlv(self: Message, type: number, raw: number, length: number): boolean
/**
 * Calls the given function for each TLV found within the #QmiMessage.
 * @param self a #QmiMessage.
 */
function messageForeachRawTlv(self: Message): void
/**
 * Gets the client ID of the message.
 * @param self a #QmiMessage.
 */
function messageGetClientId(self: Message): number
/**
 * Gets the data buffer of the #QmiMessage without the QMUX header.
 * @param self a #QmiMessage.
 */
function messageGetData(self: Message): [ /* returnType */ number, /* length */ number ]
/**
 * Gets the length of the raw data corresponding to the given #QmiMessage.
 * @param self a #QmiMessage.
 */
function messageGetLength(self: Message): number
/**
 * Gets the ID of the message.
 * @param self a #QmiMessage.
 */
function messageGetMessageId(self: Message): number
/**
 * Gets a printable string with the contents of the whole QMI message.
 * 
 * If known, the printable string will contain translated TLV values as well as
 * the raw data buffer contents.
 * 
 * The translation of the contents may be specific to the `context` provided,
 * e.g. for vendor-specific messages.
 * 
 * If no `context` given, the behavior is the same as qmi_message_get_printable().
 * @param self a #QmiMessage.
 * @param context a #QmiMessageContext.
 * @param linePrefix prefix string to use in each new generated line.
 */
function messageGetPrintableFull(self: Message, context: MessageContext, linePrefix: string): string
/**
 * Gets the raw data buffer of the #QmiMessage.
 * @param self a #QmiMessage.
 */
function messageGetRaw(self: Message): [ /* returnType */ number, /* length */ number ]
/**
 * Get the raw data buffer of a specific TLV within the #QmiMessage.
 * @param self a #QmiMessage.
 * @param type specific ID of the TLV to get.
 */
function messageGetRawTlv(self: Message, type: number): [ /* returnType */ number, /* length */ number ]
/**
 * Gets the service corresponding to the given #QmiMessage.
 * @param self a #QmiMessage.
 */
function messageGetService(self: Message): Service
/**
 * Gets a printable string with the contents of the TLV.
 * 
 * This method is the most generic one and doesn't try to translate the TLV contents.
 * @param self a #QmiMessage.
 * @param linePrefix prefix string to use in each new generated line.
 * @param type type of the TLV.
 * @param raw raw data buffer with the value of the TLV.
 * @param rawLength length of the raw data buffer.
 */
function messageGetTlvPrintable(self: Message, linePrefix: string, type: number, raw: number, rawLength: number): string
/**
 * Gets the transaction ID of the message.
 * @param self a #QmiMessage.
 */
function messageGetTransactionId(self: Message): number
/**
 * Checks whether the given #QmiMessage is an indication.
 * @param self a #QmiMessage.
 */
function messageIsIndication(self: Message): boolean
/**
 * Checks whether the given #QmiMessage is a request.
 * @param self a #QmiMessage.
 */
function messageIsRequest(self: Message): boolean
/**
 * Checks whether the given #QmiMessage is a response.
 * @param self a #QmiMessage.
 */
function messageIsResponse(self: Message): boolean
/**
 * Create a new #QmiMessage with the specified parameters.
 * 
 * Note that `transaction_id` must be less than #G_MAXUINT8 if `service` is
 * #QMI_SERVICE_CTL.
 * @param service a #QmiService
 * @param clientId client ID of the originating control point.
 * @param transactionId transaction ID.
 * @param messageId message ID.
 */
function messageNew(service: Service, clientId: number, transactionId: number, messageId: number): Message
/**
 * Create a new #QmiMessage for the given `service` and `client_id` and including the given QMI data buffer.
 * 
 * Whenever a complete QMI message is read, its data gets removed from the `qmi_data` buffer.
 * 
 * This method should be used instead of qmi_message_new_from_raw() if the input data doesn't have QMUX headers.
 * @param service a #QmiService
 * @param clientId client ID of the originating control point.
 * @param qmiData data buffer containing only the QMI part of the message.
 */
function messageNewFromData(service: Service, clientId: number, qmiData: Uint8Array): [ /* returnType */ Message, /* qmiData */ Uint8Array ]
/**
 * Create a new #QmiMessage from the given raw data buffer.
 * 
 * Whenever a complete QMI message is read, its raw data gets removed from the `raw` buffer.
 * @param raw raw data buffer.
 */
function messageNewFromRaw(raw: Uint8Array): [ /* returnType */ Message, /* raw */ Uint8Array ]
/**
 * Atomically increments the reference count of `self` by one.
 * @param self a #QmiMessage.
 */
function messageRef(self: Message): Message
/**
 * Create a new response #QmiMessage for the specified `request`.
 * @param request a request #QmiMessage.
 * @param error a #QmiProtocolError to set in the result TLV.
 */
function messageResponseNew(request: Message, error: ProtocolError): Message
/**
 * Overwrites the transaction ID of the message.
 * @param self a #QmiMessage.
 * @param transactionId transaction id.
 */
function messageSetTransactionId(self: Message, transactionId: number): void
/**
 * Reads a string from the TLV.
 * 
 * The string written in `out` will need to be NUL-terminated by the caller.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * 
 * Since 1.24.6 the read string is guaranteed to be valid UTF-8.
 * 
 * The fixed sized field may be suffixed with e.g. 0xFF if the contents are
 * shorter than `string_length`. Since 1.26, this method will return the valid
 * UTF-8 characters in the start of the string, instead of returning an error
 * when doing the full UTF-8 string validation.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param stringLength amount of bytes to read.
 */
function messageTlvReadFixedSizeString(self: Message, tlvOffset: number, offset: number, stringLength: number): [ /* returnType */ boolean, /* offset */ number, /* out */ string ]
/**
 * Reads a 64-bit floating-point number from the TLV.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGdouble(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a 32-bit floating-point number from the TLV.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGfloatEndian(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a signed 16-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGint16(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a signed 32-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGint32(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a signed 64-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGint64(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a signed byte from the TLV.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 */
function messageTlvReadGint8(self: Message, tlvOffset: number, offset: number): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads an unsigned 16-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGuint16(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads an unsigned 32-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGuint32(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads an unsigned 64-bit integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadGuint64(self: Message, tlvOffset: number, offset: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads an unsigned byte from the TLV.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of the offset within the TLV value.
 */
function messageTlvReadGuint8(self: Message, tlvOffset: number, offset: number): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Starts reading a given TLV from the #QmiMessage.
 * @param self a #QmiMessage.
 * @param type specific ID of the TLV to read.
 */
function messageTlvReadInit(self: Message, type: number): [ /* returnType */ number, /* outTlvLength */ number ]
function messageTlvReadRemainingSize(self: Message, tlvOffset: number, offset: number): number
/**
 * Reads a `b_bytes-sized` integer from the TLV, in host byte order.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param nBytes number of bytes to read.
 * @param endian source endianness, which will be swapped to host byte order if necessary.
 */
function messageTlvReadSizedGuint(self: Message, tlvOffset: number, offset: number, nBytes: number, endian: Endian): [ /* returnType */ boolean, /* offset */ number, /* out */ number ]
/**
 * Reads a string from the TLV.
 * 
 * `offset` needs to point to a valid `gsize` specifying the index to start
 * reading from within the TLV value (0 for the first item). If the variable
 * is successfully read, `offset` will be updated to point past the read item.
 * 
 * Since 1.24.6 the read string is guaranteed to be valid UTF-8. Also, in order to
 * overcome known firmware errors on string fields, this method will also
 * attempt to parse the string as GSM-7 or UCS-2 if the initial UTF-8 validation
 * fails.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_read_init().
 * @param offset address of a the offset within the TLV value.
 * @param nSizePrefixBytes number of bytes used in the size prefix.
 * @param maxSize maximum number of bytes to read, or 0 to read all available bytes.
 */
function messageTlvReadString(self: Message, tlvOffset: number, offset: number, nSizePrefixBytes: number, maxSize: number): [ /* returnType */ boolean, /* offset */ number, /* out */ string ]
/**
 * Completes building a TLV in the #QmiMessage.
 * 
 * In case of error the TLV will be reseted; i.e. there is no need to explicitly
 * call qmi_message_tlv_write_reset().
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_write_init().
 */
function messageTlvWriteComplete(self: Message, tlvOffset: number): boolean
/**
 * Appends a signed 16-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #gint16 in host byte order.
 */
function messageTlvWriteGint16(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends a signed 32-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #gint32 in host byte order.
 */
function messageTlvWriteGint32(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends a signed 32-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #gint64 in host byte order.
 */
function messageTlvWriteGint64(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends a signed byte variable to the TLV being built.
 * @param self a #QmiMessage.
 * @param in_ a #gint8.
 */
function messageTlvWriteGint8(self: Message, in_: number): boolean
/**
 * Appends an unsigned 16-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #guint16 in host byte order.
 */
function messageTlvWriteGuint16(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends an unsigned 32-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #guint32 in host byte order.
 */
function messageTlvWriteGuint32(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends an unsigned 64-bit integer to the TLV being built. The number to be
 * written is expected to be given in host endianness, and this method takes
 * care of converting the value written to the byte order specified by `endian`.
 * @param self a #QmiMessage.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #guint64 in host byte order.
 */
function messageTlvWriteGuint64(self: Message, endian: Endian, in_: number): boolean
/**
 * Appends an unsigned byte to the TLV being built.
 * @param self a #QmiMessage.
 * @param in_ a #guint8.
 */
function messageTlvWriteGuint8(self: Message, in_: number): boolean
/**
 * Starts building a new TLV in the #QmiMessage.
 * 
 * In order to finish adding the TLV, qmi_message_tlv_write_complete() needs to be
 * called.
 * 
 * If any error happens adding fields on the TLV, the previous state can be
 * recovered using qmi_message_tlv_write_reset().
 * @param self a #QmiMessage.
 * @param type specific ID of the TLV to add.
 */
function messageTlvWriteInit(self: Message, type: number): number
/**
 * Removes the TLV being currently added.
 * @param self a #QmiMessage.
 * @param tlvOffset offset that was returned by qmi_message_tlv_write_init().
 */
function messageTlvWriteReset(self: Message, tlvOffset: number): void
/**
 * Appends a `n_bytes-sized` unsigned integer to the TLV being built. The number
 * to be written is expected to be given in host endianness, and this method
 * takes care of converting the value written to the byte order specified by
 * `endian`.
 * 
 * The value of `n_bytes` can be any between 1 and 8.
 * @param self a #QmiMessage.
 * @param nBytes number of bytes to write.
 * @param endian target endianness, swapped from host byte order if necessary.
 * @param in_ a #guint64 in host byte order.
 */
function messageTlvWriteSizedGuint(self: Message, nBytes: number, endian: Endian, in_: number): boolean
/**
 * Appends a string to the TLV being built.
 * 
 * Fixed-sized strings should give `n_size_prefix_bytes` equal to 0.
 * @param self a #QmiMessage.
 * @param nSizePrefixBytes number of bytes to use in the size prefix.
 * @param in_ string to write.
 * @param inLength length of `in,` or -1 if `in` is NUL-terminated.
 */
function messageTlvWriteString(self: Message, nSizePrefixBytes: number, in_: string, inLength: number): boolean
/**
 * Atomically decrements the reference count of `self` by one.
 * If the reference count drops to 0, `self` is completely disposed.
 * @param self a #QmiMessage.
 */
function messageUnref(self: Message): void
/**
 * Gets the nickname string for the #QmiNasActiveBand specified at `val`.
 * @param val a QmiNasActiveBand.
 */
function nasActiveBandGetString(val: NasActiveBand): string
/**
 * Gets the nickname string for the #QmiNasAttachState specified at `val`.
 * @param val a QmiNasAttachState.
 */
function nasAttachStateGetString(val: NasAttachState): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasBandPreference in `mask`.
 * @param mask bitmask of QmiNasBandPreference values.
 */
function nasBandPreferenceBuildStringFromMask(mask: NasBandPreference): string
/**
 * Gets the nickname string for the #QmiNasBoolean specified at `val`.
 * @param val a QmiNasBoolean.
 */
function nasBooleanGetString(val: NasBoolean): string
/**
 * Gets the nickname string for the #QmiNasCallBarringStatus specified at `val`.
 * @param val a QmiNasCallBarringStatus.
 */
function nasCallBarringStatusGetString(val: NasCallBarringStatus): string
/**
 * Gets the nickname string for the #QmiNasCdmaPilotType specified at `val`.
 * @param val a QmiNasCdmaPilotType.
 */
function nasCdmaPilotTypeGetString(val: NasCdmaPilotType): string
/**
 * Gets the nickname string for the #QmiNasCdmaPrlPreference specified at `val`.
 * @param val a QmiNasCdmaPrlPreference.
 */
function nasCdmaPrlPreferenceGetString(val: NasCdmaPrlPreference): string
/**
 * Gets the nickname string for the #QmiNasCellBroadcastCapability specified at `val`.
 * @param val a QmiNasCellBroadcastCapability.
 */
function nasCellBroadcastCapabilityGetString(val: NasCellBroadcastCapability): string
/**
 * Gets the nickname string for the #QmiNasChangeDuration specified at `val`.
 * @param val a QmiNasChangeDuration.
 */
function nasChangeDurationGetString(val: NasChangeDuration): string
/**
 * Gets the nickname string for the #QmiNasDataCapability specified at `val`.
 * @param val a QmiNasDataCapability.
 */
function nasDataCapabilityGetString(val: NasDataCapability): string
/**
 * Gets the nickname string for the #QmiNasDayOfWeek specified at `val`.
 * @param val a QmiNasDayOfWeek.
 */
function nasDayOfWeekGetString(val: NasDayOfWeek): string
/**
 * Gets the nickname string for the #QmiNasDaylightSavingsAdjustment specified at `val`.
 * @param val a QmiNasDaylightSavingsAdjustment.
 */
function nasDaylightSavingsAdjustmentGetString(val: NasDaylightSavingsAdjustment): string
/**
 * Gets the nickname string for the #QmiNasDLBandwidth specified at `val`.
 * @param val a QmiNasDLBandwidth.
 */
function nasDlBandwidthGetString(val: NasDLBandwidth): string
/**
 * Gets the nickname string for the #QmiNasDrx specified at `val`.
 * @param val a QmiNasDrx.
 */
function nasDrxGetString(val: NasDrx): string
/**
 * Gets the nickname string for the #QmiNasEvdoSinrLevel specified at `val`.
 * @param val a QmiNasEvdoSinrLevel.
 */
function nasEvdoSinrLevelGetString(val: NasEvdoSinrLevel): string
/**
 * Gets the nickname string for the #QmiNasGsmWcdmaAcquisitionOrderPreference specified at `val`.
 * @param val a QmiNasGsmWcdmaAcquisitionOrderPreference.
 */
function nasGsmWcdmaAcquisitionOrderPreferenceGetString(val: NasGsmWcdmaAcquisitionOrderPreference): string
/**
 * Gets the nickname string for the #QmiNasHdrPersonality specified at `val`.
 * @param val a QmiNasHdrPersonality.
 */
function nasHdrPersonalityGetString(val: NasHdrPersonality): string
/**
 * Gets the nickname string for the #QmiNasHdrProtocolRevision specified at `val`.
 * @param val a QmiNasHdrProtocolRevision.
 */
function nasHdrProtocolRevisionGetString(val: NasHdrProtocolRevision): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasLteBandPreference in `mask`.
 * @param mask bitmask of QmiNasLteBandPreference values.
 */
function nasLteBandPreferenceBuildStringFromMask(mask: NasLteBandPreference): string
/**
 * Gets the nickname string for the #QmiNasLteCellAccessStatus specified at `val`.
 * @param val a QmiNasLteCellAccessStatus.
 */
function nasLteCellAccessStatusGetString(val: NasLteCellAccessStatus): string
/**
 * Gets the nickname string for the #QmiNasLteRegistrationDomain specified at `val`.
 * @param val a QmiNasLteRegistrationDomain.
 */
function nasLteRegistrationDomainGetString(val: NasLteRegistrationDomain): string
/**
 * Gets the nickname string for the #QmiNasLteVoiceDomain specified at `val`.
 * @param val a QmiNasLteVoiceDomain.
 */
function nasLteVoiceDomainGetString(val: NasLteVoiceDomain): string
/**
 * Gets the nickname string for the #QmiNasNetworkDescriptionDisplay specified at `val`.
 * @param val a QmiNasNetworkDescriptionDisplay.
 */
function nasNetworkDescriptionDisplayGetString(val: NasNetworkDescriptionDisplay): string
/**
 * Gets the nickname string for the #QmiNasNetworkDescriptionEncoding specified at `val`.
 * @param val a QmiNasNetworkDescriptionEncoding.
 */
function nasNetworkDescriptionEncodingGetString(val: NasNetworkDescriptionEncoding): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasNetworkNameDisplayCondition in `mask`.
 * @param mask bitmask of QmiNasNetworkNameDisplayCondition values.
 */
function nasNetworkNameDisplayConditionBuildStringFromMask(mask: NasNetworkNameDisplayCondition): string
/**
 * Gets the nickname string for the #QmiNasNetworkNameSource specified at `val`.
 * @param val a QmiNasNetworkNameSource.
 */
function nasNetworkNameSourceGetString(val: NasNetworkNameSource): string
/**
 * Gets the nickname string for the #QmiNasNetworkRegisterType specified at `val`.
 * @param val a QmiNasNetworkRegisterType.
 */
function nasNetworkRegisterTypeGetString(val: NasNetworkRegisterType): string
/**
 * Gets the nickname string for the #QmiNasNetworkScanResult specified at `val`.
 * @param val a QmiNasNetworkScanResult.
 */
function nasNetworkScanResultGetString(val: NasNetworkScanResult): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasNetworkScanType in `mask`.
 * @param mask bitmask of QmiNasNetworkScanType values.
 */
function nasNetworkScanTypeBuildStringFromMask(mask: NasNetworkScanType): string
/**
 * Gets the nickname string for the #QmiNasNetworkSelectionPreference specified at `val`.
 * @param val a QmiNasNetworkSelectionPreference.
 */
function nasNetworkSelectionPreferenceGetString(val: NasNetworkSelectionPreference): string
/**
 * Gets the nickname string for the #QmiNasNetworkSelectionRegistrationRestriction specified at `val`.
 * @param val a QmiNasNetworkSelectionRegistrationRestriction.
 */
function nasNetworkSelectionRegistrationRestrictionGetString(val: NasNetworkSelectionRegistrationRestriction): string
/**
 * Gets the nickname string for the #QmiNasNetworkServiceDomain specified at `val`.
 * @param val a QmiNasNetworkServiceDomain.
 */
function nasNetworkServiceDomainGetString(val: NasNetworkServiceDomain): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasNetworkStatus in `mask`.
 * @param mask bitmask of QmiNasNetworkStatus values.
 */
function nasNetworkStatusBuildStringFromMask(mask: NasNetworkStatus): string
/**
 * Gets the nickname string for the #QmiNasNetworkType specified at `val`.
 * @param val a QmiNasNetworkType.
 */
function nasNetworkTypeGetString(val: NasNetworkType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasPlmnAccessTechnologyIdentifier in `mask`.
 * @param mask bitmask of QmiNasPlmnAccessTechnologyIdentifier values.
 */
function nasPlmnAccessTechnologyIdentifierBuildStringFromMask(mask: NasPlmnAccessTechnologyIdentifier): string
/**
 * Gets the nickname string for the #QmiNasPlmnEncodingScheme specified at `val`.
 * @param val a QmiNasPlmnEncodingScheme.
 */
function nasPlmnEncodingSchemeGetString(val: NasPlmnEncodingScheme): string
/**
 * Gets the nickname string for the #QmiNasPlmnLanguageId specified at `val`.
 * @param val a QmiNasPlmnLanguageId.
 */
function nasPlmnLanguageIdGetString(val: NasPlmnLanguageId): string
/**
 * Gets the nickname string for the #QmiNasPlmnNameCountryInitials specified at `val`.
 * @param val a QmiNasPlmnNameCountryInitials.
 */
function nasPlmnNameCountryInitialsGetString(val: NasPlmnNameCountryInitials): string
/**
 * Gets the nickname string for the #QmiNasPlmnNameSpareBits specified at `val`.
 * @param val a QmiNasPlmnNameSpareBits.
 */
function nasPlmnNameSpareBitsGetString(val: NasPlmnNameSpareBits): string
/**
 * Gets the nickname string for the #QmiNasPreferenceDuration specified at `val`.
 * @param val a QmiNasPreferenceDuration.
 */
function nasPreferenceDurationGetString(val: NasPreferenceDuration): string
/**
 * Gets the nickname string for the #QmiNasPsAttachAction specified at `val`.
 * @param val a QmiNasPsAttachAction.
 */
function nasPsAttachActionGetString(val: NasPsAttachAction): string
/**
 * Gets the nickname string for the #QmiNasRadioInterface specified at `val`.
 * @param val a QmiNasRadioInterface.
 */
function nasRadioInterfaceGetString(val: NasRadioInterface): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasRadioTechnologyPreference in `mask`.
 * @param mask bitmask of QmiNasRadioTechnologyPreference values.
 */
function nasRadioTechnologyPreferenceBuildStringFromMask(mask: NasRadioTechnologyPreference): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasRatModePreference in `mask`.
 * @param mask bitmask of QmiNasRatModePreference values.
 */
function nasRatModePreferenceBuildStringFromMask(mask: NasRatModePreference): string
/**
 * Converts the encoded data in `array` to UTF-8 and returns a newly allocated
 * NUL-terminated string.
 * @param encoding a #QmiNasNetworkDescriptionEncoding.
 * @param array a #GArray with the encoded data.
 */
function nasReadStringFromNetworkDescriptionEncodedArray(encoding: NasNetworkDescriptionEncoding, array: Uint8Array): string
/**
 * Converts the encoded data in `array` to UTF-8 and returns a newly allocated
 * NUL-terminated string.
 * @param encoding a #QmiNasPlmnEncodingScheme.
 * @param array a #GArray with the encoded data.
 */
function nasReadStringFromPlmnEncodedArray(encoding: NasPlmnEncodingScheme, array: Uint8Array): string
/**
 * Gets the nickname string for the #QmiNasRegistrationState specified at `val`.
 * @param val a QmiNasRegistrationState.
 */
function nasRegistrationStateGetString(val: NasRegistrationState): string
/**
 * Gets the nickname string for the #QmiNasRejectCause specified at `val`.
 * @param val a QmiNasRejectCause.
 */
function nasRejectCauseGetString(val: NasRejectCause): string
/**
 * Gets the nickname string for the #QmiNasRoamingIndicatorStatus specified at `val`.
 * @param val a QmiNasRoamingIndicatorStatus.
 */
function nasRoamingIndicatorStatusGetString(val: NasRoamingIndicatorStatus): string
/**
 * Gets the nickname string for the #QmiNasRoamingPreference specified at `val`.
 * @param val a QmiNasRoamingPreference.
 */
function nasRoamingPreferenceGetString(val: NasRoamingPreference): string
/**
 * Gets the nickname string for the #QmiNasRoamingStatus specified at `val`.
 * @param val a QmiNasRoamingStatus.
 */
function nasRoamingStatusGetString(val: NasRoamingStatus): string
/**
 * Gets the nickname string for the #QmiNasScellState specified at `val`.
 * @param val a QmiNasScellState.
 */
function nasScellStateGetString(val: NasScellState): string
/**
 * Gets the nickname string for the #QmiNasServiceDomainPreference specified at `val`.
 * @param val a QmiNasServiceDomainPreference.
 */
function nasServiceDomainPreferenceGetString(val: NasServiceDomainPreference): string
/**
 * Gets the nickname string for the #QmiNasServiceStatus specified at `val`.
 * @param val a QmiNasServiceStatus.
 */
function nasServiceStatusGetString(val: NasServiceStatus): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasSignalStrengthRequest in `mask`.
 * @param mask bitmask of QmiNasSignalStrengthRequest values.
 */
function nasSignalStrengthRequestBuildStringFromMask(mask: NasSignalStrengthRequest): string
/**
 * Gets the nickname string for the #QmiNasSimRejectState specified at `val`.
 * @param val a QmiNasSimRejectState.
 */
function nasSimRejectStateGetString(val: NasSimRejectState): string
/**
 * Gets the nickname string for the #QmiNasSwiEmmConnectionState specified at `val`.
 * @param val a QmiNasSwiEmmConnectionState.
 */
function nasSwiEmmConnectionStateGetString(val: NasSwiEmmConnectionState): string
/**
 * Gets the nickname string for the #QmiNasSwiEmmState specified at `val`.
 * @param val a QmiNasSwiEmmState.
 */
function nasSwiEmmStateGetString(val: NasSwiEmmState): string
/**
 * Gets the nickname string for the #QmiNasSwiImsRegState specified at `val`.
 * @param val a QmiNasSwiImsRegState.
 */
function nasSwiImsRegStateGetString(val: NasSwiImsRegState): string
/**
 * Gets the nickname string for the #QmiNasSwiModemMode specified at `val`.
 * @param val a QmiNasSwiModemMode.
 */
function nasSwiModemModeGetString(val: NasSwiModemMode): string
/**
 * Gets the nickname string for the #QmiNasSwiPsState specified at `val`.
 * @param val a QmiNasSwiPsState.
 */
function nasSwiPsStateGetString(val: NasSwiPsState): string
/**
 * Gets the nickname string for the #QmiNasSwiSystemMode specified at `val`.
 * @param val a QmiNasSwiSystemMode.
 */
function nasSwiSystemModeGetString(val: NasSwiSystemMode): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiNasTdScdmaBandPreference in `mask`.
 * @param mask bitmask of QmiNasTdScdmaBandPreference values.
 */
function nasTdScdmaBandPreferenceBuildStringFromMask(mask: NasTdScdmaBandPreference): string
/**
 * Gets the nickname string for the #QmiNasUsagePreference specified at `val`.
 * @param val a QmiNasUsagePreference.
 */
function nasUsagePreferenceGetString(val: NasUsagePreference): string
/**
 * Gets the nickname string for the #QmiNasVoiceDomainPreference specified at `val`.
 * @param val a QmiNasVoiceDomainPreference.
 */
function nasVoiceDomainPreferenceGetString(val: NasVoiceDomainPreference): string
/**
 * Gets the nickname string for the #QmiNasWcdmaHsService specified at `val`.
 * @param val a QmiNasWcdmaHsService.
 */
function nasWcdmaHsServiceGetString(val: NasWcdmaHsService): string
/**
 * Gets the nickname string for the #QmiNasWcdmaRrcState specified at `val`.
 * @param val a QmiNasWcdmaRrcState.
 */
function nasWcdmaRrcStateGetString(val: NasWcdmaRrcState): string
/**
 * Gets the nickname string for the #QmiOmaHfaFeatureDoneState specified at `val`.
 * @param val a QmiOmaHfaFeatureDoneState.
 */
function omaHfaFeatureDoneStateGetString(val: OmaHfaFeatureDoneState): string
/**
 * Gets the nickname string for the #QmiOmaSessionFailedReason specified at `val`.
 * @param val a QmiOmaSessionFailedReason.
 */
function omaSessionFailedReasonGetString(val: OmaSessionFailedReason): string
/**
 * Gets the nickname string for the #QmiOmaSessionState specified at `val`.
 * @param val a QmiOmaSessionState.
 */
function omaSessionStateGetString(val: OmaSessionState): string
/**
 * Gets the nickname string for the #QmiOmaSessionType specified at `val`.
 * @param val a QmiOmaSessionType.
 */
function omaSessionTypeGetString(val: OmaSessionType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiPbmEventRegistrationFlag in `mask`.
 * @param mask bitmask of QmiPbmEventRegistrationFlag values.
 */
function pbmEventRegistrationFlagBuildStringFromMask(mask: PbmEventRegistrationFlag): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiPbmPhonebookType in `mask`.
 * @param mask bitmask of QmiPbmPhonebookType values.
 */
function pbmPhonebookTypeBuildStringFromMask(mask: PbmPhonebookType): string
/**
 * Gets the nickname string for the #QmiPbmSessionType specified at `val`.
 * @param val a QmiPbmSessionType.
 */
function pbmSessionTypeGetString(val: PbmSessionType): string
/**
 * Gets the nickname string for the #QmiPdcConfigurationType specified at `val`.
 * @param val a QmiPdcConfigurationType.
 */
function pdcConfigurationTypeGetString(val: PdcConfigurationType): string
/**
 * Gets the nickname string for the #QmiPdcRefreshEventType specified at `val`.
 * @param val a QmiPdcRefreshEventType.
 */
function pdcRefreshEventTypeGetString(val: PdcRefreshEventType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiPdsDataValid in `mask`.
 * @param mask bitmask of QmiPdsDataValid values.
 */
function pdsDataValidBuildStringFromMask(mask: PdsDataValid): string
/**
 * Gets the nickname string for the #QmiPdsNetworkMode specified at `val`.
 * @param val a QmiPdsNetworkMode.
 */
function pdsNetworkModeGetString(val: PdsNetworkMode): string
/**
 * Gets the nickname string for the #QmiPdsOperatingMode specified at `val`.
 * @param val a QmiPdsOperatingMode.
 */
function pdsOperatingModeGetString(val: PdsOperatingMode): string
/**
 * Gets the nickname string for the #QmiPdsOperationMode specified at `val`.
 * @param val a QmiPdsOperationMode.
 */
function pdsOperationModeGetString(val: PdsOperationMode): string
/**
 * Gets the nickname string for the #QmiPdsPositionSessionStatus specified at `val`.
 * @param val a QmiPdsPositionSessionStatus.
 */
function pdsPositionSessionStatusGetString(val: PdsPositionSessionStatus): string
/**
 * Gets the nickname string for the #QmiPdsTrackingSessionState specified at `val`.
 * @param val a QmiPdsTrackingSessionState.
 */
function pdsTrackingSessionStateGetString(val: PdsTrackingSessionState): string
/**
 * Gets the nickname string for the #QmiProtocolError specified at `val`.
 * @param val a QmiProtocolError.
 */
function protocolErrorGetString(val: ProtocolError): string
function protocolErrorQuark(): GLib.Quark
/**
 * Gets the nickname string for the #QmiQosEvent specified at `val`.
 * @param val a QmiQosEvent.
 */
function qosEventGetString(val: QosEvent): string
/**
 * Gets the nickname string for the #QmiQosStatus specified at `val`.
 * @param val a QmiQosStatus.
 */
function qosStatusGetString(val: QosStatus): string
/**
 * Gets the nickname string for the #QmiSarRfState specified at `val`.
 * @param val a QmiSarRfState.
 */
function sarRfStateGetString(val: SarRfState): string
/**
 * Gets the nickname string for the #QmiService specified at `val`.
 * @param val a QmiService.
 */
function serviceGetString(val: Service): string
/**
 * Gets the nickname string for the #QmiSioPort specified at `val`.
 * @param val a QmiSioPort.
 */
function sioPortGetString(val: SioPort): string
/**
 * Gets the nickname string for the #QmiUimCardApplicationPersonalizationFeature specified at `val`.
 * @param val a QmiUimCardApplicationPersonalizationFeature.
 */
function uimCardApplicationPersonalizationFeatureGetString(val: UimCardApplicationPersonalizationFeature): string
/**
 * Gets the nickname string for the #QmiUimCardApplicationPersonalizationState specified at `val`.
 * @param val a QmiUimCardApplicationPersonalizationState.
 */
function uimCardApplicationPersonalizationStateGetString(val: UimCardApplicationPersonalizationState): string
/**
 * Gets the nickname string for the #QmiUimCardApplicationState specified at `val`.
 * @param val a QmiUimCardApplicationState.
 */
function uimCardApplicationStateGetString(val: UimCardApplicationState): string
/**
 * Gets the nickname string for the #QmiUimCardApplicationType specified at `val`.
 * @param val a QmiUimCardApplicationType.
 */
function uimCardApplicationTypeGetString(val: UimCardApplicationType): string
/**
 * Gets the nickname string for the #QmiUimCardError specified at `val`.
 * @param val a QmiUimCardError.
 */
function uimCardErrorGetString(val: UimCardError): string
/**
 * Gets the nickname string for the #QmiUimCardProtocol specified at `val`.
 * @param val a QmiUimCardProtocol.
 */
function uimCardProtocolGetString(val: UimCardProtocol): string
/**
 * Gets the nickname string for the #QmiUimCardState specified at `val`.
 * @param val a QmiUimCardState.
 */
function uimCardStateGetString(val: UimCardState): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiUimConfiguration in `mask`.
 * @param mask bitmask of QmiUimConfiguration values.
 */
function uimConfigurationBuildStringFromMask(mask: UimConfiguration): string
/**
 * Gets the nickname string for the #QmiUimDepersonalizationOperation specified at `val`.
 * @param val a QmiUimDepersonalizationOperation.
 */
function uimDepersonalizationOperationGetString(val: UimDepersonalizationOperation): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiUimEventRegistrationFlag in `mask`.
 * @param mask bitmask of QmiUimEventRegistrationFlag values.
 */
function uimEventRegistrationFlagBuildStringFromMask(mask: UimEventRegistrationFlag): string
/**
 * Gets the nickname string for the #QmiUimFileType specified at `val`.
 * @param val a QmiUimFileType.
 */
function uimFileTypeGetString(val: UimFileType): string
/**
 * Gets the nickname string for the #QmiUimPhysicalCardState specified at `val`.
 * @param val a QmiUimPhysicalCardState.
 */
function uimPhysicalCardStateGetString(val: UimPhysicalCardState): string
/**
 * Gets the nickname string for the #QmiUimPinId specified at `val`.
 * @param val a QmiUimPinId.
 */
function uimPinIdGetString(val: UimPinId): string
/**
 * Gets the nickname string for the #QmiUimPinState specified at `val`.
 * @param val a QmiUimPinState.
 */
function uimPinStateGetString(val: UimPinState): string
/**
 * Gets the nickname string for the #QmiUimRefreshMode specified at `val`.
 * @param val a QmiUimRefreshMode.
 */
function uimRefreshModeGetString(val: UimRefreshMode): string
/**
 * Gets the nickname string for the #QmiUimRefreshStage specified at `val`.
 * @param val a QmiUimRefreshStage.
 */
function uimRefreshStageGetString(val: UimRefreshStage): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiUimSecurityAttribute in `mask`.
 * @param mask bitmask of QmiUimSecurityAttribute values.
 */
function uimSecurityAttributeBuildStringFromMask(mask: UimSecurityAttribute): string
/**
 * Gets the nickname string for the #QmiUimSecurityAttributeLogic specified at `val`.
 * @param val a QmiUimSecurityAttributeLogic.
 */
function uimSecurityAttributeLogicGetString(val: UimSecurityAttributeLogic): string
/**
 * Gets the nickname string for the #QmiUimSessionType specified at `val`.
 * @param val a QmiUimSessionType.
 */
function uimSessionTypeGetString(val: UimSessionType): string
/**
 * Gets the nickname string for the #QmiUimSlotState specified at `val`.
 * @param val a QmiUimSlotState.
 */
function uimSlotStateGetString(val: UimSlotState): string
/**
 * Checks whether QMI message traces are currently enabled.
 */
function utilsGetTracesEnabled(): boolean
/**
 * Sets whether QMI message traces are enabled or disabled.
 * @param enabled %TRUE to enable traces, %FALSE to disable them.
 */
function utilsSetTracesEnabled(enabled: boolean): void
/**
 * Gets the nickname string for the #QmiVoiceAlphaDataCodingScheme specified at `val`.
 * @param val a QmiVoiceAlphaDataCodingScheme.
 */
function voiceAlphaDataCodingSchemeGetString(val: VoiceAlphaDataCodingScheme): string
/**
 * Gets the nickname string for the #QmiVoiceAls specified at `val`.
 * @param val a QmiVoiceAls.
 */
function voiceAlsGetString(val: VoiceAls): string
/**
 * Gets the nickname string for the #QmiVoiceCallControlResultType specified at `val`.
 * @param val a QmiVoiceCallControlResultType.
 */
function voiceCallControlResultTypeGetString(val: VoiceCallControlResultType): string
/**
 * Gets the nickname string for the #QmiVoiceCallControlSupplementaryServiceType specified at `val`.
 * @param val a QmiVoiceCallControlSupplementaryServiceType.
 */
function voiceCallControlSupplementaryServiceTypeGetString(val: VoiceCallControlSupplementaryServiceType): string
/**
 * Gets the nickname string for the #QmiVoiceCallDirection specified at `val`.
 * @param val a QmiVoiceCallDirection.
 */
function voiceCallDirectionGetString(val: VoiceCallDirection): string
/**
 * Gets the nickname string for the #QmiVoiceCallEndReason specified at `val`.
 * @param val a QmiVoiceCallEndReason.
 */
function voiceCallEndReasonGetString(val: VoiceCallEndReason): string
/**
 * Gets the nickname string for the #QmiVoiceCallMode specified at `val`.
 * @param val a QmiVoiceCallMode.
 */
function voiceCallModeGetString(val: VoiceCallMode): string
/**
 * Gets the nickname string for the #QmiVoiceCallState specified at `val`.
 * @param val a QmiVoiceCallState.
 */
function voiceCallStateGetString(val: VoiceCallState): string
/**
 * Gets the nickname string for the #QmiVoiceCallType specified at `val`.
 * @param val a QmiVoiceCallType.
 */
function voiceCallTypeGetString(val: VoiceCallType): string
/**
 * Gets the nickname string for the #QmiVoiceDomain specified at `val`.
 * @param val a QmiVoiceDomain.
 */
function voiceDomainGetString(val: VoiceDomain): string
/**
 * Gets the nickname string for the #QmiVoicePresentation specified at `val`.
 * @param val a QmiVoicePresentation.
 */
function voicePresentationGetString(val: VoicePresentation): string
/**
 * Gets the nickname string for the #QmiVoicePrivacy specified at `val`.
 * @param val a QmiVoicePrivacy.
 */
function voicePrivacyGetString(val: VoicePrivacy): string
/**
 * Gets the nickname string for the #QmiVoiceServiceOption specified at `val`.
 * @param val a QmiVoiceServiceOption.
 */
function voiceServiceOptionGetString(val: VoiceServiceOption): string
/**
 * Gets the nickname string for the #QmiVoiceSupplementaryServiceAction specified at `val`.
 * @param val a QmiVoiceSupplementaryServiceAction.
 */
function voiceSupplementaryServiceActionGetString(val: VoiceSupplementaryServiceAction): string
/**
 * Gets the nickname string for the #QmiVoiceSupplementaryServiceNotificationType specified at `val`.
 * @param val a QmiVoiceSupplementaryServiceNotificationType.
 */
function voiceSupplementaryServiceNotificationTypeGetString(val: VoiceSupplementaryServiceNotificationType): string
/**
 * Gets the nickname string for the #QmiVoiceSupplementaryServiceReason specified at `val`.
 * @param val a QmiVoiceSupplementaryServiceReason.
 */
function voiceSupplementaryServiceReasonGetString(val: VoiceSupplementaryServiceReason): string
/**
 * Gets the nickname string for the #QmiVoiceSupplementaryServiceType specified at `val`.
 * @param val a QmiVoiceSupplementaryServiceType.
 */
function voiceSupplementaryServiceTypeGetString(val: VoiceSupplementaryServiceType): string
/**
 * Gets the nickname string for the #QmiVoiceTtyMode specified at `val`.
 * @param val a QmiVoiceTtyMode.
 */
function voiceTtyModeGetString(val: VoiceTtyMode): string
/**
 * Gets the nickname string for the #QmiVoiceUserAction specified at `val`.
 * @param val a QmiVoiceUserAction.
 */
function voiceUserActionGetString(val: VoiceUserAction): string
/**
 * Gets the nickname string for the #QmiVoiceUssDataCodingScheme specified at `val`.
 * @param val a QmiVoiceUssDataCodingScheme.
 */
function voiceUssDataCodingSchemeGetString(val: VoiceUssDataCodingScheme): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiVoiceWcdmaAmrStatus in `mask`.
 * @param mask bitmask of QmiVoiceWcdmaAmrStatus values.
 */
function voiceWcdmaAmrStatusBuildStringFromMask(mask: VoiceWcdmaAmrStatus): string
/**
 * Gets the nickname string for the #QmiWdaDataAggregationProtocol specified at `val`.
 * @param val a QmiWdaDataAggregationProtocol.
 */
function wdaDataAggregationProtocolGetString(val: WdaDataAggregationProtocol): string
/**
 * Gets the nickname string for the #QmiWdaLinkLayerProtocol specified at `val`.
 * @param val a QmiWdaLinkLayerProtocol.
 */
function wdaLinkLayerProtocolGetString(val: WdaLinkLayerProtocol): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsApnTypeMask in `mask`.
 * @param mask bitmask of QmiWdsApnTypeMask values.
 */
function wdsApnTypeMaskBuildStringFromMask(mask: WdsApnTypeMask): string
/**
 * Gets the nickname string for the #QmiWdsAttachPdnListAction specified at `val`.
 * @param val a QmiWdsAttachPdnListAction.
 */
function wdsAttachPdnListActionGetString(val: WdsAttachPdnListAction): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsAuthentication in `mask`.
 * @param mask bitmask of QmiWdsAuthentication values.
 */
function wdsAuthenticationBuildStringFromMask(mask: WdsAuthentication): string
/**
 * Gets the nickname string for the #QmiWdsAutoconnectSetting specified at `val`.
 * @param val a QmiWdsAutoconnectSetting.
 */
function wdsAutoconnectSettingGetString(val: WdsAutoconnectSetting): string
/**
 * Gets the nickname string for the #QmiWdsAutoconnectSettingRoaming specified at `val`.
 * @param val a QmiWdsAutoconnectSettingRoaming.
 */
function wdsAutoconnectSettingRoamingGetString(val: WdsAutoconnectSettingRoaming): string
/**
 * Gets the nickname string for the #QmiWdsCallEndReason specified at `val`.
 * @param val a QmiWdsCallEndReason.
 */
function wdsCallEndReasonGetString(val: WdsCallEndReason): string
/**
 * Gets the nickname string for the #QmiWdsCallType specified at `val`.
 * @param val a QmiWdsCallType.
 */
function wdsCallTypeGetString(val: WdsCallType): string
/**
 * Gets the nickname string for the #QmiWdsClientType specified at `val`.
 * @param val a QmiWdsClientType.
 */
function wdsClientTypeGetString(val: WdsClientType): string
/**
 * Gets the nickname string for the #QmiWdsConnectionStatus specified at `val`.
 * @param val a QmiWdsConnectionStatus.
 */
function wdsConnectionStatusGetString(val: WdsConnectionStatus): string
/**
 * Gets the nickname string for the #QmiWdsDataBearerTechnology specified at `val`.
 * @param val a QmiWdsDataBearerTechnology.
 */
function wdsDataBearerTechnologyGetString(val: WdsDataBearerTechnology): string
/**
 * Gets the nickname string for the #QmiWdsDataCallStatus specified at `val`.
 * @param val a QmiWdsDataCallStatus.
 */
function wdsDataCallStatusGetString(val: WdsDataCallStatus): string
/**
 * Gets the nickname string for the #QmiWdsDataCallType specified at `val`.
 * @param val a QmiWdsDataCallType.
 */
function wdsDataCallTypeGetString(val: WdsDataCallType): string
/**
 * Gets the nickname string for the #QmiWdsDataSystem specified at `val`.
 * @param val a QmiWdsDataSystem.
 */
function wdsDataSystemGetString(val: WdsDataSystem): string
/**
 * Gets the nickname string for the #QmiWdsDataSystemNetworkType specified at `val`.
 * @param val a QmiWdsDataSystemNetworkType.
 */
function wdsDataSystemNetworkTypeGetString(val: WdsDataSystemNetworkType): string
/**
 * Gets the nickname string for the #QmiWdsDeliveryOrder specified at `val`.
 * @param val a QmiWdsDeliveryOrder.
 */
function wdsDeliveryOrderGetString(val: WdsDeliveryOrder): string
/**
 * Gets the nickname string for the #QmiWdsDormancyStatus specified at `val`.
 * @param val a QmiWdsDormancyStatus.
 */
function wdsDormancyStatusGetString(val: WdsDormancyStatus): string
/**
 * Gets the nickname string for the #QmiWdsDsProfileError specified at `val`.
 * @param val a QmiWdsDsProfileError.
 */
function wdsDsProfileErrorGetString(val: WdsDsProfileError): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsExtendedDataBearerTechnology3gpp2 in `mask`.
 * @param mask bitmask of QmiWdsExtendedDataBearerTechnology3gpp2 values.
 */
function wdsExtendedDataBearerTechnology3gpp2BuildStringFromMask(mask: WdsExtendedDataBearerTechnology3gpp2): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsExtendedDataBearerTechnology3gpp in `mask`.
 * @param mask bitmask of QmiWdsExtendedDataBearerTechnology3gpp values.
 */
function wdsExtendedDataBearerTechnology3gppBuildStringFromMask(mask: WdsExtendedDataBearerTechnology3gpp): string
/**
 * Gets the nickname string for the #QmiWdsExtendedTechnologyPreference specified at `val`.
 * @param val a QmiWdsExtendedTechnologyPreference.
 */
function wdsExtendedTechnologyPreferenceGetString(val: WdsExtendedTechnologyPreference): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsGetCurrentSettingsRequestedSettings in `mask`.
 * @param mask bitmask of QmiWdsGetCurrentSettingsRequestedSettings values.
 */
function wdsGetCurrentSettingsRequestedSettingsBuildStringFromMask(mask: WdsGetCurrentSettingsRequestedSettings): string
/**
 * Gets the nickname string for the #QmiWdsIpFamily specified at `val`.
 * @param val a QmiWdsIpFamily.
 */
function wdsIpFamilyGetString(val: WdsIpFamily): string
/**
 * Gets the nickname string for the #QmiWdsIpSupportType specified at `val`.
 * @param val a QmiWdsIpSupportType.
 */
function wdsIpSupportTypeGetString(val: WdsIpSupportType): string
/**
 * Gets the nickname string for the #QmiWdsNetworkType specified at `val`.
 * @param val a QmiWdsNetworkType.
 */
function wdsNetworkTypeGetString(val: WdsNetworkType): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsPacketStatisticsMaskFlag in `mask`.
 * @param mask bitmask of QmiWdsPacketStatisticsMaskFlag values.
 */
function wdsPacketStatisticsMaskFlagBuildStringFromMask(mask: WdsPacketStatisticsMaskFlag): string
/**
 * Gets the nickname string for the #QmiWdsPdpDataCompressionType specified at `val`.
 * @param val a QmiWdsPdpDataCompressionType.
 */
function wdsPdpDataCompressionTypeGetString(val: WdsPdpDataCompressionType): string
/**
 * Gets the nickname string for the #QmiWdsPdpHeaderCompressionType specified at `val`.
 * @param val a QmiWdsPdpHeaderCompressionType.
 */
function wdsPdpHeaderCompressionTypeGetString(val: WdsPdpHeaderCompressionType): string
/**
 * Gets the nickname string for the #QmiWdsPdpType specified at `val`.
 * @param val a QmiWdsPdpType.
 */
function wdsPdpTypeGetString(val: WdsPdpType): string
/**
 * Gets the nickname string for the #QmiWdsProfileFamily specified at `val`.
 * @param val a QmiWdsProfileFamily.
 */
function wdsProfileFamilyGetString(val: WdsProfileFamily): string
/**
 * Gets the nickname string for the #QmiWdsProfileType specified at `val`.
 * @param val a QmiWdsProfileType.
 */
function wdsProfileTypeGetString(val: WdsProfileType): string
/**
 * Gets the nickname string for the #QmiWdsQosClassIdentifier specified at `val`.
 * @param val a QmiWdsQosClassIdentifier.
 */
function wdsQosClassIdentifierGetString(val: WdsQosClassIdentifier): string
/**
 * Gets the nickname string for the #QmiWdsRadioAccessTechnology specified at `val`.
 * @param val a QmiWdsRadioAccessTechnology.
 */
function wdsRadioAccessTechnologyGetString(val: WdsRadioAccessTechnology): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsRat3gpp2 in `mask`.
 * @param mask bitmask of QmiWdsRat3gpp2 values.
 */
function wdsRat3gpp2BuildStringFromMask(mask: WdsRat3gpp2): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsRat3gpp in `mask`.
 * @param mask bitmask of QmiWdsRat3gpp values.
 */
function wdsRat3gppBuildStringFromMask(mask: WdsRat3gpp): string
/**
 * Gets the nickname string for the #QmiWdsSduErroneousDelivery specified at `val`.
 * @param val a QmiWdsSduErroneousDelivery.
 */
function wdsSduErroneousDeliveryGetString(val: WdsSduErroneousDelivery): string
/**
 * Gets the nickname string for the #QmiWdsSduErrorRatio specified at `val`.
 * @param val a QmiWdsSduErrorRatio.
 */
function wdsSduErrorRatioGetString(val: WdsSduErrorRatio): string
/**
 * Gets the nickname string for the #QmiWdsSduResidualBitErrorRatio specified at `val`.
 * @param val a QmiWdsSduResidualBitErrorRatio.
 */
function wdsSduResidualBitErrorRatioGetString(val: WdsSduResidualBitErrorRatio): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsSetEventReportTransferStatistics in `mask`.
 * @param mask bitmask of QmiWdsSetEventReportTransferStatistics values.
 */
function wdsSetEventReportTransferStatisticsBuildStringFromMask(mask: WdsSetEventReportTransferStatistics): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsSoCdma1x in `mask`.
 * @param mask bitmask of QmiWdsSoCdma1x values.
 */
function wdsSoCdma1xBuildStringFromMask(mask: WdsSoCdma1x): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsSoEvdoRev0 in `mask`.
 * @param mask bitmask of QmiWdsSoEvdoRev0 values.
 */
function wdsSoEvdoRev0BuildStringFromMask(mask: WdsSoEvdoRev0): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsSoEvdoRevA in `mask`.
 * @param mask bitmask of QmiWdsSoEvdoRevA values.
 */
function wdsSoEvdoRevaBuildStringFromMask(mask: WdsSoEvdoRevA): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsSoEvdoRevB in `mask`.
 * @param mask bitmask of QmiWdsSoEvdoRevB values.
 */
function wdsSoEvdoRevbBuildStringFromMask(mask: WdsSoEvdoRevB): string
/**
 * Builds a string containing a comma-separated list of nicknames for
 * each #QmiWdsTechnologyPreference in `mask`.
 * @param mask bitmask of QmiWdsTechnologyPreference values.
 */
function wdsTechnologyPreferenceBuildStringFromMask(mask: WdsTechnologyPreference): string
/**
 * Gets the nickname string for the #QmiWdsTetheredCallType specified at `val`.
 * @param val a QmiWdsTetheredCallType.
 */
function wdsTetheredCallTypeGetString(val: WdsTetheredCallType): string
/**
 * Gets the nickname string for the #QmiWdsTrafficClass specified at `val`.
 * @param val a QmiWdsTrafficClass.
 */
function wdsTrafficClassGetString(val: WdsTrafficClass): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReason3gpp specified at `val`.
 * @param val a QmiWdsVerboseCallEndReason3gpp.
 */
function wdsVerboseCallEndReason3gppGetString(val: WdsVerboseCallEndReason3gpp): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonCm specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonCm.
 */
function wdsVerboseCallEndReasonCmGetString(val: WdsVerboseCallEndReasonCm): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonEhrpd specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonEhrpd.
 */
function wdsVerboseCallEndReasonEhrpdGetString(val: WdsVerboseCallEndReasonEhrpd): string
/**
 * Get verbose call end reason based on the reason type.
 * @param type a #QmiWdsVerboseCallEndReasonType.
 * @param reason the reason id.
 */
function wdsVerboseCallEndReasonGetString(type: WdsVerboseCallEndReasonType, reason: number): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonInternal specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonInternal.
 */
function wdsVerboseCallEndReasonInternalGetString(val: WdsVerboseCallEndReasonInternal): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonIpv6 specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonIpv6.
 */
function wdsVerboseCallEndReasonIpv6GetString(val: WdsVerboseCallEndReasonIpv6): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonMip specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonMip.
 */
function wdsVerboseCallEndReasonMipGetString(val: WdsVerboseCallEndReasonMip): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonPpp specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonPpp.
 */
function wdsVerboseCallEndReasonPppGetString(val: WdsVerboseCallEndReasonPpp): string
/**
 * Gets the nickname string for the #QmiWdsVerboseCallEndReasonType specified at `val`.
 * @param val a QmiWdsVerboseCallEndReasonType.
 */
function wdsVerboseCallEndReasonTypeGetString(val: WdsVerboseCallEndReasonType): string
/**
 * Gets the nickname string for the #QmiWmsAckFailureCause specified at `val`.
 * @param val a QmiWmsAckFailureCause.
 */
function wmsAckFailureCauseGetString(val: WmsAckFailureCause): string
/**
 * Gets the nickname string for the #QmiWmsAckIndicator specified at `val`.
 * @param val a QmiWmsAckIndicator.
 */
function wmsAckIndicatorGetString(val: WmsAckIndicator): string
/**
 * Gets the nickname string for the #QmiWmsCdmaCauseCode specified at `val`.
 * @param val a QmiWmsCdmaCauseCode.
 */
function wmsCdmaCauseCodeGetString(val: WmsCdmaCauseCode): string
/**
 * Gets the nickname string for the #QmiWmsCdmaErrorClass specified at `val`.
 * @param val a QmiWmsCdmaErrorClass.
 */
function wmsCdmaErrorClassGetString(val: WmsCdmaErrorClass): string
/**
 * Gets the nickname string for the #QmiWmsCdmaServiceOption specified at `val`.
 * @param val a QmiWmsCdmaServiceOption.
 */
function wmsCdmaServiceOptionGetString(val: WmsCdmaServiceOption): string
/**
 * Gets the nickname string for the #QmiWmsGsmUmtsRpCause specified at `val`.
 * @param val a QmiWmsGsmUmtsRpCause.
 */
function wmsGsmUmtsRpCauseGetString(val: WmsGsmUmtsRpCause): string
/**
 * Gets the nickname string for the #QmiWmsGsmUmtsTpCause specified at `val`.
 * @param val a QmiWmsGsmUmtsTpCause.
 */
function wmsGsmUmtsTpCauseGetString(val: WmsGsmUmtsTpCause): string
/**
 * Gets the nickname string for the #QmiWmsMessageClass specified at `val`.
 * @param val a QmiWmsMessageClass.
 */
function wmsMessageClassGetString(val: WmsMessageClass): string
/**
 * Gets the nickname string for the #QmiWmsMessageDeliveryFailureType specified at `val`.
 * @param val a QmiWmsMessageDeliveryFailureType.
 */
function wmsMessageDeliveryFailureTypeGetString(val: WmsMessageDeliveryFailureType): string
/**
 * Gets the nickname string for the #QmiWmsMessageFormat specified at `val`.
 * @param val a QmiWmsMessageFormat.
 */
function wmsMessageFormatGetString(val: WmsMessageFormat): string
/**
 * Gets the nickname string for the #QmiWmsMessageMode specified at `val`.
 * @param val a QmiWmsMessageMode.
 */
function wmsMessageModeGetString(val: WmsMessageMode): string
/**
 * Gets the nickname string for the #QmiWmsMessageProtocol specified at `val`.
 * @param val a QmiWmsMessageProtocol.
 */
function wmsMessageProtocolGetString(val: WmsMessageProtocol): string
/**
 * Gets the nickname string for the #QmiWmsMessageTagType specified at `val`.
 * @param val a QmiWmsMessageTagType.
 */
function wmsMessageTagTypeGetString(val: WmsMessageTagType): string
/**
 * Gets the nickname string for the #QmiWmsMessageType specified at `val`.
 * @param val a QmiWmsMessageType.
 */
function wmsMessageTypeGetString(val: WmsMessageType): string
/**
 * Gets the nickname string for the #QmiWmsNotificationType specified at `val`.
 * @param val a QmiWmsNotificationType.
 */
function wmsNotificationTypeGetString(val: WmsNotificationType): string
/**
 * Gets the nickname string for the #QmiWmsReceiptAction specified at `val`.
 * @param val a QmiWmsReceiptAction.
 */
function wmsReceiptActionGetString(val: WmsReceiptAction): string
/**
 * Gets the nickname string for the #QmiWmsStorageType specified at `val`.
 * @param val a QmiWmsStorageType.
 */
function wmsStorageTypeGetString(val: WmsStorageType): string
/**
 * Gets the nickname string for the #QmiWmsTransferIndication specified at `val`.
 * @param val a QmiWmsTransferIndication.
 */
function wmsTransferIndicationGetString(val: WmsTransferIndication): string
/**
 * Callback to run when processing the command abortion. This callback
 * should parse the abort response provided by the device, and build an
 * appropriate output.
 * @callback 
 * @param self a #QmiDevice.
 * @param abortResponse the abort response #QmiMessage.
 */
interface DeviceCommandAbortableParseResponseFn {
    (self: Device, abortResponse: Message): boolean
}
/**
 * Callback type to use when iterating raw TLVs with
 * qmi_message_foreach_raw_tlv().
 * @callback 
 * @param type specific ID of the TLV.
 * @param value value of the TLV.
 * @param length length of the TLV, in bytes.
 */
interface MessageForeachRawTlvFn {
    (type: number, value: number, length: number): void
}
interface Client_ConstructProps extends GObject.Object_ConstructProps {

    // Own constructor properties of Qmi-1.0.Qmi.Client

    clientCid?: number | null
    clientDevice?: Device | null
    clientService?: Service | null
    clientVersionMajor?: number | null
    clientVersionMinor?: number | null
}

interface Client {

    // Own properties of Qmi-1.0.Qmi.Client

    clientCid: number
    clientDevice: Device
    clientService: Service
    readonly clientValid: boolean
    clientVersionMajor: number
    clientVersionMinor: number

    // Owm methods of Qmi-1.0.Qmi.Client

    /**
     * Checks if the version of the service handled by this #QmiClient is greater
     * or equal than the given version.
     * @param major a major version.
     * @param minor a minor version.
     */
    checkVersion(major: number, minor: number): boolean
    /**
     * Get the client ID of this #QmiClient.
     */
    getCid(): number
    /**
     * Get the #QmiDevice associated with this #QmiClient.
     */
    getDevice(): GObject.Object
    /**
     * Acquire the next transaction ID of this #QmiClient.
     * The internal transaction ID gets incremented.
     */
    getNextTransactionId(): number
    /**
     * Get the service being used by this #QmiClient.
     */
    getService(): Service
    /**
     * Get the version of the service handled by this #QmiClient.
     * @param major placeholder for the output major version.
     * @param minor placeholder for the output minor version.
     */
    getVersion(major: number, minor: number): boolean
    /**
     * Checks whether #QmiClient is a valid and usable client.
     * 
     * The client is marked as invalid as soon as the client id is released or when
     * the associated #QmiDevice is closed.
     * 
     * This method may be used if the caller needs to ensure validity before a
     * command is attempted, e.g. if the lifecycle of the object is managed in some
     * other place and the caller just has a reference to the #QmiClient.
     */
    isValid(): boolean
    /**
     * Get the #QmiDevice associated with this #QmiClient, without increasing the reference count
     * on the returned object.
     */
    peekDevice(): GObject.Object

    // Class property signals of Qmi-1.0.Qmi.Client

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClient structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class Client extends GObject.Object {

    // Own properties of Qmi-1.0.Qmi.Client

    static name: string
    static $gtype: GObject.GType<Client>

    // Constructors of Qmi-1.0.Qmi.Client

    constructor(config?: Client_ConstructProps) 
    _init(config?: Client_ConstructProps): void
}

interface ClientDms_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientDms_EventReportSignalCallback {
    (output: IndicationDmsEventReportOutput): void
}

interface ClientDms {

    // Owm methods of Qmi-1.0.Qmi.ClientDms

    /**
     * Asynchronously sends a Activate Automatic request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_activate_automatic_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsActivateAutomaticInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    activateAutomatic(input: MessageDmsActivateAutomaticInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_activate_automatic().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_activate_automatic().
     */
    activateAutomaticFinish(res: Gio.AsyncResult): MessageDmsActivateAutomaticOutput
    /**
     * Asynchronously sends a Activate Manual request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_activate_manual_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsActivateManualInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    activateManual(input: MessageDmsActivateManualInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_activate_manual().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_activate_manual().
     */
    activateManualFinish(res: Gio.AsyncResult): MessageDmsActivateManualOutput
    /**
     * Asynchronously sends a Delete Stored Image request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_delete_stored_image_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsDeleteStoredImageInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    deleteStoredImage(input: MessageDmsDeleteStoredImageInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_delete_stored_image().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_delete_stored_image().
     */
    deleteStoredImageFinish(res: Gio.AsyncResult): MessageDmsDeleteStoredImageOutput
    /**
     * Asynchronously sends a Foxconn Change Device Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_foxconn_change_device_mode_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsFoxconnChangeDeviceModeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    foxconnChangeDeviceMode(input: MessageDmsFoxconnChangeDeviceModeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_foxconn_change_device_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_foxconn_change_device_mode().
     */
    foxconnChangeDeviceModeFinish(res: Gio.AsyncResult): MessageDmsFoxconnChangeDeviceModeOutput
    /**
     * Asynchronously sends a Foxconn Get Firmware Version request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_foxconn_get_firmware_version_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsFoxconnGetFirmwareVersionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    foxconnGetFirmwareVersion(input: MessageDmsFoxconnGetFirmwareVersionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_foxconn_get_firmware_version().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_foxconn_get_firmware_version().
     */
    foxconnGetFirmwareVersionFinish(res: Gio.AsyncResult): MessageDmsFoxconnGetFirmwareVersionOutput
    /**
     * Asynchronously sends a Foxconn Set FCC Authentication request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_foxconn_set_fcc_authentication_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsFoxconnSetFccAuthenticationInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    foxconnSetFccAuthentication(input: MessageDmsFoxconnSetFccAuthenticationInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_foxconn_set_fcc_authentication().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_foxconn_set_fcc_authentication().
     */
    foxconnSetFccAuthenticationFinish(res: Gio.AsyncResult): MessageDmsFoxconnSetFccAuthenticationOutput
    /**
     * Asynchronously sends a Get Activation State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_activation_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getActivationState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_activation_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_activation_state().
     */
    getActivationStateFinish(res: Gio.AsyncResult): MessageDmsGetActivationStateOutput
    /**
     * Asynchronously sends a Get Alt Net Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_alt_net_config_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAltNetConfig(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_alt_net_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_alt_net_config().
     */
    getAltNetConfigFinish(res: Gio.AsyncResult): MessageDmsGetAltNetConfigOutput
    /**
     * Asynchronously sends a Get Band Capabilities request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_band_capabilities_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getBandCapabilities(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_band_capabilities().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_band_capabilities().
     */
    getBandCapabilitiesFinish(res: Gio.AsyncResult): MessageDmsGetBandCapabilitiesOutput
    /**
     * Asynchronously sends a Get Boot Image Download Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_boot_image_download_mode_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getBootImageDownloadMode(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_boot_image_download_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_boot_image_download_mode().
     */
    getBootImageDownloadModeFinish(res: Gio.AsyncResult): MessageDmsGetBootImageDownloadModeOutput
    /**
     * Asynchronously sends a Get Capabilities request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_capabilities_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCapabilities(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_capabilities().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_capabilities().
     */
    getCapabilitiesFinish(res: Gio.AsyncResult): MessageDmsGetCapabilitiesOutput
    /**
     * Asynchronously sends a Get Factory SKU request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_factory_sku_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFactorySku(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_factory_sku().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_factory_sku().
     */
    getFactorySkuFinish(res: Gio.AsyncResult): MessageDmsGetFactorySkuOutput
    /**
     * Asynchronously sends a Get Firmware Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_firmware_preference_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFirmwarePreference(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_firmware_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_firmware_preference().
     */
    getFirmwarePreferenceFinish(res: Gio.AsyncResult): MessageDmsGetFirmwarePreferenceOutput
    /**
     * Asynchronously sends a Get Hardware Revision request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_hardware_revision_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getHardwareRevision(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_hardware_revision().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_hardware_revision().
     */
    getHardwareRevisionFinish(res: Gio.AsyncResult): MessageDmsGetHardwareRevisionOutput
    /**
     * Asynchronously sends a Get IDs request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_ids_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getIds(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_ids().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_ids().
     */
    getIdsFinish(res: Gio.AsyncResult): MessageDmsGetIdsOutput
    /**
     * Asynchronously sends a Get MAC Address request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_mac_address_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsGetMacAddressInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getMacAddress(input: MessageDmsGetMacAddressInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_mac_address().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_mac_address().
     */
    getMacAddressFinish(res: Gio.AsyncResult): MessageDmsGetMacAddressOutput
    /**
     * Asynchronously sends a Get Manufacturer request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_manufacturer_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getManufacturer(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_manufacturer().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_manufacturer().
     */
    getManufacturerFinish(res: Gio.AsyncResult): MessageDmsGetManufacturerOutput
    /**
     * Asynchronously sends a Get Model request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_model_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getModel(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_model().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_model().
     */
    getModelFinish(res: Gio.AsyncResult): MessageDmsGetModelOutput
    /**
     * Asynchronously sends a Get MSISDN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_msisdn_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getMsisdn(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_msisdn().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_msisdn().
     */
    getMsisdnFinish(res: Gio.AsyncResult): MessageDmsGetMsisdnOutput
    /**
     * Asynchronously sends a Get Operating Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_operating_mode_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getOperatingMode(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_operating_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_operating_mode().
     */
    getOperatingModeFinish(res: Gio.AsyncResult): MessageDmsGetOperatingModeOutput
    /**
     * Asynchronously sends a Get Power State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_power_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPowerState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_power_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_power_state().
     */
    getPowerStateFinish(res: Gio.AsyncResult): MessageDmsGetPowerStateOutput
    /**
     * Asynchronously sends a Get PRL Version request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_prl_version_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPrlVersion(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_prl_version().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_prl_version().
     */
    getPrlVersionFinish(res: Gio.AsyncResult): MessageDmsGetPrlVersionOutput
    /**
     * Asynchronously sends a Get Revision request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_revision_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getRevision(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_revision().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_revision().
     */
    getRevisionFinish(res: Gio.AsyncResult): MessageDmsGetRevisionOutput
    /**
     * Asynchronously sends a Get Software Version request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_software_version_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSoftwareVersion(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_software_version().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_software_version().
     */
    getSoftwareVersionFinish(res: Gio.AsyncResult): MessageDmsGetSoftwareVersionOutput
    /**
     * Asynchronously sends a Get Stored Image Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_stored_image_info_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsGetStoredImageInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getStoredImageInfo(input: MessageDmsGetStoredImageInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_stored_image_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_stored_image_info().
     */
    getStoredImageInfoFinish(res: Gio.AsyncResult): MessageDmsGetStoredImageInfoOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageDmsGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Get Time request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_time_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getTime(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_time().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_time().
     */
    getTimeFinish(res: Gio.AsyncResult): MessageDmsGetTimeOutput
    /**
     * Asynchronously sends a Get User Lock State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_get_user_lock_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getUserLockState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_get_user_lock_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_get_user_lock_state().
     */
    getUserLockStateFinish(res: Gio.AsyncResult): MessageDmsGetUserLockStateOutput
    /**
     * Asynchronously sends a HP Change Device Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_hp_change_device_mode_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsHpChangeDeviceModeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    hpChangeDeviceMode(input: MessageDmsHpChangeDeviceModeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_hp_change_device_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_hp_change_device_mode().
     */
    hpChangeDeviceModeFinish(res: Gio.AsyncResult): MessageDmsHpChangeDeviceModeOutput
    /**
     * Asynchronously sends a List Stored Images request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_list_stored_images_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    listStoredImages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_list_stored_images().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_list_stored_images().
     */
    listStoredImagesFinish(res: Gio.AsyncResult): MessageDmsListStoredImagesOutput
    /**
     * Asynchronously sends a Read ERI File request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_read_eri_file_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    readEriFile(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_read_eri_file().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_read_eri_file().
     */
    readEriFileFinish(res: Gio.AsyncResult): MessageDmsReadEriFileOutput
    /**
     * Asynchronously sends a Read User Data request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_read_user_data_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    readUserData(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_read_user_data().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_read_user_data().
     */
    readUserDataFinish(res: Gio.AsyncResult): MessageDmsReadUserDataOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageDmsResetOutput
    /**
     * Asynchronously sends a Restore Factory Defaults request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_restore_factory_defaults_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsRestoreFactoryDefaultsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    restoreFactoryDefaults(input: MessageDmsRestoreFactoryDefaultsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_restore_factory_defaults().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_restore_factory_defaults().
     */
    restoreFactoryDefaultsFinish(res: Gio.AsyncResult): MessageDmsRestoreFactoryDefaultsOutput
    /**
     * Asynchronously sends a Set Alt Net Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_alt_net_config_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetAltNetConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setAltNetConfig(input: MessageDmsSetAltNetConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_alt_net_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_alt_net_config().
     */
    setAltNetConfigFinish(res: Gio.AsyncResult): MessageDmsSetAltNetConfigOutput
    /**
     * Asynchronously sends a Set Boot Image Download Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_boot_image_download_mode_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetBootImageDownloadModeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setBootImageDownloadMode(input: MessageDmsSetBootImageDownloadModeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_boot_image_download_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_boot_image_download_mode().
     */
    setBootImageDownloadModeFinish(res: Gio.AsyncResult): MessageDmsSetBootImageDownloadModeOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessageDmsSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessageDmsSetEventReportOutput
    /**
     * Asynchronously sends a Set FCC Authentication request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_fcc_authentication_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setFccAuthentication(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_fcc_authentication().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_fcc_authentication().
     */
    setFccAuthenticationFinish(res: Gio.AsyncResult): MessageDmsSetFccAuthenticationOutput
    /**
     * Asynchronously sends a Set Firmware ID request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_firmware_id_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setFirmwareId(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_firmware_id().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_firmware_id().
     */
    setFirmwareIdFinish(res: Gio.AsyncResult): MessageDmsSetFirmwareIdOutput
    /**
     * Asynchronously sends a Set Firmware Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_firmware_preference_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetFirmwarePreferenceInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setFirmwarePreference(input: MessageDmsSetFirmwarePreferenceInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_firmware_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_firmware_preference().
     */
    setFirmwarePreferenceFinish(res: Gio.AsyncResult): MessageDmsSetFirmwarePreferenceOutput
    /**
     * Asynchronously sends a Set Operating Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_operating_mode_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetOperatingModeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setOperatingMode(input: MessageDmsSetOperatingModeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_operating_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_operating_mode().
     */
    setOperatingModeFinish(res: Gio.AsyncResult): MessageDmsSetOperatingModeOutput
    /**
     * Asynchronously sends a Set Service Programming Code request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_service_programming_code_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetServiceProgrammingCodeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setServiceProgrammingCode(input: MessageDmsSetServiceProgrammingCodeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_service_programming_code().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_service_programming_code().
     */
    setServiceProgrammingCodeFinish(res: Gio.AsyncResult): MessageDmsSetServiceProgrammingCodeOutput
    /**
     * Asynchronously sends a Set Time request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_time_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetTimeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setTime(input: MessageDmsSetTimeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_time().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_time().
     */
    setTimeFinish(res: Gio.AsyncResult): MessageDmsSetTimeOutput
    /**
     * Asynchronously sends a Set User Lock Code request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_user_lock_code_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetUserLockCodeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setUserLockCode(input: MessageDmsSetUserLockCodeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_user_lock_code().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_user_lock_code().
     */
    setUserLockCodeFinish(res: Gio.AsyncResult): MessageDmsSetUserLockCodeOutput
    /**
     * Asynchronously sends a Set User Lock State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_set_user_lock_state_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSetUserLockStateInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setUserLockState(input: MessageDmsSetUserLockStateInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_set_user_lock_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_set_user_lock_state().
     */
    setUserLockStateFinish(res: Gio.AsyncResult): MessageDmsSetUserLockStateOutput
    /**
     * Asynchronously sends a Swi Get Current Firmware request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_swi_get_current_firmware_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiGetCurrentFirmware(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_swi_get_current_firmware().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_swi_get_current_firmware().
     */
    swiGetCurrentFirmwareFinish(res: Gio.AsyncResult): MessageDmsSwiGetCurrentFirmwareOutput
    /**
     * Asynchronously sends a Swi Get USB Composition request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_swi_get_usb_composition_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiGetUsbComposition(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_swi_get_usb_composition().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_swi_get_usb_composition().
     */
    swiGetUsbCompositionFinish(res: Gio.AsyncResult): MessageDmsSwiGetUsbCompositionOutput
    /**
     * Asynchronously sends a Swi Set USB Composition request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_swi_set_usb_composition_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsSwiSetUsbCompositionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiSetUsbComposition(input: MessageDmsSwiSetUsbCompositionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_swi_set_usb_composition().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_swi_set_usb_composition().
     */
    swiSetUsbCompositionFinish(res: Gio.AsyncResult): MessageDmsSwiSetUsbCompositionOutput
    /**
     * Asynchronously sends a UIM Change PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_change_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimChangePinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimChangePin(input: MessageDmsUimChangePinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_change_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_change_pin().
     */
    uimChangePinFinish(res: Gio.AsyncResult): MessageDmsUimChangePinOutput
    /**
     * Asynchronously sends a UIM Get CK Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_get_ck_status_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimGetCkStatusInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimGetCkStatus(input: MessageDmsUimGetCkStatusInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_get_ck_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_get_ck_status().
     */
    uimGetCkStatusFinish(res: Gio.AsyncResult): MessageDmsUimGetCkStatusOutput
    /**
     * Asynchronously sends a UIM Get ICCID request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_get_iccid_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimGetIccid(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_get_iccid().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_get_iccid().
     */
    uimGetIccidFinish(res: Gio.AsyncResult): MessageDmsUimGetIccidOutput
    /**
     * Asynchronously sends a UIM Get IMSI request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_get_imsi_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimGetImsi(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_get_imsi().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_get_imsi().
     */
    uimGetImsiFinish(res: Gio.AsyncResult): MessageDmsUimGetImsiOutput
    /**
     * Asynchronously sends a UIM Get PIN Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_get_pin_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimGetPinStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_get_pin_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_get_pin_status().
     */
    uimGetPinStatusFinish(res: Gio.AsyncResult): MessageDmsUimGetPinStatusOutput
    /**
     * Asynchronously sends a UIM Get State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_get_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimGetState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_get_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_get_state().
     */
    uimGetStateFinish(res: Gio.AsyncResult): MessageDmsUimGetStateOutput
    /**
     * Asynchronously sends a UIM Set CK Protection request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_set_ck_protection_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimSetCkProtectionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimSetCkProtection(input: MessageDmsUimSetCkProtectionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_set_ck_protection().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_set_ck_protection().
     */
    uimSetCkProtectionFinish(res: Gio.AsyncResult): MessageDmsUimSetCkProtectionOutput
    /**
     * Asynchronously sends a UIM Set PIN Protection request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_set_pin_protection_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimSetPinProtectionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimSetPinProtection(input: MessageDmsUimSetPinProtectionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_set_pin_protection().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_set_pin_protection().
     */
    uimSetPinProtectionFinish(res: Gio.AsyncResult): MessageDmsUimSetPinProtectionOutput
    /**
     * Asynchronously sends a UIM Unblock CK request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_unblock_ck_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimUnblockCkInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimUnblockCk(input: MessageDmsUimUnblockCkInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_unblock_ck().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_unblock_ck().
     */
    uimUnblockCkFinish(res: Gio.AsyncResult): MessageDmsUimUnblockCkOutput
    /**
     * Asynchronously sends a UIM Unblock PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_unblock_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimUnblockPinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimUnblockPin(input: MessageDmsUimUnblockPinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_unblock_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_unblock_pin().
     */
    uimUnblockPinFinish(res: Gio.AsyncResult): MessageDmsUimUnblockPinOutput
    /**
     * Asynchronously sends a UIM Verify PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_uim_verify_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsUimVerifyPinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    uimVerifyPin(input: MessageDmsUimVerifyPinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_uim_verify_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_uim_verify_pin().
     */
    uimVerifyPinFinish(res: Gio.AsyncResult): MessageDmsUimVerifyPinOutput
    /**
     * Asynchronously sends a Validate Service Programming Code request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_validate_service_programming_code_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsValidateServiceProgrammingCodeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    validateServiceProgrammingCode(input: MessageDmsValidateServiceProgrammingCodeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_validate_service_programming_code().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_validate_service_programming_code().
     */
    validateServiceProgrammingCodeFinish(res: Gio.AsyncResult): MessageDmsValidateServiceProgrammingCodeOutput
    /**
     * Asynchronously sends a Write User Data request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dms_write_user_data_finish() to get the result of the operation.
     * @param input a #QmiMessageDmsWriteUserDataInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    writeUserData(input: MessageDmsWriteUserDataInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dms_write_user_data().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dms_write_user_data().
     */
    writeUserDataFinish(res: Gio.AsyncResult): MessageDmsWriteUserDataOutput

    // Own signals of Qmi-1.0.Qmi.ClientDms

    connect(sigName: "event-report", callback: ClientDms_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientDms_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientDms_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientDms_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientDms

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientDms structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientDms extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientDms

    static name: string
    static $gtype: GObject.GType<ClientDms>

    // Constructors of Qmi-1.0.Qmi.ClientDms

    constructor(config?: ClientDms_ConstructProps) 
    _init(config?: ClientDms_ConstructProps): void
}

interface ClientDpm_ConstructProps extends Client_ConstructProps {
}

interface ClientDpm {

    // Owm methods of Qmi-1.0.Qmi.ClientDpm

    /**
     * Asynchronously sends a Close Port request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dpm_close_port_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    closePort(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dpm_close_port().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dpm_close_port().
     */
    closePortFinish(res: Gio.AsyncResult): MessageDpmClosePortOutput
    /**
     * Asynchronously sends a Open Port request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dpm_open_port_finish() to get the result of the operation.
     * @param input a #QmiMessageDpmOpenPortInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    openPort(input: MessageDpmOpenPortInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dpm_open_port().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dpm_open_port().
     */
    openPortFinish(res: Gio.AsyncResult): MessageDpmOpenPortOutput

    // Class property signals of Qmi-1.0.Qmi.ClientDpm

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientDpm structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientDpm extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientDpm

    static name: string
    static $gtype: GObject.GType<ClientDpm>

    // Constructors of Qmi-1.0.Qmi.ClientDpm

    constructor(config?: ClientDpm_ConstructProps) 
    _init(config?: ClientDpm_ConstructProps): void
}

interface ClientDsd_ConstructProps extends Client_ConstructProps {
}

interface ClientDsd {

    // Owm methods of Qmi-1.0.Qmi.ClientDsd

    /**
     * Asynchronously sends a Get APN Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dsd_get_apn_info_finish() to get the result of the operation.
     * @param input a #QmiMessageDsdGetApnInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getApnInfo(input: MessageDsdGetApnInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dsd_get_apn_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dsd_get_apn_info().
     */
    getApnInfoFinish(res: Gio.AsyncResult): MessageDsdGetApnInfoOutput
    /**
     * Asynchronously sends a Set APN Type request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_dsd_set_apn_type_finish() to get the result of the operation.
     * @param input a #QmiMessageDsdSetApnTypeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setApnType(input: MessageDsdSetApnTypeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_dsd_set_apn_type().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_dsd_set_apn_type().
     */
    setApnTypeFinish(res: Gio.AsyncResult): MessageDsdSetApnTypeOutput

    // Class property signals of Qmi-1.0.Qmi.ClientDsd

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientDsd structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientDsd extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientDsd

    static name: string
    static $gtype: GObject.GType<ClientDsd>

    // Constructors of Qmi-1.0.Qmi.ClientDsd

    constructor(config?: ClientDsd_ConstructProps) 
    _init(config?: ClientDsd_ConstructProps): void
}

interface ClientFox_ConstructProps extends Client_ConstructProps {
}

interface ClientFox {

    // Owm methods of Qmi-1.0.Qmi.ClientFox

    /**
     * Asynchronously sends a Get Firmware Version request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_fox_get_firmware_version_finish() to get the result of the operation.
     * @param input a #QmiMessageFoxGetFirmwareVersionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFirmwareVersion(input: MessageFoxGetFirmwareVersionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_fox_get_firmware_version().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_fox_get_firmware_version().
     */
    getFirmwareVersionFinish(res: Gio.AsyncResult): MessageFoxGetFirmwareVersionOutput

    // Class property signals of Qmi-1.0.Qmi.ClientFox

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientFox structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientFox extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientFox

    static name: string
    static $gtype: GObject.GType<ClientFox>

    // Constructors of Qmi-1.0.Qmi.ClientFox

    constructor(config?: ClientFox_ConstructProps) 
    _init(config?: ClientFox_ConstructProps): void
}

interface ClientGas_ConstructProps extends Client_ConstructProps {
}

interface ClientGas {

    // Owm methods of Qmi-1.0.Qmi.ClientGas

    /**
     * Asynchronously sends a DMS Get Firmware List request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gas_dms_get_firmware_list_finish() to get the result of the operation.
     * @param input a #QmiMessageGasDmsGetFirmwareListInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    dmsGetFirmwareList(input: MessageGasDmsGetFirmwareListInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gas_dms_get_firmware_list().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gas_dms_get_firmware_list().
     */
    dmsGetFirmwareListFinish(res: Gio.AsyncResult): MessageGasDmsGetFirmwareListOutput
    /**
     * Asynchronously sends a DMS Get USB Composition request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gas_dms_get_usb_composition_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    dmsGetUsbComposition(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gas_dms_get_usb_composition().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gas_dms_get_usb_composition().
     */
    dmsGetUsbCompositionFinish(res: Gio.AsyncResult): MessageGasDmsGetUsbCompositionOutput
    /**
     * Asynchronously sends a DMS Set Active Firmware request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gas_dms_set_active_firmware_finish() to get the result of the operation.
     * @param input a #QmiMessageGasDmsSetActiveFirmwareInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    dmsSetActiveFirmware(input: MessageGasDmsSetActiveFirmwareInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gas_dms_set_active_firmware().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gas_dms_set_active_firmware().
     */
    dmsSetActiveFirmwareFinish(res: Gio.AsyncResult): MessageGasDmsSetActiveFirmwareOutput
    /**
     * Asynchronously sends a DMS Set USB Composition request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gas_dms_set_usb_composition_finish() to get the result of the operation.
     * @param input a #QmiMessageGasDmsSetUsbCompositionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    dmsSetUsbComposition(input: MessageGasDmsSetUsbCompositionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gas_dms_set_usb_composition().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gas_dms_set_usb_composition().
     */
    dmsSetUsbCompositionFinish(res: Gio.AsyncResult): MessageGasDmsSetUsbCompositionOutput

    // Class property signals of Qmi-1.0.Qmi.ClientGas

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientGas structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientGas extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientGas

    static name: string
    static $gtype: GObject.GType<ClientGas>

    // Constructors of Qmi-1.0.Qmi.ClientGas

    constructor(config?: ClientGas_ConstructProps) 
    _init(config?: ClientGas_ConstructProps): void
}

interface ClientGms_ConstructProps extends Client_ConstructProps {
}

interface ClientGms {

    // Owm methods of Qmi-1.0.Qmi.ClientGms

    /**
     * Asynchronously sends a Test Get Value request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gms_test_get_value_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    testGetValue(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gms_test_get_value().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gms_test_get_value().
     */
    testGetValueFinish(res: Gio.AsyncResult): MessageGmsTestGetValueOutput
    /**
     * Asynchronously sends a Test Set Value request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_gms_test_set_value_finish() to get the result of the operation.
     * @param input a #QmiMessageGmsTestSetValueInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    testSetValue(input: MessageGmsTestSetValueInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_gms_test_set_value().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_gms_test_set_value().
     */
    testSetValueFinish(res: Gio.AsyncResult): MessageGmsTestSetValueOutput

    // Class property signals of Qmi-1.0.Qmi.ClientGms

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientGms structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientGms extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientGms

    static name: string
    static $gtype: GObject.GType<ClientGms>

    // Constructors of Qmi-1.0.Qmi.ClientGms

    constructor(config?: ClientGms_ConstructProps) 
    _init(config?: ClientGms_ConstructProps): void
}

interface ClientLoc_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `delete-assistance-data`
 */
interface ClientLoc_DeleteAssistanceDataSignalCallback {
    (output: IndicationLocDeleteAssistanceDataOutput): void
}

/**
 * Signal callback interface for `engine-state`
 */
interface ClientLoc_EngineStateSignalCallback {
    (output: IndicationLocEngineStateOutput): void
}

/**
 * Signal callback interface for `fix-recurrence-type`
 */
interface ClientLoc_FixRecurrenceTypeSignalCallback {
    (output: IndicationLocFixRecurrenceTypeOutput): void
}

/**
 * Signal callback interface for `get-engine-lock`
 */
interface ClientLoc_GetEngineLockSignalCallback {
    (output: IndicationLocGetEngineLockOutput): void
}

/**
 * Signal callback interface for `get-nmea-types`
 */
interface ClientLoc_GetNmeaTypesSignalCallback {
    (output: IndicationLocGetNmeaTypesOutput): void
}

/**
 * Signal callback interface for `get-operation-mode`
 */
interface ClientLoc_GetOperationModeSignalCallback {
    (output: IndicationLocGetOperationModeOutput): void
}

/**
 * Signal callback interface for `get-predicted-orbits-data-source`
 */
interface ClientLoc_GetPredictedOrbitsDataSourceSignalCallback {
    (output: IndicationLocGetPredictedOrbitsDataSourceOutput): void
}

/**
 * Signal callback interface for `get-server`
 */
interface ClientLoc_GetServerSignalCallback {
    (output: IndicationLocGetServerOutput): void
}

/**
 * Signal callback interface for `gnss-sv-info`
 */
interface ClientLoc_GnssSvInfoSignalCallback {
    (output: IndicationLocGnssSvInfoOutput): void
}

/**
 * Signal callback interface for `inject-predicted-orbits-data`
 */
interface ClientLoc_InjectPredictedOrbitsDataSignalCallback {
    (output: IndicationLocInjectPredictedOrbitsDataOutput): void
}

/**
 * Signal callback interface for `inject-xtra-data`
 */
interface ClientLoc_InjectXtraDataSignalCallback {
    (output: IndicationLocInjectXtraDataOutput): void
}

/**
 * Signal callback interface for `nmea`
 */
interface ClientLoc_NmeaSignalCallback {
    (output: IndicationLocNmeaOutput): void
}

/**
 * Signal callback interface for `position-report`
 */
interface ClientLoc_PositionReportSignalCallback {
    (output: IndicationLocPositionReportOutput): void
}

/**
 * Signal callback interface for `set-engine-lock`
 */
interface ClientLoc_SetEngineLockSignalCallback {
    (output: IndicationLocSetEngineLockOutput): void
}

/**
 * Signal callback interface for `set-nmea-types`
 */
interface ClientLoc_SetNmeaTypesSignalCallback {
    (output: IndicationLocSetNmeaTypesOutput): void
}

/**
 * Signal callback interface for `set-operation-mode`
 */
interface ClientLoc_SetOperationModeSignalCallback {
    (output: IndicationLocSetOperationModeOutput): void
}

/**
 * Signal callback interface for `set-server`
 */
interface ClientLoc_SetServerSignalCallback {
    (output: IndicationLocSetServerOutput): void
}

interface ClientLoc {

    // Owm methods of Qmi-1.0.Qmi.ClientLoc

    /**
     * Asynchronously sends a Delete Assistance Data request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_delete_assistance_data_finish() to get the result of the operation.
     * @param input a #QmiMessageLocDeleteAssistanceDataInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    deleteAssistanceData(input: MessageLocDeleteAssistanceDataInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_delete_assistance_data().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_delete_assistance_data().
     */
    deleteAssistanceDataFinish(res: Gio.AsyncResult): MessageLocDeleteAssistanceDataOutput
    /**
     * Asynchronously sends a Get Engine Lock request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_get_engine_lock_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getEngineLock(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_get_engine_lock().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_get_engine_lock().
     */
    getEngineLockFinish(res: Gio.AsyncResult): MessageLocGetEngineLockOutput
    /**
     * Asynchronously sends a Get NMEA Types request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_get_nmea_types_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getNmeaTypes(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_get_nmea_types().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_get_nmea_types().
     */
    getNmeaTypesFinish(res: Gio.AsyncResult): MessageLocGetNmeaTypesOutput
    /**
     * Asynchronously sends a Get Operation Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_get_operation_mode_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getOperationMode(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_get_operation_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_get_operation_mode().
     */
    getOperationModeFinish(res: Gio.AsyncResult): MessageLocGetOperationModeOutput
    /**
     * Asynchronously sends a Get Predicted Orbits Data Source request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_get_predicted_orbits_data_source_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPredictedOrbitsDataSource(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_get_predicted_orbits_data_source().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_get_predicted_orbits_data_source().
     */
    getPredictedOrbitsDataSourceFinish(res: Gio.AsyncResult): MessageLocGetPredictedOrbitsDataSourceOutput
    /**
     * Asynchronously sends a Get Server request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_get_server_finish() to get the result of the operation.
     * @param input a #QmiMessageLocGetServerInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getServer(input: MessageLocGetServerInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_get_server().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_get_server().
     */
    getServerFinish(res: Gio.AsyncResult): MessageLocGetServerOutput
    /**
     * Asynchronously sends a Inject Predicted Orbits Data request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_inject_predicted_orbits_data_finish() to get the result of the operation.
     * @param input a #QmiMessageLocInjectPredictedOrbitsDataInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    injectPredictedOrbitsData(input: MessageLocInjectPredictedOrbitsDataInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_inject_predicted_orbits_data().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_inject_predicted_orbits_data().
     */
    injectPredictedOrbitsDataFinish(res: Gio.AsyncResult): MessageLocInjectPredictedOrbitsDataOutput
    /**
     * Asynchronously sends a Inject Xtra Data request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_inject_xtra_data_finish() to get the result of the operation.
     * @param input a #QmiMessageLocInjectXtraDataInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    injectXtraData(input: MessageLocInjectXtraDataInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_inject_xtra_data().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_inject_xtra_data().
     */
    injectXtraDataFinish(res: Gio.AsyncResult): MessageLocInjectXtraDataOutput
    /**
     * Asynchronously sends a Register Events request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_register_events_finish() to get the result of the operation.
     * @param input a #QmiMessageLocRegisterEventsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    registerEvents(input: MessageLocRegisterEventsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_register_events().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_register_events().
     */
    registerEventsFinish(res: Gio.AsyncResult): MessageLocRegisterEventsOutput
    /**
     * Asynchronously sends a Set Engine Lock request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_set_engine_lock_finish() to get the result of the operation.
     * @param input a #QmiMessageLocSetEngineLockInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEngineLock(input: MessageLocSetEngineLockInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_set_engine_lock().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_set_engine_lock().
     */
    setEngineLockFinish(res: Gio.AsyncResult): MessageLocSetEngineLockOutput
    /**
     * Asynchronously sends a Set NMEA Types request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_set_nmea_types_finish() to get the result of the operation.
     * @param input a #QmiMessageLocSetNmeaTypesInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setNmeaTypes(input: MessageLocSetNmeaTypesInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_set_nmea_types().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_set_nmea_types().
     */
    setNmeaTypesFinish(res: Gio.AsyncResult): MessageLocSetNmeaTypesOutput
    /**
     * Asynchronously sends a Set Operation Mode request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_set_operation_mode_finish() to get the result of the operation.
     * @param input a #QmiMessageLocSetOperationModeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setOperationMode(input: MessageLocSetOperationModeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_set_operation_mode().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_set_operation_mode().
     */
    setOperationModeFinish(res: Gio.AsyncResult): MessageLocSetOperationModeOutput
    /**
     * Asynchronously sends a Set Server request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_set_server_finish() to get the result of the operation.
     * @param input a #QmiMessageLocSetServerInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setServer(input: MessageLocSetServerInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_set_server().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_set_server().
     */
    setServerFinish(res: Gio.AsyncResult): MessageLocSetServerOutput
    /**
     * Asynchronously sends a Start request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_start_finish() to get the result of the operation.
     * @param input a #QmiMessageLocStartInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    start(input: MessageLocStartInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_start().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_start().
     */
    startFinish(res: Gio.AsyncResult): MessageLocStartOutput
    /**
     * Asynchronously sends a Stop request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_loc_stop_finish() to get the result of the operation.
     * @param input a #QmiMessageLocStopInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    stop(input: MessageLocStopInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_loc_stop().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_loc_stop().
     */
    stopFinish(res: Gio.AsyncResult): MessageLocStopOutput

    // Own signals of Qmi-1.0.Qmi.ClientLoc

    connect(sigName: "delete-assistance-data", callback: ClientLoc_DeleteAssistanceDataSignalCallback): number
    on(sigName: "delete-assistance-data", callback: ClientLoc_DeleteAssistanceDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "delete-assistance-data", callback: ClientLoc_DeleteAssistanceDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "delete-assistance-data", callback: ClientLoc_DeleteAssistanceDataSignalCallback): NodeJS.EventEmitter
    emit(sigName: "delete-assistance-data", ...args: any[]): void
    connect(sigName: "engine-state", callback: ClientLoc_EngineStateSignalCallback): number
    on(sigName: "engine-state", callback: ClientLoc_EngineStateSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "engine-state", callback: ClientLoc_EngineStateSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "engine-state", callback: ClientLoc_EngineStateSignalCallback): NodeJS.EventEmitter
    emit(sigName: "engine-state", ...args: any[]): void
    connect(sigName: "fix-recurrence-type", callback: ClientLoc_FixRecurrenceTypeSignalCallback): number
    on(sigName: "fix-recurrence-type", callback: ClientLoc_FixRecurrenceTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "fix-recurrence-type", callback: ClientLoc_FixRecurrenceTypeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "fix-recurrence-type", callback: ClientLoc_FixRecurrenceTypeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "fix-recurrence-type", ...args: any[]): void
    connect(sigName: "get-engine-lock", callback: ClientLoc_GetEngineLockSignalCallback): number
    on(sigName: "get-engine-lock", callback: ClientLoc_GetEngineLockSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-engine-lock", callback: ClientLoc_GetEngineLockSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-engine-lock", callback: ClientLoc_GetEngineLockSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-engine-lock", ...args: any[]): void
    connect(sigName: "get-nmea-types", callback: ClientLoc_GetNmeaTypesSignalCallback): number
    on(sigName: "get-nmea-types", callback: ClientLoc_GetNmeaTypesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-nmea-types", callback: ClientLoc_GetNmeaTypesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-nmea-types", callback: ClientLoc_GetNmeaTypesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-nmea-types", ...args: any[]): void
    connect(sigName: "get-operation-mode", callback: ClientLoc_GetOperationModeSignalCallback): number
    on(sigName: "get-operation-mode", callback: ClientLoc_GetOperationModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-operation-mode", callback: ClientLoc_GetOperationModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-operation-mode", callback: ClientLoc_GetOperationModeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-operation-mode", ...args: any[]): void
    connect(sigName: "get-predicted-orbits-data-source", callback: ClientLoc_GetPredictedOrbitsDataSourceSignalCallback): number
    on(sigName: "get-predicted-orbits-data-source", callback: ClientLoc_GetPredictedOrbitsDataSourceSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-predicted-orbits-data-source", callback: ClientLoc_GetPredictedOrbitsDataSourceSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-predicted-orbits-data-source", callback: ClientLoc_GetPredictedOrbitsDataSourceSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-predicted-orbits-data-source", ...args: any[]): void
    connect(sigName: "get-server", callback: ClientLoc_GetServerSignalCallback): number
    on(sigName: "get-server", callback: ClientLoc_GetServerSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-server", callback: ClientLoc_GetServerSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-server", callback: ClientLoc_GetServerSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-server", ...args: any[]): void
    connect(sigName: "gnss-sv-info", callback: ClientLoc_GnssSvInfoSignalCallback): number
    on(sigName: "gnss-sv-info", callback: ClientLoc_GnssSvInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "gnss-sv-info", callback: ClientLoc_GnssSvInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "gnss-sv-info", callback: ClientLoc_GnssSvInfoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "gnss-sv-info", ...args: any[]): void
    connect(sigName: "inject-predicted-orbits-data", callback: ClientLoc_InjectPredictedOrbitsDataSignalCallback): number
    on(sigName: "inject-predicted-orbits-data", callback: ClientLoc_InjectPredictedOrbitsDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "inject-predicted-orbits-data", callback: ClientLoc_InjectPredictedOrbitsDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "inject-predicted-orbits-data", callback: ClientLoc_InjectPredictedOrbitsDataSignalCallback): NodeJS.EventEmitter
    emit(sigName: "inject-predicted-orbits-data", ...args: any[]): void
    connect(sigName: "inject-xtra-data", callback: ClientLoc_InjectXtraDataSignalCallback): number
    on(sigName: "inject-xtra-data", callback: ClientLoc_InjectXtraDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "inject-xtra-data", callback: ClientLoc_InjectXtraDataSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "inject-xtra-data", callback: ClientLoc_InjectXtraDataSignalCallback): NodeJS.EventEmitter
    emit(sigName: "inject-xtra-data", ...args: any[]): void
    connect(sigName: "nmea", callback: ClientLoc_NmeaSignalCallback): number
    on(sigName: "nmea", callback: ClientLoc_NmeaSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "nmea", callback: ClientLoc_NmeaSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "nmea", callback: ClientLoc_NmeaSignalCallback): NodeJS.EventEmitter
    emit(sigName: "nmea", ...args: any[]): void
    connect(sigName: "position-report", callback: ClientLoc_PositionReportSignalCallback): number
    on(sigName: "position-report", callback: ClientLoc_PositionReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "position-report", callback: ClientLoc_PositionReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "position-report", callback: ClientLoc_PositionReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "position-report", ...args: any[]): void
    connect(sigName: "set-engine-lock", callback: ClientLoc_SetEngineLockSignalCallback): number
    on(sigName: "set-engine-lock", callback: ClientLoc_SetEngineLockSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-engine-lock", callback: ClientLoc_SetEngineLockSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-engine-lock", callback: ClientLoc_SetEngineLockSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-engine-lock", ...args: any[]): void
    connect(sigName: "set-nmea-types", callback: ClientLoc_SetNmeaTypesSignalCallback): number
    on(sigName: "set-nmea-types", callback: ClientLoc_SetNmeaTypesSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-nmea-types", callback: ClientLoc_SetNmeaTypesSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-nmea-types", callback: ClientLoc_SetNmeaTypesSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-nmea-types", ...args: any[]): void
    connect(sigName: "set-operation-mode", callback: ClientLoc_SetOperationModeSignalCallback): number
    on(sigName: "set-operation-mode", callback: ClientLoc_SetOperationModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-operation-mode", callback: ClientLoc_SetOperationModeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-operation-mode", callback: ClientLoc_SetOperationModeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-operation-mode", ...args: any[]): void
    connect(sigName: "set-server", callback: ClientLoc_SetServerSignalCallback): number
    on(sigName: "set-server", callback: ClientLoc_SetServerSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-server", callback: ClientLoc_SetServerSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-server", callback: ClientLoc_SetServerSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-server", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientLoc

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientLoc structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientLoc extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientLoc

    static name: string
    static $gtype: GObject.GType<ClientLoc>

    // Constructors of Qmi-1.0.Qmi.ClientLoc

    constructor(config?: ClientLoc_ConstructProps) 
    _init(config?: ClientLoc_ConstructProps): void
}

interface ClientNas_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientNas_EventReportSignalCallback {
    (output: IndicationNasEventReportOutput): void
}

/**
 * Signal callback interface for `network-reject`
 */
interface ClientNas_NetworkRejectSignalCallback {
    (output: IndicationNasNetworkRejectOutput): void
}

/**
 * Signal callback interface for `network-time`
 */
interface ClientNas_NetworkTimeSignalCallback {
    (output: IndicationNasNetworkTimeOutput): void
}

/**
 * Signal callback interface for `operator-name`
 */
interface ClientNas_OperatorNameSignalCallback {
    (output: IndicationNasOperatorNameOutput): void
}

/**
 * Signal callback interface for `serving-system`
 */
interface ClientNas_ServingSystemSignalCallback {
    (output: IndicationNasServingSystemOutput): void
}

/**
 * Signal callback interface for `signal-info`
 */
interface ClientNas_SignalInfoSignalCallback {
    (output: IndicationNasSignalInfoOutput): void
}

/**
 * Signal callback interface for `system-info`
 */
interface ClientNas_SystemInfoSignalCallback {
    (output: IndicationNasSystemInfoOutput): void
}

interface ClientNas {

    // Owm methods of Qmi-1.0.Qmi.ClientNas

    /**
     * Asynchronously sends a Attach Detach request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_attach_detach_finish() to get the result of the operation.
     * @param input a #QmiMessageNasAttachDetachInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    attachDetach(input: MessageNasAttachDetachInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_attach_detach().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_attach_detach().
     */
    attachDetachFinish(res: Gio.AsyncResult): MessageNasAttachDetachOutput
    /**
     * Asynchronously sends a Config Signal Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_config_signal_info_finish() to get the result of the operation.
     * @param input a #QmiMessageNasConfigSignalInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    configSignalInfo(input: MessageNasConfigSignalInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_config_signal_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_config_signal_info().
     */
    configSignalInfoFinish(res: Gio.AsyncResult): MessageNasConfigSignalInfoOutput
    /**
     * Asynchronously sends a Force Network Search request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_force_network_search_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    forceNetworkSearch(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_force_network_search().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_force_network_search().
     */
    forceNetworkSearchFinish(res: Gio.AsyncResult): MessageNasForceNetworkSearchOutput
    /**
     * Asynchronously sends a Get CDMA Position Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_cdma_position_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCdmaPositionInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_cdma_position_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_cdma_position_info().
     */
    getCdmaPositionInfoFinish(res: Gio.AsyncResult): MessageNasGetCdmaPositionInfoOutput
    /**
     * Asynchronously sends a Get Cell Location Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_cell_location_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCellLocationInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_cell_location_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_cell_location_info().
     */
    getCellLocationInfoFinish(res: Gio.AsyncResult): MessageNasGetCellLocationInfoOutput
    /**
     * Asynchronously sends a Get DRX request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_drx_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDrx(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_drx().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_drx().
     */
    getDrxFinish(res: Gio.AsyncResult): MessageNasGetDrxOutput
    /**
     * Asynchronously sends a Get Home Network request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_home_network_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getHomeNetwork(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_home_network().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_home_network().
     */
    getHomeNetworkFinish(res: Gio.AsyncResult): MessageNasGetHomeNetworkOutput
    /**
     * Asynchronously sends a Get LTE Cphy CA Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_lte_cphy_ca_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getLteCphyCaInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_lte_cphy_ca_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_lte_cphy_ca_info().
     */
    getLteCphyCaInfoFinish(res: Gio.AsyncResult): MessageNasGetLteCphyCaInfoOutput
    /**
     * Asynchronously sends a Get Operator Name request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_operator_name_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getOperatorName(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_operator_name().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_operator_name().
     */
    getOperatorNameFinish(res: Gio.AsyncResult): MessageNasGetOperatorNameOutput
    /**
     * Asynchronously sends a Get PLMN Name request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_plmn_name_finish() to get the result of the operation.
     * @param input a #QmiMessageNasGetPlmnNameInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPlmnName(input: MessageNasGetPlmnNameInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_plmn_name().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_plmn_name().
     */
    getPlmnNameFinish(res: Gio.AsyncResult): MessageNasGetPlmnNameOutput
    /**
     * Asynchronously sends a Get Preferred Networks request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_preferred_networks_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPreferredNetworks(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_preferred_networks().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_preferred_networks().
     */
    getPreferredNetworksFinish(res: Gio.AsyncResult): MessageNasGetPreferredNetworksOutput
    /**
     * Asynchronously sends a Get RF Band Information request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_rf_band_information_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getRfBandInformation(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_rf_band_information().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_rf_band_information().
     */
    getRfBandInformationFinish(res: Gio.AsyncResult): MessageNasGetRfBandInformationOutput
    /**
     * Asynchronously sends a Get Serving System request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_serving_system_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getServingSystem(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_serving_system().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_serving_system().
     */
    getServingSystemFinish(res: Gio.AsyncResult): MessageNasGetServingSystemOutput
    /**
     * Asynchronously sends a Get Signal Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_signal_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSignalInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_signal_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_signal_info().
     */
    getSignalInfoFinish(res: Gio.AsyncResult): MessageNasGetSignalInfoOutput
    /**
     * Asynchronously sends a Get Signal Strength request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_signal_strength_finish() to get the result of the operation.
     * @param input a #QmiMessageNasGetSignalStrengthInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSignalStrength(input: MessageNasGetSignalStrengthInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_signal_strength().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_signal_strength().
     */
    getSignalStrengthFinish(res: Gio.AsyncResult): MessageNasGetSignalStrengthOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageNasGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Get System Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_system_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSystemInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_system_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_system_info().
     */
    getSystemInfoFinish(res: Gio.AsyncResult): MessageNasGetSystemInfoOutput
    /**
     * Asynchronously sends a Get System Selection Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_system_selection_preference_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSystemSelectionPreference(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_system_selection_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_system_selection_preference().
     */
    getSystemSelectionPreferenceFinish(res: Gio.AsyncResult): MessageNasGetSystemSelectionPreferenceOutput
    /**
     * Asynchronously sends a Get Technology Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_technology_preference_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getTechnologyPreference(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_technology_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_technology_preference().
     */
    getTechnologyPreferenceFinish(res: Gio.AsyncResult): MessageNasGetTechnologyPreferenceOutput
    /**
     * Asynchronously sends a Get Tx Rx Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_get_tx_rx_info_finish() to get the result of the operation.
     * @param input a #QmiMessageNasGetTxRxInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getTxRxInfo(input: MessageNasGetTxRxInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_get_tx_rx_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_get_tx_rx_info().
     */
    getTxRxInfoFinish(res: Gio.AsyncResult): MessageNasGetTxRxInfoOutput
    /**
     * Asynchronously sends a Initiate Network Register request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_initiate_network_register_finish() to get the result of the operation.
     * @param input a #QmiMessageNasInitiateNetworkRegisterInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    initiateNetworkRegister(input: MessageNasInitiateNetworkRegisterInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_initiate_network_register().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_initiate_network_register().
     */
    initiateNetworkRegisterFinish(res: Gio.AsyncResult): MessageNasInitiateNetworkRegisterOutput
    /**
     * Asynchronously sends a Network Scan request to the device.
     * 
     * This message is abortable. If `cancellable` is cancelled or if `timeout` expires,
     * an abort request will be sent to the device, and the asynchronous operation will
     * not return until the abort response is received. It is not an error if a successful
     * response is returned for the asynchronous operation even after the user has cancelled
     * the cancellable, because it may happen that the response is received before the
     * modem had a chance to run the abort.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_network_scan_finish() to get the result of the operation.
     * @param input a #QmiMessageNasNetworkScanInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    networkScan(input: MessageNasNetworkScanInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_network_scan().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_network_scan().
     */
    networkScanFinish(res: Gio.AsyncResult): MessageNasNetworkScanOutput
    /**
     * Asynchronously sends a Register Indications request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_register_indications_finish() to get the result of the operation.
     * @param input a #QmiMessageNasRegisterIndicationsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    registerIndications(input: MessageNasRegisterIndicationsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_register_indications().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_register_indications().
     */
    registerIndicationsFinish(res: Gio.AsyncResult): MessageNasRegisterIndicationsOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageNasResetOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessageNasSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessageNasSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessageNasSetEventReportOutput
    /**
     * Asynchronously sends a Set Preferred Networks request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_set_preferred_networks_finish() to get the result of the operation.
     * @param input a #QmiMessageNasSetPreferredNetworksInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setPreferredNetworks(input: MessageNasSetPreferredNetworksInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_set_preferred_networks().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_set_preferred_networks().
     */
    setPreferredNetworksFinish(res: Gio.AsyncResult): MessageNasSetPreferredNetworksOutput
    /**
     * Asynchronously sends a Set System Selection Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_set_system_selection_preference_finish() to get the result of the operation.
     * @param input a #QmiMessageNasSetSystemSelectionPreferenceInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setSystemSelectionPreference(input: MessageNasSetSystemSelectionPreferenceInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_set_system_selection_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_set_system_selection_preference().
     */
    setSystemSelectionPreferenceFinish(res: Gio.AsyncResult): MessageNasSetSystemSelectionPreferenceOutput
    /**
     * Asynchronously sends a Set Technology Preference request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_set_technology_preference_finish() to get the result of the operation.
     * @param input a #QmiMessageNasSetTechnologyPreferenceInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setTechnologyPreference(input: MessageNasSetTechnologyPreferenceInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_set_technology_preference().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_set_technology_preference().
     */
    setTechnologyPreferenceFinish(res: Gio.AsyncResult): MessageNasSetTechnologyPreferenceOutput
    /**
     * Asynchronously sends a Swi Get Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_nas_swi_get_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiGetStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_nas_swi_get_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_nas_swi_get_status().
     */
    swiGetStatusFinish(res: Gio.AsyncResult): MessageNasSwiGetStatusOutput

    // Own signals of Qmi-1.0.Qmi.ClientNas

    connect(sigName: "event-report", callback: ClientNas_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientNas_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientNas_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientNas_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void
    connect(sigName: "network-reject", callback: ClientNas_NetworkRejectSignalCallback): number
    on(sigName: "network-reject", callback: ClientNas_NetworkRejectSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-reject", callback: ClientNas_NetworkRejectSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-reject", callback: ClientNas_NetworkRejectSignalCallback): NodeJS.EventEmitter
    emit(sigName: "network-reject", ...args: any[]): void
    connect(sigName: "network-time", callback: ClientNas_NetworkTimeSignalCallback): number
    on(sigName: "network-time", callback: ClientNas_NetworkTimeSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-time", callback: ClientNas_NetworkTimeSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-time", callback: ClientNas_NetworkTimeSignalCallback): NodeJS.EventEmitter
    emit(sigName: "network-time", ...args: any[]): void
    connect(sigName: "operator-name", callback: ClientNas_OperatorNameSignalCallback): number
    on(sigName: "operator-name", callback: ClientNas_OperatorNameSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "operator-name", callback: ClientNas_OperatorNameSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "operator-name", callback: ClientNas_OperatorNameSignalCallback): NodeJS.EventEmitter
    emit(sigName: "operator-name", ...args: any[]): void
    connect(sigName: "serving-system", callback: ClientNas_ServingSystemSignalCallback): number
    on(sigName: "serving-system", callback: ClientNas_ServingSystemSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "serving-system", callback: ClientNas_ServingSystemSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "serving-system", callback: ClientNas_ServingSystemSignalCallback): NodeJS.EventEmitter
    emit(sigName: "serving-system", ...args: any[]): void
    connect(sigName: "signal-info", callback: ClientNas_SignalInfoSignalCallback): number
    on(sigName: "signal-info", callback: ClientNas_SignalInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "signal-info", callback: ClientNas_SignalInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "signal-info", callback: ClientNas_SignalInfoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "signal-info", ...args: any[]): void
    connect(sigName: "system-info", callback: ClientNas_SystemInfoSignalCallback): number
    on(sigName: "system-info", callback: ClientNas_SystemInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "system-info", callback: ClientNas_SystemInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "system-info", callback: ClientNas_SystemInfoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "system-info", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientNas

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientNas structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientNas extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientNas

    static name: string
    static $gtype: GObject.GType<ClientNas>

    // Constructors of Qmi-1.0.Qmi.ClientNas

    constructor(config?: ClientNas_ConstructProps) 
    _init(config?: ClientNas_ConstructProps): void
}

interface ClientOma_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientOma_EventReportSignalCallback {
    (output: IndicationOmaEventReportOutput): void
}

interface ClientOma {

    // Owm methods of Qmi-1.0.Qmi.ClientOma

    /**
     * Asynchronously sends a Cancel Session request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_cancel_session_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    cancelSession(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_cancel_session().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_cancel_session().
     */
    cancelSessionFinish(res: Gio.AsyncResult): MessageOmaCancelSessionOutput
    /**
     * Asynchronously sends a Get Feature Setting request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_get_feature_setting_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFeatureSetting(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_get_feature_setting().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_get_feature_setting().
     */
    getFeatureSettingFinish(res: Gio.AsyncResult): MessageOmaGetFeatureSettingOutput
    /**
     * Asynchronously sends a Get Session Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_get_session_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSessionInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_get_session_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_get_session_info().
     */
    getSessionInfoFinish(res: Gio.AsyncResult): MessageOmaGetSessionInfoOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageOmaResetOutput
    /**
     * Asynchronously sends a Send Selection request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_send_selection_finish() to get the result of the operation.
     * @param input a #QmiMessageOmaSendSelectionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    sendSelection(input: MessageOmaSendSelectionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_send_selection().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_send_selection().
     */
    sendSelectionFinish(res: Gio.AsyncResult): MessageOmaSendSelectionOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessageOmaSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessageOmaSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessageOmaSetEventReportOutput
    /**
     * Asynchronously sends a Set Feature Setting request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_set_feature_setting_finish() to get the result of the operation.
     * @param input a #QmiMessageOmaSetFeatureSettingInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setFeatureSetting(input: MessageOmaSetFeatureSettingInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_set_feature_setting().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_set_feature_setting().
     */
    setFeatureSettingFinish(res: Gio.AsyncResult): MessageOmaSetFeatureSettingOutput
    /**
     * Asynchronously sends a Start Session request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_oma_start_session_finish() to get the result of the operation.
     * @param input a #QmiMessageOmaStartSessionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    startSession(input: MessageOmaStartSessionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_oma_start_session().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_oma_start_session().
     */
    startSessionFinish(res: Gio.AsyncResult): MessageOmaStartSessionOutput

    // Own signals of Qmi-1.0.Qmi.ClientOma

    connect(sigName: "event-report", callback: ClientOma_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientOma_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientOma_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientOma_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientOma

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientOma structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientOma extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientOma

    static name: string
    static $gtype: GObject.GType<ClientOma>

    // Constructors of Qmi-1.0.Qmi.ClientOma

    constructor(config?: ClientOma_ConstructProps) 
    _init(config?: ClientOma_ConstructProps): void
}

interface ClientPbm_ConstructProps extends Client_ConstructProps {
}

interface ClientPbm {

    // Owm methods of Qmi-1.0.Qmi.ClientPbm

    /**
     * Asynchronously sends a Get All Capabilities request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pbm_get_all_capabilities_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAllCapabilities(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pbm_get_all_capabilities().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pbm_get_all_capabilities().
     */
    getAllCapabilitiesFinish(res: Gio.AsyncResult): MessagePbmGetAllCapabilitiesOutput
    /**
     * Asynchronously sends a Get Capabilities request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pbm_get_capabilities_finish() to get the result of the operation.
     * @param input a #QmiMessagePbmGetCapabilitiesInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCapabilities(input: MessagePbmGetCapabilitiesInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pbm_get_capabilities().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pbm_get_capabilities().
     */
    getCapabilitiesFinish(res: Gio.AsyncResult): MessagePbmGetCapabilitiesOutput
    /**
     * Asynchronously sends a Indication Register request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pbm_indication_register_finish() to get the result of the operation.
     * @param input a #QmiMessagePbmIndicationRegisterInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    indicationRegister(input: MessagePbmIndicationRegisterInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pbm_indication_register().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pbm_indication_register().
     */
    indicationRegisterFinish(res: Gio.AsyncResult): MessagePbmIndicationRegisterOutput

    // Class property signals of Qmi-1.0.Qmi.ClientPbm

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientPbm structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientPbm extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientPbm

    static name: string
    static $gtype: GObject.GType<ClientPbm>

    // Constructors of Qmi-1.0.Qmi.ClientPbm

    constructor(config?: ClientPbm_ConstructProps) 
    _init(config?: ClientPbm_ConstructProps): void
}

interface ClientPdc_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `activate-config`
 */
interface ClientPdc_ActivateConfigSignalCallback {
    (output: IndicationPdcActivateConfigOutput): void
}

/**
 * Signal callback interface for `deactivate-config`
 */
interface ClientPdc_DeactivateConfigSignalCallback {
    (output: IndicationPdcDeactivateConfigOutput): void
}

/**
 * Signal callback interface for `get-config-info`
 */
interface ClientPdc_GetConfigInfoSignalCallback {
    (output: IndicationPdcGetConfigInfoOutput): void
}

/**
 * Signal callback interface for `get-selected-config`
 */
interface ClientPdc_GetSelectedConfigSignalCallback {
    (output: IndicationPdcGetSelectedConfigOutput): void
}

/**
 * Signal callback interface for `list-configs`
 */
interface ClientPdc_ListConfigsSignalCallback {
    (output: IndicationPdcListConfigsOutput): void
}

/**
 * Signal callback interface for `load-config`
 */
interface ClientPdc_LoadConfigSignalCallback {
    (output: IndicationPdcLoadConfigOutput): void
}

/**
 * Signal callback interface for `refresh`
 */
interface ClientPdc_RefreshSignalCallback {
    (output: IndicationPdcRefreshOutput): void
}

/**
 * Signal callback interface for `set-selected-config`
 */
interface ClientPdc_SetSelectedConfigSignalCallback {
    (output: IndicationPdcSetSelectedConfigOutput): void
}

interface ClientPdc {

    // Owm methods of Qmi-1.0.Qmi.ClientPdc

    /**
     * Asynchronously sends a Activate Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_activate_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcActivateConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    activateConfig(input: MessagePdcActivateConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_activate_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_activate_config().
     */
    activateConfigFinish(res: Gio.AsyncResult): MessagePdcActivateConfigOutput
    /**
     * Asynchronously sends a Config Change request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_config_change_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcConfigChangeInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    configChange(input: MessagePdcConfigChangeInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_config_change().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_config_change().
     */
    configChangeFinish(res: Gio.AsyncResult): MessagePdcConfigChangeOutput
    /**
     * Asynchronously sends a Deactivate Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_deactivate_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcDeactivateConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    deactivateConfig(input: MessagePdcDeactivateConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_deactivate_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_deactivate_config().
     */
    deactivateConfigFinish(res: Gio.AsyncResult): MessagePdcDeactivateConfigOutput
    /**
     * Asynchronously sends a Delete Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_delete_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcDeleteConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    deleteConfig(input: MessagePdcDeleteConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_delete_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_delete_config().
     */
    deleteConfigFinish(res: Gio.AsyncResult): MessagePdcDeleteConfigOutput
    /**
     * Asynchronously sends a Get Config Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_get_config_info_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcGetConfigInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getConfigInfo(input: MessagePdcGetConfigInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_get_config_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_get_config_info().
     */
    getConfigInfoFinish(res: Gio.AsyncResult): MessagePdcGetConfigInfoOutput
    /**
     * Asynchronously sends a Get Config Limits request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_get_config_limits_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcGetConfigLimitsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getConfigLimits(input: MessagePdcGetConfigLimitsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_get_config_limits().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_get_config_limits().
     */
    getConfigLimitsFinish(res: Gio.AsyncResult): MessagePdcGetConfigLimitsOutput
    /**
     * Asynchronously sends a Get Default Config Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_get_default_config_info_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcGetDefaultConfigInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDefaultConfigInfo(input: MessagePdcGetDefaultConfigInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_get_default_config_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_get_default_config_info().
     */
    getDefaultConfigInfoFinish(res: Gio.AsyncResult): MessagePdcGetDefaultConfigInfoOutput
    /**
     * Asynchronously sends a Get Selected Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_get_selected_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcGetSelectedConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSelectedConfig(input: MessagePdcGetSelectedConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_get_selected_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_get_selected_config().
     */
    getSelectedConfigFinish(res: Gio.AsyncResult): MessagePdcGetSelectedConfigOutput
    /**
     * Asynchronously sends a List Configs request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_list_configs_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcListConfigsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    listConfigs(input: MessagePdcListConfigsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_list_configs().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_list_configs().
     */
    listConfigsFinish(res: Gio.AsyncResult): MessagePdcListConfigsOutput
    /**
     * Asynchronously sends a Load Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_load_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcLoadConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    loadConfig(input: MessagePdcLoadConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_load_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_load_config().
     */
    loadConfigFinish(res: Gio.AsyncResult): MessagePdcLoadConfigOutput
    /**
     * Asynchronously sends a Register request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_register_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcRegisterInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    register(input: MessagePdcRegisterInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_register().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_register().
     */
    registerFinish(res: Gio.AsyncResult): MessagePdcRegisterOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessagePdcResetOutput
    /**
     * Asynchronously sends a Set Selected Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pdc_set_selected_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdcSetSelectedConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setSelectedConfig(input: MessagePdcSetSelectedConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pdc_set_selected_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pdc_set_selected_config().
     */
    setSelectedConfigFinish(res: Gio.AsyncResult): MessagePdcSetSelectedConfigOutput

    // Own signals of Qmi-1.0.Qmi.ClientPdc

    connect(sigName: "activate-config", callback: ClientPdc_ActivateConfigSignalCallback): number
    on(sigName: "activate-config", callback: ClientPdc_ActivateConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "activate-config", callback: ClientPdc_ActivateConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "activate-config", callback: ClientPdc_ActivateConfigSignalCallback): NodeJS.EventEmitter
    emit(sigName: "activate-config", ...args: any[]): void
    connect(sigName: "deactivate-config", callback: ClientPdc_DeactivateConfigSignalCallback): number
    on(sigName: "deactivate-config", callback: ClientPdc_DeactivateConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "deactivate-config", callback: ClientPdc_DeactivateConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "deactivate-config", callback: ClientPdc_DeactivateConfigSignalCallback): NodeJS.EventEmitter
    emit(sigName: "deactivate-config", ...args: any[]): void
    connect(sigName: "get-config-info", callback: ClientPdc_GetConfigInfoSignalCallback): number
    on(sigName: "get-config-info", callback: ClientPdc_GetConfigInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-config-info", callback: ClientPdc_GetConfigInfoSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-config-info", callback: ClientPdc_GetConfigInfoSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-config-info", ...args: any[]): void
    connect(sigName: "get-selected-config", callback: ClientPdc_GetSelectedConfigSignalCallback): number
    on(sigName: "get-selected-config", callback: ClientPdc_GetSelectedConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "get-selected-config", callback: ClientPdc_GetSelectedConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "get-selected-config", callback: ClientPdc_GetSelectedConfigSignalCallback): NodeJS.EventEmitter
    emit(sigName: "get-selected-config", ...args: any[]): void
    connect(sigName: "list-configs", callback: ClientPdc_ListConfigsSignalCallback): number
    on(sigName: "list-configs", callback: ClientPdc_ListConfigsSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "list-configs", callback: ClientPdc_ListConfigsSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "list-configs", callback: ClientPdc_ListConfigsSignalCallback): NodeJS.EventEmitter
    emit(sigName: "list-configs", ...args: any[]): void
    connect(sigName: "load-config", callback: ClientPdc_LoadConfigSignalCallback): number
    on(sigName: "load-config", callback: ClientPdc_LoadConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "load-config", callback: ClientPdc_LoadConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "load-config", callback: ClientPdc_LoadConfigSignalCallback): NodeJS.EventEmitter
    emit(sigName: "load-config", ...args: any[]): void
    connect(sigName: "refresh", callback: ClientPdc_RefreshSignalCallback): number
    on(sigName: "refresh", callback: ClientPdc_RefreshSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "refresh", callback: ClientPdc_RefreshSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "refresh", callback: ClientPdc_RefreshSignalCallback): NodeJS.EventEmitter
    emit(sigName: "refresh", ...args: any[]): void
    connect(sigName: "set-selected-config", callback: ClientPdc_SetSelectedConfigSignalCallback): number
    on(sigName: "set-selected-config", callback: ClientPdc_SetSelectedConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-selected-config", callback: ClientPdc_SetSelectedConfigSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-selected-config", callback: ClientPdc_SetSelectedConfigSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-selected-config", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientPdc

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientPdc structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientPdc extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientPdc

    static name: string
    static $gtype: GObject.GType<ClientPdc>

    // Constructors of Qmi-1.0.Qmi.ClientPdc

    constructor(config?: ClientPdc_ConstructProps) 
    _init(config?: ClientPdc_ConstructProps): void
}

interface ClientPds_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientPds_EventReportSignalCallback {
    (output: IndicationPdsEventReportOutput): void
}

/**
 * Signal callback interface for `gps-ready`
 */
interface ClientPds_GpsReadySignalCallback {
    (): void
}

interface ClientPds {

    // Owm methods of Qmi-1.0.Qmi.ClientPds

    /**
     * Asynchronously sends a Get AGPS Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_get_agps_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsGetAgpsConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAgpsConfig(input: MessagePdsGetAgpsConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_get_agps_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_get_agps_config().
     */
    getAgpsConfigFinish(res: Gio.AsyncResult): MessagePdsGetAgpsConfigOutput
    /**
     * Asynchronously sends a Get Auto Tracking State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_get_auto_tracking_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAutoTrackingState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_get_auto_tracking_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_get_auto_tracking_state().
     */
    getAutoTrackingStateFinish(res: Gio.AsyncResult): MessagePdsGetAutoTrackingStateOutput
    /**
     * Asynchronously sends a Get Default Tracking Session request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_get_default_tracking_session_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDefaultTrackingSession(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_get_default_tracking_session().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_get_default_tracking_session().
     */
    getDefaultTrackingSessionFinish(res: Gio.AsyncResult): MessagePdsGetDefaultTrackingSessionOutput
    /**
     * Asynchronously sends a Get GPS Service State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_get_gps_service_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getGpsServiceState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_get_gps_service_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_get_gps_service_state().
     */
    getGpsServiceStateFinish(res: Gio.AsyncResult): MessagePdsGetGpsServiceStateOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessagePdsResetOutput
    /**
     * Asynchronously sends a Set AGPS Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_set_agps_config_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsSetAgpsConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setAgpsConfig(input: MessagePdsSetAgpsConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_set_agps_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_set_agps_config().
     */
    setAgpsConfigFinish(res: Gio.AsyncResult): MessagePdsSetAgpsConfigOutput
    /**
     * Asynchronously sends a Set Auto Tracking State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_set_auto_tracking_state_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsSetAutoTrackingStateInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setAutoTrackingState(input: MessagePdsSetAutoTrackingStateInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_set_auto_tracking_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_set_auto_tracking_state().
     */
    setAutoTrackingStateFinish(res: Gio.AsyncResult): MessagePdsSetAutoTrackingStateOutput
    /**
     * Asynchronously sends a Set Default Tracking Session request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_set_default_tracking_session_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsSetDefaultTrackingSessionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setDefaultTrackingSession(input: MessagePdsSetDefaultTrackingSessionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_set_default_tracking_session().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_set_default_tracking_session().
     */
    setDefaultTrackingSessionFinish(res: Gio.AsyncResult): MessagePdsSetDefaultTrackingSessionOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessagePdsSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessagePdsSetEventReportOutput
    /**
     * Asynchronously sends a Set GPS Service State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_pds_set_gps_service_state_finish() to get the result of the operation.
     * @param input a #QmiMessagePdsSetGpsServiceStateInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setGpsServiceState(input: MessagePdsSetGpsServiceStateInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_pds_set_gps_service_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_pds_set_gps_service_state().
     */
    setGpsServiceStateFinish(res: Gio.AsyncResult): MessagePdsSetGpsServiceStateOutput

    // Own signals of Qmi-1.0.Qmi.ClientPds

    connect(sigName: "event-report", callback: ClientPds_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientPds_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientPds_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientPds_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void
    connect(sigName: "gps-ready", callback: ClientPds_GpsReadySignalCallback): number
    on(sigName: "gps-ready", callback: ClientPds_GpsReadySignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "gps-ready", callback: ClientPds_GpsReadySignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "gps-ready", callback: ClientPds_GpsReadySignalCallback): NodeJS.EventEmitter
    emit(sigName: "gps-ready", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientPds

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientPds structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientPds extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientPds

    static name: string
    static $gtype: GObject.GType<ClientPds>

    // Constructors of Qmi-1.0.Qmi.ClientPds

    constructor(config?: ClientPds_ConstructProps) 
    _init(config?: ClientPds_ConstructProps): void
}

interface ClientQos_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `flow-status`
 */
interface ClientQos_FlowStatusSignalCallback {
    (output: IndicationQosFlowStatusOutput): void
}

/**
 * Signal callback interface for `network-status`
 */
interface ClientQos_NetworkStatusSignalCallback {
    (output: IndicationQosNetworkStatusOutput): void
}

interface ClientQos {

    // Owm methods of Qmi-1.0.Qmi.ClientQos

    /**
     * Asynchronously sends a Get Flow Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_qos_get_flow_status_finish() to get the result of the operation.
     * @param input a #QmiMessageQosGetFlowStatusInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFlowStatus(input: MessageQosGetFlowStatusInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_qos_get_flow_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_qos_get_flow_status().
     */
    getFlowStatusFinish(res: Gio.AsyncResult): MessageQosGetFlowStatusOutput
    /**
     * Asynchronously sends a Get Network Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_qos_get_network_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getNetworkStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_qos_get_network_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_qos_get_network_status().
     */
    getNetworkStatusFinish(res: Gio.AsyncResult): MessageQosGetNetworkStatusOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_qos_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_qos_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_qos_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageQosResetOutput
    /**
     * Asynchronously sends a Swi Read Data Stats request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_qos_swi_read_data_stats_finish() to get the result of the operation.
     * @param input a #QmiMessageQosSwiReadDataStatsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiReadDataStats(input: MessageQosSwiReadDataStatsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_qos_swi_read_data_stats().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_qos_swi_read_data_stats().
     */
    swiReadDataStatsFinish(res: Gio.AsyncResult): MessageQosSwiReadDataStatsOutput

    // Own signals of Qmi-1.0.Qmi.ClientQos

    connect(sigName: "flow-status", callback: ClientQos_FlowStatusSignalCallback): number
    on(sigName: "flow-status", callback: ClientQos_FlowStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "flow-status", callback: ClientQos_FlowStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "flow-status", callback: ClientQos_FlowStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "flow-status", ...args: any[]): void
    connect(sigName: "network-status", callback: ClientQos_NetworkStatusSignalCallback): number
    on(sigName: "network-status", callback: ClientQos_NetworkStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "network-status", callback: ClientQos_NetworkStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "network-status", callback: ClientQos_NetworkStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "network-status", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientQos

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientQos structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientQos extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientQos

    static name: string
    static $gtype: GObject.GType<ClientQos>

    // Constructors of Qmi-1.0.Qmi.ClientQos

    constructor(config?: ClientQos_ConstructProps) 
    _init(config?: ClientQos_ConstructProps): void
}

interface ClientSar_ConstructProps extends Client_ConstructProps {
}

interface ClientSar {

    // Owm methods of Qmi-1.0.Qmi.ClientSar

    /**
     * Asynchronously sends a RF Get State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_sar_rf_get_state_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    rfGetState(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_sar_rf_get_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_sar_rf_get_state().
     */
    rfGetStateFinish(res: Gio.AsyncResult): MessageSarRfGetStateOutput
    /**
     * Asynchronously sends a RF Set State request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_sar_rf_set_state_finish() to get the result of the operation.
     * @param input a #QmiMessageSarRfSetStateInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    rfSetState(input: MessageSarRfSetStateInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_sar_rf_set_state().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_sar_rf_set_state().
     */
    rfSetStateFinish(res: Gio.AsyncResult): MessageSarRfSetStateOutput

    // Class property signals of Qmi-1.0.Qmi.ClientSar

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientSar structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientSar extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientSar

    static name: string
    static $gtype: GObject.GType<ClientSar>

    // Constructors of Qmi-1.0.Qmi.ClientSar

    constructor(config?: ClientSar_ConstructProps) 
    _init(config?: ClientSar_ConstructProps): void
}

interface ClientUim_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `card-status`
 */
interface ClientUim_CardStatusSignalCallback {
    (output: IndicationUimCardStatusOutput): void
}

/**
 * Signal callback interface for `refresh`
 */
interface ClientUim_RefreshSignalCallback {
    (output: IndicationUimRefreshOutput): void
}

/**
 * Signal callback interface for `slot-status`
 */
interface ClientUim_SlotStatusSignalCallback {
    (output: IndicationUimSlotStatusOutput): void
}

interface ClientUim {

    // Owm methods of Qmi-1.0.Qmi.ClientUim

    /**
     * Asynchronously sends a Change PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_change_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageUimChangePinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    changePin(input: MessageUimChangePinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_change_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_change_pin().
     */
    changePinFinish(res: Gio.AsyncResult): MessageUimChangePinOutput
    /**
     * Asynchronously sends a Change Provisioning Session request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_change_provisioning_session_finish() to get the result of the operation.
     * @param input a #QmiMessageUimChangeProvisioningSessionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    changeProvisioningSession(input: MessageUimChangeProvisioningSessionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_change_provisioning_session().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_change_provisioning_session().
     */
    changeProvisioningSessionFinish(res: Gio.AsyncResult): MessageUimChangeProvisioningSessionOutput
    /**
     * Asynchronously sends a Depersonalization request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_depersonalization_finish() to get the result of the operation.
     * @param input a #QmiMessageUimDepersonalizationInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    depersonalization(input: MessageUimDepersonalizationInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_depersonalization().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_depersonalization().
     */
    depersonalizationFinish(res: Gio.AsyncResult): MessageUimDepersonalizationOutput
    /**
     * Asynchronously sends a Get Card Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_get_card_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCardStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_get_card_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_get_card_status().
     */
    getCardStatusFinish(res: Gio.AsyncResult): MessageUimGetCardStatusOutput
    /**
     * Asynchronously sends a Get Configuration request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_get_configuration_finish() to get the result of the operation.
     * @param input a #QmiMessageUimGetConfigurationInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getConfiguration(input: MessageUimGetConfigurationInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_get_configuration().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_get_configuration().
     */
    getConfigurationFinish(res: Gio.AsyncResult): MessageUimGetConfigurationOutput
    /**
     * Asynchronously sends a Get File Attributes request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_get_file_attributes_finish() to get the result of the operation.
     * @param input a #QmiMessageUimGetFileAttributesInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getFileAttributes(input: MessageUimGetFileAttributesInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_get_file_attributes().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_get_file_attributes().
     */
    getFileAttributesFinish(res: Gio.AsyncResult): MessageUimGetFileAttributesOutput
    /**
     * Asynchronously sends a Get Slot Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_get_slot_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSlotStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_get_slot_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_get_slot_status().
     */
    getSlotStatusFinish(res: Gio.AsyncResult): MessageUimGetSlotStatusOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageUimGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Power Off SIM request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_power_off_sim_finish() to get the result of the operation.
     * @param input a #QmiMessageUimPowerOffSimInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    powerOffSim(input: MessageUimPowerOffSimInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_power_off_sim().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_power_off_sim().
     */
    powerOffSimFinish(res: Gio.AsyncResult): MessageUimPowerOffSimOutput
    /**
     * Asynchronously sends a Power On SIM request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_power_on_sim_finish() to get the result of the operation.
     * @param input a #QmiMessageUimPowerOnSimInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    powerOnSim(input: MessageUimPowerOnSimInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_power_on_sim().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_power_on_sim().
     */
    powerOnSimFinish(res: Gio.AsyncResult): MessageUimPowerOnSimOutput
    /**
     * Asynchronously sends a Read Record request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_read_record_finish() to get the result of the operation.
     * @param input a #QmiMessageUimReadRecordInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    readRecord(input: MessageUimReadRecordInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_read_record().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_read_record().
     */
    readRecordFinish(res: Gio.AsyncResult): MessageUimReadRecordOutput
    /**
     * Asynchronously sends a Read Transparent request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_read_transparent_finish() to get the result of the operation.
     * @param input a #QmiMessageUimReadTransparentInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    readTransparent(input: MessageUimReadTransparentInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_read_transparent().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_read_transparent().
     */
    readTransparentFinish(res: Gio.AsyncResult): MessageUimReadTransparentOutput
    /**
     * Asynchronously sends a Refresh Complete request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_refresh_complete_finish() to get the result of the operation.
     * @param input a #QmiMessageUimRefreshCompleteInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    refreshComplete(input: MessageUimRefreshCompleteInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_refresh_complete().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_refresh_complete().
     */
    refreshCompleteFinish(res: Gio.AsyncResult): MessageUimRefreshCompleteOutput
    /**
     * Asynchronously sends a Refresh Register request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_refresh_register_finish() to get the result of the operation.
     * @param input a #QmiMessageUimRefreshRegisterInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    refreshRegister(input: MessageUimRefreshRegisterInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Asynchronously sends a Refresh Register All request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_refresh_register_all_finish() to get the result of the operation.
     * @param input a #QmiMessageUimRefreshRegisterAllInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    refreshRegisterAll(input: MessageUimRefreshRegisterAllInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_refresh_register_all().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_refresh_register_all().
     */
    refreshRegisterAllFinish(res: Gio.AsyncResult): MessageUimRefreshRegisterAllOutput
    /**
     * Finishes an async operation started with qmi_client_uim_refresh_register().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_refresh_register().
     */
    refreshRegisterFinish(res: Gio.AsyncResult): MessageUimRefreshRegisterOutput
    /**
     * Asynchronously sends a Register Events request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_register_events_finish() to get the result of the operation.
     * @param input a #QmiMessageUimRegisterEventsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    registerEvents(input: MessageUimRegisterEventsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_register_events().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_register_events().
     */
    registerEventsFinish(res: Gio.AsyncResult): MessageUimRegisterEventsOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageUimResetOutput
    /**
     * Asynchronously sends a Set PIN Protection request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_set_pin_protection_finish() to get the result of the operation.
     * @param input a #QmiMessageUimSetPinProtectionInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setPinProtection(input: MessageUimSetPinProtectionInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_set_pin_protection().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_set_pin_protection().
     */
    setPinProtectionFinish(res: Gio.AsyncResult): MessageUimSetPinProtectionOutput
    /**
     * Asynchronously sends a Switch Slot request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_switch_slot_finish() to get the result of the operation.
     * @param input a #QmiMessageUimSwitchSlotInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    switchSlot(input: MessageUimSwitchSlotInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_switch_slot().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_switch_slot().
     */
    switchSlotFinish(res: Gio.AsyncResult): MessageUimSwitchSlotOutput
    /**
     * Asynchronously sends a Unblock PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_unblock_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageUimUnblockPinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    unblockPin(input: MessageUimUnblockPinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_unblock_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_unblock_pin().
     */
    unblockPinFinish(res: Gio.AsyncResult): MessageUimUnblockPinOutput
    /**
     * Asynchronously sends a Verify PIN request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_uim_verify_pin_finish() to get the result of the operation.
     * @param input a #QmiMessageUimVerifyPinInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    verifyPin(input: MessageUimVerifyPinInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_uim_verify_pin().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_uim_verify_pin().
     */
    verifyPinFinish(res: Gio.AsyncResult): MessageUimVerifyPinOutput

    // Own signals of Qmi-1.0.Qmi.ClientUim

    connect(sigName: "card-status", callback: ClientUim_CardStatusSignalCallback): number
    on(sigName: "card-status", callback: ClientUim_CardStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "card-status", callback: ClientUim_CardStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "card-status", callback: ClientUim_CardStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "card-status", ...args: any[]): void
    connect(sigName: "refresh", callback: ClientUim_RefreshSignalCallback): number
    on(sigName: "refresh", callback: ClientUim_RefreshSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "refresh", callback: ClientUim_RefreshSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "refresh", callback: ClientUim_RefreshSignalCallback): NodeJS.EventEmitter
    emit(sigName: "refresh", ...args: any[]): void
    connect(sigName: "slot-status", callback: ClientUim_SlotStatusSignalCallback): number
    on(sigName: "slot-status", callback: ClientUim_SlotStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "slot-status", callback: ClientUim_SlotStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "slot-status", callback: ClientUim_SlotStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "slot-status", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientUim

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientUim structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientUim extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientUim

    static name: string
    static $gtype: GObject.GType<ClientUim>

    // Constructors of Qmi-1.0.Qmi.ClientUim

    constructor(config?: ClientUim_ConstructProps) 
    _init(config?: ClientUim_ConstructProps): void
}

interface ClientVoice_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `all-call-status`
 */
interface ClientVoice_AllCallStatusSignalCallback {
    (output: IndicationVoiceAllCallStatusOutput): void
}

/**
 * Signal callback interface for `originate-ussd-no-wait`
 */
interface ClientVoice_OriginateUssdNoWaitSignalCallback {
    (output: IndicationVoiceOriginateUssdNoWaitOutput): void
}

/**
 * Signal callback interface for `release-ussd`
 */
interface ClientVoice_ReleaseUssdSignalCallback {
    (): void
}

/**
 * Signal callback interface for `supplementary-service`
 */
interface ClientVoice_SupplementaryServiceSignalCallback {
    (output: IndicationVoiceSupplementaryServiceOutput): void
}

/**
 * Signal callback interface for `ussd`
 */
interface ClientVoice_UssdSignalCallback {
    (output: IndicationVoiceUssdOutput): void
}

interface ClientVoice {

    // Owm methods of Qmi-1.0.Qmi.ClientVoice

    /**
     * Asynchronously sends a Answer Call request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_answer_call_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceAnswerCallInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    answerCall(input: MessageVoiceAnswerCallInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_answer_call().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_answer_call().
     */
    answerCallFinish(res: Gio.AsyncResult): MessageVoiceAnswerCallOutput
    /**
     * Asynchronously sends a Answer USSD request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_answer_ussd_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceAnswerUssdInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    answerUssd(input: MessageVoiceAnswerUssdInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_answer_ussd().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_answer_ussd().
     */
    answerUssdFinish(res: Gio.AsyncResult): MessageVoiceAnswerUssdOutput
    /**
     * Asynchronously sends a Cancel USSD request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_cancel_ussd_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    cancelUssd(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_cancel_ussd().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_cancel_ussd().
     */
    cancelUssdFinish(res: Gio.AsyncResult): MessageVoiceCancelUssdOutput
    /**
     * Asynchronously sends a Dial Call request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_dial_call_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceDialCallInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    dialCall(input: MessageVoiceDialCallInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_dial_call().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_dial_call().
     */
    dialCallFinish(res: Gio.AsyncResult): MessageVoiceDialCallOutput
    /**
     * Asynchronously sends a End Call request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_end_call_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceEndCallInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    endCall(input: MessageVoiceEndCallInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_end_call().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_end_call().
     */
    endCallFinish(res: Gio.AsyncResult): MessageVoiceEndCallOutput
    /**
     * Asynchronously sends a Get All Call Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_get_all_call_info_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAllCallInfo(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_get_all_call_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_get_all_call_info().
     */
    getAllCallInfoFinish(res: Gio.AsyncResult): MessageVoiceGetAllCallInfoOutput
    /**
     * Asynchronously sends a Get Call Waiting request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_get_call_waiting_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceGetCallWaitingInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCallWaiting(input: MessageVoiceGetCallWaitingInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_get_call_waiting().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_get_call_waiting().
     */
    getCallWaitingFinish(res: Gio.AsyncResult): MessageVoiceGetCallWaitingOutput
    /**
     * Asynchronously sends a Get Config request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_get_config_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceGetConfigInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getConfig(input: MessageVoiceGetConfigInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_get_config().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_get_config().
     */
    getConfigFinish(res: Gio.AsyncResult): MessageVoiceGetConfigOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageVoiceGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Indication Register request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_indication_register_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceIndicationRegisterInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    indicationRegister(input: MessageVoiceIndicationRegisterInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_indication_register().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_indication_register().
     */
    indicationRegisterFinish(res: Gio.AsyncResult): MessageVoiceIndicationRegisterOutput
    /**
     * Asynchronously sends a Manage Calls request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_manage_calls_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceManageCallsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    manageCalls(input: MessageVoiceManageCallsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_manage_calls().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_manage_calls().
     */
    manageCallsFinish(res: Gio.AsyncResult): MessageVoiceManageCallsOutput
    /**
     * Asynchronously sends a Originate USSD request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_originate_ussd_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceOriginateUssdInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    originateUssd(input: MessageVoiceOriginateUssdInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_originate_ussd().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_originate_ussd().
     */
    originateUssdFinish(res: Gio.AsyncResult): MessageVoiceOriginateUssdOutput
    /**
     * Asynchronously sends a Originate USSD No Wait request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_originate_ussd_no_wait_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceOriginateUssdNoWaitInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    originateUssdNoWait(input: MessageVoiceOriginateUssdNoWaitInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_originate_ussd_no_wait().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_originate_ussd_no_wait().
     */
    originateUssdNoWaitFinish(res: Gio.AsyncResult): MessageVoiceOriginateUssdNoWaitOutput
    /**
     * Asynchronously sends a Set Supplementary Service request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_voice_set_supplementary_service_finish() to get the result of the operation.
     * @param input a #QmiMessageVoiceSetSupplementaryServiceInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setSupplementaryService(input: MessageVoiceSetSupplementaryServiceInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_voice_set_supplementary_service().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_voice_set_supplementary_service().
     */
    setSupplementaryServiceFinish(res: Gio.AsyncResult): MessageVoiceSetSupplementaryServiceOutput

    // Own signals of Qmi-1.0.Qmi.ClientVoice

    connect(sigName: "all-call-status", callback: ClientVoice_AllCallStatusSignalCallback): number
    on(sigName: "all-call-status", callback: ClientVoice_AllCallStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "all-call-status", callback: ClientVoice_AllCallStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "all-call-status", callback: ClientVoice_AllCallStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "all-call-status", ...args: any[]): void
    connect(sigName: "originate-ussd-no-wait", callback: ClientVoice_OriginateUssdNoWaitSignalCallback): number
    on(sigName: "originate-ussd-no-wait", callback: ClientVoice_OriginateUssdNoWaitSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "originate-ussd-no-wait", callback: ClientVoice_OriginateUssdNoWaitSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "originate-ussd-no-wait", callback: ClientVoice_OriginateUssdNoWaitSignalCallback): NodeJS.EventEmitter
    emit(sigName: "originate-ussd-no-wait", ...args: any[]): void
    connect(sigName: "release-ussd", callback: ClientVoice_ReleaseUssdSignalCallback): number
    on(sigName: "release-ussd", callback: ClientVoice_ReleaseUssdSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "release-ussd", callback: ClientVoice_ReleaseUssdSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "release-ussd", callback: ClientVoice_ReleaseUssdSignalCallback): NodeJS.EventEmitter
    emit(sigName: "release-ussd", ...args: any[]): void
    connect(sigName: "supplementary-service", callback: ClientVoice_SupplementaryServiceSignalCallback): number
    on(sigName: "supplementary-service", callback: ClientVoice_SupplementaryServiceSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "supplementary-service", callback: ClientVoice_SupplementaryServiceSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "supplementary-service", callback: ClientVoice_SupplementaryServiceSignalCallback): NodeJS.EventEmitter
    emit(sigName: "supplementary-service", ...args: any[]): void
    connect(sigName: "ussd", callback: ClientVoice_UssdSignalCallback): number
    on(sigName: "ussd", callback: ClientVoice_UssdSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "ussd", callback: ClientVoice_UssdSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "ussd", callback: ClientVoice_UssdSignalCallback): NodeJS.EventEmitter
    emit(sigName: "ussd", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientVoice

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientVoice structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientVoice extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientVoice

    static name: string
    static $gtype: GObject.GType<ClientVoice>

    // Constructors of Qmi-1.0.Qmi.ClientVoice

    constructor(config?: ClientVoice_ConstructProps) 
    _init(config?: ClientVoice_ConstructProps): void
}

interface ClientWda_ConstructProps extends Client_ConstructProps {
}

interface ClientWda {

    // Owm methods of Qmi-1.0.Qmi.ClientWda

    /**
     * Asynchronously sends a Get Data Format request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wda_get_data_format_finish() to get the result of the operation.
     * @param input a #QmiMessageWdaGetDataFormatInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDataFormat(input: MessageWdaGetDataFormatInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wda_get_data_format().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wda_get_data_format().
     */
    getDataFormatFinish(res: Gio.AsyncResult): MessageWdaGetDataFormatOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wda_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wda_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wda_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageWdaGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Set Data Format request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wda_set_data_format_finish() to get the result of the operation.
     * @param input a #QmiMessageWdaSetDataFormatInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setDataFormat(input: MessageWdaSetDataFormatInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wda_set_data_format().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wda_set_data_format().
     */
    setDataFormatFinish(res: Gio.AsyncResult): MessageWdaSetDataFormatOutput

    // Class property signals of Qmi-1.0.Qmi.ClientWda

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientWda structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientWda extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientWda

    static name: string
    static $gtype: GObject.GType<ClientWda>

    // Constructors of Qmi-1.0.Qmi.ClientWda

    constructor(config?: ClientWda_ConstructProps) 
    _init(config?: ClientWda_ConstructProps): void
}

interface ClientWds_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientWds_EventReportSignalCallback {
    (output: IndicationWdsEventReportOutput): void
}

/**
 * Signal callback interface for `packet-service-status`
 */
interface ClientWds_PacketServiceStatusSignalCallback {
    (output: IndicationWdsPacketServiceStatusOutput): void
}

/**
 * Signal callback interface for `set-lte-attach-pdn-list`
 */
interface ClientWds_SetLteAttachPdnListSignalCallback {
    (output: IndicationWdsSetLteAttachPdnListOutput): void
}

interface ClientWds {

    // Owm methods of Qmi-1.0.Qmi.ClientWds

    /**
     * Asynchronously sends a Bind Data Port request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_bind_data_port_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsBindDataPortInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    bindDataPort(input: MessageWdsBindDataPortInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_bind_data_port().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_bind_data_port().
     */
    bindDataPortFinish(res: Gio.AsyncResult): MessageWdsBindDataPortOutput
    /**
     * Asynchronously sends a Bind Mux Data Port request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_bind_mux_data_port_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsBindMuxDataPortInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    bindMuxDataPort(input: MessageWdsBindMuxDataPortInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_bind_mux_data_port().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_bind_mux_data_port().
     */
    bindMuxDataPortFinish(res: Gio.AsyncResult): MessageWdsBindMuxDataPortOutput
    /**
     * Asynchronously sends a Create Profile request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_create_profile_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsCreateProfileInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    createProfile(input: MessageWdsCreateProfileInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_create_profile().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_create_profile().
     */
    createProfileFinish(res: Gio.AsyncResult): MessageWdsCreateProfileOutput
    /**
     * Asynchronously sends a Delete Profile request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_delete_profile_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsDeleteProfileInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    deleteProfile(input: MessageWdsDeleteProfileInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_delete_profile().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_delete_profile().
     */
    deleteProfileFinish(res: Gio.AsyncResult): MessageWdsDeleteProfileOutput
    /**
     * Asynchronously sends a Get Autoconnect Settings request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_autoconnect_settings_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getAutoconnectSettings(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_autoconnect_settings().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_autoconnect_settings().
     */
    getAutoconnectSettingsFinish(res: Gio.AsyncResult): MessageWdsGetAutoconnectSettingsOutput
    /**
     * Asynchronously sends a Get Channel Rates request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_channel_rates_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getChannelRates(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_channel_rates().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_channel_rates().
     */
    getChannelRatesFinish(res: Gio.AsyncResult): MessageWdsGetChannelRatesOutput
    /**
     * Asynchronously sends a Get Current Data Bearer Technology request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_current_data_bearer_technology_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCurrentDataBearerTechnology(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_current_data_bearer_technology().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_current_data_bearer_technology().
     */
    getCurrentDataBearerTechnologyFinish(res: Gio.AsyncResult): MessageWdsGetCurrentDataBearerTechnologyOutput
    /**
     * Asynchronously sends a Get Current Settings request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_current_settings_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetCurrentSettingsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getCurrentSettings(input: MessageWdsGetCurrentSettingsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_current_settings().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_current_settings().
     */
    getCurrentSettingsFinish(res: Gio.AsyncResult): MessageWdsGetCurrentSettingsOutput
    /**
     * Asynchronously sends a Get Data Bearer Technology request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_data_bearer_technology_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDataBearerTechnology(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_data_bearer_technology().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_data_bearer_technology().
     */
    getDataBearerTechnologyFinish(res: Gio.AsyncResult): MessageWdsGetDataBearerTechnologyOutput
    /**
     * Asynchronously sends a Get Default Profile Number request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_default_profile_number_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetDefaultProfileNumberInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDefaultProfileNumber(input: MessageWdsGetDefaultProfileNumberInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_default_profile_number().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_default_profile_number().
     */
    getDefaultProfileNumberFinish(res: Gio.AsyncResult): MessageWdsGetDefaultProfileNumberOutput
    /**
     * Asynchronously sends a Get Default Settings request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_default_settings_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetDefaultSettingsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDefaultSettings(input: MessageWdsGetDefaultSettingsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_default_settings().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_default_settings().
     */
    getDefaultSettingsFinish(res: Gio.AsyncResult): MessageWdsGetDefaultSettingsOutput
    /**
     * Asynchronously sends a Get Dormancy Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_dormancy_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getDormancyStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_dormancy_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_dormancy_status().
     */
    getDormancyStatusFinish(res: Gio.AsyncResult): MessageWdsGetDormancyStatusOutput
    /**
     * Asynchronously sends a Get LTE Attach Parameters request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_lte_attach_parameters_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getLteAttachParameters(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_lte_attach_parameters().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_lte_attach_parameters().
     */
    getLteAttachParametersFinish(res: Gio.AsyncResult): MessageWdsGetLteAttachParametersOutput
    /**
     * Asynchronously sends a Get LTE Attach PDN List request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_lte_attach_pdn_list_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getLteAttachPdnList(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_lte_attach_pdn_list().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_lte_attach_pdn_list().
     */
    getLteAttachPdnListFinish(res: Gio.AsyncResult): MessageWdsGetLteAttachPdnListOutput
    /**
     * Asynchronously sends a Get Max LTE Attach PDN Number request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_max_lte_attach_pdn_number_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getMaxLteAttachPdnNumber(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_max_lte_attach_pdn_number().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_max_lte_attach_pdn_number().
     */
    getMaxLteAttachPdnNumberFinish(res: Gio.AsyncResult): MessageWdsGetMaxLteAttachPdnNumberOutput
    /**
     * Asynchronously sends a Get Packet Service Status request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_packet_service_status_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPacketServiceStatus(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_packet_service_status().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_packet_service_status().
     */
    getPacketServiceStatusFinish(res: Gio.AsyncResult): MessageWdsGetPacketServiceStatusOutput
    /**
     * Asynchronously sends a Get Packet Statistics request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_packet_statistics_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetPacketStatisticsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPacketStatistics(input: MessageWdsGetPacketStatisticsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_packet_statistics().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_packet_statistics().
     */
    getPacketStatisticsFinish(res: Gio.AsyncResult): MessageWdsGetPacketStatisticsOutput
    /**
     * Asynchronously sends a Get PDN Throttle Info request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_pdn_throttle_info_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetPdnThrottleInfoInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getPdnThrottleInfo(input: MessageWdsGetPdnThrottleInfoInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_pdn_throttle_info().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_pdn_throttle_info().
     */
    getPdnThrottleInfoFinish(res: Gio.AsyncResult): MessageWdsGetPdnThrottleInfoOutput
    /**
     * Asynchronously sends a Get Profile List request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_profile_list_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetProfileListInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getProfileList(input: MessageWdsGetProfileListInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_profile_list().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_profile_list().
     */
    getProfileListFinish(res: Gio.AsyncResult): MessageWdsGetProfileListOutput
    /**
     * Asynchronously sends a Get Profile Settings request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_profile_settings_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsGetProfileSettingsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getProfileSettings(input: MessageWdsGetProfileSettingsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_profile_settings().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_profile_settings().
     */
    getProfileSettingsFinish(res: Gio.AsyncResult): MessageWdsGetProfileSettingsOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageWdsGetSupportedMessagesOutput
    /**
     * Asynchronously sends a Go Active request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_go_active_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    goActive(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_go_active().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_go_active().
     */
    goActiveFinish(res: Gio.AsyncResult): MessageWdsGoActiveOutput
    /**
     * Asynchronously sends a Go Dormant request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_go_dormant_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    goDormant(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_go_dormant().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_go_dormant().
     */
    goDormantFinish(res: Gio.AsyncResult): MessageWdsGoDormantOutput
    /**
     * Asynchronously sends a Modify Profile request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_modify_profile_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsModifyProfileInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    modifyProfile(input: MessageWdsModifyProfileInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_modify_profile().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_modify_profile().
     */
    modifyProfileFinish(res: Gio.AsyncResult): MessageWdsModifyProfileOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageWdsResetOutput
    /**
     * Asynchronously sends a Set Autoconnect Settings request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_set_autoconnect_settings_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSetAutoconnectSettingsInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setAutoconnectSettings(input: MessageWdsSetAutoconnectSettingsInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_set_autoconnect_settings().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_set_autoconnect_settings().
     */
    setAutoconnectSettingsFinish(res: Gio.AsyncResult): MessageWdsSetAutoconnectSettingsOutput
    /**
     * Asynchronously sends a Set Default Profile Number request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_set_default_profile_number_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSetDefaultProfileNumberInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setDefaultProfileNumber(input: MessageWdsSetDefaultProfileNumberInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_set_default_profile_number().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_set_default_profile_number().
     */
    setDefaultProfileNumberFinish(res: Gio.AsyncResult): MessageWdsSetDefaultProfileNumberOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessageWdsSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessageWdsSetEventReportOutput
    /**
     * Asynchronously sends a Set IP Family request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_set_ip_family_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSetIpFamilyInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setIpFamily(input: MessageWdsSetIpFamilyInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_set_ip_family().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_set_ip_family().
     */
    setIpFamilyFinish(res: Gio.AsyncResult): MessageWdsSetIpFamilyOutput
    /**
     * Asynchronously sends a Set LTE Attach PDN List request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_set_lte_attach_pdn_list_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSetLteAttachPdnListInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setLteAttachPdnList(input: MessageWdsSetLteAttachPdnListInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_set_lte_attach_pdn_list().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_set_lte_attach_pdn_list().
     */
    setLteAttachPdnListFinish(res: Gio.AsyncResult): MessageWdsSetLteAttachPdnListOutput
    /**
     * Asynchronously sends a Start Network request to the device.
     * 
     * This message is abortable. If `cancellable` is cancelled or if `timeout` expires,
     * an abort request will be sent to the device, and the asynchronous operation will
     * not return until the abort response is received. It is not an error if a successful
     * response is returned for the asynchronous operation even after the user has cancelled
     * the cancellable, because it may happen that the response is received before the
     * modem had a chance to run the abort.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_start_network_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsStartNetworkInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    startNetwork(input: MessageWdsStartNetworkInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_start_network().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_start_network().
     */
    startNetworkFinish(res: Gio.AsyncResult): MessageWdsStartNetworkOutput
    /**
     * Asynchronously sends a Stop Network request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_stop_network_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsStopNetworkInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    stopNetwork(input: MessageWdsStopNetworkInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_stop_network().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_stop_network().
     */
    stopNetworkFinish(res: Gio.AsyncResult): MessageWdsStopNetworkOutput
    /**
     * Asynchronously sends a Swi Create Profile Indexed request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wds_swi_create_profile_indexed_finish() to get the result of the operation.
     * @param input a #QmiMessageWdsSwiCreateProfileIndexedInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    swiCreateProfileIndexed(input: MessageWdsSwiCreateProfileIndexedInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wds_swi_create_profile_indexed().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wds_swi_create_profile_indexed().
     */
    swiCreateProfileIndexedFinish(res: Gio.AsyncResult): MessageWdsSwiCreateProfileIndexedOutput

    // Own signals of Qmi-1.0.Qmi.ClientWds

    connect(sigName: "event-report", callback: ClientWds_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientWds_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientWds_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientWds_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void
    connect(sigName: "packet-service-status", callback: ClientWds_PacketServiceStatusSignalCallback): number
    on(sigName: "packet-service-status", callback: ClientWds_PacketServiceStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "packet-service-status", callback: ClientWds_PacketServiceStatusSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "packet-service-status", callback: ClientWds_PacketServiceStatusSignalCallback): NodeJS.EventEmitter
    emit(sigName: "packet-service-status", ...args: any[]): void
    connect(sigName: "set-lte-attach-pdn-list", callback: ClientWds_SetLteAttachPdnListSignalCallback): number
    on(sigName: "set-lte-attach-pdn-list", callback: ClientWds_SetLteAttachPdnListSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "set-lte-attach-pdn-list", callback: ClientWds_SetLteAttachPdnListSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "set-lte-attach-pdn-list", callback: ClientWds_SetLteAttachPdnListSignalCallback): NodeJS.EventEmitter
    emit(sigName: "set-lte-attach-pdn-list", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientWds

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientWds structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientWds extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientWds

    static name: string
    static $gtype: GObject.GType<ClientWds>

    // Constructors of Qmi-1.0.Qmi.ClientWds

    constructor(config?: ClientWds_ConstructProps) 
    _init(config?: ClientWds_ConstructProps): void
}

interface ClientWms_ConstructProps extends Client_ConstructProps {
}

/**
 * Signal callback interface for `event-report`
 */
interface ClientWms_EventReportSignalCallback {
    (output: IndicationWmsEventReportOutput): void
}

/**
 * Signal callback interface for `smsc-address`
 */
interface ClientWms_SmscAddressSignalCallback {
    (output: IndicationWmsSmscAddressOutput): void
}

interface ClientWms {

    // Owm methods of Qmi-1.0.Qmi.ClientWms

    /**
     * Asynchronously sends a Delete request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_delete_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsDeleteInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    delete(input: MessageWmsDeleteInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_delete().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_delete().
     */
    deleteFinish(res: Gio.AsyncResult): MessageWmsDeleteOutput
    /**
     * Asynchronously sends a Get Message Protocol request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_get_message_protocol_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getMessageProtocol(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_get_message_protocol().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_get_message_protocol().
     */
    getMessageProtocolFinish(res: Gio.AsyncResult): MessageWmsGetMessageProtocolOutput
    /**
     * Asynchronously sends a Get Routes request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_get_routes_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getRoutes(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_get_routes().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_get_routes().
     */
    getRoutesFinish(res: Gio.AsyncResult): MessageWmsGetRoutesOutput
    /**
     * Asynchronously sends a Get Supported Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_get_supported_messages_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getSupportedMessages(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_get_supported_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_get_supported_messages().
     */
    getSupportedMessagesFinish(res: Gio.AsyncResult): MessageWmsGetSupportedMessagesOutput
    /**
     * Asynchronously sends a List Messages request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_list_messages_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsListMessagesInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    listMessages(input: MessageWmsListMessagesInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_list_messages().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_list_messages().
     */
    listMessagesFinish(res: Gio.AsyncResult): MessageWmsListMessagesOutput
    /**
     * Asynchronously sends a Modify Tag request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_modify_tag_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsModifyTagInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    modifyTag(input: MessageWmsModifyTagInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_modify_tag().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_modify_tag().
     */
    modifyTagFinish(res: Gio.AsyncResult): MessageWmsModifyTagOutput
    /**
     * Asynchronously sends a Raw Read request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_raw_read_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsRawReadInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    rawRead(input: MessageWmsRawReadInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_raw_read().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_raw_read().
     */
    rawReadFinish(res: Gio.AsyncResult): MessageWmsRawReadOutput
    /**
     * Asynchronously sends a Raw Send request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_raw_send_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsRawSendInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    rawSend(input: MessageWmsRawSendInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_raw_send().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_raw_send().
     */
    rawSendFinish(res: Gio.AsyncResult): MessageWmsRawSendOutput
    /**
     * Asynchronously sends a Raw Write request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_raw_write_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsRawWriteInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    rawWrite(input: MessageWmsRawWriteInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_raw_write().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_raw_write().
     */
    rawWriteFinish(res: Gio.AsyncResult): MessageWmsRawWriteOutput
    /**
     * Asynchronously sends a Reset request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_reset_finish() to get the result of the operation.
     * @param unused %NULL. This message doesn't have any input bundle.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    reset(unused: object | null, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_reset().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_reset().
     */
    resetFinish(res: Gio.AsyncResult): MessageWmsResetOutput
    /**
     * Asynchronously sends a Send Ack request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_send_ack_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsSendAckInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    sendAck(input: MessageWmsSendAckInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_send_ack().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_send_ack().
     */
    sendAckFinish(res: Gio.AsyncResult): MessageWmsSendAckOutput
    /**
     * Asynchronously sends a Send From Memory Storage request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_send_from_memory_storage_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsSendFromMemoryStorageInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    sendFromMemoryStorage(input: MessageWmsSendFromMemoryStorageInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_send_from_memory_storage().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_send_from_memory_storage().
     */
    sendFromMemoryStorageFinish(res: Gio.AsyncResult): MessageWmsSendFromMemoryStorageOutput
    /**
     * Asynchronously sends a Set Event Report request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_set_event_report_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsSetEventReportInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setEventReport(input: MessageWmsSetEventReportInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_set_event_report().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_set_event_report().
     */
    setEventReportFinish(res: Gio.AsyncResult): MessageWmsSetEventReportOutput
    /**
     * Asynchronously sends a Set Routes request to the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_client_wms_set_routes_finish() to get the result of the operation.
     * @param input a #QmiMessageWmsSetRoutesInput.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    setRoutes(input: MessageWmsSetRoutesInput, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an async operation started with qmi_client_wms_set_routes().
     * @param res the #GAsyncResult obtained from the #GAsyncReadyCallback passed to qmi_client_wms_set_routes().
     */
    setRoutesFinish(res: Gio.AsyncResult): MessageWmsSetRoutesOutput

    // Own signals of Qmi-1.0.Qmi.ClientWms

    connect(sigName: "event-report", callback: ClientWms_EventReportSignalCallback): number
    on(sigName: "event-report", callback: ClientWms_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "event-report", callback: ClientWms_EventReportSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "event-report", callback: ClientWms_EventReportSignalCallback): NodeJS.EventEmitter
    emit(sigName: "event-report", ...args: any[]): void
    connect(sigName: "smsc-address", callback: ClientWms_SmscAddressSignalCallback): number
    on(sigName: "smsc-address", callback: ClientWms_SmscAddressSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "smsc-address", callback: ClientWms_SmscAddressSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "smsc-address", callback: ClientWms_SmscAddressSignalCallback): NodeJS.EventEmitter
    emit(sigName: "smsc-address", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.ClientWms

    connect(sigName: "notify::client-cid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-cid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-cid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-cid", ...args: any[]): void
    connect(sigName: "notify::client-device", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-device", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-device", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-device", ...args: any[]): void
    connect(sigName: "notify::client-service", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-service", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-service", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-service", ...args: any[]): void
    connect(sigName: "notify::client-valid", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-valid", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-valid", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-valid", ...args: any[]): void
    connect(sigName: "notify::client-version-major", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-major", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-major", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-major", ...args: any[]): void
    connect(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): number
    on(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::client-version-minor", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::client-version-minor", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::client-version-minor", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiClientWms structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class ClientWms extends Client {

    // Own properties of Qmi-1.0.Qmi.ClientWms

    static name: string
    static $gtype: GObject.GType<ClientWms>

    // Constructors of Qmi-1.0.Qmi.ClientWms

    constructor(config?: ClientWms_ConstructProps) 
    _init(config?: ClientWms_ConstructProps): void
}

interface Device_ConstructProps extends Gio.AsyncInitable_ConstructProps, GObject.Object_ConstructProps {

    // Own constructor properties of Qmi-1.0.Qmi.Device

    deviceFile?: Gio.File | null
    deviceNoFileCheck?: boolean | null
    deviceProxyPath?: string | null
}

/**
 * Signal callback interface for `device-removed`
 */
interface Device_DeviceRemovedSignalCallback {
    (): void
}

/**
 * Signal callback interface for `indication`
 */
interface Device_IndicationSignalCallback {
    (output: Uint8Array): void
}

interface Device extends Gio.AsyncInitable {

    // Own properties of Qmi-1.0.Qmi.Device

    readonly deviceFile: Gio.File
    readonly deviceNoFileCheck: boolean
    readonly deviceProxyPath: string
    readonly deviceWwanIface: string

    // Owm methods of Qmi-1.0.Qmi.Device

    /**
     * Asynchronously creates a new virtual network device node with a custom prefix
     * on top of `base_ifname`. This allows having multiple net interfaces running on
     * top of another using multiplexing.
     * 
     * If the kernel driver doesn't allow this functionality, a
     * %QMI_CORE_ERROR_UNSUPPORTED error will be returned.
     * 
     * The operation may fail if the given interface name is not associated to the
     * QMI control port managed by the #QmiDevice.
     * 
     * Depending on the kernel driver in use and the multiplexing method, the given
     * `ifname_prefix` may be ignored. The user should not assume that the returned
     * link interface name is prefixed with `ifname_prefix` as it may not be the
     * case.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_add_link_finish() to get the result of the operation.
     * 
     * <note><para>
     * When using the qmi_wwan kernel driver, the configured expected kernel data
     * format will be used to select the type of multiplexing method. If the
     * format is %QMI_DEVICE_EXPECTED_DATA_FORMAT_RAW_IP the qmi_wwan specific
     * add_mux/del_mux operations will be used. If the format is
     * %QMI_DEVICE_EXPECTED_DATA_FORMAT_QMAP_PASS_THROUGH, the generic rmnet netlink
     * operations will be used. No multiplexing support exists when the format is
     * %QMI_DEVICE_EXPECTED_DATA_FORMAT_802_3.
     * </para><para>
     * For every other kernel driver (e.g. ipa), rmnet netlink operations are
     * assumed to be supported.
     * </para></note>
     * 
     * <note><para>
     * When using the qmi_wwan driver from a kernel older than v5.12, some of the
     * multiplexing features like using %QMI_DEVICE_MUX_ID_AUTOMATIC may not be fully
     * available for programs that use ephimeral #QmiDevice objects for single
     * operations.
     * </para></note>
     * @param muxId the mux id for the link, in the   [%QMI_DEVICE_MUX_ID_MIN,%QMI_DEVICE_MUX_ID_MAX] range, or   %QMI_DEVICE_MUX_ID_AUTOMATIC to find the first available mux id.
     * @param baseIfname the interface which the new link will be created on.
     * @param ifnamePrefix the prefix suggested to be used for the name of the new link   created.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    addLink(muxId: number, baseIfname: string, ifnamePrefix: string, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_add_link().
     * @param res a #GAsyncResult.
     * @param muxId the mux ID for the link created.
     */
    addLinkFinish(res: Gio.AsyncResult, muxId: number): string
    /**
     * Asynchronously creates a new virtual network device in the same way as
     * qmi_device_add_link() does, but passing the additional `flags` to the kernel
     * during the operation.
     * 
     * Using %QMI_DEVICE_ADD_LINK_FLAGS_NONE as `flags` is equivalent to calling
     * qmi_device_add_link() directly.
     * 
     * If the link creation with the given set of `flags` is unsupported by the
     * backend, the operation may fail.
     * 
     * <note><para>
     * None of the `flags` supported are applicable when using the multiplexing
     * support provided by the qmi_wwan kernel driver, they are only used if using
     * the rmnet backend for link management support.
     * </para></note>
     * @param muxId the mux id for the link, in the   [%QMI_DEVICE_MUX_ID_MIN,%QMI_DEVICE_MUX_ID_MAX] range, or   %QMI_DEVICE_MUX_ID_AUTOMATIC to find the first available mux id.
     * @param baseIfname the interface which the new link will be created on.
     * @param ifnamePrefix the prefix suggested to be used for the name of the new link   created.
     * @param flags bitmask of %QmiDeviceAddLinkFlags values to pass to the kernel when   creating the new link.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    addLinkWithFlags(muxId: number, baseIfname: string, ifnamePrefix: string, flags: DeviceAddLinkFlags, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_add_link_finish().
     * @param res a #GAsyncResult.
     * @param muxId the mux ID for the link created.
     */
    addLinkWithFlagsFinish(res: Gio.AsyncResult, muxId: number): string
    /**
     * Asynchronously allocates a new #QmiClient in `self`.
     * 
     * If %QMI_CID_NONE is given in `cid,` a new client ID will be allocated;
     * otherwise a client with the given `cid` will be generated.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_allocate_client_finish() to get the result of the operation.
     * 
     * Note: Clients for the %QMI_SERVICE_CTL cannot be created with this method;
     * instead get/peek the implicit one from `self`.
     * @param service a valid #QmiService.
     * @param cid a valid client ID, or %QMI_CID_NONE.
     * @param timeout maximum time to wait.
     * @param cancellable optional #GCancellable object, %NULL to ignore.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    allocateClient(service: Service, cid: number, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_allocate_client().
     * @param res a #GAsyncResult.
     */
    allocateClientFinish(res: Gio.AsyncResult): Client
    /**
     * Checks whether the given data format is supported by the kernel.
     * interface.
     * 
     * <note><para>
     * This method is only applicable when using the qmi_wwan kernel driver.
     * </para></note>
     * @param format a known #QmiDeviceExpectedDataFormat.
     */
    checkExpectedDataFormatSupported(format: DeviceExpectedDataFormat): boolean
    /**
     * Checks whether link management is supported by the kernel.
     */
    checkLinkSupported(): boolean
    /**
     * Asynchronously closes a #QmiDevice, preventing any further I/O.
     * 
     * If this device was opened with `QMI_DEVICE_OPEN_FLAGS_MBIM,` this
     * operation will wait for the response of the underlying MBIM close
     * sequence.
     * 
     * Closing a #QmiDevice multiple times will not return an error.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_close_finish() to get the result of the operation.
     * @param timeout maximum time, in seconds, to wait for the device to be closed.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    closeAsync(timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_close_async().
     * @param res a #GAsyncResult.
     */
    closeFinish(res: Gio.AsyncResult): boolean
    /**
     * Finishes an operation started with qmi_device_command_abortable().
     * @param res a #GAsyncResult.
     */
    commandAbortableFinish(res: Gio.AsyncResult): Message
    /**
     * Asynchronously sends a #QmiMessage to the device.
     * 
     * The message will be processed according to the specific `message_context`
     * given. If no `context` given, the behavior is the same as qmi_device_command().
     * 
     * If the operation is cancelled via `cancellable,` a %QMI_PROTOCOL_ERROR_ABORTED
     * error will be returned always. If the QMI method may be aborted, there is
     * no guarantee that the operation is truly aborted before the error is returned
     * so it may really happen that the operation really succeeded and the method
     * would still return %QMI_PROTOCOL_ERROR_ABORTED. In order to use abortable
     * methods and make sure the response is the correct one, use
     * qmi_device_command_abortable().
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_command_full_finish() to get the result of the operation.
     * @param message the message to send.
     * @param messageContext the context of the message.
     * @param timeout maximum time, in seconds, to wait for the response.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    commandFull(message: Message, messageContext: MessageContext, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_command_full().
     * @param res a #GAsyncResult.
     */
    commandFullFinish(res: Gio.AsyncResult): Message
    /**
     * Asynchronously deletes all virtual network interfaces that have been previously
     * created with qmi_device_add_link() in `base_ifname`.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_delete_link_finish() to get the result of the operation.
     * 
     * <note><para>
     * There is no guarantee that other processes haven't created new links by the
     * time this method returns. This method should be used with caution, or in setups
     * where only one single process is expected to do QMI network interface link
     * management.
     * </para></note>
     * @param baseIfname the interface where all links are available.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    deleteAllLinks(baseIfname: string, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_delete_all_links().
     * @param res a #GAsyncResult.
     */
    deleteAllLinksFinish(res: Gio.AsyncResult): boolean
    /**
     * Asynchronously deletes a virtual network interface that has been previously
     * created with qmi_device_add_link().
     * 
     * If the kernel driver doesn't allow this functionality, a
     * %QMI_CORE_ERROR_UNSUPPORTED error will be returned.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_delete_link_finish() to get the result of the operation.
     * 
     * <note><para>
     * The %QMI_DEVICE_MUX_ID_UNBOUND value may be given as `mux_id` if the user
     * can guarantee that the underlying kernel support doesn't require the
     * mux id info to delete the link. When using the qmi_wwan driver from a kernel
     * older than v5.12, a valid `mux_id` is required.
     * </para></note>
     * @param ifname the name of the link to remove.
     * @param muxId the mux ID of the link to remove.
     * @param cancellable a #GCancellable, or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    deleteLink(ifname: string, muxId: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_delete_link().
     * @param res a #GAsyncResult.
     */
    deleteLinkFinish(res: Gio.AsyncResult): boolean
    /**
     * Retrieves the data format currently expected by the kernel in the network
     * interface.
     * 
     * If `QMI_DEVICE_EXPECTED_DATA_FORMAT_UNKNOWN` is returned, the user should
     * assume that 802.3 is the expected format, as that is what the qmi_wwan
     * driver expected by default before kernel 4.5.
     * 
     * <note><para>
     * This method is only applicable when using the qmi_wwan kernel driver.
     * </para></note>
     */
    getExpectedDataFormat(): DeviceExpectedDataFormat
    /**
     * Get the #GFile associated with this #QmiDevice.
     */
    getFile(): Gio.File
    /**
     * Get the system path of the underlying QMI device.
     */
    getPath(): string
    /**
     * Get the system path of the underlying QMI device in UTF-8.
     */
    getPathDisplay(): string
    /**
     * Asynchronously requests the service version information of the device.
     * 
     * When the operation is finished, `callback` will be invoked in the thread-default main loop of the thread you are calling this method from.
     * 
     * You can then call qmi_device_get_service_version_info_finish() to get the result of the operation.
     * @param timeout maximum time to wait for the method to complete, in seconds.
     * @param cancellable a #GCancellable or %NULL.
     * @param callback a #GAsyncReadyCallback to call when the request is satisfied.
     */
    getServiceVersionInfo(timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_get_service_version_info().
     * @param res a #GAsyncResult.
     */
    getServiceVersionInfoFinish(res: Gio.AsyncResult): DeviceServiceVersionInfo[]
    /**
     * Get the WWAN interface name associated with the QMI control port.
     * This value will be loaded every time it's asked for it.
     * 
     * <note><para>
     * This method is only applicable when using the qmi_wwan kernel driver.
     * </para></note>
     */
    getWwanIface(): string
    /**
     * Checks whether the #QmiDevice is open for I/O.
     */
    isOpen(): boolean
    /**
     * Synchronously lists all virtual network interfaces that have been previously
     * created with qmi_device_add_link() in `base_ifname`.
     * @param baseIfname the base interface.
     */
    listLinks(baseIfname: string): [ /* returnType */ boolean, /* outLinks */ string[] ]
    /**
     * Asynchronously opens a #QmiDevice for I/O.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_open_finish() to get the result of the operation.
     * @param flags mask of #QmiDeviceOpenFlags specifying how the device should be opened.
     * @param timeout maximum time, in seconds, to wait for the device to be opened.
     * @param cancellable optional #GCancellable object, %NULL to ignore.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    open(flags: DeviceOpenFlags, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an asynchronous open operation started with qmi_device_open().
     * @param res a #GAsyncResult.
     */
    openFinish(res: Gio.AsyncResult): boolean
    /**
     * Get the #GFile associated with this #QmiDevice, without increasing the reference count
     * on the returned object.
     */
    peekFile(): Gio.File
    /**
     * Asynchronously releases the #QmiClient from the #QmiDevice.
     * 
     * Once the #QmiClient has been released, it cannot be used any more to
     * perform operations.
     * 
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_release_client_finish() to get the result of the operation.
     * @param client the #QmiClient to release.
     * @param flags mask of #QmiDeviceReleaseClientFlags specifying how the client should be released.
     * @param timeout maximum time to wait.
     * @param cancellable optional #GCancellable object, %NULL to ignore.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    releaseClient(client: Client, flags: DeviceReleaseClientFlags, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_release_client().
     * 
     * Note that even if the release operation returns an error, the client should
     * anyway be considered released, and shouldn't be used afterwards.
     * @param res a #GAsyncResult.
     */
    releaseClientFinish(res: Gio.AsyncResult): boolean
    /**
     * Configures the data format currently expected by the kernel in the network
     * interface.
     * 
     * <note><para>
     * This method is only applicable when using the qmi_wwan kernel driver.
     * </para></note>
     * @param format a known #QmiDeviceExpectedDataFormat.
     */
    setExpectedDataFormat(format: DeviceExpectedDataFormat): boolean
    /**
     * Sets the instance ID of the #QmiDevice.
     * 
     * When the operation is finished `callback` will be called. You can then call
     * qmi_device_set_instance_id_finish() to get the result of the operation.
     * @param instanceId the instance ID.
     * @param timeout maximum time to wait.
     * @param cancellable optional #GCancellable object, %NULL to ignore.
     * @param callback a #GAsyncReadyCallback to call when the operation is finished.
     */
    setInstanceId(instanceId: number, timeout: number, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
    /**
     * Finishes an operation started with qmi_device_set_instance_id().
     * @param res a #GAsyncResult.
     * @param linkId a placeholder for the output #guint16, or %NULL if not required.
     */
    setInstanceIdFinish(res: Gio.AsyncResult, linkId: number): boolean

    // Own signals of Qmi-1.0.Qmi.Device

    connect(sigName: "device-removed", callback: Device_DeviceRemovedSignalCallback): number
    on(sigName: "device-removed", callback: Device_DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "device-removed", callback: Device_DeviceRemovedSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "device-removed", callback: Device_DeviceRemovedSignalCallback): NodeJS.EventEmitter
    emit(sigName: "device-removed", ...args: any[]): void
    connect(sigName: "indication", callback: Device_IndicationSignalCallback): number
    on(sigName: "indication", callback: Device_IndicationSignalCallback, after?: boolean): NodeJS.EventEmitter
    once(sigName: "indication", callback: Device_IndicationSignalCallback, after?: boolean): NodeJS.EventEmitter
    off(sigName: "indication", callback: Device_IndicationSignalCallback): NodeJS.EventEmitter
    emit(sigName: "indication", ...args: any[]): void

    // Class property signals of Qmi-1.0.Qmi.Device

    connect(sigName: "notify::device-file", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-file", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-file", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-file", ...args: any[]): void
    connect(sigName: "notify::device-no-file-check", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-no-file-check", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-no-file-check", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-no-file-check", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-no-file-check", ...args: any[]): void
    connect(sigName: "notify::device-proxy-path", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-proxy-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-proxy-path", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-proxy-path", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-proxy-path", ...args: any[]): void
    connect(sigName: "notify::device-wwan-iface", callback: (...args: any[]) => void): number
    on(sigName: "notify::device-wwan-iface", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::device-wwan-iface", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::device-wwan-iface", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::device-wwan-iface", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiDevice structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class Device extends GObject.Object {

    // Own properties of Qmi-1.0.Qmi.Device

    static name: string
    static $gtype: GObject.GType<Device>

    // Constructors of Qmi-1.0.Qmi.Device

    constructor(config?: Device_ConstructProps) 
    /**
     * Finishes an operation started with qmi_device_new().
     * @constructor 
     * @param res a #GAsyncResult.
     */
    static newFinish(res: Gio.AsyncResult): Device
    _init(config?: Device_ConstructProps): void
    /**
     * Asynchronously creates a #QmiDevice object to manage `file`.
     * When the operation is finished, `callback` will be invoked. You can then call
     * qmi_device_new_finish() to get the result of the operation.
     * @param file a #GFile.
     * @param cancellable optional #GCancellable object, %NULL to ignore.
     * @param callback a #GAsyncReadyCallback to call when the initialization is finished.
     */
    static new(file: Gio.File, cancellable: Gio.Cancellable | null, callback: Gio.AsyncReadyCallback | null): void
}

interface Proxy_ConstructProps extends GObject.Object_ConstructProps {
}

interface Proxy {

    // Own properties of Qmi-1.0.Qmi.Proxy

    readonly qmiProxyNClients: number

    // Own fields of Qmi-1.0.Qmi.Proxy

    parent: GObject.Object
    priv: ProxyPrivate

    // Owm methods of Qmi-1.0.Qmi.Proxy

    /**
     * Get the number of clients currently connected to the proxy.
     */
    getNClients(): number

    // Class property signals of Qmi-1.0.Qmi.Proxy

    connect(sigName: "notify::qmi-proxy-n-clients", callback: (...args: any[]) => void): number
    on(sigName: "notify::qmi-proxy-n-clients", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: "notify::qmi-proxy-n-clients", callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: "notify::qmi-proxy-n-clients", callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: "notify::qmi-proxy-n-clients", ...args: any[]): void
    connect(sigName: string, callback: (...args: any[]) => void): number
    on(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    once(sigName: string, callback: (...args: any[]) => void, after?: boolean): NodeJS.EventEmitter
    off(sigName: string, callback: (...args: any[]) => void): NodeJS.EventEmitter
    emit(sigName: string, ...args: any[]): void
}

/**
 * The #QmiProxy structure contains private data and should only be accessed
 * using the provided API.
 * @class 
 */
class Proxy extends GObject.Object {

    // Own properties of Qmi-1.0.Qmi.Proxy

    static name: string
    static $gtype: GObject.GType<Proxy>

    // Constructors of Qmi-1.0.Qmi.Proxy

    constructor(config?: Proxy_ConstructProps) 
    /**
     * Creates a #QmiProxy listening in the default proxy addess.
     * @constructor 
     */
    constructor() 
    /**
     * Creates a #QmiProxy listening in the default proxy addess.
     * @constructor 
     */
    static new(): Proxy
    _init(config?: Proxy_ConstructProps): void
}

interface ClientClass {

    // Own fields of Qmi-1.0.Qmi.ClientClass

    processIndication: (self: Client, message: Message) => void
}

abstract class ClientClass {

    // Own properties of Qmi-1.0.Qmi.ClientClass

    static name: string
}

interface ClientDmsClass {
}

abstract class ClientDmsClass {

    // Own properties of Qmi-1.0.Qmi.ClientDmsClass

    static name: string
}

interface ClientDpmClass {
}

abstract class ClientDpmClass {

    // Own properties of Qmi-1.0.Qmi.ClientDpmClass

    static name: string
}

interface ClientDsdClass {
}

abstract class ClientDsdClass {

    // Own properties of Qmi-1.0.Qmi.ClientDsdClass

    static name: string
}

interface ClientFoxClass {
}

abstract class ClientFoxClass {

    // Own properties of Qmi-1.0.Qmi.ClientFoxClass

    static name: string
}

interface ClientGasClass {
}

abstract class ClientGasClass {

    // Own properties of Qmi-1.0.Qmi.ClientGasClass

    static name: string
}

interface ClientGmsClass {
}

abstract class ClientGmsClass {

    // Own properties of Qmi-1.0.Qmi.ClientGmsClass

    static name: string
}

interface ClientLocClass {
}

abstract class ClientLocClass {

    // Own properties of Qmi-1.0.Qmi.ClientLocClass

    static name: string
}

interface ClientNasClass {
}

abstract class ClientNasClass {

    // Own properties of Qmi-1.0.Qmi.ClientNasClass

    static name: string
}

interface ClientOmaClass {
}

abstract class ClientOmaClass {

    // Own properties of Qmi-1.0.Qmi.ClientOmaClass

    static name: string
}

interface ClientPbmClass {
}

abstract class ClientPbmClass {

    // Own properties of Qmi-1.0.Qmi.ClientPbmClass

    static name: string
}

interface ClientPdcClass {
}

abstract class ClientPdcClass {

    // Own properties of Qmi-1.0.Qmi.ClientPdcClass

    static name: string
}

interface ClientPdsClass {
}

abstract class ClientPdsClass {

    // Own properties of Qmi-1.0.Qmi.ClientPdsClass

    static name: string
}

interface ClientPrivate {
}

class ClientPrivate {

    // Own properties of Qmi-1.0.Qmi.ClientPrivate

    static name: string
}

interface ClientQosClass {
}

abstract class ClientQosClass {

    // Own properties of Qmi-1.0.Qmi.ClientQosClass

    static name: string
}

interface ClientSarClass {
}

abstract class ClientSarClass {

    // Own properties of Qmi-1.0.Qmi.ClientSarClass

    static name: string
}

interface ClientUimClass {
}

abstract class ClientUimClass {

    // Own properties of Qmi-1.0.Qmi.ClientUimClass

    static name: string
}

interface ClientVoiceClass {
}

abstract class ClientVoiceClass {

    // Own properties of Qmi-1.0.Qmi.ClientVoiceClass

    static name: string
}

interface ClientWdaClass {
}

abstract class ClientWdaClass {

    // Own properties of Qmi-1.0.Qmi.ClientWdaClass

    static name: string
}

interface ClientWdsClass {
}

abstract class ClientWdsClass {

    // Own properties of Qmi-1.0.Qmi.ClientWdsClass

    static name: string
}

interface ClientWmsClass {
}

abstract class ClientWmsClass {

    // Own properties of Qmi-1.0.Qmi.ClientWmsClass

    static name: string
}

interface DeviceClass {
}

abstract class DeviceClass {

    // Own properties of Qmi-1.0.Qmi.DeviceClass

    static name: string
}

interface DevicePrivate {
}

class DevicePrivate {

    // Own properties of Qmi-1.0.Qmi.DevicePrivate

    static name: string
}

interface DeviceServiceVersionInfo {

    // Own fields of Qmi-1.0.Qmi.DeviceServiceVersionInfo

    /**
     * a #QmiService.
     * @field 
     */
    service: Service
    /**
     * major version of the service.
     * @field 
     */
    majorVersion: number
    /**
     * minor version of the service.
     * @field 
     */
    minorVersion: number
}

/**
 * Version information for a service.
 * @record 
 */
class DeviceServiceVersionInfo {

    // Own properties of Qmi-1.0.Qmi.DeviceServiceVersionInfo

    static name: string
}

interface IndicationDmsEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationDmsEventReportOutput

    /**
     * Get the 'Activation State' field from `self`.
     */
    getActivationState(): [ /* returnType */ boolean, /* valueActivationState */ DmsActivationState ]
    /**
     * Get the 'Operating Mode' field from `self`.
     */
    getOperatingMode(): [ /* returnType */ boolean, /* valueOperatingMode */ DmsOperatingMode ]
    /**
     * Get the 'PIN1 Status' field from `self`.
     */
    getPin1Status(): [ /* returnType */ boolean, /* valuePin1StatusCurrentStatus */ DmsUimPinStatus, /* valuePin1StatusVerifyRetriesLeft */ number, /* valuePin1StatusUnblockRetriesLeft */ number ]
    /**
     * Get the 'PIN2 Status' field from `self`.
     */
    getPin2Status(): [ /* returnType */ boolean, /* valuePin2StatusCurrentStatus */ DmsUimPinStatus, /* valuePin2StatusVerifyRetriesLeft */ number, /* valuePin2StatusUnblockRetriesLeft */ number ]
    /**
     * Get the 'Power State' field from `self`.
     */
    getPowerState(): [ /* returnType */ boolean, /* valuePowerStatePowerStateFlags */ number, /* valuePowerStateBatteryLevel */ number ]
    /**
     * Get the 'PRL Init Notification' field from `self`.
     */
    getPrlInitNotification(): [ /* returnType */ boolean, /* valuePrlInitNotification */ boolean ]
    /**
     * Get the 'UIM State' field from `self`.
     */
    getUimState(): [ /* returnType */ boolean, /* valueUimState */ DmsUimState ]
    /**
     * Get the 'Wireless Disable State' field from `self`.
     */
    getWirelessDisableState(): [ /* returnType */ boolean, /* valueWirelessDisableState */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationDmsEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationDmsEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationDmsEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationDmsEventReportOutput

    static name: string
}

interface IndicationLocDeleteAssistanceDataOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocDeleteAssistanceDataOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocDeleteAssistanceDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocDeleteAssistanceDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocDeleteAssistanceDataOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocDeleteAssistanceDataOutput

    static name: string
}

interface IndicationLocEngineStateOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocEngineStateOutput

    /**
     * Get the 'Engine State' field from `self`.
     */
    getEngineState(): [ /* returnType */ boolean, /* valueEngineState */ LocEngineState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocEngineStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocEngineStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocEngineStateOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocEngineStateOutput

    static name: string
}

interface IndicationLocFixRecurrenceTypeOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocFixRecurrenceTypeOutput

    /**
     * Get the 'Fix Recurrence Type' field from `self`.
     */
    getFixRecurrenceType(): [ /* returnType */ boolean, /* valueFixRecurrenceType */ LocFixRecurrenceType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocFixRecurrenceTypeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocFixRecurrenceTypeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocFixRecurrenceTypeOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocFixRecurrenceTypeOutput

    static name: string
}

interface IndicationLocGetEngineLockOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGetEngineLockOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'Lock Type' field from `self`.
     */
    getLockType(): [ /* returnType */ boolean, /* valueLockType */ LocLockType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGetEngineLockOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGetEngineLockOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGetEngineLockOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGetEngineLockOutput

    static name: string
}

interface IndicationLocGetNmeaTypesOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGetNmeaTypesOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'NMEA Types' field from `self`.
     */
    getNmeaTypes(): [ /* returnType */ boolean, /* valueNmeaTypes */ LocNmeaType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGetNmeaTypesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGetNmeaTypesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGetNmeaTypesOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGetNmeaTypesOutput

    static name: string
}

interface IndicationLocGetOperationModeOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGetOperationModeOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'Operation Mode' field from `self`.
     */
    getOperationMode(): [ /* returnType */ boolean, /* valueOperationMode */ LocOperationMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGetOperationModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGetOperationModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGetOperationModeOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGetOperationModeOutput

    static name: string
}

interface IndicationLocGetPredictedOrbitsDataSourceOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGetPredictedOrbitsDataSourceOutput

    /**
     * Get the 'Allowed Sizes' field from `self`.
     */
    getAllowedSizes(): [ /* returnType */ boolean, /* valueAllowedSizesMaxFileSize */ number, /* valueAllowedSizesMaxPartSize */ number ]
    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'Server List' field from `self`.
     */
    getServerList(): [ /* returnType */ boolean, /* valueServerList */ string[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGetPredictedOrbitsDataSourceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGetPredictedOrbitsDataSourceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGetPredictedOrbitsDataSourceOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGetPredictedOrbitsDataSourceOutput

    static name: string
}

interface IndicationLocGetServerOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGetServerOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'IPv4' field from `self`.
     */
    getIpv4(): [ /* returnType */ boolean, /* valueIpv4Ipv4Address */ number, /* valueIpv4Ipv4Port */ number ]
    /**
     * Get the 'IPv6' field from `self`.
     */
    getIpv6(): [ /* returnType */ boolean, /* valueIpv6Ipv6Address */ number[], /* valueIpv6Ipv6Port */ number ]
    /**
     * Get the 'Server Type' field from `self`.
     */
    getServerType(): [ /* returnType */ boolean, /* valueServerType */ LocServerType ]
    /**
     * Get the 'URL' field from `self`.
     */
    getUrl(): [ /* returnType */ boolean, /* valueUrl */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGetServerOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGetServerOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGetServerOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGetServerOutput

    static name: string
}

interface IndicationLocGnssSvInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocGnssSvInfoOutput

    /**
     * Get the 'Altitude Assumed' field from `self`.
     */
    getAltitudeAssumed(): [ /* returnType */ boolean, /* valueAltitudeAssumed */ boolean ]
    /**
     * Get the 'List' field from `self`.
     * 
     * Version of qmi_indication_loc_gnss_sv_info_output_get_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getList(): [ /* returnType */ boolean, /* valueListPtr */ IndicationLocGnssSvInfoOutputListElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocGnssSvInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocGnssSvInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocGnssSvInfoOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGnssSvInfoOutput

    static name: string
}

interface IndicationLocGnssSvInfoOutputListElement {

    // Own fields of Qmi-1.0.Qmi.IndicationLocGnssSvInfoOutputListElement

    /**
     * a #QmiLocSatelliteValidInformation.
     * @field 
     */
    validInformation: LocSatelliteValidInformation
    /**
     * a #QmiLocSystem.
     * @field 
     */
    system: LocSystem
    /**
     * a #guint16.
     * @field 
     */
    gnssSatelliteId: number
    /**
     * a #QmiLocHealthStatus.
     * @field 
     */
    healthStatus: LocHealthStatus
    /**
     * a #QmiLocSatelliteStatus.
     * @field 
     */
    satelliteStatus: LocSatelliteStatus
    /**
     * a #QmiLocNavigationData.
     * @field 
     */
    navigationData: LocNavigationData
    /**
     * a #gfloat.
     * @field 
     */
    elevationDegrees: number
    /**
     * a #gfloat.
     * @field 
     */
    azimuthDegrees: number
    /**
     * a #gfloat.
     * @field 
     */
    signalToNoiseRatioBhz: number
}

/**
 * A QmiIndicationLocGnssSvInfoOutputListElement struct.
 * @record 
 */
class IndicationLocGnssSvInfoOutputListElement {

    // Own properties of Qmi-1.0.Qmi.IndicationLocGnssSvInfoOutputListElement

    static name: string
}

interface IndicationLocInjectPredictedOrbitsDataOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocInjectPredictedOrbitsDataOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'Part Number' field from `self`.
     */
    getPartNumber(): [ /* returnType */ boolean, /* valuePartNumber */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocInjectPredictedOrbitsDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocInjectPredictedOrbitsDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocInjectPredictedOrbitsDataOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocInjectPredictedOrbitsDataOutput

    static name: string
}

interface IndicationLocInjectXtraDataOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocInjectXtraDataOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Get the 'Part Number' field from `self`.
     */
    getPartNumber(): [ /* returnType */ boolean, /* valuePartNumber */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocInjectXtraDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocInjectXtraDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocInjectXtraDataOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocInjectXtraDataOutput

    static name: string
}

interface IndicationLocNmeaOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocNmeaOutput

    /**
     * Get the 'NMEA String' field from `self`.
     */
    getNmeaString(): [ /* returnType */ boolean, /* valueNmeaString */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocNmeaOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocNmeaOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocNmeaOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocNmeaOutput

    static name: string
}

interface IndicationLocPositionReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocPositionReportOutput

    /**
     * Get the 'Altitude Assumed' field from `self`.
     */
    getAltitudeAssumed(): [ /* returnType */ boolean, /* valueAltitudeAssumed */ boolean ]
    /**
     * Get the 'Altitude from Ellipsoid' field from `self`.
     */
    getAltitudeFromEllipsoid(): [ /* returnType */ boolean, /* valueAltitudeFromEllipsoid */ number ]
    /**
     * Get the 'Altitude from Sealevel' field from `self`.
     */
    getAltitudeFromSealevel(): [ /* returnType */ boolean, /* valueAltitudeFromSealevel */ number ]
    /**
     * Get the 'DOP' field from `self`.
     */
    getDop(): [ /* returnType */ boolean, /* valueDopPdop */ number, /* valueDopHdop */ number, /* valueDopVdop */ number ]
    /**
     * Get the 'GPS Date Time' field from `self`.
     */
    getGpsDateTime(): [ /* returnType */ boolean, /* valueGpsDateTimeGpsWeeks */ number, /* valueGpsDateTimeGpsTimeOfWeekMilliseconds */ number ]
    /**
     * Get the 'Heading' field from `self`.
     */
    getHeading(): [ /* returnType */ boolean, /* valueHeading */ number ]
    /**
     * Get the 'Heading Uncertainty' field from `self`.
     */
    getHeadingUncertainty(): [ /* returnType */ boolean, /* valueHeadingUncertainty */ number ]
    /**
     * Get the 'Horizontal Confidence' field from `self`.
     */
    getHorizontalConfidence(): [ /* returnType */ boolean, /* valueHorizontalConfidence */ number ]
    /**
     * Get the 'Horizontal Reliability' field from `self`.
     */
    getHorizontalReliability(): [ /* returnType */ boolean, /* valueHorizontalReliability */ LocReliability ]
    /**
     * Get the 'Horizontal Speed' field from `self`.
     */
    getHorizontalSpeed(): [ /* returnType */ boolean, /* valueHorizontalSpeed */ number ]
    /**
     * Get the 'Horizontal Uncertainty Circular' field from `self`.
     */
    getHorizontalUncertaintyCircular(): [ /* returnType */ boolean, /* valueHorizontalUncertaintyCircular */ number ]
    /**
     * Get the 'Horizontal Uncertainty Elliptical Azimuth' field from `self`.
     */
    getHorizontalUncertaintyEllipticalAzimuth(): [ /* returnType */ boolean, /* valueHorizontalUncertaintyEllipticalAzimuth */ number ]
    /**
     * Get the 'Horizontal Uncertainty Elliptical Major' field from `self`.
     */
    getHorizontalUncertaintyEllipticalMajor(): [ /* returnType */ boolean, /* valueHorizontalUncertaintyEllipticalMajor */ number ]
    /**
     * Get the 'Horizontal Uncertainty Elliptical Minor' field from `self`.
     */
    getHorizontalUncertaintyEllipticalMinor(): [ /* returnType */ boolean, /* valueHorizontalUncertaintyEllipticalMinor */ number ]
    /**
     * Get the 'Latitude' field from `self`.
     */
    getLatitude(): [ /* returnType */ boolean, /* valueLatitude */ number ]
    /**
     * Get the 'Leap Seconds' field from `self`.
     */
    getLeapSeconds(): [ /* returnType */ boolean, /* valueLeapSeconds */ number ]
    /**
     * Get the 'Longitude' field from `self`.
     */
    getLongitude(): [ /* returnType */ boolean, /* valueLongitude */ number ]
    /**
     * Get the 'Magnetic Deviation' field from `self`.
     */
    getMagneticDeviation(): [ /* returnType */ boolean, /* valueMagneticDeviation */ number ]
    /**
     * Get the 'Satellites Used' field from `self`.
     */
    getSatellitesUsed(): [ /* returnType */ boolean, /* valueSatellitesUsed */ number[] ]
    /**
     * Get the 'Sensor Data Usage' field from `self`.
     */
    getSensorDataUsage(): [ /* returnType */ boolean, /* valueSensorDataUsage */ LocSensorDataUsage ]
    /**
     * Get the 'Session Fix Count' field from `self`.
     */
    getSessionFixCount(): [ /* returnType */ boolean, /* valueSessionFixCount */ number ]
    /**
     * Get the 'Session ID' field from `self`.
     */
    getSessionId(): [ /* returnType */ boolean, /* valueSessionId */ number ]
    /**
     * Get the 'Session Status' field from `self`.
     */
    getSessionStatus(): [ /* returnType */ boolean, /* valueSessionStatus */ LocSessionStatus ]
    /**
     * Get the 'Speed Uncertainty' field from `self`.
     */
    getSpeedUncertainty(): [ /* returnType */ boolean, /* valueSpeedUncertainty */ number ]
    /**
     * Get the 'Technology Used' field from `self`.
     */
    getTechnologyUsed(): [ /* returnType */ boolean, /* valueTechnologyUsed */ LocTechnologyUsed ]
    /**
     * Get the 'Time Source' field from `self`.
     */
    getTimeSource(): [ /* returnType */ boolean, /* valueTimeSource */ LocTimeSource ]
    /**
     * Get the 'Time Uncertainty' field from `self`.
     */
    getTimeUncertainty(): [ /* returnType */ boolean, /* valueTimeUncertainty */ number ]
    /**
     * Get the 'UTC Timestamp' field from `self`.
     */
    getUtcTimestamp(): [ /* returnType */ boolean, /* valueUtcTimestamp */ number ]
    /**
     * Get the 'Vertical Confidence' field from `self`.
     */
    getVerticalConfidence(): [ /* returnType */ boolean, /* valueVerticalConfidence */ number ]
    /**
     * Get the 'Vertical Reliability' field from `self`.
     */
    getVerticalReliability(): [ /* returnType */ boolean, /* valueVerticalReliability */ number ]
    /**
     * Get the 'Vertical Speed' field from `self`.
     */
    getVerticalSpeed(): [ /* returnType */ boolean, /* valueVerticalSpeed */ number ]
    /**
     * Get the 'Vertical Uncertainty' field from `self`.
     */
    getVerticalUncertainty(): [ /* returnType */ boolean, /* valueVerticalUncertainty */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocPositionReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocPositionReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocPositionReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocPositionReportOutput

    static name: string
}

interface IndicationLocSetEngineLockOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocSetEngineLockOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocSetEngineLockOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocSetEngineLockOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocSetEngineLockOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocSetEngineLockOutput

    static name: string
}

interface IndicationLocSetNmeaTypesOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocSetNmeaTypesOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocSetNmeaTypesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocSetNmeaTypesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocSetNmeaTypesOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocSetNmeaTypesOutput

    static name: string
}

interface IndicationLocSetOperationModeOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocSetOperationModeOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocSetOperationModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocSetOperationModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocSetOperationModeOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocSetOperationModeOutput

    static name: string
}

interface IndicationLocSetServerOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationLocSetServerOutput

    /**
     * Get the 'Indication Status' field from `self`.
     */
    getIndicationStatus(): [ /* returnType */ boolean, /* valueIndicationStatus */ LocIndicationStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationLocSetServerOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationLocSetServerOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationLocSetServerOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationLocSetServerOutput

    static name: string
}

interface IndicationNasEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasEventReportOutput

    /**
     * Get the 'ECIO' field from `self`.
     */
    getEcio(): [ /* returnType */ boolean, /* valueEcioEcio */ number, /* valueEcioRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'Error Rate' field from `self`.
     */
    getErrorRate(): [ /* returnType */ boolean, /* valueErrorRateRate */ number, /* valueErrorRateRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'IO' field from `self`.
     */
    getIo(): [ /* returnType */ boolean, /* valueIo */ number ]
    /**
     * Get the 'LTE RSRP' field from `self`.
     */
    getLteRsrp(): [ /* returnType */ boolean, /* valueLteRsrp */ number ]
    /**
     * Get the 'LTE SNR' field from `self`.
     */
    getLteSnr(): [ /* returnType */ boolean, /* valueLteSnr */ number ]
    /**
     * Get the 'Registration Reject Reason' field from `self`.
     */
    getRegistrationRejectReason(): [ /* returnType */ boolean, /* valueRegistrationRejectReasonServiceDomain */ NasNetworkServiceDomain, /* valueRegistrationRejectReasonRejectCause */ number ]
    /**
     * Get the 'RF Band Information' field from `self`.
     * 
     * Version of qmi_indication_nas_event_report_output_get_rf_band_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRfBandInformation(): [ /* returnType */ boolean, /* valueRfBandInformationPtr */ IndicationNasEventReportOutputRfBandInformationElement[] ]
    /**
     * Get the 'RSRQ' field from `self`.
     */
    getRsrq(): [ /* returnType */ boolean, /* valueRsrqRsrq */ number, /* valueRsrqRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'RSSI' field from `self`.
     */
    getRssi(): [ /* returnType */ boolean, /* valueRssiRssi */ number, /* valueRssiRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'Signal Strength' field from `self`.
     */
    getSignalStrength(): [ /* returnType */ boolean, /* valueSignalStrengthStrength */ number, /* valueSignalStrengthRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'SINR' field from `self`.
     */
    getSinr(): [ /* returnType */ boolean, /* valueSinr */ NasEvdoSinrLevel ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasEventReportOutput

    static name: string
}

interface IndicationNasEventReportOutputRfBandInformationElement {

    // Own fields of Qmi-1.0.Qmi.IndicationNasEventReportOutputRfBandInformationElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasActiveBand.
     * @field 
     */
    activeBandClass: NasActiveBand
    /**
     * a #guint16.
     * @field 
     */
    activeChannel: number
}

/**
 * A QmiIndicationNasEventReportOutputRfBandInformationElement struct.
 * @record 
 */
class IndicationNasEventReportOutputRfBandInformationElement {

    // Own properties of Qmi-1.0.Qmi.IndicationNasEventReportOutputRfBandInformationElement

    static name: string
}

interface IndicationNasNetworkRejectOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasNetworkRejectOutput

    /**
     * Get the 'Closed Subscriber Group' field from `self`.
     */
    getClosedSubscriberGroup(): [ /* returnType */ boolean, /* valueClosedSubscriberGroup */ number ]
    /**
     * Get the 'PLMN' field from `self`.
     */
    getPlmn(): [ /* returnType */ boolean, /* valuePlmnMcc */ number, /* valuePlmnMnc */ number, /* valuePlmnIncludesPcsDigit */ boolean ]
    /**
     * Get the 'Radio Interface' field from `self`.
     */
    getRadioInterface(): [ /* returnType */ boolean, /* valueRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'Reject Cause' field from `self`.
     */
    getRejectCause(): [ /* returnType */ boolean, /* valueRejectCause */ NasRejectCause ]
    /**
     * Get the 'Service Domain' field from `self`.
     */
    getServiceDomain(): [ /* returnType */ boolean, /* valueServiceDomain */ NasNetworkServiceDomain ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasNetworkRejectOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasNetworkRejectOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasNetworkRejectOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasNetworkRejectOutput

    static name: string
}

interface IndicationNasNetworkTimeOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasNetworkTimeOutput

    /**
     * Get the 'Daylight Savings Adjustment' field from `self`.
     */
    getDaylightSavingsAdjustment(): [ /* returnType */ boolean, /* valueDaylightSavingsAdjustment */ NasDaylightSavingsAdjustment ]
    /**
     * Get the 'Radio Interface' field from `self`.
     */
    getRadioInterface(): [ /* returnType */ boolean, /* valueRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'Timezone Offset' field from `self`.
     */
    getTimezoneOffset(): [ /* returnType */ boolean, /* valueTimezoneOffset */ number ]
    /**
     * Get the 'Universal Time' field from `self`.
     */
    getUniversalTime(): [ /* returnType */ boolean, /* valueUniversalTimeYear */ number, /* valueUniversalTimeMonth */ number, /* valueUniversalTimeDay */ number, /* valueUniversalTimeHour */ number, /* valueUniversalTimeMinute */ number, /* valueUniversalTimeSecond */ number, /* valueUniversalTimeDayOfWeek */ NasDayOfWeek ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasNetworkTimeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasNetworkTimeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasNetworkTimeOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasNetworkTimeOutput

    static name: string
}

interface IndicationNasOperatorNameOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasOperatorNameOutput

    /**
     * Get the 'NITZ Information' field from `self`.
     */
    getNitzInformation(): [ /* returnType */ boolean, /* valueNitzInformationNameEncoding */ NasPlmnEncodingScheme, /* valueNitzInformationShortCountryInitials */ NasPlmnNameCountryInitials, /* valueNitzInformationLongNameSpareBits */ NasPlmnNameSpareBits, /* valueNitzInformationShortNameSpareBits */ NasPlmnNameSpareBits, /* valueNitzInformationLongName */ Uint8Array, /* valueNitzInformationShortName */ Uint8Array ]
    /**
     * Get the 'Operator PLMN List' field from `self`.
     * 
     * Version of qmi_indication_nas_operator_name_output_get_operator_plmn_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getOperatorPlmnList(): [ /* returnType */ boolean, /* valueOperatorPlmnListPtr */ IndicationNasOperatorNameOutputOperatorPlmnListElement[] ]
    /**
     * Get the 'Operator PLMN Name' field from `self`.
     * 
     * Version of qmi_indication_nas_operator_name_output_get_operator_plmn_name() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getOperatorPlmnName(): [ /* returnType */ boolean, /* valueOperatorPlmnNamePtr */ IndicationNasOperatorNameOutputOperatorPlmnNameElement[] ]
    /**
     * Get the 'Operator String Name' field from `self`.
     */
    getOperatorStringName(): [ /* returnType */ boolean, /* valueOperatorStringName */ string ]
    /**
     * Get the 'Service Provider Name' field from `self`.
     */
    getServiceProviderName(): [ /* returnType */ boolean, /* valueServiceProviderNameNameDisplayCondition */ NasNetworkNameDisplayCondition, /* valueServiceProviderNameName */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasOperatorNameOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasOperatorNameOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasOperatorNameOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasOperatorNameOutput

    static name: string
}

interface IndicationNasOperatorNameOutputOperatorPlmnListElement {

    // Own fields of Qmi-1.0.Qmi.IndicationNasOperatorNameOutputOperatorPlmnListElement

    /**
     * a string of exactly 3 characters.
     * @field 
     */
    mcc: string
    /**
     * a string of exactly 3 characters.
     * @field 
     */
    mnc: string
    /**
     * a #guint16.
     * @field 
     */
    lac1: number
    /**
     * a #guint16.
     * @field 
     */
    lac2: number
    /**
     * a #guint8.
     * @field 
     */
    plmnNameRecordIdentifier: number
}

/**
 * A QmiIndicationNasOperatorNameOutputOperatorPlmnListElement struct.
 * @record 
 */
class IndicationNasOperatorNameOutputOperatorPlmnListElement {

    // Own properties of Qmi-1.0.Qmi.IndicationNasOperatorNameOutputOperatorPlmnListElement

    static name: string
}

interface IndicationNasOperatorNameOutputOperatorPlmnNameElement {

    // Own fields of Qmi-1.0.Qmi.IndicationNasOperatorNameOutputOperatorPlmnNameElement

    /**
     * a #QmiNasPlmnEncodingScheme.
     * @field 
     */
    nameEncoding: NasPlmnEncodingScheme
    /**
     * a #QmiNasPlmnNameCountryInitials.
     * @field 
     */
    shortCountryInitials: NasPlmnNameCountryInitials
    /**
     * a #QmiNasPlmnNameSpareBits.
     * @field 
     */
    longNameSpareBits: NasPlmnNameSpareBits
    /**
     * a #QmiNasPlmnNameSpareBits.
     * @field 
     */
    shortNameSpareBits: NasPlmnNameSpareBits
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    longName: object[]
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    shortName: object[]
}

/**
 * A QmiIndicationNasOperatorNameOutputOperatorPlmnNameElement struct.
 * @record 
 */
class IndicationNasOperatorNameOutputOperatorPlmnNameElement {

    // Own properties of Qmi-1.0.Qmi.IndicationNasOperatorNameOutputOperatorPlmnNameElement

    static name: string
}

interface IndicationNasServingSystemOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasServingSystemOutput

    /**
     * Get the 'Call Barring Status' field from `self`.
     */
    getCallBarringStatus(): [ /* returnType */ boolean, /* valueCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'CDMA Base Station Info' field from `self`.
     */
    getCdmaBaseStationInfo(): [ /* returnType */ boolean, /* valueCdmaBaseStationInfoBaseStationId */ number, /* valueCdmaBaseStationInfoBaseStationLatitude */ number, /* valueCdmaBaseStationInfoBaseStationLongitude */ number ]
    /**
     * Get the 'CDMA P Rev' field from `self`.
     */
    getCdmaPRev(): [ /* returnType */ boolean, /* valueCdmaPRev */ number ]
    /**
     * Get the 'CDMA System ID' field from `self`.
     */
    getCdmaSystemId(): [ /* returnType */ boolean, /* valueCdmaSystemIdSid */ number, /* valueCdmaSystemIdNid */ number ]
    /**
     * Get the 'CDMA System Info' field from `self`.
     */
    getCdmaSystemInfo(): [ /* returnType */ boolean, /* valueCdmaSystemInfoMcc */ number, /* valueCdmaSystemInfoImsi1112 */ number ]
    /**
     * Get the 'CID 3GPP' field from `self`.
     */
    getCid3gpp(): [ /* returnType */ boolean, /* valueCid3gpp */ number ]
    /**
     * Get the 'Concurrent Service Info 3GPP2' field from `self`.
     */
    getConcurrentServiceInfo3gpp2(): [ /* returnType */ boolean, /* valueConcurrentServiceInfo3gpp2 */ boolean ]
    /**
     * Get the 'Current PLMN' field from `self`.
     */
    getCurrentPlmn(): [ /* returnType */ boolean, /* valueCurrentPlmnMcc */ number, /* valueCurrentPlmnMnc */ number, /* valueCurrentPlmnDescription */ string ]
    /**
     * Get the 'Data Service Capability' field from `self`.
     */
    getDataServiceCapability(): [ /* returnType */ boolean, /* valueDataServiceCapability */ NasDataCapability[] ]
    /**
     * Get the 'Daylight Saving Time Adjustment 3GPP' field from `self`.
     */
    getDaylightSavingTimeAdjustment3gpp(): [ /* returnType */ boolean, /* valueDaylightSavingTimeAdjustment3gpp */ number ]
    /**
     * Get the 'Default Roaming Indicator' field from `self`.
     */
    getDefaultRoamingIndicator(): [ /* returnType */ boolean, /* valueDefaultRoamingIndicator */ NasRoamingIndicatorStatus ]
    /**
     * Get the 'Detailed Service Status' field from `self`.
     */
    getDetailedServiceStatus(): [ /* returnType */ boolean, /* valueDetailedServiceStatusStatus */ NasServiceStatus, /* valueDetailedServiceStatusCapability */ NasNetworkServiceDomain, /* valueDetailedServiceStatusHdrStatus */ NasServiceStatus, /* valueDetailedServiceStatusHdrHybrid */ boolean, /* valueDetailedServiceStatusForbidden */ boolean ]
    /**
     * Get the 'DTM Support' field from `self`.
     */
    getDtmSupport(): [ /* returnType */ boolean, /* valueDtmSupport */ boolean ]
    /**
     * Get the 'HDR Personality' field from `self`.
     */
    getHdrPersonality(): [ /* returnType */ boolean, /* valueHdrPersonality */ NasHdrPersonality ]
    /**
     * Get the 'LAC 3GPP' field from `self`.
     */
    getLac3gpp(): [ /* returnType */ boolean, /* valueLac3gpp */ number ]
    /**
     * Get the 'LTE TAC' field from `self`.
     */
    getLteTac(): [ /* returnType */ boolean, /* valueLteTac */ number ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatusMcc */ number, /* valueMncPcsDigitIncludeStatusMnc */ number, /* valueMncPcsDigitIncludeStatusIncludesPcsDigit */ boolean ]
    /**
     * Get the 'Network Name Source' field from `self`.
     */
    getNetworkNameSource(): [ /* returnType */ boolean, /* valueNetworkNameSource */ NasNetworkNameSource ]
    /**
     * Get the 'PLMN Name Flag 3GPP' field from `self`.
     */
    getPlmnNameFlag3gpp(): [ /* returnType */ boolean, /* valuePlmnNameFlag3gpp */ boolean ]
    /**
     * Get the 'PLMN Not Changed Indication' field from `self`.
     */
    getPlmnNotChangedIndication(): [ /* returnType */ boolean, /* valuePlmnNotChangedIndication */ boolean ]
    /**
     * Get the 'PRL Indicator 3GPP2' field from `self`.
     */
    getPrlIndicator3gpp2(): [ /* returnType */ boolean, /* valuePrlIndicator3gpp2 */ boolean ]
    /**
     * Get the 'Roaming Indicator' field from `self`.
     */
    getRoamingIndicator(): [ /* returnType */ boolean, /* valueRoamingIndicator */ NasRoamingIndicatorStatus ]
    /**
     * Get the 'Roaming Indicator List' field from `self`.
     * 
     * Version of qmi_indication_nas_serving_system_output_get_roaming_indicator_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRoamingIndicatorList(): [ /* returnType */ boolean, /* valueRoamingIndicatorListPtr */ IndicationNasServingSystemOutputRoamingIndicatorListElement[] ]
    /**
     * Get the 'Serving System' field from `self`.
     */
    getServingSystem(): [ /* returnType */ boolean, /* valueServingSystemRegistrationState */ NasRegistrationState, /* valueServingSystemCsAttachState */ NasAttachState, /* valueServingSystemPsAttachState */ NasAttachState, /* valueServingSystemSelectedNetwork */ NasNetworkType, /* valueServingSystemRadioInterfaces */ NasRadioInterface[] ]
    /**
     * Get the 'Time Zone 3GPP' field from `self`.
     */
    getTimeZone3gpp(): [ /* returnType */ boolean, /* valueTimeZone3gpp */ number ]
    /**
     * Get the 'Time Zone 3GPP2' field from `self`.
     */
    getTimeZone3gpp2(): [ /* returnType */ boolean, /* valueTimeZone3gpp2LeapSeconds */ number, /* valueTimeZone3gpp2LocalTimeOffset */ number, /* valueTimeZone3gpp2DaylightSavingTime */ boolean ]
    /**
     * Get the 'UMTS Primary Scrambling Code' field from `self`.
     */
    getUmtsPrimaryScramblingCode(): [ /* returnType */ boolean, /* valueUmtsPrimaryScramblingCode */ number ]
    /**
     * Get the 'Universal Time and Local Time Zone 3GPP' field from `self`.
     */
    getUniversalTimeAndLocalTimeZone3gpp(): [ /* returnType */ boolean, /* valueUniversalTimeAndLocalTimeZone3gppYear */ number, /* valueUniversalTimeAndLocalTimeZone3gppMonth */ number, /* valueUniversalTimeAndLocalTimeZone3gppDay */ number, /* valueUniversalTimeAndLocalTimeZone3gppHour */ number, /* valueUniversalTimeAndLocalTimeZone3gppMinute */ number, /* valueUniversalTimeAndLocalTimeZone3gppSecond */ number, /* valueUniversalTimeAndLocalTimeZone3gppTimeZone */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasServingSystemOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasServingSystemOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasServingSystemOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasServingSystemOutput

    static name: string
}

interface IndicationNasServingSystemOutputRoamingIndicatorListElement {

    // Own fields of Qmi-1.0.Qmi.IndicationNasServingSystemOutputRoamingIndicatorListElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasRoamingIndicatorStatus.
     * @field 
     */
    roamingIndicator: NasRoamingIndicatorStatus
}

/**
 * A QmiIndicationNasServingSystemOutputRoamingIndicatorListElement struct.
 * @record 
 */
class IndicationNasServingSystemOutputRoamingIndicatorListElement {

    // Own properties of Qmi-1.0.Qmi.IndicationNasServingSystemOutputRoamingIndicatorListElement

    static name: string
}

interface IndicationNasSignalInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasSignalInfoOutput

    /**
     * Get the '5G Signal Strength' field from `self`.
     */
    get5gSignalStrength(): [ /* returnType */ boolean, /* value5gSignalStrengthRsrp */ number, /* value5gSignalStrengthSnr */ number ]
    /**
     * Get the '5G Signal Strength Extended' field from `self`.
     */
    get5gSignalStrengthExtended(): [ /* returnType */ boolean, /* value5gSignalStrengthExtended */ number ]
    /**
     * Get the 'CDMA Signal Strength' field from `self`.
     */
    getCdmaSignalStrength(): [ /* returnType */ boolean, /* valueCdmaSignalStrengthRssi */ number, /* valueCdmaSignalStrengthEcio */ number ]
    /**
     * Get the 'GSM Signal Strength' field from `self`.
     */
    getGsmSignalStrength(): [ /* returnType */ boolean, /* valueGsmSignalStrength */ number ]
    /**
     * Get the 'HDR Signal Strength' field from `self`.
     */
    getHdrSignalStrength(): [ /* returnType */ boolean, /* valueHdrSignalStrengthRssi */ number, /* valueHdrSignalStrengthEcio */ number, /* valueHdrSignalStrengthSinr */ NasEvdoSinrLevel, /* valueHdrSignalStrengthIo */ number ]
    /**
     * Get the 'LTE Signal Strength' field from `self`.
     */
    getLteSignalStrength(): [ /* returnType */ boolean, /* valueLteSignalStrengthRssi */ number, /* valueLteSignalStrengthRsrq */ number, /* valueLteSignalStrengthRsrp */ number, /* valueLteSignalStrengthSnr */ number ]
    /**
     * Get the 'TDMA Signal Strength' field from `self`.
     */
    getTdmaSignalStrength(): [ /* returnType */ boolean, /* valueTdmaSignalStrength */ number ]
    /**
     * Get the 'WCDMA Signal Strength' field from `self`.
     */
    getWcdmaSignalStrength(): [ /* returnType */ boolean, /* valueWcdmaSignalStrengthRssi */ number, /* valueWcdmaSignalStrengthEcio */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasSignalInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasSignalInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasSignalInfoOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasSignalInfoOutput

    static name: string
}

interface IndicationNasSystemInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationNasSystemInfoOutput

    /**
     * Get the 'Additional CDMA System Info' field from `self`.
     */
    getAdditionalCdmaSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalCdmaSystemInfoGeoSystemIndex */ number, /* valueAdditionalCdmaSystemInfoRegistrationPeriod */ number ]
    /**
     * Get the 'Additional GSM System Info' field from `self`.
     */
    getAdditionalGsmSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalGsmSystemInfoGeoSystemIndex */ number, /* valueAdditionalGsmSystemInfoCellBroadcastSupport */ NasCellBroadcastCapability ]
    /**
     * Get the 'Additional HDR System Info' field from `self`.
     */
    getAdditionalHdrSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalHdrSystemInfoGeoSystemIndex */ number ]
    /**
     * Get the 'Additional LTE System Info' field from `self`.
     */
    getAdditionalLteSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalLteSystemInfoGeoSystemIndex */ number ]
    /**
     * Get the 'Additional WCDMA System Info' field from `self`.
     */
    getAdditionalWcdmaSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalWcdmaSystemInfoGeoSystemIndex */ number, /* valueAdditionalWcdmaSystemInfoCellBroadcastSupport */ NasCellBroadcastCapability ]
    /**
     * Get the 'CDMA Service Status' field from `self`.
     */
    getCdmaServiceStatus(): [ /* returnType */ boolean, /* valueCdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueCdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'CDMA System Info' field from `self`.
     */
    getCdmaSystemInfo(): [ /* returnType */ boolean, /* valueCdmaSystemInfoDomainValid */ boolean, /* valueCdmaSystemInfoDomain */ NasNetworkServiceDomain, /* valueCdmaSystemInfoServiceCapabilityValid */ boolean, /* valueCdmaSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueCdmaSystemInfoRoamingStatusValid */ boolean, /* valueCdmaSystemInfoRoamingStatus */ NasRoamingStatus, /* valueCdmaSystemInfoForbiddenValid */ boolean, /* valueCdmaSystemInfoForbidden */ boolean, /* valueCdmaSystemInfoPrlMatchValid */ boolean, /* valueCdmaSystemInfoPrlMatch */ boolean, /* valueCdmaSystemInfoPRevValid */ boolean, /* valueCdmaSystemInfoPRev */ number, /* valueCdmaSystemInfoBaseStationPRevValid */ boolean, /* valueCdmaSystemInfoBaseStationPRev */ number, /* valueCdmaSystemInfoConcurrentServiceSupportValid */ boolean, /* valueCdmaSystemInfoConcurrentServiceSupport */ boolean, /* valueCdmaSystemInfoCdmaSystemIdValid */ boolean, /* valueCdmaSystemInfoSid */ number, /* valueCdmaSystemInfoNid */ number, /* valueCdmaSystemInfoBaseStationInfoValid */ boolean, /* valueCdmaSystemInfoBaseStationId */ number, /* valueCdmaSystemInfoBaseStationLatitude */ number, /* valueCdmaSystemInfoBaseStationLongitude */ number, /* valueCdmaSystemInfoPacketZoneValid */ boolean, /* valueCdmaSystemInfoPacketZone */ number, /* valueCdmaSystemInfoNetworkIdValid */ boolean, /* valueCdmaSystemInfoMcc */ string, /* valueCdmaSystemInfoMnc */ string ]
    /**
     * Get the 'DCNR restriction Info' field from `self`.
     */
    getDcnrRestrictionInfo(): [ /* returnType */ boolean, /* valueDcnrRestrictionInfo */ boolean ]
    /**
     * Get the 'EUTRA with NR5G availability' field from `self`.
     */
    getEutraWithNr5gAvailability(): [ /* returnType */ boolean, /* valueEutraWithNr5gAvailability */ boolean ]
    /**
     * Get the 'GSM Call Barring Status' field from `self`.
     */
    getGsmCallBarringStatus(): [ /* returnType */ boolean, /* valueGsmCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueGsmCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'GSM Cipher Domain' field from `self`.
     */
    getGsmCipherDomain(): [ /* returnType */ boolean, /* valueGsmCipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'GSM Service Status' field from `self`.
     */
    getGsmServiceStatus(): [ /* returnType */ boolean, /* valueGsmServiceStatusServiceStatus */ NasServiceStatus, /* valueGsmServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueGsmServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'GSM System Info v2' field from `self`.
     */
    getGsmSystemInfoV2(): [ /* returnType */ boolean, /* valueGsmSystemInfoV2DomainValid */ boolean, /* valueGsmSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2ServiceCapabilityValid */ boolean, /* valueGsmSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2RoamingStatusValid */ boolean, /* valueGsmSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueGsmSystemInfoV2ForbiddenValid */ boolean, /* valueGsmSystemInfoV2Forbidden */ boolean, /* valueGsmSystemInfoV2LacValid */ boolean, /* valueGsmSystemInfoV2Lac */ number, /* valueGsmSystemInfoV2CidValid */ boolean, /* valueGsmSystemInfoV2Cid */ number, /* valueGsmSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueGsmSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueGsmSystemInfoV2NetworkIdValid */ boolean, /* valueGsmSystemInfoV2Mcc */ string, /* valueGsmSystemInfoV2Mnc */ string, /* valueGsmSystemInfoV2EgprsSupportValid */ boolean, /* valueGsmSystemInfoV2EgprsSupport */ boolean, /* valueGsmSystemInfoV2DtmSupportValid */ boolean, /* valueGsmSystemInfoV2DtmSupport */ boolean ]
    /**
     * Get the 'HDR Service Status' field from `self`.
     */
    getHdrServiceStatus(): [ /* returnType */ boolean, /* valueHdrServiceStatusServiceStatus */ NasServiceStatus, /* valueHdrServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'HDR System Info' field from `self`.
     */
    getHdrSystemInfo(): [ /* returnType */ boolean, /* valueHdrSystemInfoDomainValid */ boolean, /* valueHdrSystemInfoDomain */ NasNetworkServiceDomain, /* valueHdrSystemInfoServiceCapabilityValid */ boolean, /* valueHdrSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueHdrSystemInfoRoamingStatusValid */ boolean, /* valueHdrSystemInfoRoamingStatus */ NasRoamingStatus, /* valueHdrSystemInfoForbiddenValid */ boolean, /* valueHdrSystemInfoForbidden */ boolean, /* valueHdrSystemInfoPrlMatchValid */ boolean, /* valueHdrSystemInfoPrlMatch */ boolean, /* valueHdrSystemInfoPersonalityValid */ boolean, /* valueHdrSystemInfoPersonality */ NasHdrPersonality, /* valueHdrSystemInfoProtocolRevisionValid */ boolean, /* valueHdrSystemInfoProtocolRevision */ NasHdrProtocolRevision, /* valueHdrSystemInfoIs856SystemIdValid */ boolean, /* valueHdrSystemInfoIs856SystemId */ string ]
    /**
     * Get the 'LTE eMBMS Coverage Info Support' field from `self`.
     */
    getLteEmbmsCoverageInfoSupport(): [ /* returnType */ boolean, /* valueLteEmbmsCoverageInfoSupport */ boolean ]
    /**
     * Get the 'LTE Service Status' field from `self`.
     */
    getLteServiceStatus(): [ /* returnType */ boolean, /* valueLteServiceStatusServiceStatus */ NasServiceStatus, /* valueLteServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueLteServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'LTE System Info v2' field from `self`.
     */
    getLteSystemInfoV2(): [ /* returnType */ boolean, /* valueLteSystemInfoV2DomainValid */ boolean, /* valueLteSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueLteSystemInfoV2ServiceCapabilityValid */ boolean, /* valueLteSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueLteSystemInfoV2RoamingStatusValid */ boolean, /* valueLteSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueLteSystemInfoV2ForbiddenValid */ boolean, /* valueLteSystemInfoV2Forbidden */ boolean, /* valueLteSystemInfoV2LacValid */ boolean, /* valueLteSystemInfoV2Lac */ number, /* valueLteSystemInfoV2CidValid */ boolean, /* valueLteSystemInfoV2Cid */ number, /* valueLteSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueLteSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueLteSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueLteSystemInfoV2NetworkIdValid */ boolean, /* valueLteSystemInfoV2Mcc */ string, /* valueLteSystemInfoV2Mnc */ string, /* valueLteSystemInfoV2TacValid */ boolean, /* valueLteSystemInfoV2Tac */ number ]
    /**
     * Get the 'LTE Voice Support' field from `self`.
     */
    getLteVoiceSupport(): [ /* returnType */ boolean, /* valueLteVoiceSupport */ boolean ]
    /**
     * Get the 'NR5G Service Status Info' field from `self`.
     */
    getNr5gServiceStatusInfo(): [ /* returnType */ boolean, /* valueNr5gServiceStatusInfoServiceStatus */ NasServiceStatus, /* valueNr5gServiceStatusInfoTrueServiceStatus */ NasServiceStatus, /* valueNr5gServiceStatusInfoPreferredDataPath */ boolean ]
    /**
     * Get the 'NR5G System Info' field from `self`.
     */
    getNr5gSystemInfo(): [ /* returnType */ boolean, /* valueNr5gSystemInfoDomainValid */ boolean, /* valueNr5gSystemInfoDomain */ NasNetworkServiceDomain, /* valueNr5gSystemInfoServiceCapabilityValid */ boolean, /* valueNr5gSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueNr5gSystemInfoRoamingStatusValid */ boolean, /* valueNr5gSystemInfoRoamingStatus */ NasRoamingStatus, /* valueNr5gSystemInfoForbiddenValid */ boolean, /* valueNr5gSystemInfoForbidden */ boolean, /* valueNr5gSystemInfoLacValid */ boolean, /* valueNr5gSystemInfoLac */ number, /* valueNr5gSystemInfoCidValid */ boolean, /* valueNr5gSystemInfoCid */ number, /* valueNr5gSystemInfoRegistrationRejectInfoValid */ boolean, /* valueNr5gSystemInfoRegistrationRejectDomain */ NasNetworkServiceDomain, /* valueNr5gSystemInfoRegistrationRejectCause */ number, /* valueNr5gSystemInfoNetworkIdValid */ boolean, /* valueNr5gSystemInfoMcc */ string, /* valueNr5gSystemInfoMnc */ string, /* valueNr5gSystemInfoTacValid */ boolean, /* valueNr5gSystemInfoTac */ number ]
    /**
     * Get the 'NR5G Tracking Area Code' field from `self`.
     */
    getNr5gTrackingAreaCode(): [ /* returnType */ boolean, /* valueNr5gTrackingAreaCode */ Uint8Array ]
    /**
     * Get the 'PLMN Not Changed Indication' field from `self`.
     */
    getPlmnNotChangedIndication(): [ /* returnType */ boolean, /* valuePlmnNotChangedIndication */ boolean ]
    /**
     * Get the 'SIM Reject Info' field from `self`.
     */
    getSimRejectInfo(): [ /* returnType */ boolean, /* valueSimRejectInfo */ NasSimRejectState ]
    /**
     * Get the 'TD SCDMA Service Status' field from `self`.
     */
    getTdScdmaServiceStatus(): [ /* returnType */ boolean, /* valueTdScdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueTdScdmaServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueTdScdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'TD SCMA System Info v2' field from `self`.
     */
    getTdScmaSystemInfoV2(): [ /* returnType */ boolean, /* valueTdScmaSystemInfoV2DomainValid */ boolean, /* valueTdScmaSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueTdScmaSystemInfoV2ServiceCapabilityValid */ boolean, /* valueTdScmaSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueTdScmaSystemInfoV2RoamingStatusValid */ boolean, /* valueTdScmaSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueTdScmaSystemInfoV2ForbiddenValid */ boolean, /* valueTdScmaSystemInfoV2Forbidden */ boolean, /* valueTdScmaSystemInfoV2LacValid */ boolean, /* valueTdScmaSystemInfoV2Lac */ number, /* valueTdScmaSystemInfoV2CidValid */ boolean, /* valueTdScmaSystemInfoV2Cid */ number, /* valueTdScmaSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueTdScmaSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueTdScmaSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueTdScmaSystemInfoV2NetworkIdValid */ boolean, /* valueTdScmaSystemInfoV2Mcc */ string, /* valueTdScmaSystemInfoV2Mnc */ string, /* valueTdScmaSystemInfoV2HsCallStatusValid */ boolean, /* valueTdScmaSystemInfoV2HsCallStatus */ NasWcdmaHsService, /* valueTdScmaSystemInfoV2HsServiceValid */ boolean, /* valueTdScmaSystemInfoV2HsService */ NasWcdmaHsService, /* valueTdScmaSystemInfoV2CellParameterIdValid */ boolean, /* valueTdScmaSystemInfoV2CellParameterId */ number, /* valueTdScmaSystemInfoV2CellBroadcastSupportValid */ boolean, /* valueTdScmaSystemInfoV2CellBroadcastSupport */ NasCellBroadcastCapability, /* valueTdScmaSystemInfoV2CsCallBarringStatusValid */ boolean, /* valueTdScmaSystemInfoV2CsCallBarringStatus */ NasCallBarringStatus, /* valueTdScmaSystemInfoV2PsCallBarringStatusValid */ boolean, /* valueTdScmaSystemInfoV2PsCallBarringStatus */ NasCallBarringStatus, /* valueTdScmaSystemInfoV2CipherDomainValid */ boolean, /* valueTdScmaSystemInfoV2CipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'WCDMA Call Barring Status' field from `self`.
     */
    getWcdmaCallBarringStatus(): [ /* returnType */ boolean, /* valueWcdmaCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueWcdmaCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'WCDMA Cipher Domain' field from `self`.
     */
    getWcdmaCipherDomain(): [ /* returnType */ boolean, /* valueWcdmaCipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'WCDMA Service Status' field from `self`.
     */
    getWcdmaServiceStatus(): [ /* returnType */ boolean, /* valueWcdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueWcdmaServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueWcdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'WCDMA System Info v2' field from `self`.
     */
    getWcdmaSystemInfoV2(): [ /* returnType */ boolean, /* valueWcdmaSystemInfoV2DomainValid */ boolean, /* valueWcdmaSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2ServiceCapabilityValid */ boolean, /* valueWcdmaSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2RoamingStatusValid */ boolean, /* valueWcdmaSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueWcdmaSystemInfoV2ForbiddenValid */ boolean, /* valueWcdmaSystemInfoV2Forbidden */ boolean, /* valueWcdmaSystemInfoV2LacValid */ boolean, /* valueWcdmaSystemInfoV2Lac */ number, /* valueWcdmaSystemInfoV2CidValid */ boolean, /* valueWcdmaSystemInfoV2Cid */ number, /* valueWcdmaSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueWcdmaSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueWcdmaSystemInfoV2NetworkIdValid */ boolean, /* valueWcdmaSystemInfoV2Mcc */ string, /* valueWcdmaSystemInfoV2Mnc */ string, /* valueWcdmaSystemInfoV2HsCallStatusValid */ boolean, /* valueWcdmaSystemInfoV2HsCallStatus */ NasWcdmaHsService, /* valueWcdmaSystemInfoV2HsServiceValid */ boolean, /* valueWcdmaSystemInfoV2HsService */ NasWcdmaHsService, /* valueWcdmaSystemInfoV2PrimaryScramblingCodeValid */ boolean, /* valueWcdmaSystemInfoV2PrimaryScramblingCode */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationNasSystemInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationNasSystemInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationNasSystemInfoOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationNasSystemInfoOutput

    static name: string
}

interface IndicationOmaEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationOmaEventReportOutput

    /**
     * Get the 'Network Initiated Alert' field from `self`.
     */
    getNetworkInitiatedAlert(): [ /* returnType */ boolean, /* valueNetworkInitiatedAlertSessionType */ OmaSessionType, /* valueNetworkInitiatedAlertSessionId */ number ]
    /**
     * Get the 'Session Fail Reason' field from `self`.
     */
    getSessionFailReason(): [ /* returnType */ boolean, /* valueSessionFailReason */ OmaSessionFailedReason ]
    /**
     * Get the 'Session State' field from `self`.
     */
    getSessionState(): [ /* returnType */ boolean, /* valueSessionState */ OmaSessionState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationOmaEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationOmaEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationOmaEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationOmaEventReportOutput

    static name: string
}

interface IndicationPdcActivateConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcActivateConfigOutput

    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcActivateConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcActivateConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcActivateConfigOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcActivateConfigOutput

    static name: string
}

interface IndicationPdcDeactivateConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcDeactivateConfigOutput

    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcDeactivateConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcDeactivateConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcDeactivateConfigOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcDeactivateConfigOutput

    static name: string
}

interface IndicationPdcGetConfigInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcGetConfigInfoOutput

    /**
     * Get the 'Description' field from `self`.
     */
    getDescription(): [ /* returnType */ boolean, /* valueDescription */ string ]
    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Get the 'Total Size' field from `self`.
     */
    getTotalSize(): [ /* returnType */ boolean, /* valueTotalSize */ number ]
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcGetConfigInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcGetConfigInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcGetConfigInfoOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcGetConfigInfoOutput

    static name: string
}

interface IndicationPdcGetSelectedConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcGetSelectedConfigOutput

    /**
     * Get the 'Active Id' field from `self`.
     */
    getActiveId(): [ /* returnType */ boolean, /* valueActiveId */ Uint8Array ]
    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Pending Id' field from `self`.
     */
    getPendingId(): [ /* returnType */ boolean, /* valuePendingId */ Uint8Array ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcGetSelectedConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcGetSelectedConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcGetSelectedConfigOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcGetSelectedConfigOutput

    static name: string
}

interface IndicationPdcListConfigsOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcListConfigsOutput

    /**
     * Get the 'Configs' field from `self`.
     * 
     * Version of qmi_indication_pdc_list_configs_output_get_configs() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getConfigs(): [ /* returnType */ boolean, /* valueConfigsPtr */ IndicationPdcListConfigsOutputConfigsElement[] ]
    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcListConfigsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcListConfigsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcListConfigsOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcListConfigsOutput

    static name: string
}

interface IndicationPdcListConfigsOutputConfigsElement {

    // Own fields of Qmi-1.0.Qmi.IndicationPdcListConfigsOutputConfigsElement

    /**
     * a #QmiPdcConfigurationType.
     * @field 
     */
    configType: PdcConfigurationType
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    id: object[]
}

/**
 * A QmiIndicationPdcListConfigsOutputConfigsElement struct.
 * @record 
 */
class IndicationPdcListConfigsOutputConfigsElement {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcListConfigsOutputConfigsElement

    static name: string
}

interface IndicationPdcLoadConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcLoadConfigOutput

    /**
     * Get the 'Frame Reset' field from `self`.
     */
    getFrameReset(): [ /* returnType */ boolean, /* valueFrameReset */ boolean ]
    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Received' field from `self`.
     */
    getReceived(): [ /* returnType */ boolean, /* valueReceived */ number ]
    /**
     * Get the 'Remaining Size' field from `self`.
     */
    getRemainingSize(): [ /* returnType */ boolean, /* valueRemainingSize */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcLoadConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcLoadConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcLoadConfigOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcLoadConfigOutput

    static name: string
}

interface IndicationPdcRefreshOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcRefreshOutput

    /**
     * Get the 'Refresh Event' field from `self`.
     */
    getRefreshEvent(): [ /* returnType */ boolean, /* valueRefreshEvent */ PdcRefreshEventType ]
    /**
     * Get the 'Slot ID' field from `self`.
     */
    getSlotId(): [ /* returnType */ boolean, /* valueSlotId */ number ]
    /**
     * Get the 'Subscription ID' field from `self`.
     */
    getSubscriptionId(): [ /* returnType */ boolean, /* valueSubscriptionId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcRefreshOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcRefreshOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcRefreshOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcRefreshOutput

    static name: string
}

interface IndicationPdcSetSelectedConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdcSetSelectedConfigOutput

    /**
     * Get the 'Indication Result' field from `self`.
     */
    getIndicationResult(): [ /* returnType */ boolean, /* valueIndicationResult */ number ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdcSetSelectedConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdcSetSelectedConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdcSetSelectedConfigOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdcSetSelectedConfigOutput

    static name: string
}

interface IndicationPdsEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationPdsEventReportOutput

    /**
     * Get the 'Extended NMEA Position' field from `self`.
     */
    getExtendedNmeaPosition(): [ /* returnType */ boolean, /* valueExtendedNmeaPositionOperationMode */ PdsOperationMode, /* valueExtendedNmeaPositionNmea */ string ]
    /**
     * Get the 'NMEA Position' field from `self`.
     */
    getNmeaPosition(): [ /* returnType */ boolean, /* valueNmeaPosition */ string ]
    /**
     * Get the 'Position Session Status' field from `self`.
     */
    getPositionSessionStatus(): [ /* returnType */ boolean, /* valuePositionSessionStatus */ PdsPositionSessionStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationPdsEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationPdsEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationPdsEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationPdsEventReportOutput

    static name: string
}

interface IndicationQosFlowStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationQosFlowStatusOutput

    /**
     * Get the 'Value' field from `self`.
     */
    getValue(): [ /* returnType */ boolean, /* valueValueQosId */ number, /* valueValueStatus */ QosStatus, /* valueValueEvent */ QosEvent ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationQosFlowStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationQosFlowStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationQosFlowStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationQosFlowStatusOutput

    static name: string
}

interface IndicationQosNetworkStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationQosNetworkStatusOutput

    /**
     * Get the 'QoS Supported' field from `self`.
     */
    getQosSupported(): [ /* returnType */ boolean, /* valueQosSupported */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationQosNetworkStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationQosNetworkStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationQosNetworkStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationQosNetworkStatusOutput

    static name: string
}

interface IndicationUimCardStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationUimCardStatusOutput

    /**
     * Get the 'Card Status' field from `self`.
     * 
     * Version of qmi_indication_uim_card_status_output_get_card_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCardStatus(): [ /* returnType */ boolean, /* valueCardStatusIndexGwPrimary */ number, /* valueCardStatusIndex1xPrimary */ number, /* valueCardStatusIndexGwSecondary */ number, /* valueCardStatusIndex1xSecondary */ number, /* valueCardStatusCardsPtr */ IndicationUimCardStatusOutputCardStatusCardsElementGir[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationUimCardStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationUimCardStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationUimCardStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationUimCardStatusOutput

    static name: string
}

interface IndicationUimCardStatusOutputCardStatusCardsElement {

    // Own fields of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElement

    /**
     * a #QmiUimCardState.
     * @field 
     */
    cardState: UimCardState
    /**
     * a #QmiUimPinState.
     * @field 
     */
    upinState: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    upinRetries: number
    /**
     * a #guint8.
     * @field 
     */
    upukRetries: number
    /**
     * a #QmiUimCardError.
     * @field 
     */
    errorCode: UimCardError
    /**
     * a #GArray of #QmiIndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement elements.
     * @field 
     */
    applications: object[]
}

/**
 * A QmiIndicationUimCardStatusOutputCardStatusCardsElement struct.
 * @record 
 */
class IndicationUimCardStatusOutputCardStatusCardsElement {

    // Own properties of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElement

    static name: string
}

interface IndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement {

    // Own fields of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement

    /**
     * a #QmiUimCardApplicationType.
     * @field 
     */
    type: UimCardApplicationType
    /**
     * a #QmiUimCardApplicationState.
     * @field 
     */
    state: UimCardApplicationState
    /**
     * a #QmiUimCardApplicationPersonalizationState.
     * @field 
     */
    personalizationState: UimCardApplicationPersonalizationState
    /**
     * a #QmiUimCardApplicationPersonalizationFeature.
     * @field 
     */
    personalizationFeature: UimCardApplicationPersonalizationFeature
    /**
     * a #guint8.
     * @field 
     */
    personalizationRetries: number
    /**
     * a #guint8.
     * @field 
     */
    personalizationUnblockRetries: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    applicationIdentifierValue: object[]
    /**
     * a #gboolean.
     * @field 
     */
    upinReplacesPin1: boolean
    /**
     * a #QmiUimPinState.
     * @field 
     */
    pin1State: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    pin1Retries: number
    /**
     * a #guint8.
     * @field 
     */
    puk1Retries: number
    /**
     * a #QmiUimPinState.
     * @field 
     */
    pin2State: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    pin2Retries: number
    /**
     * a #guint8.
     * @field 
     */
    puk2Retries: number
}

/**
 * A QmiIndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement struct.
 * @record 
 */
class IndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement {

    // Own properties of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement

    static name: string
}

interface IndicationUimCardStatusOutputCardStatusCardsElementGir {

    // Own fields of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElementGir

    /**
     * a #QmiUimCardState.
     * @field 
     */
    cardState: UimCardState
    /**
     * a #QmiUimPinState.
     * @field 
     */
    upinState: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    upinRetries: number
    /**
     * a #guint8.
     * @field 
     */
    upukRetries: number
    /**
     * a #QmiUimCardError.
     * @field 
     */
    errorCode: UimCardError
    /**
     * an array of #QmiIndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement elements.
     * @field 
     */
    applications: IndicationUimCardStatusOutputCardStatusCardsElementApplicationsElement[]
}

/**
 * A QmiIndicationUimCardStatusOutputCardStatusCardsElementGir struct.
 * 
 * This type is a version of #QmiIndicationUimCardStatusOutputCardStatusCardsElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class IndicationUimCardStatusOutputCardStatusCardsElementGir {

    // Own properties of Qmi-1.0.Qmi.IndicationUimCardStatusOutputCardStatusCardsElementGir

    static name: string
}

interface IndicationUimRefreshOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationUimRefreshOutput

    /**
     * Get the 'Event' field from `self`.
     * 
     * Version of qmi_indication_uim_refresh_output_get_event() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getEvent(): [ /* returnType */ boolean, /* valueEventStage */ UimRefreshStage, /* valueEventMode */ UimRefreshMode, /* valueEventSessionType */ UimSessionType, /* valueEventApplicationIdentifier */ Uint8Array, /* valueEventFilesPtr */ IndicationUimRefreshOutputEventFilesElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationUimRefreshOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationUimRefreshOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationUimRefreshOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationUimRefreshOutput

    static name: string
}

interface IndicationUimRefreshOutputEventFilesElement {

    // Own fields of Qmi-1.0.Qmi.IndicationUimRefreshOutputEventFilesElement

    /**
     * a #guint16.
     * @field 
     */
    fileId: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    path: object[]
}

/**
 * A QmiIndicationUimRefreshOutputEventFilesElement struct.
 * @record 
 */
class IndicationUimRefreshOutputEventFilesElement {

    // Own properties of Qmi-1.0.Qmi.IndicationUimRefreshOutputEventFilesElement

    static name: string
}

interface IndicationUimSlotStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationUimSlotStatusOutput

    getCompatContext(): object | null
    /**
     * Get the 'Physical Slot Information' field from `self`.
     * 
     * Version of qmi_indication_uim_slot_status_output_get_physical_slot_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPhysicalSlotInformation(): [ /* returnType */ boolean, /* valuePhysicalSlotInformationPtr */ PhysicalSlotInformationSlot[] ]
    /**
     * Get the 'Physical Slot Status' field from `self`.
     * 
     * Version of qmi_indication_uim_slot_status_output_get_physical_slot_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPhysicalSlotStatus(): [ /* returnType */ boolean, /* valuePhysicalSlotStatusPtr */ PhysicalSlotStatusSlot[] ]
    /**
     * Get the 'Slot EID' field from `self`.
     * 
     * Version of qmi_indication_uim_slot_status_output_get_slot_eid() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getSlotEid(): [ /* returnType */ boolean, /* valueSlotEidPtr */ SlotEidElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationUimSlotStatusOutput
    setCompatContext(compatContext: object | null, compatContextFree: GLib.DestroyNotify): void
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationUimSlotStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationUimSlotStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationUimSlotStatusOutput

    static name: string
}

interface IndicationVoiceAllCallStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutput

    /**
     * Get the 'Call Information' field from `self`.
     * 
     * Version of qmi_indication_voice_all_call_status_output_get_call_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCallInformation(): [ /* returnType */ boolean, /* valueCallInformationPtr */ IndicationVoiceAllCallStatusOutputCallInformationCall[] ]
    /**
     * Get the 'Remote Party Number' field from `self`.
     * 
     * Version of qmi_indication_voice_all_call_status_output_get_remote_party_number() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRemotePartyNumber(): [ /* returnType */ boolean, /* valueRemotePartyNumberPtr */ IndicationVoiceAllCallStatusOutputRemotePartyNumberCall[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationVoiceAllCallStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationVoiceAllCallStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationVoiceAllCallStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutput

    static name: string
}

interface IndicationVoiceAllCallStatusOutputCallInformationCall {

    // Own fields of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutputCallInformationCall

    /**
     * a #guint8.
     * @field 
     */
    id: number
    /**
     * a #QmiVoiceCallState.
     * @field 
     */
    state: VoiceCallState
    /**
     * a #QmiVoiceCallType.
     * @field 
     */
    type: VoiceCallType
    /**
     * a #QmiVoiceCallDirection.
     * @field 
     */
    direction: VoiceCallDirection
    /**
     * a #QmiVoiceCallMode.
     * @field 
     */
    mode: VoiceCallMode
    /**
     * a #gboolean.
     * @field 
     */
    multipartIndicator: boolean
    /**
     * a #QmiVoiceAls.
     * @field 
     */
    als: VoiceAls
}

/**
 * A QmiIndicationVoiceAllCallStatusOutputCallInformationCall struct.
 * @record 
 */
class IndicationVoiceAllCallStatusOutputCallInformationCall {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutputCallInformationCall

    static name: string
}

interface IndicationVoiceAllCallStatusOutputRemotePartyNumberCall {

    // Own fields of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutputRemotePartyNumberCall

    /**
     * a #guint8.
     * @field 
     */
    id: number
    /**
     * a #QmiVoicePresentation.
     * @field 
     */
    presentationIndicator: VoicePresentation
    /**
     * a string.
     * @field 
     */
    type: string
}

/**
 * A QmiIndicationVoiceAllCallStatusOutputRemotePartyNumberCall struct.
 * @record 
 */
class IndicationVoiceAllCallStatusOutputRemotePartyNumberCall {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceAllCallStatusOutputRemotePartyNumberCall

    static name: string
}

interface IndicationVoiceOriginateUssdNoWaitOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationVoiceOriginateUssdNoWaitOutput

    /**
     * Get the 'Alpha Identifier' field from `self`.
     */
    getAlphaIdentifier(): [ /* returnType */ boolean, /* valueAlphaIdentifierDataCodingScheme */ VoiceAlphaDataCodingScheme, /* valueAlphaIdentifierAlpha */ Uint8Array ]
    /**
     * Get the 'Error Code' field from `self`.
     */
    getErrorCode(): [ /* returnType */ boolean, /* valueErrorCode */ number ]
    /**
     * Get the 'Failure Cause' field from `self`.
     */
    getFailureCause(): [ /* returnType */ boolean, /* valueFailureCause */ VoiceCallEndReason ]
    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Get the 'USS Data UTF16' field from `self`.
     */
    getUssDataUtf16(): [ /* returnType */ boolean, /* valueUssDataUtf16 */ number[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationVoiceOriginateUssdNoWaitOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationVoiceOriginateUssdNoWaitOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationVoiceOriginateUssdNoWaitOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceOriginateUssdNoWaitOutput

    static name: string
}

interface IndicationVoiceSupplementaryServiceOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationVoiceSupplementaryServiceOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoCallId */ number, /* valueInfoNotificationType */ VoiceSupplementaryServiceNotificationType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationVoiceSupplementaryServiceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationVoiceSupplementaryServiceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationVoiceSupplementaryServiceOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceSupplementaryServiceOutput

    static name: string
}

interface IndicationVoiceUssdOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationVoiceUssdOutput

    /**
     * Get the 'User Action' field from `self`.
     */
    getUserAction(): [ /* returnType */ boolean, /* valueUserAction */ VoiceUserAction ]
    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Get the 'USS Data UTF16' field from `self`.
     */
    getUssDataUtf16(): [ /* returnType */ boolean, /* valueUssDataUtf16 */ number[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationVoiceUssdOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationVoiceUssdOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationVoiceUssdOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationVoiceUssdOutput

    static name: string
}

interface IndicationWdsEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationWdsEventReportOutput

    /**
     * Get the 'Channel Rates' field from `self`.
     */
    getChannelRates(): [ /* returnType */ boolean, /* valueChannelRatesTxRateBps */ number, /* valueChannelRatesRxRateBps */ number ]
    /**
     * Get the 'Current Data Bearer Technology' field from `self`.
     */
    getCurrentDataBearerTechnology(): [ /* returnType */ boolean, /* valueCurrentDataBearerTechnologyNetworkType */ WdsNetworkType, /* valueCurrentDataBearerTechnologyRatMask */ number, /* valueCurrentDataBearerTechnologySoMask */ number ]
    /**
     * Get the 'Data Bearer Technology' field from `self`.
     */
    getDataBearerTechnology(): [ /* returnType */ boolean, /* valueDataBearerTechnology */ WdsDataBearerTechnology ]
    /**
     * Get the 'Data Call Address Family' field from `self`.
     */
    getDataCallAddressFamily(): [ /* returnType */ boolean, /* valueDataCallAddressFamily */ WdsIpFamily ]
    /**
     * Get the 'Data Call Status' field from `self`.
     */
    getDataCallStatus(): [ /* returnType */ boolean, /* valueDataCallStatus */ WdsDataCallStatus ]
    /**
     * Get the 'Data Call Type' field from `self`.
     */
    getDataCallType(): [ /* returnType */ boolean, /* valueDataCallTypeDataCallType */ WdsDataCallType, /* valueDataCallTypeTetheredCallType */ WdsTetheredCallType ]
    /**
     * Get the 'Data Systems' field from `self`.
     * 
     * Version of qmi_indication_wds_event_report_output_get_data_systems() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getDataSystems(): [ /* returnType */ boolean, /* valueDataSystemsPreferredNetworkType */ WdsDataSystemNetworkType, /* valueDataSystemsNetworksPtr */ IndicationWdsEventReportOutputDataSystemsNetworksNetwork[] ]
    /**
     * Get the 'Dormancy Status' field from `self`.
     */
    getDormancyStatus(): [ /* returnType */ boolean, /* valueDormancyStatus */ WdsDormancyStatus ]
    /**
     * Get the 'EVDO Page Monitor Period Change' field from `self`.
     */
    getEvdoPageMonitorPeriodChange(): [ /* returnType */ boolean, /* valueEvdoPageMonitorPeriodChangePeriodChange */ number, /* valueEvdoPageMonitorPeriodChangeForceLongSleep */ boolean ]
    /**
     * Get the 'Extended Data Bearer Technology' field from `self`.
     */
    getExtendedDataBearerTechnology(): [ /* returnType */ boolean, /* valueExtendedDataBearerTechnologyDataBearerTechnology */ WdsDataSystemNetworkType, /* valueExtendedDataBearerTechnologyRadioAccessTechnology */ WdsRadioAccessTechnology, /* valueExtendedDataBearerTechnologyExtendedDataBearerTechnology3gpp */ WdsExtendedDataBearerTechnology3gpp, /* valueExtendedDataBearerTechnologyExtendedDataBearerTechnology3gpp2 */ WdsExtendedDataBearerTechnology3gpp2 ]
    /**
     * Get the 'MIP Status' field from `self`.
     */
    getMipStatus(): [ /* returnType */ boolean, /* valueMipStatus */ boolean ]
    /**
     * Get the 'PDN Filters Removed' field from `self`.
     */
    getPdnFiltersRemoved(): [ /* returnType */ boolean, /* valuePdnFiltersRemovedPdnFilterHandler */ number[] ]
    /**
     * Get the 'Preferred Data System' field from `self`.
     */
    getPreferredDataSystem(): [ /* returnType */ boolean, /* valuePreferredDataSystem */ WdsDataSystem ]
    /**
     * Get the 'Rx Bytes Ok' field from `self`.
     */
    getRxBytesOk(): [ /* returnType */ boolean, /* valueRxBytesOk */ number ]
    /**
     * Get the 'Rx Overflows' field from `self`.
     */
    getRxOverflows(): [ /* returnType */ boolean, /* valueRxOverflows */ number ]
    /**
     * Get the 'Rx Packets Dropped' field from `self`.
     */
    getRxPacketsDropped(): [ /* returnType */ boolean, /* valueRxPacketsDropped */ number ]
    /**
     * Get the 'Rx Packets Error' field from `self`.
     */
    getRxPacketsError(): [ /* returnType */ boolean, /* valueRxPacketsError */ number ]
    /**
     * Get the 'Rx Packets Ok' field from `self`.
     */
    getRxPacketsOk(): [ /* returnType */ boolean, /* valueRxPacketsOk */ number ]
    /**
     * Get the 'Tx Bytes Ok' field from `self`.
     */
    getTxBytesOk(): [ /* returnType */ boolean, /* valueTxBytesOk */ number ]
    /**
     * Get the 'Tx Overflows' field from `self`.
     */
    getTxOverflows(): [ /* returnType */ boolean, /* valueTxOverflows */ number ]
    /**
     * Get the 'Tx Packets Dropped' field from `self`.
     */
    getTxPacketsDropped(): [ /* returnType */ boolean, /* valueTxPacketsDropped */ number ]
    /**
     * Get the 'Tx Packets Error' field from `self`.
     */
    getTxPacketsError(): [ /* returnType */ boolean, /* valueTxPacketsError */ number ]
    /**
     * Get the 'Tx Packets Ok' field from `self`.
     */
    getTxPacketsOk(): [ /* returnType */ boolean, /* valueTxPacketsOk */ number ]
    /**
     * Get the 'Uplink Flow Control Enabled' field from `self`.
     */
    getUplinkFlowControlEnabled(): [ /* returnType */ boolean, /* valueUplinkFlowControlEnabled */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationWdsEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationWdsEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationWdsEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationWdsEventReportOutput

    static name: string
}

interface IndicationWdsEventReportOutputDataSystemsNetworksNetwork {

    // Own fields of Qmi-1.0.Qmi.IndicationWdsEventReportOutputDataSystemsNetworksNetwork

    /**
     * a #QmiWdsDataSystemNetworkType.
     * @field 
     */
    networkType: WdsDataSystemNetworkType
    /**
     * a #guint32.
     * @field 
     */
    ratMask: number
    /**
     * a #guint32.
     * @field 
     */
    soMask: number
}

/**
 * A QmiIndicationWdsEventReportOutputDataSystemsNetworksNetwork struct.
 * @record 
 */
class IndicationWdsEventReportOutputDataSystemsNetworksNetwork {

    // Own properties of Qmi-1.0.Qmi.IndicationWdsEventReportOutputDataSystemsNetworksNetwork

    static name: string
}

interface IndicationWdsPacketServiceStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationWdsPacketServiceStatusOutput

    /**
     * Get the 'Call End Reason' field from `self`.
     */
    getCallEndReason(): [ /* returnType */ boolean, /* valueCallEndReason */ WdsCallEndReason ]
    /**
     * Get the 'Connection Status' field from `self`.
     */
    getConnectionStatus(): [ /* returnType */ boolean, /* valueConnectionStatusStatus */ WdsConnectionStatus, /* valueConnectionStatusReconfigurationRequired */ boolean ]
    /**
     * Get the 'Extended Technology Preference' field from `self`.
     */
    getExtendedTechnologyPreference(): [ /* returnType */ boolean, /* valueExtendedTechnologyPreference */ WdsExtendedTechnologyPreference ]
    /**
     * Get the 'IP Family' field from `self`.
     */
    getIpFamily(): [ /* returnType */ boolean, /* valueIpFamily */ WdsIpFamily ]
    /**
     * Get the 'Verbose Call End Reason' field from `self`.
     */
    getVerboseCallEndReason(): [ /* returnType */ boolean, /* valueVerboseCallEndReasonType */ WdsVerboseCallEndReasonType, /* valueVerboseCallEndReasonReason */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationWdsPacketServiceStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationWdsPacketServiceStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationWdsPacketServiceStatusOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationWdsPacketServiceStatusOutput

    static name: string
}

interface IndicationWdsSetLteAttachPdnListOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationWdsSetLteAttachPdnListOutput

    /**
     * Get the 'Action Result' field from `self`.
     */
    getActionResult(): [ /* returnType */ boolean, /* valueActionResult */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationWdsSetLteAttachPdnListOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationWdsSetLteAttachPdnListOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationWdsSetLteAttachPdnListOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationWdsSetLteAttachPdnListOutput

    static name: string
}

interface IndicationWmsEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationWmsEventReportOutput

    /**
     * Get the 'ETWS Message' field from `self`.
     */
    getEtwsMessage(): [ /* returnType */ boolean, /* valueEtwsMessageNotificationType */ WmsNotificationType, /* valueEtwsMessageRawData */ Uint8Array ]
    /**
     * Get the 'ETWS PLMN Information' field from `self`.
     */
    getEtwsPlmnInformation(): [ /* returnType */ boolean, /* valueEtwsPlmnInformationMcc */ number, /* valueEtwsPlmnInformationMnc */ number ]
    /**
     * Get the 'Message Mode' field from `self`.
     */
    getMessageMode(): [ /* returnType */ boolean, /* valueMessageMode */ WmsMessageMode ]
    /**
     * Get the 'MT Message' field from `self`.
     */
    getMtMessage(): [ /* returnType */ boolean, /* valueMtMessageStorageType */ WmsStorageType, /* valueMtMessageMemoryIndex */ number ]
    /**
     * Get the 'SMS on IMS' field from `self`.
     */
    getSmsOnIms(): [ /* returnType */ boolean, /* valueSmsOnIms */ boolean ]
    /**
     * Get the 'SMSC Address' field from `self`.
     */
    getSmscAddress(): [ /* returnType */ boolean, /* valueSmscAddress */ string ]
    /**
     * Get the 'Transfer Route MT Message' field from `self`.
     */
    getTransferRouteMtMessage(): [ /* returnType */ boolean, /* valueTransferRouteMtMessageAckIndicator */ WmsAckIndicator, /* valueTransferRouteMtMessageTransactionId */ number, /* valueTransferRouteMtMessageFormat */ WmsMessageFormat, /* valueTransferRouteMtMessageRawData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationWmsEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationWmsEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationWmsEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationWmsEventReportOutput

    static name: string
}

interface IndicationWmsSmscAddressOutput {

    // Owm methods of Qmi-1.0.Qmi.IndicationWmsSmscAddressOutput

    /**
     * Get the 'Address' field from `self`.
     */
    getAddress(): [ /* returnType */ boolean, /* valueAddressType */ string, /* valueAddressDigits */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): IndicationWmsSmscAddressOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiIndicationWmsSmscAddressOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class IndicationWmsSmscAddressOutput {

    // Own properties of Qmi-1.0.Qmi.IndicationWmsSmscAddressOutput

    static name: string
}

interface MessageContext {

    // Owm methods of Qmi-1.0.Qmi.MessageContext

    /**
     * Gets the vendor ID associated to the message.
     */
    getVendorId(): number
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageContext
    /**
     * Sets the vendor ID associated to the message.
     * @param vendorId the vendor ID.
     */
    setVendorId(vendorId: number): void
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * An opaque type representing a QMI message context.
 * @record 
 */
class MessageContext {

    // Own properties of Qmi-1.0.Qmi.MessageContext

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageContext

    /**
     * Create a new empty #QmiMessageContext.
     * @constructor 
     */
    constructor() 
    /**
     * Create a new empty #QmiMessageContext.
     * @constructor 
     */
    static new(): MessageContext
}

interface MessageDmsActivateAutomaticInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsActivateAutomaticInput

    /**
     * Get the 'Activation Code' field from `self`.
     */
    getActivationCode(): [ /* returnType */ boolean, /* valueActivationCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsActivateAutomaticInput
    /**
     * Set the 'Activation Code' field in the message.
     * @param valueActivationCode a constant string.
     */
    setActivationCode(valueActivationCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsActivateAutomaticInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsActivateAutomaticInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsActivateAutomaticInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsActivateAutomaticInput

    /**
     * Allocates a new #QmiMessageDmsActivateAutomaticInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsActivateAutomaticInput.
     * @constructor 
     */
    static new(): MessageDmsActivateAutomaticInput
}

interface MessageDmsActivateAutomaticOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsActivateAutomaticOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsActivateAutomaticOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsActivateAutomaticOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsActivateAutomaticOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsActivateAutomaticOutput

    static name: string
}

interface MessageDmsActivateManualInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsActivateManualInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoServiceProgrammingCode */ string, /* valueInfoSystemIdentificationNumber */ number, /* valueInfoMobileDirectoryNumber */ string, /* valueInfoMobileIdentificationNumber */ string ]
    /**
     * Get the 'MN AAA key' field from `self`.
     */
    getMnAaaKey(): [ /* returnType */ boolean, /* valueMnAaaKey */ string ]
    /**
     * Get the 'MN HA key' field from `self`.
     */
    getMnHaKey(): [ /* returnType */ boolean, /* valueMnHaKey */ string ]
    /**
     * Get the 'PRL' field from `self`.
     */
    getPrl(): [ /* returnType */ boolean, /* valuePrlPrlTotalLength */ number, /* valuePrlPrlSegmentSequence */ number, /* valuePrlPrlSegment */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsActivateManualInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoServiceProgrammingCode a constant string of exactly 6 characters.
     * @param valueInfoSystemIdentificationNumber a #guint16.
     * @param valueInfoMobileDirectoryNumber a constant string with a maximum length of 15 characters.
     * @param valueInfoMobileIdentificationNumber a constant string with a maximum length of 15 characters.
     */
    setInfo(valueInfoServiceProgrammingCode: string, valueInfoSystemIdentificationNumber: number, valueInfoMobileDirectoryNumber: string, valueInfoMobileIdentificationNumber: string): boolean
    /**
     * Set the 'MN AAA key' field in the message.
     * @param valueMnAaaKey a constant string with a maximum length of 16 characters.
     */
    setMnAaaKey(valueMnAaaKey: string): boolean
    /**
     * Set the 'MN HA key' field in the message.
     * @param valueMnHaKey a constant string with a maximum length of 16 characters.
     */
    setMnHaKey(valueMnHaKey: string): boolean
    /**
     * Set the 'PRL' field in the message.
     * @param valuePrlPrlTotalLength a #guint16.
     * @param valuePrlPrlSegmentSequence the sequence number.
     * @param valuePrlPrlSegment a #GArray of #guint8 elements. A new reference to `value_prl_prl_segment` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setPrl(valuePrlPrlTotalLength: number, valuePrlPrlSegmentSequence: number, valuePrlPrlSegment: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsActivateManualInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsActivateManualInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsActivateManualInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsActivateManualInput

    /**
     * Allocates a new #QmiMessageDmsActivateManualInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsActivateManualInput.
     * @constructor 
     */
    static new(): MessageDmsActivateManualInput
}

interface MessageDmsActivateManualOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsActivateManualOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsActivateManualOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsActivateManualOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsActivateManualOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsActivateManualOutput

    static name: string
}

interface MessageDmsDeleteStoredImageInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsDeleteStoredImageInput

    /**
     * Get the 'Image Details' field from `self`.
     */
    getImageDetails(): [ /* returnType */ boolean, /* valueImageDetailsType */ DmsFirmwareImageType, /* valueImageDetailsUniqueId */ Uint8Array, /* valueImageDetailsBuildId */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsDeleteStoredImageInput
    /**
     * Set the 'Image Details' field in the message.
     * @param valueImageDetailsType a #QmiDmsFirmwareImageType.
     * @param valueImageDetailsUniqueId a #GArray of #guint8 elements. A new reference to `value_image_details_unique_id` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     * @param valueImageDetailsBuildId a constant string.
     */
    setImageDetails(valueImageDetailsType: DmsFirmwareImageType, valueImageDetailsUniqueId: Uint8Array, valueImageDetailsBuildId: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsDeleteStoredImageInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsDeleteStoredImageInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsDeleteStoredImageInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsDeleteStoredImageInput

    /**
     * Allocates a new #QmiMessageDmsDeleteStoredImageInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsDeleteStoredImageInput.
     * @constructor 
     */
    static new(): MessageDmsDeleteStoredImageInput
}

interface MessageDmsDeleteStoredImageOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsDeleteStoredImageOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsDeleteStoredImageOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsDeleteStoredImageOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsDeleteStoredImageOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsDeleteStoredImageOutput

    static name: string
}

interface MessageDmsFoxconnChangeDeviceModeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnChangeDeviceModeInput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsFoxconnDeviceMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnChangeDeviceModeInput
    /**
     * Set the 'Mode' field in the message.
     * @param valueMode a #QmiDmsFoxconnDeviceMode.
     */
    setMode(valueMode: DmsFoxconnDeviceMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnChangeDeviceModeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnChangeDeviceModeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnChangeDeviceModeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsFoxconnChangeDeviceModeInput

    /**
     * Allocates a new #QmiMessageDmsFoxconnChangeDeviceModeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsFoxconnChangeDeviceModeInput.
     * @constructor 
     */
    static new(): MessageDmsFoxconnChangeDeviceModeInput
}

interface MessageDmsFoxconnChangeDeviceModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnChangeDeviceModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnChangeDeviceModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnChangeDeviceModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnChangeDeviceModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnChangeDeviceModeOutput

    static name: string
}

interface MessageDmsFoxconnGetFirmwareVersionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnGetFirmwareVersionInput

    /**
     * Get the 'Version Type' field from `self`.
     */
    getVersionType(): [ /* returnType */ boolean, /* valueVersionType */ DmsFoxconnFirmwareVersionType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnGetFirmwareVersionInput
    /**
     * Set the 'Version Type' field in the message.
     * @param valueVersionType a #QmiDmsFoxconnFirmwareVersionType.
     */
    setVersionType(valueVersionType: DmsFoxconnFirmwareVersionType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnGetFirmwareVersionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnGetFirmwareVersionInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnGetFirmwareVersionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsFoxconnGetFirmwareVersionInput

    /**
     * Allocates a new #QmiMessageDmsFoxconnGetFirmwareVersionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsFoxconnGetFirmwareVersionInput.
     * @constructor 
     */
    static new(): MessageDmsFoxconnGetFirmwareVersionInput
}

interface MessageDmsFoxconnGetFirmwareVersionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnGetFirmwareVersionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnGetFirmwareVersionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnGetFirmwareVersionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnGetFirmwareVersionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnGetFirmwareVersionOutput

    static name: string
}

interface MessageDmsFoxconnSetFccAuthenticationInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnSetFccAuthenticationInput

    /**
     * Get the 'Value' field from `self`.
     */
    getValue(): [ /* returnType */ boolean, /* valueValue */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnSetFccAuthenticationInput
    /**
     * Set the 'Value' field in the message.
     * @param valueValue a #guint8.
     */
    setValue(valueValue: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnSetFccAuthenticationInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnSetFccAuthenticationInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnSetFccAuthenticationInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsFoxconnSetFccAuthenticationInput

    /**
     * Allocates a new #QmiMessageDmsFoxconnSetFccAuthenticationInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsFoxconnSetFccAuthenticationInput.
     * @constructor 
     */
    static new(): MessageDmsFoxconnSetFccAuthenticationInput
}

interface MessageDmsFoxconnSetFccAuthenticationOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsFoxconnSetFccAuthenticationOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsFoxconnSetFccAuthenticationOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsFoxconnSetFccAuthenticationOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsFoxconnSetFccAuthenticationOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsFoxconnSetFccAuthenticationOutput

    static name: string
}

interface MessageDmsGetActivationStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetActivationStateOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfo */ DmsActivationState ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetActivationStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetActivationStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetActivationStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetActivationStateOutput

    static name: string
}

interface MessageDmsGetAltNetConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetAltNetConfigOutput

    /**
     * Get the 'Config' field from `self`.
     */
    getConfig(): [ /* returnType */ boolean, /* valueConfig */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetAltNetConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetAltNetConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetAltNetConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetAltNetConfigOutput

    static name: string
}

interface MessageDmsGetBandCapabilitiesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetBandCapabilitiesOutput

    /**
     * Get the 'Band Capability' field from `self`.
     */
    getBandCapability(): [ /* returnType */ boolean, /* valueBandCapability */ DmsBandCapability ]
    /**
     * Get the 'Extended LTE Band Capability' field from `self`.
     */
    getExtendedLteBandCapability(): [ /* returnType */ boolean, /* valueExtendedLteBandCapability */ number[] ]
    /**
     * Get the 'LTE Band Capability' field from `self`.
     */
    getLteBandCapability(): [ /* returnType */ boolean, /* valueLteBandCapability */ DmsLteBandCapability ]
    /**
     * Get the 'NR5G Band Capability' field from `self`.
     */
    getNr5gBandCapability(): [ /* returnType */ boolean, /* valueNr5gBandCapability */ number[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetBandCapabilitiesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetBandCapabilitiesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetBandCapabilitiesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetBandCapabilitiesOutput

    static name: string
}

interface MessageDmsGetBootImageDownloadModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetBootImageDownloadModeOutput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsBootImageDownloadMode ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetBootImageDownloadModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetBootImageDownloadModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetBootImageDownloadModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetBootImageDownloadModeOutput

    static name: string
}

interface MessageDmsGetCapabilitiesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetCapabilitiesOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoMaxTxChannelRate */ number, /* valueInfoMaxRxChannelRate */ number, /* valueInfoDataServiceCapability */ DmsDataServiceCapability, /* valueInfoSimCapability */ DmsSimCapability, /* valueInfoRadioInterfaceList */ DmsRadioInterface[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetCapabilitiesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetCapabilitiesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetCapabilitiesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetCapabilitiesOutput

    static name: string
}

interface MessageDmsGetFactorySkuOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetFactorySkuOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'SKU' field from `self`.
     */
    getSku(): [ /* returnType */ boolean, /* valueSku */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetFactorySkuOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetFactorySkuOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetFactorySkuOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetFactorySkuOutput

    static name: string
}

interface MessageDmsGetFirmwarePreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetFirmwarePreferenceOutput

    /**
     * Get the 'List' field from `self`.
     * 
     * Version of qmi_message_dms_get_firmware_preference_output_get_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getList(): [ /* returnType */ boolean, /* valueListPtr */ MessageDmsGetFirmwarePreferenceOutputListImage[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetFirmwarePreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetFirmwarePreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetFirmwarePreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetFirmwarePreferenceOutput

    static name: string
}

interface MessageDmsGetFirmwarePreferenceOutputListImage {

    // Own fields of Qmi-1.0.Qmi.MessageDmsGetFirmwarePreferenceOutputListImage

    /**
     * a #QmiDmsFirmwareImageType.
     * @field 
     */
    type: DmsFirmwareImageType
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    uniqueId: object[]
    /**
     * a string.
     * @field 
     */
    buildId: string
}

/**
 * A QmiMessageDmsGetFirmwarePreferenceOutputListImage struct.
 * @record 
 */
class MessageDmsGetFirmwarePreferenceOutputListImage {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetFirmwarePreferenceOutputListImage

    static name: string
}

interface MessageDmsGetHardwareRevisionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetHardwareRevisionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Revision' field from `self`.
     */
    getRevision(): [ /* returnType */ boolean, /* valueRevision */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetHardwareRevisionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetHardwareRevisionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetHardwareRevisionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetHardwareRevisionOutput

    static name: string
}

interface MessageDmsGetIdsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetIdsOutput

    /**
     * Get the 'Esn' field from `self`.
     */
    getEsn(): [ /* returnType */ boolean, /* valueEsn */ string ]
    /**
     * Get the 'Imei' field from `self`.
     */
    getImei(): [ /* returnType */ boolean, /* valueImei */ string ]
    /**
     * Get the 'Imei Software Version' field from `self`.
     */
    getImeiSoftwareVersion(): [ /* returnType */ boolean, /* valueImeiSoftwareVersion */ string ]
    /**
     * Get the 'Meid' field from `self`.
     */
    getMeid(): [ /* returnType */ boolean, /* valueMeid */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetIdsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetIdsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetIdsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetIdsOutput

    static name: string
}

interface MessageDmsGetMacAddressInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetMacAddressInput

    /**
     * Get the 'Device' field from `self`.
     */
    getDevice(): [ /* returnType */ boolean, /* valueDevice */ DmsMacType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetMacAddressInput
    /**
     * Set the 'Device' field in the message.
     * @param valueDevice a #QmiDmsMacType.
     */
    setDevice(valueDevice: DmsMacType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetMacAddressInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetMacAddressInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetMacAddressInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsGetMacAddressInput

    /**
     * Allocates a new #QmiMessageDmsGetMacAddressInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsGetMacAddressInput.
     * @constructor 
     */
    static new(): MessageDmsGetMacAddressInput
}

interface MessageDmsGetMacAddressOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetMacAddressOutput

    /**
     * Get the 'MAC Address' field from `self`.
     */
    getMacAddress(): [ /* returnType */ boolean, /* valueMacAddress */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetMacAddressOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetMacAddressOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetMacAddressOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetMacAddressOutput

    static name: string
}

interface MessageDmsGetManufacturerOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetManufacturerOutput

    /**
     * Get the 'Manufacturer' field from `self`.
     */
    getManufacturer(): [ /* returnType */ boolean, /* valueManufacturer */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetManufacturerOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetManufacturerOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetManufacturerOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetManufacturerOutput

    static name: string
}

interface MessageDmsGetModelOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetModelOutput

    /**
     * Get the 'Model' field from `self`.
     */
    getModel(): [ /* returnType */ boolean, /* valueModel */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetModelOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetModelOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetModelOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetModelOutput

    static name: string
}

interface MessageDmsGetMsisdnOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetMsisdnOutput

    /**
     * Get the 'MSISDN' field from `self`.
     */
    getMsisdn(): [ /* returnType */ boolean, /* valueMsisdn */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetMsisdnOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetMsisdnOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetMsisdnOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetMsisdnOutput

    static name: string
}

interface MessageDmsGetOperatingModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetOperatingModeOutput

    /**
     * Get the 'Hardware Restricted Mode' field from `self`.
     */
    getHardwareRestrictedMode(): [ /* returnType */ boolean, /* valueHardwareRestrictedMode */ boolean ]
    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsOperatingMode ]
    /**
     * Get the 'Offline Reason' field from `self`.
     */
    getOfflineReason(): [ /* returnType */ boolean, /* valueOfflineReason */ DmsOfflineReason ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetOperatingModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetOperatingModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetOperatingModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetOperatingModeOutput

    static name: string
}

interface MessageDmsGetPowerStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetPowerStateOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPowerStateFlags */ number, /* valueInfoBatteryLevel */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetPowerStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetPowerStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetPowerStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetPowerStateOutput

    static name: string
}

interface MessageDmsGetPrlVersionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetPrlVersionOutput

    /**
     * Get the 'PRL Only Preference' field from `self`.
     */
    getPrlOnlyPreference(): [ /* returnType */ boolean, /* valuePrlOnlyPreference */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetPrlVersionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetPrlVersionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetPrlVersionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetPrlVersionOutput

    static name: string
}

interface MessageDmsGetRevisionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetRevisionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Revision' field from `self`.
     */
    getRevision(): [ /* returnType */ boolean, /* valueRevision */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetRevisionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetRevisionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetRevisionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetRevisionOutput

    static name: string
}

interface MessageDmsGetSoftwareVersionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetSoftwareVersionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetSoftwareVersionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetSoftwareVersionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetSoftwareVersionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetSoftwareVersionOutput

    static name: string
}

interface MessageDmsGetStoredImageInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetStoredImageInfoInput

    /**
     * Get the 'Image Details' field from `self`.
     */
    getImageDetails(): [ /* returnType */ boolean, /* valueImageDetailsType */ DmsFirmwareImageType, /* valueImageDetailsUniqueId */ Uint8Array, /* valueImageDetailsBuildId */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetStoredImageInfoInput
    /**
     * Set the 'Image Details' field in the message.
     * @param valueImageDetailsType a #QmiDmsFirmwareImageType.
     * @param valueImageDetailsUniqueId a #GArray of #guint8 elements. A new reference to `value_image_details_unique_id` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     * @param valueImageDetailsBuildId a constant string.
     */
    setImageDetails(valueImageDetailsType: DmsFirmwareImageType, valueImageDetailsUniqueId: Uint8Array, valueImageDetailsBuildId: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetStoredImageInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetStoredImageInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetStoredImageInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsGetStoredImageInfoInput

    /**
     * Allocates a new #QmiMessageDmsGetStoredImageInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsGetStoredImageInfoInput.
     * @constructor 
     */
    static new(): MessageDmsGetStoredImageInfoInput
}

interface MessageDmsGetStoredImageInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetStoredImageInfoOutput

    /**
     * Get the 'Boot Version' field from `self`.
     */
    getBootVersion(): [ /* returnType */ boolean, /* valueBootVersionMajorVersion */ number, /* valueBootVersionMinorVersion */ number ]
    /**
     * Get the 'OEM Lock ID' field from `self`.
     */
    getOemLockId(): [ /* returnType */ boolean, /* valueOemLockId */ number ]
    /**
     * Get the 'PRI Version' field from `self`.
     */
    getPriVersion(): [ /* returnType */ boolean, /* valuePriVersionPriVersion */ number, /* valuePriVersionPriInfo */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetStoredImageInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetStoredImageInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetStoredImageInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetStoredImageInfoOutput

    static name: string
}

interface MessageDmsGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetSupportedMessagesOutput

    static name: string
}

interface MessageDmsGetTimeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetTimeOutput

    /**
     * Get the 'Device Time' field from `self`.
     */
    getDeviceTime(): [ /* returnType */ boolean, /* valueDeviceTimeTimeCount */ number, /* valueDeviceTimeTimeSource */ DmsTimeSource ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'System Time' field from `self`.
     */
    getSystemTime(): [ /* returnType */ boolean, /* valueSystemTime */ number ]
    /**
     * Get the 'User Time' field from `self`.
     */
    getUserTime(): [ /* returnType */ boolean, /* valueUserTime */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetTimeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetTimeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetTimeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetTimeOutput

    static name: string
}

interface MessageDmsGetUserLockStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsGetUserLockStateOutput

    /**
     * Get the 'Enabled' field from `self`.
     */
    getEnabled(): [ /* returnType */ boolean, /* valueEnabled */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsGetUserLockStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsGetUserLockStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsGetUserLockStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsGetUserLockStateOutput

    static name: string
}

interface MessageDmsHpChangeDeviceModeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsHpChangeDeviceModeInput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsHpDeviceMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsHpChangeDeviceModeInput
    /**
     * Set the 'Mode' field in the message.
     * @param valueMode a #QmiDmsHpDeviceMode.
     */
    setMode(valueMode: DmsHpDeviceMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsHpChangeDeviceModeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsHpChangeDeviceModeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsHpChangeDeviceModeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsHpChangeDeviceModeInput

    /**
     * Allocates a new #QmiMessageDmsHpChangeDeviceModeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsHpChangeDeviceModeInput.
     * @constructor 
     */
    static new(): MessageDmsHpChangeDeviceModeInput
}

interface MessageDmsHpChangeDeviceModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsHpChangeDeviceModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsHpChangeDeviceModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsHpChangeDeviceModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsHpChangeDeviceModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsHpChangeDeviceModeOutput

    static name: string
}

interface MessageDmsListStoredImagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutput

    /**
     * Get the 'List' field from `self`.
     * 
     * Version of qmi_message_dms_list_stored_images_output_get_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getList(): [ /* returnType */ boolean, /* valueListPtr */ MessageDmsListStoredImagesOutputListImageGir[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsListStoredImagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsListStoredImagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsListStoredImagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutput

    static name: string
}

interface MessageDmsListStoredImagesOutputListImage {

    // Own fields of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImage

    /**
     * a #QmiDmsFirmwareImageType.
     * @field 
     */
    type: DmsFirmwareImageType
    /**
     * a #guint8.
     * @field 
     */
    maximumImages: number
    /**
     * a #guint8.
     * @field 
     */
    indexOfRunningImage: number
    /**
     * a #GArray of #QmiMessageDmsListStoredImagesOutputListImageSublistSublistElement elements.
     * @field 
     */
    sublist: object[]
}

/**
 * A QmiMessageDmsListStoredImagesOutputListImage struct.
 * @record 
 */
class MessageDmsListStoredImagesOutputListImage {

    // Own properties of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImage

    static name: string
}

interface MessageDmsListStoredImagesOutputListImageGir {

    // Own fields of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImageGir

    /**
     * a #QmiDmsFirmwareImageType.
     * @field 
     */
    type: DmsFirmwareImageType
    /**
     * a #guint8.
     * @field 
     */
    maximumImages: number
    /**
     * a #guint8.
     * @field 
     */
    indexOfRunningImage: number
    /**
     * an array of #QmiMessageDmsListStoredImagesOutputListImageSublistSublistElement elements.
     * @field 
     */
    sublist: MessageDmsListStoredImagesOutputListImageSublistSublistElement[]
}

/**
 * A QmiMessageDmsListStoredImagesOutputListImageGir struct.
 * 
 * This type is a version of #QmiMessageDmsListStoredImagesOutputListImage, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageDmsListStoredImagesOutputListImageGir {

    // Own properties of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImageGir

    static name: string
}

interface MessageDmsListStoredImagesOutputListImageSublistSublistElement {

    // Own fields of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImageSublistSublistElement

    /**
     * a #guint8.
     * @field 
     */
    storageIndex: number
    /**
     * a #guint8.
     * @field 
     */
    failureCount: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    uniqueId: object[]
    /**
     * a string.
     * @field 
     */
    buildId: string
}

/**
 * A QmiMessageDmsListStoredImagesOutputListImageSublistSublistElement struct.
 * @record 
 */
class MessageDmsListStoredImagesOutputListImageSublistSublistElement {

    // Own properties of Qmi-1.0.Qmi.MessageDmsListStoredImagesOutputListImageSublistSublistElement

    static name: string
}

interface MessageDmsReadEriFileOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsReadEriFileOutput

    /**
     * Get the 'ERI File' field from `self`.
     */
    getEriFile(): [ /* returnType */ boolean, /* valueEriFile */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsReadEriFileOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsReadEriFileOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsReadEriFileOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsReadEriFileOutput

    static name: string
}

interface MessageDmsReadUserDataOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsReadUserDataOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'User Data' field from `self`.
     */
    getUserData(): [ /* returnType */ boolean, /* valueUserData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsReadUserDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsReadUserDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsReadUserDataOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsReadUserDataOutput

    static name: string
}

interface MessageDmsResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsResetOutput

    static name: string
}

interface MessageDmsRestoreFactoryDefaultsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsRestoreFactoryDefaultsInput

    /**
     * Get the 'Service Programming Code' field from `self`.
     */
    getServiceProgrammingCode(): [ /* returnType */ boolean, /* valueServiceProgrammingCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsRestoreFactoryDefaultsInput
    /**
     * Set the 'Service Programming Code' field in the message.
     * @param valueServiceProgrammingCode a constant string of exactly 6 characters.
     */
    setServiceProgrammingCode(valueServiceProgrammingCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsRestoreFactoryDefaultsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsRestoreFactoryDefaultsInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsRestoreFactoryDefaultsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsRestoreFactoryDefaultsInput

    /**
     * Allocates a new #QmiMessageDmsRestoreFactoryDefaultsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsRestoreFactoryDefaultsInput.
     * @constructor 
     */
    static new(): MessageDmsRestoreFactoryDefaultsInput
}

interface MessageDmsRestoreFactoryDefaultsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsRestoreFactoryDefaultsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsRestoreFactoryDefaultsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsRestoreFactoryDefaultsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsRestoreFactoryDefaultsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsRestoreFactoryDefaultsOutput

    static name: string
}

interface MessageDmsSetAltNetConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetAltNetConfigInput

    /**
     * Get the 'Config' field from `self`.
     */
    getConfig(): [ /* returnType */ boolean, /* valueConfig */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetAltNetConfigInput
    /**
     * Set the 'Config' field in the message.
     * @param valueConfig a #gboolean.
     */
    setConfig(valueConfig: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetAltNetConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetAltNetConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetAltNetConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetAltNetConfigInput

    /**
     * Allocates a new #QmiMessageDmsSetAltNetConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetAltNetConfigInput.
     * @constructor 
     */
    static new(): MessageDmsSetAltNetConfigInput
}

interface MessageDmsSetAltNetConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetAltNetConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetAltNetConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetAltNetConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetAltNetConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetAltNetConfigOutput

    static name: string
}

interface MessageDmsSetBootImageDownloadModeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetBootImageDownloadModeInput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsBootImageDownloadMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetBootImageDownloadModeInput
    /**
     * Set the 'Mode' field in the message.
     * @param valueMode a #QmiDmsBootImageDownloadMode.
     */
    setMode(valueMode: DmsBootImageDownloadMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetBootImageDownloadModeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetBootImageDownloadModeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetBootImageDownloadModeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetBootImageDownloadModeInput

    /**
     * Allocates a new #QmiMessageDmsSetBootImageDownloadModeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetBootImageDownloadModeInput.
     * @constructor 
     */
    static new(): MessageDmsSetBootImageDownloadModeInput
}

interface MessageDmsSetBootImageDownloadModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetBootImageDownloadModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetBootImageDownloadModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetBootImageDownloadModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetBootImageDownloadModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetBootImageDownloadModeOutput

    static name: string
}

interface MessageDmsSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetEventReportInput

    /**
     * Get the 'Activation State Reporting' field from `self`.
     */
    getActivationStateReporting(): [ /* returnType */ boolean, /* valueActivationStateReporting */ boolean ]
    /**
     * Get the 'Battery Level Report Limits' field from `self`.
     */
    getBatteryLevelReportLimits(): [ /* returnType */ boolean, /* valueBatteryLevelReportLimitsLowerLimit */ number, /* valueBatteryLevelReportLimitsUpperLimit */ number ]
    /**
     * Get the 'Operating Mode Reporting' field from `self`.
     */
    getOperatingModeReporting(): [ /* returnType */ boolean, /* valueOperatingModeReporting */ boolean ]
    /**
     * Get the 'PIN State Reporting' field from `self`.
     */
    getPinStateReporting(): [ /* returnType */ boolean, /* valuePinStateReporting */ boolean ]
    /**
     * Get the 'Power State Reporting' field from `self`.
     */
    getPowerStateReporting(): [ /* returnType */ boolean, /* valuePowerStateReporting */ boolean ]
    /**
     * Get the 'PRL Init Reporting' field from `self`.
     */
    getPrlInitReporting(): [ /* returnType */ boolean, /* valuePrlInitReporting */ boolean ]
    /**
     * Get the 'UIM State Reporting' field from `self`.
     */
    getUimStateReporting(): [ /* returnType */ boolean, /* valueUimStateReporting */ boolean ]
    /**
     * Get the 'Wireless Disable State Reporting' field from `self`.
     */
    getWirelessDisableStateReporting(): [ /* returnType */ boolean, /* valueWirelessDisableStateReporting */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetEventReportInput
    /**
     * Set the 'Activation State Reporting' field in the message.
     * @param valueActivationStateReporting a #gboolean.
     */
    setActivationStateReporting(valueActivationStateReporting: boolean): boolean
    /**
     * Set the 'Battery Level Report Limits' field in the message.
     * @param valueBatteryLevelReportLimitsLowerLimit a #guint8.
     * @param valueBatteryLevelReportLimitsUpperLimit a #guint8.
     */
    setBatteryLevelReportLimits(valueBatteryLevelReportLimitsLowerLimit: number, valueBatteryLevelReportLimitsUpperLimit: number): boolean
    /**
     * Set the 'Operating Mode Reporting' field in the message.
     * @param valueOperatingModeReporting a #gboolean.
     */
    setOperatingModeReporting(valueOperatingModeReporting: boolean): boolean
    /**
     * Set the 'PIN State Reporting' field in the message.
     * @param valuePinStateReporting a #gboolean.
     */
    setPinStateReporting(valuePinStateReporting: boolean): boolean
    /**
     * Set the 'Power State Reporting' field in the message.
     * @param valuePowerStateReporting a #gboolean.
     */
    setPowerStateReporting(valuePowerStateReporting: boolean): boolean
    /**
     * Set the 'PRL Init Reporting' field in the message.
     * @param valuePrlInitReporting a #gboolean.
     */
    setPrlInitReporting(valuePrlInitReporting: boolean): boolean
    /**
     * Set the 'UIM State Reporting' field in the message.
     * @param valueUimStateReporting a #gboolean.
     */
    setUimStateReporting(valueUimStateReporting: boolean): boolean
    /**
     * Set the 'Wireless Disable State Reporting' field in the message.
     * @param valueWirelessDisableStateReporting a #gboolean.
     */
    setWirelessDisableStateReporting(valueWirelessDisableStateReporting: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetEventReportInput

    /**
     * Allocates a new #QmiMessageDmsSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetEventReportInput.
     * @constructor 
     */
    static new(): MessageDmsSetEventReportInput
}

interface MessageDmsSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetEventReportOutput

    static name: string
}

interface MessageDmsSetFccAuthenticationOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetFccAuthenticationOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetFccAuthenticationOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetFccAuthenticationOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetFccAuthenticationOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetFccAuthenticationOutput

    static name: string
}

interface MessageDmsSetFirmwareIdOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetFirmwareIdOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetFirmwareIdOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetFirmwareIdOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetFirmwareIdOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetFirmwareIdOutput

    static name: string
}

interface MessageDmsSetFirmwarePreferenceInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceInput

    /**
     * Get the 'Download Override' field from `self`.
     */
    getDownloadOverride(): [ /* returnType */ boolean, /* valueDownloadOverride */ boolean ]
    /**
     * Get the 'List' field from `self`.
     * 
     * Version of qmi_message_dms_set_firmware_preference_input_get_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getList(): [ /* returnType */ boolean, /* valueListPtr */ MessageDmsSetFirmwarePreferenceInputListImage[] ]
    /**
     * Get the 'Modem Storage Index' field from `self`.
     */
    getModemStorageIndex(): [ /* returnType */ boolean, /* valueModemStorageIndex */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetFirmwarePreferenceInput
    /**
     * Set the 'Download Override' field in the message.
     * @param valueDownloadOverride a #gboolean.
     */
    setDownloadOverride(valueDownloadOverride: boolean): boolean
    /**
     * Set the 'List' field in the message.
     * @param valueListPtr array of #QmiMessageDmsSetFirmwarePreferenceInputListImage elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setList(valueListPtr: MessageDmsSetFirmwarePreferenceInputListImage[]): boolean
    /**
     * Set the 'Modem Storage Index' field in the message.
     * @param valueModemStorageIndex a #guint8.
     */
    setModemStorageIndex(valueModemStorageIndex: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetFirmwarePreferenceInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetFirmwarePreferenceInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceInput

    /**
     * Allocates a new #QmiMessageDmsSetFirmwarePreferenceInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetFirmwarePreferenceInput.
     * @constructor 
     */
    static new(): MessageDmsSetFirmwarePreferenceInput
}

interface MessageDmsSetFirmwarePreferenceInputListImage {

    // Own fields of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceInputListImage

    /**
     * a #QmiDmsFirmwareImageType.
     * @field 
     */
    type: DmsFirmwareImageType
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    uniqueId: object[]
    /**
     * a string.
     * @field 
     */
    buildId: string
}

/**
 * A QmiMessageDmsSetFirmwarePreferenceInputListImage struct.
 * @record 
 */
class MessageDmsSetFirmwarePreferenceInputListImage {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceInputListImage

    static name: string
}

interface MessageDmsSetFirmwarePreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceOutput

    /**
     * Get the 'Image Download List' field from `self`.
     */
    getImageDownloadList(): [ /* returnType */ boolean, /* valueImageDownloadList */ DmsFirmwareImageType[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetFirmwarePreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetFirmwarePreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetFirmwarePreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetFirmwarePreferenceOutput

    static name: string
}

interface MessageDmsSetOperatingModeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetOperatingModeInput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ DmsOperatingMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetOperatingModeInput
    /**
     * Set the 'Mode' field in the message.
     * @param valueMode a #QmiDmsOperatingMode.
     */
    setMode(valueMode: DmsOperatingMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetOperatingModeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetOperatingModeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetOperatingModeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetOperatingModeInput

    /**
     * Allocates a new #QmiMessageDmsSetOperatingModeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetOperatingModeInput.
     * @constructor 
     */
    static new(): MessageDmsSetOperatingModeInput
}

interface MessageDmsSetOperatingModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetOperatingModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetOperatingModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetOperatingModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetOperatingModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetOperatingModeOutput

    static name: string
}

interface MessageDmsSetServiceProgrammingCodeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetServiceProgrammingCodeInput

    /**
     * Get the 'Current Code' field from `self`.
     */
    getCurrentCode(): [ /* returnType */ boolean, /* valueCurrentCode */ string ]
    /**
     * Get the 'New Code' field from `self`.
     */
    getNewCode(): [ /* returnType */ boolean, /* valueNewCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetServiceProgrammingCodeInput
    /**
     * Set the 'Current Code' field in the message.
     * @param valueCurrentCode a constant string of exactly 6 characters.
     */
    setCurrentCode(valueCurrentCode: string): boolean
    /**
     * Set the 'New Code' field in the message.
     * @param valueNewCode a constant string of exactly 6 characters.
     */
    setNewCode(valueNewCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetServiceProgrammingCodeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetServiceProgrammingCodeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetServiceProgrammingCodeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetServiceProgrammingCodeInput

    /**
     * Allocates a new #QmiMessageDmsSetServiceProgrammingCodeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetServiceProgrammingCodeInput.
     * @constructor 
     */
    static new(): MessageDmsSetServiceProgrammingCodeInput
}

interface MessageDmsSetServiceProgrammingCodeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetServiceProgrammingCodeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetServiceProgrammingCodeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetServiceProgrammingCodeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetServiceProgrammingCodeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetServiceProgrammingCodeOutput

    static name: string
}

interface MessageDmsSetTimeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetTimeInput

    /**
     * Get the 'Time Reference Type' field from `self`.
     */
    getTimeReferenceType(): [ /* returnType */ boolean, /* valueTimeReferenceType */ DmsTimeReferenceType ]
    /**
     * Get the 'Time Value' field from `self`.
     */
    getTimeValue(): [ /* returnType */ boolean, /* valueTimeValue */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetTimeInput
    /**
     * Set the 'Time Reference Type' field in the message.
     * @param valueTimeReferenceType a #QmiDmsTimeReferenceType.
     */
    setTimeReferenceType(valueTimeReferenceType: DmsTimeReferenceType): boolean
    /**
     * Set the 'Time Value' field in the message.
     * @param valueTimeValue a #guint64.
     */
    setTimeValue(valueTimeValue: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetTimeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetTimeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetTimeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetTimeInput

    /**
     * Allocates a new #QmiMessageDmsSetTimeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetTimeInput.
     * @constructor 
     */
    static new(): MessageDmsSetTimeInput
}

interface MessageDmsSetTimeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetTimeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetTimeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetTimeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetTimeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetTimeOutput

    static name: string
}

interface MessageDmsSetUserLockCodeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetUserLockCodeInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoOldCode */ string, /* valueInfoNewCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetUserLockCodeInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoOldCode a constant string of exactly 4 characters.
     * @param valueInfoNewCode a constant string of exactly 4 characters.
     */
    setInfo(valueInfoOldCode: string, valueInfoNewCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetUserLockCodeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetUserLockCodeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetUserLockCodeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetUserLockCodeInput

    /**
     * Allocates a new #QmiMessageDmsSetUserLockCodeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetUserLockCodeInput.
     * @constructor 
     */
    static new(): MessageDmsSetUserLockCodeInput
}

interface MessageDmsSetUserLockCodeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetUserLockCodeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetUserLockCodeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetUserLockCodeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetUserLockCodeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetUserLockCodeOutput

    static name: string
}

interface MessageDmsSetUserLockStateInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetUserLockStateInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoEnabled */ boolean, /* valueInfoLockCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetUserLockStateInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoEnabled a #gboolean.
     * @param valueInfoLockCode a constant string of exactly 4 characters.
     */
    setInfo(valueInfoEnabled: boolean, valueInfoLockCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetUserLockStateInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetUserLockStateInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetUserLockStateInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSetUserLockStateInput

    /**
     * Allocates a new #QmiMessageDmsSetUserLockStateInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSetUserLockStateInput.
     * @constructor 
     */
    static new(): MessageDmsSetUserLockStateInput
}

interface MessageDmsSetUserLockStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSetUserLockStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSetUserLockStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSetUserLockStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSetUserLockStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSetUserLockStateOutput

    static name: string
}

interface MessageDmsSwiGetCurrentFirmwareOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSwiGetCurrentFirmwareOutput

    /**
     * Get the 'AMSS version' field from `self`.
     */
    getAmssVersion(): [ /* returnType */ boolean, /* valueAmssVersion */ string ]
    /**
     * Get the 'Boot version' field from `self`.
     */
    getBootVersion(): [ /* returnType */ boolean, /* valueBootVersion */ string ]
    /**
     * Get the 'Carrier' field from `self`.
     */
    getCarrier(): [ /* returnType */ boolean, /* valueCarrier */ string ]
    /**
     * Get the 'Carrier ID' field from `self`.
     */
    getCarrierId(): [ /* returnType */ boolean, /* valueCarrierId */ string ]
    /**
     * Get the 'Config version' field from `self`.
     */
    getConfigVersion(): [ /* returnType */ boolean, /* valueConfigVersion */ string ]
    /**
     * Get the 'Model' field from `self`.
     */
    getModel(): [ /* returnType */ boolean, /* valueModel */ string ]
    /**
     * Get the 'Package ID' field from `self`.
     */
    getPackageId(): [ /* returnType */ boolean, /* valuePackageId */ string ]
    /**
     * Get the 'PRI version' field from `self`.
     */
    getPriVersion(): [ /* returnType */ boolean, /* valuePriVersion */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'SKU ID' field from `self`.
     */
    getSkuId(): [ /* returnType */ boolean, /* valueSkuId */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSwiGetCurrentFirmwareOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSwiGetCurrentFirmwareOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSwiGetCurrentFirmwareOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSwiGetCurrentFirmwareOutput

    static name: string
}

interface MessageDmsSwiGetUsbCompositionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSwiGetUsbCompositionOutput

    /**
     * Get the 'Current' field from `self`.
     */
    getCurrent(): [ /* returnType */ boolean, /* valueCurrent */ DmsSwiUsbComposition ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Supported' field from `self`.
     */
    getSupported(): [ /* returnType */ boolean, /* valueSupported */ DmsSwiUsbComposition[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSwiGetUsbCompositionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSwiGetUsbCompositionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSwiGetUsbCompositionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSwiGetUsbCompositionOutput

    static name: string
}

interface MessageDmsSwiSetUsbCompositionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSwiSetUsbCompositionInput

    /**
     * Get the 'Current' field from `self`.
     */
    getCurrent(): [ /* returnType */ boolean, /* valueCurrent */ DmsSwiUsbComposition ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSwiSetUsbCompositionInput
    /**
     * Set the 'Current' field in the message.
     * @param valueCurrent a #QmiDmsSwiUsbComposition.
     */
    setCurrent(valueCurrent: DmsSwiUsbComposition): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSwiSetUsbCompositionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSwiSetUsbCompositionInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSwiSetUsbCompositionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsSwiSetUsbCompositionInput

    /**
     * Allocates a new #QmiMessageDmsSwiSetUsbCompositionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsSwiSetUsbCompositionInput.
     * @constructor 
     */
    static new(): MessageDmsSwiSetUsbCompositionInput
}

interface MessageDmsSwiSetUsbCompositionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsSwiSetUsbCompositionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsSwiSetUsbCompositionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsSwiSetUsbCompositionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsSwiSetUsbCompositionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsSwiSetUsbCompositionOutput

    static name: string
}

interface MessageDmsUimChangePinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimChangePinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ DmsUimPinId, /* valueInfoOldPin */ string, /* valueInfoNewPin */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimChangePinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiDmsUimPinId.
     * @param valueInfoOldPin a constant string.
     * @param valueInfoNewPin a constant string.
     */
    setInfo(valueInfoPinId: DmsUimPinId, valueInfoOldPin: string, valueInfoNewPin: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimChangePinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimChangePinInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimChangePinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimChangePinInput

    /**
     * Allocates a new #QmiMessageDmsUimChangePinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimChangePinInput.
     * @constructor 
     */
    static new(): MessageDmsUimChangePinInput
}

interface MessageDmsUimChangePinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimChangePinOutput

    /**
     * Get the 'Pin Retries Status' field from `self`.
     */
    getPinRetriesStatus(): [ /* returnType */ boolean, /* valuePinRetriesStatusVerifyRetriesLeft */ number, /* valuePinRetriesStatusUnblockRetriesLeft */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimChangePinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimChangePinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimChangePinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimChangePinOutput

    static name: string
}

interface MessageDmsUimGetCkStatusInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetCkStatusInput

    /**
     * Get the 'Facility' field from `self`.
     */
    getFacility(): [ /* returnType */ boolean, /* valueFacility */ DmsUimFacility ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetCkStatusInput
    /**
     * Set the 'Facility' field in the message.
     * @param valueFacility a #QmiDmsUimFacility.
     */
    setFacility(valueFacility: DmsUimFacility): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetCkStatusInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetCkStatusInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetCkStatusInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimGetCkStatusInput

    /**
     * Allocates a new #QmiMessageDmsUimGetCkStatusInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimGetCkStatusInput.
     * @constructor 
     */
    static new(): MessageDmsUimGetCkStatusInput
}

interface MessageDmsUimGetCkStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetCkStatusOutput

    /**
     * Get the 'CK Status' field from `self`.
     */
    getCkStatus(): [ /* returnType */ boolean, /* valueCkStatusFacilityState */ DmsUimFacilityState, /* valueCkStatusVerifyRetriesLeft */ number, /* valueCkStatusUnblockRetriesLeft */ number ]
    /**
     * Get the 'Operation Blocking Facility' field from `self`.
     */
    getOperationBlockingFacility(): [ /* returnType */ boolean, /* valueOperationBlockingFacility */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetCkStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetCkStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetCkStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetCkStatusOutput

    static name: string
}

interface MessageDmsUimGetIccidOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetIccidOutput

    /**
     * Get the 'ICCID' field from `self`.
     */
    getIccid(): [ /* returnType */ boolean, /* valueIccid */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetIccidOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetIccidOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetIccidOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetIccidOutput

    static name: string
}

interface MessageDmsUimGetImsiOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetImsiOutput

    /**
     * Get the 'IMSI' field from `self`.
     */
    getImsi(): [ /* returnType */ boolean, /* valueImsi */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetImsiOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetImsiOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetImsiOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetImsiOutput

    static name: string
}

interface MessageDmsUimGetPinStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetPinStatusOutput

    /**
     * Get the 'PIN1 Status' field from `self`.
     */
    getPin1Status(): [ /* returnType */ boolean, /* valuePin1StatusCurrentStatus */ DmsUimPinStatus, /* valuePin1StatusVerifyRetriesLeft */ number, /* valuePin1StatusUnblockRetriesLeft */ number ]
    /**
     * Get the 'PIN2 Status' field from `self`.
     */
    getPin2Status(): [ /* returnType */ boolean, /* valuePin2StatusCurrentStatus */ DmsUimPinStatus, /* valuePin2StatusVerifyRetriesLeft */ number, /* valuePin2StatusUnblockRetriesLeft */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetPinStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetPinStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetPinStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetPinStatusOutput

    static name: string
}

interface MessageDmsUimGetStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimGetStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueState */ DmsUimState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimGetStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimGetStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimGetStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimGetStateOutput

    static name: string
}

interface MessageDmsUimSetCkProtectionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimSetCkProtectionInput

    /**
     * Get the 'Facility' field from `self`.
     */
    getFacility(): [ /* returnType */ boolean, /* valueFacilityFacility */ DmsUimFacility, /* valueFacilityFacilityState */ DmsUimFacilityState, /* valueFacilityFacilityDepersonalizationControlKey */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimSetCkProtectionInput
    /**
     * Set the 'Facility' field in the message.
     * @param valueFacilityFacility a #QmiDmsUimFacility.
     * @param valueFacilityFacilityState a #QmiDmsUimFacilityState.
     * @param valueFacilityFacilityDepersonalizationControlKey a constant string.
     */
    setFacility(valueFacilityFacility: DmsUimFacility, valueFacilityFacilityState: DmsUimFacilityState, valueFacilityFacilityDepersonalizationControlKey: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimSetCkProtectionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimSetCkProtectionInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimSetCkProtectionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimSetCkProtectionInput

    /**
     * Allocates a new #QmiMessageDmsUimSetCkProtectionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimSetCkProtectionInput.
     * @constructor 
     */
    static new(): MessageDmsUimSetCkProtectionInput
}

interface MessageDmsUimSetCkProtectionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimSetCkProtectionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Verify Retries Left' field from `self`.
     */
    getVerifyRetriesLeft(): [ /* returnType */ boolean, /* valueVerifyRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimSetCkProtectionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimSetCkProtectionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimSetCkProtectionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimSetCkProtectionOutput

    static name: string
}

interface MessageDmsUimSetPinProtectionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimSetPinProtectionInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ DmsUimPinId, /* valueInfoProtectionEnabled */ boolean, /* valueInfoPin */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimSetPinProtectionInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiDmsUimPinId.
     * @param valueInfoProtectionEnabled a #gboolean.
     * @param valueInfoPin a constant string.
     */
    setInfo(valueInfoPinId: DmsUimPinId, valueInfoProtectionEnabled: boolean, valueInfoPin: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimSetPinProtectionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimSetPinProtectionInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimSetPinProtectionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimSetPinProtectionInput

    /**
     * Allocates a new #QmiMessageDmsUimSetPinProtectionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimSetPinProtectionInput.
     * @constructor 
     */
    static new(): MessageDmsUimSetPinProtectionInput
}

interface MessageDmsUimSetPinProtectionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimSetPinProtectionOutput

    /**
     * Get the 'Pin Retries Status' field from `self`.
     */
    getPinRetriesStatus(): [ /* returnType */ boolean, /* valuePinRetriesStatusVerifyRetriesLeft */ number, /* valuePinRetriesStatusUnblockRetriesLeft */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimSetPinProtectionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimSetPinProtectionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimSetPinProtectionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimSetPinProtectionOutput

    static name: string
}

interface MessageDmsUimUnblockCkInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimUnblockCkInput

    /**
     * Get the 'Facility' field from `self`.
     */
    getFacility(): [ /* returnType */ boolean, /* valueFacilityFacility */ DmsUimFacility, /* valueFacilityFacilityControlKey */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimUnblockCkInput
    /**
     * Set the 'Facility' field in the message.
     * @param valueFacilityFacility a #QmiDmsUimFacility.
     * @param valueFacilityFacilityControlKey a constant string.
     */
    setFacility(valueFacilityFacility: DmsUimFacility, valueFacilityFacilityControlKey: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimUnblockCkInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimUnblockCkInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimUnblockCkInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimUnblockCkInput

    /**
     * Allocates a new #QmiMessageDmsUimUnblockCkInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimUnblockCkInput.
     * @constructor 
     */
    static new(): MessageDmsUimUnblockCkInput
}

interface MessageDmsUimUnblockCkOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimUnblockCkOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Unblock Retries Left' field from `self`.
     */
    getUnblockRetriesLeft(): [ /* returnType */ boolean, /* valueUnblockRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimUnblockCkOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimUnblockCkOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimUnblockCkOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimUnblockCkOutput

    static name: string
}

interface MessageDmsUimUnblockPinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimUnblockPinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ DmsUimPinId, /* valueInfoPuk */ string, /* valueInfoNewPin */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimUnblockPinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiDmsUimPinId.
     * @param valueInfoPuk a constant string.
     * @param valueInfoNewPin a constant string.
     */
    setInfo(valueInfoPinId: DmsUimPinId, valueInfoPuk: string, valueInfoNewPin: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimUnblockPinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimUnblockPinInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimUnblockPinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimUnblockPinInput

    /**
     * Allocates a new #QmiMessageDmsUimUnblockPinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimUnblockPinInput.
     * @constructor 
     */
    static new(): MessageDmsUimUnblockPinInput
}

interface MessageDmsUimUnblockPinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimUnblockPinOutput

    /**
     * Get the 'Pin Retries Status' field from `self`.
     */
    getPinRetriesStatus(): [ /* returnType */ boolean, /* valuePinRetriesStatusVerifyRetriesLeft */ number, /* valuePinRetriesStatusUnblockRetriesLeft */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimUnblockPinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimUnblockPinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimUnblockPinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimUnblockPinOutput

    static name: string
}

interface MessageDmsUimVerifyPinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimVerifyPinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ DmsUimPinId, /* valueInfoPin */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimVerifyPinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiDmsUimPinId.
     * @param valueInfoPin a constant string.
     */
    setInfo(valueInfoPinId: DmsUimPinId, valueInfoPin: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimVerifyPinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimVerifyPinInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimVerifyPinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsUimVerifyPinInput

    /**
     * Allocates a new #QmiMessageDmsUimVerifyPinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsUimVerifyPinInput.
     * @constructor 
     */
    static new(): MessageDmsUimVerifyPinInput
}

interface MessageDmsUimVerifyPinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsUimVerifyPinOutput

    /**
     * Get the 'Pin Retries Status' field from `self`.
     */
    getPinRetriesStatus(): [ /* returnType */ boolean, /* valuePinRetriesStatusVerifyRetriesLeft */ number, /* valuePinRetriesStatusUnblockRetriesLeft */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsUimVerifyPinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsUimVerifyPinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsUimVerifyPinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsUimVerifyPinOutput

    static name: string
}

interface MessageDmsValidateServiceProgrammingCodeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsValidateServiceProgrammingCodeInput

    /**
     * Get the 'Service Programming Code' field from `self`.
     */
    getServiceProgrammingCode(): [ /* returnType */ boolean, /* valueServiceProgrammingCode */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsValidateServiceProgrammingCodeInput
    /**
     * Set the 'Service Programming Code' field in the message.
     * @param valueServiceProgrammingCode a constant string of exactly 6 characters.
     */
    setServiceProgrammingCode(valueServiceProgrammingCode: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsValidateServiceProgrammingCodeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsValidateServiceProgrammingCodeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsValidateServiceProgrammingCodeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsValidateServiceProgrammingCodeInput

    /**
     * Allocates a new #QmiMessageDmsValidateServiceProgrammingCodeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsValidateServiceProgrammingCodeInput.
     * @constructor 
     */
    static new(): MessageDmsValidateServiceProgrammingCodeInput
}

interface MessageDmsValidateServiceProgrammingCodeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsValidateServiceProgrammingCodeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsValidateServiceProgrammingCodeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsValidateServiceProgrammingCodeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsValidateServiceProgrammingCodeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsValidateServiceProgrammingCodeOutput

    static name: string
}

interface MessageDmsWriteUserDataInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsWriteUserDataInput

    /**
     * Get the 'User Data' field from `self`.
     */
    getUserData(): [ /* returnType */ boolean, /* valueUserData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsWriteUserDataInput
    /**
     * Set the 'User Data' field in the message.
     * @param valueUserData a #GArray of #guint8 elements. A new reference to `value_user_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setUserData(valueUserData: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsWriteUserDataInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsWriteUserDataInput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsWriteUserDataInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDmsWriteUserDataInput

    /**
     * Allocates a new #QmiMessageDmsWriteUserDataInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDmsWriteUserDataInput.
     * @constructor 
     */
    static new(): MessageDmsWriteUserDataInput
}

interface MessageDmsWriteUserDataOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDmsWriteUserDataOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDmsWriteUserDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDmsWriteUserDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDmsWriteUserDataOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDmsWriteUserDataOutput

    static name: string
}

interface MessageDpmClosePortOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDpmClosePortOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDpmClosePortOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDpmClosePortOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDpmClosePortOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDpmClosePortOutput

    static name: string
}

interface MessageDpmOpenPortInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDpmOpenPortInput

    /**
     * Get the 'Control Ports' field from `self`.
     * 
     * Version of qmi_message_dpm_open_port_input_get_control_ports() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getControlPorts(): [ /* returnType */ boolean, /* valueControlPortsPtr */ MessageDpmOpenPortInputControlPortsElement[] ]
    /**
     * Get the 'Hardware Data Ports' field from `self`.
     * 
     * Version of qmi_message_dpm_open_port_input_get_hardware_data_ports() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getHardwareDataPorts(): [ /* returnType */ boolean, /* valueHardwareDataPortsPtr */ MessageDpmOpenPortInputHardwareDataPortsElement[] ]
    /**
     * Get the 'Software Data Ports' field from `self`.
     * 
     * Version of qmi_message_dpm_open_port_input_get_software_data_ports() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getSoftwareDataPorts(): [ /* returnType */ boolean, /* valueSoftwareDataPortsPtr */ MessageDpmOpenPortInputSoftwareDataPortsElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDpmOpenPortInput
    /**
     * Set the 'Control Ports' field in the message.
     * @param valueControlPortsPtr array of #QmiMessageDpmOpenPortInputControlPortsElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setControlPorts(valueControlPortsPtr: MessageDpmOpenPortInputControlPortsElement[]): boolean
    /**
     * Set the 'Hardware Data Ports' field in the message.
     * @param valueHardwareDataPortsPtr array of #QmiMessageDpmOpenPortInputHardwareDataPortsElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setHardwareDataPorts(valueHardwareDataPortsPtr: MessageDpmOpenPortInputHardwareDataPortsElement[]): boolean
    /**
     * Set the 'Software Data Ports' field in the message.
     * @param valueSoftwareDataPortsPtr array of #QmiMessageDpmOpenPortInputSoftwareDataPortsElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setSoftwareDataPorts(valueSoftwareDataPortsPtr: MessageDpmOpenPortInputSoftwareDataPortsElement[]): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDpmOpenPortInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDpmOpenPortInput {

    // Own properties of Qmi-1.0.Qmi.MessageDpmOpenPortInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDpmOpenPortInput

    /**
     * Allocates a new #QmiMessageDpmOpenPortInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDpmOpenPortInput.
     * @constructor 
     */
    static new(): MessageDpmOpenPortInput
}

interface MessageDpmOpenPortInputControlPortsElement {

    // Own fields of Qmi-1.0.Qmi.MessageDpmOpenPortInputControlPortsElement

    /**
     * a string.
     * @field 
     */
    portName: string
    /**
     * a #QmiDataEndpointType.
     * @field 
     */
    endpointType: DataEndpointType
    /**
     * a #guint32.
     * @field 
     */
    interfaceNumber: number
}

/**
 * A QmiMessageDpmOpenPortInputControlPortsElement struct.
 * @record 
 */
class MessageDpmOpenPortInputControlPortsElement {

    // Own properties of Qmi-1.0.Qmi.MessageDpmOpenPortInputControlPortsElement

    static name: string
}

interface MessageDpmOpenPortInputHardwareDataPortsElement {

    // Own fields of Qmi-1.0.Qmi.MessageDpmOpenPortInputHardwareDataPortsElement

    /**
     * a #QmiDataEndpointType.
     * @field 
     */
    endpointType: DataEndpointType
    /**
     * a #guint32.
     * @field 
     */
    interfaceNumber: number
    /**
     * a #guint32.
     * @field 
     */
    rxEndpointNumber: number
    /**
     * a #guint32.
     * @field 
     */
    txEndpointNumber: number
}

/**
 * A QmiMessageDpmOpenPortInputHardwareDataPortsElement struct.
 * @record 
 */
class MessageDpmOpenPortInputHardwareDataPortsElement {

    // Own properties of Qmi-1.0.Qmi.MessageDpmOpenPortInputHardwareDataPortsElement

    static name: string
}

interface MessageDpmOpenPortInputSoftwareDataPortsElement {

    // Own fields of Qmi-1.0.Qmi.MessageDpmOpenPortInputSoftwareDataPortsElement

    /**
     * a #QmiDataEndpointType.
     * @field 
     */
    endpointType: DataEndpointType
    /**
     * a #guint32.
     * @field 
     */
    interfaceNumber: number
    /**
     * a string.
     * @field 
     */
    portName: string
}

/**
 * A QmiMessageDpmOpenPortInputSoftwareDataPortsElement struct.
 * @record 
 */
class MessageDpmOpenPortInputSoftwareDataPortsElement {

    // Own properties of Qmi-1.0.Qmi.MessageDpmOpenPortInputSoftwareDataPortsElement

    static name: string
}

interface MessageDpmOpenPortOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDpmOpenPortOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDpmOpenPortOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDpmOpenPortOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDpmOpenPortOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDpmOpenPortOutput

    static name: string
}

interface MessageDsdGetApnInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDsdGetApnInfoInput

    /**
     * Get the 'APN Type' field from `self`.
     */
    getApnType(): [ /* returnType */ boolean, /* valueApnType */ DsdApnType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDsdGetApnInfoInput
    /**
     * Set the 'APN Type' field in the message.
     * @param valueApnType a #QmiDsdApnType.
     */
    setApnType(valueApnType: DsdApnType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDsdGetApnInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDsdGetApnInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessageDsdGetApnInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDsdGetApnInfoInput

    /**
     * Allocates a new #QmiMessageDsdGetApnInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDsdGetApnInfoInput.
     * @constructor 
     */
    static new(): MessageDsdGetApnInfoInput
}

interface MessageDsdGetApnInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDsdGetApnInfoOutput

    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDsdGetApnInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDsdGetApnInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDsdGetApnInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDsdGetApnInfoOutput

    static name: string
}

interface MessageDsdSetApnTypeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageDsdSetApnTypeInput

    /**
     * Get the 'APN Type' field from `self`.
     */
    getApnType(): [ /* returnType */ boolean, /* valueApnTypeName */ string, /* valueApnTypeType */ DsdApnTypePreference ]
    /**
     * Get the 'APN Type Preference Mask' field from `self`.
     */
    getApnTypePreferenceMask(): [ /* returnType */ boolean, /* valueApnTypePreferenceMask */ DsdApnTypePreference ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDsdSetApnTypeInput
    /**
     * Set the 'APN Type' field in the message.
     * @param valueApnTypeName a constant string.
     * @param valueApnTypeType a #QmiDsdApnTypePreference.
     */
    setApnType(valueApnTypeName: string, valueApnTypeType: DsdApnTypePreference): boolean
    /**
     * Set the 'APN Type Preference Mask' field in the message.
     * @param valueApnTypePreferenceMask a #QmiDsdApnTypePreference.
     */
    setApnTypePreferenceMask(valueApnTypePreferenceMask: DsdApnTypePreference): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDsdSetApnTypeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDsdSetApnTypeInput {

    // Own properties of Qmi-1.0.Qmi.MessageDsdSetApnTypeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageDsdSetApnTypeInput

    /**
     * Allocates a new #QmiMessageDsdSetApnTypeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageDsdSetApnTypeInput.
     * @constructor 
     */
    static new(): MessageDsdSetApnTypeInput
}

interface MessageDsdSetApnTypeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageDsdSetApnTypeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageDsdSetApnTypeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageDsdSetApnTypeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageDsdSetApnTypeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageDsdSetApnTypeOutput

    static name: string
}

interface MessageFoxGetFirmwareVersionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageFoxGetFirmwareVersionInput

    /**
     * Get the 'Version Type' field from `self`.
     */
    getVersionType(): [ /* returnType */ boolean, /* valueVersionType */ FoxFirmwareVersionType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageFoxGetFirmwareVersionInput
    /**
     * Set the 'Version Type' field in the message.
     * @param valueVersionType a #QmiFoxFirmwareVersionType.
     */
    setVersionType(valueVersionType: FoxFirmwareVersionType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageFoxGetFirmwareVersionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageFoxGetFirmwareVersionInput {

    // Own properties of Qmi-1.0.Qmi.MessageFoxGetFirmwareVersionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageFoxGetFirmwareVersionInput

    /**
     * Allocates a new #QmiMessageFoxGetFirmwareVersionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageFoxGetFirmwareVersionInput.
     * @constructor 
     */
    static new(): MessageFoxGetFirmwareVersionInput
}

interface MessageFoxGetFirmwareVersionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageFoxGetFirmwareVersionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageFoxGetFirmwareVersionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageFoxGetFirmwareVersionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageFoxGetFirmwareVersionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageFoxGetFirmwareVersionOutput

    static name: string
}

interface MessageGasDmsGetFirmwareListInput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsGetFirmwareListInput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ GasFirmwareListingMode ]
    /**
     * Get the 'Name' field from `self`.
     */
    getName(): [ /* returnType */ boolean, /* valueName */ string ]
    /**
     * Get the 'Slot Index' field from `self`.
     */
    getSlotIndex(): [ /* returnType */ boolean, /* valueSlotIndex */ number ]
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsGetFirmwareListInput
    /**
     * Set the 'Mode' field in the message.
     * @param valueMode a #QmiGasFirmwareListingMode.
     */
    setMode(valueMode: GasFirmwareListingMode): boolean
    /**
     * Set the 'Name' field in the message.
     * @param valueName a constant string.
     */
    setName(valueName: string): boolean
    /**
     * Set the 'Slot Index' field in the message.
     * @param valueSlotIndex a #guint8.
     */
    setSlotIndex(valueSlotIndex: number): boolean
    /**
     * Set the 'Version' field in the message.
     * @param valueVersion a constant string.
     */
    setVersion(valueVersion: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsGetFirmwareListInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsGetFirmwareListInput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsGetFirmwareListInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageGasDmsGetFirmwareListInput

    /**
     * Allocates a new #QmiMessageGasDmsGetFirmwareListInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageGasDmsGetFirmwareListInput.
     * @constructor 
     */
    static new(): MessageGasDmsGetFirmwareListInput
}

interface MessageGasDmsGetFirmwareListOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsGetFirmwareListOutput

    /**
     * Get the 'Mode' field from `self`.
     */
    getMode(): [ /* returnType */ boolean, /* valueMode */ GasFirmwareListingMode ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Stored Firmware 1' field from `self`.
     */
    getStoredFirmware1(): [ /* returnType */ boolean, /* valueStoredFirmware1Index */ number, /* valueStoredFirmware1Name */ string, /* valueStoredFirmware1Version */ string, /* valueStoredFirmware1PriRevision */ string ]
    /**
     * Get the 'Stored Firmware 2' field from `self`.
     */
    getStoredFirmware2(): [ /* returnType */ boolean, /* valueStoredFirmware2Index */ number, /* valueStoredFirmware2Name */ string, /* valueStoredFirmware2Version */ string, /* valueStoredFirmware2PriRevision */ string ]
    /**
     * Get the 'Stored Firmware 3' field from `self`.
     */
    getStoredFirmware3(): [ /* returnType */ boolean, /* valueStoredFirmware3Index */ number, /* valueStoredFirmware3Name */ string, /* valueStoredFirmware3Version */ string, /* valueStoredFirmware3PriRevision */ string ]
    /**
     * Get the 'Stored Firmware 4' field from `self`.
     */
    getStoredFirmware4(): [ /* returnType */ boolean, /* valueStoredFirmware4Index */ number, /* valueStoredFirmware4Name */ string, /* valueStoredFirmware4Version */ string, /* valueStoredFirmware4PriRevision */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsGetFirmwareListOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsGetFirmwareListOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsGetFirmwareListOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsGetFirmwareListOutput

    static name: string
}

interface MessageGasDmsGetUsbCompositionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsGetUsbCompositionOutput

    /**
     * Get the 'Composition Persistence' field from `self`.
     */
    getCompositionPersistence(): [ /* returnType */ boolean, /* valueCompositionPersistence */ boolean ]
    /**
     * Get the 'Endpoint Type' field from `self`.
     */
    getEndpointType(): [ /* returnType */ boolean, /* valueEndpointType */ GasUsbCompositionEndpointType ]
    /**
     * Get the 'Immediate Setting' field from `self`.
     */
    getImmediateSetting(): [ /* returnType */ boolean, /* valueImmediateSetting */ boolean ]
    /**
     * Get the 'Reboot After Setting' field from `self`.
     */
    getRebootAfterSetting(): [ /* returnType */ boolean, /* valueRebootAfterSetting */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'USB Composition' field from `self`.
     */
    getUsbComposition(): [ /* returnType */ boolean, /* valueUsbComposition */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsGetUsbCompositionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsGetUsbCompositionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsGetUsbCompositionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsGetUsbCompositionOutput

    static name: string
}

interface MessageGasDmsSetActiveFirmwareInput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsSetActiveFirmwareInput

    /**
     * Get the 'Carrier Name' field from `self`.
     */
    getCarrierName(): [ /* returnType */ boolean, /* valueCarrierName */ string ]
    /**
     * Get the 'Slot Index' field from `self`.
     */
    getSlotIndex(): [ /* returnType */ boolean, /* valueSlotIndex */ number ]
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsSetActiveFirmwareInput
    /**
     * Set the 'Carrier Name' field in the message.
     * @param valueCarrierName a constant string.
     */
    setCarrierName(valueCarrierName: string): boolean
    /**
     * Set the 'Slot Index' field in the message.
     * @param valueSlotIndex a #guint8.
     */
    setSlotIndex(valueSlotIndex: number): boolean
    /**
     * Set the 'Version' field in the message.
     * @param valueVersion a constant string.
     */
    setVersion(valueVersion: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsSetActiveFirmwareInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsSetActiveFirmwareInput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsSetActiveFirmwareInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageGasDmsSetActiveFirmwareInput

    /**
     * Allocates a new #QmiMessageGasDmsSetActiveFirmwareInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageGasDmsSetActiveFirmwareInput.
     * @constructor 
     */
    static new(): MessageGasDmsSetActiveFirmwareInput
}

interface MessageGasDmsSetActiveFirmwareOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsSetActiveFirmwareOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsSetActiveFirmwareOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsSetActiveFirmwareOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsSetActiveFirmwareOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsSetActiveFirmwareOutput

    static name: string
}

interface MessageGasDmsSetUsbCompositionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsSetUsbCompositionInput

    /**
     * Get the 'Composition Persistence' field from `self`.
     */
    getCompositionPersistence(): [ /* returnType */ boolean, /* valueCompositionPersistence */ boolean ]
    /**
     * Get the 'Endpoint Type' field from `self`.
     */
    getEndpointType(): [ /* returnType */ boolean, /* valueEndpointType */ GasUsbCompositionEndpointType ]
    /**
     * Get the 'Immediate Setting' field from `self`.
     */
    getImmediateSetting(): [ /* returnType */ boolean, /* valueImmediateSetting */ boolean ]
    /**
     * Get the 'Reboot After Setting' field from `self`.
     */
    getRebootAfterSetting(): [ /* returnType */ boolean, /* valueRebootAfterSetting */ boolean ]
    /**
     * Get the 'USB Composition' field from `self`.
     */
    getUsbComposition(): [ /* returnType */ boolean, /* valueUsbComposition */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsSetUsbCompositionInput
    /**
     * Set the 'Composition Persistence' field in the message.
     * @param valueCompositionPersistence a #gboolean.
     */
    setCompositionPersistence(valueCompositionPersistence: boolean): boolean
    /**
     * Set the 'Endpoint Type' field in the message.
     * @param valueEndpointType a #QmiGasUsbCompositionEndpointType.
     */
    setEndpointType(valueEndpointType: GasUsbCompositionEndpointType): boolean
    /**
     * Set the 'Immediate Setting' field in the message.
     * @param valueImmediateSetting a #gboolean.
     */
    setImmediateSetting(valueImmediateSetting: boolean): boolean
    /**
     * Set the 'Reboot After Setting' field in the message.
     * @param valueRebootAfterSetting a #gboolean.
     */
    setRebootAfterSetting(valueRebootAfterSetting: boolean): boolean
    /**
     * Set the 'USB Composition' field in the message.
     * @param valueUsbComposition a #guint32.
     */
    setUsbComposition(valueUsbComposition: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsSetUsbCompositionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsSetUsbCompositionInput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsSetUsbCompositionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageGasDmsSetUsbCompositionInput

    /**
     * Allocates a new #QmiMessageGasDmsSetUsbCompositionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageGasDmsSetUsbCompositionInput.
     * @constructor 
     */
    static new(): MessageGasDmsSetUsbCompositionInput
}

interface MessageGasDmsSetUsbCompositionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGasDmsSetUsbCompositionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGasDmsSetUsbCompositionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGasDmsSetUsbCompositionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGasDmsSetUsbCompositionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGasDmsSetUsbCompositionOutput

    static name: string
}

interface MessageGmsTestGetValueOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGmsTestGetValueOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Test Mandatory Value' field from `self`.
     */
    getTestMandatoryValue(): [ /* returnType */ boolean, /* valueTestMandatoryValue */ number ]
    /**
     * Get the 'Test Optional Value' field from `self`.
     */
    getTestOptionalValue(): [ /* returnType */ boolean, /* valueTestOptionalValue */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGmsTestGetValueOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGmsTestGetValueOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGmsTestGetValueOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGmsTestGetValueOutput

    static name: string
}

interface MessageGmsTestSetValueInput {

    // Owm methods of Qmi-1.0.Qmi.MessageGmsTestSetValueInput

    /**
     * Get the 'Test Mandatory Value' field from `self`.
     */
    getTestMandatoryValue(): [ /* returnType */ boolean, /* valueTestMandatoryValue */ number ]
    /**
     * Get the 'Test Optional Value' field from `self`.
     */
    getTestOptionalValue(): [ /* returnType */ boolean, /* valueTestOptionalValue */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGmsTestSetValueInput
    /**
     * Set the 'Test Mandatory Value' field in the message.
     * @param valueTestMandatoryValue a #guint8.
     */
    setTestMandatoryValue(valueTestMandatoryValue: number): boolean
    /**
     * Set the 'Test Optional Value' field in the message.
     * @param valueTestOptionalValue a #guint8.
     */
    setTestOptionalValue(valueTestOptionalValue: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGmsTestSetValueInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGmsTestSetValueInput {

    // Own properties of Qmi-1.0.Qmi.MessageGmsTestSetValueInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageGmsTestSetValueInput

    /**
     * Allocates a new #QmiMessageGmsTestSetValueInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageGmsTestSetValueInput.
     * @constructor 
     */
    static new(): MessageGmsTestSetValueInput
}

interface MessageGmsTestSetValueOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageGmsTestSetValueOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageGmsTestSetValueOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageGmsTestSetValueOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageGmsTestSetValueOutput {

    // Own properties of Qmi-1.0.Qmi.MessageGmsTestSetValueOutput

    static name: string
}

interface MessageLocDeleteAssistanceDataInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataInput

    /**
     * Get the 'Delete All' field from `self`.
     */
    getDeleteAll(): [ /* returnType */ boolean, /* valueDeleteAll */ boolean ]
    /**
     * Get the 'Delete Cell Database Mask' field from `self`.
     */
    getDeleteCellDatabaseMask(): [ /* returnType */ boolean, /* valueDeleteCellDatabaseMask */ LocDeleteCellDatabase ]
    /**
     * Get the 'Delete Clock Info Mask' field from `self`.
     */
    getDeleteClockInfoMask(): [ /* returnType */ boolean, /* valueDeleteClockInfoMask */ LocDeleteClockInfo ]
    /**
     * Get the 'Delete GNSS Data Mask' field from `self`.
     */
    getDeleteGnssDataMask(): [ /* returnType */ boolean, /* valueDeleteGnssDataMask */ LocDeleteGnssData ]
    /**
     * Get the 'Delete SV Info' field from `self`.
     * 
     * Version of qmi_message_loc_delete_assistance_data_input_get_delete_sv_info() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getDeleteSvInfo(): [ /* returnType */ boolean, /* valueDeleteSvInfoPtr */ MessageLocDeleteAssistanceDataInputDeleteSvInfoElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocDeleteAssistanceDataInput
    /**
     * Set the 'Delete All' field in the message.
     * @param valueDeleteAll a #gboolean.
     */
    setDeleteAll(valueDeleteAll: boolean): boolean
    /**
     * Set the 'Delete Cell Database Mask' field in the message.
     * @param valueDeleteCellDatabaseMask a #QmiLocDeleteCellDatabase.
     */
    setDeleteCellDatabaseMask(valueDeleteCellDatabaseMask: LocDeleteCellDatabase): boolean
    /**
     * Set the 'Delete Clock Info Mask' field in the message.
     * @param valueDeleteClockInfoMask a #QmiLocDeleteClockInfo.
     */
    setDeleteClockInfoMask(valueDeleteClockInfoMask: LocDeleteClockInfo): boolean
    /**
     * Set the 'Delete GNSS Data Mask' field in the message.
     * @param valueDeleteGnssDataMask a #QmiLocDeleteGnssData.
     */
    setDeleteGnssDataMask(valueDeleteGnssDataMask: LocDeleteGnssData): boolean
    /**
     * Set the 'Delete SV Info' field in the message.
     * @param valueDeleteSvInfoPtr array of #QmiMessageLocDeleteAssistanceDataInputDeleteSvInfoElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setDeleteSvInfo(valueDeleteSvInfoPtr: MessageLocDeleteAssistanceDataInputDeleteSvInfoElement[]): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocDeleteAssistanceDataInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocDeleteAssistanceDataInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataInput

    /**
     * Allocates a new #QmiMessageLocDeleteAssistanceDataInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocDeleteAssistanceDataInput.
     * @constructor 
     */
    static new(): MessageLocDeleteAssistanceDataInput
}

interface MessageLocDeleteAssistanceDataInputDeleteSvInfoElement {

    // Own fields of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataInputDeleteSvInfoElement

    /**
     * a #guint16.
     * @field 
     */
    gnssSvId: number
    /**
     * a #QmiLocSystem.
     * @field 
     */
    system: LocSystem
    /**
     * a #QmiLocDeleteSvInfo.
     * @field 
     */
    deleteSvInfoMask: LocDeleteSvInfo
}

/**
 * A QmiMessageLocDeleteAssistanceDataInputDeleteSvInfoElement struct.
 * @record 
 */
class MessageLocDeleteAssistanceDataInputDeleteSvInfoElement {

    // Own properties of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataInputDeleteSvInfoElement

    static name: string
}

interface MessageLocDeleteAssistanceDataOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocDeleteAssistanceDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocDeleteAssistanceDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocDeleteAssistanceDataOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocDeleteAssistanceDataOutput

    static name: string
}

interface MessageLocGetEngineLockOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetEngineLockOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetEngineLockOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetEngineLockOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetEngineLockOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetEngineLockOutput

    static name: string
}

interface MessageLocGetNmeaTypesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetNmeaTypesOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetNmeaTypesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetNmeaTypesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetNmeaTypesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetNmeaTypesOutput

    static name: string
}

interface MessageLocGetOperationModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetOperationModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetOperationModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetOperationModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetOperationModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetOperationModeOutput

    static name: string
}

interface MessageLocGetPredictedOrbitsDataSourceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetPredictedOrbitsDataSourceOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetPredictedOrbitsDataSourceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetPredictedOrbitsDataSourceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetPredictedOrbitsDataSourceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetPredictedOrbitsDataSourceOutput

    static name: string
}

interface MessageLocGetServerInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetServerInput

    /**
     * Get the 'Server Address Type' field from `self`.
     */
    getServerAddressType(): [ /* returnType */ boolean, /* valueServerAddressType */ LocServerAddressType ]
    /**
     * Get the 'Server Type' field from `self`.
     */
    getServerType(): [ /* returnType */ boolean, /* valueServerType */ LocServerType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetServerInput
    /**
     * Set the 'Server Address Type' field in the message.
     * @param valueServerAddressType a #QmiLocServerAddressType.
     */
    setServerAddressType(valueServerAddressType: LocServerAddressType): boolean
    /**
     * Set the 'Server Type' field in the message.
     * @param valueServerType a #QmiLocServerType.
     */
    setServerType(valueServerType: LocServerType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetServerInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetServerInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetServerInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocGetServerInput

    /**
     * Allocates a new #QmiMessageLocGetServerInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocGetServerInput.
     * @constructor 
     */
    static new(): MessageLocGetServerInput
}

interface MessageLocGetServerOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocGetServerOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocGetServerOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocGetServerOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocGetServerOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocGetServerOutput

    static name: string
}

interface MessageLocInjectPredictedOrbitsDataInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocInjectPredictedOrbitsDataInput

    /**
     * Get the 'Format Type' field from `self`.
     */
    getFormatType(): [ /* returnType */ boolean, /* valueFormatType */ LocPredictedOrbitsDataFormat ]
    /**
     * Get the 'Part Data' field from `self`.
     */
    getPartData(): [ /* returnType */ boolean, /* valuePartData */ Uint8Array ]
    /**
     * Get the 'Part Number' field from `self`.
     */
    getPartNumber(): [ /* returnType */ boolean, /* valuePartNumber */ number ]
    /**
     * Get the 'Total Parts' field from `self`.
     */
    getTotalParts(): [ /* returnType */ boolean, /* valueTotalParts */ number ]
    /**
     * Get the 'Total Size' field from `self`.
     */
    getTotalSize(): [ /* returnType */ boolean, /* valueTotalSize */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocInjectPredictedOrbitsDataInput
    /**
     * Set the 'Format Type' field in the message.
     * @param valueFormatType a #QmiLocPredictedOrbitsDataFormat.
     */
    setFormatType(valueFormatType: LocPredictedOrbitsDataFormat): boolean
    /**
     * Set the 'Part Data' field in the message.
     * @param valuePartData a #GArray of #guint8 elements. A new reference to `value_part_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setPartData(valuePartData: Uint8Array): boolean
    /**
     * Set the 'Part Number' field in the message.
     * @param valuePartNumber a #guint16.
     */
    setPartNumber(valuePartNumber: number): boolean
    /**
     * Set the 'Total Parts' field in the message.
     * @param valueTotalParts a #guint16.
     */
    setTotalParts(valueTotalParts: number): boolean
    /**
     * Set the 'Total Size' field in the message.
     * @param valueTotalSize a #guint32.
     */
    setTotalSize(valueTotalSize: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocInjectPredictedOrbitsDataInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocInjectPredictedOrbitsDataInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocInjectPredictedOrbitsDataInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocInjectPredictedOrbitsDataInput

    /**
     * Allocates a new #QmiMessageLocInjectPredictedOrbitsDataInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocInjectPredictedOrbitsDataInput.
     * @constructor 
     */
    static new(): MessageLocInjectPredictedOrbitsDataInput
}

interface MessageLocInjectPredictedOrbitsDataOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocInjectPredictedOrbitsDataOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocInjectPredictedOrbitsDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocInjectPredictedOrbitsDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocInjectPredictedOrbitsDataOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocInjectPredictedOrbitsDataOutput

    static name: string
}

interface MessageLocInjectXtraDataInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocInjectXtraDataInput

    /**
     * Get the 'Part Data' field from `self`.
     */
    getPartData(): [ /* returnType */ boolean, /* valuePartData */ Uint8Array ]
    /**
     * Get the 'Part Number' field from `self`.
     */
    getPartNumber(): [ /* returnType */ boolean, /* valuePartNumber */ number ]
    /**
     * Get the 'Total Parts' field from `self`.
     */
    getTotalParts(): [ /* returnType */ boolean, /* valueTotalParts */ number ]
    /**
     * Get the 'Total Size' field from `self`.
     */
    getTotalSize(): [ /* returnType */ boolean, /* valueTotalSize */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocInjectXtraDataInput
    /**
     * Set the 'Part Data' field in the message.
     * @param valuePartData a #GArray of #guint8 elements. A new reference to `value_part_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setPartData(valuePartData: Uint8Array): boolean
    /**
     * Set the 'Part Number' field in the message.
     * @param valuePartNumber a #guint16.
     */
    setPartNumber(valuePartNumber: number): boolean
    /**
     * Set the 'Total Parts' field in the message.
     * @param valueTotalParts a #guint16.
     */
    setTotalParts(valueTotalParts: number): boolean
    /**
     * Set the 'Total Size' field in the message.
     * @param valueTotalSize a #guint32.
     */
    setTotalSize(valueTotalSize: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocInjectXtraDataInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocInjectXtraDataInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocInjectXtraDataInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocInjectXtraDataInput

    /**
     * Allocates a new #QmiMessageLocInjectXtraDataInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocInjectXtraDataInput.
     * @constructor 
     */
    static new(): MessageLocInjectXtraDataInput
}

interface MessageLocInjectXtraDataOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocInjectXtraDataOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocInjectXtraDataOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocInjectXtraDataOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocInjectXtraDataOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocInjectXtraDataOutput

    static name: string
}

interface MessageLocRegisterEventsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocRegisterEventsInput

    /**
     * Get the 'Event Registration Mask' field from `self`.
     */
    getEventRegistrationMask(): [ /* returnType */ boolean, /* valueEventRegistrationMask */ LocEventRegistrationFlag ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocRegisterEventsInput
    /**
     * Set the 'Event Registration Mask' field in the message.
     * @param valueEventRegistrationMask a #QmiLocEventRegistrationFlag.
     */
    setEventRegistrationMask(valueEventRegistrationMask: LocEventRegistrationFlag): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocRegisterEventsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocRegisterEventsInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocRegisterEventsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocRegisterEventsInput

    /**
     * Allocates a new #QmiMessageLocRegisterEventsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocRegisterEventsInput.
     * @constructor 
     */
    static new(): MessageLocRegisterEventsInput
}

interface MessageLocRegisterEventsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocRegisterEventsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocRegisterEventsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocRegisterEventsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocRegisterEventsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocRegisterEventsOutput

    static name: string
}

interface MessageLocSetEngineLockInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetEngineLockInput

    /**
     * Get the 'Lock Type' field from `self`.
     */
    getLockType(): [ /* returnType */ boolean, /* valueLockType */ LocLockType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetEngineLockInput
    /**
     * Set the 'Lock Type' field in the message.
     * @param valueLockType a #QmiLocLockType.
     */
    setLockType(valueLockType: LocLockType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetEngineLockInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetEngineLockInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetEngineLockInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocSetEngineLockInput

    /**
     * Allocates a new #QmiMessageLocSetEngineLockInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocSetEngineLockInput.
     * @constructor 
     */
    static new(): MessageLocSetEngineLockInput
}

interface MessageLocSetEngineLockOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetEngineLockOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetEngineLockOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetEngineLockOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetEngineLockOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetEngineLockOutput

    static name: string
}

interface MessageLocSetNmeaTypesInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetNmeaTypesInput

    /**
     * Get the 'NMEA Types' field from `self`.
     */
    getNmeaTypes(): [ /* returnType */ boolean, /* valueNmeaTypes */ LocNmeaType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetNmeaTypesInput
    /**
     * Set the 'NMEA Types' field in the message.
     * @param valueNmeaTypes a #QmiLocNmeaType.
     */
    setNmeaTypes(valueNmeaTypes: LocNmeaType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetNmeaTypesInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetNmeaTypesInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetNmeaTypesInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocSetNmeaTypesInput

    /**
     * Allocates a new #QmiMessageLocSetNmeaTypesInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocSetNmeaTypesInput.
     * @constructor 
     */
    static new(): MessageLocSetNmeaTypesInput
}

interface MessageLocSetNmeaTypesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetNmeaTypesOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetNmeaTypesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetNmeaTypesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetNmeaTypesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetNmeaTypesOutput

    static name: string
}

interface MessageLocSetOperationModeInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetOperationModeInput

    /**
     * Get the 'Operation Mode' field from `self`.
     */
    getOperationMode(): [ /* returnType */ boolean, /* valueOperationMode */ LocOperationMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetOperationModeInput
    /**
     * Set the 'Operation Mode' field in the message.
     * @param valueOperationMode a #QmiLocOperationMode.
     */
    setOperationMode(valueOperationMode: LocOperationMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetOperationModeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetOperationModeInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetOperationModeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocSetOperationModeInput

    /**
     * Allocates a new #QmiMessageLocSetOperationModeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocSetOperationModeInput.
     * @constructor 
     */
    static new(): MessageLocSetOperationModeInput
}

interface MessageLocSetOperationModeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetOperationModeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetOperationModeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetOperationModeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetOperationModeOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetOperationModeOutput

    static name: string
}

interface MessageLocSetServerInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetServerInput

    /**
     * Get the 'IPv4' field from `self`.
     */
    getIpv4(): [ /* returnType */ boolean, /* valueIpv4Ipv4Address */ number, /* valueIpv4Ipv4Port */ number ]
    /**
     * Get the 'IPv6' field from `self`.
     */
    getIpv6(): [ /* returnType */ boolean, /* valueIpv6Ipv6Address */ number[], /* valueIpv6Ipv6Port */ number ]
    /**
     * Get the 'Server Type' field from `self`.
     */
    getServerType(): [ /* returnType */ boolean, /* valueServerType */ LocServerType ]
    /**
     * Get the 'URL' field from `self`.
     */
    getUrl(): [ /* returnType */ boolean, /* valueUrl */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetServerInput
    /**
     * Set the 'IPv4' field in the message.
     * @param valueIpv4Ipv4Address a #guint32.
     * @param valueIpv4Ipv4Port a #guint16.
     */
    setIpv4(valueIpv4Ipv4Address: number, valueIpv4Ipv4Port: number): boolean
    /**
     * Set the 'IPv6' field in the message.
     * @param valueIpv6Ipv6Address a #GArray of #guint16 elements. A new reference to `value_ipv6`_ipv6_address will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     * @param valueIpv6Ipv6Port a #guint32.
     */
    setIpv6(valueIpv6Ipv6Address: number[], valueIpv6Ipv6Port: number): boolean
    /**
     * Set the 'Server Type' field in the message.
     * @param valueServerType a #QmiLocServerType.
     */
    setServerType(valueServerType: LocServerType): boolean
    /**
     * Set the 'URL' field in the message.
     * @param valueUrl a constant string with a maximum length of 256 characters.
     */
    setUrl(valueUrl: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetServerInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetServerInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetServerInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocSetServerInput

    /**
     * Allocates a new #QmiMessageLocSetServerInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocSetServerInput.
     * @constructor 
     */
    static new(): MessageLocSetServerInput
}

interface MessageLocSetServerOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocSetServerOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocSetServerOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocSetServerOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocSetServerOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocSetServerOutput

    static name: string
}

interface MessageLocStartInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocStartInput

    /**
     * Get the 'Fix Recurrence Type' field from `self`.
     */
    getFixRecurrenceType(): [ /* returnType */ boolean, /* valueFixRecurrenceType */ LocFixRecurrenceType ]
    /**
     * Get the 'Intermediate Report State' field from `self`.
     */
    getIntermediateReportState(): [ /* returnType */ boolean, /* valueIntermediateReportState */ LocIntermediateReportState ]
    /**
     * Get the 'Minimum Interval between Position Reports' field from `self`.
     */
    getMinimumIntervalBetweenPositionReports(): [ /* returnType */ boolean, /* valueMinimumIntervalBetweenPositionReports */ number ]
    /**
     * Get the 'Session ID' field from `self`.
     */
    getSessionId(): [ /* returnType */ boolean, /* valueSessionId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocStartInput
    /**
     * Set the 'Fix Recurrence Type' field in the message.
     * @param valueFixRecurrenceType a #QmiLocFixRecurrenceType.
     */
    setFixRecurrenceType(valueFixRecurrenceType: LocFixRecurrenceType): boolean
    /**
     * Set the 'Intermediate Report State' field in the message.
     * @param valueIntermediateReportState a #QmiLocIntermediateReportState.
     */
    setIntermediateReportState(valueIntermediateReportState: LocIntermediateReportState): boolean
    /**
     * Set the 'Minimum Interval between Position Reports' field in the message.
     * @param valueMinimumIntervalBetweenPositionReports a #guint32.
     */
    setMinimumIntervalBetweenPositionReports(valueMinimumIntervalBetweenPositionReports: number): boolean
    /**
     * Set the 'Session ID' field in the message.
     * @param valueSessionId a #guint8.
     */
    setSessionId(valueSessionId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocStartInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocStartInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocStartInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocStartInput

    /**
     * Allocates a new #QmiMessageLocStartInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocStartInput.
     * @constructor 
     */
    static new(): MessageLocStartInput
}

interface MessageLocStartOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocStartOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocStartOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocStartOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocStartOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocStartOutput

    static name: string
}

interface MessageLocStopInput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocStopInput

    /**
     * Get the 'Session ID' field from `self`.
     */
    getSessionId(): [ /* returnType */ boolean, /* valueSessionId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocStopInput
    /**
     * Set the 'Session ID' field in the message.
     * @param valueSessionId a #guint8.
     */
    setSessionId(valueSessionId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocStopInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocStopInput {

    // Own properties of Qmi-1.0.Qmi.MessageLocStopInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageLocStopInput

    /**
     * Allocates a new #QmiMessageLocStopInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageLocStopInput.
     * @constructor 
     */
    static new(): MessageLocStopInput
}

interface MessageLocStopOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageLocStopOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageLocStopOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageLocStopOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageLocStopOutput {

    // Own properties of Qmi-1.0.Qmi.MessageLocStopOutput

    static name: string
}

interface MessageNasAttachDetachInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasAttachDetachInput

    /**
     * Get the 'Action' field from `self`.
     */
    getAction(): [ /* returnType */ boolean, /* valueAction */ NasPsAttachAction ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasAttachDetachInput
    /**
     * Set the 'Action' field in the message.
     * @param valueAction a #QmiNasPsAttachAction.
     */
    setAction(valueAction: NasPsAttachAction): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasAttachDetachInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasAttachDetachInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasAttachDetachInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasAttachDetachInput

    /**
     * Allocates a new #QmiMessageNasAttachDetachInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasAttachDetachInput.
     * @constructor 
     */
    static new(): MessageNasAttachDetachInput
}

interface MessageNasAttachDetachOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasAttachDetachOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasAttachDetachOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasAttachDetachOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasAttachDetachOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasAttachDetachOutput

    static name: string
}

interface MessageNasConfigSignalInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasConfigSignalInfoInput

    /**
     * Get the 'ECIO Threshold' field from `self`.
     */
    getEcioThreshold(): [ /* returnType */ boolean, /* valueEcioThreshold */ number[] ]
    /**
     * Get the 'IO Threshold' field from `self`.
     */
    getIoThreshold(): [ /* returnType */ boolean, /* valueIoThreshold */ number[] ]
    /**
     * Get the 'LTE Report' field from `self`.
     */
    getLteReport(): [ /* returnType */ boolean, /* valueLteReportRate */ number, /* valueLteReportAveragePeriod */ number ]
    /**
     * Get the 'LTE SNR Threshold' field from `self`.
     */
    getLteSnrThreshold(): [ /* returnType */ boolean, /* valueLteSnrThreshold */ number[] ]
    /**
     * Get the 'RSCP Threshold' field from `self`.
     */
    getRscpThreshold(): [ /* returnType */ boolean, /* valueRscpThreshold */ Uint8Array ]
    /**
     * Get the 'RSRP Threshold' field from `self`.
     */
    getRsrpThreshold(): [ /* returnType */ boolean, /* valueRsrpThreshold */ number[] ]
    /**
     * Get the 'RSRQ Threshold' field from `self`.
     */
    getRsrqThreshold(): [ /* returnType */ boolean, /* valueRsrqThreshold */ Uint8Array ]
    /**
     * Get the 'RSSI Threshold' field from `self`.
     */
    getRssiThreshold(): [ /* returnType */ boolean, /* valueRssiThreshold */ Uint8Array ]
    /**
     * Get the 'SINR Threshold' field from `self`.
     */
    getSinrThreshold(): [ /* returnType */ boolean, /* valueSinrThreshold */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasConfigSignalInfoInput
    /**
     * Set the 'ECIO Threshold' field in the message.
     * @param valueEcioThreshold a #GArray of #gint16 elements. A new reference to `value_ecio_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setEcioThreshold(valueEcioThreshold: number[]): boolean
    /**
     * Set the 'IO Threshold' field in the message.
     * @param valueIoThreshold a #GArray of #gint32 elements. A new reference to `value_io_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIoThreshold(valueIoThreshold: number[]): boolean
    /**
     * Set the 'LTE Report' field in the message.
     * @param valueLteReportRate a #guint8.
     * @param valueLteReportAveragePeriod a #guint8.
     */
    setLteReport(valueLteReportRate: number, valueLteReportAveragePeriod: number): boolean
    /**
     * Set the 'LTE SNR Threshold' field in the message.
     * @param valueLteSnrThreshold a #GArray of #gint16 elements. A new reference to `value_lte_snr_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setLteSnrThreshold(valueLteSnrThreshold: number[]): boolean
    /**
     * Set the 'RSCP Threshold' field in the message.
     * @param valueRscpThreshold a #GArray of #gint8 elements. A new reference to `value_rscp_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRscpThreshold(valueRscpThreshold: Uint8Array): boolean
    /**
     * Set the 'RSRP Threshold' field in the message.
     * @param valueRsrpThreshold a #GArray of #gint16 elements. A new reference to `value_rsrp_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRsrpThreshold(valueRsrpThreshold: number[]): boolean
    /**
     * Set the 'RSRQ Threshold' field in the message.
     * @param valueRsrqThreshold a #GArray of #gint8 elements. A new reference to `value_rsrq_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRsrqThreshold(valueRsrqThreshold: Uint8Array): boolean
    /**
     * Set the 'RSSI Threshold' field in the message.
     * @param valueRssiThreshold a #GArray of #gint8 elements. A new reference to `value_rssi_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRssiThreshold(valueRssiThreshold: Uint8Array): boolean
    /**
     * Set the 'SINR Threshold' field in the message.
     * @param valueSinrThreshold a #GArray of #guint8 elements. A new reference to `value_sinr_threshold` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSinrThreshold(valueSinrThreshold: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasConfigSignalInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasConfigSignalInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasConfigSignalInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasConfigSignalInfoInput

    /**
     * Allocates a new #QmiMessageNasConfigSignalInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasConfigSignalInfoInput.
     * @constructor 
     */
    static new(): MessageNasConfigSignalInfoInput
}

interface MessageNasConfigSignalInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasConfigSignalInfoOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasConfigSignalInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasConfigSignalInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasConfigSignalInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasConfigSignalInfoOutput

    static name: string
}

interface MessageNasForceNetworkSearchOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasForceNetworkSearchOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasForceNetworkSearchOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasForceNetworkSearchOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasForceNetworkSearchOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasForceNetworkSearchOutput

    static name: string
}

interface MessageNasGetCdmaPositionInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetCdmaPositionInfoOutput

    /**
     * Get the 'CDMA Position Info' field from `self`.
     * 
     * Version of qmi_message_nas_get_cdma_position_info_output_get_cdma_position_info() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCdmaPositionInfo(): [ /* returnType */ boolean, /* valueCdmaPositionInfoUiInIdleMode */ number, /* valueCdmaPositionInfoBasestationsPtr */ MessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetCdmaPositionInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetCdmaPositionInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetCdmaPositionInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCdmaPositionInfoOutput

    static name: string
}

interface MessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation

    /**
     * a #QmiNasCdmaPilotType.
     * @field 
     */
    pilotType: NasCdmaPilotType
    /**
     * a #guint16.
     * @field 
     */
    systemId: number
    /**
     * a #guint16.
     * @field 
     */
    networkId: number
    /**
     * a #guint16.
     * @field 
     */
    baseStationId: number
    /**
     * a #guint16.
     * @field 
     */
    pilotPn: number
    /**
     * a #guint16.
     * @field 
     */
    pilotStrength: number
    /**
     * a #gint32.
     * @field 
     */
    latitude: number
    /**
     * a #gint32.
     * @field 
     */
    longitude: number
    /**
     * a #guint64.
     * @field 
     */
    gpsTimeInMilliseconds: number
}

/**
 * A QmiMessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation struct.
 * @record 
 */
class MessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCdmaPositionInfoOutputCdmaPositionInfoBasestationsBasestation

    static name: string
}

interface MessageNasGetCellLocationInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutput

    /**
     * Get the 'CDMA Info' field from `self`.
     */
    getCdmaInfo(): [ /* returnType */ boolean, /* valueCdmaInfoSystemId */ number, /* valueCdmaInfoNetworkId */ number, /* valueCdmaInfoBaseStationId */ number, /* valueCdmaInfoReferencePn */ number, /* valueCdmaInfoLatitude */ number, /* valueCdmaInfoLongitude */ number ]
    getCompatContext(): object | null
    /**
     * Get the 'GERAN Info v2' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_geran_info_v2() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getGeranInfoV2(): [ /* returnType */ boolean, /* valueGeranInfoV2CellId */ number, /* valueGeranInfoV2Plmn */ Uint8Array, /* valueGeranInfoV2Lac */ number, /* valueGeranInfoV2GeranAbsoluteRfChannelNumber */ number, /* valueGeranInfoV2BaseStationIdentityCode */ number, /* valueGeranInfoV2TimingAdvance */ number, /* valueGeranInfoV2RxLevel */ number, /* valueGeranInfoV2CellPtr */ MessageNasGetCellLocationInfoOutputGeranInfoV2CellElement[] ]
    /**
     * Get the 'Interfrequency LTE Info' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_interfrequency_lte_info() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getInterfrequencyLteInfo(): [ /* returnType */ boolean, /* valueInterfrequencyLteInfoUeInIdle */ boolean, /* valueInterfrequencyLteInfoFrequencyPtr */ MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir[] ]
    /**
     * Get the 'Intrafrequency LTE Info v2' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_intrafrequency_lte_info_v2() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getIntrafrequencyLteInfoV2(): [ /* returnType */ boolean, /* valueIntrafrequencyLteInfoV2UeInIdle */ boolean, /* valueIntrafrequencyLteInfoV2Plmn */ Uint8Array, /* valueIntrafrequencyLteInfoV2TrackingAreaCode */ number, /* valueIntrafrequencyLteInfoV2GlobalCellId */ number, /* valueIntrafrequencyLteInfoV2EutraAbsoluteRfChannelNumber */ number, /* valueIntrafrequencyLteInfoV2ServingCellId */ number, /* valueIntrafrequencyLteInfoV2CellReselectionPriority */ number, /* valueIntrafrequencyLteInfoV2SNonIntraSearchThreshold */ number, /* valueIntrafrequencyLteInfoV2ServingCellLowThreshold */ number, /* valueIntrafrequencyLteInfoV2SIntraSearchThreshold */ number, /* valueIntrafrequencyLteInfoV2CellPtr */ MessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement[] ]
    /**
     * Get the 'LTE Info Neighboring GSM' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_lte_info_neighboring_gsm() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getLteInfoNeighboringGsm(): [ /* returnType */ boolean, /* valueLteInfoNeighboringGsmUeInIdle */ boolean, /* valueLteInfoNeighboringGsmFrequencyPtr */ MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir[] ]
    /**
     * Get the 'LTE Info Neighboring WCDMA' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_lte_info_neighboring_wcdma() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getLteInfoNeighboringWcdma(): [ /* returnType */ boolean, /* valueLteInfoNeighboringWcdmaUeInIdle */ boolean, /* valueLteInfoNeighboringWcdmaFrequencyPtr */ MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir[] ]
    /**
     * Get the 'LTE Info Timing Advance' field from `self`.
     */
    getLteInfoTimingAdvance(): [ /* returnType */ boolean, /* valueLteInfoTimingAdvance */ number ]
    /**
     * Get the 'NR5G ARFCN' field from `self`.
     */
    getNr5gArfcn(): [ /* returnType */ boolean, /* valueNr5gArfcn */ number ]
    /**
     * Get the 'NR5G Cell Information' field from `self`.
     */
    getNr5gCellInformation(): [ /* returnType */ boolean, /* valueNr5gCellInformationPlmn */ Uint8Array, /* valueNr5gCellInformationTrackingAreaCode */ Uint8Array, /* valueNr5gCellInformationGlobalCellId */ number, /* valueNr5gCellInformationPhysicalCellId */ number, /* valueNr5gCellInformationRsrq */ number, /* valueNr5gCellInformationRsrp */ number, /* valueNr5gCellInformationSnr */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'UMTS Cell ID' field from `self`.
     */
    getUmtsCellId(): [ /* returnType */ boolean, /* valueUmtsCellId */ number ]
    /**
     * Get the 'UMTS Info Neighboring LTE' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_umts_info_neighboring_lte() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getUmtsInfoNeighboringLte(): [ /* returnType */ boolean, /* valueUmtsInfoNeighboringLteRrcState */ NasWcdmaRrcState, /* valueUmtsInfoNeighboringLteFrequencyPtr */ MessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement[] ]
    /**
     * Get the 'UMTS Info v2' field from `self`.
     * 
     * Version of qmi_message_nas_get_cell_location_info_output_get_umts_info_v2() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getUmtsInfoV2(): [ /* returnType */ boolean, /* valueUmtsInfoV2CellId */ number, /* valueUmtsInfoV2Plmn */ Uint8Array, /* valueUmtsInfoV2Lac */ number, /* valueUmtsInfoV2UtraAbsoluteRfChannelNumber */ number, /* valueUmtsInfoV2PrimaryScramblingCode */ number, /* valueUmtsInfoV2Rscp */ number, /* valueUmtsInfoV2Ecio */ number, /* valueUmtsInfoV2CellPtr */ MessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement[], /* valueUmtsInfoV2NeighboringGeranPtr */ MessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetCellLocationInfoOutput
    setCompatContext(compatContext: object | null, compatContextFree: GLib.DestroyNotify): void
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetCellLocationInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetCellLocationInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutput

    static name: string
}

interface MessageNasGetCellLocationInfoOutputGeranInfoV2CellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputGeranInfoV2CellElement

    /**
     * a #guint32.
     * @field 
     */
    cellId: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    plmn: object[]
    /**
     * a #guint16.
     * @field 
     */
    lac: number
    /**
     * a #guint16.
     * @field 
     */
    geranAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    baseStationIdentityCode: number
    /**
     * a #guint16.
     * @field 
     */
    rxLevel: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputGeranInfoV2CellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputGeranInfoV2CellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputGeranInfoV2CellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement

    /**
     * a #guint16.
     * @field 
     */
    eutraAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    cellSelectionRxLevelLowThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellSelectionRxLevelHighThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * a #GArray of #QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement elements.
     * @field 
     */
    cell: object[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement

    /**
     * a #guint16.
     * @field 
     */
    physicalCellId: number
    /**
     * a #gint16.
     * @field 
     */
    rsrq: number
    /**
     * a #gint16.
     * @field 
     */
    rsrp: number
    /**
     * a #gint16.
     * @field 
     */
    rssi: number
    /**
     * a #gint16.
     * @field 
     */
    cellSelectionRxLevel: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir

    /**
     * a #guint16.
     * @field 
     */
    eutraAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    cellSelectionRxLevelLowThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellSelectionRxLevelHighThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * an array of #QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement elements.
     * @field 
     */
    cell: MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementCellElement[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir struct.
 * 
 * This type is a version of #QmiMessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputInterfrequencyLteInfoFrequencyElementGir

    static name: string
}

interface MessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement

    /**
     * a #guint16.
     * @field 
     */
    physicalCellId: number
    /**
     * a #gint16.
     * @field 
     */
    rsrq: number
    /**
     * a #gint16.
     * @field 
     */
    rsrp: number
    /**
     * a #gint16.
     * @field 
     */
    rssi: number
    /**
     * a #gint16.
     * @field 
     */
    cellSelectionRxLevel: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputIntrafrequencyLteInfoV2CellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement

    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionHighThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionLowThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    nccPermitted: number
    /**
     * a #GArray of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement elements.
     * @field 
     */
    cell: object[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement

    /**
     * a #guint16.
     * @field 
     */
    geranAbsoluteRfChannelNumber: number
    /**
     * a #gboolean.
     * @field 
     */
    bandIs1900: boolean
    /**
     * a #gboolean.
     * @field 
     */
    cellIdValid: boolean
    /**
     * a #guint8.
     * @field 
     */
    baseStationIdentityCode: number
    /**
     * a #gint16.
     * @field 
     */
    rssi: number
    /**
     * a #gint16.
     * @field 
     */
    cellSelectionRxLevel: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir

    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionHighThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionLowThreshold: number
    /**
     * a #guint8.
     * @field 
     */
    nccPermitted: number
    /**
     * an array of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement elements.
     * @field 
     */
    cell: MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementCellElement[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir struct.
 * 
 * This type is a version of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringGsmFrequencyElementGir

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement

    /**
     * a #guint16.
     * @field 
     */
    utraAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * a #guint16.
     * @field 
     */
    cellReselectionHighThreshold: number
    /**
     * a #guint16.
     * @field 
     */
    cellReselectionLowThreshold: number
    /**
     * a #GArray of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement elements.
     * @field 
     */
    cell: object[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement

    /**
     * a #guint16.
     * @field 
     */
    primaryScramblingCode: number
    /**
     * a #gint16.
     * @field 
     */
    cpichRscp: number
    /**
     * a #gint16.
     * @field 
     */
    cpichEcno: number
    /**
     * a #gint16.
     * @field 
     */
    cellSelectionRxLevel: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir

    /**
     * a #guint16.
     * @field 
     */
    utraAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    cellReselectionPriority: number
    /**
     * a #guint16.
     * @field 
     */
    cellReselectionHighThreshold: number
    /**
     * a #guint16.
     * @field 
     */
    cellReselectionLowThreshold: number
    /**
     * an array of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement elements.
     * @field 
     */
    cell: MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementCellElement[]
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir struct.
 * 
 * This type is a version of #QmiMessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputLteInfoNeighboringWcdmaFrequencyElementGir

    static name: string
}

interface MessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement

    /**
     * a #guint16.
     * @field 
     */
    eutraAbsoluteRfChannelNumber: number
    /**
     * a #guint16.
     * @field 
     */
    physicalCellId: number
    /**
     * a #gfloat.
     * @field 
     */
    rsrp: number
    /**
     * a #gfloat.
     * @field 
     */
    rsrq: number
    /**
     * a #gint16.
     * @field 
     */
    cellSelectionRxLevel: number
    /**
     * a #gboolean.
     * @field 
     */
    isTdd: boolean
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoNeighboringLteFrequencyElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement

    /**
     * a #guint16.
     * @field 
     */
    utraAbsoluteRfChannelNumber: number
    /**
     * a #guint16.
     * @field 
     */
    primaryScramblingCode: number
    /**
     * a #gint16.
     * @field 
     */
    rscp: number
    /**
     * a #gint16.
     * @field 
     */
    ecio: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoV2CellElement

    static name: string
}

interface MessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement

    /**
     * a #guint16.
     * @field 
     */
    geranAbsoluteRfChannelNumber: number
    /**
     * a #guint8.
     * @field 
     */
    networkColorCode: number
    /**
     * a #guint8.
     * @field 
     */
    baseStationColorCode: number
    /**
     * a #gint16.
     * @field 
     */
    rssi: number
}

/**
 * A QmiMessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement struct.
 * @record 
 */
class MessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetCellLocationInfoOutputUmtsInfoV2NeighboringGeranElement

    static name: string
}

interface MessageNasGetDrxOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetDrxOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfo */ NasDrx ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetDrxOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetDrxOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetDrxOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetDrxOutput

    static name: string
}

interface MessageNasGetHomeNetworkOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetHomeNetworkOutput

    /**
     * Get the 'Home Network' field from `self`.
     */
    getHomeNetwork(): [ /* returnType */ boolean, /* valueHomeNetworkMcc */ number, /* valueHomeNetworkMnc */ number, /* valueHomeNetworkDescription */ string ]
    /**
     * Get the 'Home Network 3GPP2 Ext' field from `self`.
     */
    getHomeNetwork3gpp2Ext(): [ /* returnType */ boolean, /* valueHomeNetwork3gpp2ExtMcc */ number, /* valueHomeNetwork3gpp2ExtMnc */ number, /* valueHomeNetwork3gpp2ExtDisplayDescription */ NasNetworkDescriptionDisplay, /* valueHomeNetwork3gpp2ExtDescriptionEncoding */ NasNetworkDescriptionEncoding, /* valueHomeNetwork3gpp2ExtDescription */ Uint8Array ]
    /**
     * Get the 'Home Network 3GPP MNC' field from `self`.
     */
    getHomeNetwork3gppMnc(): [ /* returnType */ boolean, /* valueHomeNetwork3gppMncIs3gpp */ boolean, /* valueHomeNetwork3gppMncIncludesPcsDigit */ boolean ]
    /**
     * Get the 'Home System ID' field from `self`.
     */
    getHomeSystemId(): [ /* returnType */ boolean, /* valueHomeSystemIdSid */ number, /* valueHomeSystemIdNid */ number ]
    /**
     * Get the 'Network Name Source' field from `self`.
     */
    getNetworkNameSource(): [ /* returnType */ boolean, /* valueNetworkNameSource */ NasNetworkNameSource ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetHomeNetworkOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetHomeNetworkOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetHomeNetworkOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetHomeNetworkOutput

    static name: string
}

interface MessageNasGetLteCphyCaInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetLteCphyCaInfoOutput

    /**
     * Get the 'DL Bandwidth' field from `self`.
     */
    getDlBandwidth(): [ /* returnType */ boolean, /* valueDlBandwidth */ NasDLBandwidth ]
    /**
     * Get the 'Phy CA Agg PCell Info' field from `self`.
     */
    getPhyCaAggPcellInfo(): [ /* returnType */ boolean, /* valuePhyCaAggPcellInfoPhysicalCellId */ number, /* valuePhyCaAggPcellInfoRxChannel */ number, /* valuePhyCaAggPcellInfoDlBandwidth */ NasDLBandwidth, /* valuePhyCaAggPcellInfoLteBand */ NasActiveBand ]
    /**
     * Get the 'Phy CA Agg SCell Info' field from `self`.
     */
    getPhyCaAggScellInfo(): [ /* returnType */ boolean, /* valuePhyCaAggScellInfoPhysicalCellId */ number, /* valuePhyCaAggScellInfoRxChannel */ number, /* valuePhyCaAggScellInfoDlBandwidth */ NasDLBandwidth, /* valuePhyCaAggScellInfoLteBand */ NasActiveBand, /* valuePhyCaAggScellInfoState */ NasScellState ]
    /**
     * Get the 'Phy CA Agg Secondary Cells' field from `self`.
     * 
     * Version of qmi_message_nas_get_lte_cphy_ca_info_output_get_phy_ca_agg_secondary_cells() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPhyCaAggSecondaryCells(): [ /* returnType */ boolean, /* valuePhyCaAggSecondaryCellsPtr */ MessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'SCell index' field from `self`.
     */
    getScellIndex(): [ /* returnType */ boolean, /* valueScellIndex */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetLteCphyCaInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetLteCphyCaInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetLteCphyCaInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetLteCphyCaInfoOutput

    static name: string
}

interface MessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc

    /**
     * a #guint16.
     * @field 
     */
    physicalCellId: number
    /**
     * a #guint16.
     * @field 
     */
    rxChannel: number
    /**
     * a #QmiNasDLBandwidth.
     * @field 
     */
    dlBandwidth: NasDLBandwidth
    /**
     * a #QmiNasActiveBand.
     * @field 
     */
    lteBand: NasActiveBand
    /**
     * a #QmiNasScellState.
     * @field 
     */
    state: NasScellState
    /**
     * a #guint8.
     * @field 
     */
    cellIndex: number
}

/**
 * A QmiMessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc struct.
 * @record 
 */
class MessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetLteCphyCaInfoOutputPhyCaAggSecondaryCellsSsc

    static name: string
}

interface MessageNasGetOperatorNameOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutput

    /**
     * Get the 'NITZ Information' field from `self`.
     */
    getNitzInformation(): [ /* returnType */ boolean, /* valueNitzInformationNameEncoding */ NasPlmnEncodingScheme, /* valueNitzInformationShortCountryInitials */ NasPlmnNameCountryInitials, /* valueNitzInformationLongNameSpareBits */ NasPlmnNameSpareBits, /* valueNitzInformationShortNameSpareBits */ NasPlmnNameSpareBits, /* valueNitzInformationLongName */ Uint8Array, /* valueNitzInformationShortName */ Uint8Array ]
    /**
     * Get the 'Operator PLMN List' field from `self`.
     * 
     * Version of qmi_message_nas_get_operator_name_output_get_operator_plmn_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getOperatorPlmnList(): [ /* returnType */ boolean, /* valueOperatorPlmnListPtr */ MessageNasGetOperatorNameOutputOperatorPlmnListElement[] ]
    /**
     * Get the 'Operator PLMN Name' field from `self`.
     * 
     * Version of qmi_message_nas_get_operator_name_output_get_operator_plmn_name() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getOperatorPlmnName(): [ /* returnType */ boolean, /* valueOperatorPlmnNamePtr */ MessageNasGetOperatorNameOutputOperatorPlmnNameElement[] ]
    /**
     * Get the 'Operator String Name' field from `self`.
     */
    getOperatorStringName(): [ /* returnType */ boolean, /* valueOperatorStringName */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Service Provider Name' field from `self`.
     */
    getServiceProviderName(): [ /* returnType */ boolean, /* valueServiceProviderNameNameDisplayCondition */ NasNetworkNameDisplayCondition, /* valueServiceProviderNameName */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetOperatorNameOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetOperatorNameOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetOperatorNameOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutput

    static name: string
}

interface MessageNasGetOperatorNameOutputOperatorPlmnListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutputOperatorPlmnListElement

    /**
     * a string of exactly 3 characters.
     * @field 
     */
    mcc: string
    /**
     * a string of exactly 3 characters.
     * @field 
     */
    mnc: string
    /**
     * a #guint16.
     * @field 
     */
    lac1: number
    /**
     * a #guint16.
     * @field 
     */
    lac2: number
    /**
     * a #guint8.
     * @field 
     */
    plmnNameRecordIdentifier: number
}

/**
 * A QmiMessageNasGetOperatorNameOutputOperatorPlmnListElement struct.
 * @record 
 */
class MessageNasGetOperatorNameOutputOperatorPlmnListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutputOperatorPlmnListElement

    static name: string
}

interface MessageNasGetOperatorNameOutputOperatorPlmnNameElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutputOperatorPlmnNameElement

    /**
     * a #QmiNasPlmnEncodingScheme.
     * @field 
     */
    nameEncoding: NasPlmnEncodingScheme
    /**
     * a #QmiNasPlmnNameCountryInitials.
     * @field 
     */
    shortCountryInitials: NasPlmnNameCountryInitials
    /**
     * a #QmiNasPlmnNameSpareBits.
     * @field 
     */
    longNameSpareBits: NasPlmnNameSpareBits
    /**
     * a #QmiNasPlmnNameSpareBits.
     * @field 
     */
    shortNameSpareBits: NasPlmnNameSpareBits
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    longName: object[]
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    shortName: object[]
}

/**
 * A QmiMessageNasGetOperatorNameOutputOperatorPlmnNameElement struct.
 * @record 
 */
class MessageNasGetOperatorNameOutputOperatorPlmnNameElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetOperatorNameOutputOperatorPlmnNameElement

    static name: string
}

interface MessageNasGetPlmnNameInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetPlmnNameInput

    /**
     * Get the 'Always Send PLMN Name' field from `self`.
     */
    getAlwaysSendPlmnName(): [ /* returnType */ boolean, /* valueAlwaysSendPlmnName */ boolean ]
    /**
     * Get the 'CSG ID' field from `self`.
     */
    getCsgId(): [ /* returnType */ boolean, /* valueCsgId */ number ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatus */ boolean ]
    /**
     * Get the 'PLMN' field from `self`.
     */
    getPlmn(): [ /* returnType */ boolean, /* valuePlmnMcc */ number, /* valuePlmnMnc */ number ]
    /**
     * Get the 'Radio Access Technology' field from `self`.
     */
    getRadioAccessTechnology(): [ /* returnType */ boolean, /* valueRadioAccessTechnology */ NasRadioInterface ]
    /**
     * Get the 'Send All Information' field from `self`.
     */
    getSendAllInformation(): [ /* returnType */ boolean, /* valueSendAllInformation */ boolean ]
    /**
     * Get the 'Suppress SIM Error' field from `self`.
     */
    getSuppressSimError(): [ /* returnType */ boolean, /* valueSuppressSimError */ boolean ]
    /**
     * Get the 'Use Static Table Only' field from `self`.
     */
    getUseStaticTableOnly(): [ /* returnType */ boolean, /* valueUseStaticTableOnly */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetPlmnNameInput
    /**
     * Set the 'Always Send PLMN Name' field in the message.
     * @param valueAlwaysSendPlmnName a #gboolean.
     */
    setAlwaysSendPlmnName(valueAlwaysSendPlmnName: boolean): boolean
    /**
     * Set the 'CSG ID' field in the message.
     * @param valueCsgId a #guint32.
     */
    setCsgId(valueCsgId: number): boolean
    /**
     * Set the 'MNC PCS Digit Include Status' field in the message.
     * @param valueMncPcsDigitIncludeStatus a #gboolean.
     */
    setMncPcsDigitIncludeStatus(valueMncPcsDigitIncludeStatus: boolean): boolean
    /**
     * Set the 'PLMN' field in the message.
     * @param valuePlmnMcc a #guint16.
     * @param valuePlmnMnc a #guint16.
     */
    setPlmn(valuePlmnMcc: number, valuePlmnMnc: number): boolean
    /**
     * Set the 'Radio Access Technology' field in the message.
     * @param valueRadioAccessTechnology a #QmiNasRadioInterface.
     */
    setRadioAccessTechnology(valueRadioAccessTechnology: NasRadioInterface): boolean
    /**
     * Set the 'Send All Information' field in the message.
     * @param valueSendAllInformation a #gboolean.
     */
    setSendAllInformation(valueSendAllInformation: boolean): boolean
    /**
     * Set the 'Suppress SIM Error' field in the message.
     * @param valueSuppressSimError a #gboolean.
     */
    setSuppressSimError(valueSuppressSimError: boolean): boolean
    /**
     * Set the 'Use Static Table Only' field in the message.
     * @param valueUseStaticTableOnly a #gboolean.
     */
    setUseStaticTableOnly(valueUseStaticTableOnly: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetPlmnNameInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetPlmnNameInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPlmnNameInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasGetPlmnNameInput

    /**
     * Allocates a new #QmiMessageNasGetPlmnNameInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasGetPlmnNameInput.
     * @constructor 
     */
    static new(): MessageNasGetPlmnNameInput
}

interface MessageNasGetPlmnNameOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetPlmnNameOutput

    /**
     * Get the '3GPP EONS PLMN Name' field from `self`.
     */
    get3gppEonsPlmnName(): [ /* returnType */ boolean, /* value3gppEonsPlmnNameServiceProviderNameEncoding */ NasNetworkDescriptionEncoding, /* value3gppEonsPlmnNameServiceProviderName */ Uint8Array, /* value3gppEonsPlmnNameShortNameEncoding */ NasNetworkDescriptionEncoding, /* value3gppEonsPlmnNameShortNameCountryInitials */ NasPlmnNameCountryInitials, /* value3gppEonsPlmnNameShortNameSpareBits */ NasPlmnNameSpareBits, /* value3gppEonsPlmnNameShortName */ Uint8Array, /* value3gppEonsPlmnNameLongNameEncoding */ NasNetworkDescriptionEncoding, /* value3gppEonsPlmnNameLongNameCountryInitials */ NasPlmnNameCountryInitials, /* value3gppEonsPlmnNameLongNameSpareBits */ NasPlmnNameSpareBits, /* value3gppEonsPlmnNameLongName */ Uint8Array ]
    /**
     * Get the 'Additional Information' field from `self`.
     */
    getAdditionalInformation(): [ /* returnType */ boolean, /* valueAdditionalInformation */ number[] ]
    /**
     * Get the 'Display Bit Information' field from `self`.
     */
    getDisplayBitInformation(): [ /* returnType */ boolean, /* valueDisplayBitInformationServiceProviderNameSet */ NasBoolean, /* valueDisplayBitInformationPlmnNameSet */ NasBoolean ]
    /**
     * Get the 'Network Information' field from `self`.
     */
    getNetworkInformation(): [ /* returnType */ boolean, /* valueNetworkInformation */ NasBoolean ]
    /**
     * Get the 'Network Name Source' field from `self`.
     */
    getNetworkNameSource(): [ /* returnType */ boolean, /* valueNetworkNameSource */ NasNetworkNameSource ]
    /**
     * Get the 'PLMN Name With Language Id' field from `self`.
     * 
     * Version of qmi_message_nas_get_plmn_name_output_get_plmn_name_with_language_id() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPlmnNameWithLanguageId(): [ /* returnType */ boolean, /* valuePlmnNameWithLanguageIdPtr */ MessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetPlmnNameOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetPlmnNameOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetPlmnNameOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPlmnNameOutput

    static name: string
}

interface MessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement

    /**
     * a #GArray of #guint16 elements.
     * @field 
     */
    longName: object[]
    /**
     * a #GArray of #guint16 elements.
     * @field 
     */
    shortName: object[]
    /**
     * a #QmiNasPlmnLanguageId.
     * @field 
     */
    languageId: NasPlmnLanguageId
}

/**
 * A QmiMessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement struct.
 * @record 
 */
class MessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPlmnNameOutputPlmnNameWithLanguageIdElement

    static name: string
}

interface MessageNasGetPreferredNetworksOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutput

    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     * 
     * Version of qmi_message_nas_get_preferred_networks_output_get_mnc_pcs_digit_include_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatusPtr */ MessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement[] ]
    /**
     * Get the 'Preferred Networks' field from `self`.
     * 
     * Version of qmi_message_nas_get_preferred_networks_output_get_preferred_networks() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPreferredNetworks(): [ /* returnType */ boolean, /* valuePreferredNetworksPtr */ MessageNasGetPreferredNetworksOutputPreferredNetworksElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetPreferredNetworksOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetPreferredNetworksOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetPreferredNetworksOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutput

    static name: string
}

interface MessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #gboolean.
     * @field 
     */
    includesPcsDigit: boolean
}

/**
 * A QmiMessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement struct.
 * @record 
 */
class MessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutputMncPcsDigitIncludeStatusElement

    static name: string
}

interface MessageNasGetPreferredNetworksOutputPreferredNetworksElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutputPreferredNetworksElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #QmiNasPlmnAccessTechnologyIdentifier.
     * @field 
     */
    radioAccessTechnology: NasPlmnAccessTechnologyIdentifier
}

/**
 * A QmiMessageNasGetPreferredNetworksOutputPreferredNetworksElement struct.
 * @record 
 */
class MessageNasGetPreferredNetworksOutputPreferredNetworksElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetPreferredNetworksOutputPreferredNetworksElement

    static name: string
}

interface MessageNasGetRfBandInformationOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutput

    /**
     * Get the 'Bandwidth List' field from `self`.
     * 
     * Version of qmi_message_nas_get_rf_band_information_output_get_bandwidth_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getBandwidthList(): [ /* returnType */ boolean, /* valueBandwidthListPtr */ MessageNasGetRfBandInformationOutputBandwidthListElement[] ]
    /**
     * Get the 'Extended List' field from `self`.
     * 
     * Version of qmi_message_nas_get_rf_band_information_output_get_extended_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getExtendedList(): [ /* returnType */ boolean, /* valueExtendedListPtr */ MessageNasGetRfBandInformationOutputExtendedListElement[] ]
    /**
     * Get the 'List' field from `self`.
     * 
     * Version of qmi_message_nas_get_rf_band_information_output_get_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getList(): [ /* returnType */ boolean, /* valueListPtr */ MessageNasGetRfBandInformationOutputListElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetRfBandInformationOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetRfBandInformationOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetRfBandInformationOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutput

    static name: string
}

interface MessageNasGetRfBandInformationOutputBandwidthListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputBandwidthListElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasDLBandwidth.
     * @field 
     */
    bandwidth: NasDLBandwidth
}

/**
 * A QmiMessageNasGetRfBandInformationOutputBandwidthListElement struct.
 * @record 
 */
class MessageNasGetRfBandInformationOutputBandwidthListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputBandwidthListElement

    static name: string
}

interface MessageNasGetRfBandInformationOutputExtendedListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputExtendedListElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasActiveBand.
     * @field 
     */
    activeBandClass: NasActiveBand
    /**
     * a #guint32.
     * @field 
     */
    activeChannel: number
}

/**
 * A QmiMessageNasGetRfBandInformationOutputExtendedListElement struct.
 * @record 
 */
class MessageNasGetRfBandInformationOutputExtendedListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputExtendedListElement

    static name: string
}

interface MessageNasGetRfBandInformationOutputListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputListElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasActiveBand.
     * @field 
     */
    activeBandClass: NasActiveBand
    /**
     * a #guint16.
     * @field 
     */
    activeChannel: number
}

/**
 * A QmiMessageNasGetRfBandInformationOutputListElement struct.
 * @record 
 */
class MessageNasGetRfBandInformationOutputListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetRfBandInformationOutputListElement

    static name: string
}

interface MessageNasGetServingSystemOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetServingSystemOutput

    /**
     * Get the 'Call Barring Status' field from `self`.
     */
    getCallBarringStatus(): [ /* returnType */ boolean, /* valueCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'CDMA Base Station Info' field from `self`.
     */
    getCdmaBaseStationInfo(): [ /* returnType */ boolean, /* valueCdmaBaseStationInfoBaseStationId */ number, /* valueCdmaBaseStationInfoBaseStationLatitude */ number, /* valueCdmaBaseStationInfoBaseStationLongitude */ number ]
    /**
     * Get the 'CDMA P Rev' field from `self`.
     */
    getCdmaPRev(): [ /* returnType */ boolean, /* valueCdmaPRev */ number ]
    /**
     * Get the 'CDMA System ID' field from `self`.
     */
    getCdmaSystemId(): [ /* returnType */ boolean, /* valueCdmaSystemIdSid */ number, /* valueCdmaSystemIdNid */ number ]
    /**
     * Get the 'CDMA System Info' field from `self`.
     */
    getCdmaSystemInfo(): [ /* returnType */ boolean, /* valueCdmaSystemInfoMcc */ number, /* valueCdmaSystemInfoImsi1112 */ number ]
    /**
     * Get the 'CID 3GPP' field from `self`.
     */
    getCid3gpp(): [ /* returnType */ boolean, /* valueCid3gpp */ number ]
    /**
     * Get the 'Concurrent Service Info 3GPP2' field from `self`.
     */
    getConcurrentServiceInfo3gpp2(): [ /* returnType */ boolean, /* valueConcurrentServiceInfo3gpp2 */ boolean ]
    /**
     * Get the 'Current PLMN' field from `self`.
     */
    getCurrentPlmn(): [ /* returnType */ boolean, /* valueCurrentPlmnMcc */ number, /* valueCurrentPlmnMnc */ number, /* valueCurrentPlmnDescription */ string ]
    /**
     * Get the 'Data Service Capability' field from `self`.
     */
    getDataServiceCapability(): [ /* returnType */ boolean, /* valueDataServiceCapability */ NasDataCapability[] ]
    /**
     * Get the 'Daylight Saving Time Adjustment 3GPP' field from `self`.
     */
    getDaylightSavingTimeAdjustment3gpp(): [ /* returnType */ boolean, /* valueDaylightSavingTimeAdjustment3gpp */ number ]
    /**
     * Get the 'Default Roaming Indicator' field from `self`.
     */
    getDefaultRoamingIndicator(): [ /* returnType */ boolean, /* valueDefaultRoamingIndicator */ NasRoamingIndicatorStatus ]
    /**
     * Get the 'Detailed Service Status' field from `self`.
     */
    getDetailedServiceStatus(): [ /* returnType */ boolean, /* valueDetailedServiceStatusStatus */ NasServiceStatus, /* valueDetailedServiceStatusCapability */ NasNetworkServiceDomain, /* valueDetailedServiceStatusHdrStatus */ NasServiceStatus, /* valueDetailedServiceStatusHdrHybrid */ boolean, /* valueDetailedServiceStatusForbidden */ boolean ]
    /**
     * Get the 'DTM Support' field from `self`.
     */
    getDtmSupport(): [ /* returnType */ boolean, /* valueDtmSupport */ boolean ]
    /**
     * Get the 'HDR Personality' field from `self`.
     */
    getHdrPersonality(): [ /* returnType */ boolean, /* valueHdrPersonality */ NasHdrPersonality ]
    /**
     * Get the 'LAC 3GPP' field from `self`.
     */
    getLac3gpp(): [ /* returnType */ boolean, /* valueLac3gpp */ number ]
    /**
     * Get the 'LTE TAC' field from `self`.
     */
    getLteTac(): [ /* returnType */ boolean, /* valueLteTac */ number ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatusMcc */ number, /* valueMncPcsDigitIncludeStatusMnc */ number, /* valueMncPcsDigitIncludeStatusIncludesPcsDigit */ boolean ]
    /**
     * Get the 'Network Name Source' field from `self`.
     */
    getNetworkNameSource(): [ /* returnType */ boolean, /* valueNetworkNameSource */ NasNetworkNameSource ]
    /**
     * Get the 'PRL Indicator 3GPP2' field from `self`.
     */
    getPrlIndicator3gpp2(): [ /* returnType */ boolean, /* valuePrlIndicator3gpp2 */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Roaming Indicator' field from `self`.
     */
    getRoamingIndicator(): [ /* returnType */ boolean, /* valueRoamingIndicator */ NasRoamingIndicatorStatus ]
    /**
     * Get the 'Roaming Indicator List' field from `self`.
     * 
     * Version of qmi_message_nas_get_serving_system_output_get_roaming_indicator_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRoamingIndicatorList(): [ /* returnType */ boolean, /* valueRoamingIndicatorListPtr */ MessageNasGetServingSystemOutputRoamingIndicatorListElement[] ]
    /**
     * Get the 'Serving System' field from `self`.
     */
    getServingSystem(): [ /* returnType */ boolean, /* valueServingSystemRegistrationState */ NasRegistrationState, /* valueServingSystemCsAttachState */ NasAttachState, /* valueServingSystemPsAttachState */ NasAttachState, /* valueServingSystemSelectedNetwork */ NasNetworkType, /* valueServingSystemRadioInterfaces */ NasRadioInterface[] ]
    /**
     * Get the 'Time Zone 3GPP' field from `self`.
     */
    getTimeZone3gpp(): [ /* returnType */ boolean, /* valueTimeZone3gpp */ number ]
    /**
     * Get the 'Time Zone 3GPP2' field from `self`.
     */
    getTimeZone3gpp2(): [ /* returnType */ boolean, /* valueTimeZone3gpp2LeapSeconds */ number, /* valueTimeZone3gpp2LocalTimeOffset */ number, /* valueTimeZone3gpp2DaylightSavingTime */ boolean ]
    /**
     * Get the 'UMTS Primary Scrambling Code' field from `self`.
     */
    getUmtsPrimaryScramblingCode(): [ /* returnType */ boolean, /* valueUmtsPrimaryScramblingCode */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetServingSystemOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetServingSystemOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetServingSystemOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetServingSystemOutput

    static name: string
}

interface MessageNasGetServingSystemOutputRoamingIndicatorListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetServingSystemOutputRoamingIndicatorListElement

    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
    /**
     * a #QmiNasRoamingIndicatorStatus.
     * @field 
     */
    roamingIndicator: NasRoamingIndicatorStatus
}

/**
 * A QmiMessageNasGetServingSystemOutputRoamingIndicatorListElement struct.
 * @record 
 */
class MessageNasGetServingSystemOutputRoamingIndicatorListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetServingSystemOutputRoamingIndicatorListElement

    static name: string
}

interface MessageNasGetSignalInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSignalInfoOutput

    /**
     * Get the '5G Signal Strength' field from `self`.
     */
    get5gSignalStrength(): [ /* returnType */ boolean, /* value5gSignalStrengthRsrp */ number, /* value5gSignalStrengthSnr */ number ]
    /**
     * Get the '5G Signal Strength Extended' field from `self`.
     */
    get5gSignalStrengthExtended(): [ /* returnType */ boolean, /* value5gSignalStrengthExtended */ number ]
    /**
     * Get the 'CDMA Signal Strength' field from `self`.
     */
    getCdmaSignalStrength(): [ /* returnType */ boolean, /* valueCdmaSignalStrengthRssi */ number, /* valueCdmaSignalStrengthEcio */ number ]
    /**
     * Get the 'GSM Signal Strength' field from `self`.
     */
    getGsmSignalStrength(): [ /* returnType */ boolean, /* valueGsmSignalStrength */ number ]
    /**
     * Get the 'HDR Signal Strength' field from `self`.
     */
    getHdrSignalStrength(): [ /* returnType */ boolean, /* valueHdrSignalStrengthRssi */ number, /* valueHdrSignalStrengthEcio */ number, /* valueHdrSignalStrengthSinr */ NasEvdoSinrLevel, /* valueHdrSignalStrengthIo */ number ]
    /**
     * Get the 'LTE Signal Strength' field from `self`.
     */
    getLteSignalStrength(): [ /* returnType */ boolean, /* valueLteSignalStrengthRssi */ number, /* valueLteSignalStrengthRsrq */ number, /* valueLteSignalStrengthRsrp */ number, /* valueLteSignalStrengthSnr */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'TDMA Signal Strength' field from `self`.
     */
    getTdmaSignalStrength(): [ /* returnType */ boolean, /* valueTdmaSignalStrength */ number ]
    /**
     * Get the 'TDMA Signal Strength Extended' field from `self`.
     */
    getTdmaSignalStrengthExtended(): [ /* returnType */ boolean, /* valueTdmaSignalStrengthExtendedRssi */ number, /* valueTdmaSignalStrengthExtendedRscp */ number, /* valueTdmaSignalStrengthExtendedEcio */ number, /* valueTdmaSignalStrengthExtendedSinr */ number ]
    /**
     * Get the 'WCDMA Signal Strength' field from `self`.
     */
    getWcdmaSignalStrength(): [ /* returnType */ boolean, /* valueWcdmaSignalStrengthRssi */ number, /* valueWcdmaSignalStrengthEcio */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSignalInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSignalInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSignalInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalInfoOutput

    static name: string
}

interface MessageNasGetSignalStrengthInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSignalStrengthInput

    /**
     * Get the 'Request Mask' field from `self`.
     */
    getRequestMask(): [ /* returnType */ boolean, /* valueRequestMask */ NasSignalStrengthRequest ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSignalStrengthInput
    /**
     * Set the 'Request Mask' field in the message.
     * @param valueRequestMask a #QmiNasSignalStrengthRequest.
     */
    setRequestMask(valueRequestMask: NasSignalStrengthRequest): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSignalStrengthInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSignalStrengthInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasGetSignalStrengthInput

    /**
     * Allocates a new #QmiMessageNasGetSignalStrengthInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasGetSignalStrengthInput.
     * @constructor 
     */
    static new(): MessageNasGetSignalStrengthInput
}

interface MessageNasGetSignalStrengthOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutput

    /**
     * Get the 'ECIO List' field from `self`.
     * 
     * Version of qmi_message_nas_get_signal_strength_output_get_ecio_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getEcioList(): [ /* returnType */ boolean, /* valueEcioListPtr */ MessageNasGetSignalStrengthOutputEcioListElement[] ]
    /**
     * Get the 'Error Rate List' field from `self`.
     * 
     * Version of qmi_message_nas_get_signal_strength_output_get_error_rate_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getErrorRateList(): [ /* returnType */ boolean, /* valueErrorRateListPtr */ MessageNasGetSignalStrengthOutputErrorRateListElement[] ]
    /**
     * Get the 'IO' field from `self`.
     */
    getIo(): [ /* returnType */ boolean, /* valueIo */ number ]
    /**
     * Get the 'LTE RSRP' field from `self`.
     */
    getLteRsrp(): [ /* returnType */ boolean, /* valueLteRsrp */ number ]
    /**
     * Get the 'LTE SNR' field from `self`.
     */
    getLteSnr(): [ /* returnType */ boolean, /* valueLteSnr */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'RSRQ' field from `self`.
     */
    getRsrq(): [ /* returnType */ boolean, /* valueRsrqRsrq */ number, /* valueRsrqRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'RSSI List' field from `self`.
     * 
     * Version of qmi_message_nas_get_signal_strength_output_get_rssi_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRssiList(): [ /* returnType */ boolean, /* valueRssiListPtr */ MessageNasGetSignalStrengthOutputRssiListElement[] ]
    /**
     * Get the 'Signal Strength' field from `self`.
     */
    getSignalStrength(): [ /* returnType */ boolean, /* valueSignalStrengthStrength */ number, /* valueSignalStrengthRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'SINR' field from `self`.
     */
    getSinr(): [ /* returnType */ boolean, /* valueSinr */ NasEvdoSinrLevel ]
    /**
     * Get the 'Strength List' field from `self`.
     * 
     * Version of qmi_message_nas_get_signal_strength_output_get_strength_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getStrengthList(): [ /* returnType */ boolean, /* valueStrengthListPtr */ MessageNasGetSignalStrengthOutputStrengthListElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSignalStrengthOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSignalStrengthOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSignalStrengthOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutput

    static name: string
}

interface MessageNasGetSignalStrengthOutputEcioListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputEcioListElement

    /**
     * a #guint8.
     * @field 
     */
    ecio: number
    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
}

/**
 * A QmiMessageNasGetSignalStrengthOutputEcioListElement struct.
 * @record 
 */
class MessageNasGetSignalStrengthOutputEcioListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputEcioListElement

    static name: string
}

interface MessageNasGetSignalStrengthOutputErrorRateListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputErrorRateListElement

    /**
     * a #guint16.
     * @field 
     */
    rate: number
    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
}

/**
 * A QmiMessageNasGetSignalStrengthOutputErrorRateListElement struct.
 * @record 
 */
class MessageNasGetSignalStrengthOutputErrorRateListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputErrorRateListElement

    static name: string
}

interface MessageNasGetSignalStrengthOutputRssiListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputRssiListElement

    /**
     * a #guint8.
     * @field 
     */
    rssi: number
    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
}

/**
 * A QmiMessageNasGetSignalStrengthOutputRssiListElement struct.
 * @record 
 */
class MessageNasGetSignalStrengthOutputRssiListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputRssiListElement

    static name: string
}

interface MessageNasGetSignalStrengthOutputStrengthListElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputStrengthListElement

    /**
     * a #gint8.
     * @field 
     */
    strength: number
    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
}

/**
 * A QmiMessageNasGetSignalStrengthOutputStrengthListElement struct.
 * @record 
 */
class MessageNasGetSignalStrengthOutputStrengthListElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSignalStrengthOutputStrengthListElement

    static name: string
}

interface MessageNasGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSupportedMessagesOutput

    static name: string
}

interface MessageNasGetSystemInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSystemInfoOutput

    /**
     * Get the 'Additional CDMA System Info' field from `self`.
     */
    getAdditionalCdmaSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalCdmaSystemInfoGeoSystemIndex */ number, /* valueAdditionalCdmaSystemInfoRegistrationPeriod */ number ]
    /**
     * Get the 'Additional GSM System Info' field from `self`.
     */
    getAdditionalGsmSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalGsmSystemInfoGeoSystemIndex */ number, /* valueAdditionalGsmSystemInfoCellBroadcastSupport */ NasCellBroadcastCapability ]
    /**
     * Get the 'Additional HDR System Info' field from `self`.
     */
    getAdditionalHdrSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalHdrSystemInfoGeoSystemIndex */ number ]
    /**
     * Get the 'Additional LTE System Info' field from `self`.
     */
    getAdditionalLteSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalLteSystemInfoGeoSystemIndex */ number ]
    /**
     * Get the 'Additional WCDMA System Info' field from `self`.
     */
    getAdditionalWcdmaSystemInfo(): [ /* returnType */ boolean, /* valueAdditionalWcdmaSystemInfoGeoSystemIndex */ number, /* valueAdditionalWcdmaSystemInfoCellBroadcastSupport */ NasCellBroadcastCapability ]
    /**
     * Get the 'CDMA Registration Zone ID' field from `self`.
     */
    getCdmaRegistrationZoneId(): [ /* returnType */ boolean, /* valueCdmaRegistrationZoneId */ number ]
    /**
     * Get the 'CDMA Resolved MCC' field from `self`.
     */
    getCdmaResolvedMcc(): [ /* returnType */ boolean, /* valueCdmaResolvedMcc */ number ]
    /**
     * Get the 'CDMA Service Status' field from `self`.
     */
    getCdmaServiceStatus(): [ /* returnType */ boolean, /* valueCdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueCdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'CDMA System Info' field from `self`.
     */
    getCdmaSystemInfo(): [ /* returnType */ boolean, /* valueCdmaSystemInfoDomainValid */ boolean, /* valueCdmaSystemInfoDomain */ NasNetworkServiceDomain, /* valueCdmaSystemInfoServiceCapabilityValid */ boolean, /* valueCdmaSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueCdmaSystemInfoRoamingStatusValid */ boolean, /* valueCdmaSystemInfoRoamingStatus */ NasRoamingStatus, /* valueCdmaSystemInfoForbiddenValid */ boolean, /* valueCdmaSystemInfoForbidden */ boolean, /* valueCdmaSystemInfoPrlMatchValid */ boolean, /* valueCdmaSystemInfoPrlMatch */ boolean, /* valueCdmaSystemInfoPRevValid */ boolean, /* valueCdmaSystemInfoPRev */ number, /* valueCdmaSystemInfoBaseStationPRevValid */ boolean, /* valueCdmaSystemInfoBaseStationPRev */ number, /* valueCdmaSystemInfoConcurrentServiceSupportValid */ boolean, /* valueCdmaSystemInfoConcurrentServiceSupport */ boolean, /* valueCdmaSystemInfoCdmaSystemIdValid */ boolean, /* valueCdmaSystemInfoSid */ number, /* valueCdmaSystemInfoNid */ number, /* valueCdmaSystemInfoBaseStationInfoValid */ boolean, /* valueCdmaSystemInfoBaseStationId */ number, /* valueCdmaSystemInfoBaseStationLatitude */ number, /* valueCdmaSystemInfoBaseStationLongitude */ number, /* valueCdmaSystemInfoPacketZoneValid */ boolean, /* valueCdmaSystemInfoPacketZone */ number, /* valueCdmaSystemInfoNetworkIdValid */ boolean, /* valueCdmaSystemInfoMcc */ string, /* valueCdmaSystemInfoMnc */ string ]
    /**
     * Get the 'DCNR restriction Info' field from `self`.
     */
    getDcnrRestrictionInfo(): [ /* returnType */ boolean, /* valueDcnrRestrictionInfo */ boolean ]
    /**
     * Get the 'EUTRA with NR5G availability' field from `self`.
     */
    getEutraWithNr5gAvailability(): [ /* returnType */ boolean, /* valueEutraWithNr5gAvailability */ boolean ]
    /**
     * Get the 'GSM Call Barring Status' field from `self`.
     */
    getGsmCallBarringStatus(): [ /* returnType */ boolean, /* valueGsmCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueGsmCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'GSM Cipher Domain' field from `self`.
     */
    getGsmCipherDomain(): [ /* returnType */ boolean, /* valueGsmCipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'GSM Routing Area Code' field from `self`.
     */
    getGsmRoutingAreaCode(): [ /* returnType */ boolean, /* valueGsmRoutingAreaCode */ number ]
    /**
     * Get the 'GSM Service Status' field from `self`.
     */
    getGsmServiceStatus(): [ /* returnType */ boolean, /* valueGsmServiceStatusServiceStatus */ NasServiceStatus, /* valueGsmServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueGsmServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'GSM System Info v2' field from `self`.
     */
    getGsmSystemInfoV2(): [ /* returnType */ boolean, /* valueGsmSystemInfoV2DomainValid */ boolean, /* valueGsmSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2ServiceCapabilityValid */ boolean, /* valueGsmSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2RoamingStatusValid */ boolean, /* valueGsmSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueGsmSystemInfoV2ForbiddenValid */ boolean, /* valueGsmSystemInfoV2Forbidden */ boolean, /* valueGsmSystemInfoV2LacValid */ boolean, /* valueGsmSystemInfoV2Lac */ number, /* valueGsmSystemInfoV2CidValid */ boolean, /* valueGsmSystemInfoV2Cid */ number, /* valueGsmSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueGsmSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueGsmSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueGsmSystemInfoV2NetworkIdValid */ boolean, /* valueGsmSystemInfoV2Mcc */ string, /* valueGsmSystemInfoV2Mnc */ string, /* valueGsmSystemInfoV2EgprsSupportValid */ boolean, /* valueGsmSystemInfoV2EgprsSupport */ boolean, /* valueGsmSystemInfoV2DtmSupportValid */ boolean, /* valueGsmSystemInfoV2DtmSupport */ boolean ]
    /**
     * Get the 'HDR Service Status' field from `self`.
     */
    getHdrServiceStatus(): [ /* returnType */ boolean, /* valueHdrServiceStatusServiceStatus */ NasServiceStatus, /* valueHdrServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'HDR System Info' field from `self`.
     */
    getHdrSystemInfo(): [ /* returnType */ boolean, /* valueHdrSystemInfoDomainValid */ boolean, /* valueHdrSystemInfoDomain */ NasNetworkServiceDomain, /* valueHdrSystemInfoServiceCapabilityValid */ boolean, /* valueHdrSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueHdrSystemInfoRoamingStatusValid */ boolean, /* valueHdrSystemInfoRoamingStatus */ NasRoamingStatus, /* valueHdrSystemInfoForbiddenValid */ boolean, /* valueHdrSystemInfoForbidden */ boolean, /* valueHdrSystemInfoPrlMatchValid */ boolean, /* valueHdrSystemInfoPrlMatch */ boolean, /* valueHdrSystemInfoPersonalityValid */ boolean, /* valueHdrSystemInfoPersonality */ NasHdrPersonality, /* valueHdrSystemInfoProtocolRevisionValid */ boolean, /* valueHdrSystemInfoProtocolRevision */ NasHdrProtocolRevision, /* valueHdrSystemInfoIs856SystemIdValid */ boolean, /* valueHdrSystemInfoIs856SystemId */ string ]
    /**
     * Get the 'IMS Voice Support' field from `self`.
     */
    getImsVoiceSupport(): [ /* returnType */ boolean, /* valueImsVoiceSupport */ boolean ]
    /**
     * Get the 'LTE Cell Access Status' field from `self`.
     */
    getLteCellAccessStatus(): [ /* returnType */ boolean, /* valueLteCellAccessStatus */ NasLteCellAccessStatus ]
    /**
     * Get the 'LTE eMBMS Coverage Info Support' field from `self`.
     */
    getLteEmbmsCoverageInfoSupport(): [ /* returnType */ boolean, /* valueLteEmbmsCoverageInfoSupport */ boolean ]
    /**
     * Get the 'LTE eMBMS Coverage Info Trace ID' field from `self`.
     */
    getLteEmbmsCoverageInfoTraceId(): [ /* returnType */ boolean, /* valueLteEmbmsCoverageInfoTraceId */ number ]
    /**
     * Get the 'LTE Registration Domain' field from `self`.
     */
    getLteRegistrationDomain(): [ /* returnType */ boolean, /* valueLteRegistrationDomain */ NasLteRegistrationDomain ]
    /**
     * Get the 'LTE Service Status' field from `self`.
     */
    getLteServiceStatus(): [ /* returnType */ boolean, /* valueLteServiceStatusServiceStatus */ NasServiceStatus, /* valueLteServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueLteServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'LTE System Info v2' field from `self`.
     */
    getLteSystemInfoV2(): [ /* returnType */ boolean, /* valueLteSystemInfoV2DomainValid */ boolean, /* valueLteSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueLteSystemInfoV2ServiceCapabilityValid */ boolean, /* valueLteSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueLteSystemInfoV2RoamingStatusValid */ boolean, /* valueLteSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueLteSystemInfoV2ForbiddenValid */ boolean, /* valueLteSystemInfoV2Forbidden */ boolean, /* valueLteSystemInfoV2LacValid */ boolean, /* valueLteSystemInfoV2Lac */ number, /* valueLteSystemInfoV2CidValid */ boolean, /* valueLteSystemInfoV2Cid */ number, /* valueLteSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueLteSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueLteSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueLteSystemInfoV2NetworkIdValid */ boolean, /* valueLteSystemInfoV2Mcc */ string, /* valueLteSystemInfoV2Mnc */ string, /* valueLteSystemInfoV2TacValid */ boolean, /* valueLteSystemInfoV2Tac */ number ]
    /**
     * Get the 'LTE Voice Domain' field from `self`.
     */
    getLteVoiceDomain(): [ /* returnType */ boolean, /* valueLteVoiceDomain */ NasLteVoiceDomain ]
    /**
     * Get the 'LTE Voice Support' field from `self`.
     */
    getLteVoiceSupport(): [ /* returnType */ boolean, /* valueLteVoiceSupport */ boolean ]
    /**
     * Get the 'Network Selection Registration Restriction' field from `self`.
     */
    getNetworkSelectionRegistrationRestriction(): [ /* returnType */ boolean, /* valueNetworkSelectionRegistrationRestriction */ NasNetworkSelectionRegistrationRestriction ]
    /**
     * Get the 'NR5G Service Status Info' field from `self`.
     */
    getNr5gServiceStatusInfo(): [ /* returnType */ boolean, /* valueNr5gServiceStatusInfoServiceStatus */ NasServiceStatus, /* valueNr5gServiceStatusInfoTrueServiceStatus */ NasServiceStatus, /* valueNr5gServiceStatusInfoPreferredDataPath */ boolean ]
    /**
     * Get the 'NR5G System Info' field from `self`.
     */
    getNr5gSystemInfo(): [ /* returnType */ boolean, /* valueNr5gSystemInfoDomainValid */ boolean, /* valueNr5gSystemInfoDomain */ NasNetworkServiceDomain, /* valueNr5gSystemInfoServiceCapabilityValid */ boolean, /* valueNr5gSystemInfoServiceCapability */ NasNetworkServiceDomain, /* valueNr5gSystemInfoRoamingStatusValid */ boolean, /* valueNr5gSystemInfoRoamingStatus */ NasRoamingStatus, /* valueNr5gSystemInfoForbiddenValid */ boolean, /* valueNr5gSystemInfoForbidden */ boolean, /* valueNr5gSystemInfoLacValid */ boolean, /* valueNr5gSystemInfoLac */ number, /* valueNr5gSystemInfoCidValid */ boolean, /* valueNr5gSystemInfoCid */ number, /* valueNr5gSystemInfoRegistrationRejectInfoValid */ boolean, /* valueNr5gSystemInfoRegistrationRejectDomain */ NasNetworkServiceDomain, /* valueNr5gSystemInfoRegistrationRejectCause */ number, /* valueNr5gSystemInfoNetworkIdValid */ boolean, /* valueNr5gSystemInfoMcc */ string, /* valueNr5gSystemInfoMnc */ string, /* valueNr5gSystemInfoTacValid */ boolean, /* valueNr5gSystemInfoTac */ number ]
    /**
     * Get the 'NR5G Tracking Area Code' field from `self`.
     */
    getNr5gTrackingAreaCode(): [ /* returnType */ boolean, /* valueNr5gTrackingAreaCode */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'SIM Reject Info' field from `self`.
     */
    getSimRejectInfo(): [ /* returnType */ boolean, /* valueSimRejectInfo */ NasSimRejectState ]
    /**
     * Get the 'TD SCDMA Service Status' field from `self`.
     */
    getTdScdmaServiceStatus(): [ /* returnType */ boolean, /* valueTdScdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueTdScdmaServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueTdScdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'TD SCDMA System Info v2' field from `self`.
     */
    getTdScdmaSystemInfoV2(): [ /* returnType */ boolean, /* valueTdScdmaSystemInfoV2DomainValid */ boolean, /* valueTdScdmaSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueTdScdmaSystemInfoV2ServiceCapabilityValid */ boolean, /* valueTdScdmaSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueTdScdmaSystemInfoV2RoamingStatusValid */ boolean, /* valueTdScdmaSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueTdScdmaSystemInfoV2ForbiddenValid */ boolean, /* valueTdScdmaSystemInfoV2Forbidden */ boolean, /* valueTdScdmaSystemInfoV2LacValid */ boolean, /* valueTdScdmaSystemInfoV2Lac */ number, /* valueTdScdmaSystemInfoV2CidValid */ boolean, /* valueTdScdmaSystemInfoV2Cid */ number, /* valueTdScdmaSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueTdScdmaSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueTdScdmaSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueTdScdmaSystemInfoV2NetworkIdValid */ boolean, /* valueTdScdmaSystemInfoV2Mcc */ string, /* valueTdScdmaSystemInfoV2Mnc */ string, /* valueTdScdmaSystemInfoV2HsCallStatusValid */ boolean, /* valueTdScdmaSystemInfoV2HsCallStatus */ NasWcdmaHsService, /* valueTdScdmaSystemInfoV2HsServiceValid */ boolean, /* valueTdScdmaSystemInfoV2HsService */ NasWcdmaHsService, /* valueTdScdmaSystemInfoV2CellParameterIdValid */ boolean, /* valueTdScdmaSystemInfoV2CellParameterId */ number, /* valueTdScdmaSystemInfoV2CellBroadcastSupportValid */ boolean, /* valueTdScdmaSystemInfoV2CellBroadcastSupport */ NasCellBroadcastCapability, /* valueTdScdmaSystemInfoV2CsCallBarringStatusValid */ boolean, /* valueTdScdmaSystemInfoV2CsCallBarringStatus */ NasCallBarringStatus, /* valueTdScdmaSystemInfoV2PsCallBarringStatusValid */ boolean, /* valueTdScdmaSystemInfoV2PsCallBarringStatus */ NasCallBarringStatus, /* valueTdScdmaSystemInfoV2CipherDomainValid */ boolean, /* valueTdScdmaSystemInfoV2CipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'WCDMA Call Barring Status' field from `self`.
     */
    getWcdmaCallBarringStatus(): [ /* returnType */ boolean, /* valueWcdmaCallBarringStatusCsStatus */ NasCallBarringStatus, /* valueWcdmaCallBarringStatusPsStatus */ NasCallBarringStatus ]
    /**
     * Get the 'WCDMA Cipher Domain' field from `self`.
     */
    getWcdmaCipherDomain(): [ /* returnType */ boolean, /* valueWcdmaCipherDomain */ NasNetworkServiceDomain ]
    /**
     * Get the 'WCDMA Routing Area Code' field from `self`.
     */
    getWcdmaRoutingAreaCode(): [ /* returnType */ boolean, /* valueWcdmaRoutingAreaCode */ number ]
    /**
     * Get the 'WCDMA Service Status' field from `self`.
     */
    getWcdmaServiceStatus(): [ /* returnType */ boolean, /* valueWcdmaServiceStatusServiceStatus */ NasServiceStatus, /* valueWcdmaServiceStatusTrueServiceStatus */ NasServiceStatus, /* valueWcdmaServiceStatusPreferredDataPath */ boolean ]
    /**
     * Get the 'WCDMA System Info v2' field from `self`.
     */
    getWcdmaSystemInfoV2(): [ /* returnType */ boolean, /* valueWcdmaSystemInfoV2DomainValid */ boolean, /* valueWcdmaSystemInfoV2Domain */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2ServiceCapabilityValid */ boolean, /* valueWcdmaSystemInfoV2ServiceCapability */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2RoamingStatusValid */ boolean, /* valueWcdmaSystemInfoV2RoamingStatus */ NasRoamingStatus, /* valueWcdmaSystemInfoV2ForbiddenValid */ boolean, /* valueWcdmaSystemInfoV2Forbidden */ boolean, /* valueWcdmaSystemInfoV2LacValid */ boolean, /* valueWcdmaSystemInfoV2Lac */ number, /* valueWcdmaSystemInfoV2CidValid */ boolean, /* valueWcdmaSystemInfoV2Cid */ number, /* valueWcdmaSystemInfoV2RegistrationRejectInfoValid */ boolean, /* valueWcdmaSystemInfoV2RegistrationRejectDomain */ NasNetworkServiceDomain, /* valueWcdmaSystemInfoV2RegistrationRejectCause */ NasRejectCause, /* valueWcdmaSystemInfoV2NetworkIdValid */ boolean, /* valueWcdmaSystemInfoV2Mcc */ string, /* valueWcdmaSystemInfoV2Mnc */ string, /* valueWcdmaSystemInfoV2HsCallStatusValid */ boolean, /* valueWcdmaSystemInfoV2HsCallStatus */ NasWcdmaHsService, /* valueWcdmaSystemInfoV2HsServiceValid */ boolean, /* valueWcdmaSystemInfoV2HsService */ NasWcdmaHsService, /* valueWcdmaSystemInfoV2PrimaryScramblingCodeValid */ boolean, /* valueWcdmaSystemInfoV2PrimaryScramblingCode */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSystemInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSystemInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSystemInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSystemInfoOutput

    static name: string
}

interface MessageNasGetSystemSelectionPreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetSystemSelectionPreferenceOutput

    /**
     * Get the 'Acquisition Order Preference' field from `self`.
     */
    getAcquisitionOrderPreference(): [ /* returnType */ boolean, /* valueAcquisitionOrderPreference */ NasRadioInterface[] ]
    /**
     * Get the 'Band Preference' field from `self`.
     */
    getBandPreference(): [ /* returnType */ boolean, /* valueBandPreference */ NasBandPreference ]
    /**
     * Get the 'CDMA PRL Preference' field from `self`.
     */
    getCdmaPrlPreference(): [ /* returnType */ boolean, /* valueCdmaPrlPreference */ NasCdmaPrlPreference ]
    /**
     * Get the 'Disabled Modes' field from `self`.
     */
    getDisabledModes(): [ /* returnType */ boolean, /* valueDisabledModes */ NasRatModePreference ]
    /**
     * Get the 'Emergency mode' field from `self`.
     */
    getEmergencyMode(): [ /* returnType */ boolean, /* valueEmergencyMode */ boolean ]
    /**
     * Get the 'Extended LTE Band Preference' field from `self`.
     */
    getExtendedLteBandPreference(): [ /* returnType */ boolean, /* valueExtendedLteBandPreferenceMaskLow */ number, /* valueExtendedLteBandPreferenceMaskMidLow */ number, /* valueExtendedLteBandPreferenceMaskMidHigh */ number, /* valueExtendedLteBandPreferenceMaskHigh */ number ]
    /**
     * Get the 'GSM WCDMA Acquisition Order Preference' field from `self`.
     */
    getGsmWcdmaAcquisitionOrderPreference(): [ /* returnType */ boolean, /* valueGsmWcdmaAcquisitionOrderPreference */ NasGsmWcdmaAcquisitionOrderPreference ]
    /**
     * Get the 'LTE Band Preference' field from `self`.
     */
    getLteBandPreference(): [ /* returnType */ boolean, /* valueLteBandPreference */ NasLteBandPreference ]
    /**
     * Get the 'Manual Network Selection' field from `self`.
     */
    getManualNetworkSelection(): [ /* returnType */ boolean, /* valueManualNetworkSelectionMcc */ number, /* valueManualNetworkSelectionMnc */ number, /* valueManualNetworkSelectionIncludesPcsDigit */ boolean ]
    /**
     * Get the 'Mode Preference' field from `self`.
     */
    getModePreference(): [ /* returnType */ boolean, /* valueModePreference */ NasRatModePreference ]
    /**
     * Get the 'Network Selection Preference' field from `self`.
     */
    getNetworkSelectionPreference(): [ /* returnType */ boolean, /* valueNetworkSelectionPreference */ NasNetworkSelectionPreference ]
    /**
     * Get the 'Network Selection Registration Restriction' field from `self`.
     */
    getNetworkSelectionRegistrationRestriction(): [ /* returnType */ boolean, /* valueNetworkSelectionRegistrationRestriction */ NasNetworkSelectionRegistrationRestriction ]
    /**
     * Get the 'NR5G NSA Band Preference' field from `self`.
     */
    getNr5gNsaBandPreference(): [ /* returnType */ boolean, /* valueNr5gNsaBandPreferenceMask0 */ number, /* valueNr5gNsaBandPreferenceMask1 */ number, /* valueNr5gNsaBandPreferenceMask2 */ number, /* valueNr5gNsaBandPreferenceMask3 */ number, /* valueNr5gNsaBandPreferenceMask4 */ number, /* valueNr5gNsaBandPreferenceMask5 */ number, /* valueNr5gNsaBandPreferenceMask6 */ number, /* valueNr5gNsaBandPreferenceMask7 */ number ]
    /**
     * Get the 'NR5G SA Band Preference' field from `self`.
     */
    getNr5gSaBandPreference(): [ /* returnType */ boolean, /* valueNr5gSaBandPreferenceMask0 */ number, /* valueNr5gSaBandPreferenceMask1 */ number, /* valueNr5gSaBandPreferenceMask2 */ number, /* valueNr5gSaBandPreferenceMask3 */ number, /* valueNr5gSaBandPreferenceMask4 */ number, /* valueNr5gSaBandPreferenceMask5 */ number, /* valueNr5gSaBandPreferenceMask6 */ number, /* valueNr5gSaBandPreferenceMask7 */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Roaming Preference' field from `self`.
     */
    getRoamingPreference(): [ /* returnType */ boolean, /* valueRoamingPreference */ NasRoamingPreference ]
    /**
     * Get the 'Service Domain Preference' field from `self`.
     */
    getServiceDomainPreference(): [ /* returnType */ boolean, /* valueServiceDomainPreference */ NasServiceDomainPreference ]
    /**
     * Get the 'TD SCDMA Band Preference' field from `self`.
     */
    getTdScdmaBandPreference(): [ /* returnType */ boolean, /* valueTdScdmaBandPreference */ NasTdScdmaBandPreference ]
    /**
     * Get the 'Usage Preference' field from `self`.
     */
    getUsagePreference(): [ /* returnType */ boolean, /* valueUsagePreference */ NasUsagePreference ]
    /**
     * Get the 'Voice Domain Preference' field from `self`.
     */
    getVoiceDomainPreference(): [ /* returnType */ boolean, /* valueVoiceDomainPreference */ NasVoiceDomainPreference ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetSystemSelectionPreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetSystemSelectionPreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetSystemSelectionPreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetSystemSelectionPreferenceOutput

    static name: string
}

interface MessageNasGetTechnologyPreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetTechnologyPreferenceOutput

    /**
     * Get the 'Active' field from `self`.
     */
    getActive(): [ /* returnType */ boolean, /* valueActiveTechnologyPreference */ NasRadioTechnologyPreference, /* valueActiveTechnologyPreferenceDuration */ NasPreferenceDuration ]
    /**
     * Get the 'Persistent' field from `self`.
     */
    getPersistent(): [ /* returnType */ boolean, /* valuePersistent */ NasRadioTechnologyPreference ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetTechnologyPreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetTechnologyPreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetTechnologyPreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetTechnologyPreferenceOutput

    static name: string
}

interface MessageNasGetTxRxInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetTxRxInfoInput

    /**
     * Get the 'Radio Interface' field from `self`.
     */
    getRadioInterface(): [ /* returnType */ boolean, /* valueRadioInterface */ NasRadioInterface ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetTxRxInfoInput
    /**
     * Set the 'Radio Interface' field in the message.
     * @param valueRadioInterface a #QmiNasRadioInterface.
     */
    setRadioInterface(valueRadioInterface: NasRadioInterface): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetTxRxInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetTxRxInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetTxRxInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasGetTxRxInfoInput

    /**
     * Allocates a new #QmiMessageNasGetTxRxInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasGetTxRxInfoInput.
     * @constructor 
     */
    static new(): MessageNasGetTxRxInfoInput
}

interface MessageNasGetTxRxInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasGetTxRxInfoOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Rx Chain 0 Info' field from `self`.
     */
    getRxChain0Info(): [ /* returnType */ boolean, /* valueRxChain0InfoIsRadioTuned */ boolean, /* valueRxChain0InfoRxPower */ number, /* valueRxChain0InfoEcio */ number, /* valueRxChain0InfoRscp */ number, /* valueRxChain0InfoRsrp */ number, /* valueRxChain0InfoPhase */ number ]
    /**
     * Get the 'Rx Chain 1 Info' field from `self`.
     */
    getRxChain1Info(): [ /* returnType */ boolean, /* valueRxChain1InfoIsRadioTuned */ boolean, /* valueRxChain1InfoRxPower */ number, /* valueRxChain1InfoEcio */ number, /* valueRxChain1InfoRscp */ number, /* valueRxChain1InfoRsrp */ number, /* valueRxChain1InfoPhase */ number ]
    /**
     * Get the 'Rx Chain 2 Info' field from `self`.
     */
    getRxChain2Info(): [ /* returnType */ boolean, /* valueRxChain2InfoIsRadioTuned */ boolean, /* valueRxChain2InfoRxPower */ number, /* valueRxChain2InfoEcio */ number, /* valueRxChain2InfoRscp */ number, /* valueRxChain2InfoRsrp */ number, /* valueRxChain2InfoPhase */ number ]
    /**
     * Get the 'Rx Chain 3 Info' field from `self`.
     */
    getRxChain3Info(): [ /* returnType */ boolean, /* valueRxChain3InfoIsRadioTuned */ boolean, /* valueRxChain3InfoRxPower */ number, /* valueRxChain3InfoEcio */ number, /* valueRxChain3InfoRscp */ number, /* valueRxChain3InfoRsrp */ number, /* valueRxChain3InfoPhase */ number ]
    /**
     * Get the 'Tx Info' field from `self`.
     */
    getTxInfo(): [ /* returnType */ boolean, /* valueTxInfoIsInTraffic */ boolean, /* valueTxInfoTxPower */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasGetTxRxInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasGetTxRxInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasGetTxRxInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasGetTxRxInfoOutput

    static name: string
}

interface MessageNasInitiateNetworkRegisterInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasInitiateNetworkRegisterInput

    /**
     * Get the 'Action' field from `self`.
     */
    getAction(): [ /* returnType */ boolean, /* valueAction */ NasNetworkRegisterType ]
    /**
     * Get the 'Change Duration' field from `self`.
     */
    getChangeDuration(): [ /* returnType */ boolean, /* valueChangeDuration */ NasChangeDuration ]
    /**
     * Get the 'Manual Registration Info 3GPP' field from `self`.
     */
    getManualRegistrationInfo3gpp(): [ /* returnType */ boolean, /* valueManualRegistrationInfo3gppMcc */ number, /* valueManualRegistrationInfo3gppMnc */ number, /* valueManualRegistrationInfo3gppRadioInterface */ NasRadioInterface ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatus */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasInitiateNetworkRegisterInput
    /**
     * Set the 'Action' field in the message.
     * @param valueAction a #QmiNasNetworkRegisterType.
     */
    setAction(valueAction: NasNetworkRegisterType): boolean
    /**
     * Set the 'Change Duration' field in the message.
     * @param valueChangeDuration a #QmiNasChangeDuration.
     */
    setChangeDuration(valueChangeDuration: NasChangeDuration): boolean
    /**
     * Set the 'Manual Registration Info 3GPP' field in the message.
     * @param valueManualRegistrationInfo3gppMcc a #guint16.
     * @param valueManualRegistrationInfo3gppMnc a #guint16.
     * @param valueManualRegistrationInfo3gppRadioInterface a #QmiNasRadioInterface.
     */
    setManualRegistrationInfo3gpp(valueManualRegistrationInfo3gppMcc: number, valueManualRegistrationInfo3gppMnc: number, valueManualRegistrationInfo3gppRadioInterface: NasRadioInterface): boolean
    /**
     * Set the 'MNC PCS Digit Include Status' field in the message.
     * @param valueMncPcsDigitIncludeStatus a #gboolean.
     */
    setMncPcsDigitIncludeStatus(valueMncPcsDigitIncludeStatus: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasInitiateNetworkRegisterInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasInitiateNetworkRegisterInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasInitiateNetworkRegisterInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasInitiateNetworkRegisterInput

    /**
     * Allocates a new #QmiMessageNasInitiateNetworkRegisterInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasInitiateNetworkRegisterInput.
     * @constructor 
     */
    static new(): MessageNasInitiateNetworkRegisterInput
}

interface MessageNasInitiateNetworkRegisterOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasInitiateNetworkRegisterOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasInitiateNetworkRegisterOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasInitiateNetworkRegisterOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasInitiateNetworkRegisterOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasInitiateNetworkRegisterOutput

    static name: string
}

interface MessageNasNetworkScanInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasNetworkScanInput

    /**
     * Get the 'Network Type' field from `self`.
     */
    getNetworkType(): [ /* returnType */ boolean, /* valueNetworkType */ NasNetworkScanType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasNetworkScanInput
    /**
     * Set the 'Network Type' field in the message.
     * @param valueNetworkType a #QmiNasNetworkScanType.
     */
    setNetworkType(valueNetworkType: NasNetworkScanType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasNetworkScanInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasNetworkScanInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasNetworkScanInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasNetworkScanInput

    /**
     * Allocates a new #QmiMessageNasNetworkScanInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasNetworkScanInput.
     * @constructor 
     */
    static new(): MessageNasNetworkScanInput
}

interface MessageNasNetworkScanOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasNetworkScanOutput

    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     * 
     * Version of qmi_message_nas_network_scan_output_get_mnc_pcs_digit_include_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatusPtr */ MessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement[] ]
    /**
     * Get the 'Network Information' field from `self`.
     * 
     * Version of qmi_message_nas_network_scan_output_get_network_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getNetworkInformation(): [ /* returnType */ boolean, /* valueNetworkInformationPtr */ MessageNasNetworkScanOutputNetworkInformationElement[] ]
    /**
     * Get the 'Network Scan Result' field from `self`.
     */
    getNetworkScanResult(): [ /* returnType */ boolean, /* valueNetworkScanResult */ NasNetworkScanResult ]
    /**
     * Get the 'Radio Access Technology' field from `self`.
     * 
     * Version of qmi_message_nas_network_scan_output_get_radio_access_technology() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRadioAccessTechnology(): [ /* returnType */ boolean, /* valueRadioAccessTechnologyPtr */ MessageNasNetworkScanOutputRadioAccessTechnologyElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasNetworkScanOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasNetworkScanOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasNetworkScanOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasNetworkScanOutput

    static name: string
}

interface MessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #gboolean.
     * @field 
     */
    includesPcsDigit: boolean
}

/**
 * A QmiMessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement struct.
 * @record 
 */
class MessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasNetworkScanOutputMncPcsDigitIncludeStatusElement

    static name: string
}

interface MessageNasNetworkScanOutputNetworkInformationElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasNetworkScanOutputNetworkInformationElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #QmiNasNetworkStatus.
     * @field 
     */
    networkStatus: NasNetworkStatus
    /**
     * a string.
     * @field 
     */
    description: string
}

/**
 * A QmiMessageNasNetworkScanOutputNetworkInformationElement struct.
 * @record 
 */
class MessageNasNetworkScanOutputNetworkInformationElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasNetworkScanOutputNetworkInformationElement

    static name: string
}

interface MessageNasNetworkScanOutputRadioAccessTechnologyElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasNetworkScanOutputRadioAccessTechnologyElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #QmiNasRadioInterface.
     * @field 
     */
    radioInterface: NasRadioInterface
}

/**
 * A QmiMessageNasNetworkScanOutputRadioAccessTechnologyElement struct.
 * @record 
 */
class MessageNasNetworkScanOutputRadioAccessTechnologyElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasNetworkScanOutputRadioAccessTechnologyElement

    static name: string
}

interface MessageNasRegisterIndicationsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasRegisterIndicationsInput

    /**
     * Get the 'Current PLMN Name' field from `self`.
     */
    getCurrentPlmnName(): [ /* returnType */ boolean, /* valueCurrentPlmnName */ boolean ]
    /**
     * Get the 'DDTM Events' field from `self`.
     */
    getDdtmEvents(): [ /* returnType */ boolean, /* valueDdtmEvents */ boolean ]
    /**
     * Get the 'Dual Standby Preference' field from `self`.
     */
    getDualStandbyPreference(): [ /* returnType */ boolean, /* valueDualStandbyPreference */ boolean ]
    /**
     * Get the 'eMBMS Status' field from `self`.
     */
    getEmbmsStatus(): [ /* returnType */ boolean, /* valueEmbmsStatus */ boolean ]
    /**
     * Get the 'Error Rate' field from `self`.
     */
    getErrorRate(): [ /* returnType */ boolean, /* valueErrorRate */ boolean ]
    /**
     * Get the 'HDR New UATI Assigned' field from `self`.
     */
    getHdrNewUatiAssigned(): [ /* returnType */ boolean, /* valueHdrNewUatiAssigned */ boolean ]
    /**
     * Get the 'HDR Session Closed' field from `self`.
     */
    getHdrSessionClosed(): [ /* returnType */ boolean, /* valueHdrSessionClosed */ boolean ]
    /**
     * Get the 'Managed Roaming' field from `self`.
     */
    getManagedRoaming(): [ /* returnType */ boolean, /* valueManagedRoaming */ boolean ]
    /**
     * Get the 'Network Reject Information' field from `self`.
     */
    getNetworkRejectInformation(): [ /* returnType */ boolean, /* valueNetworkRejectInformationEnableNetworkRejectIndications */ boolean, /* valueNetworkRejectInformationSupressSystemInfoIndications */ boolean ]
    /**
     * Get the 'Network Time' field from `self`.
     */
    getNetworkTime(): [ /* returnType */ boolean, /* valueNetworkTime */ boolean ]
    /**
     * Get the 'RF Band Information' field from `self`.
     */
    getRfBandInformation(): [ /* returnType */ boolean, /* valueRfBandInformation */ boolean ]
    /**
     * Get the 'Serving System Events' field from `self`.
     */
    getServingSystemEvents(): [ /* returnType */ boolean, /* valueServingSystemEvents */ boolean ]
    /**
     * Get the 'Signal Info' field from `self`.
     */
    getSignalInfo(): [ /* returnType */ boolean, /* valueSignalInfo */ boolean ]
    /**
     * Get the 'Subscription Info' field from `self`.
     */
    getSubscriptionInfo(): [ /* returnType */ boolean, /* valueSubscriptionInfo */ boolean ]
    /**
     * Get the 'System Info' field from `self`.
     */
    getSystemInfo(): [ /* returnType */ boolean, /* valueSystemInfo */ boolean ]
    /**
     * Get the 'System Selection Preference' field from `self`.
     */
    getSystemSelectionPreference(): [ /* returnType */ boolean, /* valueSystemSelectionPreference */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasRegisterIndicationsInput
    /**
     * Set the 'Current PLMN Name' field in the message.
     * @param valueCurrentPlmnName a #gboolean.
     */
    setCurrentPlmnName(valueCurrentPlmnName: boolean): boolean
    /**
     * Set the 'DDTM Events' field in the message.
     * @param valueDdtmEvents a #gboolean.
     */
    setDdtmEvents(valueDdtmEvents: boolean): boolean
    /**
     * Set the 'Dual Standby Preference' field in the message.
     * @param valueDualStandbyPreference a #gboolean.
     */
    setDualStandbyPreference(valueDualStandbyPreference: boolean): boolean
    /**
     * Set the 'eMBMS Status' field in the message.
     * @param valueEmbmsStatus a #gboolean.
     */
    setEmbmsStatus(valueEmbmsStatus: boolean): boolean
    /**
     * Set the 'Error Rate' field in the message.
     * @param valueErrorRate a #gboolean.
     */
    setErrorRate(valueErrorRate: boolean): boolean
    /**
     * Set the 'HDR New UATI Assigned' field in the message.
     * @param valueHdrNewUatiAssigned a #gboolean.
     */
    setHdrNewUatiAssigned(valueHdrNewUatiAssigned: boolean): boolean
    /**
     * Set the 'HDR Session Closed' field in the message.
     * @param valueHdrSessionClosed a #gboolean.
     */
    setHdrSessionClosed(valueHdrSessionClosed: boolean): boolean
    /**
     * Set the 'Managed Roaming' field in the message.
     * @param valueManagedRoaming a #gboolean.
     */
    setManagedRoaming(valueManagedRoaming: boolean): boolean
    /**
     * Set the 'Network Reject Information' field in the message.
     * @param valueNetworkRejectInformationEnableNetworkRejectIndications a #gboolean.
     * @param valueNetworkRejectInformationSupressSystemInfoIndications a #gboolean.
     */
    setNetworkRejectInformation(valueNetworkRejectInformationEnableNetworkRejectIndications: boolean, valueNetworkRejectInformationSupressSystemInfoIndications: boolean): boolean
    /**
     * Set the 'Network Time' field in the message.
     * @param valueNetworkTime a #gboolean.
     */
    setNetworkTime(valueNetworkTime: boolean): boolean
    /**
     * Set the 'RF Band Information' field in the message.
     * @param valueRfBandInformation a #gboolean.
     */
    setRfBandInformation(valueRfBandInformation: boolean): boolean
    /**
     * Set the 'Serving System Events' field in the message.
     * @param valueServingSystemEvents a #gboolean.
     */
    setServingSystemEvents(valueServingSystemEvents: boolean): boolean
    /**
     * Set the 'Signal Info' field in the message.
     * @param valueSignalInfo a #gboolean.
     */
    setSignalInfo(valueSignalInfo: boolean): boolean
    /**
     * Set the 'Subscription Info' field in the message.
     * @param valueSubscriptionInfo a #gboolean.
     */
    setSubscriptionInfo(valueSubscriptionInfo: boolean): boolean
    /**
     * Set the 'System Info' field in the message.
     * @param valueSystemInfo a #gboolean.
     */
    setSystemInfo(valueSystemInfo: boolean): boolean
    /**
     * Set the 'System Selection Preference' field in the message.
     * @param valueSystemSelectionPreference a #gboolean.
     */
    setSystemSelectionPreference(valueSystemSelectionPreference: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasRegisterIndicationsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasRegisterIndicationsInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasRegisterIndicationsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasRegisterIndicationsInput

    /**
     * Allocates a new #QmiMessageNasRegisterIndicationsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasRegisterIndicationsInput.
     * @constructor 
     */
    static new(): MessageNasRegisterIndicationsInput
}

interface MessageNasRegisterIndicationsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasRegisterIndicationsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasRegisterIndicationsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasRegisterIndicationsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasRegisterIndicationsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasRegisterIndicationsOutput

    static name: string
}

interface MessageNasResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasResetOutput

    static name: string
}

interface MessageNasSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetEventReportInput

    /**
     * Get the 'ECIO Indicator' field from `self`.
     */
    getEcioIndicator(): [ /* returnType */ boolean, /* valueEcioIndicatorReport */ boolean, /* valueEcioIndicatorEcioDelta */ number ]
    /**
     * Get the 'ECIO Threshold' field from `self`.
     */
    getEcioThreshold(): [ /* returnType */ boolean, /* valueEcioThresholdReport */ boolean, /* valueEcioThresholdThresholds */ number[] ]
    /**
     * Get the 'Error Rate Indicator' field from `self`.
     */
    getErrorRateIndicator(): [ /* returnType */ boolean, /* valueErrorRateIndicator */ boolean ]
    /**
     * Get the 'IO Indicator' field from `self`.
     */
    getIoIndicator(): [ /* returnType */ boolean, /* valueIoIndicatorReport */ boolean, /* valueIoIndicatorIoDelta */ number ]
    /**
     * Get the 'LTE RSRP Delta' field from `self`.
     */
    getLteRsrpDelta(): [ /* returnType */ boolean, /* valueLteRsrpDeltaReport */ boolean, /* valueLteRsrpDeltaRsrpDelta */ number ]
    /**
     * Get the 'LTE SNR Delta' field from `self`.
     */
    getLteSnrDelta(): [ /* returnType */ boolean, /* valueLteSnrDeltaReport */ boolean, /* valueLteSnrDeltaSnrDelta */ number ]
    /**
     * Get the 'Registration Reject Reason' field from `self`.
     */
    getRegistrationRejectReason(): [ /* returnType */ boolean, /* valueRegistrationRejectReason */ boolean ]
    /**
     * Get the 'RF Band Information' field from `self`.
     */
    getRfBandInformation(): [ /* returnType */ boolean, /* valueRfBandInformation */ boolean ]
    /**
     * Get the 'RSSI Indicator' field from `self`.
     */
    getRssiIndicator(): [ /* returnType */ boolean, /* valueRssiIndicatorReport */ boolean, /* valueRssiIndicatorRssiDelta */ number ]
    /**
     * Get the 'Signal Strength Indicator' field from `self`.
     */
    getSignalStrengthIndicator(): [ /* returnType */ boolean, /* valueSignalStrengthIndicatorReport */ boolean, /* valueSignalStrengthIndicatorThresholds */ Uint8Array ]
    /**
     * Get the 'SINR Indicator' field from `self`.
     */
    getSinrIndicator(): [ /* returnType */ boolean, /* valueSinrIndicatorReport */ boolean, /* valueSinrIndicatorSinrDelta */ number ]
    /**
     * Get the 'SINR Threshold' field from `self`.
     */
    getSinrThreshold(): [ /* returnType */ boolean, /* valueSinrThresholdReport */ boolean, /* valueSinrThresholdThresholds */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetEventReportInput
    /**
     * Set the 'ECIO Indicator' field in the message.
     * @param valueEcioIndicatorReport a #gboolean.
     * @param valueEcioIndicatorEcioDelta a #guint8.
     */
    setEcioIndicator(valueEcioIndicatorReport: boolean, valueEcioIndicatorEcioDelta: number): boolean
    /**
     * Set the 'ECIO Threshold' field in the message.
     * @param valueEcioThresholdReport a #gboolean.
     * @param valueEcioThresholdThresholds a #GArray of #gint16 elements. A new reference to `value_ecio_threshold_thresholds` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setEcioThreshold(valueEcioThresholdReport: boolean, valueEcioThresholdThresholds: number[]): boolean
    /**
     * Set the 'Error Rate Indicator' field in the message.
     * @param valueErrorRateIndicator a #gboolean.
     */
    setErrorRateIndicator(valueErrorRateIndicator: boolean): boolean
    /**
     * Set the 'IO Indicator' field in the message.
     * @param valueIoIndicatorReport a #gboolean.
     * @param valueIoIndicatorIoDelta a #guint8.
     */
    setIoIndicator(valueIoIndicatorReport: boolean, valueIoIndicatorIoDelta: number): boolean
    /**
     * Set the 'LTE RSRP Delta' field in the message.
     * @param valueLteRsrpDeltaReport a #gboolean.
     * @param valueLteRsrpDeltaRsrpDelta a #guint8.
     */
    setLteRsrpDelta(valueLteRsrpDeltaReport: boolean, valueLteRsrpDeltaRsrpDelta: number): boolean
    /**
     * Set the 'LTE SNR Delta' field in the message.
     * @param valueLteSnrDeltaReport a #gboolean.
     * @param valueLteSnrDeltaSnrDelta a #guint8.
     */
    setLteSnrDelta(valueLteSnrDeltaReport: boolean, valueLteSnrDeltaSnrDelta: number): boolean
    /**
     * Set the 'Registration Reject Reason' field in the message.
     * @param valueRegistrationRejectReason a #gboolean.
     */
    setRegistrationRejectReason(valueRegistrationRejectReason: boolean): boolean
    /**
     * Set the 'RF Band Information' field in the message.
     * @param valueRfBandInformation a #gboolean.
     */
    setRfBandInformation(valueRfBandInformation: boolean): boolean
    /**
     * Set the 'RSSI Indicator' field in the message.
     * @param valueRssiIndicatorReport a #gboolean.
     * @param valueRssiIndicatorRssiDelta a #guint8.
     */
    setRssiIndicator(valueRssiIndicatorReport: boolean, valueRssiIndicatorRssiDelta: number): boolean
    /**
     * Set the 'Signal Strength Indicator' field in the message.
     * @param valueSignalStrengthIndicatorReport a #gboolean.
     * @param valueSignalStrengthIndicatorThresholds a #GArray of #gint8 elements. A new reference to `value_signal_strength_indicator_thresholds` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSignalStrengthIndicator(valueSignalStrengthIndicatorReport: boolean, valueSignalStrengthIndicatorThresholds: Uint8Array): boolean
    /**
     * Set the 'SINR Indicator' field in the message.
     * @param valueSinrIndicatorReport a #gboolean.
     * @param valueSinrIndicatorSinrDelta a #guint8.
     */
    setSinrIndicator(valueSinrIndicatorReport: boolean, valueSinrIndicatorSinrDelta: number): boolean
    /**
     * Set the 'SINR Threshold' field in the message.
     * @param valueSinrThresholdReport a #gboolean.
     * @param valueSinrThresholdThresholds a #GArray of #guint8 elements. A new reference to `value_sinr_threshold_thresholds` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSinrThreshold(valueSinrThresholdReport: boolean, valueSinrThresholdThresholds: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasSetEventReportInput

    /**
     * Allocates a new #QmiMessageNasSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasSetEventReportInput.
     * @constructor 
     */
    static new(): MessageNasSetEventReportInput
}

interface MessageNasSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetEventReportOutput

    static name: string
}

interface MessageNasSetPreferredNetworksInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInput

    /**
     * Get the 'Clear Previous Preferred Networks' field from `self`.
     */
    getClearPreviousPreferredNetworks(): [ /* returnType */ boolean, /* valueClearPreviousPreferredNetworks */ boolean ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     * 
     * Version of qmi_message_nas_set_preferred_networks_input_get_mnc_pcs_digit_include_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatusPtr */ MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement[] ]
    /**
     * Get the 'Preferred Networks' field from `self`.
     * 
     * Version of qmi_message_nas_set_preferred_networks_input_get_preferred_networks() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPreferredNetworks(): [ /* returnType */ boolean, /* valuePreferredNetworksPtr */ MessageNasSetPreferredNetworksInputPreferredNetworksElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetPreferredNetworksInput
    /**
     * Set the 'Clear Previous Preferred Networks' field in the message.
     * @param valueClearPreviousPreferredNetworks a #gboolean.
     */
    setClearPreviousPreferredNetworks(valueClearPreviousPreferredNetworks: boolean): boolean
    /**
     * Set the 'MNC PCS Digit Include Status' field in the message.
     * @param valueMncPcsDigitIncludeStatusPtr array of #QmiMessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setMncPcsDigitIncludeStatus(valueMncPcsDigitIncludeStatusPtr: MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement[]): boolean
    /**
     * Set the 'Preferred Networks' field in the message.
     * @param valuePreferredNetworksPtr array of #QmiMessageNasSetPreferredNetworksInputPreferredNetworksElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setPreferredNetworks(valuePreferredNetworksPtr: MessageNasSetPreferredNetworksInputPreferredNetworksElement[]): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetPreferredNetworksInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetPreferredNetworksInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInput

    /**
     * Allocates a new #QmiMessageNasSetPreferredNetworksInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasSetPreferredNetworksInput.
     * @constructor 
     */
    static new(): MessageNasSetPreferredNetworksInput
}

interface MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #gboolean.
     * @field 
     */
    includesPcsDigit: boolean
}

/**
 * A QmiMessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement struct.
 * @record 
 */
class MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInputMncPcsDigitIncludeStatusElement

    static name: string
}

interface MessageNasSetPreferredNetworksInputPreferredNetworksElement {

    // Own fields of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInputPreferredNetworksElement

    /**
     * a #guint16.
     * @field 
     */
    mcc: number
    /**
     * a #guint16.
     * @field 
     */
    mnc: number
    /**
     * a #QmiNasPlmnAccessTechnologyIdentifier.
     * @field 
     */
    radioAccessTechnology: NasPlmnAccessTechnologyIdentifier
}

/**
 * A QmiMessageNasSetPreferredNetworksInputPreferredNetworksElement struct.
 * @record 
 */
class MessageNasSetPreferredNetworksInputPreferredNetworksElement {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksInputPreferredNetworksElement

    static name: string
}

interface MessageNasSetPreferredNetworksOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetPreferredNetworksOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetPreferredNetworksOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetPreferredNetworksOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetPreferredNetworksOutput

    static name: string
}

interface MessageNasSetSystemSelectionPreferenceInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetSystemSelectionPreferenceInput

    /**
     * Get the 'Acquisition Order Preference' field from `self`.
     */
    getAcquisitionOrderPreference(): [ /* returnType */ boolean, /* valueAcquisitionOrderPreference */ NasRadioInterface[] ]
    /**
     * Get the 'Band Preference' field from `self`.
     */
    getBandPreference(): [ /* returnType */ boolean, /* valueBandPreference */ NasBandPreference ]
    /**
     * Get the 'CDMA PRL Preference' field from `self`.
     */
    getCdmaPrlPreference(): [ /* returnType */ boolean, /* valueCdmaPrlPreference */ NasCdmaPrlPreference ]
    /**
     * Get the 'Change Duration' field from `self`.
     */
    getChangeDuration(): [ /* returnType */ boolean, /* valueChangeDuration */ NasChangeDuration ]
    /**
     * Get the 'Emergency mode' field from `self`.
     */
    getEmergencyMode(): [ /* returnType */ boolean, /* valueEmergencyMode */ boolean ]
    /**
     * Get the 'Extended LTE Band Preference' field from `self`.
     */
    getExtendedLteBandPreference(): [ /* returnType */ boolean, /* valueExtendedLteBandPreferenceMaskLow */ number, /* valueExtendedLteBandPreferenceMaskMidLow */ number, /* valueExtendedLteBandPreferenceMaskMidHigh */ number, /* valueExtendedLteBandPreferenceMaskHigh */ number ]
    /**
     * Get the 'GSM WCDMA Acquisition Order Preference' field from `self`.
     */
    getGsmWcdmaAcquisitionOrderPreference(): [ /* returnType */ boolean, /* valueGsmWcdmaAcquisitionOrderPreference */ NasGsmWcdmaAcquisitionOrderPreference ]
    /**
     * Get the 'LTE Band Preference' field from `self`.
     */
    getLteBandPreference(): [ /* returnType */ boolean, /* valueLteBandPreference */ NasLteBandPreference ]
    /**
     * Get the 'MNC PCS Digit Include Status' field from `self`.
     */
    getMncPcsDigitIncludeStatus(): [ /* returnType */ boolean, /* valueMncPcsDigitIncludeStatus */ boolean ]
    /**
     * Get the 'Mode Preference' field from `self`.
     */
    getModePreference(): [ /* returnType */ boolean, /* valueModePreference */ NasRatModePreference ]
    /**
     * Get the 'Network Selection Preference' field from `self`.
     */
    getNetworkSelectionPreference(): [ /* returnType */ boolean, /* valueNetworkSelectionPreferenceMode */ NasNetworkSelectionPreference, /* valueNetworkSelectionPreferenceMcc */ number, /* valueNetworkSelectionPreferenceMnc */ number ]
    /**
     * Get the 'Network Selection Registration Restriction' field from `self`.
     */
    getNetworkSelectionRegistrationRestriction(): [ /* returnType */ boolean, /* valueNetworkSelectionRegistrationRestriction */ NasNetworkSelectionRegistrationRestriction ]
    /**
     * Get the 'NR5G NSA Band Preference' field from `self`.
     */
    getNr5gNsaBandPreference(): [ /* returnType */ boolean, /* valueNr5gNsaBandPreferenceMask0 */ number, /* valueNr5gNsaBandPreferenceMask1 */ number, /* valueNr5gNsaBandPreferenceMask2 */ number, /* valueNr5gNsaBandPreferenceMask3 */ number, /* valueNr5gNsaBandPreferenceMask4 */ number, /* valueNr5gNsaBandPreferenceMask5 */ number, /* valueNr5gNsaBandPreferenceMask6 */ number, /* valueNr5gNsaBandPreferenceMask7 */ number ]
    /**
     * Get the 'NR5G SA Band Preference' field from `self`.
     */
    getNr5gSaBandPreference(): [ /* returnType */ boolean, /* valueNr5gSaBandPreferenceMask0 */ number, /* valueNr5gSaBandPreferenceMask1 */ number, /* valueNr5gSaBandPreferenceMask2 */ number, /* valueNr5gSaBandPreferenceMask3 */ number, /* valueNr5gSaBandPreferenceMask4 */ number, /* valueNr5gSaBandPreferenceMask5 */ number, /* valueNr5gSaBandPreferenceMask6 */ number, /* valueNr5gSaBandPreferenceMask7 */ number ]
    /**
     * Get the 'Roaming Preference' field from `self`.
     */
    getRoamingPreference(): [ /* returnType */ boolean, /* valueRoamingPreference */ NasRoamingPreference ]
    /**
     * Get the 'Service Domain Preference' field from `self`.
     */
    getServiceDomainPreference(): [ /* returnType */ boolean, /* valueServiceDomainPreference */ NasServiceDomainPreference ]
    /**
     * Get the 'TD SCDMA Band Preference' field from `self`.
     */
    getTdScdmaBandPreference(): [ /* returnType */ boolean, /* valueTdScdmaBandPreference */ NasTdScdmaBandPreference ]
    /**
     * Get the 'Usage Preference' field from `self`.
     */
    getUsagePreference(): [ /* returnType */ boolean, /* valueUsagePreference */ NasUsagePreference ]
    /**
     * Get the 'Voice Domain Preference' field from `self`.
     */
    getVoiceDomainPreference(): [ /* returnType */ boolean, /* valueVoiceDomainPreference */ NasVoiceDomainPreference ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetSystemSelectionPreferenceInput
    /**
     * Set the 'Acquisition Order Preference' field in the message.
     * @param valueAcquisitionOrderPreference a #GArray of #QmiNasRadioInterface elements. A new reference to `value_acquisition_order_preference` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setAcquisitionOrderPreference(valueAcquisitionOrderPreference: NasRadioInterface[]): boolean
    /**
     * Set the 'Band Preference' field in the message.
     * @param valueBandPreference a #QmiNasBandPreference.
     */
    setBandPreference(valueBandPreference: NasBandPreference): boolean
    /**
     * Set the 'CDMA PRL Preference' field in the message.
     * @param valueCdmaPrlPreference a #QmiNasCdmaPrlPreference.
     */
    setCdmaPrlPreference(valueCdmaPrlPreference: NasCdmaPrlPreference): boolean
    /**
     * Set the 'Change Duration' field in the message.
     * @param valueChangeDuration a #QmiNasChangeDuration.
     */
    setChangeDuration(valueChangeDuration: NasChangeDuration): boolean
    /**
     * Set the 'Emergency mode' field in the message.
     * @param valueEmergencyMode a #gboolean.
     */
    setEmergencyMode(valueEmergencyMode: boolean): boolean
    /**
     * Set the 'Extended LTE Band Preference' field in the message.
     * @param valueExtendedLteBandPreferenceMaskLow a #guint64.
     * @param valueExtendedLteBandPreferenceMaskMidLow a #guint64.
     * @param valueExtendedLteBandPreferenceMaskMidHigh a #guint64.
     * @param valueExtendedLteBandPreferenceMaskHigh a #guint64.
     */
    setExtendedLteBandPreference(valueExtendedLteBandPreferenceMaskLow: number, valueExtendedLteBandPreferenceMaskMidLow: number, valueExtendedLteBandPreferenceMaskMidHigh: number, valueExtendedLteBandPreferenceMaskHigh: number): boolean
    /**
     * Set the 'GSM WCDMA Acquisition Order Preference' field in the message.
     * @param valueGsmWcdmaAcquisitionOrderPreference a #QmiNasGsmWcdmaAcquisitionOrderPreference.
     */
    setGsmWcdmaAcquisitionOrderPreference(valueGsmWcdmaAcquisitionOrderPreference: NasGsmWcdmaAcquisitionOrderPreference): boolean
    /**
     * Set the 'LTE Band Preference' field in the message.
     * @param valueLteBandPreference a #QmiNasLteBandPreference.
     */
    setLteBandPreference(valueLteBandPreference: NasLteBandPreference): boolean
    /**
     * Set the 'MNC PCS Digit Include Status' field in the message.
     * @param valueMncPcsDigitIncludeStatus a #gboolean.
     */
    setMncPcsDigitIncludeStatus(valueMncPcsDigitIncludeStatus: boolean): boolean
    /**
     * Set the 'Mode Preference' field in the message.
     * @param valueModePreference a #QmiNasRatModePreference.
     */
    setModePreference(valueModePreference: NasRatModePreference): boolean
    /**
     * Set the 'Network Selection Preference' field in the message.
     * @param valueNetworkSelectionPreferenceMode a #QmiNasNetworkSelectionPreference.
     * @param valueNetworkSelectionPreferenceMcc a #guint16.
     * @param valueNetworkSelectionPreferenceMnc a #guint16.
     */
    setNetworkSelectionPreference(valueNetworkSelectionPreferenceMode: NasNetworkSelectionPreference, valueNetworkSelectionPreferenceMcc: number, valueNetworkSelectionPreferenceMnc: number): boolean
    /**
     * Set the 'Network Selection Registration Restriction' field in the message.
     * @param valueNetworkSelectionRegistrationRestriction a #QmiNasNetworkSelectionRegistrationRestriction.
     */
    setNetworkSelectionRegistrationRestriction(valueNetworkSelectionRegistrationRestriction: NasNetworkSelectionRegistrationRestriction): boolean
    /**
     * Set the 'NR5G NSA Band Preference' field in the message.
     * @param valueNr5gNsaBandPreferenceMask0 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask1 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask2 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask3 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask4 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask5 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask6 a #guint64.
     * @param valueNr5gNsaBandPreferenceMask7 a #guint64.
     */
    setNr5gNsaBandPreference(valueNr5gNsaBandPreferenceMask0: number, valueNr5gNsaBandPreferenceMask1: number, valueNr5gNsaBandPreferenceMask2: number, valueNr5gNsaBandPreferenceMask3: number, valueNr5gNsaBandPreferenceMask4: number, valueNr5gNsaBandPreferenceMask5: number, valueNr5gNsaBandPreferenceMask6: number, valueNr5gNsaBandPreferenceMask7: number): boolean
    /**
     * Set the 'NR5G SA Band Preference' field in the message.
     * @param valueNr5gSaBandPreferenceMask0 a #guint64.
     * @param valueNr5gSaBandPreferenceMask1 a #guint64.
     * @param valueNr5gSaBandPreferenceMask2 a #guint64.
     * @param valueNr5gSaBandPreferenceMask3 a #guint64.
     * @param valueNr5gSaBandPreferenceMask4 a #guint64.
     * @param valueNr5gSaBandPreferenceMask5 a #guint64.
     * @param valueNr5gSaBandPreferenceMask6 a #guint64.
     * @param valueNr5gSaBandPreferenceMask7 a #guint64.
     */
    setNr5gSaBandPreference(valueNr5gSaBandPreferenceMask0: number, valueNr5gSaBandPreferenceMask1: number, valueNr5gSaBandPreferenceMask2: number, valueNr5gSaBandPreferenceMask3: number, valueNr5gSaBandPreferenceMask4: number, valueNr5gSaBandPreferenceMask5: number, valueNr5gSaBandPreferenceMask6: number, valueNr5gSaBandPreferenceMask7: number): boolean
    /**
     * Set the 'Roaming Preference' field in the message.
     * @param valueRoamingPreference a #QmiNasRoamingPreference.
     */
    setRoamingPreference(valueRoamingPreference: NasRoamingPreference): boolean
    /**
     * Set the 'Service Domain Preference' field in the message.
     * @param valueServiceDomainPreference a #QmiNasServiceDomainPreference.
     */
    setServiceDomainPreference(valueServiceDomainPreference: NasServiceDomainPreference): boolean
    /**
     * Set the 'TD SCDMA Band Preference' field in the message.
     * @param valueTdScdmaBandPreference a #QmiNasTdScdmaBandPreference.
     */
    setTdScdmaBandPreference(valueTdScdmaBandPreference: NasTdScdmaBandPreference): boolean
    /**
     * Set the 'Usage Preference' field in the message.
     * @param valueUsagePreference a #QmiNasUsagePreference.
     */
    setUsagePreference(valueUsagePreference: NasUsagePreference): boolean
    /**
     * Set the 'Voice Domain Preference' field in the message.
     * @param valueVoiceDomainPreference a #QmiNasVoiceDomainPreference.
     */
    setVoiceDomainPreference(valueVoiceDomainPreference: NasVoiceDomainPreference): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetSystemSelectionPreferenceInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetSystemSelectionPreferenceInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetSystemSelectionPreferenceInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasSetSystemSelectionPreferenceInput

    /**
     * Allocates a new #QmiMessageNasSetSystemSelectionPreferenceInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasSetSystemSelectionPreferenceInput.
     * @constructor 
     */
    static new(): MessageNasSetSystemSelectionPreferenceInput
}

interface MessageNasSetSystemSelectionPreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetSystemSelectionPreferenceOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetSystemSelectionPreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetSystemSelectionPreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetSystemSelectionPreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetSystemSelectionPreferenceOutput

    static name: string
}

interface MessageNasSetTechnologyPreferenceInput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetTechnologyPreferenceInput

    /**
     * Get the 'Current' field from `self`.
     */
    getCurrent(): [ /* returnType */ boolean, /* valueCurrentTechnologyPreference */ NasRadioTechnologyPreference, /* valueCurrentTechnologyPreferenceDuration */ NasPreferenceDuration ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetTechnologyPreferenceInput
    /**
     * Set the 'Current' field in the message.
     * @param valueCurrentTechnologyPreference a #QmiNasRadioTechnologyPreference.
     * @param valueCurrentTechnologyPreferenceDuration a #QmiNasPreferenceDuration.
     */
    setCurrent(valueCurrentTechnologyPreference: NasRadioTechnologyPreference, valueCurrentTechnologyPreferenceDuration: NasPreferenceDuration): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetTechnologyPreferenceInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetTechnologyPreferenceInput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetTechnologyPreferenceInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageNasSetTechnologyPreferenceInput

    /**
     * Allocates a new #QmiMessageNasSetTechnologyPreferenceInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageNasSetTechnologyPreferenceInput.
     * @constructor 
     */
    static new(): MessageNasSetTechnologyPreferenceInput
}

interface MessageNasSetTechnologyPreferenceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSetTechnologyPreferenceOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSetTechnologyPreferenceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSetTechnologyPreferenceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSetTechnologyPreferenceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSetTechnologyPreferenceOutput

    static name: string
}

interface MessageNasSwiGetStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageNasSwiGetStatusOutput

    /**
     * Get the 'Common Info v2' field from `self`.
     */
    getCommonInfoV2(): [ /* returnType */ boolean, /* valueCommonInfoV2Temperature */ number, /* valueCommonInfoV2ModemMode */ NasSwiModemMode, /* valueCommonInfoV2SystemMode */ NasSwiSystemMode, /* valueCommonInfoV2ImsRegistrationState */ NasSwiImsRegState, /* valueCommonInfoV2PacketServiceState */ NasSwiPsState ]
    /**
     * Get the 'LTE Info' field from `self`.
     */
    getLteInfo(): [ /* returnType */ boolean, /* valueLteInfoBand */ NasActiveBand, /* valueLteInfoBandwidth */ NasDLBandwidth, /* valueLteInfoRxChannel */ number, /* valueLteInfoTxChannel */ number, /* valueLteInfoEmmState */ NasSwiEmmState, /* valueLteInfoEmmSubState */ number, /* valueLteInfoEmmConnectionState */ NasSwiEmmConnectionState ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageNasSwiGetStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageNasSwiGetStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageNasSwiGetStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageNasSwiGetStatusOutput

    static name: string
}

interface MessageOmaCancelSessionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaCancelSessionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaCancelSessionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaCancelSessionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaCancelSessionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaCancelSessionOutput

    static name: string
}

interface MessageOmaGetFeatureSettingOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaGetFeatureSettingOutput

    /**
     * Get the 'Device Provisioning Service Update Config' field from `self`.
     */
    getDeviceProvisioningServiceUpdateConfig(): [ /* returnType */ boolean, /* valueDeviceProvisioningServiceUpdateConfig */ boolean ]
    /**
     * Get the 'HFA Feature Config' field from `self`.
     */
    getHfaFeatureConfig(): [ /* returnType */ boolean, /* valueHfaFeatureConfig */ boolean ]
    /**
     * Get the 'HFA Feature Done State' field from `self`.
     */
    getHfaFeatureDoneState(): [ /* returnType */ boolean, /* valueHfaFeatureDoneState */ OmaHfaFeatureDoneState ]
    /**
     * Get the 'PRL Update Service Config' field from `self`.
     */
    getPrlUpdateServiceConfig(): [ /* returnType */ boolean, /* valuePrlUpdateServiceConfig */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaGetFeatureSettingOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaGetFeatureSettingOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaGetFeatureSettingOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaGetFeatureSettingOutput

    static name: string
}

interface MessageOmaGetSessionInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaGetSessionInfoOutput

    /**
     * Get the 'Network Initiated Alert' field from `self`.
     */
    getNetworkInitiatedAlert(): [ /* returnType */ boolean, /* valueNetworkInitiatedAlertSessionType */ OmaSessionType, /* valueNetworkInitiatedAlertSessionId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retry Info' field from `self`.
     */
    getRetryInfo(): [ /* returnType */ boolean, /* valueRetryInfoRetryCount */ number, /* valueRetryInfoRetryPauseTimer */ number, /* valueRetryInfoRetryPauseTimerRemaining */ number ]
    /**
     * Get the 'Session Failed Reason' field from `self`.
     */
    getSessionFailedReason(): [ /* returnType */ boolean, /* valueSessionFailedReason */ OmaSessionFailedReason ]
    /**
     * Get the 'Session Info' field from `self`.
     */
    getSessionInfo(): [ /* returnType */ boolean, /* valueSessionInfoSessionState */ OmaSessionState, /* valueSessionInfoSessionType */ OmaSessionType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaGetSessionInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaGetSessionInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaGetSessionInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaGetSessionInfoOutput

    static name: string
}

interface MessageOmaResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaResetOutput

    static name: string
}

interface MessageOmaSendSelectionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSendSelectionInput

    /**
     * Get the 'Network Initiated Alert Selection' field from `self`.
     */
    getNetworkInitiatedAlertSelection(): [ /* returnType */ boolean, /* valueNetworkInitiatedAlertSelectionControlPointSelectionAccept */ boolean, /* valueNetworkInitiatedAlertSelectionSessionId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSendSelectionInput
    /**
     * Set the 'Network Initiated Alert Selection' field in the message.
     * @param valueNetworkInitiatedAlertSelectionControlPointSelectionAccept a #gboolean.
     * @param valueNetworkInitiatedAlertSelectionSessionId a #guint16.
     */
    setNetworkInitiatedAlertSelection(valueNetworkInitiatedAlertSelectionControlPointSelectionAccept: boolean, valueNetworkInitiatedAlertSelectionSessionId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSendSelectionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSendSelectionInput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSendSelectionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageOmaSendSelectionInput

    /**
     * Allocates a new #QmiMessageOmaSendSelectionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageOmaSendSelectionInput.
     * @constructor 
     */
    static new(): MessageOmaSendSelectionInput
}

interface MessageOmaSendSelectionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSendSelectionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSendSelectionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSendSelectionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSendSelectionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSendSelectionOutput

    static name: string
}

interface MessageOmaSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSetEventReportInput

    /**
     * Get the 'Network Initiated Alert Reporting' field from `self`.
     */
    getNetworkInitiatedAlertReporting(): [ /* returnType */ boolean, /* valueNetworkInitiatedAlertReporting */ boolean ]
    /**
     * Get the 'Session State Reporting' field from `self`.
     */
    getSessionStateReporting(): [ /* returnType */ boolean, /* valueSessionStateReporting */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSetEventReportInput
    /**
     * Set the 'Network Initiated Alert Reporting' field in the message.
     * @param valueNetworkInitiatedAlertReporting a #gboolean.
     */
    setNetworkInitiatedAlertReporting(valueNetworkInitiatedAlertReporting: boolean): boolean
    /**
     * Set the 'Session State Reporting' field in the message.
     * @param valueSessionStateReporting a #gboolean.
     */
    setSessionStateReporting(valueSessionStateReporting: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageOmaSetEventReportInput

    /**
     * Allocates a new #QmiMessageOmaSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageOmaSetEventReportInput.
     * @constructor 
     */
    static new(): MessageOmaSetEventReportInput
}

interface MessageOmaSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSetEventReportOutput

    static name: string
}

interface MessageOmaSetFeatureSettingInput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSetFeatureSettingInput

    /**
     * Get the 'Device Provisioning Service Update Config' field from `self`.
     */
    getDeviceProvisioningServiceUpdateConfig(): [ /* returnType */ boolean, /* valueDeviceProvisioningServiceUpdateConfig */ boolean ]
    /**
     * Get the 'HFA Feature Config' field from `self`.
     */
    getHfaFeatureConfig(): [ /* returnType */ boolean, /* valueHfaFeatureConfig */ boolean ]
    /**
     * Get the 'PRL Update Service Config' field from `self`.
     */
    getPrlUpdateServiceConfig(): [ /* returnType */ boolean, /* valuePrlUpdateServiceConfig */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSetFeatureSettingInput
    /**
     * Set the 'Device Provisioning Service Update Config' field in the message.
     * @param valueDeviceProvisioningServiceUpdateConfig a #gboolean.
     */
    setDeviceProvisioningServiceUpdateConfig(valueDeviceProvisioningServiceUpdateConfig: boolean): boolean
    /**
     * Set the 'HFA Feature Config' field in the message.
     * @param valueHfaFeatureConfig a #gboolean.
     */
    setHfaFeatureConfig(valueHfaFeatureConfig: boolean): boolean
    /**
     * Set the 'PRL Update Service Config' field in the message.
     * @param valuePrlUpdateServiceConfig a #gboolean.
     */
    setPrlUpdateServiceConfig(valuePrlUpdateServiceConfig: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSetFeatureSettingInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSetFeatureSettingInput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSetFeatureSettingInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageOmaSetFeatureSettingInput

    /**
     * Allocates a new #QmiMessageOmaSetFeatureSettingInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageOmaSetFeatureSettingInput.
     * @constructor 
     */
    static new(): MessageOmaSetFeatureSettingInput
}

interface MessageOmaSetFeatureSettingOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaSetFeatureSettingOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaSetFeatureSettingOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaSetFeatureSettingOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaSetFeatureSettingOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaSetFeatureSettingOutput

    static name: string
}

interface MessageOmaStartSessionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaStartSessionInput

    /**
     * Get the 'Session Type' field from `self`.
     */
    getSessionType(): [ /* returnType */ boolean, /* valueSessionType */ OmaSessionType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaStartSessionInput
    /**
     * Set the 'Session Type' field in the message.
     * @param valueSessionType a #QmiOmaSessionType.
     */
    setSessionType(valueSessionType: OmaSessionType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaStartSessionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaStartSessionInput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaStartSessionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageOmaStartSessionInput

    /**
     * Allocates a new #QmiMessageOmaStartSessionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageOmaStartSessionInput.
     * @constructor 
     */
    static new(): MessageOmaStartSessionInput
}

interface MessageOmaStartSessionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageOmaStartSessionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageOmaStartSessionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageOmaStartSessionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageOmaStartSessionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageOmaStartSessionOutput

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutput

    /**
     * Get the 'Additional Number Alpha String Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_additional_number_alpha_string_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getAdditionalNumberAlphaStringCapability(): [ /* returnType */ boolean, /* valueAdditionalNumberAlphaStringCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement[] ]
    /**
     * Get the 'Additional Number Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_additional_number_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getAdditionalNumberCapability(): [ /* returnType */ boolean, /* valueAdditionalNumberCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement[] ]
    /**
     * Get the 'Capability Basic Information' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_capability_basic_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCapabilityBasicInformation(): [ /* returnType */ boolean, /* valueCapabilityBasicInformationPtr */ MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir[] ]
    /**
     * Get the 'Email Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_email_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getEmailCapability(): [ /* returnType */ boolean, /* valueEmailCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputEmailCapabilityElement[] ]
    /**
     * Get the 'Group Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_group_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getGroupCapability(): [ /* returnType */ boolean, /* valueGroupCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputGroupCapabilityElement[] ]
    /**
     * Get the 'Grouping Information Alpha String Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_grouping_information_alpha_string_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getGroupingInformationAlphaStringCapability(): [ /* returnType */ boolean, /* valueGroupingInformationAlphaStringCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement[] ]
    /**
     * Get the 'Hidden Records Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_hidden_records_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getHiddenRecordsCapability(): [ /* returnType */ boolean, /* valueHiddenRecordsCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Second Name Capability' field from `self`.
     * 
     * Version of qmi_message_pbm_get_all_capabilities_output_get_second_name_capability() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getSecondNameCapability(): [ /* returnType */ boolean, /* valueSecondNameCapabilityPtr */ MessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePbmGetAllCapabilitiesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePbmGetAllCapabilitiesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutput

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumRecords: number
    /**
     * a #guint8.
     * @field 
     */
    usedRecords: number
    /**
     * a #guint8.
     * @field 
     */
    maximumStringLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputAdditionalNumberAlphaStringCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumAdditionalNumbers: number
    /**
     * a #guint8.
     * @field 
     */
    maximumAdditionalNumberLength: number
    /**
     * a #guint8.
     * @field 
     */
    maximumAdditionalNumberTagLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputAdditionalNumberCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #GArray of #QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement elements.
     * @field 
     */
    phonebooks: object[]
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * an array of #QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement elements.
     * @field 
     */
    phonebooks: MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement[]
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir struct.
 * 
 * This type is a version of #QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementGir

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement

    /**
     * a #QmiPbmPhonebookType.
     * @field 
     */
    phonebookType: PbmPhonebookType
    /**
     * a #guint16.
     * @field 
     */
    usedRecords: number
    /**
     * a #guint16.
     * @field 
     */
    maximumRecords: number
    /**
     * a #guint8.
     * @field 
     */
    maximumNumberLength: number
    /**
     * a #guint8.
     * @field 
     */
    maximumNameLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputCapabilityBasicInformationElementPhonebooksElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputEmailCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputEmailCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumEmails: number
    /**
     * a #guint8.
     * @field 
     */
    maximumEmailAddressLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputEmailCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputEmailCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputEmailCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputGroupCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputGroupCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumGroups: number
    /**
     * a #guint8.
     * @field 
     */
    maximumGroupTagLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputGroupCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputGroupCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputGroupCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumRecords: number
    /**
     * a #guint8.
     * @field 
     */
    usedRecords: number
    /**
     * a #guint8.
     * @field 
     */
    maximumStringLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputGroupingInformationAlphaStringCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #gboolean.
     * @field 
     */
    supported: boolean
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputHiddenRecordsCapabilityElement

    static name: string
}

interface MessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement {

    // Own fields of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement

    /**
     * a #QmiPbmSessionType.
     * @field 
     */
    sessionType: PbmSessionType
    /**
     * a #guint8.
     * @field 
     */
    maximumSecondNameLength: number
}

/**
 * A QmiMessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement struct.
 * @record 
 */
class MessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetAllCapabilitiesOutputSecondNameCapabilityElement

    static name: string
}

interface MessagePbmGetCapabilitiesInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePbmGetCapabilitiesInput

    /**
     * Get the 'Phonebook Information' field from `self`.
     */
    getPhonebookInformation(): [ /* returnType */ boolean, /* valuePhonebookInformationSessionType */ PbmSessionType, /* valuePhonebookInformationPhonebookType */ PbmPhonebookType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePbmGetCapabilitiesInput
    /**
     * Set the 'Phonebook Information' field in the message.
     * @param valuePhonebookInformationSessionType a #QmiPbmSessionType.
     * @param valuePhonebookInformationPhonebookType a #QmiPbmPhonebookType.
     */
    setPhonebookInformation(valuePhonebookInformationSessionType: PbmSessionType, valuePhonebookInformationPhonebookType: PbmPhonebookType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePbmGetCapabilitiesInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePbmGetCapabilitiesInput {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetCapabilitiesInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePbmGetCapabilitiesInput

    /**
     * Allocates a new #QmiMessagePbmGetCapabilitiesInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePbmGetCapabilitiesInput.
     * @constructor 
     */
    static new(): MessagePbmGetCapabilitiesInput
}

interface MessagePbmGetCapabilitiesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePbmGetCapabilitiesOutput

    /**
     * Get the 'Additional Number Alpha String Capability' field from `self`.
     */
    getAdditionalNumberAlphaStringCapability(): [ /* returnType */ boolean, /* valueAdditionalNumberAlphaStringCapabilityMaximumRecords */ number, /* valueAdditionalNumberAlphaStringCapabilityUsedRecords */ number, /* valueAdditionalNumberAlphaStringCapabilityMaximumStringLength */ number ]
    /**
     * Get the 'Additional Number Capability' field from `self`.
     */
    getAdditionalNumberCapability(): [ /* returnType */ boolean, /* valueAdditionalNumberCapabilityMaximumAdditionalNumbers */ number, /* valueAdditionalNumberCapabilityMaximumAdditionalNumberLength */ number, /* valueAdditionalNumberCapabilityMaximumAdditionalNumberTagLength */ number ]
    /**
     * Get the 'Capability Basic Information' field from `self`.
     */
    getCapabilityBasicInformation(): [ /* returnType */ boolean, /* valueCapabilityBasicInformationSessionType */ PbmSessionType, /* valueCapabilityBasicInformationPhonebookType */ PbmPhonebookType, /* valueCapabilityBasicInformationUsedRecords */ number, /* valueCapabilityBasicInformationMaximumRecords */ number, /* valueCapabilityBasicInformationMaximumNumberLength */ number, /* valueCapabilityBasicInformationMaximumNameLength */ number ]
    /**
     * Get the 'Email Capability' field from `self`.
     */
    getEmailCapability(): [ /* returnType */ boolean, /* valueEmailCapabilityMaximumEmails */ number, /* valueEmailCapabilityMaximumEmailAddressLength */ number ]
    /**
     * Get the 'Group Capability' field from `self`.
     */
    getGroupCapability(): [ /* returnType */ boolean, /* valueGroupCapabilityMaximumGroups */ number, /* valueGroupCapabilityMaximumGroupTagLength */ number ]
    /**
     * Get the 'Grouping Information Alpha String Capability' field from `self`.
     */
    getGroupingInformationAlphaStringCapability(): [ /* returnType */ boolean, /* valueGroupingInformationAlphaStringCapabilityMaximumRecords */ number, /* valueGroupingInformationAlphaStringCapabilityUsedRecords */ number, /* valueGroupingInformationAlphaStringCapabilityMaximumStringLength */ number ]
    /**
     * Get the 'Hidden Records Capability' field from `self`.
     */
    getHiddenRecordsCapability(): [ /* returnType */ boolean, /* valueHiddenRecordsCapabilitySupported */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Second Name Capability' field from `self`.
     */
    getSecondNameCapability(): [ /* returnType */ boolean, /* valueSecondNameCapabilityMaximumSecondNameLength */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePbmGetCapabilitiesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePbmGetCapabilitiesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePbmGetCapabilitiesOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePbmGetCapabilitiesOutput

    static name: string
}

interface MessagePbmIndicationRegisterInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePbmIndicationRegisterInput

    /**
     * Get the 'Event Registration Mask' field from `self`.
     */
    getEventRegistrationMask(): [ /* returnType */ boolean, /* valueEventRegistrationMask */ PbmEventRegistrationFlag ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePbmIndicationRegisterInput
    /**
     * Set the 'Event Registration Mask' field in the message.
     * @param valueEventRegistrationMask a #QmiPbmEventRegistrationFlag.
     */
    setEventRegistrationMask(valueEventRegistrationMask: PbmEventRegistrationFlag): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePbmIndicationRegisterInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePbmIndicationRegisterInput {

    // Own properties of Qmi-1.0.Qmi.MessagePbmIndicationRegisterInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePbmIndicationRegisterInput

    /**
     * Allocates a new #QmiMessagePbmIndicationRegisterInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePbmIndicationRegisterInput.
     * @constructor 
     */
    static new(): MessagePbmIndicationRegisterInput
}

interface MessagePbmIndicationRegisterOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePbmIndicationRegisterOutput

    /**
     * Get the 'Event Registration Mask' field from `self`.
     */
    getEventRegistrationMask(): [ /* returnType */ boolean, /* valueEventRegistrationMask */ PbmEventRegistrationFlag ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePbmIndicationRegisterOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePbmIndicationRegisterOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePbmIndicationRegisterOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePbmIndicationRegisterOutput

    static name: string
}

interface MessagePdcActivateConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcActivateConfigInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcActivateConfigInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcActivateConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcActivateConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcActivateConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcActivateConfigInput

    /**
     * Allocates a new #QmiMessagePdcActivateConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcActivateConfigInput.
     * @constructor 
     */
    static new(): MessagePdcActivateConfigInput
}

interface MessagePdcActivateConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcActivateConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcActivateConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcActivateConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcActivateConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcActivateConfigOutput

    static name: string
}

interface MessagePdcConfigChangeInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcConfigChangeInput

    /**
     * Get the 'Type With Id v2' field from `self`.
     */
    getTypeWithIdV2(): [ /* returnType */ boolean, /* valueTypeWithIdV2ConfigType */ PdcConfigurationType, /* valueTypeWithIdV2Id */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcConfigChangeInput
    /**
     * Set the 'Type With Id v2' field in the message.
     * @param valueTypeWithIdV2ConfigType a #QmiPdcConfigurationType.
     * @param valueTypeWithIdV2Id a #GArray of #guint8 elements. A new reference to `value_type_with_id_v2`_id will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setTypeWithIdV2(valueTypeWithIdV2ConfigType: PdcConfigurationType, valueTypeWithIdV2Id: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcConfigChangeInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcConfigChangeInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcConfigChangeInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcConfigChangeInput

    /**
     * Allocates a new #QmiMessagePdcConfigChangeInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcConfigChangeInput.
     * @constructor 
     */
    static new(): MessagePdcConfigChangeInput
}

interface MessagePdcConfigChangeOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcConfigChangeOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Type With Id v2' field from `self`.
     */
    getTypeWithIdV2(): [ /* returnType */ boolean, /* valueTypeWithIdV2ConfigType */ PdcConfigurationType, /* valueTypeWithIdV2Id */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcConfigChangeOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcConfigChangeOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcConfigChangeOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcConfigChangeOutput

    static name: string
}

interface MessagePdcDeactivateConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcDeactivateConfigInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcDeactivateConfigInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcDeactivateConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcDeactivateConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcDeactivateConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcDeactivateConfigInput

    /**
     * Allocates a new #QmiMessagePdcDeactivateConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcDeactivateConfigInput.
     * @constructor 
     */
    static new(): MessagePdcDeactivateConfigInput
}

interface MessagePdcDeactivateConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcDeactivateConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcDeactivateConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcDeactivateConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcDeactivateConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcDeactivateConfigOutput

    static name: string
}

interface MessagePdcDeleteConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcDeleteConfigInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Id' field from `self`.
     */
    getId(): [ /* returnType */ boolean, /* valueId */ Uint8Array ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcDeleteConfigInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Id' field in the message.
     * @param valueId a #GArray of #guint8 elements. A new reference to `value_id` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setId(valueId: Uint8Array): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcDeleteConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcDeleteConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcDeleteConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcDeleteConfigInput

    /**
     * Allocates a new #QmiMessagePdcDeleteConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcDeleteConfigInput.
     * @constructor 
     */
    static new(): MessagePdcDeleteConfigInput
}

interface MessagePdcDeleteConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcDeleteConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcDeleteConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcDeleteConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcDeleteConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcDeleteConfigOutput

    static name: string
}

interface MessagePdcGetConfigInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetConfigInfoInput

    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Get the 'Type With Id v2' field from `self`.
     */
    getTypeWithIdV2(): [ /* returnType */ boolean, /* valueTypeWithIdV2ConfigType */ PdcConfigurationType, /* valueTypeWithIdV2Id */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetConfigInfoInput
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Set the 'Type With Id v2' field in the message.
     * @param valueTypeWithIdV2ConfigType a #QmiPdcConfigurationType.
     * @param valueTypeWithIdV2Id a #GArray of #guint8 elements. A new reference to `value_type_with_id_v2`_id will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setTypeWithIdV2(valueTypeWithIdV2ConfigType: PdcConfigurationType, valueTypeWithIdV2Id: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetConfigInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetConfigInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetConfigInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcGetConfigInfoInput

    /**
     * Allocates a new #QmiMessagePdcGetConfigInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcGetConfigInfoInput.
     * @constructor 
     */
    static new(): MessagePdcGetConfigInfoInput
}

interface MessagePdcGetConfigInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetConfigInfoOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetConfigInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetConfigInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetConfigInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetConfigInfoOutput

    static name: string
}

interface MessagePdcGetConfigLimitsInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetConfigLimitsInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetConfigLimitsInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetConfigLimitsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetConfigLimitsInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetConfigLimitsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcGetConfigLimitsInput

    /**
     * Allocates a new #QmiMessagePdcGetConfigLimitsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcGetConfigLimitsInput.
     * @constructor 
     */
    static new(): MessagePdcGetConfigLimitsInput
}

interface MessagePdcGetConfigLimitsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetConfigLimitsOutput

    /**
     * Get the 'Current Size' field from `self`.
     */
    getCurrentSize(): [ /* returnType */ boolean, /* valueCurrentSize */ number ]
    /**
     * Get the 'Maximum Size' field from `self`.
     */
    getMaximumSize(): [ /* returnType */ boolean, /* valueMaximumSize */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetConfigLimitsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetConfigLimitsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetConfigLimitsOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetConfigLimitsOutput

    static name: string
}

interface MessagePdcGetDefaultConfigInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetDefaultConfigInfoInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetDefaultConfigInfoInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetDefaultConfigInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetDefaultConfigInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetDefaultConfigInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcGetDefaultConfigInfoInput

    /**
     * Allocates a new #QmiMessagePdcGetDefaultConfigInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcGetDefaultConfigInfoInput.
     * @constructor 
     */
    static new(): MessagePdcGetDefaultConfigInfoInput
}

interface MessagePdcGetDefaultConfigInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetDefaultConfigInfoOutput

    /**
     * Get the 'Description' field from `self`.
     */
    getDescription(): [ /* returnType */ boolean, /* valueDescription */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Get the 'Total Size' field from `self`.
     */
    getTotalSize(): [ /* returnType */ boolean, /* valueTotalSize */ number ]
    /**
     * Get the 'Version' field from `self`.
     */
    getVersion(): [ /* returnType */ boolean, /* valueVersion */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetDefaultConfigInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetDefaultConfigInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetDefaultConfigInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetDefaultConfigInfoOutput

    static name: string
}

interface MessagePdcGetSelectedConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetSelectedConfigInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetSelectedConfigInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetSelectedConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetSelectedConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetSelectedConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcGetSelectedConfigInput

    /**
     * Allocates a new #QmiMessagePdcGetSelectedConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcGetSelectedConfigInput.
     * @constructor 
     */
    static new(): MessagePdcGetSelectedConfigInput
}

interface MessagePdcGetSelectedConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcGetSelectedConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcGetSelectedConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcGetSelectedConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcGetSelectedConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcGetSelectedConfigOutput

    static name: string
}

interface MessagePdcListConfigsInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcListConfigsInput

    /**
     * Get the 'Config Type' field from `self`.
     */
    getConfigType(): [ /* returnType */ boolean, /* valueConfigType */ PdcConfigurationType ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcListConfigsInput
    /**
     * Set the 'Config Type' field in the message.
     * @param valueConfigType a #QmiPdcConfigurationType.
     */
    setConfigType(valueConfigType: PdcConfigurationType): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcListConfigsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcListConfigsInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcListConfigsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcListConfigsInput

    /**
     * Allocates a new #QmiMessagePdcListConfigsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcListConfigsInput.
     * @constructor 
     */
    static new(): MessagePdcListConfigsInput
}

interface MessagePdcListConfigsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcListConfigsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcListConfigsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcListConfigsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcListConfigsOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcListConfigsOutput

    static name: string
}

interface MessagePdcLoadConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcLoadConfigInput

    /**
     * Get the 'Config Chunk' field from `self`.
     */
    getConfigChunk(): [ /* returnType */ boolean, /* valueConfigChunkType */ PdcConfigurationType, /* valueConfigChunkId */ Uint8Array, /* valueConfigChunkTotalSize */ number, /* valueConfigChunkChunk */ Uint8Array ]
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcLoadConfigInput
    /**
     * Set the 'Config Chunk' field in the message.
     * @param valueConfigChunkType a #QmiPdcConfigurationType.
     * @param valueConfigChunkId a #GArray of #guint8 elements. A new reference to `value_config_chunk_id` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     * @param valueConfigChunkTotalSize a #guint32.
     * @param valueConfigChunkChunk a #GArray of #guint8 elements. A new reference to `value_config_chunk_chunk` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setConfigChunk(valueConfigChunkType: PdcConfigurationType, valueConfigChunkId: Uint8Array, valueConfigChunkTotalSize: number, valueConfigChunkChunk: Uint8Array): boolean
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcLoadConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcLoadConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcLoadConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcLoadConfigInput

    /**
     * Allocates a new #QmiMessagePdcLoadConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcLoadConfigInput.
     * @constructor 
     */
    static new(): MessagePdcLoadConfigInput
}

interface MessagePdcLoadConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcLoadConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcLoadConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcLoadConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcLoadConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcLoadConfigOutput

    static name: string
}

interface MessagePdcRegisterInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcRegisterInput

    /**
     * Get the 'Enable Refresh' field from `self`.
     */
    getEnableRefresh(): [ /* returnType */ boolean, /* valueEnableRefresh */ boolean ]
    /**
     * Get the 'Enable Reporting' field from `self`.
     */
    getEnableReporting(): [ /* returnType */ boolean, /* valueEnableReporting */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcRegisterInput
    /**
     * Set the 'Enable Refresh' field in the message.
     * @param valueEnableRefresh a #gboolean.
     */
    setEnableRefresh(valueEnableRefresh: boolean): boolean
    /**
     * Set the 'Enable Reporting' field in the message.
     * @param valueEnableReporting a #gboolean.
     */
    setEnableReporting(valueEnableReporting: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcRegisterInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcRegisterInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcRegisterInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcRegisterInput

    /**
     * Allocates a new #QmiMessagePdcRegisterInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcRegisterInput.
     * @constructor 
     */
    static new(): MessagePdcRegisterInput
}

interface MessagePdcRegisterOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcRegisterOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcRegisterOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcRegisterOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcRegisterOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcRegisterOutput

    static name: string
}

interface MessagePdcResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcResetOutput

    static name: string
}

interface MessagePdcSetSelectedConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcSetSelectedConfigInput

    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Get the 'Type With Id v2' field from `self`.
     */
    getTypeWithIdV2(): [ /* returnType */ boolean, /* valueTypeWithIdV2ConfigType */ PdcConfigurationType, /* valueTypeWithIdV2Id */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcSetSelectedConfigInput
    /**
     * Set the 'Token' field in the message.
     * @param valueToken a #guint32.
     */
    setToken(valueToken: number): boolean
    /**
     * Set the 'Type With Id v2' field in the message.
     * @param valueTypeWithIdV2ConfigType a #QmiPdcConfigurationType.
     * @param valueTypeWithIdV2Id a #GArray of #guint8 elements. A new reference to `value_type_with_id_v2`_id will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setTypeWithIdV2(valueTypeWithIdV2ConfigType: PdcConfigurationType, valueTypeWithIdV2Id: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcSetSelectedConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcSetSelectedConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcSetSelectedConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdcSetSelectedConfigInput

    /**
     * Allocates a new #QmiMessagePdcSetSelectedConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdcSetSelectedConfigInput.
     * @constructor 
     */
    static new(): MessagePdcSetSelectedConfigInput
}

interface MessagePdcSetSelectedConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdcSetSelectedConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Token' field from `self`.
     */
    getToken(): [ /* returnType */ boolean, /* valueToken */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdcSetSelectedConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdcSetSelectedConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdcSetSelectedConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdcSetSelectedConfigOutput

    static name: string
}

interface MessagePdsGetAgpsConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsGetAgpsConfigInput

    /**
     * Get the 'Network Mode' field from `self`.
     */
    getNetworkMode(): [ /* returnType */ boolean, /* valueNetworkMode */ PdsNetworkMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsGetAgpsConfigInput
    /**
     * Set the 'Network Mode' field in the message.
     * @param valueNetworkMode a #QmiPdsNetworkMode.
     */
    setNetworkMode(valueNetworkMode: PdsNetworkMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsGetAgpsConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsGetAgpsConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsGetAgpsConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsGetAgpsConfigInput

    /**
     * Allocates a new #QmiMessagePdsGetAgpsConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsGetAgpsConfigInput.
     * @constructor 
     */
    static new(): MessagePdsGetAgpsConfigInput
}

interface MessagePdsGetAgpsConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsGetAgpsConfigOutput

    /**
     * Get the 'Location Server Address' field from `self`.
     */
    getLocationServerAddress(): [ /* returnType */ boolean, /* valueLocationServerAddressIp */ number, /* valueLocationServerAddressPort */ number ]
    /**
     * Get the 'Location Server URL' field from `self`.
     */
    getLocationServerUrl(): [ /* returnType */ boolean, /* valueLocationServerUrl */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsGetAgpsConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsGetAgpsConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsGetAgpsConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsGetAgpsConfigOutput

    static name: string
}

interface MessagePdsGetAutoTrackingStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsGetAutoTrackingStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueStateAutoTrackingState */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsGetAutoTrackingStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsGetAutoTrackingStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsGetAutoTrackingStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsGetAutoTrackingStateOutput

    static name: string
}

interface MessagePdsGetDefaultTrackingSessionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsGetDefaultTrackingSessionOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoSessionOperation */ PdsOperatingMode, /* valueInfoPositionDataTimeout */ number, /* valueInfoInterval */ number, /* valueInfoAccuracyThreshold */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsGetDefaultTrackingSessionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsGetDefaultTrackingSessionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsGetDefaultTrackingSessionOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsGetDefaultTrackingSessionOutput

    static name: string
}

interface MessagePdsGetGpsServiceStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsGetGpsServiceStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueStateGpsServiceState */ boolean, /* valueStateTrackingSessionState */ PdsTrackingSessionState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsGetGpsServiceStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsGetGpsServiceStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsGetGpsServiceStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsGetGpsServiceStateOutput

    static name: string
}

interface MessagePdsResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsResetOutput

    static name: string
}

interface MessagePdsSetAgpsConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetAgpsConfigInput

    /**
     * Get the 'Location Server Address' field from `self`.
     */
    getLocationServerAddress(): [ /* returnType */ boolean, /* valueLocationServerAddressIp */ number, /* valueLocationServerAddressPort */ number ]
    /**
     * Get the 'Location Server URL' field from `self`.
     */
    getLocationServerUrl(): [ /* returnType */ boolean, /* valueLocationServerUrl */ Uint8Array ]
    /**
     * Get the 'Network Mode' field from `self`.
     */
    getNetworkMode(): [ /* returnType */ boolean, /* valueNetworkMode */ PdsNetworkMode ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetAgpsConfigInput
    /**
     * Set the 'Location Server Address' field in the message.
     * @param valueLocationServerAddressIp a #guint32.
     * @param valueLocationServerAddressPort a #guint32.
     */
    setLocationServerAddress(valueLocationServerAddressIp: number, valueLocationServerAddressPort: number): boolean
    /**
     * Set the 'Location Server URL' field in the message.
     * @param valueLocationServerUrl a #GArray of #guint8 elements. A new reference to `value_location_server_url` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setLocationServerUrl(valueLocationServerUrl: Uint8Array): boolean
    /**
     * Set the 'Network Mode' field in the message.
     * @param valueNetworkMode a #QmiPdsNetworkMode.
     */
    setNetworkMode(valueNetworkMode: PdsNetworkMode): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetAgpsConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetAgpsConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetAgpsConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsSetAgpsConfigInput

    /**
     * Allocates a new #QmiMessagePdsSetAgpsConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsSetAgpsConfigInput.
     * @constructor 
     */
    static new(): MessagePdsSetAgpsConfigInput
}

interface MessagePdsSetAgpsConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetAgpsConfigOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetAgpsConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetAgpsConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetAgpsConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetAgpsConfigOutput

    static name: string
}

interface MessagePdsSetAutoTrackingStateInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetAutoTrackingStateInput

    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueStateAutoTrackingState */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetAutoTrackingStateInput
    /**
     * Set the 'State' field in the message.
     * @param valueStateAutoTrackingState a #gboolean.
     */
    setState(valueStateAutoTrackingState: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetAutoTrackingStateInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetAutoTrackingStateInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetAutoTrackingStateInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsSetAutoTrackingStateInput

    /**
     * Allocates a new #QmiMessagePdsSetAutoTrackingStateInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsSetAutoTrackingStateInput.
     * @constructor 
     */
    static new(): MessagePdsSetAutoTrackingStateInput
}

interface MessagePdsSetAutoTrackingStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetAutoTrackingStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetAutoTrackingStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetAutoTrackingStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetAutoTrackingStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetAutoTrackingStateOutput

    static name: string
}

interface MessagePdsSetDefaultTrackingSessionInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetDefaultTrackingSessionInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoSessionOperation */ PdsOperatingMode, /* valueInfoPositionDataTimeout */ number, /* valueInfoInterval */ number, /* valueInfoAccuracyThreshold */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetDefaultTrackingSessionInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoSessionOperation a #QmiPdsOperatingMode.
     * @param valueInfoPositionDataTimeout a #guint8.
     * @param valueInfoInterval a #guint32.
     * @param valueInfoAccuracyThreshold a #guint32.
     */
    setInfo(valueInfoSessionOperation: PdsOperatingMode, valueInfoPositionDataTimeout: number, valueInfoInterval: number, valueInfoAccuracyThreshold: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetDefaultTrackingSessionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetDefaultTrackingSessionInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetDefaultTrackingSessionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsSetDefaultTrackingSessionInput

    /**
     * Allocates a new #QmiMessagePdsSetDefaultTrackingSessionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsSetDefaultTrackingSessionInput.
     * @constructor 
     */
    static new(): MessagePdsSetDefaultTrackingSessionInput
}

interface MessagePdsSetDefaultTrackingSessionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetDefaultTrackingSessionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetDefaultTrackingSessionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetDefaultTrackingSessionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetDefaultTrackingSessionOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetDefaultTrackingSessionOutput

    static name: string
}

interface MessagePdsSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetEventReportInput

    /**
     * Get the 'Accelerometer Data Streaming Ready Reporting' field from `self`.
     */
    getAccelerometerDataStreamingReadyReporting(): [ /* returnType */ boolean, /* valueAccelerometerDataStreamingReadyReporting */ boolean ]
    /**
     * Get the 'Extended External XTRA Data Request Reporting' field from `self`.
     */
    getExtendedExternalXtraDataRequestReporting(): [ /* returnType */ boolean, /* valueExtendedExternalXtraDataRequestReporting */ boolean ]
    /**
     * Get the 'Extended NMEA Position Reporting' field from `self`.
     */
    getExtendedNmeaPositionReporting(): [ /* returnType */ boolean, /* valueExtendedNmeaPositionReporting */ boolean ]
    /**
     * Get the 'External Time Injection Request Reporting' field from `self`.
     */
    getExternalTimeInjectionRequestReporting(): [ /* returnType */ boolean, /* valueExternalTimeInjectionRequestReporting */ boolean ]
    /**
     * Get the 'External WIFI Position Request Reporting' field from `self`.
     */
    getExternalWifiPositionRequestReporting(): [ /* returnType */ boolean, /* valueExternalWifiPositionRequestReporting */ boolean ]
    /**
     * Get the 'External XTRA Data Request Reporting' field from `self`.
     */
    getExternalXtraDataRequestReporting(): [ /* returnType */ boolean, /* valueExternalXtraDataRequestReporting */ boolean ]
    /**
     * Get the 'Gyro Data Streaming Ready Reporting' field from `self`.
     */
    getGyroDataStreamingReadyReporting(): [ /* returnType */ boolean, /* valueGyroDataStreamingReadyReporting */ boolean ]
    /**
     * Get the 'Heading Uncertainty Reporting' field from `self`.
     */
    getHeadingUncertaintyReporting(): [ /* returnType */ boolean, /* valueHeadingUncertaintyReporting */ boolean ]
    /**
     * Get the 'NMEA Debug Strings Reporting' field from `self`.
     */
    getNmeaDebugStringsReporting(): [ /* returnType */ boolean, /* valueNmeaDebugStringsReporting */ boolean ]
    /**
     * Get the 'NMEA Position Reporting' field from `self`.
     */
    getNmeaPositionReporting(): [ /* returnType */ boolean, /* valueNmeaPositionReporting */ boolean ]
    /**
     * Get the 'Parsed Position Reporting' field from `self`.
     */
    getParsedPositionReporting(): [ /* returnType */ boolean, /* valueParsedPositionReporting */ boolean ]
    /**
     * Get the 'PDS Comm Event Reporting' field from `self`.
     */
    getPdsCommEventReporting(): [ /* returnType */ boolean, /* valuePdsCommEventReporting */ boolean ]
    /**
     * Get the 'Position Reliability Indicator Reporting' field from `self`.
     */
    getPositionReliabilityIndicatorReporting(): [ /* returnType */ boolean, /* valuePositionReliabilityIndicatorReporting */ boolean ]
    /**
     * Get the 'Satellite Information Reporting' field from `self`.
     */
    getSatelliteInformationReporting(): [ /* returnType */ boolean, /* valueSatelliteInformationReporting */ boolean ]
    /**
     * Get the 'Sensor Data Usage Indicator Reporting' field from `self`.
     */
    getSensorDataUsageIndicatorReporting(): [ /* returnType */ boolean, /* valueSensorDataUsageIndicatorReporting */ boolean ]
    /**
     * Get the 'SUPL Network Initiated Prompt Reporting' field from `self`.
     */
    getSuplNetworkInitiatedPromptReporting(): [ /* returnType */ boolean, /* valueSuplNetworkInitiatedPromptReporting */ boolean ]
    /**
     * Get the 'Time Source Information Reporting' field from `self`.
     */
    getTimeSourceInformationReporting(): [ /* returnType */ boolean, /* valueTimeSourceInformationReporting */ boolean ]
    /**
     * Get the 'Time Sync Request Reporting' field from `self`.
     */
    getTimeSyncRequestReporting(): [ /* returnType */ boolean, /* valueTimeSyncRequestReporting */ boolean ]
    /**
     * Get the 'UMTS CP Network Initiated Prompt Reporting' field from `self`.
     */
    getUmtsCpNetworkInitiatedPromptReporting(): [ /* returnType */ boolean, /* valueUmtsCpNetworkInitiatedPromptReporting */ boolean ]
    /**
     * Get the 'VX Network Initiated Request Reporting' field from `self`.
     */
    getVxNetworkInitiatedRequestReporting(): [ /* returnType */ boolean, /* valueVxNetworkInitiatedRequestReporting */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetEventReportInput
    /**
     * Set the 'Accelerometer Data Streaming Ready Reporting' field in the message.
     * @param valueAccelerometerDataStreamingReadyReporting a #gboolean.
     */
    setAccelerometerDataStreamingReadyReporting(valueAccelerometerDataStreamingReadyReporting: boolean): boolean
    /**
     * Set the 'Extended External XTRA Data Request Reporting' field in the message.
     * @param valueExtendedExternalXtraDataRequestReporting a #gboolean.
     */
    setExtendedExternalXtraDataRequestReporting(valueExtendedExternalXtraDataRequestReporting: boolean): boolean
    /**
     * Set the 'Extended NMEA Position Reporting' field in the message.
     * @param valueExtendedNmeaPositionReporting a #gboolean.
     */
    setExtendedNmeaPositionReporting(valueExtendedNmeaPositionReporting: boolean): boolean
    /**
     * Set the 'External Time Injection Request Reporting' field in the message.
     * @param valueExternalTimeInjectionRequestReporting a #gboolean.
     */
    setExternalTimeInjectionRequestReporting(valueExternalTimeInjectionRequestReporting: boolean): boolean
    /**
     * Set the 'External WIFI Position Request Reporting' field in the message.
     * @param valueExternalWifiPositionRequestReporting a #gboolean.
     */
    setExternalWifiPositionRequestReporting(valueExternalWifiPositionRequestReporting: boolean): boolean
    /**
     * Set the 'External XTRA Data Request Reporting' field in the message.
     * @param valueExternalXtraDataRequestReporting a #gboolean.
     */
    setExternalXtraDataRequestReporting(valueExternalXtraDataRequestReporting: boolean): boolean
    /**
     * Set the 'Gyro Data Streaming Ready Reporting' field in the message.
     * @param valueGyroDataStreamingReadyReporting a #gboolean.
     */
    setGyroDataStreamingReadyReporting(valueGyroDataStreamingReadyReporting: boolean): boolean
    /**
     * Set the 'Heading Uncertainty Reporting' field in the message.
     * @param valueHeadingUncertaintyReporting a #gboolean.
     */
    setHeadingUncertaintyReporting(valueHeadingUncertaintyReporting: boolean): boolean
    /**
     * Set the 'NMEA Debug Strings Reporting' field in the message.
     * @param valueNmeaDebugStringsReporting a #gboolean.
     */
    setNmeaDebugStringsReporting(valueNmeaDebugStringsReporting: boolean): boolean
    /**
     * Set the 'NMEA Position Reporting' field in the message.
     * @param valueNmeaPositionReporting a #gboolean.
     */
    setNmeaPositionReporting(valueNmeaPositionReporting: boolean): boolean
    /**
     * Set the 'Parsed Position Reporting' field in the message.
     * @param valueParsedPositionReporting a #gboolean.
     */
    setParsedPositionReporting(valueParsedPositionReporting: boolean): boolean
    /**
     * Set the 'PDS Comm Event Reporting' field in the message.
     * @param valuePdsCommEventReporting a #gboolean.
     */
    setPdsCommEventReporting(valuePdsCommEventReporting: boolean): boolean
    /**
     * Set the 'Position Reliability Indicator Reporting' field in the message.
     * @param valuePositionReliabilityIndicatorReporting a #gboolean.
     */
    setPositionReliabilityIndicatorReporting(valuePositionReliabilityIndicatorReporting: boolean): boolean
    /**
     * Set the 'Satellite Information Reporting' field in the message.
     * @param valueSatelliteInformationReporting a #gboolean.
     */
    setSatelliteInformationReporting(valueSatelliteInformationReporting: boolean): boolean
    /**
     * Set the 'Sensor Data Usage Indicator Reporting' field in the message.
     * @param valueSensorDataUsageIndicatorReporting a #gboolean.
     */
    setSensorDataUsageIndicatorReporting(valueSensorDataUsageIndicatorReporting: boolean): boolean
    /**
     * Set the 'SUPL Network Initiated Prompt Reporting' field in the message.
     * @param valueSuplNetworkInitiatedPromptReporting a #gboolean.
     */
    setSuplNetworkInitiatedPromptReporting(valueSuplNetworkInitiatedPromptReporting: boolean): boolean
    /**
     * Set the 'Time Source Information Reporting' field in the message.
     * @param valueTimeSourceInformationReporting a #gboolean.
     */
    setTimeSourceInformationReporting(valueTimeSourceInformationReporting: boolean): boolean
    /**
     * Set the 'Time Sync Request Reporting' field in the message.
     * @param valueTimeSyncRequestReporting a #gboolean.
     */
    setTimeSyncRequestReporting(valueTimeSyncRequestReporting: boolean): boolean
    /**
     * Set the 'UMTS CP Network Initiated Prompt Reporting' field in the message.
     * @param valueUmtsCpNetworkInitiatedPromptReporting a #gboolean.
     */
    setUmtsCpNetworkInitiatedPromptReporting(valueUmtsCpNetworkInitiatedPromptReporting: boolean): boolean
    /**
     * Set the 'VX Network Initiated Request Reporting' field in the message.
     * @param valueVxNetworkInitiatedRequestReporting a #gboolean.
     */
    setVxNetworkInitiatedRequestReporting(valueVxNetworkInitiatedRequestReporting: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsSetEventReportInput

    /**
     * Allocates a new #QmiMessagePdsSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsSetEventReportInput.
     * @constructor 
     */
    static new(): MessagePdsSetEventReportInput
}

interface MessagePdsSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetEventReportOutput

    static name: string
}

interface MessagePdsSetGpsServiceStateInput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetGpsServiceStateInput

    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueStateGpsServiceState */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetGpsServiceStateInput
    /**
     * Set the 'State' field in the message.
     * @param valueStateGpsServiceState a #gboolean.
     */
    setState(valueStateGpsServiceState: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetGpsServiceStateInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetGpsServiceStateInput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetGpsServiceStateInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessagePdsSetGpsServiceStateInput

    /**
     * Allocates a new #QmiMessagePdsSetGpsServiceStateInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessagePdsSetGpsServiceStateInput.
     * @constructor 
     */
    static new(): MessagePdsSetGpsServiceStateInput
}

interface MessagePdsSetGpsServiceStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessagePdsSetGpsServiceStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessagePdsSetGpsServiceStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessagePdsSetGpsServiceStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessagePdsSetGpsServiceStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessagePdsSetGpsServiceStateOutput

    static name: string
}

interface MessageQosGetFlowStatusInput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosGetFlowStatusInput

    /**
     * Get the 'Qos Id' field from `self`.
     */
    getQosId(): [ /* returnType */ boolean, /* valueQosId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosGetFlowStatusInput
    /**
     * Set the 'Qos Id' field in the message.
     * @param valueQosId a #guint32.
     */
    setQosId(valueQosId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosGetFlowStatusInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosGetFlowStatusInput {

    // Own properties of Qmi-1.0.Qmi.MessageQosGetFlowStatusInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageQosGetFlowStatusInput

    /**
     * Allocates a new #QmiMessageQosGetFlowStatusInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageQosGetFlowStatusInput.
     * @constructor 
     */
    static new(): MessageQosGetFlowStatusInput
}

interface MessageQosGetFlowStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosGetFlowStatusOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Value' field from `self`.
     */
    getValue(): [ /* returnType */ boolean, /* valueValue */ QosStatus ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosGetFlowStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosGetFlowStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosGetFlowStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageQosGetFlowStatusOutput

    static name: string
}

interface MessageQosGetNetworkStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosGetNetworkStatusOutput

    /**
     * Get the 'QoS Supported' field from `self`.
     */
    getQosSupported(): [ /* returnType */ boolean, /* valueQosSupported */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosGetNetworkStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosGetNetworkStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosGetNetworkStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageQosGetNetworkStatusOutput

    static name: string
}

interface MessageQosResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageQosResetOutput

    static name: string
}

interface MessageQosSwiReadDataStatsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsInput

    /**
     * Get the 'Apn Id' field from `self`.
     */
    getApnId(): [ /* returnType */ boolean, /* valueApnId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosSwiReadDataStatsInput
    /**
     * Set the 'Apn Id' field in the message.
     * @param valueApnId a #guint32.
     */
    setApnId(valueApnId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosSwiReadDataStatsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosSwiReadDataStatsInput {

    // Own properties of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsInput

    /**
     * Allocates a new #QmiMessageQosSwiReadDataStatsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageQosSwiReadDataStatsInput.
     * @constructor 
     */
    static new(): MessageQosSwiReadDataStatsInput
}

interface MessageQosSwiReadDataStatsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsOutput

    /**
     * Get the 'Apn' field from `self`.
     */
    getApn(): [ /* returnType */ boolean, /* valueApnApnId */ number, /* valueApnTxPackets */ number, /* valueApnTxPacketsDropped */ number, /* valueApnRxPackets */ number, /* valueApnTxBytes */ number, /* valueApnTxBytesDropped */ number, /* valueApnRxBytes */ number ]
    /**
     * Get the 'Flow' field from `self`.
     * 
     * Version of qmi_message_qos_swi_read_data_stats_output_get_flow() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getFlow(): [ /* returnType */ boolean, /* valueFlowPtr */ MessageQosSwiReadDataStatsOutputFlowElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageQosSwiReadDataStatsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageQosSwiReadDataStatsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageQosSwiReadDataStatsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsOutput

    static name: string
}

interface MessageQosSwiReadDataStatsOutputFlowElement {

    // Own fields of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsOutputFlowElement

    /**
     * a #guint32.
     * @field 
     */
    bearerId: number
    /**
     * a #guint32.
     * @field 
     */
    txPackets: number
    /**
     * a #guint32.
     * @field 
     */
    txPacketsDropped: number
    /**
     * a #guint64.
     * @field 
     */
    txBytes: number
    /**
     * a #guint64.
     * @field 
     */
    txBytesDropped: number
}

/**
 * A QmiMessageQosSwiReadDataStatsOutputFlowElement struct.
 * @record 
 */
class MessageQosSwiReadDataStatsOutputFlowElement {

    // Own properties of Qmi-1.0.Qmi.MessageQosSwiReadDataStatsOutputFlowElement

    static name: string
}

interface MessageSarRfGetStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageSarRfGetStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueState */ SarRfState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageSarRfGetStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageSarRfGetStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageSarRfGetStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageSarRfGetStateOutput

    static name: string
}

interface MessageSarRfSetStateInput {

    // Owm methods of Qmi-1.0.Qmi.MessageSarRfSetStateInput

    /**
     * Get the 'State' field from `self`.
     */
    getState(): [ /* returnType */ boolean, /* valueState */ SarRfState ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageSarRfSetStateInput
    /**
     * Set the 'State' field in the message.
     * @param valueState a #QmiSarRfState.
     */
    setState(valueState: SarRfState): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageSarRfSetStateInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageSarRfSetStateInput {

    // Own properties of Qmi-1.0.Qmi.MessageSarRfSetStateInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageSarRfSetStateInput

    /**
     * Allocates a new #QmiMessageSarRfSetStateInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageSarRfSetStateInput.
     * @constructor 
     */
    static new(): MessageSarRfSetStateInput
}

interface MessageSarRfSetStateOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageSarRfSetStateOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageSarRfSetStateOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageSarRfSetStateOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageSarRfSetStateOutput {

    // Own properties of Qmi-1.0.Qmi.MessageSarRfSetStateOutput

    static name: string
}

interface MessageUimChangePinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimChangePinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ UimPinId, /* valueInfoOldPin */ string, /* valueInfoNewPin */ string ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimChangePinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiUimPinId.
     * @param valueInfoOldPin a constant string.
     * @param valueInfoNewPin a constant string.
     */
    setInfo(valueInfoPinId: UimPinId, valueInfoOldPin: string, valueInfoNewPin: string): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimChangePinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimChangePinInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimChangePinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimChangePinInput

    /**
     * Allocates a new #QmiMessageUimChangePinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimChangePinInput.
     * @constructor 
     */
    static new(): MessageUimChangePinInput
}

interface MessageUimChangePinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimChangePinOutput

    /**
     * Get the 'Card Result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retries Remaining' field from `self`.
     */
    getRetriesRemaining(): [ /* returnType */ boolean, /* valueRetriesRemainingVerifyRetriesLeft */ number, /* valueRetriesRemainingUnblockRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimChangePinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimChangePinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimChangePinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimChangePinOutput

    static name: string
}

interface MessageUimChangeProvisioningSessionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimChangeProvisioningSessionInput

    /**
     * Get the 'Application Information' field from `self`.
     */
    getApplicationInformation(): [ /* returnType */ boolean, /* valueApplicationInformationSlot */ number, /* valueApplicationInformationApplicationIdentifier */ Uint8Array ]
    /**
     * Get the 'Session Change' field from `self`.
     */
    getSessionChange(): [ /* returnType */ boolean, /* valueSessionChangeSessionType */ UimSessionType, /* valueSessionChangeActivate */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimChangeProvisioningSessionInput
    /**
     * Set the 'Application Information' field in the message.
     * @param valueApplicationInformationSlot a #guint8.
     * @param valueApplicationInformationApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_application_information_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setApplicationInformation(valueApplicationInformationSlot: number, valueApplicationInformationApplicationIdentifier: Uint8Array): boolean
    /**
     * Set the 'Session Change' field in the message.
     * @param valueSessionChangeSessionType a #QmiUimSessionType.
     * @param valueSessionChangeActivate a #gboolean.
     */
    setSessionChange(valueSessionChangeSessionType: UimSessionType, valueSessionChangeActivate: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimChangeProvisioningSessionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimChangeProvisioningSessionInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimChangeProvisioningSessionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimChangeProvisioningSessionInput

    /**
     * Allocates a new #QmiMessageUimChangeProvisioningSessionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimChangeProvisioningSessionInput.
     * @constructor 
     */
    static new(): MessageUimChangeProvisioningSessionInput
}

interface MessageUimChangeProvisioningSessionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimChangeProvisioningSessionOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimChangeProvisioningSessionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimChangeProvisioningSessionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimChangeProvisioningSessionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimChangeProvisioningSessionOutput

    static name: string
}

interface MessageUimDepersonalizationInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimDepersonalizationInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoFeature */ UimCardApplicationPersonalizationFeature, /* valueInfoOperation */ UimDepersonalizationOperation, /* valueInfoControlKey */ string ]
    /**
     * Get the 'Slot' field from `self`.
     */
    getSlot(): [ /* returnType */ boolean, /* valueSlot */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimDepersonalizationInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoFeature a #QmiUimCardApplicationPersonalizationFeature.
     * @param valueInfoOperation a #QmiUimDepersonalizationOperation.
     * @param valueInfoControlKey a constant string.
     */
    setInfo(valueInfoFeature: UimCardApplicationPersonalizationFeature, valueInfoOperation: UimDepersonalizationOperation, valueInfoControlKey: string): boolean
    /**
     * Set the 'Slot' field in the message.
     * @param valueSlot a #guint8.
     */
    setSlot(valueSlot: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimDepersonalizationInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimDepersonalizationInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimDepersonalizationInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimDepersonalizationInput

    /**
     * Allocates a new #QmiMessageUimDepersonalizationInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimDepersonalizationInput.
     * @constructor 
     */
    static new(): MessageUimDepersonalizationInput
}

interface MessageUimDepersonalizationOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimDepersonalizationOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retries Remaining' field from `self`.
     */
    getRetriesRemaining(): [ /* returnType */ boolean, /* valueRetriesRemainingVerifyLeft */ number, /* valueRetriesRemainingUnblockLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimDepersonalizationOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimDepersonalizationOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimDepersonalizationOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimDepersonalizationOutput

    static name: string
}

interface MessageUimGetCardStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetCardStatusOutput

    /**
     * Get the 'Card Status' field from `self`.
     * 
     * Version of qmi_message_uim_get_card_status_output_get_card_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCardStatus(): [ /* returnType */ boolean, /* valueCardStatusIndexGwPrimary */ number, /* valueCardStatusIndex1xPrimary */ number, /* valueCardStatusIndexGwSecondary */ number, /* valueCardStatusIndex1xSecondary */ number, /* valueCardStatusCardsPtr */ MessageUimGetCardStatusOutputCardStatusCardsElementGir[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetCardStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetCardStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetCardStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetCardStatusOutput

    static name: string
}

interface MessageUimGetCardStatusOutputCardStatusCardsElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElement

    /**
     * a #QmiUimCardState.
     * @field 
     */
    cardState: UimCardState
    /**
     * a #QmiUimPinState.
     * @field 
     */
    upinState: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    upinRetries: number
    /**
     * a #guint8.
     * @field 
     */
    upukRetries: number
    /**
     * a #QmiUimCardError.
     * @field 
     */
    errorCode: UimCardError
    /**
     * a #GArray of #QmiMessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement elements.
     * @field 
     */
    applications: object[]
}

/**
 * A QmiMessageUimGetCardStatusOutputCardStatusCardsElement struct.
 * @record 
 */
class MessageUimGetCardStatusOutputCardStatusCardsElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElement

    static name: string
}

interface MessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement

    /**
     * a #QmiUimCardApplicationType.
     * @field 
     */
    type: UimCardApplicationType
    /**
     * a #QmiUimCardApplicationState.
     * @field 
     */
    state: UimCardApplicationState
    /**
     * a #QmiUimCardApplicationPersonalizationState.
     * @field 
     */
    personalizationState: UimCardApplicationPersonalizationState
    /**
     * a #QmiUimCardApplicationPersonalizationFeature.
     * @field 
     */
    personalizationFeature: UimCardApplicationPersonalizationFeature
    /**
     * a #guint8.
     * @field 
     */
    personalizationRetries: number
    /**
     * a #guint8.
     * @field 
     */
    personalizationUnblockRetries: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    applicationIdentifierValue: object[]
    /**
     * a #gboolean.
     * @field 
     */
    upinReplacesPin1: boolean
    /**
     * a #QmiUimPinState.
     * @field 
     */
    pin1State: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    pin1Retries: number
    /**
     * a #guint8.
     * @field 
     */
    puk1Retries: number
    /**
     * a #QmiUimPinState.
     * @field 
     */
    pin2State: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    pin2Retries: number
    /**
     * a #guint8.
     * @field 
     */
    puk2Retries: number
}

/**
 * A QmiMessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement struct.
 * @record 
 */
class MessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement

    static name: string
}

interface MessageUimGetCardStatusOutputCardStatusCardsElementGir {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElementGir

    /**
     * a #QmiUimCardState.
     * @field 
     */
    cardState: UimCardState
    /**
     * a #QmiUimPinState.
     * @field 
     */
    upinState: UimPinState
    /**
     * a #guint8.
     * @field 
     */
    upinRetries: number
    /**
     * a #guint8.
     * @field 
     */
    upukRetries: number
    /**
     * a #QmiUimCardError.
     * @field 
     */
    errorCode: UimCardError
    /**
     * an array of #QmiMessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement elements.
     * @field 
     */
    applications: MessageUimGetCardStatusOutputCardStatusCardsElementApplicationsElement[]
}

/**
 * A QmiMessageUimGetCardStatusOutputCardStatusCardsElementGir struct.
 * 
 * This type is a version of #QmiMessageUimGetCardStatusOutputCardStatusCardsElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageUimGetCardStatusOutputCardStatusCardsElementGir {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetCardStatusOutputCardStatusCardsElementGir

    static name: string
}

interface MessageUimGetConfigurationInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetConfigurationInput

    /**
     * Get the 'Configuration Mask' field from `self`.
     */
    getConfigurationMask(): [ /* returnType */ boolean, /* valueConfigurationMask */ UimConfiguration ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetConfigurationInput
    /**
     * Set the 'Configuration Mask' field in the message.
     * @param valueConfigurationMask a #QmiUimConfiguration.
     */
    setConfigurationMask(valueConfigurationMask: UimConfiguration): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetConfigurationInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetConfigurationInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimGetConfigurationInput

    /**
     * Allocates a new #QmiMessageUimGetConfigurationInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimGetConfigurationInput.
     * @constructor 
     */
    static new(): MessageUimGetConfigurationInput
}

interface MessageUimGetConfigurationOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetConfigurationOutput

    /**
     * Get the 'Automatic Selection' field from `self`.
     */
    getAutomaticSelection(): [ /* returnType */ boolean, /* valueAutomaticSelection */ boolean ]
    getCompatContext(): object | null
    /**
     * Get the 'Halt Subscription' field from `self`.
     */
    getHaltSubscription(): [ /* returnType */ boolean, /* valueHaltSubscription */ boolean ]
    /**
     * Get the 'Personalization Status' field from `self`.
     * 
     * Version of qmi_message_uim_get_configuration_output_get_personalization_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPersonalizationStatus(): [ /* returnType */ boolean, /* valuePersonalizationStatusPtr */ MessageUimGetConfigurationOutputPersonalizationStatusElement[] ]
    /**
     * Get the 'Personalization Status Other' field from `self`.
     * 
     * Version of qmi_message_uim_get_configuration_output_get_personalization_status_other() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPersonalizationStatusOther(): [ /* returnType */ boolean, /* valuePersonalizationStatusOtherPtr */ MessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetConfigurationOutput
    setCompatContext(compatContext: object | null, compatContextFree: GLib.DestroyNotify): void
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetConfigurationOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetConfigurationOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationOutput

    static name: string
}

interface MessageUimGetConfigurationOutputPersonalizationStatusElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusElement

    /**
     * a #QmiUimCardApplicationPersonalizationFeature.
     * @field 
     */
    feature: UimCardApplicationPersonalizationFeature
    /**
     * a #guint8.
     * @field 
     */
    verifyLeft: number
    /**
     * a #guint8.
     * @field 
     */
    unblockLeft: number
}

/**
 * A QmiMessageUimGetConfigurationOutputPersonalizationStatusElement struct.
 * @record 
 */
class MessageUimGetConfigurationOutputPersonalizationStatusElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusElement

    static name: string
}

interface MessageUimGetConfigurationOutputPersonalizationStatusOtherElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElement

    /**
     * a #GArray of #QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement elements.
     * @field 
     */
    slot: object[]
}

/**
 * A QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElement struct.
 * @record 
 */
class MessageUimGetConfigurationOutputPersonalizationStatusOtherElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElement

    static name: string
}

interface MessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir

    /**
     * an array of #QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement elements.
     * @field 
     */
    slot: MessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement[]
}

/**
 * A QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir struct.
 * 
 * This type is a version of #QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElement, using arrays of pointers to
 * structs instead of arrays of structs, for easier binding in other languages.
 * @record 
 */
class MessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElementGir

    static name: string
}

interface MessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement

    /**
     * a #QmiUimCardApplicationPersonalizationFeature.
     * @field 
     */
    feature: UimCardApplicationPersonalizationFeature
    /**
     * a #guint8.
     * @field 
     */
    verifyLeft: number
    /**
     * a #guint8.
     * @field 
     */
    unblockLeft: number
}

/**
 * A QmiMessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement struct.
 * @record 
 */
class MessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetConfigurationOutputPersonalizationStatusOtherElementSlotElement

    static name: string
}

interface MessageUimGetFileAttributesInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetFileAttributesInput

    /**
     * Get the 'File' field from `self`.
     */
    getFile(): [ /* returnType */ boolean, /* valueFileFileId */ number, /* valueFileFilePath */ Uint8Array ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetFileAttributesInput
    /**
     * Set the 'File' field in the message.
     * @param valueFileFileId a #guint16.
     * @param valueFileFilePath a #GArray of #guint8 elements. A new reference to `value_file_file_path` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setFile(valueFileFileId: number, valueFileFilePath: Uint8Array): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetFileAttributesInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetFileAttributesInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetFileAttributesInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimGetFileAttributesInput

    /**
     * Allocates a new #QmiMessageUimGetFileAttributesInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimGetFileAttributesInput.
     * @constructor 
     */
    static new(): MessageUimGetFileAttributesInput
}

interface MessageUimGetFileAttributesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetFileAttributesOutput

    /**
     * Get the 'Card result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'File Attributes' field from `self`.
     */
    getFileAttributes(): [ /* returnType */ boolean, /* valueFileAttributesFileSize */ number, /* valueFileAttributesFileId */ number, /* valueFileAttributesFileType */ UimFileType, /* valueFileAttributesRecordSize */ number, /* valueFileAttributesRecordCount */ number, /* valueFileAttributesReadSecurityAttributesLogic */ UimSecurityAttributeLogic, /* valueFileAttributesReadSecurityAttributes */ UimSecurityAttribute, /* valueFileAttributesWriteSecurityAttributesLogic */ UimSecurityAttributeLogic, /* valueFileAttributesWriteSecurityAttributes */ UimSecurityAttribute, /* valueFileAttributesIncreaseSecurityAttributesLogic */ UimSecurityAttributeLogic, /* valueFileAttributesIncreaseSecurityAttributes */ UimSecurityAttribute, /* valueFileAttributesDeactivateSecurityAttributesLogic */ UimSecurityAttributeLogic, /* valueFileAttributesDeactivateSecurityAttributes */ UimSecurityAttribute, /* valueFileAttributesActivateSecurityAttributesLogic */ UimSecurityAttributeLogic, /* valueFileAttributesActivateSecurityAttributes */ UimSecurityAttribute, /* valueFileAttributesRawData */ Uint8Array ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetFileAttributesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetFileAttributesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetFileAttributesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetFileAttributesOutput

    static name: string
}

interface MessageUimGetSlotStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetSlotStatusOutput

    getCompatContext(): object | null
    /**
     * Get the 'Physical Slot Information' field from `self`.
     * 
     * Version of qmi_message_uim_get_slot_status_output_get_physical_slot_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPhysicalSlotInformation(): [ /* returnType */ boolean, /* valuePhysicalSlotInformationPtr */ PhysicalSlotInformationSlot[] ]
    /**
     * Get the 'Physical Slot Status' field from `self`.
     * 
     * Version of qmi_message_uim_get_slot_status_output_get_physical_slot_status() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getPhysicalSlotStatus(): [ /* returnType */ boolean, /* valuePhysicalSlotStatusPtr */ PhysicalSlotStatusSlot[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Slot EID' field from `self`.
     * 
     * Version of qmi_message_uim_get_slot_status_output_get_slot_eid() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getSlotEid(): [ /* returnType */ boolean, /* valueSlotEidPtr */ SlotEidElement[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetSlotStatusOutput
    setCompatContext(compatContext: object | null, compatContextFree: GLib.DestroyNotify): void
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetSlotStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetSlotStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetSlotStatusOutput

    static name: string
}

interface MessageUimGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimGetSupportedMessagesOutput

    static name: string
}

interface MessageUimPowerOffSimInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimPowerOffSimInput

    /**
     * Get the 'Slot' field from `self`.
     */
    getSlot(): [ /* returnType */ boolean, /* valueSlot */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimPowerOffSimInput
    /**
     * Set the 'Slot' field in the message.
     * @param valueSlot a #guint8.
     */
    setSlot(valueSlot: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimPowerOffSimInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimPowerOffSimInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimPowerOffSimInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimPowerOffSimInput

    /**
     * Allocates a new #QmiMessageUimPowerOffSimInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimPowerOffSimInput.
     * @constructor 
     */
    static new(): MessageUimPowerOffSimInput
}

interface MessageUimPowerOffSimOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimPowerOffSimOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimPowerOffSimOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimPowerOffSimOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimPowerOffSimOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimPowerOffSimOutput

    static name: string
}

interface MessageUimPowerOnSimInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimPowerOnSimInput

    /**
     * Get the 'Slot' field from `self`.
     */
    getSlot(): [ /* returnType */ boolean, /* valueSlot */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimPowerOnSimInput
    /**
     * Set the 'Slot' field in the message.
     * @param valueSlot a #guint8.
     */
    setSlot(valueSlot: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimPowerOnSimInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimPowerOnSimInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimPowerOnSimInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimPowerOnSimInput

    /**
     * Allocates a new #QmiMessageUimPowerOnSimInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimPowerOnSimInput.
     * @constructor 
     */
    static new(): MessageUimPowerOnSimInput
}

interface MessageUimPowerOnSimOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimPowerOnSimOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimPowerOnSimOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimPowerOnSimOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimPowerOnSimOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimPowerOnSimOutput

    static name: string
}

interface MessageUimReadRecordInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimReadRecordInput

    /**
     * Get the 'File' field from `self`.
     */
    getFile(): [ /* returnType */ boolean, /* valueFileFileId */ number, /* valueFileFilePath */ Uint8Array ]
    /**
     * Get the 'Last Record' field from `self`.
     */
    getLastRecord(): [ /* returnType */ boolean, /* valueLastRecord */ number ]
    /**
     * Get the 'Record' field from `self`.
     */
    getRecord(): [ /* returnType */ boolean, /* valueRecordRecordNumber */ number, /* valueRecordRecordLength */ number ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimReadRecordInput
    /**
     * Set the 'File' field in the message.
     * @param valueFileFileId a #guint16.
     * @param valueFileFilePath a #GArray of #guint8 elements. A new reference to `value_file_file_path` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setFile(valueFileFileId: number, valueFileFilePath: Uint8Array): boolean
    /**
     * Set the 'Last Record' field in the message.
     * @param valueLastRecord a #guint16.
     */
    setLastRecord(valueLastRecord: number): boolean
    /**
     * Set the 'Record' field in the message.
     * @param valueRecordRecordNumber a #guint16.
     * @param valueRecordRecordLength a #guint16.
     */
    setRecord(valueRecordRecordNumber: number, valueRecordRecordLength: number): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimReadRecordInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimReadRecordInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimReadRecordInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimReadRecordInput

    /**
     * Allocates a new #QmiMessageUimReadRecordInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimReadRecordInput.
     * @constructor 
     */
    static new(): MessageUimReadRecordInput
}

interface MessageUimReadRecordOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimReadRecordOutput

    /**
     * Get the 'Additional Read Result' field from `self`.
     */
    getAdditionalReadResult(): [ /* returnType */ boolean, /* valueAdditionalReadResult */ Uint8Array ]
    /**
     * Get the 'Card result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'Read Result' field from `self`.
     */
    getReadResult(): [ /* returnType */ boolean, /* valueReadResult */ Uint8Array ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimReadRecordOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimReadRecordOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimReadRecordOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimReadRecordOutput

    static name: string
}

interface MessageUimReadTransparentInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimReadTransparentInput

    /**
     * Get the 'Encrypt Data' field from `self`.
     */
    getEncryptData(): [ /* returnType */ boolean, /* valueEncryptData */ boolean ]
    /**
     * Get the 'File' field from `self`.
     */
    getFile(): [ /* returnType */ boolean, /* valueFileFileId */ number, /* valueFileFilePath */ Uint8Array ]
    /**
     * Get the 'Read Information' field from `self`.
     */
    getReadInformation(): [ /* returnType */ boolean, /* valueReadInformationOffset */ number, /* valueReadInformationLength */ number ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimReadTransparentInput
    /**
     * Set the 'Encrypt Data' field in the message.
     * @param valueEncryptData a #gboolean.
     */
    setEncryptData(valueEncryptData: boolean): boolean
    /**
     * Set the 'File' field in the message.
     * @param valueFileFileId a #guint16.
     * @param valueFileFilePath a #GArray of #guint8 elements. A new reference to `value_file_file_path` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setFile(valueFileFileId: number, valueFileFilePath: Uint8Array): boolean
    /**
     * Set the 'Read Information' field in the message.
     * @param valueReadInformationOffset a #guint16.
     * @param valueReadInformationLength a #guint16.
     */
    setReadInformation(valueReadInformationOffset: number, valueReadInformationLength: number): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimReadTransparentInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimReadTransparentInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimReadTransparentInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimReadTransparentInput

    /**
     * Allocates a new #QmiMessageUimReadTransparentInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimReadTransparentInput.
     * @constructor 
     */
    static new(): MessageUimReadTransparentInput
}

interface MessageUimReadTransparentOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimReadTransparentOutput

    /**
     * Get the 'Card result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'Encrypted Data' field from `self`.
     */
    getEncryptedData(): [ /* returnType */ boolean, /* valueEncryptedData */ boolean ]
    /**
     * Get the 'Read result' field from `self`.
     */
    getReadResult(): [ /* returnType */ boolean, /* valueReadResult */ Uint8Array ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimReadTransparentOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimReadTransparentOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimReadTransparentOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimReadTransparentOutput

    static name: string
}

interface MessageUimRefreshCompleteInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshCompleteInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoRefreshSuccess */ boolean ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshCompleteInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoRefreshSuccess a #gboolean.
     */
    setInfo(valueInfoRefreshSuccess: boolean): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshCompleteInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshCompleteInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshCompleteInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimRefreshCompleteInput

    /**
     * Allocates a new #QmiMessageUimRefreshCompleteInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimRefreshCompleteInput.
     * @constructor 
     */
    static new(): MessageUimRefreshCompleteInput
}

interface MessageUimRefreshCompleteOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshCompleteOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshCompleteOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshCompleteOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshCompleteOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshCompleteOutput

    static name: string
}

interface MessageUimRefreshRegisterAllInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshRegisterAllInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoRegisterFlag */ boolean ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshRegisterAllInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoRegisterFlag a #gboolean.
     */
    setInfo(valueInfoRegisterFlag: boolean): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshRegisterAllInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshRegisterAllInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshRegisterAllInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimRefreshRegisterAllInput

    /**
     * Allocates a new #QmiMessageUimRefreshRegisterAllInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimRefreshRegisterAllInput.
     * @constructor 
     */
    static new(): MessageUimRefreshRegisterAllInput
}

interface MessageUimRefreshRegisterAllOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshRegisterAllOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshRegisterAllOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshRegisterAllOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshRegisterAllOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshRegisterAllOutput

    static name: string
}

interface MessageUimRefreshRegisterInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshRegisterInput

    /**
     * Get the 'Info' field from `self`.
     * 
     * Version of qmi_message_uim_refresh_register_input_get_info() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoRegisterFlag */ boolean, /* valueInfoVoteForInit */ boolean, /* valueInfoFilesPtr */ MessageUimRefreshRegisterInputInfoFilesElement[] ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshRegisterInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoRegisterFlag a #gboolean.
     * @param valueInfoVoteForInit a #gboolean.
     * @param valueInfoFilesPtr array of #QmiMessageUimRefreshRegisterInputInfoFilesElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setInfo(valueInfoRegisterFlag: boolean, valueInfoVoteForInit: boolean, valueInfoFilesPtr: MessageUimRefreshRegisterInputInfoFilesElement[]): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshRegisterInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshRegisterInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshRegisterInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimRefreshRegisterInput

    /**
     * Allocates a new #QmiMessageUimRefreshRegisterInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimRefreshRegisterInput.
     * @constructor 
     */
    static new(): MessageUimRefreshRegisterInput
}

interface MessageUimRefreshRegisterInputInfoFilesElement {

    // Own fields of Qmi-1.0.Qmi.MessageUimRefreshRegisterInputInfoFilesElement

    /**
     * a #guint16.
     * @field 
     */
    fileId: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    path: object[]
}

/**
 * A QmiMessageUimRefreshRegisterInputInfoFilesElement struct.
 * @record 
 */
class MessageUimRefreshRegisterInputInfoFilesElement {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshRegisterInputInfoFilesElement

    static name: string
}

interface MessageUimRefreshRegisterOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRefreshRegisterOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRefreshRegisterOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRefreshRegisterOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRefreshRegisterOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRefreshRegisterOutput

    static name: string
}

interface MessageUimRegisterEventsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRegisterEventsInput

    /**
     * Get the 'Event Registration Mask' field from `self`.
     */
    getEventRegistrationMask(): [ /* returnType */ boolean, /* valueEventRegistrationMask */ UimEventRegistrationFlag ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRegisterEventsInput
    /**
     * Set the 'Event Registration Mask' field in the message.
     * @param valueEventRegistrationMask a #QmiUimEventRegistrationFlag.
     */
    setEventRegistrationMask(valueEventRegistrationMask: UimEventRegistrationFlag): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRegisterEventsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRegisterEventsInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRegisterEventsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimRegisterEventsInput

    /**
     * Allocates a new #QmiMessageUimRegisterEventsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimRegisterEventsInput.
     * @constructor 
     */
    static new(): MessageUimRegisterEventsInput
}

interface MessageUimRegisterEventsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimRegisterEventsOutput

    /**
     * Get the 'Event Registration Mask' field from `self`.
     */
    getEventRegistrationMask(): [ /* returnType */ boolean, /* valueEventRegistrationMask */ UimEventRegistrationFlag ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimRegisterEventsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimRegisterEventsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimRegisterEventsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimRegisterEventsOutput

    static name: string
}

interface MessageUimResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimResetOutput

    static name: string
}

interface MessageUimSetPinProtectionInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimSetPinProtectionInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ UimPinId, /* valueInfoPinEnabled */ boolean, /* valueInfoPinValue */ string ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimSetPinProtectionInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiUimPinId.
     * @param valueInfoPinEnabled a #gboolean.
     * @param valueInfoPinValue a constant string.
     */
    setInfo(valueInfoPinId: UimPinId, valueInfoPinEnabled: boolean, valueInfoPinValue: string): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimSetPinProtectionInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimSetPinProtectionInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimSetPinProtectionInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimSetPinProtectionInput

    /**
     * Allocates a new #QmiMessageUimSetPinProtectionInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimSetPinProtectionInput.
     * @constructor 
     */
    static new(): MessageUimSetPinProtectionInput
}

interface MessageUimSetPinProtectionOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimSetPinProtectionOutput

    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retries Remaining' field from `self`.
     */
    getRetriesRemaining(): [ /* returnType */ boolean, /* valueRetriesRemainingVerifyRetriesLeft */ number, /* valueRetriesRemainingUnblockRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimSetPinProtectionOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimSetPinProtectionOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimSetPinProtectionOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimSetPinProtectionOutput

    static name: string
}

interface MessageUimSwitchSlotInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimSwitchSlotInput

    /**
     * Get the 'Logical Slot' field from `self`.
     */
    getLogicalSlot(): [ /* returnType */ boolean, /* valueLogicalSlot */ number ]
    /**
     * Get the 'Physical Slot' field from `self`.
     */
    getPhysicalSlot(): [ /* returnType */ boolean, /* valuePhysicalSlot */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimSwitchSlotInput
    /**
     * Set the 'Logical Slot' field in the message.
     * @param valueLogicalSlot a #guint8.
     */
    setLogicalSlot(valueLogicalSlot: number): boolean
    /**
     * Set the 'Physical Slot' field in the message.
     * @param valuePhysicalSlot a #guint32.
     */
    setPhysicalSlot(valuePhysicalSlot: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimSwitchSlotInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimSwitchSlotInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimSwitchSlotInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimSwitchSlotInput

    /**
     * Allocates a new #QmiMessageUimSwitchSlotInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimSwitchSlotInput.
     * @constructor 
     */
    static new(): MessageUimSwitchSlotInput
}

interface MessageUimSwitchSlotOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimSwitchSlotOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimSwitchSlotOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimSwitchSlotOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimSwitchSlotOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimSwitchSlotOutput

    static name: string
}

interface MessageUimUnblockPinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimUnblockPinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ UimPinId, /* valueInfoPuk */ string, /* valueInfoNewPin */ string ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimUnblockPinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiUimPinId.
     * @param valueInfoPuk a constant string.
     * @param valueInfoNewPin a constant string.
     */
    setInfo(valueInfoPinId: UimPinId, valueInfoPuk: string, valueInfoNewPin: string): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimUnblockPinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimUnblockPinInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimUnblockPinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimUnblockPinInput

    /**
     * Allocates a new #QmiMessageUimUnblockPinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimUnblockPinInput.
     * @constructor 
     */
    static new(): MessageUimUnblockPinInput
}

interface MessageUimUnblockPinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimUnblockPinOutput

    /**
     * Get the 'Card Result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retries Remaining' field from `self`.
     */
    getRetriesRemaining(): [ /* returnType */ boolean, /* valueRetriesRemainingVerifyRetriesLeft */ number, /* valueRetriesRemainingUnblockRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimUnblockPinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimUnblockPinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimUnblockPinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimUnblockPinOutput

    static name: string
}

interface MessageUimVerifyPinInput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimVerifyPinInput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPinId */ UimPinId, /* valueInfoPinValue */ string ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the 'Session' field from `self`.
     */
    getSession(): [ /* returnType */ boolean, /* valueSessionSessionType */ UimSessionType, /* valueSessionApplicationIdentifier */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimVerifyPinInput
    /**
     * Set the 'Info' field in the message.
     * @param valueInfoPinId a #QmiUimPinId.
     * @param valueInfoPinValue a constant string.
     */
    setInfo(valueInfoPinId: UimPinId, valueInfoPinValue: string): boolean
    /**
     * Set the 'Response In Indication Token' field in the message.
     * @param valueResponseInIndicationToken a #guint32.
     */
    setResponseInIndicationToken(valueResponseInIndicationToken: number): boolean
    /**
     * Set the 'Session' field in the message.
     * @param valueSessionSessionType a #QmiUimSessionType.
     * @param valueSessionApplicationIdentifier a #GArray of #guint8 elements. A new reference to `value_session_application_identifier` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setSession(valueSessionSessionType: UimSessionType, valueSessionApplicationIdentifier: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimVerifyPinInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimVerifyPinInput {

    // Own properties of Qmi-1.0.Qmi.MessageUimVerifyPinInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageUimVerifyPinInput

    /**
     * Allocates a new #QmiMessageUimVerifyPinInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageUimVerifyPinInput.
     * @constructor 
     */
    static new(): MessageUimVerifyPinInput
}

interface MessageUimVerifyPinOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageUimVerifyPinOutput

    /**
     * Get the 'Card Result' field from `self`.
     */
    getCardResult(): [ /* returnType */ boolean, /* valueCardResultSw1 */ number, /* valueCardResultSw2 */ number ]
    /**
     * Get the 'Response In Indication Token' field from `self`.
     */
    getResponseInIndicationToken(): [ /* returnType */ boolean, /* valueResponseInIndicationToken */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Retries Remaining' field from `self`.
     */
    getRetriesRemaining(): [ /* returnType */ boolean, /* valueRetriesRemainingVerifyRetriesLeft */ number, /* valueRetriesRemainingUnblockRetriesLeft */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageUimVerifyPinOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageUimVerifyPinOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageUimVerifyPinOutput {

    // Own properties of Qmi-1.0.Qmi.MessageUimVerifyPinOutput

    static name: string
}

interface MessageVoiceAnswerCallInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceAnswerCallInput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceAnswerCallInput
    /**
     * Set the 'Call ID' field in the message.
     * @param valueCallId a #guint8.
     */
    setCallId(valueCallId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceAnswerCallInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceAnswerCallInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceAnswerCallInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceAnswerCallInput

    /**
     * Allocates a new #QmiMessageVoiceAnswerCallInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceAnswerCallInput.
     * @constructor 
     */
    static new(): MessageVoiceAnswerCallInput
}

interface MessageVoiceAnswerCallOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceAnswerCallOutput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceAnswerCallOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceAnswerCallOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceAnswerCallOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceAnswerCallOutput

    static name: string
}

interface MessageVoiceAnswerUssdInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceAnswerUssdInput

    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceAnswerUssdInput
    /**
     * Set the 'USS Data' field in the message.
     * @param valueUssDataDataCodingScheme a #QmiVoiceUssDataCodingScheme.
     * @param valueUssDataData a #GArray of #guint8 elements. A new reference to `value_uss_data_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setUssData(valueUssDataDataCodingScheme: VoiceUssDataCodingScheme, valueUssDataData: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceAnswerUssdInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceAnswerUssdInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceAnswerUssdInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceAnswerUssdInput

    /**
     * Allocates a new #QmiMessageVoiceAnswerUssdInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceAnswerUssdInput.
     * @constructor 
     */
    static new(): MessageVoiceAnswerUssdInput
}

interface MessageVoiceAnswerUssdOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceAnswerUssdOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceAnswerUssdOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceAnswerUssdOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceAnswerUssdOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceAnswerUssdOutput

    static name: string
}

interface MessageVoiceCancelUssdOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceCancelUssdOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceCancelUssdOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceCancelUssdOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceCancelUssdOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceCancelUssdOutput

    static name: string
}

interface MessageVoiceDialCallInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceDialCallInput

    /**
     * Get the 'Calling Number' field from `self`.
     */
    getCallingNumber(): [ /* returnType */ boolean, /* valueCallingNumber */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceDialCallInput
    /**
     * Set the 'Calling Number' field in the message.
     * @param valueCallingNumber a constant string.
     */
    setCallingNumber(valueCallingNumber: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceDialCallInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceDialCallInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceDialCallInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceDialCallInput

    /**
     * Allocates a new #QmiMessageVoiceDialCallInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceDialCallInput.
     * @constructor 
     */
    static new(): MessageVoiceDialCallInput
}

interface MessageVoiceDialCallOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceDialCallOutput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceDialCallOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceDialCallOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceDialCallOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceDialCallOutput

    static name: string
}

interface MessageVoiceEndCallInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceEndCallInput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceEndCallInput
    /**
     * Set the 'Call ID' field in the message.
     * @param valueCallId a #guint8.
     */
    setCallId(valueCallId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceEndCallInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceEndCallInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceEndCallInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceEndCallInput

    /**
     * Allocates a new #QmiMessageVoiceEndCallInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceEndCallInput.
     * @constructor 
     */
    static new(): MessageVoiceEndCallInput
}

interface MessageVoiceEndCallOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceEndCallOutput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceEndCallOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceEndCallOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceEndCallOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceEndCallOutput

    static name: string
}

interface MessageVoiceGetAllCallInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutput

    /**
     * Get the 'Call Information' field from `self`.
     * 
     * Version of qmi_message_voice_get_all_call_info_output_get_call_information() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getCallInformation(): [ /* returnType */ boolean, /* valueCallInformationPtr */ MessageVoiceGetAllCallInfoOutputCallInformationCall[] ]
    /**
     * Get the 'Remote Party Number' field from `self`.
     * 
     * Version of qmi_message_voice_get_all_call_info_output_get_remote_party_number() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRemotePartyNumber(): [ /* returnType */ boolean, /* valueRemotePartyNumberPtr */ MessageVoiceGetAllCallInfoOutputRemotePartyNumberCall[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetAllCallInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetAllCallInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetAllCallInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutput

    static name: string
}

interface MessageVoiceGetAllCallInfoOutputCallInformationCall {

    // Own fields of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutputCallInformationCall

    /**
     * a #guint8.
     * @field 
     */
    id: number
    /**
     * a #QmiVoiceCallState.
     * @field 
     */
    state: VoiceCallState
    /**
     * a #QmiVoiceCallType.
     * @field 
     */
    type: VoiceCallType
    /**
     * a #QmiVoiceCallDirection.
     * @field 
     */
    direction: VoiceCallDirection
    /**
     * a #QmiVoiceCallMode.
     * @field 
     */
    mode: VoiceCallMode
    /**
     * a #gboolean.
     * @field 
     */
    multipartIndicator: boolean
    /**
     * a #QmiVoiceAls.
     * @field 
     */
    als: VoiceAls
}

/**
 * A QmiMessageVoiceGetAllCallInfoOutputCallInformationCall struct.
 * @record 
 */
class MessageVoiceGetAllCallInfoOutputCallInformationCall {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutputCallInformationCall

    static name: string
}

interface MessageVoiceGetAllCallInfoOutputRemotePartyNumberCall {

    // Own fields of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutputRemotePartyNumberCall

    /**
     * a #guint8.
     * @field 
     */
    id: number
    /**
     * a #QmiVoicePresentation.
     * @field 
     */
    presentationIndicator: VoicePresentation
    /**
     * a string.
     * @field 
     */
    type: string
}

/**
 * A QmiMessageVoiceGetAllCallInfoOutputRemotePartyNumberCall struct.
 * @record 
 */
class MessageVoiceGetAllCallInfoOutputRemotePartyNumberCall {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetAllCallInfoOutputRemotePartyNumberCall

    static name: string
}

interface MessageVoiceGetCallWaitingInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetCallWaitingInput

    /**
     * Get the 'Service Class' field from `self`.
     */
    getServiceClass(): [ /* returnType */ boolean, /* valueServiceClass */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetCallWaitingInput
    /**
     * Set the 'Service Class' field in the message.
     * @param valueServiceClass a #guint8.
     */
    setServiceClass(valueServiceClass: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetCallWaitingInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetCallWaitingInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetCallWaitingInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceGetCallWaitingInput

    /**
     * Allocates a new #QmiMessageVoiceGetCallWaitingInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceGetCallWaitingInput.
     * @constructor 
     */
    static new(): MessageVoiceGetCallWaitingInput
}

interface MessageVoiceGetCallWaitingOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetCallWaitingOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Service Class' field from `self`.
     */
    getServiceClass(): [ /* returnType */ boolean, /* valueServiceClass */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetCallWaitingOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetCallWaitingOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetCallWaitingOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetCallWaitingOutput

    static name: string
}

interface MessageVoiceGetConfigInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetConfigInput

    /**
     * Get the 'Air Timer' field from `self`.
     */
    getAirTimer(): [ /* returnType */ boolean, /* valueAirTimer */ boolean ]
    /**
     * Get the 'AMR Status' field from `self`.
     */
    getAmrStatus(): [ /* returnType */ boolean, /* valueAmrStatus */ boolean ]
    /**
     * Get the 'Auto Answer' field from `self`.
     */
    getAutoAnswer(): [ /* returnType */ boolean, /* valueAutoAnswer */ boolean ]
    /**
     * Get the 'NAM Index' field from `self`.
     */
    getNamIndex(): [ /* returnType */ boolean, /* valueNamIndex */ boolean ]
    /**
     * Get the 'Preferred Voice Privacy' field from `self`.
     */
    getPreferredVoicePrivacy(): [ /* returnType */ boolean, /* valuePreferredVoicePrivacy */ boolean ]
    /**
     * Get the 'Preferred Voice Service Option' field from `self`.
     */
    getPreferredVoiceServiceOption(): [ /* returnType */ boolean, /* valuePreferredVoiceServiceOption */ boolean ]
    /**
     * Get the 'Roam Timer' field from `self`.
     */
    getRoamTimer(): [ /* returnType */ boolean, /* valueRoamTimer */ boolean ]
    /**
     * Get the 'TTY Mode' field from `self`.
     */
    getTtyMode(): [ /* returnType */ boolean, /* valueTtyMode */ boolean ]
    /**
     * Get the 'Voice Domain Preference' field from `self`.
     */
    getVoiceDomainPreference(): [ /* returnType */ boolean, /* valueVoiceDomainPreference */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetConfigInput
    /**
     * Set the 'Air Timer' field in the message.
     * @param valueAirTimer a #gboolean.
     */
    setAirTimer(valueAirTimer: boolean): boolean
    /**
     * Set the 'AMR Status' field in the message.
     * @param valueAmrStatus a #gboolean.
     */
    setAmrStatus(valueAmrStatus: boolean): boolean
    /**
     * Set the 'Auto Answer' field in the message.
     * @param valueAutoAnswer a #gboolean.
     */
    setAutoAnswer(valueAutoAnswer: boolean): boolean
    /**
     * Set the 'NAM Index' field in the message.
     * @param valueNamIndex a #gboolean.
     */
    setNamIndex(valueNamIndex: boolean): boolean
    /**
     * Set the 'Preferred Voice Privacy' field in the message.
     * @param valuePreferredVoicePrivacy a #gboolean.
     */
    setPreferredVoicePrivacy(valuePreferredVoicePrivacy: boolean): boolean
    /**
     * Set the 'Preferred Voice Service Option' field in the message.
     * @param valuePreferredVoiceServiceOption a #gboolean.
     */
    setPreferredVoiceServiceOption(valuePreferredVoiceServiceOption: boolean): boolean
    /**
     * Set the 'Roam Timer' field in the message.
     * @param valueRoamTimer a #gboolean.
     */
    setRoamTimer(valueRoamTimer: boolean): boolean
    /**
     * Set the 'TTY Mode' field in the message.
     * @param valueTtyMode a #gboolean.
     */
    setTtyMode(valueTtyMode: boolean): boolean
    /**
     * Set the 'Voice Domain Preference' field in the message.
     * @param valueVoiceDomainPreference a #gboolean.
     */
    setVoiceDomainPreference(valueVoiceDomainPreference: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetConfigInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetConfigInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetConfigInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceGetConfigInput

    /**
     * Allocates a new #QmiMessageVoiceGetConfigInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceGetConfigInput.
     * @constructor 
     */
    static new(): MessageVoiceGetConfigInput
}

interface MessageVoiceGetConfigOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetConfigOutput

    /**
     * Get the 'Air Timer Count' field from `self`.
     */
    getAirTimerCount(): [ /* returnType */ boolean, /* valueAirTimerCountNamId */ number, /* valueAirTimerCountAirTimer */ number ]
    /**
     * Get the 'Auto Answer Status' field from `self`.
     */
    getAutoAnswerStatus(): [ /* returnType */ boolean, /* valueAutoAnswerStatus */ boolean ]
    /**
     * Get the 'Current AMR Status' field from `self`.
     */
    getCurrentAmrStatus(): [ /* returnType */ boolean, /* valueCurrentAmrStatusGsm */ boolean, /* valueCurrentAmrStatusWcdma */ VoiceWcdmaAmrStatus ]
    /**
     * Get the 'Current Preferred Voice SO' field from `self`.
     */
    getCurrentPreferredVoiceSo(): [ /* returnType */ boolean, /* valueCurrentPreferredVoiceSoNamId */ number, /* valueCurrentPreferredVoiceSoEvrcCapability */ boolean, /* valueCurrentPreferredVoiceSoHomePageVoiceServiceOption */ VoiceServiceOption, /* valueCurrentPreferredVoiceSoHomeOriginationVoiceServiceOption */ VoiceServiceOption, /* valueCurrentPreferredVoiceSoRoamingOriginationVoiceServiceOption */ VoiceServiceOption ]
    /**
     * Get the 'Current TTY Mode' field from `self`.
     */
    getCurrentTtyMode(): [ /* returnType */ boolean, /* valueCurrentTtyMode */ VoiceTtyMode ]
    /**
     * Get the 'Current Voice Domain Preference' field from `self`.
     */
    getCurrentVoiceDomainPreference(): [ /* returnType */ boolean, /* valueCurrentVoiceDomainPreference */ VoiceDomain ]
    /**
     * Get the 'Current Voice Privacy Preference' field from `self`.
     */
    getCurrentVoicePrivacyPreference(): [ /* returnType */ boolean, /* valueCurrentVoicePrivacyPreference */ VoicePrivacy ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Roam Timer Count' field from `self`.
     */
    getRoamTimerCount(): [ /* returnType */ boolean, /* valueRoamTimerCountNamId */ number, /* valueRoamTimerCountRoamTimer */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetConfigOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetConfigOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetConfigOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetConfigOutput

    static name: string
}

interface MessageVoiceGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceGetSupportedMessagesOutput

    static name: string
}

interface MessageVoiceIndicationRegisterInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceIndicationRegisterInput

    /**
     * Get the 'AOC Events' field from `self`.
     */
    getAocEvents(): [ /* returnType */ boolean, /* valueAocEvents */ boolean ]
    /**
     * Get the 'Call Notification Events' field from `self`.
     */
    getCallNotificationEvents(): [ /* returnType */ boolean, /* valueCallNotificationEvents */ boolean ]
    /**
     * Get the 'Conference Events' field from `self`.
     */
    getConferenceEvents(): [ /* returnType */ boolean, /* valueConferenceEvents */ boolean ]
    /**
     * Get the 'DTMF Events' field from `self`.
     */
    getDtmfEvents(): [ /* returnType */ boolean, /* valueDtmfEvents */ boolean ]
    /**
     * Get the 'Extended Burst Type International Information Events' field from `self`.
     */
    getExtendedBurstTypeInternationalInformationEvents(): [ /* returnType */ boolean, /* valueExtendedBurstTypeInternationalInformationEvents */ boolean ]
    /**
     * Get the 'Handover Events' field from `self`.
     */
    getHandoverEvents(): [ /* returnType */ boolean, /* valueHandoverEvents */ boolean ]
    /**
     * Get the 'Modification Events' field from `self`.
     */
    getModificationEvents(): [ /* returnType */ boolean, /* valueModificationEvents */ boolean ]
    /**
     * Get the 'MT Page Miss Information Events' field from `self`.
     */
    getMtPageMissInformationEvents(): [ /* returnType */ boolean, /* valueMtPageMissInformationEvents */ boolean ]
    /**
     * Get the 'Speech Codec Events' field from `self`.
     */
    getSpeechCodecEvents(): [ /* returnType */ boolean, /* valueSpeechCodecEvents */ boolean ]
    /**
     * Get the 'Supplementary Service Notification Events' field from `self`.
     */
    getSupplementaryServiceNotificationEvents(): [ /* returnType */ boolean, /* valueSupplementaryServiceNotificationEvents */ boolean ]
    /**
     * Get the 'USSD Notification Events' field from `self`.
     */
    getUssdNotificationEvents(): [ /* returnType */ boolean, /* valueUssdNotificationEvents */ boolean ]
    /**
     * Get the 'UUS Events' field from `self`.
     */
    getUusEvents(): [ /* returnType */ boolean, /* valueUusEvents */ boolean ]
    /**
     * Get the 'Voice Privacy Events' field from `self`.
     */
    getVoicePrivacyEvents(): [ /* returnType */ boolean, /* valueVoicePrivacyEvents */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceIndicationRegisterInput
    /**
     * Set the 'AOC Events' field in the message.
     * @param valueAocEvents a #gboolean.
     */
    setAocEvents(valueAocEvents: boolean): boolean
    /**
     * Set the 'Call Notification Events' field in the message.
     * @param valueCallNotificationEvents a #gboolean.
     */
    setCallNotificationEvents(valueCallNotificationEvents: boolean): boolean
    /**
     * Set the 'Conference Events' field in the message.
     * @param valueConferenceEvents a #gboolean.
     */
    setConferenceEvents(valueConferenceEvents: boolean): boolean
    /**
     * Set the 'DTMF Events' field in the message.
     * @param valueDtmfEvents a #gboolean.
     */
    setDtmfEvents(valueDtmfEvents: boolean): boolean
    /**
     * Set the 'Extended Burst Type International Information Events' field in the message.
     * @param valueExtendedBurstTypeInternationalInformationEvents a #gboolean.
     */
    setExtendedBurstTypeInternationalInformationEvents(valueExtendedBurstTypeInternationalInformationEvents: boolean): boolean
    /**
     * Set the 'Handover Events' field in the message.
     * @param valueHandoverEvents a #gboolean.
     */
    setHandoverEvents(valueHandoverEvents: boolean): boolean
    /**
     * Set the 'Modification Events' field in the message.
     * @param valueModificationEvents a #gboolean.
     */
    setModificationEvents(valueModificationEvents: boolean): boolean
    /**
     * Set the 'MT Page Miss Information Events' field in the message.
     * @param valueMtPageMissInformationEvents a #gboolean.
     */
    setMtPageMissInformationEvents(valueMtPageMissInformationEvents: boolean): boolean
    /**
     * Set the 'Speech Codec Events' field in the message.
     * @param valueSpeechCodecEvents a #gboolean.
     */
    setSpeechCodecEvents(valueSpeechCodecEvents: boolean): boolean
    /**
     * Set the 'Supplementary Service Notification Events' field in the message.
     * @param valueSupplementaryServiceNotificationEvents a #gboolean.
     */
    setSupplementaryServiceNotificationEvents(valueSupplementaryServiceNotificationEvents: boolean): boolean
    /**
     * Set the 'USSD Notification Events' field in the message.
     * @param valueUssdNotificationEvents a #gboolean.
     */
    setUssdNotificationEvents(valueUssdNotificationEvents: boolean): boolean
    /**
     * Set the 'UUS Events' field in the message.
     * @param valueUusEvents a #gboolean.
     */
    setUusEvents(valueUusEvents: boolean): boolean
    /**
     * Set the 'Voice Privacy Events' field in the message.
     * @param valueVoicePrivacyEvents a #gboolean.
     */
    setVoicePrivacyEvents(valueVoicePrivacyEvents: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceIndicationRegisterInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceIndicationRegisterInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceIndicationRegisterInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceIndicationRegisterInput

    /**
     * Allocates a new #QmiMessageVoiceIndicationRegisterInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceIndicationRegisterInput.
     * @constructor 
     */
    static new(): MessageVoiceIndicationRegisterInput
}

interface MessageVoiceIndicationRegisterOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceIndicationRegisterOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceIndicationRegisterOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceIndicationRegisterOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceIndicationRegisterOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceIndicationRegisterOutput

    static name: string
}

interface MessageVoiceManageCallsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceManageCallsInput

    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Get the 'Service Type' field from `self`.
     */
    getServiceType(): [ /* returnType */ boolean, /* valueServiceType */ VoiceSupplementaryServiceType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceManageCallsInput
    /**
     * Set the 'Call ID' field in the message.
     * @param valueCallId a #guint8.
     */
    setCallId(valueCallId: number): boolean
    /**
     * Set the 'Service Type' field in the message.
     * @param valueServiceType a #QmiVoiceSupplementaryServiceType.
     */
    setServiceType(valueServiceType: VoiceSupplementaryServiceType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceManageCallsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceManageCallsInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceManageCallsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceManageCallsInput

    /**
     * Allocates a new #QmiMessageVoiceManageCallsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceManageCallsInput.
     * @constructor 
     */
    static new(): MessageVoiceManageCallsInput
}

interface MessageVoiceManageCallsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceManageCallsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceManageCallsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceManageCallsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceManageCallsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceManageCallsOutput

    static name: string
}

interface MessageVoiceOriginateUssdInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceOriginateUssdInput

    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceOriginateUssdInput
    /**
     * Set the 'USS Data' field in the message.
     * @param valueUssDataDataCodingScheme a #QmiVoiceUssDataCodingScheme.
     * @param valueUssDataData a #GArray of #guint8 elements. A new reference to `value_uss_data_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setUssData(valueUssDataDataCodingScheme: VoiceUssDataCodingScheme, valueUssDataData: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceOriginateUssdInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceOriginateUssdInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceOriginateUssdInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceOriginateUssdInput

    /**
     * Allocates a new #QmiMessageVoiceOriginateUssdInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceOriginateUssdInput.
     * @constructor 
     */
    static new(): MessageVoiceOriginateUssdInput
}

interface MessageVoiceOriginateUssdNoWaitInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceOriginateUssdNoWaitInput

    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceOriginateUssdNoWaitInput
    /**
     * Set the 'USS Data' field in the message.
     * @param valueUssDataDataCodingScheme a #QmiVoiceUssDataCodingScheme.
     * @param valueUssDataData a #GArray of #guint8 elements. A new reference to `value_uss_data_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setUssData(valueUssDataDataCodingScheme: VoiceUssDataCodingScheme, valueUssDataData: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceOriginateUssdNoWaitInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceOriginateUssdNoWaitInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceOriginateUssdNoWaitInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceOriginateUssdNoWaitInput

    /**
     * Allocates a new #QmiMessageVoiceOriginateUssdNoWaitInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceOriginateUssdNoWaitInput.
     * @constructor 
     */
    static new(): MessageVoiceOriginateUssdNoWaitInput
}

interface MessageVoiceOriginateUssdNoWaitOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceOriginateUssdNoWaitOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceOriginateUssdNoWaitOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceOriginateUssdNoWaitOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceOriginateUssdNoWaitOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceOriginateUssdNoWaitOutput

    static name: string
}

interface MessageVoiceOriginateUssdOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceOriginateUssdOutput

    /**
     * Get the 'Alpha Identifier' field from `self`.
     */
    getAlphaIdentifier(): [ /* returnType */ boolean, /* valueAlphaIdentifierDataCodingScheme */ VoiceAlphaDataCodingScheme, /* valueAlphaIdentifierAlpha */ Uint8Array ]
    /**
     * Get the 'Call Control Result Type' field from `self`.
     */
    getCallControlResultType(): [ /* returnType */ boolean, /* valueCallControlResultType */ VoiceCallControlResultType ]
    /**
     * Get the 'Call Control Supplementary Service Type' field from `self`.
     */
    getCallControlSupplementaryServiceType(): [ /* returnType */ boolean, /* valueCallControlSupplementaryServiceType */ VoiceCallControlSupplementaryServiceType ]
    /**
     * Get the 'Call ID' field from `self`.
     */
    getCallId(): [ /* returnType */ boolean, /* valueCallId */ number ]
    /**
     * Get the 'Failure Cause' field from `self`.
     */
    getFailureCause(): [ /* returnType */ boolean, /* valueFailureCause */ VoiceCallEndReason ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'USS Data' field from `self`.
     */
    getUssData(): [ /* returnType */ boolean, /* valueUssDataDataCodingScheme */ VoiceUssDataCodingScheme, /* valueUssDataData */ Uint8Array ]
    /**
     * Get the 'USS Data UTF16' field from `self`.
     */
    getUssDataUtf16(): [ /* returnType */ boolean, /* valueUssDataUtf16 */ number[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceOriginateUssdOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceOriginateUssdOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceOriginateUssdOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceOriginateUssdOutput

    static name: string
}

interface MessageVoiceSetSupplementaryServiceInput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceSetSupplementaryServiceInput

    /**
     * Get the 'Supplementary Service Information' field from `self`.
     */
    getSupplementaryServiceInformation(): [ /* returnType */ boolean, /* valueSupplementaryServiceInformationSupplementaryServiceAction */ VoiceSupplementaryServiceAction, /* valueSupplementaryServiceInformationSupplementaryServiceReason */ VoiceSupplementaryServiceReason ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceSetSupplementaryServiceInput
    /**
     * Set the 'Supplementary Service Information' field in the message.
     * @param valueSupplementaryServiceInformationSupplementaryServiceAction a #QmiVoiceSupplementaryServiceAction.
     * @param valueSupplementaryServiceInformationSupplementaryServiceReason a #QmiVoiceSupplementaryServiceReason.
     */
    setSupplementaryServiceInformation(valueSupplementaryServiceInformationSupplementaryServiceAction: VoiceSupplementaryServiceAction, valueSupplementaryServiceInformationSupplementaryServiceReason: VoiceSupplementaryServiceReason): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceSetSupplementaryServiceInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceSetSupplementaryServiceInput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceSetSupplementaryServiceInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageVoiceSetSupplementaryServiceInput

    /**
     * Allocates a new #QmiMessageVoiceSetSupplementaryServiceInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageVoiceSetSupplementaryServiceInput.
     * @constructor 
     */
    static new(): MessageVoiceSetSupplementaryServiceInput
}

interface MessageVoiceSetSupplementaryServiceOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageVoiceSetSupplementaryServiceOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Service Status' field from `self`.
     */
    getServiceStatus(): [ /* returnType */ boolean, /* valueServiceStatusActive */ boolean, /* valueServiceStatusProvisioned */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageVoiceSetSupplementaryServiceOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageVoiceSetSupplementaryServiceOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageVoiceSetSupplementaryServiceOutput {

    // Own properties of Qmi-1.0.Qmi.MessageVoiceSetSupplementaryServiceOutput

    static name: string
}

interface MessageWdaGetDataFormatInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdaGetDataFormatInput

    /**
     * Get the 'Endpoint Info' field from `self`.
     */
    getEndpointInfo(): [ /* returnType */ boolean, /* valueEndpointInfoEndpointType */ DataEndpointType, /* valueEndpointInfoInterfaceNumber */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdaGetDataFormatInput
    /**
     * Set the 'Endpoint Info' field in the message.
     * @param valueEndpointInfoEndpointType a #QmiDataEndpointType.
     * @param valueEndpointInfoInterfaceNumber a #guint32.
     */
    setEndpointInfo(valueEndpointInfoEndpointType: DataEndpointType, valueEndpointInfoInterfaceNumber: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdaGetDataFormatInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdaGetDataFormatInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdaGetDataFormatInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdaGetDataFormatInput

    /**
     * Allocates a new #QmiMessageWdaGetDataFormatInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdaGetDataFormatInput.
     * @constructor 
     */
    static new(): MessageWdaGetDataFormatInput
}

interface MessageWdaGetDataFormatOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdaGetDataFormatOutput

    /**
     * Get the 'Downlink Data Aggregation Max Datagrams' field from `self`.
     */
    getDownlinkDataAggregationMaxDatagrams(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxDatagrams */ number ]
    /**
     * Get the 'Downlink Data Aggregation Max Size' field from `self`.
     */
    getDownlinkDataAggregationMaxSize(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxSize */ number ]
    /**
     * Get the 'Downlink Data Aggregation Protocol' field from `self`.
     */
    getDownlinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Get the 'Download Minimum Padding' field from `self`.
     */
    getDownloadMinimumPadding(): [ /* returnType */ boolean, /* valueDownloadMinimumPadding */ number ]
    /**
     * Get the 'Flow Control' field from `self`.
     */
    getFlowControl(): [ /* returnType */ boolean, /* valueFlowControl */ number ]
    /**
     * Get the 'Link Layer Protocol' field from `self`.
     */
    getLinkLayerProtocol(): [ /* returnType */ boolean, /* valueLinkLayerProtocol */ WdaLinkLayerProtocol ]
    /**
     * Get the 'NDP Signature' field from `self`.
     */
    getNdpSignature(): [ /* returnType */ boolean, /* valueNdpSignature */ number ]
    /**
     * Get the 'QoS Format' field from `self`.
     */
    getQosFormat(): [ /* returnType */ boolean, /* valueQosFormat */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Uplink Data Aggregation Max Datagrams' field from `self`.
     */
    getUplinkDataAggregationMaxDatagrams(): [ /* returnType */ boolean, /* valueUplinkDataAggregationMaxDatagrams */ number ]
    /**
     * Get the 'Uplink Data Aggregation Max Size' field from `self`.
     */
    getUplinkDataAggregationMaxSize(): [ /* returnType */ boolean, /* valueUplinkDataAggregationMaxSize */ number ]
    /**
     * Get the 'Uplink Data Aggregation Protocol' field from `self`.
     */
    getUplinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueUplinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdaGetDataFormatOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdaGetDataFormatOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdaGetDataFormatOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdaGetDataFormatOutput

    static name: string
}

interface MessageWdaGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdaGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdaGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdaGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdaGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdaGetSupportedMessagesOutput

    static name: string
}

interface MessageWdaSetDataFormatInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdaSetDataFormatInput

    /**
     * Get the 'Downlink Data Aggregation Max Datagrams' field from `self`.
     */
    getDownlinkDataAggregationMaxDatagrams(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxDatagrams */ number ]
    /**
     * Get the 'Downlink Data Aggregation Max Size' field from `self`.
     */
    getDownlinkDataAggregationMaxSize(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxSize */ number ]
    /**
     * Get the 'Downlink Data Aggregation Protocol' field from `self`.
     */
    getDownlinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Get the 'Endpoint Info' field from `self`.
     */
    getEndpointInfo(): [ /* returnType */ boolean, /* valueEndpointInfoEndpointType */ DataEndpointType, /* valueEndpointInfoInterfaceNumber */ number ]
    /**
     * Get the 'Link Layer Protocol' field from `self`.
     */
    getLinkLayerProtocol(): [ /* returnType */ boolean, /* valueLinkLayerProtocol */ WdaLinkLayerProtocol ]
    /**
     * Get the 'NDP Signature' field from `self`.
     */
    getNdpSignature(): [ /* returnType */ boolean, /* valueNdpSignature */ number ]
    /**
     * Get the 'QoS Format' field from `self`.
     */
    getQosFormat(): [ /* returnType */ boolean, /* valueQosFormat */ boolean ]
    /**
     * Get the 'Uplink Data Aggregation Protocol' field from `self`.
     */
    getUplinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueUplinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdaSetDataFormatInput
    /**
     * Set the 'Downlink Data Aggregation Max Datagrams' field in the message.
     * @param valueDownlinkDataAggregationMaxDatagrams a #guint32.
     */
    setDownlinkDataAggregationMaxDatagrams(valueDownlinkDataAggregationMaxDatagrams: number): boolean
    /**
     * Set the 'Downlink Data Aggregation Max Size' field in the message.
     * @param valueDownlinkDataAggregationMaxSize a #guint32.
     */
    setDownlinkDataAggregationMaxSize(valueDownlinkDataAggregationMaxSize: number): boolean
    /**
     * Set the 'Downlink Data Aggregation Protocol' field in the message.
     * @param valueDownlinkDataAggregationProtocol a #QmiWdaDataAggregationProtocol.
     */
    setDownlinkDataAggregationProtocol(valueDownlinkDataAggregationProtocol: WdaDataAggregationProtocol): boolean
    /**
     * Set the 'Endpoint Info' field in the message.
     * @param valueEndpointInfoEndpointType a #QmiDataEndpointType.
     * @param valueEndpointInfoInterfaceNumber a #guint32.
     */
    setEndpointInfo(valueEndpointInfoEndpointType: DataEndpointType, valueEndpointInfoInterfaceNumber: number): boolean
    /**
     * Set the 'Link Layer Protocol' field in the message.
     * @param valueLinkLayerProtocol a #QmiWdaLinkLayerProtocol.
     */
    setLinkLayerProtocol(valueLinkLayerProtocol: WdaLinkLayerProtocol): boolean
    /**
     * Set the 'NDP Signature' field in the message.
     * @param valueNdpSignature a #guint32.
     */
    setNdpSignature(valueNdpSignature: number): boolean
    /**
     * Set the 'QoS Format' field in the message.
     * @param valueQosFormat a #gboolean.
     */
    setQosFormat(valueQosFormat: boolean): boolean
    /**
     * Set the 'Uplink Data Aggregation Protocol' field in the message.
     * @param valueUplinkDataAggregationProtocol a #QmiWdaDataAggregationProtocol.
     */
    setUplinkDataAggregationProtocol(valueUplinkDataAggregationProtocol: WdaDataAggregationProtocol): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdaSetDataFormatInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdaSetDataFormatInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdaSetDataFormatInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdaSetDataFormatInput

    /**
     * Allocates a new #QmiMessageWdaSetDataFormatInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdaSetDataFormatInput.
     * @constructor 
     */
    static new(): MessageWdaSetDataFormatInput
}

interface MessageWdaSetDataFormatOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdaSetDataFormatOutput

    /**
     * Get the 'Downlink Data Aggregation Max Datagrams' field from `self`.
     */
    getDownlinkDataAggregationMaxDatagrams(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxDatagrams */ number ]
    /**
     * Get the 'Downlink Data Aggregation Max Size' field from `self`.
     */
    getDownlinkDataAggregationMaxSize(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationMaxSize */ number ]
    /**
     * Get the 'Downlink Data Aggregation Protocol' field from `self`.
     */
    getDownlinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueDownlinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Get the 'Download Minimum Padding' field from `self`.
     */
    getDownloadMinimumPadding(): [ /* returnType */ boolean, /* valueDownloadMinimumPadding */ number ]
    /**
     * Get the 'Flow Control' field from `self`.
     */
    getFlowControl(): [ /* returnType */ boolean, /* valueFlowControl */ number ]
    /**
     * Get the 'Link Layer Protocol' field from `self`.
     */
    getLinkLayerProtocol(): [ /* returnType */ boolean, /* valueLinkLayerProtocol */ WdaLinkLayerProtocol ]
    /**
     * Get the 'NDP Signature' field from `self`.
     */
    getNdpSignature(): [ /* returnType */ boolean, /* valueNdpSignature */ number ]
    /**
     * Get the 'QoS Format' field from `self`.
     */
    getQosFormat(): [ /* returnType */ boolean, /* valueQosFormat */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Uplink Data Aggregation Max Datagrams' field from `self`.
     */
    getUplinkDataAggregationMaxDatagrams(): [ /* returnType */ boolean, /* valueUplinkDataAggregationMaxDatagrams */ number ]
    /**
     * Get the 'Uplink Data Aggregation Max Size' field from `self`.
     */
    getUplinkDataAggregationMaxSize(): [ /* returnType */ boolean, /* valueUplinkDataAggregationMaxSize */ number ]
    /**
     * Get the 'Uplink Data Aggregation Protocol' field from `self`.
     */
    getUplinkDataAggregationProtocol(): [ /* returnType */ boolean, /* valueUplinkDataAggregationProtocol */ WdaDataAggregationProtocol ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdaSetDataFormatOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdaSetDataFormatOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdaSetDataFormatOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdaSetDataFormatOutput

    static name: string
}

interface MessageWdsBindDataPortInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsBindDataPortInput

    /**
     * Get the 'Data Port' field from `self`.
     */
    getDataPort(): [ /* returnType */ boolean, /* valueDataPort */ SioPort ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsBindDataPortInput
    /**
     * Set the 'Data Port' field in the message.
     * @param valueDataPort a #QmiSioPort.
     */
    setDataPort(valueDataPort: SioPort): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsBindDataPortInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsBindDataPortInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsBindDataPortInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsBindDataPortInput

    /**
     * Allocates a new #QmiMessageWdsBindDataPortInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsBindDataPortInput.
     * @constructor 
     */
    static new(): MessageWdsBindDataPortInput
}

interface MessageWdsBindDataPortOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsBindDataPortOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsBindDataPortOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsBindDataPortOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsBindDataPortOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsBindDataPortOutput

    static name: string
}

interface MessageWdsBindMuxDataPortInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsBindMuxDataPortInput

    /**
     * Get the 'Client Type' field from `self`.
     */
    getClientType(): [ /* returnType */ boolean, /* valueClientType */ WdsClientType ]
    /**
     * Get the 'Endpoint Info' field from `self`.
     */
    getEndpointInfo(): [ /* returnType */ boolean, /* valueEndpointInfoEndpointType */ DataEndpointType, /* valueEndpointInfoInterfaceNumber */ number ]
    /**
     * Get the 'Mux ID' field from `self`.
     */
    getMuxId(): [ /* returnType */ boolean, /* valueMuxId */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsBindMuxDataPortInput
    /**
     * Set the 'Client Type' field in the message.
     * @param valueClientType a #QmiWdsClientType.
     */
    setClientType(valueClientType: WdsClientType): boolean
    /**
     * Set the 'Endpoint Info' field in the message.
     * @param valueEndpointInfoEndpointType a #QmiDataEndpointType.
     * @param valueEndpointInfoInterfaceNumber a #guint32.
     */
    setEndpointInfo(valueEndpointInfoEndpointType: DataEndpointType, valueEndpointInfoInterfaceNumber: number): boolean
    /**
     * Set the 'Mux ID' field in the message.
     * @param valueMuxId a #guint8.
     */
    setMuxId(valueMuxId: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsBindMuxDataPortInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsBindMuxDataPortInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsBindMuxDataPortInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsBindMuxDataPortInput

    /**
     * Allocates a new #QmiMessageWdsBindMuxDataPortInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsBindMuxDataPortInput.
     * @constructor 
     */
    static new(): MessageWdsBindMuxDataPortInput
}

interface MessageWdsBindMuxDataPortOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsBindMuxDataPortOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsBindMuxDataPortOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsBindMuxDataPortOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsBindMuxDataPortOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsBindMuxDataPortOutput

    static name: string
}

interface MessageWdsCreateProfileInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsCreateProfileInput

    /**
     * Get the 'APN Disabled Flag' field from `self`.
     */
    getApnDisabledFlag(): [ /* returnType */ boolean, /* valueApnDisabledFlag */ boolean ]
    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'APN Type Mask' field from `self`.
     */
    getApnTypeMask(): [ /* returnType */ boolean, /* valueApnTypeMask */ WdsApnTypeMask ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'GPRS Minimum QoS' field from `self`.
     */
    getGprsMinimumQos(): [ /* returnType */ boolean, /* valueGprsMinimumQosPrecedenceClass */ number, /* valueGprsMinimumQosDelayClass */ number, /* valueGprsMinimumQosReliabilityClass */ number, /* valueGprsMinimumQosPeakThroughputClass */ number, /* valueGprsMinimumQosMeanThroughputClass */ number ]
    /**
     * Get the 'GPRS Requested QoS' field from `self`.
     */
    getGprsRequestedQos(): [ /* returnType */ boolean, /* valueGprsRequestedQosPrecedenceClass */ number, /* valueGprsRequestedQosDelayClass */ number, /* valueGprsRequestedQosReliabilityClass */ number, /* valueGprsRequestedQosPeakThroughputClass */ number, /* valueGprsRequestedQosMeanThroughputClass */ number ]
    /**
     * Get the 'IMCN Flag' field from `self`.
     */
    getImcnFlag(): [ /* returnType */ boolean, /* valueImcnFlag */ boolean ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'IPv6 Address Preference' field from `self`.
     */
    getIpv6AddressPreference(): [ /* returnType */ boolean, /* valueIpv6AddressPreferenceAddress */ number[] ]
    /**
     * Get the 'IPv6 Primary DNS Address Preference' field from `self`.
     */
    getIpv6PrimaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6PrimaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'IPv6 Secondary DNS Address Preference' field from `self`.
     */
    getIpv6SecondaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6SecondaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'LTE QoS Parameters' field from `self`.
     */
    getLteQosParameters(): [ /* returnType */ boolean, /* valueLteQosParametersQosClassIdentifier */ WdsQosClassIdentifier, /* valueLteQosParametersGuaranteedDownlinkBitrate */ number, /* valueLteQosParametersMaxDownlinkBitrate */ number, /* valueLteQosParametersGuaranteedUplinkBitrate */ number, /* valueLteQosParametersMaxUplinkBitrate */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'PCSCF Address Using DHCP' field from `self`.
     */
    getPcscfAddressUsingDhcp(): [ /* returnType */ boolean, /* valuePcscfAddressUsingDhcp */ boolean ]
    /**
     * Get the 'PCSCF Address Using PCO' field from `self`.
     */
    getPcscfAddressUsingPco(): [ /* returnType */ boolean, /* valuePcscfAddressUsingPco */ boolean ]
    /**
     * Get the 'PDP Context Number' field from `self`.
     */
    getPdpContextNumber(): [ /* returnType */ boolean, /* valuePdpContextNumber */ number ]
    /**
     * Get the 'PDP Context Primary ID' field from `self`.
     */
    getPdpContextPrimaryId(): [ /* returnType */ boolean, /* valuePdpContextPrimaryId */ number ]
    /**
     * Get the 'PDP Context Secondary Flag' field from `self`.
     */
    getPdpContextSecondaryFlag(): [ /* returnType */ boolean, /* valuePdpContextSecondaryFlag */ boolean ]
    /**
     * Get the 'PDP Data Compression Type' field from `self`.
     */
    getPdpDataCompressionType(): [ /* returnType */ boolean, /* valuePdpDataCompressionType */ WdsPdpDataCompressionType ]
    /**
     * Get the 'PDP Header Compression Type' field from `self`.
     */
    getPdpHeaderCompressionType(): [ /* returnType */ boolean, /* valuePdpHeaderCompressionType */ WdsPdpHeaderCompressionType ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the 'Profile Type' field from `self`.
     */
    getProfileType(): [ /* returnType */ boolean, /* valueProfileType */ WdsProfileType ]
    /**
     * Get the 'Roaming Disallowed Flag' field from `self`.
     */
    getRoamingDisallowedFlag(): [ /* returnType */ boolean, /* valueRoamingDisallowedFlag */ boolean ]
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'UMTS Minimum QoS' field from `self`.
     */
    getUmtsMinimumQos(): [ /* returnType */ boolean, /* valueUmtsMinimumQosTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosMaxUplinkBitrate */ number, /* valueUmtsMinimumQosMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosMaximumSduSize */ number, /* valueUmtsMinimumQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosTransferDelay */ number, /* valueUmtsMinimumQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Minimum QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsMinimumQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'UMTS Requested QoS' field from `self`.
     */
    getUmtsRequestedQos(): [ /* returnType */ boolean, /* valueUmtsRequestedQosTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosMaxUplinkBitrate */ number, /* valueUmtsRequestedQosMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosMaximumSduSize */ number, /* valueUmtsRequestedQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosTransferDelay */ number, /* valueUmtsRequestedQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Requested QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsRequestedQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsCreateProfileInput
    /**
     * Set the 'APN Disabled Flag' field in the message.
     * @param valueApnDisabledFlag a #gboolean.
     */
    setApnDisabledFlag(valueApnDisabledFlag: boolean): boolean
    /**
     * Set the 'APN Name' field in the message.
     * @param valueApnName a constant string.
     */
    setApnName(valueApnName: string): boolean
    /**
     * Set the 'APN Type Mask' field in the message.
     * @param valueApnTypeMask a #QmiWdsApnTypeMask.
     */
    setApnTypeMask(valueApnTypeMask: WdsApnTypeMask): boolean
    /**
     * Set the 'Authentication' field in the message.
     * @param valueAuthentication a #QmiWdsAuthentication.
     */
    setAuthentication(valueAuthentication: WdsAuthentication): boolean
    /**
     * Set the 'GPRS Minimum QoS' field in the message.
     * @param valueGprsMinimumQosPrecedenceClass a #guint32.
     * @param valueGprsMinimumQosDelayClass a #guint32.
     * @param valueGprsMinimumQosReliabilityClass a #guint32.
     * @param valueGprsMinimumQosPeakThroughputClass a #guint32.
     * @param valueGprsMinimumQosMeanThroughputClass a #guint32.
     */
    setGprsMinimumQos(valueGprsMinimumQosPrecedenceClass: number, valueGprsMinimumQosDelayClass: number, valueGprsMinimumQosReliabilityClass: number, valueGprsMinimumQosPeakThroughputClass: number, valueGprsMinimumQosMeanThroughputClass: number): boolean
    /**
     * Set the 'GPRS Requested QoS' field in the message.
     * @param valueGprsRequestedQosPrecedenceClass a #guint32.
     * @param valueGprsRequestedQosDelayClass a #guint32.
     * @param valueGprsRequestedQosReliabilityClass a #guint32.
     * @param valueGprsRequestedQosPeakThroughputClass a #guint32.
     * @param valueGprsRequestedQosMeanThroughputClass a #guint32.
     */
    setGprsRequestedQos(valueGprsRequestedQosPrecedenceClass: number, valueGprsRequestedQosDelayClass: number, valueGprsRequestedQosReliabilityClass: number, valueGprsRequestedQosPeakThroughputClass: number, valueGprsRequestedQosMeanThroughputClass: number): boolean
    /**
     * Set the 'IMCN Flag' field in the message.
     * @param valueImcnFlag a #gboolean.
     */
    setImcnFlag(valueImcnFlag: boolean): boolean
    /**
     * Set the 'IPv4 Address Preference' field in the message.
     * @param valueIpv4AddressPreference a #guint32.
     */
    setIpv4AddressPreference(valueIpv4AddressPreference: number): boolean
    /**
     * Set the 'IPv6 Address Preference' field in the message.
     * @param valueIpv6AddressPreferenceAddress a #GArray of #guint16 elements. A new reference to `value_ipv6`_address_preference_address will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6AddressPreference(valueIpv6AddressPreferenceAddress: number[]): boolean
    /**
     * Set the 'IPv6 Primary DNS Address Preference' field in the message.
     * @param valueIpv6PrimaryDnsAddressPreference a #GArray of #guint16 elements. A new reference to `value_ipv6`_primary_dns_address_preference will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6PrimaryDnsAddressPreference(valueIpv6PrimaryDnsAddressPreference: number[]): boolean
    /**
     * Set the 'IPv6 Secondary DNS Address Preference' field in the message.
     * @param valueIpv6SecondaryDnsAddressPreference a #GArray of #guint16 elements. A new reference to `value_ipv6`_secondary_dns_address_preference will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6SecondaryDnsAddressPreference(valueIpv6SecondaryDnsAddressPreference: number[]): boolean
    /**
     * Set the 'LTE QoS Parameters' field in the message.
     * @param valueLteQosParametersQosClassIdentifier a #QmiWdsQosClassIdentifier.
     * @param valueLteQosParametersGuaranteedDownlinkBitrate a #guint32.
     * @param valueLteQosParametersMaxDownlinkBitrate a #guint32.
     * @param valueLteQosParametersGuaranteedUplinkBitrate a #guint32.
     * @param valueLteQosParametersMaxUplinkBitrate a #guint32.
     */
    setLteQosParameters(valueLteQosParametersQosClassIdentifier: WdsQosClassIdentifier, valueLteQosParametersGuaranteedDownlinkBitrate: number, valueLteQosParametersMaxDownlinkBitrate: number, valueLteQosParametersGuaranteedUplinkBitrate: number, valueLteQosParametersMaxUplinkBitrate: number): boolean
    /**
     * Set the 'Password' field in the message.
     * @param valuePassword a constant string.
     */
    setPassword(valuePassword: string): boolean
    /**
     * Set the 'PCSCF Address Using DHCP' field in the message.
     * @param valuePcscfAddressUsingDhcp a #gboolean.
     */
    setPcscfAddressUsingDhcp(valuePcscfAddressUsingDhcp: boolean): boolean
    /**
     * Set the 'PCSCF Address Using PCO' field in the message.
     * @param valuePcscfAddressUsingPco a #gboolean.
     */
    setPcscfAddressUsingPco(valuePcscfAddressUsingPco: boolean): boolean
    /**
     * Set the 'PDP Context Number' field in the message.
     * @param valuePdpContextNumber a #guint8.
     */
    setPdpContextNumber(valuePdpContextNumber: number): boolean
    /**
     * Set the 'PDP Context Primary ID' field in the message.
     * @param valuePdpContextPrimaryId a #guint8.
     */
    setPdpContextPrimaryId(valuePdpContextPrimaryId: number): boolean
    /**
     * Set the 'PDP Context Secondary Flag' field in the message.
     * @param valuePdpContextSecondaryFlag a #gboolean.
     */
    setPdpContextSecondaryFlag(valuePdpContextSecondaryFlag: boolean): boolean
    /**
     * Set the 'PDP Data Compression Type' field in the message.
     * @param valuePdpDataCompressionType a #QmiWdsPdpDataCompressionType.
     */
    setPdpDataCompressionType(valuePdpDataCompressionType: WdsPdpDataCompressionType): boolean
    /**
     * Set the 'PDP Header Compression Type' field in the message.
     * @param valuePdpHeaderCompressionType a #QmiWdsPdpHeaderCompressionType.
     */
    setPdpHeaderCompressionType(valuePdpHeaderCompressionType: WdsPdpHeaderCompressionType): boolean
    /**
     * Set the 'PDP Type' field in the message.
     * @param valuePdpType a #QmiWdsPdpType.
     */
    setPdpType(valuePdpType: WdsPdpType): boolean
    /**
     * Set the 'Primary IPv4 DNS Address' field in the message.
     * @param valuePrimaryIpv4DnsAddress a #guint32.
     */
    setPrimaryIpv4DnsAddress(valuePrimaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'Profile Name' field in the message.
     * @param valueProfileName a constant string.
     */
    setProfileName(valueProfileName: string): boolean
    /**
     * Set the 'Profile Type' field in the message.
     * @param valueProfileType a #QmiWdsProfileType.
     */
    setProfileType(valueProfileType: WdsProfileType): boolean
    /**
     * Set the 'Roaming Disallowed Flag' field in the message.
     * @param valueRoamingDisallowedFlag a #gboolean.
     */
    setRoamingDisallowedFlag(valueRoamingDisallowedFlag: boolean): boolean
    /**
     * Set the 'Secondary IPv4 DNS Address' field in the message.
     * @param valueSecondaryIpv4DnsAddress a #guint32.
     */
    setSecondaryIpv4DnsAddress(valueSecondaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'UMTS Minimum QoS' field in the message.
     * @param valueUmtsMinimumQosTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsMinimumQosMaxUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosMaxDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsMinimumQosMaximumSduSize a #guint32.
     * @param valueUmtsMinimumQosSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsMinimumQosResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsMinimumQosDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsMinimumQosTransferDelay a #guint32.
     * @param valueUmtsMinimumQosTrafficHandlingPriority a #guint32.
     */
    setUmtsMinimumQos(valueUmtsMinimumQosTrafficClass: WdsTrafficClass, valueUmtsMinimumQosMaxUplinkBitrate: number, valueUmtsMinimumQosMaxDownlinkBitrate: number, valueUmtsMinimumQosGuaranteedUplinkBitrate: number, valueUmtsMinimumQosGuaranteedDownlinkBitrate: number, valueUmtsMinimumQosQosDeliveryOrder: WdsDeliveryOrder, valueUmtsMinimumQosMaximumSduSize: number, valueUmtsMinimumQosSduErrorRatio: WdsSduErrorRatio, valueUmtsMinimumQosResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsMinimumQosDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsMinimumQosTransferDelay: number, valueUmtsMinimumQosTrafficHandlingPriority: number): boolean
    /**
     * Set the 'UMTS Minimum QoS With Signaling Indication Flag' field in the message.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication a #gint8.
     */
    setUmtsMinimumQosWithSignalingIndicationFlag(valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass: WdsTrafficClass, valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder: WdsDeliveryOrder, valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize: number, valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio: WdsSduErrorRatio, valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay: number, valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority: number, valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication: number): boolean
    /**
     * Set the 'UMTS Requested QoS' field in the message.
     * @param valueUmtsRequestedQosTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsRequestedQosMaxUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosMaxDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsRequestedQosMaximumSduSize a #guint32.
     * @param valueUmtsRequestedQosSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsRequestedQosResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsRequestedQosDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsRequestedQosTransferDelay a #guint32.
     * @param valueUmtsRequestedQosTrafficHandlingPriority a #guint32.
     */
    setUmtsRequestedQos(valueUmtsRequestedQosTrafficClass: WdsTrafficClass, valueUmtsRequestedQosMaxUplinkBitrate: number, valueUmtsRequestedQosMaxDownlinkBitrate: number, valueUmtsRequestedQosGuaranteedUplinkBitrate: number, valueUmtsRequestedQosGuaranteedDownlinkBitrate: number, valueUmtsRequestedQosQosDeliveryOrder: WdsDeliveryOrder, valueUmtsRequestedQosMaximumSduSize: number, valueUmtsRequestedQosSduErrorRatio: WdsSduErrorRatio, valueUmtsRequestedQosResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsRequestedQosDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsRequestedQosTransferDelay: number, valueUmtsRequestedQosTrafficHandlingPriority: number): boolean
    /**
     * Set the 'UMTS Requested QoS With Signaling Indication Flag' field in the message.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication a #gint8.
     */
    setUmtsRequestedQosWithSignalingIndicationFlag(valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass: WdsTrafficClass, valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder: WdsDeliveryOrder, valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize: number, valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio: WdsSduErrorRatio, valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay: number, valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority: number, valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication: number): boolean
    /**
     * Set the 'Username' field in the message.
     * @param valueUsername a constant string.
     */
    setUsername(valueUsername: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsCreateProfileInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsCreateProfileInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsCreateProfileInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsCreateProfileInput

    /**
     * Allocates a new #QmiMessageWdsCreateProfileInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsCreateProfileInput.
     * @constructor 
     */
    static new(): MessageWdsCreateProfileInput
}

interface MessageWdsCreateProfileOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsCreateProfileOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierProfileType */ WdsProfileType, /* valueProfileIdentifierProfileIndex */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsCreateProfileOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsCreateProfileOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsCreateProfileOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsCreateProfileOutput

    static name: string
}

interface MessageWdsDeleteProfileInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsDeleteProfileInput

    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierProfileType */ WdsProfileType, /* valueProfileIdentifierProfileIndex */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsDeleteProfileInput
    /**
     * Set the 'Profile Identifier' field in the message.
     * @param valueProfileIdentifierProfileType a #QmiWdsProfileType.
     * @param valueProfileIdentifierProfileIndex a #guint8.
     */
    setProfileIdentifier(valueProfileIdentifierProfileType: WdsProfileType, valueProfileIdentifierProfileIndex: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsDeleteProfileInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsDeleteProfileInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsDeleteProfileInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsDeleteProfileInput

    /**
     * Allocates a new #QmiMessageWdsDeleteProfileInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsDeleteProfileInput.
     * @constructor 
     */
    static new(): MessageWdsDeleteProfileInput
}

interface MessageWdsDeleteProfileOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsDeleteProfileOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsDeleteProfileOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsDeleteProfileOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsDeleteProfileOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsDeleteProfileOutput

    static name: string
}

interface MessageWdsGetAutoconnectSettingsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetAutoconnectSettingsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Roaming' field from `self`.
     */
    getRoaming(): [ /* returnType */ boolean, /* valueRoaming */ WdsAutoconnectSettingRoaming ]
    /**
     * Get the 'Status' field from `self`.
     */
    getStatus(): [ /* returnType */ boolean, /* valueStatus */ WdsAutoconnectSetting ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetAutoconnectSettingsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetAutoconnectSettingsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetAutoconnectSettingsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetAutoconnectSettingsOutput

    static name: string
}

interface MessageWdsGetChannelRatesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetChannelRatesOutput

    /**
     * Get the 'Channel Rates' field from `self`.
     */
    getChannelRates(): [ /* returnType */ boolean, /* valueChannelRatesChannelTxRateBps */ number, /* valueChannelRatesChannelRxRateBps */ number, /* valueChannelRatesMaxChannelTxRateBps */ number, /* valueChannelRatesMaxChannelRxRateBps */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetChannelRatesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetChannelRatesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetChannelRatesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetChannelRatesOutput

    static name: string
}

interface MessageWdsGetCurrentDataBearerTechnologyOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetCurrentDataBearerTechnologyOutput

    /**
     * Get the 'Current' field from `self`.
     */
    getCurrent(): [ /* returnType */ boolean, /* valueCurrentNetworkType */ WdsNetworkType, /* valueCurrentRatMask */ number, /* valueCurrentSoMask */ number ]
    /**
     * Get the 'Last' field from `self`.
     */
    getLast(): [ /* returnType */ boolean, /* valueLastNetworkType */ WdsNetworkType, /* valueLastRatMask */ number, /* valueLastSoMask */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetCurrentDataBearerTechnologyOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetCurrentDataBearerTechnologyOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetCurrentDataBearerTechnologyOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetCurrentDataBearerTechnologyOutput

    static name: string
}

interface MessageWdsGetCurrentSettingsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetCurrentSettingsInput

    /**
     * Get the 'Requested Settings' field from `self`.
     */
    getRequestedSettings(): [ /* returnType */ boolean, /* valueRequestedSettings */ WdsGetCurrentSettingsRequestedSettings ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetCurrentSettingsInput
    /**
     * Set the 'Requested Settings' field in the message.
     * @param valueRequestedSettings a #QmiWdsGetCurrentSettingsRequestedSettings.
     */
    setRequestedSettings(valueRequestedSettings: WdsGetCurrentSettingsRequestedSettings): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetCurrentSettingsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetCurrentSettingsInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetCurrentSettingsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetCurrentSettingsInput

    /**
     * Allocates a new #QmiMessageWdsGetCurrentSettingsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetCurrentSettingsInput.
     * @constructor 
     */
    static new(): MessageWdsGetCurrentSettingsInput
}

interface MessageWdsGetCurrentSettingsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetCurrentSettingsOutput

    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'Domain Name List' field from `self`.
     */
    getDomainNameList(): [ /* returnType */ boolean, /* valueDomainNameList */ string[] ]
    /**
     * Get the 'Extended Technology Preference' field from `self`.
     */
    getExtendedTechnologyPreference(): [ /* returnType */ boolean, /* valueExtendedTechnologyPreference */ WdsExtendedTechnologyPreference ]
    /**
     * Get the 'GPRS Granted QoS' field from `self`.
     */
    getGprsGrantedQos(): [ /* returnType */ boolean, /* valueGprsGrantedQosPrecedenceClass */ number, /* valueGprsGrantedQosDelayClass */ number, /* valueGprsGrantedQosReliabilityClass */ number, /* valueGprsGrantedQosPeakThroughputClass */ number, /* valueGprsGrantedQosMeanThroughputClass */ number ]
    /**
     * Get the 'IMCN Flag' field from `self`.
     */
    getImcnFlag(): [ /* returnType */ boolean, /* valueImcnFlag */ number ]
    /**
     * Get the 'IP Family' field from `self`.
     */
    getIpFamily(): [ /* returnType */ boolean, /* valueIpFamily */ WdsIpFamily ]
    /**
     * Get the 'IPv4 Address' field from `self`.
     */
    getIpv4Address(): [ /* returnType */ boolean, /* valueIpv4Address */ number ]
    /**
     * Get the 'IPv4 Gateway Address' field from `self`.
     */
    getIpv4GatewayAddress(): [ /* returnType */ boolean, /* valueIpv4GatewayAddress */ number ]
    /**
     * Get the 'IPv4 Gateway Subnet Mask' field from `self`.
     */
    getIpv4GatewaySubnetMask(): [ /* returnType */ boolean, /* valueIpv4GatewaySubnetMask */ number ]
    /**
     * Get the 'IPv6 Address' field from `self`.
     */
    getIpv6Address(): [ /* returnType */ boolean, /* valueIpv6AddressAddress */ number[], /* valueIpv6AddressPrefixLength */ number ]
    /**
     * Get the 'IPv6 Gateway Address' field from `self`.
     */
    getIpv6GatewayAddress(): [ /* returnType */ boolean, /* valueIpv6GatewayAddressAddress */ number[], /* valueIpv6GatewayAddressPrefixLength */ number ]
    /**
     * Get the 'IPv6 Primary DNS Address' field from `self`.
     */
    getIpv6PrimaryDnsAddress(): [ /* returnType */ boolean, /* valueIpv6PrimaryDnsAddress */ number[] ]
    /**
     * Get the 'IPv6 Secondary DNS Address' field from `self`.
     */
    getIpv6SecondaryDnsAddress(): [ /* returnType */ boolean, /* valueIpv6SecondaryDnsAddress */ number[] ]
    /**
     * Get the 'MTU' field from `self`.
     */
    getMtu(): [ /* returnType */ boolean, /* valueMtu */ number ]
    /**
     * Get the 'PCSCF Address Using PCO' field from `self`.
     */
    getPcscfAddressUsingPco(): [ /* returnType */ boolean, /* valuePcscfAddressUsingPco */ number ]
    /**
     * Get the 'PCSCF Domain Name List' field from `self`.
     */
    getPcscfDomainNameList(): [ /* returnType */ boolean, /* valuePcscfDomainNameList */ string[] ]
    /**
     * Get the 'PCSCF Server Address List' field from `self`.
     */
    getPcscfServerAddressList(): [ /* returnType */ boolean, /* valuePcscfServerAddressList */ number[] ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile ID' field from `self`.
     */
    getProfileId(): [ /* returnType */ boolean, /* valueProfileIdProfileType */ WdsProfileType, /* valueProfileIdProfileIndex */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'UMTS Granted QoS' field from `self`.
     */
    getUmtsGrantedQos(): [ /* returnType */ boolean, /* valueUmtsGrantedQosTrafficClass */ WdsTrafficClass, /* valueUmtsGrantedQosMaxUplinkBitrate */ number, /* valueUmtsGrantedQosMaxDownlinkBitrate */ number, /* valueUmtsGrantedQosGuaranteedUplinkBitrate */ number, /* valueUmtsGrantedQosGuaranteedDownlinkBitrate */ number, /* valueUmtsGrantedQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsGrantedQosMaximumSduSize */ number, /* valueUmtsGrantedQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsGrantedQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsGrantedQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsGrantedQosTransferDelay */ number, /* valueUmtsGrantedQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetCurrentSettingsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetCurrentSettingsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetCurrentSettingsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetCurrentSettingsOutput

    static name: string
}

interface MessageWdsGetDataBearerTechnologyOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDataBearerTechnologyOutput

    /**
     * Get the 'Current' field from `self`.
     */
    getCurrent(): [ /* returnType */ boolean, /* valueCurrent */ WdsDataBearerTechnology ]
    /**
     * Get the 'Last' field from `self`.
     */
    getLast(): [ /* returnType */ boolean, /* valueLast */ WdsDataBearerTechnology ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDataBearerTechnologyOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDataBearerTechnologyOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDataBearerTechnologyOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDataBearerTechnologyOutput

    static name: string
}

interface MessageWdsGetDefaultProfileNumberInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDefaultProfileNumberInput

    /**
     * Get the 'Profile Type' field from `self`.
     */
    getProfileType(): [ /* returnType */ boolean, /* valueProfileTypeType */ WdsProfileType, /* valueProfileTypeFamily */ WdsProfileFamily ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDefaultProfileNumberInput
    /**
     * Set the 'Profile Type' field in the message.
     * @param valueProfileTypeType a #QmiWdsProfileType.
     * @param valueProfileTypeFamily a #QmiWdsProfileFamily.
     */
    setProfileType(valueProfileTypeType: WdsProfileType, valueProfileTypeFamily: WdsProfileFamily): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDefaultProfileNumberInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDefaultProfileNumberInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDefaultProfileNumberInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetDefaultProfileNumberInput

    /**
     * Allocates a new #QmiMessageWdsGetDefaultProfileNumberInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetDefaultProfileNumberInput.
     * @constructor 
     */
    static new(): MessageWdsGetDefaultProfileNumberInput
}

interface MessageWdsGetDefaultProfileNumberOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDefaultProfileNumberOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the 'Index' field from `self`.
     */
    getIndex(): [ /* returnType */ boolean, /* valueIndex */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDefaultProfileNumberOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDefaultProfileNumberOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDefaultProfileNumberOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDefaultProfileNumberOutput

    static name: string
}

interface MessageWdsGetDefaultSettingsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDefaultSettingsInput

    /**
     * Get the 'Profile Type' field from `self`.
     */
    getProfileType(): [ /* returnType */ boolean, /* valueProfileType */ WdsProfileType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDefaultSettingsInput
    /**
     * Set the 'Profile Type' field in the message.
     * @param valueProfileType a #QmiWdsProfileType.
     */
    setProfileType(valueProfileType: WdsProfileType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDefaultSettingsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDefaultSettingsInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDefaultSettingsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetDefaultSettingsInput

    /**
     * Allocates a new #QmiMessageWdsGetDefaultSettingsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetDefaultSettingsInput.
     * @constructor 
     */
    static new(): MessageWdsGetDefaultSettingsInput
}

interface MessageWdsGetDefaultSettingsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDefaultSettingsOutput

    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the 'GPRS Minimum QoS' field from `self`.
     */
    getGprsMinimumQos(): [ /* returnType */ boolean, /* valueGprsMinimumQosPrecedenceClass */ number, /* valueGprsMinimumQosDelayClass */ number, /* valueGprsMinimumQosReliabilityClass */ number, /* valueGprsMinimumQosPeakThroughputClass */ number, /* valueGprsMinimumQosMeanThroughputClass */ number ]
    /**
     * Get the 'GPRS Requested QoS' field from `self`.
     */
    getGprsRequestedQos(): [ /* returnType */ boolean, /* valueGprsRequestedQosPrecedenceClass */ number, /* valueGprsRequestedQosDelayClass */ number, /* valueGprsRequestedQosReliabilityClass */ number, /* valueGprsRequestedQosPeakThroughputClass */ number, /* valueGprsRequestedQosMeanThroughputClass */ number ]
    /**
     * Get the 'IMCN Flag' field from `self`.
     */
    getImcnFlag(): [ /* returnType */ boolean, /* valueImcnFlag */ boolean ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'IPv6 Address Preference' field from `self`.
     */
    getIpv6AddressPreference(): [ /* returnType */ boolean, /* valueIpv6AddressPreferenceAddress */ number[] ]
    /**
     * Get the 'IPv6 Primary DNS Address Preference' field from `self`.
     */
    getIpv6PrimaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6PrimaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'IPv6 Secondary DNS Address Preference' field from `self`.
     */
    getIpv6SecondaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6SecondaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'LTE QoS Parameters' field from `self`.
     */
    getLteQosParameters(): [ /* returnType */ boolean, /* valueLteQosParametersQosClassIdentifier */ WdsQosClassIdentifier, /* valueLteQosParametersGuaranteedDownlinkBitrate */ number, /* valueLteQosParametersMaxDownlinkBitrate */ number, /* valueLteQosParametersGuaranteedUplinkBitrate */ number, /* valueLteQosParametersMaxUplinkBitrate */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'PCSCF Address Using DHCP' field from `self`.
     */
    getPcscfAddressUsingDhcp(): [ /* returnType */ boolean, /* valuePcscfAddressUsingDhcp */ boolean ]
    /**
     * Get the 'PCSCF Address Using PCO' field from `self`.
     */
    getPcscfAddressUsingPco(): [ /* returnType */ boolean, /* valuePcscfAddressUsingPco */ boolean ]
    /**
     * Get the 'PDP Context Number' field from `self`.
     */
    getPdpContextNumber(): [ /* returnType */ boolean, /* valuePdpContextNumber */ number ]
    /**
     * Get the 'PDP Context Primary ID' field from `self`.
     */
    getPdpContextPrimaryId(): [ /* returnType */ boolean, /* valuePdpContextPrimaryId */ number ]
    /**
     * Get the 'PDP Context Secondary Flag' field from `self`.
     */
    getPdpContextSecondaryFlag(): [ /* returnType */ boolean, /* valuePdpContextSecondaryFlag */ boolean ]
    /**
     * Get the 'PDP Data Compression Type' field from `self`.
     */
    getPdpDataCompressionType(): [ /* returnType */ boolean, /* valuePdpDataCompressionType */ WdsPdpDataCompressionType ]
    /**
     * Get the 'PDP Header Compression Type' field from `self`.
     */
    getPdpHeaderCompressionType(): [ /* returnType */ boolean, /* valuePdpHeaderCompressionType */ WdsPdpHeaderCompressionType ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'UMTS Minimum QoS' field from `self`.
     */
    getUmtsMinimumQos(): [ /* returnType */ boolean, /* valueUmtsMinimumQosTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosMaxUplinkBitrate */ number, /* valueUmtsMinimumQosMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosMaximumSduSize */ number, /* valueUmtsMinimumQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosTransferDelay */ number, /* valueUmtsMinimumQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Minimum QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsMinimumQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'UMTS Requested QoS' field from `self`.
     */
    getUmtsRequestedQos(): [ /* returnType */ boolean, /* valueUmtsRequestedQosTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosMaxUplinkBitrate */ number, /* valueUmtsRequestedQosMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosMaximumSduSize */ number, /* valueUmtsRequestedQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosTransferDelay */ number, /* valueUmtsRequestedQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Requested QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsRequestedQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDefaultSettingsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDefaultSettingsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDefaultSettingsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDefaultSettingsOutput

    static name: string
}

interface MessageWdsGetDormancyStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetDormancyStatusOutput

    /**
     * Get the 'Dormancy Status' field from `self`.
     */
    getDormancyStatus(): [ /* returnType */ boolean, /* valueDormancyStatus */ WdsDormancyStatus ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetDormancyStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetDormancyStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetDormancyStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetDormancyStatusOutput

    static name: string
}

interface MessageWdsGetLteAttachParametersOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetLteAttachParametersOutput

    /**
     * Get the 'APN' field from `self`.
     */
    getApn(): [ /* returnType */ boolean, /* valueApn */ string ]
    /**
     * Get the 'IP Support Type' field from `self`.
     */
    getIpSupportType(): [ /* returnType */ boolean, /* valueIpSupportType */ WdsIpSupportType ]
    /**
     * Get the 'OTA Attach Performed' field from `self`.
     */
    getOtaAttachPerformed(): [ /* returnType */ boolean, /* valueOtaAttachPerformed */ boolean ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetLteAttachParametersOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetLteAttachParametersOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetLteAttachParametersOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetLteAttachParametersOutput

    static name: string
}

interface MessageWdsGetLteAttachPdnListOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetLteAttachPdnListOutput

    /**
     * Get the 'Current List' field from `self`.
     */
    getCurrentList(): [ /* returnType */ boolean, /* valueCurrentList */ number[] ]
    /**
     * Get the 'Pending List' field from `self`.
     */
    getPendingList(): [ /* returnType */ boolean, /* valuePendingList */ number[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetLteAttachPdnListOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetLteAttachPdnListOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetLteAttachPdnListOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetLteAttachPdnListOutput

    static name: string
}

interface MessageWdsGetMaxLteAttachPdnNumberOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetMaxLteAttachPdnNumberOutput

    /**
     * Get the 'Info' field from `self`.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfo */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetMaxLteAttachPdnNumberOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetMaxLteAttachPdnNumberOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetMaxLteAttachPdnNumberOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetMaxLteAttachPdnNumberOutput

    static name: string
}

interface MessageWdsGetPacketServiceStatusOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetPacketServiceStatusOutput

    /**
     * Get the 'Connection Status' field from `self`.
     */
    getConnectionStatus(): [ /* returnType */ boolean, /* valueConnectionStatus */ WdsConnectionStatus ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetPacketServiceStatusOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetPacketServiceStatusOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetPacketServiceStatusOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPacketServiceStatusOutput

    static name: string
}

interface MessageWdsGetPacketStatisticsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetPacketStatisticsInput

    /**
     * Get the 'Mask' field from `self`.
     */
    getMask(): [ /* returnType */ boolean, /* valueMask */ WdsPacketStatisticsMaskFlag ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetPacketStatisticsInput
    /**
     * Set the 'Mask' field in the message.
     * @param valueMask a #QmiWdsPacketStatisticsMaskFlag.
     */
    setMask(valueMask: WdsPacketStatisticsMaskFlag): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetPacketStatisticsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetPacketStatisticsInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPacketStatisticsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetPacketStatisticsInput

    /**
     * Allocates a new #QmiMessageWdsGetPacketStatisticsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetPacketStatisticsInput.
     * @constructor 
     */
    static new(): MessageWdsGetPacketStatisticsInput
}

interface MessageWdsGetPacketStatisticsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetPacketStatisticsOutput

    /**
     * Get the 'Last Call Rx Bytes Ok' field from `self`.
     */
    getLastCallRxBytesOk(): [ /* returnType */ boolean, /* valueLastCallRxBytesOk */ number ]
    /**
     * Get the 'Last Call Tx Bytes Ok' field from `self`.
     */
    getLastCallTxBytesOk(): [ /* returnType */ boolean, /* valueLastCallTxBytesOk */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Rx Bytes Ok' field from `self`.
     */
    getRxBytesOk(): [ /* returnType */ boolean, /* valueRxBytesOk */ number ]
    /**
     * Get the 'Rx Overflows' field from `self`.
     */
    getRxOverflows(): [ /* returnType */ boolean, /* valueRxOverflows */ number ]
    /**
     * Get the 'Rx Packets Dropped' field from `self`.
     */
    getRxPacketsDropped(): [ /* returnType */ boolean, /* valueRxPacketsDropped */ number ]
    /**
     * Get the 'Rx Packets Error' field from `self`.
     */
    getRxPacketsError(): [ /* returnType */ boolean, /* valueRxPacketsError */ number ]
    /**
     * Get the 'Rx Packets Ok' field from `self`.
     */
    getRxPacketsOk(): [ /* returnType */ boolean, /* valueRxPacketsOk */ number ]
    /**
     * Get the 'Tx Bytes Ok' field from `self`.
     */
    getTxBytesOk(): [ /* returnType */ boolean, /* valueTxBytesOk */ number ]
    /**
     * Get the 'Tx Overflows' field from `self`.
     */
    getTxOverflows(): [ /* returnType */ boolean, /* valueTxOverflows */ number ]
    /**
     * Get the 'Tx Packets Dropped' field from `self`.
     */
    getTxPacketsDropped(): [ /* returnType */ boolean, /* valueTxPacketsDropped */ number ]
    /**
     * Get the 'Tx Packets Error' field from `self`.
     */
    getTxPacketsError(): [ /* returnType */ boolean, /* valueTxPacketsError */ number ]
    /**
     * Get the 'Tx Packets Ok' field from `self`.
     */
    getTxPacketsOk(): [ /* returnType */ boolean, /* valueTxPacketsOk */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetPacketStatisticsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetPacketStatisticsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetPacketStatisticsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPacketStatisticsOutput

    static name: string
}

interface MessageWdsGetPdnThrottleInfoInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoInput

    /**
     * Get the 'Network Type' field from `self`.
     */
    getNetworkType(): [ /* returnType */ boolean, /* valueNetworkType */ WdsDataSystemNetworkType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetPdnThrottleInfoInput
    /**
     * Set the 'Network Type' field in the message.
     * @param valueNetworkType a #QmiWdsDataSystemNetworkType.
     */
    setNetworkType(valueNetworkType: WdsDataSystemNetworkType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetPdnThrottleInfoInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetPdnThrottleInfoInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoInput

    /**
     * Allocates a new #QmiMessageWdsGetPdnThrottleInfoInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetPdnThrottleInfoInput.
     * @constructor 
     */
    static new(): MessageWdsGetPdnThrottleInfoInput
}

interface MessageWdsGetPdnThrottleInfoOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoOutput

    /**
     * Get the 'Info' field from `self`.
     * 
     * Version of qmi_message_wds_get_pdn_throttle_info_output_get_info() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getInfo(): [ /* returnType */ boolean, /* valueInfoPtr */ MessageWdsGetPdnThrottleInfoOutputInfoElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetPdnThrottleInfoOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetPdnThrottleInfoOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetPdnThrottleInfoOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoOutput

    static name: string
}

interface MessageWdsGetPdnThrottleInfoOutputInfoElement {

    // Own fields of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoOutputInfoElement

    /**
     * a #gboolean.
     * @field 
     */
    ipv4Throttled: boolean
    /**
     * a #gboolean.
     * @field 
     */
    ipv6Throttled: boolean
    /**
     * a #guint32.
     * @field 
     */
    ipv4ThrottleTimeLeftMs: number
    /**
     * a #guint32.
     * @field 
     */
    ipv6ThrottleTimeLeftMs: number
    /**
     * a string.
     * @field 
     */
    apn: string
}

/**
 * A QmiMessageWdsGetPdnThrottleInfoOutputInfoElement struct.
 * @record 
 */
class MessageWdsGetPdnThrottleInfoOutputInfoElement {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetPdnThrottleInfoOutputInfoElement

    static name: string
}

interface MessageWdsGetProfileListInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetProfileListInput

    /**
     * Get the 'Profile Type' field from `self`.
     */
    getProfileType(): [ /* returnType */ boolean, /* valueProfileType */ WdsProfileType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetProfileListInput
    /**
     * Set the 'Profile Type' field in the message.
     * @param valueProfileType a #QmiWdsProfileType.
     */
    setProfileType(valueProfileType: WdsProfileType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetProfileListInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetProfileListInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetProfileListInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetProfileListInput

    /**
     * Allocates a new #QmiMessageWdsGetProfileListInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetProfileListInput.
     * @constructor 
     */
    static new(): MessageWdsGetProfileListInput
}

interface MessageWdsGetProfileListOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetProfileListOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the 'Profile List' field from `self`.
     * 
     * Version of qmi_message_wds_get_profile_list_output_get_profile_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getProfileList(): [ /* returnType */ boolean, /* valueProfileListPtr */ MessageWdsGetProfileListOutputProfileListProfile[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetProfileListOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetProfileListOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetProfileListOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetProfileListOutput

    static name: string
}

interface MessageWdsGetProfileListOutputProfileListProfile {

    // Own fields of Qmi-1.0.Qmi.MessageWdsGetProfileListOutputProfileListProfile

    /**
     * a #QmiWdsProfileType.
     * @field 
     */
    profileType: WdsProfileType
    /**
     * a #guint8.
     * @field 
     */
    profileIndex: number
    /**
     * a string.
     * @field 
     */
    profileName: string
}

/**
 * A QmiMessageWdsGetProfileListOutputProfileListProfile struct.
 * @record 
 */
class MessageWdsGetProfileListOutputProfileListProfile {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetProfileListOutputProfileListProfile

    static name: string
}

interface MessageWdsGetProfileSettingsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetProfileSettingsInput

    /**
     * Get the 'Profile ID' field from `self`.
     */
    getProfileId(): [ /* returnType */ boolean, /* valueProfileIdProfileType */ WdsProfileType, /* valueProfileIdProfileIndex */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetProfileSettingsInput
    /**
     * Set the 'Profile ID' field in the message.
     * @param valueProfileIdProfileType a #QmiWdsProfileType.
     * @param valueProfileIdProfileIndex a #guint8.
     */
    setProfileId(valueProfileIdProfileType: WdsProfileType, valueProfileIdProfileIndex: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetProfileSettingsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetProfileSettingsInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetProfileSettingsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsGetProfileSettingsInput

    /**
     * Allocates a new #QmiMessageWdsGetProfileSettingsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsGetProfileSettingsInput.
     * @constructor 
     */
    static new(): MessageWdsGetProfileSettingsInput
}

interface MessageWdsGetProfileSettingsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetProfileSettingsOutput

    /**
     * Get the 'APN Disabled Flag' field from `self`.
     */
    getApnDisabledFlag(): [ /* returnType */ boolean, /* valueApnDisabledFlag */ boolean ]
    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'APN Type Mask' field from `self`.
     */
    getApnTypeMask(): [ /* returnType */ boolean, /* valueApnTypeMask */ WdsApnTypeMask ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the 'GPRS Minimum QoS' field from `self`.
     */
    getGprsMinimumQos(): [ /* returnType */ boolean, /* valueGprsMinimumQosPrecedenceClass */ number, /* valueGprsMinimumQosDelayClass */ number, /* valueGprsMinimumQosReliabilityClass */ number, /* valueGprsMinimumQosPeakThroughputClass */ number, /* valueGprsMinimumQosMeanThroughputClass */ number ]
    /**
     * Get the 'GPRS Requested QoS' field from `self`.
     */
    getGprsRequestedQos(): [ /* returnType */ boolean, /* valueGprsRequestedQosPrecedenceClass */ number, /* valueGprsRequestedQosDelayClass */ number, /* valueGprsRequestedQosReliabilityClass */ number, /* valueGprsRequestedQosPeakThroughputClass */ number, /* valueGprsRequestedQosMeanThroughputClass */ number ]
    /**
     * Get the 'IMCN Flag' field from `self`.
     */
    getImcnFlag(): [ /* returnType */ boolean, /* valueImcnFlag */ boolean ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'IPv6 Address Preference' field from `self`.
     */
    getIpv6AddressPreference(): [ /* returnType */ boolean, /* valueIpv6AddressPreferenceAddress */ number[] ]
    /**
     * Get the 'IPv6 Primary DNS Address Preference' field from `self`.
     */
    getIpv6PrimaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6PrimaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'IPv6 Secondary DNS Address Preference' field from `self`.
     */
    getIpv6SecondaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6SecondaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'LTE QoS Parameters' field from `self`.
     */
    getLteQosParameters(): [ /* returnType */ boolean, /* valueLteQosParametersQosClassIdentifier */ WdsQosClassIdentifier, /* valueLteQosParametersGuaranteedDownlinkBitrate */ number, /* valueLteQosParametersMaxDownlinkBitrate */ number, /* valueLteQosParametersGuaranteedUplinkBitrate */ number, /* valueLteQosParametersMaxUplinkBitrate */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'PCSCF Address Using DHCP' field from `self`.
     */
    getPcscfAddressUsingDhcp(): [ /* returnType */ boolean, /* valuePcscfAddressUsingDhcp */ boolean ]
    /**
     * Get the 'PCSCF Address Using PCO' field from `self`.
     */
    getPcscfAddressUsingPco(): [ /* returnType */ boolean, /* valuePcscfAddressUsingPco */ boolean ]
    /**
     * Get the 'PDP Context Number' field from `self`.
     */
    getPdpContextNumber(): [ /* returnType */ boolean, /* valuePdpContextNumber */ number ]
    /**
     * Get the 'PDP Context Primary ID' field from `self`.
     */
    getPdpContextPrimaryId(): [ /* returnType */ boolean, /* valuePdpContextPrimaryId */ number ]
    /**
     * Get the 'PDP Context Secondary Flag' field from `self`.
     */
    getPdpContextSecondaryFlag(): [ /* returnType */ boolean, /* valuePdpContextSecondaryFlag */ boolean ]
    /**
     * Get the 'PDP Data Compression Type' field from `self`.
     */
    getPdpDataCompressionType(): [ /* returnType */ boolean, /* valuePdpDataCompressionType */ WdsPdpDataCompressionType ]
    /**
     * Get the 'PDP Header Compression Type' field from `self`.
     */
    getPdpHeaderCompressionType(): [ /* returnType */ boolean, /* valuePdpHeaderCompressionType */ WdsPdpHeaderCompressionType ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Roaming Disallowed Flag' field from `self`.
     */
    getRoamingDisallowedFlag(): [ /* returnType */ boolean, /* valueRoamingDisallowedFlag */ boolean ]
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'UMTS Minimum QoS' field from `self`.
     */
    getUmtsMinimumQos(): [ /* returnType */ boolean, /* valueUmtsMinimumQosTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosMaxUplinkBitrate */ number, /* valueUmtsMinimumQosMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosMaximumSduSize */ number, /* valueUmtsMinimumQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosTransferDelay */ number, /* valueUmtsMinimumQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Minimum QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsMinimumQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'UMTS Requested QoS' field from `self`.
     */
    getUmtsRequestedQos(): [ /* returnType */ boolean, /* valueUmtsRequestedQosTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosMaxUplinkBitrate */ number, /* valueUmtsRequestedQosMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosMaximumSduSize */ number, /* valueUmtsRequestedQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosTransferDelay */ number, /* valueUmtsRequestedQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Requested QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsRequestedQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetProfileSettingsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetProfileSettingsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetProfileSettingsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetProfileSettingsOutput

    static name: string
}

interface MessageWdsGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGetSupportedMessagesOutput

    static name: string
}

interface MessageWdsGoActiveOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGoActiveOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGoActiveOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGoActiveOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGoActiveOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGoActiveOutput

    static name: string
}

interface MessageWdsGoDormantOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsGoDormantOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsGoDormantOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsGoDormantOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsGoDormantOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsGoDormantOutput

    static name: string
}

interface MessageWdsModifyProfileInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsModifyProfileInput

    /**
     * Get the 'APN Disabled Flag' field from `self`.
     */
    getApnDisabledFlag(): [ /* returnType */ boolean, /* valueApnDisabledFlag */ boolean ]
    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'APN Type Mask' field from `self`.
     */
    getApnTypeMask(): [ /* returnType */ boolean, /* valueApnTypeMask */ WdsApnTypeMask ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'GPRS Minimum QoS' field from `self`.
     */
    getGprsMinimumQos(): [ /* returnType */ boolean, /* valueGprsMinimumQosPrecedenceClass */ number, /* valueGprsMinimumQosDelayClass */ number, /* valueGprsMinimumQosReliabilityClass */ number, /* valueGprsMinimumQosPeakThroughputClass */ number, /* valueGprsMinimumQosMeanThroughputClass */ number ]
    /**
     * Get the 'GPRS Requested QoS' field from `self`.
     */
    getGprsRequestedQos(): [ /* returnType */ boolean, /* valueGprsRequestedQosPrecedenceClass */ number, /* valueGprsRequestedQosDelayClass */ number, /* valueGprsRequestedQosReliabilityClass */ number, /* valueGprsRequestedQosPeakThroughputClass */ number, /* valueGprsRequestedQosMeanThroughputClass */ number ]
    /**
     * Get the 'IMCN Flag' field from `self`.
     */
    getImcnFlag(): [ /* returnType */ boolean, /* valueImcnFlag */ boolean ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'IPv6 Address Preference' field from `self`.
     */
    getIpv6AddressPreference(): [ /* returnType */ boolean, /* valueIpv6AddressPreferenceAddress */ number[] ]
    /**
     * Get the 'IPv6 Primary DNS Address Preference' field from `self`.
     */
    getIpv6PrimaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6PrimaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'IPv6 Secondary DNS Address Preference' field from `self`.
     */
    getIpv6SecondaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueIpv6SecondaryDnsAddressPreference */ number[] ]
    /**
     * Get the 'LTE QoS Parameters' field from `self`.
     */
    getLteQosParameters(): [ /* returnType */ boolean, /* valueLteQosParametersQosClassIdentifier */ WdsQosClassIdentifier, /* valueLteQosParametersGuaranteedDownlinkBitrate */ number, /* valueLteQosParametersMaxDownlinkBitrate */ number, /* valueLteQosParametersGuaranteedUplinkBitrate */ number, /* valueLteQosParametersMaxUplinkBitrate */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'PCSCF Address Using DHCP' field from `self`.
     */
    getPcscfAddressUsingDhcp(): [ /* returnType */ boolean, /* valuePcscfAddressUsingDhcp */ boolean ]
    /**
     * Get the 'PCSCF Address Using PCO' field from `self`.
     */
    getPcscfAddressUsingPco(): [ /* returnType */ boolean, /* valuePcscfAddressUsingPco */ boolean ]
    /**
     * Get the 'PDP Context Number' field from `self`.
     */
    getPdpContextNumber(): [ /* returnType */ boolean, /* valuePdpContextNumber */ number ]
    /**
     * Get the 'PDP Context Primary ID' field from `self`.
     */
    getPdpContextPrimaryId(): [ /* returnType */ boolean, /* valuePdpContextPrimaryId */ number ]
    /**
     * Get the 'PDP Context Secondary Flag' field from `self`.
     */
    getPdpContextSecondaryFlag(): [ /* returnType */ boolean, /* valuePdpContextSecondaryFlag */ boolean ]
    /**
     * Get the 'PDP Data Compression Type' field from `self`.
     */
    getPdpDataCompressionType(): [ /* returnType */ boolean, /* valuePdpDataCompressionType */ WdsPdpDataCompressionType ]
    /**
     * Get the 'PDP Header Compression Type' field from `self`.
     */
    getPdpHeaderCompressionType(): [ /* returnType */ boolean, /* valuePdpHeaderCompressionType */ WdsPdpHeaderCompressionType ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierProfileType */ WdsProfileType, /* valueProfileIdentifierProfileIndex */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the 'Roaming Disallowed Flag' field from `self`.
     */
    getRoamingDisallowedFlag(): [ /* returnType */ boolean, /* valueRoamingDisallowedFlag */ boolean ]
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'UMTS Minimum QoS' field from `self`.
     */
    getUmtsMinimumQos(): [ /* returnType */ boolean, /* valueUmtsMinimumQosTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosMaxUplinkBitrate */ number, /* valueUmtsMinimumQosMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosMaximumSduSize */ number, /* valueUmtsMinimumQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosTransferDelay */ number, /* valueUmtsMinimumQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Minimum QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsMinimumQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'UMTS Requested QoS' field from `self`.
     */
    getUmtsRequestedQos(): [ /* returnType */ boolean, /* valueUmtsRequestedQosTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosMaxUplinkBitrate */ number, /* valueUmtsRequestedQosMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosMaximumSduSize */ number, /* valueUmtsRequestedQosSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosTransferDelay */ number, /* valueUmtsRequestedQosTrafficHandlingPriority */ number ]
    /**
     * Get the 'UMTS Requested QoS With Signaling Indication Flag' field from `self`.
     */
    getUmtsRequestedQosWithSignalingIndicationFlag(): [ /* returnType */ boolean, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass */ WdsTrafficClass, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder */ WdsDeliveryOrder, /* valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio */ WdsSduErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio */ WdsSduResidualBitErrorRatio, /* valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu */ WdsSduErroneousDelivery, /* valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority */ number, /* valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsModifyProfileInput
    /**
     * Set the 'APN Disabled Flag' field in the message.
     * @param valueApnDisabledFlag a #gboolean.
     */
    setApnDisabledFlag(valueApnDisabledFlag: boolean): boolean
    /**
     * Set the 'APN Name' field in the message.
     * @param valueApnName a constant string.
     */
    setApnName(valueApnName: string): boolean
    /**
     * Set the 'APN Type Mask' field in the message.
     * @param valueApnTypeMask a #QmiWdsApnTypeMask.
     */
    setApnTypeMask(valueApnTypeMask: WdsApnTypeMask): boolean
    /**
     * Set the 'Authentication' field in the message.
     * @param valueAuthentication a #QmiWdsAuthentication.
     */
    setAuthentication(valueAuthentication: WdsAuthentication): boolean
    /**
     * Set the 'GPRS Minimum QoS' field in the message.
     * @param valueGprsMinimumQosPrecedenceClass a #guint32.
     * @param valueGprsMinimumQosDelayClass a #guint32.
     * @param valueGprsMinimumQosReliabilityClass a #guint32.
     * @param valueGprsMinimumQosPeakThroughputClass a #guint32.
     * @param valueGprsMinimumQosMeanThroughputClass a #guint32.
     */
    setGprsMinimumQos(valueGprsMinimumQosPrecedenceClass: number, valueGprsMinimumQosDelayClass: number, valueGprsMinimumQosReliabilityClass: number, valueGprsMinimumQosPeakThroughputClass: number, valueGprsMinimumQosMeanThroughputClass: number): boolean
    /**
     * Set the 'GPRS Requested QoS' field in the message.
     * @param valueGprsRequestedQosPrecedenceClass a #guint32.
     * @param valueGprsRequestedQosDelayClass a #guint32.
     * @param valueGprsRequestedQosReliabilityClass a #guint32.
     * @param valueGprsRequestedQosPeakThroughputClass a #guint32.
     * @param valueGprsRequestedQosMeanThroughputClass a #guint32.
     */
    setGprsRequestedQos(valueGprsRequestedQosPrecedenceClass: number, valueGprsRequestedQosDelayClass: number, valueGprsRequestedQosReliabilityClass: number, valueGprsRequestedQosPeakThroughputClass: number, valueGprsRequestedQosMeanThroughputClass: number): boolean
    /**
     * Set the 'IMCN Flag' field in the message.
     * @param valueImcnFlag a #gboolean.
     */
    setImcnFlag(valueImcnFlag: boolean): boolean
    /**
     * Set the 'IPv4 Address Preference' field in the message.
     * @param valueIpv4AddressPreference a #guint32.
     */
    setIpv4AddressPreference(valueIpv4AddressPreference: number): boolean
    /**
     * Set the 'IPv6 Address Preference' field in the message.
     * @param valueIpv6AddressPreferenceAddress a #GArray of #guint16 elements. A new reference to `value_ipv6`_address_preference_address will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6AddressPreference(valueIpv6AddressPreferenceAddress: number[]): boolean
    /**
     * Set the 'IPv6 Primary DNS Address Preference' field in the message.
     * @param valueIpv6PrimaryDnsAddressPreference a #GArray of #guint16 elements. A new reference to `value_ipv6`_primary_dns_address_preference will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6PrimaryDnsAddressPreference(valueIpv6PrimaryDnsAddressPreference: number[]): boolean
    /**
     * Set the 'IPv6 Secondary DNS Address Preference' field in the message.
     * @param valueIpv6SecondaryDnsAddressPreference a #GArray of #guint16 elements. A new reference to `value_ipv6`_secondary_dns_address_preference will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setIpv6SecondaryDnsAddressPreference(valueIpv6SecondaryDnsAddressPreference: number[]): boolean
    /**
     * Set the 'LTE QoS Parameters' field in the message.
     * @param valueLteQosParametersQosClassIdentifier a #QmiWdsQosClassIdentifier.
     * @param valueLteQosParametersGuaranteedDownlinkBitrate a #guint32.
     * @param valueLteQosParametersMaxDownlinkBitrate a #guint32.
     * @param valueLteQosParametersGuaranteedUplinkBitrate a #guint32.
     * @param valueLteQosParametersMaxUplinkBitrate a #guint32.
     */
    setLteQosParameters(valueLteQosParametersQosClassIdentifier: WdsQosClassIdentifier, valueLteQosParametersGuaranteedDownlinkBitrate: number, valueLteQosParametersMaxDownlinkBitrate: number, valueLteQosParametersGuaranteedUplinkBitrate: number, valueLteQosParametersMaxUplinkBitrate: number): boolean
    /**
     * Set the 'Password' field in the message.
     * @param valuePassword a constant string.
     */
    setPassword(valuePassword: string): boolean
    /**
     * Set the 'PCSCF Address Using DHCP' field in the message.
     * @param valuePcscfAddressUsingDhcp a #gboolean.
     */
    setPcscfAddressUsingDhcp(valuePcscfAddressUsingDhcp: boolean): boolean
    /**
     * Set the 'PCSCF Address Using PCO' field in the message.
     * @param valuePcscfAddressUsingPco a #gboolean.
     */
    setPcscfAddressUsingPco(valuePcscfAddressUsingPco: boolean): boolean
    /**
     * Set the 'PDP Context Number' field in the message.
     * @param valuePdpContextNumber a #guint8.
     */
    setPdpContextNumber(valuePdpContextNumber: number): boolean
    /**
     * Set the 'PDP Context Primary ID' field in the message.
     * @param valuePdpContextPrimaryId a #guint8.
     */
    setPdpContextPrimaryId(valuePdpContextPrimaryId: number): boolean
    /**
     * Set the 'PDP Context Secondary Flag' field in the message.
     * @param valuePdpContextSecondaryFlag a #gboolean.
     */
    setPdpContextSecondaryFlag(valuePdpContextSecondaryFlag: boolean): boolean
    /**
     * Set the 'PDP Data Compression Type' field in the message.
     * @param valuePdpDataCompressionType a #QmiWdsPdpDataCompressionType.
     */
    setPdpDataCompressionType(valuePdpDataCompressionType: WdsPdpDataCompressionType): boolean
    /**
     * Set the 'PDP Header Compression Type' field in the message.
     * @param valuePdpHeaderCompressionType a #QmiWdsPdpHeaderCompressionType.
     */
    setPdpHeaderCompressionType(valuePdpHeaderCompressionType: WdsPdpHeaderCompressionType): boolean
    /**
     * Set the 'PDP Type' field in the message.
     * @param valuePdpType a #QmiWdsPdpType.
     */
    setPdpType(valuePdpType: WdsPdpType): boolean
    /**
     * Set the 'Primary IPv4 DNS Address' field in the message.
     * @param valuePrimaryIpv4DnsAddress a #guint32.
     */
    setPrimaryIpv4DnsAddress(valuePrimaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'Profile Identifier' field in the message.
     * @param valueProfileIdentifierProfileType a #QmiWdsProfileType.
     * @param valueProfileIdentifierProfileIndex a #guint8.
     */
    setProfileIdentifier(valueProfileIdentifierProfileType: WdsProfileType, valueProfileIdentifierProfileIndex: number): boolean
    /**
     * Set the 'Profile Name' field in the message.
     * @param valueProfileName a constant string.
     */
    setProfileName(valueProfileName: string): boolean
    /**
     * Set the 'Roaming Disallowed Flag' field in the message.
     * @param valueRoamingDisallowedFlag a #gboolean.
     */
    setRoamingDisallowedFlag(valueRoamingDisallowedFlag: boolean): boolean
    /**
     * Set the 'Secondary IPv4 DNS Address' field in the message.
     * @param valueSecondaryIpv4DnsAddress a #guint32.
     */
    setSecondaryIpv4DnsAddress(valueSecondaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'UMTS Minimum QoS' field in the message.
     * @param valueUmtsMinimumQosTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsMinimumQosMaxUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosMaxDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsMinimumQosMaximumSduSize a #guint32.
     * @param valueUmtsMinimumQosSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsMinimumQosResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsMinimumQosDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsMinimumQosTransferDelay a #guint32.
     * @param valueUmtsMinimumQosTrafficHandlingPriority a #guint32.
     */
    setUmtsMinimumQos(valueUmtsMinimumQosTrafficClass: WdsTrafficClass, valueUmtsMinimumQosMaxUplinkBitrate: number, valueUmtsMinimumQosMaxDownlinkBitrate: number, valueUmtsMinimumQosGuaranteedUplinkBitrate: number, valueUmtsMinimumQosGuaranteedDownlinkBitrate: number, valueUmtsMinimumQosQosDeliveryOrder: WdsDeliveryOrder, valueUmtsMinimumQosMaximumSduSize: number, valueUmtsMinimumQosSduErrorRatio: WdsSduErrorRatio, valueUmtsMinimumQosResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsMinimumQosDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsMinimumQosTransferDelay: number, valueUmtsMinimumQosTrafficHandlingPriority: number): boolean
    /**
     * Set the 'UMTS Minimum QoS With Signaling Indication Flag' field in the message.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority a #guint32.
     * @param valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication a #gint8.
     */
    setUmtsMinimumQosWithSignalingIndicationFlag(valueUmtsMinimumQosWithSignalingIndicationFlagTrafficClass: WdsTrafficClass, valueUmtsMinimumQosWithSignalingIndicationFlagMaxUplinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagMaxDownlinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedUplinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate: number, valueUmtsMinimumQosWithSignalingIndicationFlagQosDeliveryOrder: WdsDeliveryOrder, valueUmtsMinimumQosWithSignalingIndicationFlagMaximumSduSize: number, valueUmtsMinimumQosWithSignalingIndicationFlagSduErrorRatio: WdsSduErrorRatio, valueUmtsMinimumQosWithSignalingIndicationFlagResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsMinimumQosWithSignalingIndicationFlagDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsMinimumQosWithSignalingIndicationFlagTransferDelay: number, valueUmtsMinimumQosWithSignalingIndicationFlagTrafficHandlingPriority: number, valueUmtsMinimumQosWithSignalingIndicationFlagSignalingIndication: number): boolean
    /**
     * Set the 'UMTS Requested QoS' field in the message.
     * @param valueUmtsRequestedQosTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsRequestedQosMaxUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosMaxDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsRequestedQosMaximumSduSize a #guint32.
     * @param valueUmtsRequestedQosSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsRequestedQosResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsRequestedQosDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsRequestedQosTransferDelay a #guint32.
     * @param valueUmtsRequestedQosTrafficHandlingPriority a #guint32.
     */
    setUmtsRequestedQos(valueUmtsRequestedQosTrafficClass: WdsTrafficClass, valueUmtsRequestedQosMaxUplinkBitrate: number, valueUmtsRequestedQosMaxDownlinkBitrate: number, valueUmtsRequestedQosGuaranteedUplinkBitrate: number, valueUmtsRequestedQosGuaranteedDownlinkBitrate: number, valueUmtsRequestedQosQosDeliveryOrder: WdsDeliveryOrder, valueUmtsRequestedQosMaximumSduSize: number, valueUmtsRequestedQosSduErrorRatio: WdsSduErrorRatio, valueUmtsRequestedQosResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsRequestedQosDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsRequestedQosTransferDelay: number, valueUmtsRequestedQosTrafficHandlingPriority: number): boolean
    /**
     * Set the 'UMTS Requested QoS With Signaling Indication Flag' field in the message.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass a #QmiWdsTrafficClass.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder a #QmiWdsDeliveryOrder.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio a #QmiWdsSduErrorRatio.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio a #QmiWdsSduResidualBitErrorRatio.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu a #QmiWdsSduErroneousDelivery.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority a #guint32.
     * @param valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication a #gint8.
     */
    setUmtsRequestedQosWithSignalingIndicationFlag(valueUmtsRequestedQosWithSignalingIndicationFlagTrafficClass: WdsTrafficClass, valueUmtsRequestedQosWithSignalingIndicationFlagMaxUplinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagMaxDownlinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedUplinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagGuaranteedDownlinkBitrate: number, valueUmtsRequestedQosWithSignalingIndicationFlagQosDeliveryOrder: WdsDeliveryOrder, valueUmtsRequestedQosWithSignalingIndicationFlagMaximumSduSize: number, valueUmtsRequestedQosWithSignalingIndicationFlagSduErrorRatio: WdsSduErrorRatio, valueUmtsRequestedQosWithSignalingIndicationFlagResidualBitErrorRatio: WdsSduResidualBitErrorRatio, valueUmtsRequestedQosWithSignalingIndicationFlagDeliveryErroneousSdu: WdsSduErroneousDelivery, valueUmtsRequestedQosWithSignalingIndicationFlagTransferDelay: number, valueUmtsRequestedQosWithSignalingIndicationFlagTrafficHandlingPriority: number, valueUmtsRequestedQosWithSignalingIndicationFlagSignalingIndication: number): boolean
    /**
     * Set the 'Username' field in the message.
     * @param valueUsername a constant string.
     */
    setUsername(valueUsername: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsModifyProfileInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsModifyProfileInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsModifyProfileInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsModifyProfileInput

    /**
     * Allocates a new #QmiMessageWdsModifyProfileInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsModifyProfileInput.
     * @constructor 
     */
    static new(): MessageWdsModifyProfileInput
}

interface MessageWdsModifyProfileOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsModifyProfileOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsModifyProfileOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsModifyProfileOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsModifyProfileOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsModifyProfileOutput

    static name: string
}

interface MessageWdsResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsResetOutput

    static name: string
}

interface MessageWdsSetAutoconnectSettingsInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetAutoconnectSettingsInput

    /**
     * Get the 'Roaming' field from `self`.
     */
    getRoaming(): [ /* returnType */ boolean, /* valueRoaming */ WdsAutoconnectSettingRoaming ]
    /**
     * Get the 'Status' field from `self`.
     */
    getStatus(): [ /* returnType */ boolean, /* valueStatus */ WdsAutoconnectSetting ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetAutoconnectSettingsInput
    /**
     * Set the 'Roaming' field in the message.
     * @param valueRoaming a #QmiWdsAutoconnectSettingRoaming.
     */
    setRoaming(valueRoaming: WdsAutoconnectSettingRoaming): boolean
    /**
     * Set the 'Status' field in the message.
     * @param valueStatus a #QmiWdsAutoconnectSetting.
     */
    setStatus(valueStatus: WdsAutoconnectSetting): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetAutoconnectSettingsInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetAutoconnectSettingsInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetAutoconnectSettingsInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSetAutoconnectSettingsInput

    /**
     * Allocates a new #QmiMessageWdsSetAutoconnectSettingsInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSetAutoconnectSettingsInput.
     * @constructor 
     */
    static new(): MessageWdsSetAutoconnectSettingsInput
}

interface MessageWdsSetAutoconnectSettingsOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetAutoconnectSettingsOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetAutoconnectSettingsOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetAutoconnectSettingsOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetAutoconnectSettingsOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetAutoconnectSettingsOutput

    static name: string
}

interface MessageWdsSetDefaultProfileNumberInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetDefaultProfileNumberInput

    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierType */ WdsProfileType, /* valueProfileIdentifierFamily */ WdsProfileFamily, /* valueProfileIdentifierIndex */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetDefaultProfileNumberInput
    /**
     * Set the 'Profile Identifier' field in the message.
     * @param valueProfileIdentifierType a #QmiWdsProfileType.
     * @param valueProfileIdentifierFamily a #QmiWdsProfileFamily.
     * @param valueProfileIdentifierIndex a #guint8.
     */
    setProfileIdentifier(valueProfileIdentifierType: WdsProfileType, valueProfileIdentifierFamily: WdsProfileFamily, valueProfileIdentifierIndex: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetDefaultProfileNumberInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetDefaultProfileNumberInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetDefaultProfileNumberInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSetDefaultProfileNumberInput

    /**
     * Allocates a new #QmiMessageWdsSetDefaultProfileNumberInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSetDefaultProfileNumberInput.
     * @constructor 
     */
    static new(): MessageWdsSetDefaultProfileNumberInput
}

interface MessageWdsSetDefaultProfileNumberOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetDefaultProfileNumberOutput

    /**
     * Get the 'Extended Error Code' field from `self`.
     */
    getExtendedErrorCode(): [ /* returnType */ boolean, /* valueExtendedErrorCode */ WdsDsProfileError ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetDefaultProfileNumberOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetDefaultProfileNumberOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetDefaultProfileNumberOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetDefaultProfileNumberOutput

    static name: string
}

interface MessageWdsSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetEventReportInput

    /**
     * Get the 'Channel Rate' field from `self`.
     */
    getChannelRate(): [ /* returnType */ boolean, /* valueChannelRate */ boolean ]
    /**
     * Get the 'Current Data Bearer Technology' field from `self`.
     */
    getCurrentDataBearerTechnology(): [ /* returnType */ boolean, /* valueCurrentDataBearerTechnology */ boolean ]
    /**
     * Get the 'Data Bearer Technology' field from `self`.
     */
    getDataBearerTechnology(): [ /* returnType */ boolean, /* valueDataBearerTechnology */ boolean ]
    /**
     * Get the 'Data Call Status' field from `self`.
     */
    getDataCallStatus(): [ /* returnType */ boolean, /* valueDataCallStatus */ boolean ]
    /**
     * Get the 'Data Systems' field from `self`.
     */
    getDataSystems(): [ /* returnType */ boolean, /* valueDataSystems */ boolean ]
    /**
     * Get the 'Dormancy Status' field from `self`.
     */
    getDormancyStatus(): [ /* returnType */ boolean, /* valueDormancyStatus */ boolean ]
    /**
     * Get the 'EVDO PM Change' field from `self`.
     */
    getEvdoPmChange(): [ /* returnType */ boolean, /* valueEvdoPmChange */ boolean ]
    /**
     * Get the 'Extended Data Bearer Technology' field from `self`.
     */
    getExtendedDataBearerTechnology(): [ /* returnType */ boolean, /* valueExtendedDataBearerTechnology */ boolean ]
    /**
     * Get the 'Limited Data System Status' field from `self`.
     */
    getLimitedDataSystemStatus(): [ /* returnType */ boolean, /* valueLimitedDataSystemStatus */ boolean ]
    /**
     * Get the 'MIP Status' field from `self`.
     */
    getMipStatus(): [ /* returnType */ boolean, /* valueMipStatus */ number ]
    /**
     * Get the 'PDN Filter Removals' field from `self`.
     */
    getPdnFilterRemovals(): [ /* returnType */ boolean, /* valuePdnFilterRemovals */ boolean ]
    /**
     * Get the 'Preferred Data System' field from `self`.
     */
    getPreferredDataSystem(): [ /* returnType */ boolean, /* valuePreferredDataSystem */ boolean ]
    /**
     * Get the 'Transfer Statistics' field from `self`.
     */
    getTransferStatistics(): [ /* returnType */ boolean, /* valueTransferStatisticsIntervalSeconds */ number, /* valueTransferStatisticsIndicators */ WdsSetEventReportTransferStatistics ]
    /**
     * Get the 'Uplink Flow Control' field from `self`.
     */
    getUplinkFlowControl(): [ /* returnType */ boolean, /* valueUplinkFlowControl */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetEventReportInput
    /**
     * Set the 'Channel Rate' field in the message.
     * @param valueChannelRate a #gboolean.
     */
    setChannelRate(valueChannelRate: boolean): boolean
    /**
     * Set the 'Current Data Bearer Technology' field in the message.
     * @param valueCurrentDataBearerTechnology a #gboolean.
     */
    setCurrentDataBearerTechnology(valueCurrentDataBearerTechnology: boolean): boolean
    /**
     * Set the 'Data Bearer Technology' field in the message.
     * @param valueDataBearerTechnology a #gboolean.
     */
    setDataBearerTechnology(valueDataBearerTechnology: boolean): boolean
    /**
     * Set the 'Data Call Status' field in the message.
     * @param valueDataCallStatus a #gboolean.
     */
    setDataCallStatus(valueDataCallStatus: boolean): boolean
    /**
     * Set the 'Data Systems' field in the message.
     * @param valueDataSystems a #gboolean.
     */
    setDataSystems(valueDataSystems: boolean): boolean
    /**
     * Set the 'Dormancy Status' field in the message.
     * @param valueDormancyStatus a #gboolean.
     */
    setDormancyStatus(valueDormancyStatus: boolean): boolean
    /**
     * Set the 'EVDO PM Change' field in the message.
     * @param valueEvdoPmChange a #gboolean.
     */
    setEvdoPmChange(valueEvdoPmChange: boolean): boolean
    /**
     * Set the 'Extended Data Bearer Technology' field in the message.
     * @param valueExtendedDataBearerTechnology a #gboolean.
     */
    setExtendedDataBearerTechnology(valueExtendedDataBearerTechnology: boolean): boolean
    /**
     * Set the 'Limited Data System Status' field in the message.
     * @param valueLimitedDataSystemStatus a #gboolean.
     */
    setLimitedDataSystemStatus(valueLimitedDataSystemStatus: boolean): boolean
    /**
     * Set the 'MIP Status' field in the message.
     * @param valueMipStatus a #guint8.
     */
    setMipStatus(valueMipStatus: number): boolean
    /**
     * Set the 'PDN Filter Removals' field in the message.
     * @param valuePdnFilterRemovals a #gboolean.
     */
    setPdnFilterRemovals(valuePdnFilterRemovals: boolean): boolean
    /**
     * Set the 'Preferred Data System' field in the message.
     * @param valuePreferredDataSystem a #gboolean.
     */
    setPreferredDataSystem(valuePreferredDataSystem: boolean): boolean
    /**
     * Set the 'Transfer Statistics' field in the message.
     * @param valueTransferStatisticsIntervalSeconds a #guint8.
     * @param valueTransferStatisticsIndicators a #QmiWdsSetEventReportTransferStatistics.
     */
    setTransferStatistics(valueTransferStatisticsIntervalSeconds: number, valueTransferStatisticsIndicators: WdsSetEventReportTransferStatistics): boolean
    /**
     * Set the 'Uplink Flow Control' field in the message.
     * @param valueUplinkFlowControl a #gboolean.
     */
    setUplinkFlowControl(valueUplinkFlowControl: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSetEventReportInput

    /**
     * Allocates a new #QmiMessageWdsSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSetEventReportInput.
     * @constructor 
     */
    static new(): MessageWdsSetEventReportInput
}

interface MessageWdsSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetEventReportOutput

    static name: string
}

interface MessageWdsSetIpFamilyInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetIpFamilyInput

    /**
     * Get the 'Preference' field from `self`.
     */
    getPreference(): [ /* returnType */ boolean, /* valuePreference */ WdsIpFamily ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetIpFamilyInput
    /**
     * Set the 'Preference' field in the message.
     * @param valuePreference a #QmiWdsIpFamily.
     */
    setPreference(valuePreference: WdsIpFamily): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetIpFamilyInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetIpFamilyInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetIpFamilyInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSetIpFamilyInput

    /**
     * Allocates a new #QmiMessageWdsSetIpFamilyInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSetIpFamilyInput.
     * @constructor 
     */
    static new(): MessageWdsSetIpFamilyInput
}

interface MessageWdsSetIpFamilyOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetIpFamilyOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetIpFamilyOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetIpFamilyOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetIpFamilyOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetIpFamilyOutput

    static name: string
}

interface MessageWdsSetLteAttachPdnListInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetLteAttachPdnListInput

    /**
     * Get the 'Action' field from `self`.
     */
    getAction(): [ /* returnType */ boolean, /* valueAction */ WdsAttachPdnListAction ]
    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ number[] ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetLteAttachPdnListInput
    /**
     * Set the 'Action' field in the message.
     * @param valueAction a #QmiWdsAttachPdnListAction.
     */
    setAction(valueAction: WdsAttachPdnListAction): boolean
    /**
     * Set the 'List' field in the message.
     * @param valueList a #GArray of #guint16 elements. A new reference to `value_list` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setList(valueList: number[]): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetLteAttachPdnListInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetLteAttachPdnListInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetLteAttachPdnListInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSetLteAttachPdnListInput

    /**
     * Allocates a new #QmiMessageWdsSetLteAttachPdnListInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSetLteAttachPdnListInput.
     * @constructor 
     */
    static new(): MessageWdsSetLteAttachPdnListInput
}

interface MessageWdsSetLteAttachPdnListOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSetLteAttachPdnListOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSetLteAttachPdnListOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSetLteAttachPdnListOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSetLteAttachPdnListOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSetLteAttachPdnListOutput

    static name: string
}

interface MessageWdsStartNetworkInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsStartNetworkInput

    /**
     * Get the 'APN' field from `self`.
     */
    getApn(): [ /* returnType */ boolean, /* valueApn */ string ]
    /**
     * Get the 'Authentication Preference' field from `self`.
     */
    getAuthenticationPreference(): [ /* returnType */ boolean, /* valueAuthenticationPreference */ WdsAuthentication ]
    /**
     * Get the 'Call Type' field from `self`.
     */
    getCallType(): [ /* returnType */ boolean, /* valueCallType */ WdsCallType ]
    /**
     * Get the 'Enable Autoconnect' field from `self`.
     */
    getEnableAutoconnect(): [ /* returnType */ boolean, /* valueEnableAutoconnect */ boolean ]
    /**
     * Get the 'Extended Technology Preference' field from `self`.
     */
    getExtendedTechnologyPreference(): [ /* returnType */ boolean, /* valueExtendedTechnologyPreference */ WdsExtendedTechnologyPreference ]
    /**
     * Get the 'IP Family Preference' field from `self`.
     */
    getIpFamilyPreference(): [ /* returnType */ boolean, /* valueIpFamilyPreference */ WdsIpFamily ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'Primary DNS Address Preference' field from `self`.
     */
    getPrimaryDnsAddressPreference(): [ /* returnType */ boolean, /* valuePrimaryDnsAddressPreference */ number ]
    /**
     * Get the 'Primary NBNS Address Preference' field from `self`.
     */
    getPrimaryNbnsAddressPreference(): [ /* returnType */ boolean, /* valuePrimaryNbnsAddressPreference */ number ]
    /**
     * Get the 'Profile Index 3GPP' field from `self`.
     */
    getProfileIndex3gpp(): [ /* returnType */ boolean, /* valueProfileIndex3gpp */ number ]
    /**
     * Get the 'Profile Index 3GPP2' field from `self`.
     */
    getProfileIndex3gpp2(): [ /* returnType */ boolean, /* valueProfileIndex3gpp2 */ number ]
    /**
     * Get the 'Secondary DNS Address Preference' field from `self`.
     */
    getSecondaryDnsAddressPreference(): [ /* returnType */ boolean, /* valueSecondaryDnsAddressPreference */ number ]
    /**
     * Get the 'Secondary NBNS Address Preference' field from `self`.
     */
    getSecondaryNbnsAddressPreference(): [ /* returnType */ boolean, /* valueSecondaryNbnsAddressPreference */ number ]
    /**
     * Get the 'Technology Preference' field from `self`.
     */
    getTechnologyPreference(): [ /* returnType */ boolean, /* valueTechnologyPreference */ WdsTechnologyPreference ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsStartNetworkInput
    /**
     * Set the 'APN' field in the message.
     * @param valueApn a constant string.
     */
    setApn(valueApn: string): boolean
    /**
     * Set the 'Authentication Preference' field in the message.
     * @param valueAuthenticationPreference a #QmiWdsAuthentication.
     */
    setAuthenticationPreference(valueAuthenticationPreference: WdsAuthentication): boolean
    /**
     * Set the 'Call Type' field in the message.
     * @param valueCallType a #QmiWdsCallType.
     */
    setCallType(valueCallType: WdsCallType): boolean
    /**
     * Set the 'Enable Autoconnect' field in the message.
     * @param valueEnableAutoconnect a #gboolean.
     */
    setEnableAutoconnect(valueEnableAutoconnect: boolean): boolean
    /**
     * Set the 'Extended Technology Preference' field in the message.
     * @param valueExtendedTechnologyPreference a #QmiWdsExtendedTechnologyPreference.
     */
    setExtendedTechnologyPreference(valueExtendedTechnologyPreference: WdsExtendedTechnologyPreference): boolean
    /**
     * Set the 'IP Family Preference' field in the message.
     * @param valueIpFamilyPreference a #QmiWdsIpFamily.
     */
    setIpFamilyPreference(valueIpFamilyPreference: WdsIpFamily): boolean
    /**
     * Set the 'IPv4 Address Preference' field in the message.
     * @param valueIpv4AddressPreference a #guint32.
     */
    setIpv4AddressPreference(valueIpv4AddressPreference: number): boolean
    /**
     * Set the 'Password' field in the message.
     * @param valuePassword a constant string.
     */
    setPassword(valuePassword: string): boolean
    /**
     * Set the 'Primary DNS Address Preference' field in the message.
     * @param valuePrimaryDnsAddressPreference a #guint32.
     */
    setPrimaryDnsAddressPreference(valuePrimaryDnsAddressPreference: number): boolean
    /**
     * Set the 'Primary NBNS Address Preference' field in the message.
     * @param valuePrimaryNbnsAddressPreference a #guint32.
     */
    setPrimaryNbnsAddressPreference(valuePrimaryNbnsAddressPreference: number): boolean
    /**
     * Set the 'Profile Index 3GPP' field in the message.
     * @param valueProfileIndex3gpp a #guint8.
     */
    setProfileIndex3gpp(valueProfileIndex3gpp: number): boolean
    /**
     * Set the 'Profile Index 3GPP2' field in the message.
     * @param valueProfileIndex3gpp2 a #guint8.
     */
    setProfileIndex3gpp2(valueProfileIndex3gpp2: number): boolean
    /**
     * Set the 'Secondary DNS Address Preference' field in the message.
     * @param valueSecondaryDnsAddressPreference a #guint32.
     */
    setSecondaryDnsAddressPreference(valueSecondaryDnsAddressPreference: number): boolean
    /**
     * Set the 'Secondary NBNS Address Preference' field in the message.
     * @param valueSecondaryNbnsAddressPreference a #guint32.
     */
    setSecondaryNbnsAddressPreference(valueSecondaryNbnsAddressPreference: number): boolean
    /**
     * Set the 'Technology Preference' field in the message.
     * @param valueTechnologyPreference a #QmiWdsTechnologyPreference.
     */
    setTechnologyPreference(valueTechnologyPreference: WdsTechnologyPreference): boolean
    /**
     * Set the 'Username' field in the message.
     * @param valueUsername a constant string.
     */
    setUsername(valueUsername: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsStartNetworkInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsStartNetworkInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsStartNetworkInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsStartNetworkInput

    /**
     * Allocates a new #QmiMessageWdsStartNetworkInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsStartNetworkInput.
     * @constructor 
     */
    static new(): MessageWdsStartNetworkInput
}

interface MessageWdsStartNetworkOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsStartNetworkOutput

    /**
     * Get the 'Call End Reason' field from `self`.
     */
    getCallEndReason(): [ /* returnType */ boolean, /* valueCallEndReason */ WdsCallEndReason ]
    /**
     * Get the 'Packet Data Handle' field from `self`.
     */
    getPacketDataHandle(): [ /* returnType */ boolean, /* valuePacketDataHandle */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Verbose Call End Reason' field from `self`.
     */
    getVerboseCallEndReason(): [ /* returnType */ boolean, /* valueVerboseCallEndReasonType */ WdsVerboseCallEndReasonType, /* valueVerboseCallEndReasonReason */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsStartNetworkOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsStartNetworkOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsStartNetworkOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsStartNetworkOutput

    static name: string
}

interface MessageWdsStopNetworkInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsStopNetworkInput

    /**
     * Get the 'Disable Autoconnect' field from `self`.
     */
    getDisableAutoconnect(): [ /* returnType */ boolean, /* valueDisableAutoconnect */ boolean ]
    /**
     * Get the 'Packet Data Handle' field from `self`.
     */
    getPacketDataHandle(): [ /* returnType */ boolean, /* valuePacketDataHandle */ number ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsStopNetworkInput
    /**
     * Set the 'Disable Autoconnect' field in the message.
     * @param valueDisableAutoconnect a #gboolean.
     */
    setDisableAutoconnect(valueDisableAutoconnect: boolean): boolean
    /**
     * Set the 'Packet Data Handle' field in the message.
     * @param valuePacketDataHandle a #guint32.
     */
    setPacketDataHandle(valuePacketDataHandle: number): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsStopNetworkInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsStopNetworkInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsStopNetworkInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsStopNetworkInput

    /**
     * Allocates a new #QmiMessageWdsStopNetworkInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsStopNetworkInput.
     * @constructor 
     */
    static new(): MessageWdsStopNetworkInput
}

interface MessageWdsStopNetworkOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsStopNetworkOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsStopNetworkOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsStopNetworkOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsStopNetworkOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsStopNetworkOutput

    static name: string
}

interface MessageWdsSwiCreateProfileIndexedInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSwiCreateProfileIndexedInput

    /**
     * Get the 'APN Disabled Flag' field from `self`.
     */
    getApnDisabledFlag(): [ /* returnType */ boolean, /* valueApnDisabledFlag */ boolean ]
    /**
     * Get the 'APN Name' field from `self`.
     */
    getApnName(): [ /* returnType */ boolean, /* valueApnName */ string ]
    /**
     * Get the 'Authentication' field from `self`.
     */
    getAuthentication(): [ /* returnType */ boolean, /* valueAuthentication */ WdsAuthentication ]
    /**
     * Get the 'IPv4 Address Preference' field from `self`.
     */
    getIpv4AddressPreference(): [ /* returnType */ boolean, /* valueIpv4AddressPreference */ number ]
    /**
     * Get the 'Password' field from `self`.
     */
    getPassword(): [ /* returnType */ boolean, /* valuePassword */ string ]
    /**
     * Get the 'PDP Context Number' field from `self`.
     */
    getPdpContextNumber(): [ /* returnType */ boolean, /* valuePdpContextNumber */ number ]
    /**
     * Get the 'PDP Type' field from `self`.
     */
    getPdpType(): [ /* returnType */ boolean, /* valuePdpType */ WdsPdpType ]
    /**
     * Get the 'Primary IPv4 DNS Address' field from `self`.
     */
    getPrimaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valuePrimaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierProfileType */ WdsProfileType, /* valueProfileIdentifierProfileIndex */ number ]
    /**
     * Get the 'Profile Name' field from `self`.
     */
    getProfileName(): [ /* returnType */ boolean, /* valueProfileName */ string ]
    /**
     * Get the 'Roaming Disallowed Flag' field from `self`.
     */
    getRoamingDisallowedFlag(): [ /* returnType */ boolean, /* valueRoamingDisallowedFlag */ boolean ]
    /**
     * Get the 'Secondary IPv4 DNS Address' field from `self`.
     */
    getSecondaryIpv4DnsAddress(): [ /* returnType */ boolean, /* valueSecondaryIpv4DnsAddress */ number ]
    /**
     * Get the 'Username' field from `self`.
     */
    getUsername(): [ /* returnType */ boolean, /* valueUsername */ string ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSwiCreateProfileIndexedInput
    /**
     * Set the 'APN Disabled Flag' field in the message.
     * @param valueApnDisabledFlag a #gboolean.
     */
    setApnDisabledFlag(valueApnDisabledFlag: boolean): boolean
    /**
     * Set the 'APN Name' field in the message.
     * @param valueApnName a constant string.
     */
    setApnName(valueApnName: string): boolean
    /**
     * Set the 'Authentication' field in the message.
     * @param valueAuthentication a #QmiWdsAuthentication.
     */
    setAuthentication(valueAuthentication: WdsAuthentication): boolean
    /**
     * Set the 'IPv4 Address Preference' field in the message.
     * @param valueIpv4AddressPreference a #guint32.
     */
    setIpv4AddressPreference(valueIpv4AddressPreference: number): boolean
    /**
     * Set the 'Password' field in the message.
     * @param valuePassword a constant string.
     */
    setPassword(valuePassword: string): boolean
    /**
     * Set the 'PDP Context Number' field in the message.
     * @param valuePdpContextNumber a #guint8.
     */
    setPdpContextNumber(valuePdpContextNumber: number): boolean
    /**
     * Set the 'PDP Type' field in the message.
     * @param valuePdpType a #QmiWdsPdpType.
     */
    setPdpType(valuePdpType: WdsPdpType): boolean
    /**
     * Set the 'Primary IPv4 DNS Address' field in the message.
     * @param valuePrimaryIpv4DnsAddress a #guint32.
     */
    setPrimaryIpv4DnsAddress(valuePrimaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'Profile Identifier' field in the message.
     * @param valueProfileIdentifierProfileType a #QmiWdsProfileType.
     * @param valueProfileIdentifierProfileIndex a #guint8.
     */
    setProfileIdentifier(valueProfileIdentifierProfileType: WdsProfileType, valueProfileIdentifierProfileIndex: number): boolean
    /**
     * Set the 'Profile Name' field in the message.
     * @param valueProfileName a constant string.
     */
    setProfileName(valueProfileName: string): boolean
    /**
     * Set the 'Roaming Disallowed Flag' field in the message.
     * @param valueRoamingDisallowedFlag a #gboolean.
     */
    setRoamingDisallowedFlag(valueRoamingDisallowedFlag: boolean): boolean
    /**
     * Set the 'Secondary IPv4 DNS Address' field in the message.
     * @param valueSecondaryIpv4DnsAddress a #guint32.
     */
    setSecondaryIpv4DnsAddress(valueSecondaryIpv4DnsAddress: number): boolean
    /**
     * Set the 'Username' field in the message.
     * @param valueUsername a constant string.
     */
    setUsername(valueUsername: string): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSwiCreateProfileIndexedInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSwiCreateProfileIndexedInput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSwiCreateProfileIndexedInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWdsSwiCreateProfileIndexedInput

    /**
     * Allocates a new #QmiMessageWdsSwiCreateProfileIndexedInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWdsSwiCreateProfileIndexedInput.
     * @constructor 
     */
    static new(): MessageWdsSwiCreateProfileIndexedInput
}

interface MessageWdsSwiCreateProfileIndexedOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWdsSwiCreateProfileIndexedOutput

    /**
     * Get the 'Profile Identifier' field from `self`.
     */
    getProfileIdentifier(): [ /* returnType */ boolean, /* valueProfileIdentifierProfileType */ WdsProfileType, /* valueProfileIdentifierProfileIndex */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWdsSwiCreateProfileIndexedOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWdsSwiCreateProfileIndexedOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWdsSwiCreateProfileIndexedOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWdsSwiCreateProfileIndexedOutput

    static name: string
}

interface MessageWmsDeleteInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsDeleteInput

    /**
     * Get the 'Memory Index' field from `self`.
     */
    getMemoryIndex(): [ /* returnType */ boolean, /* valueMemoryIndex */ number ]
    /**
     * Get the 'Memory Storage' field from `self`.
     */
    getMemoryStorage(): [ /* returnType */ boolean, /* valueMemoryStorage */ WmsStorageType ]
    /**
     * Get the 'Message Mode' field from `self`.
     */
    getMessageMode(): [ /* returnType */ boolean, /* valueMessageMode */ WmsMessageMode ]
    /**
     * Get the 'Message Tag' field from `self`.
     */
    getMessageTag(): [ /* returnType */ boolean, /* valueMessageTag */ WmsMessageTagType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsDeleteInput
    /**
     * Set the 'Memory Index' field in the message.
     * @param valueMemoryIndex a #guint32.
     */
    setMemoryIndex(valueMemoryIndex: number): boolean
    /**
     * Set the 'Memory Storage' field in the message.
     * @param valueMemoryStorage a #QmiWmsStorageType.
     */
    setMemoryStorage(valueMemoryStorage: WmsStorageType): boolean
    /**
     * Set the 'Message Mode' field in the message.
     * @param valueMessageMode a #QmiWmsMessageMode.
     */
    setMessageMode(valueMessageMode: WmsMessageMode): boolean
    /**
     * Set the 'Message Tag' field in the message.
     * @param valueMessageTag a #QmiWmsMessageTagType.
     */
    setMessageTag(valueMessageTag: WmsMessageTagType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsDeleteInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsDeleteInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsDeleteInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsDeleteInput

    /**
     * Allocates a new #QmiMessageWmsDeleteInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsDeleteInput.
     * @constructor 
     */
    static new(): MessageWmsDeleteInput
}

interface MessageWmsDeleteOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsDeleteOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsDeleteOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsDeleteOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsDeleteOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsDeleteOutput

    static name: string
}

interface MessageWmsGetMessageProtocolOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsGetMessageProtocolOutput

    /**
     * Get the 'Message Protocol' field from `self`.
     */
    getMessageProtocol(): [ /* returnType */ boolean, /* valueMessageProtocol */ WmsMessageProtocol ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsGetMessageProtocolOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsGetMessageProtocolOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsGetMessageProtocolOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsGetMessageProtocolOutput

    static name: string
}

interface MessageWmsGetRoutesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsGetRoutesOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Get the 'Route List' field from `self`.
     * 
     * Version of qmi_message_wms_get_routes_output_get_route_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRouteList(): [ /* returnType */ boolean, /* valueRouteListPtr */ MessageWmsGetRoutesOutputRouteListElement[] ]
    /**
     * Get the 'Transfer Status Report' field from `self`.
     */
    getTransferStatusReport(): [ /* returnType */ boolean, /* valueTransferStatusReport */ WmsTransferIndication ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsGetRoutesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsGetRoutesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsGetRoutesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsGetRoutesOutput

    static name: string
}

interface MessageWmsGetRoutesOutputRouteListElement {

    // Own fields of Qmi-1.0.Qmi.MessageWmsGetRoutesOutputRouteListElement

    /**
     * a #QmiWmsMessageType.
     * @field 
     */
    messageType: WmsMessageType
    /**
     * a #QmiWmsMessageClass.
     * @field 
     */
    messageClass: WmsMessageClass
    /**
     * a #QmiWmsStorageType.
     * @field 
     */
    storage: WmsStorageType
    /**
     * a #QmiWmsReceiptAction.
     * @field 
     */
    receiptAction: WmsReceiptAction
}

/**
 * A QmiMessageWmsGetRoutesOutputRouteListElement struct.
 * @record 
 */
class MessageWmsGetRoutesOutputRouteListElement {

    // Own properties of Qmi-1.0.Qmi.MessageWmsGetRoutesOutputRouteListElement

    static name: string
}

interface MessageWmsGetSupportedMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsGetSupportedMessagesOutput

    /**
     * Get the 'List' field from `self`.
     */
    getList(): [ /* returnType */ boolean, /* valueList */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsGetSupportedMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsGetSupportedMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsGetSupportedMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsGetSupportedMessagesOutput

    static name: string
}

interface MessageWmsListMessagesInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsListMessagesInput

    /**
     * Get the 'Message Mode' field from `self`.
     */
    getMessageMode(): [ /* returnType */ boolean, /* valueMessageMode */ WmsMessageMode ]
    /**
     * Get the 'Message Tag' field from `self`.
     */
    getMessageTag(): [ /* returnType */ boolean, /* valueMessageTag */ WmsMessageTagType ]
    /**
     * Get the 'Storage Type' field from `self`.
     */
    getStorageType(): [ /* returnType */ boolean, /* valueStorageType */ WmsStorageType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsListMessagesInput
    /**
     * Set the 'Message Mode' field in the message.
     * @param valueMessageMode a #QmiWmsMessageMode.
     */
    setMessageMode(valueMessageMode: WmsMessageMode): boolean
    /**
     * Set the 'Message Tag' field in the message.
     * @param valueMessageTag a #QmiWmsMessageTagType.
     */
    setMessageTag(valueMessageTag: WmsMessageTagType): boolean
    /**
     * Set the 'Storage Type' field in the message.
     * @param valueStorageType a #QmiWmsStorageType.
     */
    setStorageType(valueStorageType: WmsStorageType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsListMessagesInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsListMessagesInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsListMessagesInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsListMessagesInput

    /**
     * Allocates a new #QmiMessageWmsListMessagesInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsListMessagesInput.
     * @constructor 
     */
    static new(): MessageWmsListMessagesInput
}

interface MessageWmsListMessagesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsListMessagesOutput

    /**
     * Get the 'Message List' field from `self`.
     * 
     * Version of qmi_message_wms_list_messages_output_get_message_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getMessageList(): [ /* returnType */ boolean, /* valueMessageListPtr */ MessageWmsListMessagesOutputMessageListElement[] ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsListMessagesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsListMessagesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsListMessagesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsListMessagesOutput

    static name: string
}

interface MessageWmsListMessagesOutputMessageListElement {

    // Own fields of Qmi-1.0.Qmi.MessageWmsListMessagesOutputMessageListElement

    /**
     * a #guint32.
     * @field 
     */
    memoryIndex: number
    /**
     * a #QmiWmsMessageTagType.
     * @field 
     */
    messageTag: WmsMessageTagType
}

/**
 * A QmiMessageWmsListMessagesOutputMessageListElement struct.
 * @record 
 */
class MessageWmsListMessagesOutputMessageListElement {

    // Own properties of Qmi-1.0.Qmi.MessageWmsListMessagesOutputMessageListElement

    static name: string
}

interface MessageWmsModifyTagInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsModifyTagInput

    /**
     * Get the 'Message Mode' field from `self`.
     */
    getMessageMode(): [ /* returnType */ boolean, /* valueMessageMode */ WmsMessageMode ]
    /**
     * Get the 'Message Tag' field from `self`.
     */
    getMessageTag(): [ /* returnType */ boolean, /* valueMessageTagStorageType */ WmsStorageType, /* valueMessageTagMemoryIndex */ number, /* valueMessageTagMessageTag */ WmsMessageTagType ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsModifyTagInput
    /**
     * Set the 'Message Mode' field in the message.
     * @param valueMessageMode a #QmiWmsMessageMode.
     */
    setMessageMode(valueMessageMode: WmsMessageMode): boolean
    /**
     * Set the 'Message Tag' field in the message.
     * @param valueMessageTagStorageType a #QmiWmsStorageType.
     * @param valueMessageTagMemoryIndex a #guint32.
     * @param valueMessageTagMessageTag a #QmiWmsMessageTagType.
     */
    setMessageTag(valueMessageTagStorageType: WmsStorageType, valueMessageTagMemoryIndex: number, valueMessageTagMessageTag: WmsMessageTagType): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsModifyTagInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsModifyTagInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsModifyTagInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsModifyTagInput

    /**
     * Allocates a new #QmiMessageWmsModifyTagInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsModifyTagInput.
     * @constructor 
     */
    static new(): MessageWmsModifyTagInput
}

interface MessageWmsModifyTagOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsModifyTagOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsModifyTagOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsModifyTagOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsModifyTagOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsModifyTagOutput

    static name: string
}

interface MessageWmsRawReadInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawReadInput

    /**
     * Get the 'Message Memory Storage ID' field from `self`.
     */
    getMessageMemoryStorageId(): [ /* returnType */ boolean, /* valueMessageMemoryStorageIdStorageType */ WmsStorageType, /* valueMessageMemoryStorageIdMemoryIndex */ number ]
    /**
     * Get the 'Message Mode' field from `self`.
     */
    getMessageMode(): [ /* returnType */ boolean, /* valueMessageMode */ WmsMessageMode ]
    /**
     * Get the 'SMS on IMS' field from `self`.
     */
    getSmsOnIms(): [ /* returnType */ boolean, /* valueSmsOnIms */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawReadInput
    /**
     * Set the 'Message Memory Storage ID' field in the message.
     * @param valueMessageMemoryStorageIdStorageType a #QmiWmsStorageType.
     * @param valueMessageMemoryStorageIdMemoryIndex a #guint32.
     */
    setMessageMemoryStorageId(valueMessageMemoryStorageIdStorageType: WmsStorageType, valueMessageMemoryStorageIdMemoryIndex: number): boolean
    /**
     * Set the 'Message Mode' field in the message.
     * @param valueMessageMode a #QmiWmsMessageMode.
     */
    setMessageMode(valueMessageMode: WmsMessageMode): boolean
    /**
     * Set the 'SMS on IMS' field in the message.
     * @param valueSmsOnIms a #gboolean.
     */
    setSmsOnIms(valueSmsOnIms: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawReadInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawReadInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawReadInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsRawReadInput

    /**
     * Allocates a new #QmiMessageWmsRawReadInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsRawReadInput.
     * @constructor 
     */
    static new(): MessageWmsRawReadInput
}

interface MessageWmsRawReadOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawReadOutput

    /**
     * Get the 'Raw Message Data' field from `self`.
     */
    getRawMessageData(): [ /* returnType */ boolean, /* valueRawMessageDataMessageTag */ WmsMessageTagType, /* valueRawMessageDataFormat */ WmsMessageFormat, /* valueRawMessageDataRawData */ Uint8Array ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawReadOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawReadOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawReadOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawReadOutput

    static name: string
}

interface MessageWmsRawSendInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawSendInput

    /**
     * Get the 'CDMA Follow On DC' field from `self`.
     */
    getCdmaFollowOnDc(): [ /* returnType */ boolean, /* valueCdmaFollowOnDcFollow */ boolean ]
    /**
     * Get the 'CDMA Force On DC' field from `self`.
     */
    getCdmaForceOnDc(): [ /* returnType */ boolean, /* valueCdmaForceOnDcForce */ boolean, /* valueCdmaForceOnDcServiceOption */ WmsCdmaServiceOption ]
    /**
     * Get the 'GSM WCDMA Link Timer' field from `self`.
     */
    getGsmWcdmaLinkTimer(): [ /* returnType */ boolean, /* valueGsmWcdmaLinkTimer */ number ]
    /**
     * Get the 'Raw Message Data' field from `self`.
     */
    getRawMessageData(): [ /* returnType */ boolean, /* valueRawMessageDataFormat */ WmsMessageFormat, /* valueRawMessageDataRawData */ Uint8Array ]
    /**
     * Get the 'SMS on IMS' field from `self`.
     */
    getSmsOnIms(): [ /* returnType */ boolean, /* valueSmsOnIms */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawSendInput
    /**
     * Set the 'CDMA Follow On DC' field in the message.
     * @param valueCdmaFollowOnDcFollow a #gboolean.
     */
    setCdmaFollowOnDc(valueCdmaFollowOnDcFollow: boolean): boolean
    /**
     * Set the 'CDMA Force On DC' field in the message.
     * @param valueCdmaForceOnDcForce a #gboolean.
     * @param valueCdmaForceOnDcServiceOption a #QmiWmsCdmaServiceOption.
     */
    setCdmaForceOnDc(valueCdmaForceOnDcForce: boolean, valueCdmaForceOnDcServiceOption: WmsCdmaServiceOption): boolean
    /**
     * Set the 'GSM WCDMA Link Timer' field in the message.
     * @param valueGsmWcdmaLinkTimer a #guint8.
     */
    setGsmWcdmaLinkTimer(valueGsmWcdmaLinkTimer: number): boolean
    /**
     * Set the 'Raw Message Data' field in the message.
     * @param valueRawMessageDataFormat a #QmiWmsMessageFormat.
     * @param valueRawMessageDataRawData a #GArray of #guint8 elements. A new reference to `value_raw_message_data_raw_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRawMessageData(valueRawMessageDataFormat: WmsMessageFormat, valueRawMessageDataRawData: Uint8Array): boolean
    /**
     * Set the 'SMS on IMS' field in the message.
     * @param valueSmsOnIms a #gboolean.
     */
    setSmsOnIms(valueSmsOnIms: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawSendInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawSendInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawSendInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsRawSendInput

    /**
     * Allocates a new #QmiMessageWmsRawSendInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsRawSendInput.
     * @constructor 
     */
    static new(): MessageWmsRawSendInput
}

interface MessageWmsRawSendOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawSendOutput

    /**
     * Get the 'CDMA Cause Code' field from `self`.
     */
    getCdmaCauseCode(): [ /* returnType */ boolean, /* valueCdmaCauseCode */ WmsCdmaCauseCode ]
    /**
     * Get the 'CDMA Error Class' field from `self`.
     */
    getCdmaErrorClass(): [ /* returnType */ boolean, /* valueCdmaErrorClass */ WmsCdmaErrorClass ]
    /**
     * Get the 'GSM WCDMA Cause Info' field from `self`.
     */
    getGsmWcdmaCauseInfo(): [ /* returnType */ boolean, /* valueGsmWcdmaCauseInfoRpCause */ WmsGsmUmtsRpCause, /* valueGsmWcdmaCauseInfoTpCause */ WmsGsmUmtsTpCause ]
    /**
     * Get the 'Message Delivery Failure Type' field from `self`.
     */
    getMessageDeliveryFailureType(): [ /* returnType */ boolean, /* valueMessageDeliveryFailureType */ WmsMessageDeliveryFailureType ]
    /**
     * Get the 'Message ID' field from `self`.
     */
    getMessageId(): [ /* returnType */ boolean, /* valueMessageId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawSendOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawSendOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawSendOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawSendOutput

    static name: string
}

interface MessageWmsRawWriteInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawWriteInput

    /**
     * Get the 'Raw Message Data' field from `self`.
     */
    getRawMessageData(): [ /* returnType */ boolean, /* valueRawMessageDataStorageType */ WmsStorageType, /* valueRawMessageDataFormat */ WmsMessageFormat, /* valueRawMessageDataRawData */ Uint8Array ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawWriteInput
    /**
     * Set the 'Raw Message Data' field in the message.
     * @param valueRawMessageDataStorageType a #QmiWmsStorageType.
     * @param valueRawMessageDataFormat a #QmiWmsMessageFormat.
     * @param valueRawMessageDataRawData a #GArray of #guint8 elements. A new reference to `value_raw_message_data_raw_data` will be taken, so the caller must make sure the array was created with the correct #GDestroyNotify as clear function for each element in the array.
     */
    setRawMessageData(valueRawMessageDataStorageType: WmsStorageType, valueRawMessageDataFormat: WmsMessageFormat, valueRawMessageDataRawData: Uint8Array): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawWriteInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawWriteInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawWriteInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsRawWriteInput

    /**
     * Allocates a new #QmiMessageWmsRawWriteInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsRawWriteInput.
     * @constructor 
     */
    static new(): MessageWmsRawWriteInput
}

interface MessageWmsRawWriteOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsRawWriteOutput

    /**
     * Get the 'Memory Index' field from `self`.
     */
    getMemoryIndex(): [ /* returnType */ boolean, /* valueMemoryIndex */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsRawWriteOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsRawWriteOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsRawWriteOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsRawWriteOutput

    static name: string
}

interface MessageWmsResetOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsResetOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsResetOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsResetOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsResetOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsResetOutput

    static name: string
}

interface MessageWmsSendAckInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSendAckInput

    /**
     * Get the '3GPP2 Failure Information' field from `self`.
     */
    get3gpp2FailureInformation(): [ /* returnType */ boolean, /* value3gpp2FailureInformationErrorClass */ WmsCdmaErrorClass, /* value3gpp2FailureInformationCauseCode */ WmsCdmaCauseCode ]
    /**
     * Get the '3GPP Failure Information' field from `self`.
     */
    get3gppFailureInformation(): [ /* returnType */ boolean, /* value3gppFailureInformationRpCause */ WmsGsmUmtsRpCause, /* value3gppFailureInformationTpCause */ WmsGsmUmtsTpCause ]
    /**
     * Get the 'Information' field from `self`.
     */
    getInformation(): [ /* returnType */ boolean, /* valueInformationTransactionId */ number, /* valueInformationMessageProtocol */ WmsMessageProtocol, /* valueInformationSuccess */ boolean ]
    /**
     * Get the 'SMS on IMS' field from `self`.
     */
    getSmsOnIms(): [ /* returnType */ boolean, /* valueSmsOnIms */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSendAckInput
    /**
     * Set the '3GPP2 Failure Information' field in the message.
     * @param value3gpp2FailureInformationErrorClass a #QmiWmsCdmaErrorClass.
     * @param value3gpp2FailureInformationCauseCode a #QmiWmsCdmaCauseCode.
     */
    set3gpp2FailureInformation(value3gpp2FailureInformationErrorClass: WmsCdmaErrorClass, value3gpp2FailureInformationCauseCode: WmsCdmaCauseCode): boolean
    /**
     * Set the '3GPP Failure Information' field in the message.
     * @param value3gppFailureInformationRpCause a #QmiWmsGsmUmtsRpCause.
     * @param value3gppFailureInformationTpCause a #QmiWmsGsmUmtsTpCause.
     */
    set3gppFailureInformation(value3gppFailureInformationRpCause: WmsGsmUmtsRpCause, value3gppFailureInformationTpCause: WmsGsmUmtsTpCause): boolean
    /**
     * Set the 'Information' field in the message.
     * @param valueInformationTransactionId a #guint32.
     * @param valueInformationMessageProtocol a #QmiWmsMessageProtocol.
     * @param valueInformationSuccess a #gboolean.
     */
    setInformation(valueInformationTransactionId: number, valueInformationMessageProtocol: WmsMessageProtocol, valueInformationSuccess: boolean): boolean
    /**
     * Set the 'SMS on IMS' field in the message.
     * @param valueSmsOnIms a #gboolean.
     */
    setSmsOnIms(valueSmsOnIms: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSendAckInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSendAckInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSendAckInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsSendAckInput

    /**
     * Allocates a new #QmiMessageWmsSendAckInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsSendAckInput.
     * @constructor 
     */
    static new(): MessageWmsSendAckInput
}

interface MessageWmsSendAckOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSendAckOutput

    /**
     * Get the 'Failure Cause' field from `self`.
     */
    getFailureCause(): [ /* returnType */ boolean, /* valueFailureCause */ WmsAckFailureCause ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSendAckOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSendAckOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSendAckOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSendAckOutput

    static name: string
}

interface MessageWmsSendFromMemoryStorageInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSendFromMemoryStorageInput

    /**
     * Get the 'Information' field from `self`.
     */
    getInformation(): [ /* returnType */ boolean, /* valueInformationStorageType */ WmsStorageType, /* valueInformationMemoryIndex */ number, /* valueInformationMessageMode */ WmsMessageMode ]
    /**
     * Get the 'SMS on IMS' field from `self`.
     */
    getSmsOnIms(): [ /* returnType */ boolean, /* valueSmsOnIms */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSendFromMemoryStorageInput
    /**
     * Set the 'Information' field in the message.
     * @param valueInformationStorageType a #QmiWmsStorageType.
     * @param valueInformationMemoryIndex a #guint32.
     * @param valueInformationMessageMode a #QmiWmsMessageMode.
     */
    setInformation(valueInformationStorageType: WmsStorageType, valueInformationMemoryIndex: number, valueInformationMessageMode: WmsMessageMode): boolean
    /**
     * Set the 'SMS on IMS' field in the message.
     * @param valueSmsOnIms a #gboolean.
     */
    setSmsOnIms(valueSmsOnIms: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSendFromMemoryStorageInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSendFromMemoryStorageInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSendFromMemoryStorageInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsSendFromMemoryStorageInput

    /**
     * Allocates a new #QmiMessageWmsSendFromMemoryStorageInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsSendFromMemoryStorageInput.
     * @constructor 
     */
    static new(): MessageWmsSendFromMemoryStorageInput
}

interface MessageWmsSendFromMemoryStorageOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSendFromMemoryStorageOutput

    /**
     * Get the 'CDMA Cause Code' field from `self`.
     */
    getCdmaCauseCode(): [ /* returnType */ boolean, /* valueCdmaCauseCode */ WmsCdmaCauseCode ]
    /**
     * Get the 'CDMA Error Class' field from `self`.
     */
    getCdmaErrorClass(): [ /* returnType */ boolean, /* valueCdmaErrorClass */ WmsCdmaErrorClass ]
    /**
     * Get the 'GSM WCDMA Cause Info' field from `self`.
     */
    getGsmWcdmaCauseInfo(): [ /* returnType */ boolean, /* valueGsmWcdmaCauseInfoRpCause */ WmsGsmUmtsRpCause, /* valueGsmWcdmaCauseInfoTpCause */ WmsGsmUmtsTpCause ]
    /**
     * Get the 'Message Delivery Failure Type' field from `self`.
     */
    getMessageDeliveryFailureType(): [ /* returnType */ boolean, /* valueMessageDeliveryFailureType */ WmsMessageDeliveryFailureType ]
    /**
     * Get the 'Message ID' field from `self`.
     */
    getMessageId(): [ /* returnType */ boolean, /* valueMessageId */ number ]
    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSendFromMemoryStorageOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSendFromMemoryStorageOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSendFromMemoryStorageOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSendFromMemoryStorageOutput

    static name: string
}

interface MessageWmsSetEventReportInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSetEventReportInput

    /**
     * Get the 'New MT Message Indicator' field from `self`.
     */
    getNewMtMessageIndicator(): [ /* returnType */ boolean, /* valueNewMtMessageIndicatorReport */ boolean ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSetEventReportInput
    /**
     * Set the 'New MT Message Indicator' field in the message.
     * @param valueNewMtMessageIndicatorReport a #gboolean.
     */
    setNewMtMessageIndicator(valueNewMtMessageIndicatorReport: boolean): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSetEventReportInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSetEventReportInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSetEventReportInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsSetEventReportInput

    /**
     * Allocates a new #QmiMessageWmsSetEventReportInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsSetEventReportInput.
     * @constructor 
     */
    static new(): MessageWmsSetEventReportInput
}

interface MessageWmsSetEventReportOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSetEventReportOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSetEventReportOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSetEventReportOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSetEventReportOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSetEventReportOutput

    static name: string
}

interface MessageWmsSetRoutesInput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSetRoutesInput

    /**
     * Get the 'Route List' field from `self`.
     * 
     * Version of qmi_message_wms_set_routes_input_get_route_list() using arrays of pointers to
     * structs instead of arrays of structs, for easier binding in other languages.
     */
    getRouteList(): [ /* returnType */ boolean, /* valueRouteListPtr */ MessageWmsSetRoutesInputRouteListElement[] ]
    /**
     * Get the 'Transfer Status Report' field from `self`.
     */
    getTransferStatusReport(): [ /* returnType */ boolean, /* valueTransferStatusReport */ WmsTransferIndication ]
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSetRoutesInput
    /**
     * Set the 'Route List' field in the message.
     * @param valueRouteListPtr array of #QmiMessageWmsSetRoutesInputRouteListElement elements. The contents of the given array will be copied, the #GPtrArray will not increase its reference count.
     */
    setRouteList(valueRouteListPtr: MessageWmsSetRoutesInputRouteListElement[]): boolean
    /**
     * Set the 'Transfer Status Report' field in the message.
     * @param valueTransferStatusReport a #QmiWmsTransferIndication.
     */
    setTransferStatusReport(valueTransferStatusReport: WmsTransferIndication): boolean
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSetRoutesInput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSetRoutesInput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSetRoutesInput

    static name: string

    // Constructors of Qmi-1.0.Qmi.MessageWmsSetRoutesInput

    /**
     * Allocates a new #QmiMessageWmsSetRoutesInput.
     * @constructor 
     */
    constructor() 
    /**
     * Allocates a new #QmiMessageWmsSetRoutesInput.
     * @constructor 
     */
    static new(): MessageWmsSetRoutesInput
}

interface MessageWmsSetRoutesInputRouteListElement {

    // Own fields of Qmi-1.0.Qmi.MessageWmsSetRoutesInputRouteListElement

    /**
     * a #QmiWmsMessageType.
     * @field 
     */
    messageType: WmsMessageType
    /**
     * a #QmiWmsMessageClass.
     * @field 
     */
    messageClass: WmsMessageClass
    /**
     * a #QmiWmsStorageType.
     * @field 
     */
    storage: WmsStorageType
    /**
     * a #QmiWmsReceiptAction.
     * @field 
     */
    receiptAction: WmsReceiptAction
}

/**
 * A QmiMessageWmsSetRoutesInputRouteListElement struct.
 * @record 
 */
class MessageWmsSetRoutesInputRouteListElement {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSetRoutesInputRouteListElement

    static name: string
}

interface MessageWmsSetRoutesOutput {

    // Owm methods of Qmi-1.0.Qmi.MessageWmsSetRoutesOutput

    /**
     * Get the result of the QMI operation.
     */
    getResult(): boolean
    /**
     * Atomically increments the reference count of `self` by one.
     */
    ref(): MessageWmsSetRoutesOutput
    /**
     * Atomically decrements the reference count of `self` by one.
     * If the reference count drops to 0, `self` is completely disposed.
     */
    unref(): void
}

/**
 * The #QmiMessageWmsSetRoutesOutput structure contains private data and should only be accessed
 * using the provided API.
 * @record 
 */
class MessageWmsSetRoutesOutput {

    // Own properties of Qmi-1.0.Qmi.MessageWmsSetRoutesOutput

    static name: string
}

interface PhysicalSlotInformationSlot {

    // Own fields of Qmi-1.0.Qmi.PhysicalSlotInformationSlot

    /**
     * a #QmiUimCardProtocol.
     * @field 
     */
    cardProtocol: UimCardProtocol
    /**
     * a #guint8.
     * @field 
     */
    validApplications: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    atrValue: object[]
    /**
     * a #gboolean.
     * @field 
     */
    isEuicc: boolean
}

/**
 * A QmiPhysicalSlotInformationSlot struct.
 * @record 
 */
class PhysicalSlotInformationSlot {

    // Own properties of Qmi-1.0.Qmi.PhysicalSlotInformationSlot

    static name: string
}

interface PhysicalSlotStatusSlot {

    // Own fields of Qmi-1.0.Qmi.PhysicalSlotStatusSlot

    /**
     * a #QmiUimPhysicalCardState.
     * @field 
     */
    physicalCardStatus: UimPhysicalCardState
    /**
     * a #QmiUimSlotState.
     * @field 
     */
    physicalSlotStatus: UimSlotState
    /**
     * a #guint8.
     * @field 
     */
    logicalSlot: number
    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    iccid: object[]
}

/**
 * A QmiPhysicalSlotStatusSlot struct.
 * @record 
 */
class PhysicalSlotStatusSlot {

    // Own properties of Qmi-1.0.Qmi.PhysicalSlotStatusSlot

    static name: string
}

interface ProxyClass {

    // Own fields of Qmi-1.0.Qmi.ProxyClass

    parent: GObject.ObjectClass
}

abstract class ProxyClass {

    // Own properties of Qmi-1.0.Qmi.ProxyClass

    static name: string
}

interface ProxyPrivate {
}

class ProxyPrivate {

    // Own properties of Qmi-1.0.Qmi.ProxyPrivate

    static name: string
}

interface SlotEidElement {

    // Own fields of Qmi-1.0.Qmi.SlotEidElement

    /**
     * a #GArray of #guint8 elements.
     * @field 
     */
    eid: object[]
}

/**
 * A QmiSlotEidElement struct.
 * @record 
 */
class SlotEidElement {

    // Own properties of Qmi-1.0.Qmi.SlotEidElement

    static name: string
}

    type Message = any
}
export default Qmi;